{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "readSerialData_080006b4",
                "bVar1": "bufferOverflow",
                "iVar2": "dataByte",
                "bVar3": "bufferIndex"
            },
            "code": "int8_t __thiscall readSerialData_080006b4(Modbus *this)\n{\n  bool bufferOverflow = false;\n  int dataByte;\n  byte bufferIndex;\n\n  if (this->u8txenpin > 1) {\n    digitalWrite((uint)this->u8txenpin, 0);\n  }\n\n  this->u8BufferSize = 0;\n\n  if (this->u8serno < 4) {\n    while (dataByte = (*(this->port->super_Stream).super_Print._vptr_Print[2])(), dataByte != 0) {\n      bufferIndex = this->u8BufferSize;\n      dataByte = (*(this->port->super_Stream).super_Print._vptr_Print[3])();\n      this->au8Buffer[bufferIndex] = (uint8_t)dataByte;\n      bufferIndex++;\n      this->u8BufferSize = bufferIndex;\n      if (bufferIndex > 63) {\n        bufferOverflow = true;\n      }\n    }\n  }\n\n  this->u16InCnt++;\n\n  if (bufferOverflow) {\n    this->u16errCnt++;\n    return -3;\n  }\n\n  return this->u8BufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readSerialData_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_peripheral_by_pin_080034da",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "void* find_peripheral_by_pin_080034da(PinName_conflict target_pin, PinMap_conflict* pin_map) {\n  while(true) {\n    if(pin_map->pin == NC) {\n      return (void*)0x0;\n    }\n    if(pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_by_pin_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "clear_timer_interrupt_flags_080035fc",
                "htim": "timer_handle",
                "Instance": "timer_instance",
                "DAT_08003718": "TIMER_INSTANCE_1",
                "DAT_0800371c": "TIMER_INSTANCE_2",
                "DAT_08003720": "TIMER_INSTANCE_3",
                "DAT_08003724": "TIMER_INSTANCE_4",
                "DAT_08003728": "TIMER_INSTANCE_5",
                "DAT_0800372c": "TIMER_INSTANCE_6",
                "DAT_08003730": "TIMER_INSTANCE_7",
                "DAT_08003734": "TIMER_INSTANCE_8",
                "DAT_08003738": "TIMER_INSTANCE_9",
                "DAT_0800373c": "TIMER_INSTANCE_10",
                "DAT_08003740": "TIMER_INSTANCE_11",
                "DAT_08003744": "TIMER_INSTANCE_12",
                "DAT_08003748": "TIMER_INSTANCE_13"
            },
            "code": "void clear_timer_interrupt_flags_080035fc(TIM_HandleTypeDef *timer_handle)\n{\n  uint32_t *timer_register = (uint32_t *)(DAT_0800374c + 0x40);\n  uint32_t *interrupt_flag_register = (uint32_t *)(DAT_0800374c + 0x44);\n  \n  switch ((uint32_t)timer_handle->Instance)\n  {\n    case (uint32_t)DAT_08003718:\n      *interrupt_flag_register &= 0xFFFFFFFE;\n      break;\n    case (uint32_t)0x40000000:\n      *timer_register &= 0xFFFFFFFE;\n      break;\n    case (uint32_t)DAT_0800371c:\n      *timer_register &= 0xFFFFFFFD;\n      break;\n    case (uint32_t)DAT_08003720:\n      *timer_register &= 0xFFFFFFFB;\n      break;\n    case (uint32_t)DAT_08003724:\n      *timer_register &= 0xFFFFFFF7;\n      break;\n    case (uint32_t)DAT_08003728:\n      *timer_register &= 0xFFFFFFEF;\n      break;\n    case (uint32_t)DAT_0800372c:\n      *timer_register &= 0xFFFFFFDF;\n      break;\n    case (uint32_t)DAT_08003730:\n      *interrupt_flag_register &= 0xFFFFFFFD;\n      break;\n    case (uint32_t)DAT_08003734:\n      *interrupt_flag_register &= 0xFFFEFFFF;\n      break;\n    case (uint32_t)DAT_08003738:\n      *interrupt_flag_register &= 0xFFFDFFFF;\n      break;\n    case (uint32_t)DAT_0800373c:\n      *interrupt_flag_register &= 0xFFFBFFFF;\n      break;\n    case (uint32_t)DAT_08003740:\n      *timer_register &= 0xFFFFFFBF;\n      break;\n    case (uint32_t)DAT_08003744:\n      *timer_register &= 0xFFFFFF7F;\n      break;\n    case (uint32_t)DAT_08003748:\n      *timer_register &= 0xFFFFFEFF;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "clear_timer_interrupt_flags_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_uart_transmit_complete_08003dd0",
                "obj": "serial_obj",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003df0": "PTR_uart_handlers_08003df0",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "index": "index"
            },
            "code": "bool is_uart_transmit_complete_08003dd0(serial_t *serial_obj) {\n  HAL_UART_StateTypeDef uart_state;\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003df0 + (uint)serial_obj->index * 4);\n  uart_state = HAL_UART_GetState(uart_handler);\n  return (uart_state & 0x22U) == 0x22;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "configureClocks_08000c8c",
                "RCC_OscInitStruct": "oscInitStruct",
                "RCC_ClkInitStruct": "clkInitStruct",
                "RCC_OscInitStruct.OscillatorType": "oscInitStruct.OscillatorType",
                "RCC_OscInitStruct.HSEState": "oscInitStruct.HSEState",
                "RCC_OscInitStruct.PLL.PLLState": "oscInitStruct.PLL.PLLState",
                "RCC_OscInitStruct.PLL.PLLSource": "oscInitStruct.PLL.PLLSource",
                "RCC_OscInitStruct.PLL.PLLM": "oscInitStruct.PLL.PLLM",
                "RCC_OscInitStruct.PLL.PLLN": "oscInitStruct.PLL.PLLN",
                "RCC_OscInitStruct.PLL.PLLP": "oscInitStruct.PLL.PLLP",
                "RCC_OscInitStruct.PLL.PLLQ": "oscInitStruct.PLL.PLLQ",
                "HAL_RCC_OscConfig": "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive": "HAL_PWREx_EnableOverDrive",
                "RCC_ClkInitStruct.ClockType": "clkInitStruct.ClockType",
                "RCC_ClkInitStruct.SYSCLKSource": "clkInitStruct.SYSCLKSource",
                "RCC_ClkInitStruct.AHBCLKDivider": "clkInitStruct.AHBCLKDivider",
                "RCC_ClkInitStruct.APB1CLKDivider": "clkInitStruct.APB1CLKDivider",
                "RCC_ClkInitStruct.APB2CLKDivider": "clkInitStruct.APB2CLKDivider",
                "HAL_RCC_ClockConfig": "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "DAT_08000d30": "ptr_DAT_08000d30",
                "DAT_08000d34": "ptr_DAT_08000d34",
                "DAT_08000d38": "ptr_DAT_08000d38",
                "SysTick_IRQn": "SysTick_IRQn"
            },
            "code": "void configureClocks_08000c8c(void)\n{\n  uint32_t hclkFreq;\n  RCC_OscInitTypeDef oscInitStruct;\n  RCC_ClkInitTypeDef clkInitStruct;\n  //Enable HSE and PLL\n  *(uint *)(DAT_08000d30 + 0x40) |= 0x10000000;\n  *DAT_08000d34 |= 0xc000;\n  //Configure oscillator\n  oscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  oscInitStruct.HSEState = RCC_HSE_ON;\n  oscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  oscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  oscInitStruct.PLL.PLLM = 8;\n  oscInitStruct.PLL.PLLN = 336;\n  oscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;\n  oscInitStruct.PLL.PLLQ = 7;\n  HAL_RCC_OscConfig(&oscInitStruct);\n  //Enable OverDrive to increase frequency\n  HAL_PWREx_EnableOverDrive();\n  //Configure clocks\n  clkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n  clkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n  HAL_RCC_ClockConfig(&clkInitStruct, FLASH_LATENCY_5);\n  //Configure Systick timer\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(DAT_08000d38 * (uint64_t)hclkFreq >> 0x20));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_PWREx_EnableOverDrive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "configureClocks_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "read_registers_08000a4e",
                "this": "modbus_instance",
                "regs": "register_values",
                "u8size": "num_registers",
                "uVar1": "register_address",
                "uVar2": "register_value",
                "au8Buffer": "buffer",
                "sendTxBuffer": "send_transmit_buffer",
                "u8BufferSize": "buffer_size"
            },
            "code": "int8_t __thiscall read_registers_08000a4e(Modbus *modbus_instance, uint16_t *register_values, uint8_t num_registers) {\n  uint16_t register_address = makeWord(modbus_instance->buffer[2], modbus_instance->buffer[3]);\n  uint16_t register_value = makeWord(modbus_instance->buffer[4], modbus_instance->buffer[5]);\n  register_values[(byte)register_address] = register_value;\n  modbus_instance->buffer_size = 6;\n  send_transmit_buffer(modbus_instance);\n  return 8;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_08000a4e"
        },
        "FUN_08004774": {
            "renaming": {
                "FUN_08004774": "handleExternalInterrupt_08004774"
            },
            "code": "void handleExternalInterrupt_08004774(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004774",
            "calling": [],
            "imported": false,
            "current_name": "handleExternalInterrupt_08004774"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "main_loop_08004658",
                "initVariant": "initialize_variant",
                "setup": "setup_board",
                "loop": "execute_loop",
                "DAT_08004674": "is_data_available",
                "serialEventRun": "run_serial_event"
            },
            "code": "int main_loop_08004658(void)\n{\n  initialize_variant();\n  setup_board();\n  do {\n    do {\n      execute_loop();\n    } while (DAT_08004674() == 0);\n    run_serial_event();\n  } while( true );\n}",
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_peripheral_080034f4",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral_address"
            },
            "code": "void * find_peripheral_080034f4(PinName_conflict pin, PinMap_conflict *pin_map) {\n  void *peripheral_address = NULL;\n  if (pin != NC) {\n    peripheral_address = pinmap_find_peripheral_080034f4(pin, pin_map);\n  }\n  return peripheral_address;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "uart_debug_write",
                "uart_debug_init",
                "dac_stop",
                "pwm_stop",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_080034f4"
        },
        "FUN_0800476a": {
            "renaming": {
                "FUN_0800476a": "handle_GPIO_interrupt_0800476a",
                "PTR_": "",
                "DAT_": "",
                "2": "GPIO_PIN_2"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ handle_GPIO_interrupt_0800476a(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_XDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_QDAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800476a",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800476a"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "is_valid_pin_0800355e",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "\nbool is_valid_pin_0800355e(PinName_conflict pin, PinMap_conflict *pin_map)\n{\n  if (pin == NC) {\n    return false;\n  }\n  while (true) {\n    if (pin_map->pin == NC) {\n      return false;\n    }\n    if (pin == pin_map->pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_valid_pin_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "read_file_0800573c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800573c(int *error_code, int file_descriptor, char *buffer, int buffer_size) { \n\tint read_result; \n\tint *errno_ptr = PTR_errno_0800575c; \n\t*(int *)PTR_errno_0800575c = 0; \n\tread_result = _read(file_descriptor, buffer, buffer_size); \n\tif ((read_result == -1) && (*(int *)errno_ptr != 0)) { \n\t\t*error_code = *(int *)errno_ptr; \n\t}\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "receive_data_08003e54",
                "obj": "serial_object",
                "callback": "callback_function",
                "uVar2": "rx_status",
                "bVar1": "index",
                "PTR_rx_callback_08003ea0": "rx_callback_ptr",
                "PTR_rx_callback_obj_08003ea4": "rx_callback_obj_ptr",
                "PTR_uart_handlers_08003ea8": "uart_handlers_ptr"
            },
            "code": "void receive_data_08003e54(serial_t *serial_object, _func_void_serial_t_ptr *callback_function) {\\n  byte index;\\n  uint8_t rx_status;\\n  if (serial_object != (serial_t *)0x0) {\\n    rx_status = serial_rx_active(serial_object);\\n    if (rx_status == \"\\0\") {\\n      index = serial_object->index;\\n      *(_func_void_serial_t_ptr **)(PTR_rx_callback_08003ea0 + (uint)index * 4) = callback_function;\\n      *(serial_t **)(PTR_rx_callback_obj_08003ea4 + (uint)index * 4) = serial_object;\\n      HAL_NVIC_SetPriority(serial_object->irq, 0, 1);\\n      HAL_NVIC_EnableIRQ(serial_object->irq);\\n      HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003ea8 + (uint)serial_object->index * 4), &serial_object->recv, 1);\\n    }\\n  }\\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "receive_data_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "print_formatted_string_08004fdc",
                "__format": "format",
                "in_r1": "stack_var1",
                "in_r2": "stack_var2",
                "in_r3": "stack_var3",
                "iVar1": "impure_ptr",
                "pcVar2": "string",
                "uStack_c": "stack_var1",
                "uStack_8": "stack_var2",
                "uStack_4": "stack_var3"
            },
            "code": "int print_formatted_string_08004fdc(char *format, ...)\n{\n  int impure_ptr = *(int *)PTR__impure_ptr_08005008;\n  char *string = format;\n  undefined4 stack_var1 = in_r1;\n  undefined4 stack_var2 = in_r2;\n  undefined4 stack_var3 = in_r3;\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  int result = _vfprint_r(impure_ptr, *(undefined4 *)(impure_ptr + 8), format, &stack_var1, string, &stack_var2);\n  return result;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "get_file_status_080056d4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "status",
                "puVar1": "error_ptr",
                "iVar2": "result"
            },
            "code": "void get_file_status_080056d4(int *error_code, int file_descriptor, stat *status) {\n  undefined *error_ptr;\n  int result;\n  error_ptr = PTR_errno_080056f4;\n  *(undefined4 *)PTR_errno_080056f4 = 0;\n  result = _fstat(file_descriptor, status);\n  if ((result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080056d4"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "stop_and_reset_dac_channel_080033d8",
                "PinName_conflict": "conflicting_pin_name",
                "uint32_t Channel": "uint32_t channelNumber",
                "DAC_HandleTypeDef DacHandle": "DAC_HandleTypeDef dacHandle",
                "Channel": "channelNumber"
            },
            "code": "void stop_and_reset_dac_channel_080033d8(PinName_conflict pin)\n{\n  uint32_t channelNumber;\n  DAC_HandleTypeDef dacHandle;\n  dacHandle.Instance = (DAC_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)PTR_PinMap_DAC_08003408);\n  if ((dacHandle.Instance != (DAC_TypeDef *)0x0) && ((channelNumber = get_dac_channel(pin), channelNumber == 0 || (channelNumber == 0x10)))) {\n    HAL_DAC_Stop(&dacHandle, channelNumber);\n    HAL_DAC_DeInit(&dacHandle);\n  }\n  return;\n}",
            "called": [
                "HAL_DAC_Stop",
                "pinmap_peripheral",
                "get_dac_channel",
                "HAL_DAC_DeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_and_reset_dac_channel_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(UART_HandleTypeDef *huart)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  uint32_t uVar7;\n  uint32_t uVar8;\n  uint32_t uVar9;\n  uint32_t uVar10;\n  uint32_t uVar11;\n  USART_TypeDef *pUVar12;\n  \n  huart->Instance->CR2 = huart->Instance->CR2 & 0xffffcfff | (huart->Init).StopBits;\n  huart->Instance->CR1 =\n       huart->Instance->CR1 & 0xffff69f3 |\n       (huart->Init).WordLength | (huart->Init).Parity | (huart->Init).Mode |\n       (huart->Init).OverSampling;\n  huart->Instance->CR3 = huart->Instance->CR3 & 0xfffffcff | (huart->Init).HwFlowCtl;\n  if ((huart->Init).OverSampling == 0x8000) {\n    pUVar12 = huart->Instance;\n    if ((pUVar12 != (USART_TypeDef *)0x40011000) && (pUVar12 != (USART_TypeDef *)0x40011400)) {\n      uVar3 = HAL_RCC_GetPCLK1Freq();\n      uVar2 = DAT_08002d08;\n      uVar8 = (huart->Init).BaudRate;\n      uVar1 = (ulonglong)DAT_08002d08;\n      uVar4 = HAL_RCC_GetPCLK1Freq();\n      uVar9 = (huart->Init).BaudRate;\n      uVar5 = HAL_RCC_GetPCLK1Freq();\n      uVar10 = (huart->Init).BaudRate;\n      uVar6 = HAL_RCC_GetPCLK1Freq();\n      uVar11 = (huart->Init).BaudRate;\n      uVar7 = HAL_RCC_GetPCLK1Freq();\n      pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                   (ulonglong)\n                                   (((uVar6 * 0x19) / (uVar11 << 1) +\n                                    (uint)((ulonglong)uVar2 *\n                                           ((ulonglong)(uVar7 * 0x19) /\n                                           (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100\n                                    ) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                     ((uint)((ulonglong)uVar2 *\n                             (ulonglong)\n                             (((uVar4 * 0x19) / (uVar9 << 1) +\n                              (uint)((ulonglong)uVar2 *\n                                     ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25)\n                              * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                     (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                     0x10;\n      return;\n    }\n    uVar3 = HAL_RCC_GetPCLK2Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK2Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK2Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK2Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK2Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 1) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100)\n                                  * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 1) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25) *\n                            -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  pUVar12 = huart->Instance;\n  if ((pUVar12 != DAT_08002d04) && (pUVar12 != (USART_TypeDef *)&DAT_08002d04[0x24].CR2)) {\n    uVar3 = HAL_RCC_GetPCLK1Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK1Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK1Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK1Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK1Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 2) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100)\n                                  * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 2) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                            -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  uVar3 = HAL_RCC_GetPCLK2Freq();\n  uVar2 = DAT_08002d08;\n  uVar8 = (huart->Init).BaudRate;\n  uVar1 = (ulonglong)DAT_08002d08;\n  uVar4 = HAL_RCC_GetPCLK2Freq();\n  uVar9 = (huart->Init).BaudRate;\n  uVar5 = HAL_RCC_GetPCLK2Freq();\n  uVar10 = (huart->Init).BaudRate;\n  uVar6 = HAL_RCC_GetPCLK2Freq();\n  uVar11 = (huart->Init).BaudRate;\n  uVar7 = HAL_RCC_GetPCLK2Freq();\n  pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                               (ulonglong)\n                               (((uVar6 * 0x19) / (uVar11 << 2) +\n                                (uint)((ulonglong)uVar2 *\n                                       ((ulonglong)(uVar7 * 0x19) /\n                                       (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100) *\n                                0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                 ((uint)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uVar4 * 0x19) / (uVar9 << 2) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                          -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                 (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                 0x10;\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "setClockConfig_08002488",
                "RCC_ClkInitStruct_conflict": "clockInitStruct",
                "FLatency": "flashLatency",
                "puVar1": "flashLatencyPtr",
                "uVar2": "sysClockFreq",
                "uVar3": "tickStart",
                "uVar4": "timeout"
            },
            "code": "HAL_StatusTypeDef setClockConfig_08002488(RCC_ClkInitTypeDef_conflict *clockInitStruct, uint32_t flashLatency) {\n  uint32_t *flashLatencyPtr;\n  uint32_t sysClockFreq;\n  uint32_t tickStart;\n  uint32_t timeout = 5000;\n  \n  flashLatencyPtr = (uint32_t *)0x080025d0;\n  if (clockInitStruct == NULL) {\n    return HAL_ERROR;\n  }\n  if (((*flashLatencyPtr & 0xf) < flashLatency) &&\n     (*(char *)flashLatencyPtr = (char)flashLatency, flashLatency != (*flashLatencyPtr & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n    if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;\n    }\n    RCC->CFGR &= ~(RCC_CFGR_HPRE_DIV16 | RCC_CFGR_HPRE_DIV8 | RCC_CFGR_HPRE_DIV4);\n    RCC->CFGR |= clockInitStruct->AHBCLKDivider;\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n    switch (clockInitStruct->SYSCLKSource) {\n      case RCC_SYSCLKSOURCE_HSI:\n        if ((RCC->CR & RCC_CR_HSION) == 0) {\n          return HAL_ERROR;\n        }\n        break;\n      case RCC_SYSCLKSOURCE_HSE:\n        if ((RCC->CR & RCC_CR_HSEON) == 0) {\n          return HAL_ERROR;\n        }\n        break;\n      case RCC_SYSCLKSOURCE_PLLCLK:\n        if ((RCC->CR & RCC_CR_PLLON) == 0) {\n          return HAL_ERROR;\n        }\n        break;\n      default:\n        return HAL_ERROR;\n    }\n    RCC->CFGR &= ~RCC_CFGR_SW;\n    RCC->CFGR |= clockInitStruct->SYSCLKSource;\n    tickStart = HAL_GetTick();\n    while ((RCC->CFGR & RCC_CFGR_SWS) != (clockInitStruct->SYSCLKSource << 2)) {\n      if ((HAL_GetTick() - tickStart) > timeout) {\n        return HAL_TIMEOUT;\n      }\n    }\n  }\n  flashLatencyPtr = (uint32_t *)0x080025d0;\n  if ((flashLatency < (*flashLatencyPtr & 0xf)) &&\n     (*(char *)flashLatencyPtr = (char)flashLatency, flashLatency != (*flashLatencyPtr & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n    RCC->CFGR &= ~(RCC_CFGR_PPRE1);\n    RCC->CFGR |= clockInitStruct->APB1CLKDivider;\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n    RCC->CFGR &= ~(RCC_CFGR_PPRE2);\n    RCC->CFGR |= (clockInitStruct->APB2CLKDivider << 3);\n  }\n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  SystemCoreClock = (sysClockFreq >> AHBPrescTable[(RCC->CFGR >> 0x10) & 0x0F]);\n  HAL_InitTick(0x0);\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "setClockConfig_08002488"
        },
        "FUN_08004788": {
            "renaming": {
                "FUN_08004788": "handle_GPIO_EXTI_interrupt_08004788",
                "PTR_DAT_80004d0c": "interrupt_line",
                "DAT_08000000": "EXTI_LINE_4"
            },
            "code": "void handle_GPIO_EXTI_interrupt_08004788(void)\n{\n  uint32_t PTR_DAT_80004d0c = DAT_08000000;\n  HAL_GPIO_EXTI_IRQHandler(PTR_DAT_80004d0c);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004788",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_interrupt_08004788"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544::FUN_08004544": "IPAddress::IPAddress",
                "this": "this",
                "first_octet": "first",
                "second_octet": "second",
                "third_octet": "third",
                "fourth_octet": "fourth",
                "super_Printable": "super_Printable",
                "_vptr_Printable": "_vptr_Printable",
                "_address": "_address",
                "bytes": "bytes",
                "FUN_08004544": "IPAddress_08004544"
            },
            "code": "class IPAddress_08004544 {\npublic:\n    uint8_t first_octet;\n    uint8_t second_octet;\n    uint8_t third_octet;\n    uint8_t fourth_octet;\n\n    IPAddress_08004544(uint8_t first, uint8_t second, uint8_t third, uint8_t fourth) {\n        first_octet = first;\n        second_octet = second;\n        third_octet = third;\n        fourth_octet = fourth;\n    }\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "IPAddress_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "initialize_uart_debug_08003cc8",
                "PinName_conflict pin": "PinName_conflict digital_pin",
                "undefined *obj": "undefined *serial_debug_obj",
                "PinName_conflict PVar1": "PinName_conflict uart_tx_pin",
                "void *pvVar2": "void *uart_peripheral"
            },
            "code": "void initialize_uart_debug_08003cc8(void)\n{\n  PinName_conflict digital_pin;\n  undefined *serial_debug_obj;\n  PinName_conflict uart_tx_pin;\n  void *uart_peripheral;\n\n  digital_pin = *(PinName_conflict *)(PTR_digitalPin_08003d08 + 0x9a);\n  uart_peripheral = pinmap_peripheral(digital_pin,(PinMap_conflict *)PTR_PinMap_UART_TX_08003d0c);\n  if (uart_peripheral != (void *)0x0) {\n    uart_tx_pin = pinmap_pin(uart_peripheral,(PinMap_conflict *)PTR_PinMap_UART_RX_08003d10);\n    serial_debug_obj = PTR_serial_debug_08003d14;\n    *(PinName_conflict *)(PTR_serial_debug_08003d14 + 0x5a) = uart_tx_pin;\n    *(PinName_conflict *)(serial_debug_obj + 0x58) = digital_pin;\n    *(undefined4 *)(serial_debug_obj + 0x48) = 0x2580;\n    *(undefined4 *)(serial_debug_obj + 0x54) = 0;\n    *(undefined4 *)(serial_debug_obj + 0x4c) = 0;\n    *(undefined4 *)(serial_debug_obj + 0x50) = 0;\n    uart_init((serial_t *)serial_debug_obj);\n  }\n  return;\n}",
            "called": [
                "pinmap_peripheral",
                "uart_init",
                "pinmap_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "configure_gpio_pins_08000fb4",
                "GPIOx": "gpio",
                "GPIO_Init": "init",
                "puVar1": "temp_ptr_1",
                "puVar2": "temp_ptr_2",
                "uVar3": "bit_mask",
                "uVar4": "temp_1",
                "uVar5": "pin_number",
                "uVar6": "pin_mask",
                "uVar7": "mode",
                "uVar9": "temp_2",
                "tmpreg": "temp",
                "iVar8": "port_index",
                "iVar10": "bit_index",
                "DAT_0800118c": "EXTI",
                "DAT_08001184": "SYSCFG"
            },
            "code": "void configure_gpio_pins_08000fb4(GPIO_TypeDef *gpio, GPIO_InitTypeDef *init)\n{\n  uint32_t pin_mask;\n  uint32_t pin_number;\n  uint32_t alternate_function;\n  uint32_t speed;\n  uint32_t pull;\n  uint32_t mode;\n  uint32_t port_index;\n  uint32_t bit_index;\n  uint32_t bit_mask;\n  uint32_t temp;\n  for (pin_number = 0; pin_number < 16; pin_number++) {\n    bit_mask = 1 << pin_number;\n    if ((bit_mask & init->Pin) == bit_mask) {\n      mode = init->Mode;\n      if ((mode == GPIO_MODE_AF_PP) || (mode == GPIO_MODE_AF_OD)) {\n        alternate_function = init->Alternate;\n        port_index = pin_number / 8;\n        bit_index = (pin_number % 8) * 4;\n        temp = gpio->AFR[port_index];\n        temp &= ~(0xF << bit_index);\n        temp |= alternate_function << bit_index;\n        gpio->AFR[port_index] = temp;\n      }\n      bit_mask = ~(3 << (pin_number * 2));\n      gpio->MODER &= bit_mask;\n      gpio->MODER |= (mode & 3) << (pin_number * 2);\n      if (((mode - 1) < 2) || (mode == GPIO_MODE_ANALOG)) {\n        speed = init->Speed;\n        gpio->OSPEEDR &= bit_mask;\n        gpio->OSPEEDR |= speed << (pin_number * 2);\n        gpio->OTYPER &= ~bit_mask;\n        gpio->OTYPER |= ((mode << 0x1B) >> 0x1F) << pin_number;\n      }\n      pull = init->Pull;\n      gpio->PUPDR &= bit_mask;\n      gpio->PUPDR |= pull << (pin_number * 2);\n      if ((mode & GPIO_MODE_IT_RISING_FALLING) != 0) {\n        temp = 0x4000;\n        temp |= (pin_number % 4) * 4;\n        temp = (uint32_t)&DAT_0800118c->RTSR + temp;\n        *temp |= 1 << (pin_number & 3);\n        temp = 0x4000;\n        temp |= (pin_number % 4) * 4;\n        temp = (uint32_t)&DAT_0800118c->FTSR + temp;\n        *temp |= 1 << (pin_number & 3);\n        temp = (uint32_t)&DAT_08001184->DAT_0800118cCR[pin_number / 4];\n        temp &= ~(0xF << ((pin_number % 4) * 4));\n        port_index = gpio_to_index(gpio);\n        temp |= port_index << ((pin_number % 4) * 4);\n        DAT_08001184->DAT_0800118cCR[pin_number / 4] = temp;\n      }\n    }\n  }\n}\n\nuint32_t gpio_to_index(GPIO_TypeDef *gpio)\n{\n  if (gpio == GPIOA) {\n    return 0;\n  }\n  if (gpio == GPIOB) {\n    return 1;\n  }\n  if (gpio == GPIOC) {\n    return 2;\n  }\n  if (gpio == GPIOD) {\n    return 3;\n  }\n  if (gpio == GPIOE) {\n    return 4;\n  }\n  if (gpio == GPIOF) {\n    return 5;\n  }\n  if (gpio == GPIOG) {\n    return 6;\n  }\n  if (gpio == GPIOH) {\n    return 7;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08000fb4"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "processI2CData_08001bfc",
                "hi2c": "i2cHandler",
                "HVar1": "i2cState",
                "pIVar2": "i2cInstance",
                "puVar3": "dataPtr",
                "tmpreg": "tmpReg"
            },
            "code": "HAL_StatusTypeDef processI2CData_08001bfc(I2C_HandleTypeDef *i2cHandler)\n{\n  HAL_I2C_StateTypeDef i2cState;\n  I2C_TypeDef *i2cInstance;\n  uint8_t *dataPtr;\n  uint32_t tmpReg;\n  \n  i2cState = i2cHandler->State;\n  i2cHandler->Instance->CR2 = i2cHandler->Instance->CR2 & 0xfffff8ff;\n  i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 1;\n  i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 & 0xfffffbff;\n  i2cInstance = i2cHandler->Instance;\n  if ((i2cInstance->CR2 & 0x800) != 0) {\n    if ((i2cHandler->State == HAL_I2C_STATE_BUSY_RX) || (i2cHandler->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandler->XferCount = (uint16_t)i2cHandler->hdmarx->Instance->NDTR;\n    }\n    else {\n      i2cHandler->XferCount = (uint16_t)i2cHandler->hdmatx->Instance->NDTR;\n    }\n  }\n  if (i2cHandler->XferCount != 0) {\n    if ((i2cInstance->SR1 & 4) != 0) {\n      dataPtr = i2cHandler->pBuffPtr;\n      i2cHandler->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cInstance->DR;\n      i2cHandler->XferCount = i2cHandler->XferCount - 1;\n    }\n    if ((i2cHandler->Instance->SR1 & 0x40) != 0) {\n      dataPtr = i2cHandler->pBuffPtr;\n      i2cHandler->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cHandler->Instance->DR;\n      i2cHandler->XferCount = i2cHandler->XferCount - 1;\n    }\n    i2cHandler->ErrorCode = i2cHandler->ErrorCode | 4;\n  }\n  if (i2cHandler->ErrorCode == 0) {\n    if (((i2cState == HAL_I2C_STATE_LISTEN) || (i2cState == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (i2cState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandler->XferOptions = DAT_08001cfc;\n      i2cHandler->PreviousState = 0;\n      i2cHandler->State = HAL_I2C_STATE_READY;\n      i2cHandler->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2cHandler);\n    }\n    else if ((i2cHandler->PreviousState == 0x22) || (i2cState == HAL_I2C_STATE_BUSY_RX)) {\n      i2cHandler->PreviousState = 0;\n      i2cHandler->State = HAL_I2C_STATE_READY;\n      i2cHandler->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandler);\n    }\n  }\n  else {\n    I2C_ITError(i2cHandler);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "I2C_ITError",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "processI2CData_08001bfc"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "huart": "uart"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002d72(UART_HandleTypeDef *uart)\n{\n  if (uart != NULL) {\n    if (uart->gState == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->gState = HAL_UART_STATE_BUSY;\n    uart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart);\n    uart->Instance->CR2 &= ~(1 << 11);\n    uart->Instance->CR3 &= ~(1 << 2);\n    uart->Instance->CR1 |= (1 << 13);\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "checkModbusRequest_080007f0",
                "this": "modbus",
                "bVar1": "isSupported",
                "uVar2": "startAddress",
                "uVar3": "numberOfRegisters",
                "uVar4": "i",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "u8regsize": "registerSize",
                "PTR_fctsupported_080008c8": "supportedFunctions"
            },
            "code": "uint8_t __thiscall checkModbusRequest_080007f0(Modbus *modbus)\n{\n  bool isSupported = false;\n  uint16_t startAddress, numberOfRegisters;\n  uint8_t i = 0;\n\n  while(i <= 7)\n  {\n    if (modbus->au8Buffer[1] == PTR_fctsupported_080008c8[i])\n    {\n      isSupported = true;\n      break;\n    }\n    i++;\n  }\n\n  if (!isSupported)\n  {\n    modbus->u16errCnt++;\n    return 0x01;\n  }\n\n  switch(modbus->au8Buffer[1])\n  {\n    case READ_COILS:\n    case READ_DISCRETE_INPUTS:\n    case READ_HOLDING_REGISTERS:\n    case READ_INPUT_REGISTERS:\n      startAddress = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n      numberOfRegisters = makeWord(modbus->au8Buffer[4], modbus->au8Buffer[5]);\n      if (modbus->u8regsize < numberOfRegisters)\n      {\n        return 0x02;\n      }\n      return 0x00;\n\n    case WRITE_SINGLE_COIL:\n      startAddress = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n      if ((uint)modbus->u8regsize < ((uint)startAddress << 0x14) >> 0x18)\n      {\n        return 0x02;\n      }\n      return 0x00;\n\n    case WRITE_SINGLE_REGISTER:\n      startAddress = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n      if (modbus->u8regsize < startAddress)\n      {\n        return 0x02;\n      }\n      return 0x00;\n\n    default:\n      return 0x00;\n  }\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkModbusRequest_080007f0"
        },
        "FUN_0800477e": {
            "renaming": {
                "FUN_0800477e": "handle_GPIO_ext_interrupt_0800477e",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_GPIO_ext_interrupt_0800477e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800477e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_ext_interrupt_0800477e"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "write_data_to_file_0800562a",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data_buffer",
                "param_4": "data_size",
                "is_offset_negative": "is_offset_negative"
            },
            "code": "void write_data_to_file_0800562a(int file_descriptor, int data_offset, void* data_buffer, int data_size)\n{\n  int is_offset_negative = (int)((uint)*(ushort *)(data_offset + 0xc) << 0x17) < 0;\n  if (is_offset_negative) {\n    _lseek_r(file_descriptor, (int)*(short *)(data_offset + 0xe), 0, 2);\n  }\n  *(ushort *)(data_offset + 0xc) = *(ushort *)(data_offset + 0xc) & 0xefff;\n  _write_r(file_descriptor, (int)*(short *)(data_offset + 0xe), data_buffer, data_size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initializeSerialConnection_080044d8",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel"
            },
            "code": "void initializeSerialConnection_080044d8(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize != 1) {\n    return;\n  }\n  if (priorityLevel == 0xffff) {\n    HardwareSerial::HardwareSerial((HardwareSerial *)PTR_Serial3_080044f8, DAT_080044f4);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [
                "_GLOBAL__sub_I_Serial3"
            ],
            "imported": false,
            "current_name": "initializeSerialConnection_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_uart_transmit_complete_08003df4",
                "obj": "serial_obj",
                "HVar1": "uart_state",
                "(PTR_uart_handlers_08003e14 + (uint)obj->index * 4)": "uart_handler"
            },
            "code": "bool is_uart_transmit_complete_08003df4(serial_t *serial_obj)\n{\n  UART_HandleTypeDef *(PTR_uart_handlers_08003e14 + (uint)obj->index * 4) = *(UART_HandleTypeDef **)(PTR_(PTR_uart_handlers_08003e14 + (uint)obj->index * 4)s_08003e14 + (uint)serial_obj->index * 4);\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState((PTR_uart_handlers_08003e14 + (uint)obj->index * 4));\n  bool is_complete = (uart_state & 0x21U) == 0x21;\n  return is_complete;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "initialize_file_stream_08005400",
                "param_1": "error_code_ptr",
                "piVar1": "file_stream_array_ptr",
                "piVar2": "file_stream_ptr",
                "iVar3": "file_stream_array_size",
                "ppiVar4": "file_stream_array_head_ptr"
            },
            "code": "int * initialize_file_stream_08005400(undefined4 *error_code_ptr)\n{\n  int *file_stream_ptr;\n  int *file_stream_array_ptr;\n  int array_index;\n  int **file_stream_array_head_ptr;\n  int file_stream_array_size = *(int *)PTR__global_impure_ptr_08005474;\n  if (*(int *)(file_stream_array_size + 0x18) == 0) {\n    __sinit(file_stream_array_size);\n  }\n  file_stream_array_head_ptr = (int **)(file_stream_array_size + 0x48);\n  while (true) {\n    file_stream_ptr = (*file_stream_array_head_ptr)[2];\n    file_stream_array_ptr = (*file_stream_array_head_ptr)[1];\n    while (file_stream_array_ptr = (int *)((int)file_stream_array_ptr + -1), -1 < (int)file_stream_array_ptr) {\n      if (*(short *)(file_stream_ptr + 3) == 0) {\n        *(undefined2 *)((int)file_stream_ptr + 0xe) = 0xffff;\n        *(undefined2 *)(file_stream_ptr + 3) = 1;\n        file_stream_ptr[0x19] = 0;\n        *file_stream_ptr = 0;\n        file_stream_ptr[2] = 0;\n        file_stream_ptr[1] = 0;\n        file_stream_ptr[4] = 0;\n        file_stream_ptr[5] = 0;\n        file_stream_ptr[6] = 0;\n        memset(file_stream_ptr + 0x17, 0, 8);\n        file_stream_ptr[0xd] = 0;\n        file_stream_ptr[0xe] = 0;\n        file_stream_ptr[0x12] = 0;\n        file_stream_ptr[0x13] = 0;\n        return file_stream_ptr;\n      }\n      file_stream_ptr = file_stream_ptr + 0x1a;\n    }\n    if (*file_stream_array_head_ptr == (int *)0x0) {\n      file_stream_array_ptr = (int *)__sfmoreglue(error_code_ptr, 4);\n      *file_stream_array_head_ptr = file_stream_array_ptr;\n      if (file_stream_array_ptr == (int *)0x0) {\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    file_stream_array_head_ptr = (int **)*file_stream_array_head_ptr;\n  }\n}",
            "called": [
                "__sinit",
                "__sfmoreglue",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_file_stream_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "get_non_null_pointer_08003582",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void * get_non_null_pointer_08003582(void *ptr1, void *ptr2) {\n  if (ptr1 != ptr2) {\n    if (ptr1 == NULL) {\n      return ptr2;\n    }\n    if (ptr2 == NULL) {\n      return ptr1;\n    }\n    ptr1 = NULL;\n  }\n  return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_non_null_pointer_08003582"
        },
        "FUN_08004792": {
            "renaming": {
                "FUN_08004792": "handle_GPIO_EXTI_IRQs_08004792",
                "uVar1": "GPIO_pin",
                "PTR_": "no change",
                "DAT_": "no change"
            },
            "code": "void handle_GPIO_EXTI_IRQs_08004792(void)\n{\n  uint16_t GPIO_pin = 0x20;\n  uint16_t GPIO_pin_limit = 0x201;\n\n  while (GPIO_pin < GPIO_pin_limit) {\n    HAL_GPIO_EXTI_IRQHandler(GPIO_pin);\n    GPIO_pin = GPIO_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004792",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_IRQs_08004792"
        },
        "FUN_08005760": {
            "renaming": {
                "std::FUN_08005760": "abort_program",
                "FUN_08005760": "abort_program_08005760"
            },
            "code": "void abort_program_08005760(void)\n{\n\tabort();\n}\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "pin": "input_pin",
                "uVar1": "pin",
                "uVar2": "bit_count"
            },
            "code": "uint8_t count_bits_set_08004678(uint16_t input_pin) {\n  uint16_t pin = input_pin;\n  uint8_t bit_count = 0;\n  while (pin != 1) {\n    bit_count++;\n    pin >>= 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "enable_i2c_listen_mode_08003900",
                "hi2c": "i2c_handler",
                "piVar1": "i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_mode_08003900(I2C_HandleTypeDef *i2c_handler)\n{\n  i2c_t *i2c_object = get_i2c_object(i2c_handler);\n  if (i2c_object->is_master == 0) {\n    HAL_I2C_EnableListen_IT(i2c_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_mode_08003900"
        },
        "FUN_08005768": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005768": "set_all_pointers_to_one",
                "PTR_id_080057fc": "pointer_1",
                "PTR_id_08005800": "pointer_2",
                "PTR_id_08005804": "pointer_3",
                "PTR_id_08005808": "pointer_4",
                "PTR_id_0800580c": "pointer_5",
                "PTR_id_08005810": "pointer_6",
                "PTR_id_08005814": "pointer_7",
                "PTR_id_08005818": "pointer_8",
                "PTR_id_0800581c": "pointer_9",
                "PTR_id_08005820": "pointer_10",
                "PTR_id_08005824": "pointer_11",
                "FUN_08005768": "set_all_pointers_to_one_08005768"
            },
            "code": "void set_all_pointers_to_one_08005768(void)\n{\n  if (*(int *)PTR_id_080057fc < -1U) {\n    *(undefined4 *)PTR_id_080057fc = 1;\n  }\n  if (*(int *)PTR_id_08005800 < -1U) {\n    *(undefined4 *)PTR_id_08005800 = 1;\n  }\n  if (*(int *)PTR_id_08005804 < -1U) {\n    *(undefined4 *)PTR_id_08005804 = 1;\n  }\n  if (*(int *)PTR_id_08005808 < -1U) {\n    *(undefined4 *)PTR_id_08005808 = 1;\n  }\n  if (*(int *)PTR_id_0800580c < -1U) {\n    *(undefined4 *)PTR_id_0800580c = 1;\n  }\n  if (*(int *)PTR_id_08005810 < -1U) {\n    *(undefined4 *)PTR_id_08005810 = 1;\n  }\n  if (*(int *)PTR_id_08005814 < -1U) {\n    *(undefined4 *)PTR_id_08005814 = 1;\n  }\n  if (*(int *)PTR_id_08005818 < -1U) {\n    *(undefined4 *)PTR_id_08005818 = 1;\n  }\n  if (*(int *)PTR_id_0800581c < -1U) {\n    *(undefined4 *)PTR_id_0800581c = 1;\n  }\n  if (*(int *)PTR_id_08005820 < -1U) {\n    *(undefined4 *)PTR_id_08005820 = 1;\n  }\n  if (*(int *)PTR_id_08005824 < -1U) {\n    *(undefined4 *)PTR_id_08005824 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005768",
            "calling": [],
            "imported": false,
            "current_name": "set_all_pointers_to_one_08005768"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_interrupt_handler_08000f0c",
                "IRQn": "interrupt_number",
                "uVar1": "interrupt_bit_position",
                "PTR_DAT_08000f28": "interrupt_enable_register_address"
            },
            "code": "void set_interrupt_handler_08000f0c(IRQn_Type_conflict interrupt_number)\n{\n  uint32_t interrupt_bit_position = (uint32_t)interrupt_number;\n  if (interrupt_bit_position >= 0) {\n    uint32_t* PTR_DAT_08000f28 = (uint32_t*)(DAT_08000f28 + ((interrupt_bit_position >> 5) + 0x60) * 4);\n    uint32_t interrupt_enable_bit_position = 1 << (interrupt_bit_position & 0x1f);\n    *PTR_DAT_08000f28 = interrupt_enable_bit_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [
                "USART6_IRQHandler",
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART5_IRQHandler",
                "UART7_IRQHandler",
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "createResponsePacket_08000998",
                "this": "modbusObject",
                "regs": "registers",
                "u8size": "numRegisters",
                "bVar1": "functionCode",
                "uVar2": "bufferIndex",
                "uVar3": "startingAddress",
                "uVar4": "numDataBytes",
                "uVar5": "i",
                "uVar6": "nextBufferIndex"
            },
            "code": "int8_t __thiscall createResponsePacket_08000998(Modbus *this, uint16_t *registers, uint8_t numRegisters)\n{\n  byte functionCode;\n  uint8_t i;\n  uint16_t startingAddress;\n  uint16_t numDataBytes;\n  uint8_t bufferIndex;\n\n  startingAddress = makeWord(this->au8Buffer[2], this->au8Buffer[3]);\n  numDataBytes = makeWord(this->au8Buffer[4], this->au8Buffer[5]);\n  this->au8Buffer[2] = (byte)numDataBytes << 1;\n  this->u8BufferSize = 3;\n  for (i = (uint8_t)startingAddress, bufferIndex = 3; i < startingAddress + numDataBytes; i++, bufferIndex += 2) {\n    functionCode = this->u8BufferSize;\n    this->au8Buffer[functionCode] = (uint8_t)(registers[i] >> 8);\n    this->au8Buffer[bufferIndex] = *(uint8_t *)(registers + i);\n    this->u8BufferSize = bufferIndex + 1;\n  }\n  bufferIndex = this->u8BufferSize;\n  sendTxBuffer(this);\n  return bufferIndex + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "createResponsePacket_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "receive_uart_data_08003f94",
                "huart": "uart_handle",
                "tmpval": "temp_value"
            },
            "code": "void receive_uart_data_08003f94(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t temp_value;\n  \n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "execute_signal_handler_080055d0",
                "__sig": "signal_number",
                "iVar1": "result",
                "_FUN_080055d0_r": "_execute_signal_handler_r"
            },
            "code": "int execute_signal_handler_080055d0(int signal_number)\n{\n  int result = _execute_signal_handler_080055d0_r(*(undefined4 *)PTR__impure_ptr_080055dc, signal_number);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "execute_signal_handler_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "check_is_terminal_080056f8",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_is_terminal_080056f8(int *error_code_ptr, int file_descriptor) {\n  undefined *errno_ptr;\n  int is_terminal;\n\n  errno_ptr = PTR_errno_08005714;\n  *(undefined4 *)PTR_errno_08005714 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_is_terminal_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_file_permission_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "permission_status",
                "param_4": "permission_bits",
                "iVar1": "file_status",
                "uVar2": "permission_code",
                "auStack_4c": "file_status_buffer",
                "local_48": "file_mode"
            },
            "code": "int check_file_permission_080054b4(int file_descriptor, int file_info_offset, int* permission_status, uint* permission_bits) {\n  int file_status = *(short *)(file_info_offset + 0xe);\n  if (file_status < 0 || _fstat_r(file_descriptor, file_status, (void*)permission_status) < 0) {\n    *permission_bits = 0;\n    if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0) {\n      *permission_status = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *permission_bits = (uint)((file_status & 0xf000) == 0x2000);\n  }\n  *permission_status = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permission_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "handleI2CState_0800171a",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "pbVar2": "buffer_ptr",
                "uVar3": "transfer_options"
            },
            "code": "HAL_StatusTypeDef handleI2CState_0800171a(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state = i2c_handle->State;\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  if ((i2c_handle->XferSize == 0) && (current_state == HAL_I2C_STATE_BUSY_TX)) {\n    if ((transfer_options == 4) || ((transfer_options == 8 || (transfer_options == 0xffff0000)))) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2c_handle);\n      }\n      else {\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n      i2c_handle->PreviousState = 0x11;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2c_handle);\n    }\n  }\n  else if ((current_state == HAL_I2C_STATE_BUSY_TX) || ((i2c_handle->Mode == HAL_I2C_MODE_MEM && (current_state == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2c_handle->XferCount == 0) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2c_handle->EventCount == 0) {\n        if (i2c_handle->MemaddSize == 1) {\n          i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n          i2c_handle->EventCount = i2c_handle->EventCount + 2;\n        }\n        else {\n          i2c_handle->Instance->DR = (i2c_handle->Memaddress << 0x10) >> 0x18;\n          i2c_handle->EventCount = i2c_handle->EventCount + 1;\n        }\n      }\n      else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = i2c_handle->Memaddress & 0xff;\n        i2c_handle->EventCount = i2c_handle->EventCount + 1;\n      }\n      else if (i2c_handle->EventCount == 2) {\n        if (current_state == HAL_I2C_STATE_BUSY_RX) {\n          i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x100;\n        }\n        else if (current_state == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n          i2c_handle->pBuffPtr = buffer_ptr + 1;\n          i2c_handle->Instance->DR = (uint)*buffer_ptr;\n          i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint)*buffer_ptr;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CState_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "initializeIPAddress_08004560",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel"
            },
            "code": "void initializeIPAddress_08004560(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize == 1 && priorityLevel == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08004588, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "decodeModbus_08000a7a",
                "this": "modbus",
                "regs": "registers",
                "u8size": "register_count",
                "uVar1": "start_address",
                "uVar2": "register_data_count",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_index"
            },
            "code": "int8_t __thiscall decodeModbus_08000a7a(Modbus *modbus,uint16_t *registers,uint8_t register_count)\n{\n  uint16_t start_address = makeWord(modbus->buffer[2],modbus->buffer[3]);\n  uint16_t register_data_count = makeWord(modbus->buffer[4],modbus->buffer[5]);\n  uint bit_index = 0;\n  uint byte_index = 7;\n  for (uint i = 0; i < register_data_count; i++) {\n    uint byte_offset = (i + start_address) * 0x100000 >> 0x18;\n    uint bit_offset = (i + start_address) & 0xf;\n    if (((int)(uint)modbus->buffer[byte_index] >> bit_index & 1U) == 0) {\n      registers[byte_offset] = registers[byte_offset] & ~(ushort)(1 << bit_offset);\n    }\n    else {\n      registers[byte_offset] = (ushort)(1 << bit_offset) | registers[byte_offset];\n    }\n    bit_index = (bit_index + 1) % 8;\n    if (bit_index == 0) {\n      byte_index = (byte_index + 1) % 256;\n    }\n  }\n  modbus->buffer_size = '\\x06';\n  sendTxBuffer(modbus);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decodeModbus_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "calculate_uint32_08004cb0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "input_3",
                "param_5": "function_pointer",
                "iVar1": "return_value",
                "uVar2": "max_value",
                "uVar3": "loop_counter",
                "bVar4": "loop_condition"
            },
            "code": "uint32_t calculate_uint32_08004cb0(uint32_t input_1, uint32_t* input_2, uint32_t* output_1, uint32_t input_3, code* function_pointer)\\n{\\n  uint32_t max_value = input_2[4];\\n  if ((int)input_2[4] < (int)input_2[2]) {\\n    max_value = input_2[2];\\n  }\\n  *output_1 = max_value;\\n  if (*(char *)((int)input_2 + 0x43) != \"\\0\") {\\n    *output_1 = max_value + 1;\\n  }\\n  if ((int)(*input_2 << 0x1a) < 0) {\\n    *output_1 = *output_1 + 2;\\n  }\\n  uint32_t loop_counter = *input_2 & 6;\\n  if (loop_counter == 0) {\\n    for (; (int)loop_counter < (int)(input_2[3] - *output_1); loop_counter = loop_counter + 1) {\\n      int return_value = (*function_pointer)(input_1, input_3, (int)input_2 + 0x19, 1);\\n      if (return_value == -1) {\\n        return UINT32_MAX;\\n      }\\n    }\\n  }\\n  uint32_t add_value = (uint32_t)*(byte *)((int)input_2 + 0x43);\\n  if (add_value != 0) {\\n    add_value = 1;\\n  }\\n  if ((int)(*input_2 << 0x1a) < 0) {\\n    *(undefined *)((int)input_2 + add_value + 0x43) = 0x30;\\n    *(undefined *)((int)input_2 + add_value + 0x44) = *(undefined *)((int)input_2 + 0x45);\\n    add_value = add_value + 2;\\n  }\\n  int return_value = (*function_pointer)(input_1, input_3, (int)input_2 + 0x43, add_value);\\n  if (return_value != -1) {\\n    uint32_t loop_value = input_2[3];\\n    bool loop_condition = (*input_2 & 6) == 4;\\n    if (loop_condition) {\\n      loop_value = loop_value - *output_1;\\n    }\\n    if (loop_condition) {\\n      loop_value = loop_value & ~((int)loop_value >> 0x1f);\\n    }\\n    else {\\n      loop_value = 0;\\n    }\\n    if ((int)input_2[4] < (int)input_2[2]) {\\n      loop_value = loop_value + (input_2[2] - input_2[4]);\\n    }\\n    uint32_t loop_counter = 0;\\n    while( true ) {\\n      if (loop_value == loop_counter) {\\n        return 0;\\n      }\\n      int return_value = (*function_pointer)(input_1, input_3, (int)input_2 + 0x1a, 1);\\n      if (return_value == -1) break;\\n      loop_counter = loop_counter + 1;\\n    }\\n  }\\n  return UINT32_MAX;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "calculate_uint32_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_RTC_user_callback_08003594",
                "hrtc": "rtc_handler",
                "PTR_RTCUserCallback_080035a4": "rtc_user_callback",
                "PTR_callbackUserData_080035a8": "callback_user_data"
            },
            "code": "void execute_RTC_user_callback_08003594(RTC_HandleTypeDef *rtc_handler) {\n  if (*(code **)PTR_RTCUserCallback_080035a4 != (code *)0x0) {\n    (**(code **)PTR_RTCUserCallback_080035a4)(*(undefined4 *)PTR_callbackUserData_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "execute_RTC_user_callback_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "reset_uart_08002940",
                "huart": "uart_handler",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "rx_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "code": "void reset_uart_08002940(UART_HandleTypeDef *uart_handler)\n{\n  // Clear the ninth bit of CR1 register\n  uart_handler->Instance->CR1 &= ~(1 << 8);\n  // Clear the LSB of CR3 register\n  uart_handler->Instance->CR3 &= ~(1 << 0);\n  // Set RxState to READY\n  uart_handler->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_current_milliseconds_08004204",
                "uVar1": "current_milliseconds"
            },
            "code": "uint32_t get_current_milliseconds_08004204(void)\n{\n  uint32_t current_milliseconds = GetCurrentMilli();\n  return current_milliseconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "sendTxBuffer",
                "poll"
            ],
            "imported": false,
            "current_name": "get_current_milliseconds_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "handleSystemTick_08003476",
                "noOsSystickHandler": "handleNoOsSystick"
            },
            "code": "void handleSystemTick_08003476(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystick();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "handleSystemTick_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "setReceivePin_08004444",
                "_rx": "receivePin",
                "PVar1": "pinName",
                "PTR_digitalPin_0800445c": "digitalPinToPinName_0800445c"
            },
            "code": "void __thiscall setReceivePin_08004444(HardwareSerial *this,uint32_t receivePin)\n{\n  PinName pinName;\n  if (receivePin < 0x60) {\n    pinName = *(PinName *)(PTR_digitalPin_0800445c + receivePin * 2);\n  }\n  else {\n    pinName = NC;\n  }\n  (this->_serial).pin_rx = pinName;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setReceivePin_08004444"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "kill_process_if_exists_080055e0",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_exists_080055e0(int *error_code, int process_id, int signal){\n  undefined *errno_ptr;\n  int kill_result;\n  errno_ptr = PTR_errno_08005600;\n  *(undefined4 *)PTR_errno_08005600 = 0;\n  kill_result = _kill(process_id, signal);\n  if ((kill_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_exists_080055e0"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_current_tick_0800346c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_0800346c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data_address",
                "uVar1": "sfp_result",
                "iVar2": "global_impure_ptr",
                "bVar3": "is_global_impure_ptr"
            },
            "code": "void initialize_data_080053a0(int data_address)\n{\n  if (*(int *)(data_address + 0x18) == 0) {\n    *(int *)(data_address + 0x48) = 0;\n    *(int *)(data_address + 0x4c) = 0;\n    *(int *)(data_address + 0x50) = 0;\n    int global_impure_ptr = *(int *)PTR__global_impure_ptr_080053f8;\n    *(int *)(data_address + 0x28) = DAT_080053fc;\n    bool is_global_impure_ptr = data_address == global_impure_ptr;\n    if (is_global_impure_ptr) {\n      global_impure_ptr = 1;\n    }\n    if (is_global_impure_ptr) {\n      *(int *)(data_address + 0x18) = global_impure_ptr;\n    }\n    undefined4 sfp_result = __sfp();\n    *(undefined4 *)(data_address + 4) = sfp_result;\n    sfp_result = __sfp(data_address);\n    *(undefined4 *)(data_address + 8) = sfp_result;\n    sfp_result = __sfp(data_address);\n    *(undefined4 *)(data_address + 0xc) = sfp_result;\n    std_isra_0(*(undefined4 *)(data_address + 4),4,0);\n    std_isra_0(*(undefined4 *)(data_address + 8),9,1);\n    std_isra_0(*(undefined4 *)(data_address + 0xc),0x12,2);\n    *(int *)(data_address + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "__swbuf_r",
                "_fflush_r",
                "__swsetup_r",
                "iprintf",
                "_vfiprintf_r",
                "__sfp"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_08003918": {
            "renaming": {
                "FUN_08003918": "handle_i2c_event_interrupt_08003918",
                "PTR_i2c_handles_08003924": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_event_interrupt_08003918(I2C_HandleTypeDef** PTR_i2c_handles_08003924)\n{\n  HAL_I2C_EV_IRQHandler(*PTR_i2c_handles_08003924);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003918",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08003918"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nHAL_StatusTypeDef FUNC_0800201c(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_080022d0;\n  if (RCC_OscInitStruct == (RCC_OscInitTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_080022d4 = 0;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_080022d8 = 0;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    HVar2 = HAL_OK;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    HVar2 = HAL_ERROR;\n  }\n  else if (uVar3 == 2) {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLM |\n             (RCC_OscInitStruct->PLL).PLLN << 6 |\n             (((RCC_OscInitStruct->PLL).PLLP >> 1) - 1) * 0x10000 |\n             (RCC_OscInitStruct->PLL).PLLQ << 0x18;\n        *DAT_080023b0 = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "setChannelState_080028d4",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channelState",
                "CCER": "channelControlRegister"
            },
            "code": "void setChannelState_080028d4(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState) {\n  uint32_t channelMask = 4 << (channel & 0xff);\n  timer->CCER &= ~channelMask;\n  timer->CCER |= channelState << (channel & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "setChannelState_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "send_debug_data_080040ec",
                "file_UNUSED": "file_descriptor",
                "ptr": "data_buffer",
                "len": "buffer_length",
                "sVar1": "data_sent",
                "uart_debugFUN_080040ec": "send_data_to_uart_debug"
            },
            "code": "int send_debug_data_080040ec(int file_descriptor, char *data_buffer, int buffer_length)\n{\n  size_t data_sent;\n  data_sent = send_data_to_uart_debug((uint8_t *)data_buffer, buffer_length);\n  return data_sent;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_debug_data_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "listen_mode_transfer_08001460",
                "hi2c": "i2c_handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef listen_mode_transfer_08001460(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options) {\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmpreg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "listen_mode_transfer_08001460"
        },
        "FUN_08004298": {
            "renaming": {
                "FUN_08004298": "waitUntilTxComplete_08004298",
                "this": "serialObject",
                "_written": "isDataWritten",
                "_serial": "serialPort",
                "tx_head": "transmitHead",
                "tx_tail": "transmitTail"
            },
            "code": "void __thiscall waitUntilTxComplete_08004298(HardwareSerial *serialObject)\n{\n  if (serialObject->_written != false) {\n    do {\n    } while ((serialObject->_serial).tx_head != (serialObject->_serial).tx_tail);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004298",
            "calling": [],
            "imported": false,
            "current_name": "waitUntilTxComplete_08004298"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "i2c_handle_slave_transmission_08003880",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_object",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "buffer",
                "_func_void": "_func_void",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "ushort": "ushort",
                "HAL_I2C_Slave_Sequential_Receive_IT": "HAL_I2C_Slave_Sequential_Receive_IT"
            },
            "code": "void i2c_handle_slave_transmission_08003880(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code)\n{\n  i2c_t *i2c_object = get_i2c_object(i2c_handle);\n  if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\n    if (transfer_direction == I2C_DIRECTION_TRANSMIT) {\n      i2c_object->buffer_size = 0;\n      i2c_object->slave_mode = I2C_SLAVE_MODE_TRANSMIT;\n      if (i2c_object->on_slave_transmit != NULL) {\n        (*i2c_object->on_slave_transmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT(i2c_handle, i2c_object->buffer, (ushort)i2c_object->buffer_size, 8);\n      return;\n    }\n    i2c_object->slave_mode = I2C_SLAVE_MODE_RECEIVE;\n    HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_object->buffer, 0x20, 8);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_handle_slave_transmission_08003880"
        },
        "FUN_08003fd4": {
            "renaming": {
                "FUN_08003fd4": "handle_USART1_interrupt_08003fd4",
                "USART1_IRQn": "USART1_interrupt",
                "PTR_uart_handlers_08003fe8": "uart_handlers_ptr",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "code": "void handle_USART1_interrupt_08003fd4(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_08003fe8);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd4",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART1_interrupt_08003fd4"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_uart_state_ready_08002f4c",
                "huart": "uart_handle"
            },
            "code": "HAL_StatusTypeDef set_uart_state_ready_08002f4c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t cr1_reg_mask = 0xffffffbf;\n  uart_handle->Instance->CR1 = uart_handle->Instance->CR1 & cr1_reg_mask;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_uart_state_ready_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "initialize_data_080035bc",
                "puVar1": "data_ptr",
                "DAT_080035f0": "data_ptr",
                "DAT_080035f4": "data_value",
                "DAT_080035f8": "undefined_data"
            },
            "code": "void initialize_data_080035bc(void)\n{\n  uint *DAT_080035f0;\n  DAT_080035f0 = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  DAT_080035f0[2] = 0;\n  *DAT_080035f0 &= 0xfef6ffff;\n  DAT_080035f0[1] = DAT_080035f4;\n  *DAT_080035f0 &= 0xfffbffff;\n  DAT_080035f0[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_data_080035bc"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initializeModbusSlave_08000c4c",
                "PTR_slave_08000c60": "modbus_slave"
            },
            "code": "void initializeModbusSlave_08000c4c(void)\n{\n  startForkserver(0);\n  Modbus::begin(&PTR_slave_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "startForkserver",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeModbusSlave_08000c4c"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec",
                "PTR_APBPrescTable_08002608": "APB_prescaler_table",
                "DAT_08002604": "data_08002604"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_080025ec(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08002608[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "timer_interrupt_handler_080037fc",
                "PTR_timer_handles_0800380c": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt"
            },
            "code": "void timer_interrupt_handler_080037fc(void) {\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_0800380c_0800380c + 0x18);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [],
            "imported": false,
            "current_name": "timer_interrupt_handler_080037fc"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "write_to_stream_08004a60",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "puVar2": "end_of_buffer",
                "iVar1": "status",
                "iVar3": "result"
            },
            "code": "int write_to_stream_08004a60(int stream, int character, void *buffer, int buffer_length) {\n  int result = 0;\n  void *end_of_buffer = buffer + buffer_length;\n  while (buffer != end_of_buffer) {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    int status = __sfputc_r(stream, *buffer, character, buffer_length, result);\n    buffer++;\n    result = status + 1;\n  }\n  return result;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "get_file_status_080050d0",
                "param_1": "status",
                "param_2": "file_stream",
                "uVar1": "result",
                "uVar2": "stream_flags",
                "iVar3": "impure_ptr"
            },
            "code": "uint get_file_status_080050d0(int* status, int* file_stream)\n{\n  uint result = 0;\n  int impure_ptr = *(int*)PTR__impure_ptr_0800519c;\n  if (impure_ptr != 0 && *(int*)(impure_ptr + 0x18) == 0) {\n    __sinit(impure_ptr);\n  }\n  if (file_stream == (int*)PTR___sf_fake_stdin_080051a0) {\n    file_stream = *(int**)(impure_ptr + 4);\n  }\n  else if (file_stream == (int*)PTR___sf_fake_stdout_080051a4) {\n    file_stream = *(int**)(impure_ptr + 8);\n  }\n  else if (file_stream == (int*)PTR___sf_fake_stderr_080051a8) {\n    file_stream = *(int**)(impure_ptr + 0xc);\n  }\n  ushort stream_flags = *(ushort*)(file_stream + 3);\n  uint flags = (uint)stream_flags;\n  if (-1 < (int)(flags << 0x1c)) {\n    if (-1 < (int)(flags << 0x1b)) {\n      *status = 9;\n      goto end;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((int*)file_stream[0xd] != (int*)0x0) {\n        if ((int*)file_stream[0xd] != file_stream + 0x11) {\n          _free_r(status);\n        }\n        file_stream[0xd] = 0;\n      }\n      *(ushort*)(file_stream + 3) = *(ushort*)(file_stream + 3) & 0xffdb;\n      file_stream[1] = 0;\n      *file_stream = file_stream[4];\n    }\n    *(ushort*)(file_stream + 3) = *(ushort*)(file_stream + 3) | 8;\n  }\n  if (file_stream[4] == 0 && ((stream_flags & 0x280) != 0x200)) {\n    __smakebuf_r(status, file_stream);\n  }\n  stream_flags = *(ushort*)(file_stream + 3);\n  flags = stream_flags & 1;\n  if ((stream_flags & 1) == 0) {\n    if (-1 < (int)((uint)stream_flags << 0x1e)) {\n      flags = file_stream[5];\n    }\n    file_stream[2] = flags;\n  }\n  else {\n    file_stream[2] = 0;\n    file_stream[6] = -file_stream[5];\n  }\n  if (file_stream[4] == 0) {\n    stream_flags = *(ushort*)(file_stream + 3);\n    flags = (int)(short)stream_flags & 0x80;\n    if (flags != 0) {\n      *(ushort*)(file_stream + 3) = stream_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    flags = 0;\n  }\n  end:\n  return flags;\n}",
            "called": [
                "__smakebuf_r",
                "__sinit",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "allocation_status",
                "param_2": "block_size",
                "puVar1": "sbrk_start",
                "uVar2": "sbrk_result",
                "puVar3": "free_list",
                "iVar4": "block_size_diff",
                "uVar5": "block_size_diff",
                "puVar6": "prev_free_block",
                "puVar7": "free_block",
                "uVar8": "aligned_block_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *allocation_status, uint block_size) {\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *allocation_status = 0xc;\n  }\n  else {\n    __malloc_lock();\n    undefined *sbrk_start = PTR___malloc_sbrk_start_08004a30;\n    uint *free_list = *(uint **)PTR___malloc_free_list_08004a2c;\n    uint *prev_free_block = *(uint **)PTR___malloc_free_list_08004a2c;\n    while (uint *free_block = prev_free_block, free_block != (uint *)0x0) {\n      uint block_size_diff = *free_block - aligned_block_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (prev_free_block == free_block) {\n            aligned_block_size = prev_free_block[1];\n          }\n          else {\n            aligned_block_size = free_block[1];\n          }\n          if (prev_free_block == free_block) {\n            *(uint *)PTR___malloc_free_list_08004a2c = aligned_block_size;\n            free_block = prev_free_block;\n          }\n          else {\n            prev_free_block[1] = aligned_block_size;\n          }\n        }\n        else {\n          *free_block = block_size_diff;\n          *(uint *)((int)free_block + block_size_diff) = aligned_block_size;\n          free_block = (uint *)((int)free_block + block_size_diff);\n        }\n        goto LAB_080049dc;\n      }\n      prev_free_block = free_block;\n      free_list = (uint *)free_block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08004a30 == 0) {\n      uint sbrk_result = _sbrk_r(allocation_status);\n      *(undefined4 *)sbrk_start = sbrk_result;\n    }\n    uint *new_block = (uint *)_sbrk_r(allocation_status,aligned_block_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((free_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == free_block ||\n        (_sbrk_r(allocation_status,(int)free_block - (int)new_block) != -1)))) {\n      *free_block = aligned_block_size;\nLAB_080049dc:\n      __malloc_unlock(allocation_status);\n      aligned_block_size = (int)free_block + 0xbU & 0xfffffff8;\n      int block_size_diff = aligned_block_size - (int)(free_block + 1);\n      if (block_size_diff != 0) {\n        *(int *)((int)free_block + block_size_diff) = -block_size_diff;\n        return aligned_block_size;\n      }\n      return aligned_block_size;\n    }\n    *allocation_status = 0xc;\n    __malloc_unlock(allocation_status);\n  }\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_uart_flag_08002d0c",
                "huart": "uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tick_start",
                "Timeout": "timeout",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_uart_flag_08002d0c(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t tick_start, uint32_t timeout)\n{\n  uint32_t current_tick;\n  do {\n    bool flag_status = ((flag & ~uart_handle->Instance->SR) == 0);\n    if (flag_status != (bool)status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0) && ((current_tick = HAL_GetTick()), (current_tick - tick_start) <= timeout)));\n  uart_handle->Instance->CR1 &= ~(1 << 6);\n  uart_handle->Instance->CR3 &= ~(1 << 0);\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_uart_flag_08002d0c"
        },
        "FUN_0800404c": {
            "renaming": {
                "FUN_0800404c": "handle_USART6_interrupt_0800404c",
                "USART6_IRQn": "USART6_interrupt",
                "PTR_uart_handlers_08004060": "PTR_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "UART_HandleTypeDef": "UART_handler",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "code": "void handle_USART6_interrupt_0800404c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART6_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_uart_handlers_08004060_08004060 + 0x14);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800404c",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART6_interrupt_0800404c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "receive_data_08001904",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef receive_data_08001904(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2c_handle->XferCount < 4) {\n      if (i2c_handle->XferCount < 2) {\n        i2c_handle->Instance->CR1 &= 0xfffffbff;\n        i2c_handle->Instance->CR2 &= 0xfffff8ff;\n        buffer_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = buffer_pointer + 1;\n        *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n        i2c_handle->XferCount--;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->PreviousState = 0;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2c_handle);\n        }\n      }\n    }\n    else {\n      buffer_pointer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_pointer + 1;\n      *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount--;\n      if (i2c_handle->XferCount == 3) {\n        i2c_handle->Instance->CR2 &= 0xfffffbff;\n      }\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "pollModbusSlaveData_08000c64",
                "PTR_slave_08000c78": "PTR_slave_data",
                "PTR_au16data_08000c74": "PTR_slave_data_array"
            },
            "code": "void pollModbusSlaveData_08000c64(void)\n{\n  Modbus::poll((Modbus *)PTR_slave_08000c78,(uint16_t *)PTR_au16data_08000c74,16);\n  return;\n}",
            "called": [
                "poll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "pollModbusSlaveData_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "handle_uart_interrupt_08002ffc",
                "huart": "uart_handle",
                "HVar1": "status",
                "uVar2": "cr1",
                "pUVar3": "usart",
                "uVar4": "cr3",
                "uVar5": "sr",
                "DAT_08003118": "uart_handle->hdmarx->XferAbortCallback"
            },
            "code": "void handle_uart_interrupt_08002ffc(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr;\n  USART_TypeDef *usart;\n  uint32_t cr1;\n  uint32_t cr3;\n  uint32_t error_code;\n\n  usart = uart_handle->Instance;\n  sr = usart->SR;\n  cr1 = usart->CR1;\n  cr3 = usart->CR3;\n\n  if (((sr & USART_SR_RXNE) == 0) && ((sr & USART_SR_IDLE) != 0)) && ((cr1 & USART_CR1_IDLEIE) != 0)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n\n  if (((sr & USART_SR_RXNE) == 0) || ((cr3 & USART_CR3_EIE) == 0 && ((cr1 & (USART_CR1_PEIE | USART_CR1_RXNEIE)) == 0))) {\n    if (((sr & USART_SR_TXE) != 0) && ((cr1 & USART_CR1_TXEIE) != 0)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if (((sr & USART_SR_TC) != 0) && ((cr1 & USART_CR1_TCIE) != 0)) {\n      UART_EndTransmit_IT(uart_handle);\n    }\n  }\n  else {\n    error_code = 0;\n    if (((sr & USART_SR_PE) != 0) && ((cr1 & USART_CR1_PEIE) != 0)) {\n      error_code |= HAL_UART_ERROR_PE;\n    }\n    if (((sr & USART_SR_FE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      error_code |= HAL_UART_ERROR_FE;\n    }\n    if (((sr & USART_SR_NE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      error_code |= HAL_UART_ERROR_NE;\n    }\n    if (((sr & USART_SR_ORE) != 0) && ((cr3 & USART_CR3_EIE) != 0)) {\n      error_code |= HAL_UART_ERROR_ORE;\n    }\n    if (error_code != 0) {\n      if (((sr & USART_SR_IDLE) != 0) && ((cr1 & USART_CR1_IDLEIE) != 0)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if (((error_code & HAL_UART_ERROR_ORE) == 0) && ((cr3 & USART_CR3_DMAR) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        error_code = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      usart = uart_handle->Instance;\n      if ((usart->CR3 & USART_CR3_DMAR) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      usart->CR3 &= ~USART_CR3_DMAR;\n      if (uart_handle->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      DAT_08003118 = DAT_08003118;\n      status = HAL_DMA_Abort_IT(uart_handle->hdmarx);\n      if (status != HAL_OK) {\n        (*DAT_08003118)(uart_handle->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "UART_Receive_IT",
                "UART_EndTransmit_IT",
                "UART_Transmit_IT",
                "UART_EndRxTransfer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [
                "USART6_IRQHandler",
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART5_IRQHandler",
                "UART7_IRQHandler",
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_uart_interrupt_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "get_i2c_handle_0800387c",
                "hi2c": "i2c_handle_ptr"
            },
            "code": "typedef struct { uint32_t EventCount; } i2c_t;\n\ni2c_t * get_i2c_handle_0800387c(I2C_HandleTypeDef *i2c_handle_ptr) {\n  return (i2c_t *)&i2c_handle_ptr[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_handle_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_pin_name_0800351e",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap",
                "PVar1": "pin_name",
                "pinmap_find_pin": "find_pin_from_map"
            },
            "code": "PinName find_pin_name_0800351e(void *peripheral, PinMap *map) {\n  PinName pin_name;\n  if (peripheral != NULL) {\n    pin_name = find_pin_from_map(peripheral, map);\n    return pin_name;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "find_pin_name_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "receive_uart_data_08002f66",
                "huart": "uart_handle",
                "pbVar1": "rx_buffer_ptr",
                "uVar2": "remaining_data",
                "puVar3": "rx_buffer_ptr",
                "RxState": "rx_state",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "Init": "init",
                "WordLength": "word_length",
                "Parity": "parity",
                "pRxBuffPtr": "rx_buffer_ptr",
                "Instance": "instance",
                "DR": "received_data",
                "RxXferCount": "remaining_data",
                "HAL_UART_STATE_READY": "HAL_READY",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "HAL_UART_RxCpltCallback": "rx_complete_callback",
                "HAL_StatusTypeDef": "status_type_def",
                "uint8_t": "uint8_t",
                "uint16_t": "uint16_t"
            },
            "code": "HAL_StatusTypeDef receive_uart_data_08002f66(UART_HandleTypeDef *uart_handle)\n{\n  uint8_t *rx_buffer_ptr;\n  uint16_t remaining_data;\n  uint16_t received_data;\n  if (uart_handle->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uart_handle->Init).WordLength == 0x1000) {\n    if ((uart_handle->Init).Parity == 0) {\n      received_data = (uint16_t)((uart_handle->Instance->DR << 0x17) >> 0x17);\n      *(uint16_t *)uart_handle->pRxBuffPtr = received_data;\n      uart_handle->pRxBuffPtr += 2;\n    }\n    else {\n      received_data = (uint16_t)uart_handle->Instance->DR & 0xff;\n      *(uint16_t *)uart_handle->pRxBuffPtr = received_data;\n      uart_handle->pRxBuffPtr++;\n    }\n  }\n  else if ((uart_handle->Init).Parity == 0) {\n    rx_buffer_ptr = uart_handle->pRxBuffPtr;\n    uart_handle->pRxBuffPtr = rx_buffer_ptr + 1;\n    *rx_buffer_ptr = (uint8_t)uart_handle->Instance->DR;\n  }\n  else {\n    rx_buffer_ptr = uart_handle->pRxBuffPtr;\n    uart_handle->pRxBuffPtr = rx_buffer_ptr + 1;\n    *rx_buffer_ptr = (uint8_t)uart_handle->Instance->DR & 0x7f;\n  }\n  remaining_data = uart_handle->RxXferCount - 1;\n  uart_handle->RxXferCount = remaining_data;\n  if (remaining_data != 0) {\n    return HAL_OK;\n  }\n  uart_handle->Instance->CR1 &= 0xfffffedf;\n  uart_handle->Instance->CR3 &= 0xfffffffe;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_GPIO_pin_state_080034b6",
                "port": "GPIO_port",
                "pin": "GPIO_pin",
                "val": "state"
            },
            "code": "void set_GPIO_pin_state_080034b6(GPIO_TypeDef *port, uint32_t pin, uint32_t state) {\n  if (state == 0) {\n    HAL_GPIO_WritePin(port, (uint16_t)pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(port, (uint16_t)pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_GPIO_pin_state_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "transmit_data_08003eac",
                "obj": "serial_obj",
                "callback": "callback_func",
                "bVar1": "serial_index",
                "PTR_tx_callback_08003ef4": "tx_callback_ptr",
                "PTR_tx_callback_obj_08003ef8": "tx_callback_obj_ptr",
                "PTR_uart_handlers_08003efc": "uart_handler_ptr",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "irq": "irq",
                "HAL_NVIC_EnableIRQ": "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT": "HAL_UART_Transmit_IT",
                "tx_buff": "tx_buff_ptr"
            },
            "code": "void transmit_data_08003eac(serial_t *serial_obj, _func_int_serial_t_ptr *callback_func) {\n  if (serial_obj != NULL) {\n    uint8_t serial_index = serial_obj->index;\n    _func_int_serial_t_ptr **PTR_tx_callback_08003ef4 = PTR_tx_callback_08003ef4 + serial_index * 4;\n    serial_t **PTR_tx_callback_obj_08003ef8 = PTR_tx_callback_obj_08003ef8 + serial_index * 4;\n    HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_obj->irq);\n    UART_HandleTypeDef **PTR_uart_handlers_08003efc = PTR_uart_handlers_08003efc + serial_obj->index * 4;\n    uint8_t *tx_buff_ptr = serial_obj->tx_buff + serial_obj->tx_tail;\n    HAL_UART_Transmit_IT(*PTR_uart_handlers_08003efc, tx_buff_ptr, 1);\n    *PTR_tx_callback_08003ef4 = callback_func;\n    *PTR_tx_callback_obj_08003ef8 = serial_obj;\n  }\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "transmit_data_08003eac"
        },
        "FUN_08004064": {
            "renaming": {
                "FUN_08004064": "handle_uart_interrupt_08004064",
                "UART7_IRQn": "UART7_Interrupt",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18)": "uart_handler"
            },
            "code": "void handle_uart_interrupt_08004064(UART_HandleTypeDef **(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18))\n{\n  HAL_NVIC_ClearPendingIRQ(UART7_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18));\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004064",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08004064"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "receive_data_08003e18",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "rx_active_flag"
            },
            "code": "int receive_data_08003e18(serial_t *serial_obj, uchar *received_char) {\n  uint8_t rx_active_flag;\n  \n  if (serial_obj == NULL) {\n    return -1;\n  }\n  \n  rx_active_flag = serial_rx_active(serial_obj);\n  if (rx_active_flag == 0) {\n    *received_char = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **) (PTR_uart_handlers_08003e50 + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  \n  return -1;\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_errno_to_22_080040fc",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_08004108": "PTR_errno_08004108"
            },
            "code": "int set_errno_to_22_080040fc(int pid_unused, int sig_unused)\n{\n  *(undefined4 *)PTR_errno_08004108 = 22;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "transmit_data_08002dd0",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef transmit_data_08002dd0(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  \n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n    return HAL_ERROR;\n  }\n  \n  uart_handle->Lock = HAL_LOCKED;\n  uart_handle->ErrorCode = 0;\n  uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n  uart_handle->TxXferSize = size;\n  uart_handle->TxXferCount = size;\n  while (uart_handle->TxXferCount != 0) {\n    uart_handle->TxXferCount--;\n    if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        uart_handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n      if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n        data += 2;\n      }\n      else {\n        data++;\n      }\n    }\n    else {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        uart_handle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = (uint32_t)*data;\n      data++;\n    }\n  }\n  status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_time, timeout);\n  if (status != HAL_OK) {\n    uart_handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n  }\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "transmit_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "printToFile_08004860",
                "__stream": "file",
                "__format": "format",
                "iVar1": "result",
                "in_r2": "arg1",
                "in_r3": "arg2",
                "uStack_8": "stackArg1",
                "uStack_4": "stackArg2"
            },
            "code": "int printToFile_08004860(FILE *file, char *format, ...)\n{\n  int result;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 stackArg1;\n  undefined4 stackArg2;\n  \n  stackArg1 = arg1;\n  stackArg2 = arg2;\n  result = _vprintToFile_08004860_r(*(undefined4 *)PTR__impure_ptr_08004880, file, format, &stackArg1, file, &stackArg2);\n  return result;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "printToFile_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "__thiscall Print::FUN_08004622": "size_t Print::printNumber",
                "this": "this",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08004622": "Print::printNumber_08004622"
            },
            "code": "size_t Print::printNumber_08004622(Print *this, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = printNumber(this, number, (uint8_t)base);\n    return size;\n  }\n  size = (**this->_vptr_Print)(this, number & 0xff);\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "Print::printNumber_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "stop_pwm_signal_08003414",
                "pin": "pin_name",
                "Channel": "channel_number",
                "uVar1": "function_number",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_08003414(PinName_conflict pin)\n{\n  uint32_t channel_number;\n  uint32_t function_number;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)PTR_PinMap_PWM_08003468);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) && (((channel_number = get_pwm_channel(pin), channel_number == 0 || (channel_number == 4)) || (channel_number == 8)) || ((channel_number == 0xc || (channel_number == 0x18)))))) {\n    function_number = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_08003468);\n    if ((function_number & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle,channel_number);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle,channel_number);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIMEx_PWMN_Stop",
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "seek_and_set_errno_08005718",
                "param_1": "output_errno",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_pointer",
                "iVar2": "seek_result"
            },
            "code": "void seek_and_set_errno_08005718(int *output_errno, int file_descriptor, int offset, int whence) {\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if (seek_result == -1 && *PTR_errno_08005738 != 0) {\n    *output_errno = *PTR_errno_08005738;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_and_set_errno_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "i2c_handle_mem_mode_080011c0",
                "*hi2c": "*i2c_handle",
                "Mode": "i2c_mode",
                "EventCount": "event_count",
                "Instance": "i2c_instance",
                "Devaddress": "device_address",
                "Init": "i2c_init",
                "AddressingMode": "addressing_mode",
                "State": "i2c_state",
                "HAL_I2C_MODE_MEM": "I2C_MODE_MEM",
                "HAL_I2C_STATE_BUSY_TX": "I2C_STATE_BUSY_TX",
                "I2C_ADDRESSINGMODE_10BIT": "0x4000"
            },
            "code": "HAL_StatusTypeDef i2c_handle_mem_mode_080011c0(I2C_HandleTypeDef *i2c_handle) {\n  if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n    if (i2c_handle->EventCount == 0) {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n    }\n    else {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if ((i2c_handle->Init).AddressingMode == I2C_ADDRESSINGMODE_10BIT) {\n    if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n    }\n    else {\n      i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n    }\n  }\n  else if (i2c_handle->EventCount == 0) {\n    i2c_handle->Instance->DR = (i2c_handle->Devaddress << 1) & 0xfe | 0xf0;\n  }\n  else if (i2c_handle->EventCount == 1) {\n    i2c_handle->Instance->DR = (i2c_handle->Devaddress << 1) & 0xfe | 0xf1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_mem_mode_080011c0"
        },
        "FUN_080047f0": {
            "renaming": {
                "FUN_080047f0": "initialize_static_variables_080047f0"
            },
            "code": "void initialize_static_variables_080047f0(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080047f0"
        },
        "FUN_0800502c": {
            "renaming": {
                "FUN_0800502c": "write_to_stream_0800502c",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "param_4",
                "iVar1": "buffer_length",
                "uVar2": "short_value",
                "puVar3": "buffer_pointer",
                "PTR___sf_fake_stdin_080050c4": "PTR___sf_fake_stdin_080050c4",
                "PTR___sf_fake_stdout_080050c8": "PTR___sf_fake_stdout_080050c8",
                "PTR___sf_fake_stderr_080050cc": "PTR___sf_fake_stderr_080050cc"
            },
            "code": "uint write_to_stream_0800502c(int stream, uint character, int *buffer, undefined4 param_4)\n{\n  int buffer_length = buffer[0] - buffer[4];\n  uint short_value = (uint)*(ushort *)(buffer + 3);\n  int setup_value = short_value << 0x1c;\n  undefined *buffer_pointer;\n\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n\n  if (buffer == (int *)PTR___sf_fake_stdin_080050c4) {\n    buffer = *(int **)(stream + 4);\n  }\n  else if (buffer == (int *)PTR___sf_fake_stdout_080050c8) {\n    buffer = *(int **)(stream + 8);\n  }\n  else if (buffer == (int *)PTR___sf_fake_stderr_080050cc) {\n    buffer = *(int **)(stream + 0xc);\n  }\n\n  buffer[2] = buffer[6];\n\n  if (((setup_value < 0) && (short_value = buffer[4], short_value != 0)) ||\n     (setup_value = __swsetup_r(stream, buffer, setup_value, short_value, param_4), setup_value == 0)) {\n    if ((buffer_length < buffer[5]) || (setup_value = _fflush_r(stream, buffer), setup_value == 0)) {\n      buffer[2] = buffer[2] + -1;\n      buffer_pointer = (undefined *)*buffer;\n      *buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (setup_value + 1 != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      setup_value = _fflush_r(stream, buffer);\n      if (setup_value == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800502c",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_0800502c"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "processModbusRequest_08000b54",
                "this": "modbus",
                "regs": "registers",
                "u8size": "register_count",
                "uVar1": "exception_code",
                "u8exception": "exception_code",
                "uVar2": "port_status",
                "uVar3": "current_time",
                "unaff_r5": "received_byte_count",
                "au16regs": "registers",
                "u8regsize": "register_count",
                "u8serno": "serial_number",
                "port": "serial_port",
                "getRxBuffer": "readRxBuffer",
                "au8Buffer": "rx_buffer",
                "u8id": "id",
                "validateRequest": "validateRequest",
                "millis": "millis",
                "u32timeOut": "timeout",
                "u16timeOut": "response_timeout",
                "process_FC1": "processReadCoils",
                "process_FC3": "processReadRegisters",
                "process_FC5": "processWriteSingleCoil",
                "process_FC6": "processWriteSingleRegister",
                "process_FC15": "processWriteMultipleCoils",
                "process_FC16": "processWriteMultipleRegisters",
                "buildException": "buildException",
                "sendTxBuffer": "sendTxBuffer",
                "u8lastError": "last_error",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int8_t __thiscall processModbusRequest_08000b54(Modbus *modbus, uint16_t *registers, uint8_t register_count) {\\n  uint8_t exception_code;\\n  uint8_t received_byte_count;\\n  uint32_t current_time;\\n  uint port_status;\\n  modbus->registers = registers;\\n  modbus->register_count = register_count;\\n  if (modbus->serial_number < 4) {\\n    port_status = (*(modbus->port->super_Stream).super_Print._vptr_Print[2])();\\n    received_byte_count = port_status & 0xff;\\n  }\\n  if (received_byte_count == 0 || received_byte_count < 8) {\\n    exception_code = \"\\0\";\\n  }\\n  else {\\n    received_byte_count = readRxBuffer(modbus);\\n    modbus->last_error = received_byte_count;\\n    if (modbus->rx_buffer[0] == modbus->id) {\\n      exception_code = validateRequest(modbus);\\n      if (exception_code == \"\\0\") {\\n        current_time = millis();\\n        modbus->timeout = modbus->response_timeout + current_time;\\n        modbus->last_error = \"\\0\";\\n        switch(modbus->rx_buffer[1]) {\\n        case \"\\x01\":\\n        case \"\\x02\":\\n          exception_code = processReadCoils(modbus, registers, register_count);\\n          break;\\n        case \"\\x03\":\\n        case \"\\x04\":\\n          exception_code = processReadRegisters(modbus, registers, register_count);\\n          break;\\n        case \"\\x05\":\\n          exception_code = processWriteSingleCoil(modbus, registers, register_count);\\n          break;\\n        case \"\\x06\":\\n          exception_code = processWriteSingleRegister(modbus, registers, register_count);\\n          break;\\n        case \"\\x0f\":\\n          exception_code = processWriteMultipleCoils(modbus, registers, register_count);\\n          break;\\n        case \"\\x10\":\\n          exception_code = processWriteMultipleRegisters(modbus, registers, register_count);\\n        }\\n      }\\n      else {\\n        if (exception_code != 0xff) {\\n          buildException(modbus, exception_code);\\n          sendTxBuffer(modbus);\\n        }\\n        modbus->last_error = exception_code;\\n      }\\n    }\\n    else {\\n      exception_code = \"\\0\";\\n    }\\n  }\\n  return exception_code;\\n}",
            "called": [
                "buildException",
                "millis",
                "sendTxBuffer",
                "getRxBuffer",
                "process_FC16",
                "validateRequest",
                "process_FC3",
                "process_FC5",
                "process_FC15",
                "process_FC6",
                "process_FC1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "processModbusRequest_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "handle_timer_interrupt_0800376e",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_0800376e(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "configureSysTick_08000d98",
                "TickPriority": "tickPriority",
                "uVar1": "configResult",
                "PTR_SystemCoreClock_08000ddc": "clockSpeed",
                "PTR_uwTickFreq_08000dd8": "tickFreq",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08000de0": "PTR_uwTickPrio_08000de0",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08000d98(uint32_t tickPriority)\n{\n  uint32_t PTR_SystemCoreClock_08000ddc = *(uint *)PTR_SystemCoreClock_08000ddc;\n  uint32_t PTR_uwTickFreq_08000dd8 = (uint32_t) ((uint64_t)PTR_SystemCoreClock_08000ddc / (1000 / (uint64_t)(byte)*PTR_uwTickFreq_08000dd8));\n  uint32_t configResult = HAL_SYSTICK_Config(PTR_uwTickFreq_08000dd8);\n  if (configResult != 0) {\n    return HAL_ERROR;\n  }\n  if (tickPriority > 0xf) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08000de0 = tickPriority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "configureSysTick_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "transmit_data_08003f48",
                "*huart": "*uart_handler",
                "bVar1": "uart_index_value",
                "iVar3": "callback_result",
                "iVar4": "callback_ptr",
                "uVar2": "callback_index"
            },
            "code": "void transmit_data_08003f48(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t uart_index_value = uart_index(uart_handler);\n  uint8_t callback_index = (uint8_t)uart_index_value;\n  int callback_ptr = *(int *)(PTR_tx_callback_obj_08003f88 + callback_index * 4);\n  if ((callback_index < 10) &&\n     ((**(code **)(PTR_tx_callback_08003f8c + callback_index * 4))(callback_ptr) != -1)) {\n    uint8_t *data_ptr = (uint8_t *)(*(int *)(callback_ptr + 0x68) + (uint16_t)(*(ushort *)(callback_ptr + 0x6e)));\n    uint8_t uart_handler_index = *(byte *)(callback_ptr + 0x44);\n    UART_HandleTypeDef *handler_ptr = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003f90 + (uint)uart_handler_index * 4);\n    HAL_UART_Transmit_IT(handler_ptr, data_ptr, 1);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_0800340c(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_function_from_pin_0800352e",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "uint32_t find_function_from_pin_0800352e(PinName_conflict pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "pinmap_find_function",
                "pinmap_function"
            ],
            "imported": false,
            "current_name": "find_function_from_pin_0800352e"
        },
        "FUN_0800582c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800582c": "set_flags",
                "PTR_id_080058c0": "id_c0",
                "PTR_id_080058c4": "id_c4",
                "PTR_id_080058c8": "id_c8",
                "PTR_id_080058cc": "id_cc",
                "PTR_id_080058d0": "id_d0",
                "PTR_id_080058d4": "id_d4",
                "PTR_id_080058d8": "id_d8",
                "PTR_id_080058dc": "id_dc",
                "PTR_id_080058e0": "id_e0",
                "PTR_id_080058e4": "id_e4",
                "PTR_id_080058e8": "id_e8",
                "PTR_id_080058ec": "id_ec",
                "FUN_0800582c": "set_flags_0800582c"
            },
            "code": "void set_flags_0800582c() {\n  if (PTR_id_080058c0 < 0x80000000) {\n    PTR_id_080058c0 = 1;\n  }\n  if (PTR_id_080058c4 < 0x80000000) {\n    PTR_id_080058c4 = 1;\n  }\n  if (PTR_id_080058c8 < 0x80000000) {\n    PTR_id_080058c8 = 1;\n  }\n  if (PTR_id_080058cc < 0x80000000) {\n    PTR_id_080058cc = 1;\n  }\n  if (PTR_id_080058d0 < 0x80000000) {\n    PTR_id_080058d0 = 1;\n  }\n  if (PTR_id_080058d4 < 0x80000000) {\n    PTR_id_080058d4 = 1;\n  }\n  if (PTR_id_080058d8 < 0x80000000) {\n    PTR_id_080058d8 = 1;\n  }\n  if (PTR_id_080058dc < 0x80000000) {\n    PTR_id_080058dc = 1;\n  }\n  if (PTR_id_080058e0 < 0x80000000) {\n    PTR_id_080058e0 = 1;\n  }\n  if (PTR_id_080058e4 < 0x80000000) {\n    PTR_id_080058e4 = 1;\n  }\n  if (PTR_id_080058e8 < 0x80000000) {\n    PTR_id_080058e8 = 1;\n  }\n  if (PTR_id_080058ec < 0x80000000) {\n    PTR_id_080058ec = 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800582c",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_0800582c"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "handleI2C_08001ab0",
                "*hi2c": "*handleI2C",
                "HVar1": "status",
                "*puVar2": "*bufferPtr",
                "*pIVar3": "*instancePtr"
            },
            "code": "void handleI2C_08001ab0(I2C_HandleTypeDef *hi2c)\n{\n  HAL_StatusTypeDef status;\n  uint8_t *bufferPtr;\n  I2C_TypeDef *instancePtr;\n  \n  if ((byte)hi2c->state - 0x29 < 2) {\n    hi2c->previousState = 0;\n    hi2c->state = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((hi2c->state != HAL_I2C_STATE_ABORT) && ((hi2c->instance->CR2 & 0x800) == 0)) {\n      hi2c->state = HAL_I2C_STATE_READY;\n    }\n    hi2c->previousState = 0;\n    hi2c->mode = HAL_I2C_MODE_NONE;\n  }\n  hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffff7ff;\n  instancePtr = hi2c->instance;\n  if ((instancePtr->CR2 & 0x800) == 0) {\n    if (hi2c->state == HAL_I2C_STATE_ABORT) {\n      hi2c->state = HAL_I2C_STATE_READY;\n      hi2c->errorCode = 0;\n      if ((instancePtr->SR1 & 0x40) != 0) {\n        bufferPtr = hi2c->pBuffPtr;\n        hi2c->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)instancePtr->DR;\n      }\n      hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(hi2c);\n    }\n    else {\n      if ((instancePtr->SR1 & 0x40) != 0) {\n        bufferPtr = hi2c->pBuffPtr;\n        hi2c->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)instancePtr->DR;\n      }\n      HAL_I2C_ErrorCallback(hi2c);\n    }\n  }\n  else {\n    instancePtr->CR2 = instancePtr->CR2 & 0xfffff7ff;\n    if (hi2c->hdmatx->state == HAL_DMA_STATE_READY) {\n      hi2c->hdmarx->XferAbortCallback = handleI2C_08001ab0;\n      status = HAL_DMA_Abort_IT(hi2c->hdmarx);\n      if (status != HAL_OK) {\n        if ((hi2c->instance->SR1 & 0x40) != 0) {\n          bufferPtr = hi2c->pBuffPtr;\n          hi2c->pBuffPtr = bufferPtr + 1;\n          *bufferPtr = (uint8_t)hi2c->instance->DR;\n        }\n        hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffffffe;\n        hi2c->state = HAL_I2C_STATE_READY;\n        (*hi2c->hdmarx->XferAbortCallback)(hi2c->hdmarx);\n      }\n    }\n    else {\n      hi2c->hdmatx->XferAbortCallback = handleI2C_08001ab0;\n      status = HAL_DMA_Abort_IT(hi2c->hdmatx);\n      if (status != HAL_OK) {\n        hi2c->instance->CR1 = hi2c->instance->CR1 & 0xfffffffe;\n        hi2c->state = HAL_I2C_STATE_READY;\n        (*hi2c->hdmatx->XferAbortCallback)(hi2c->hdmatx);\n      }\n    }\n  }\n  if ((hi2c->state == HAL_I2C_STATE_LISTEN) && ((hi2c->errorCode & 4) != 0)) {\n    hi2c->xferOptions = 0;\n    hi2c->previousState = 0;\n    hi2c->state = HAL_I2C_STATE_READY;\n    hi2c->mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(hi2c);\n  }\n  return;\n}",
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "I2C_Slave_STOPF",
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2C_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "check_device_ready_08001f9c",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "tmpreg": "timeout_duration"
            },
            "code": "HAL_StatusTypeDef check_device_ready_08001f9c(void)\n{\n  uint32_t start_time = HAL_GetTick();\n  uint32_t current_time;\n  uint32_t timeout_duration = 1000; // 1 second timeout\n\n  // Set bit 28 of register at DAT_0800200c + 0x40\n  *(uint *)(DAT_0800200c + 0x40) |= 0x10000000;\n  // Set value at address DAT_08002010 to 1\n  *DAT_08002010 = 1;\n\n  // Wait for bit 16 of register at DAT_08002014 + 4 to be set\n  while((*(uint *)(DAT_08002014 + 4) & 0x10000) == 0)\n  {\n    current_time = HAL_GetTick();\n    if(current_time - start_time >= timeout_duration)\n    {\n      return HAL_TIMEOUT;\n    }\n  }\n\n  // Set value at address DAT_08002018 to 1\n  *DAT_08002018 = 1;\n\n  // Wait for bit 17 of register at DAT_08002014 + 4 to be set\n  while((*(uint *)(DAT_08002014 + 4) & 0x20000) == 0)\n  {\n    current_time = HAL_GetTick();\n    if(current_time - start_time >= timeout_duration)\n    {\n      return HAL_TIMEOUT;\n    }\n  }\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "check_device_ready_08001f9c"
        },
        "FUN_08000d8c": {
            "renaming": {
                "FUN_08000d8c": "waitForInput_08000d8c"
            },
            "code": "void waitForInput_08000d8c(void) {\n  while(true) {\n    // Do nothing, just wait for input\n  }\n}",
            "called": [
                "CAN2_SCE_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8c",
            "calling": [
                "CAN2_SCE_IRQHandler"
            ],
            "imported": false,
            "current_name": "waitForInput_08000d8c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_EVP_PKEY_CTX_08000d8e",
                "ctx": "context",
                "hw_config_FUN_08000d8e": "configure_hardware"
            },
            "code": "int initialize_EVP_PKEY_CTX_08000d8e(EVP_PKEY_CTX *context){\n  configure_hardware();\n  return (int)context;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "print_08004638",
                "this": "print_obj",
                "b": "character",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall print_08004638(Print *print_08004638_obj, uchar character, int base) {\n  size_t result = print_08004638(print_08004638_obj, (uint)character, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08004638"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "get_process_id_08005604"
            },
            "code": "__pid_t get_process_id_08005604(void)\n{\n  __pid_t process_id = 1;\n  return process_id;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005604"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "set_modbus_exception_response_080008cc",
                "this": "modbus_instance",
                "u8exception": "exception_code",
                "bVar1": "buffer_value",
                "au8Buffer": "buffer",
                "u8id": "id",
                "u8BufferSize": "buffer_size"
            },
            "code": "void __thiscall set_modbus_exception_response_080008cc(Modbus *modbus_instance, uint8_t exception_code)\n{\n  byte buffer_value = modbus_instance->buffer[1];\n  modbus_instance->buffer[0] = modbus_instance->id;\n  modbus_instance->buffer[1] = buffer_value ^ 0x80;\n  modbus_instance->buffer[2] = exception_code;\n  modbus_instance->buffer_size = 3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_modbus_exception_response_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_08004ac6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__08004c94,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_08004ca0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_08004ba0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_08004ba0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar1 = false;\n      local_84 = 0;\n      iVar8 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_08004ca0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_08004ca4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "__swsetup_r",
                "__sinit",
                "memchr",
                "_printf_i",
                "__sfputs_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "read_and_update_file_offset_08005608",
                "param_1": "file_descriptor",
                "param_2": "file_info_address",
                "iVar1": "bytes_read",
                "uVar2": "new_file_offset",
                "bVar3": "read_successful"
            },
            "code": "void read_and_update_file_offset_08005608(int file_descriptor, int file_info_address) {\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(file_info_address + FILE_OFFSET));\n  bool read_successful = bytes_read >= 0;\n  uint new_file_offset;\n  if (read_successful) {\n    new_file_offset = *(int *)(file_info_address + FILE_OFFSET_PTR) + bytes_read;\n  }\n  else {\n    new_file_offset = *(ushort *)(file_info_address + FILE_FLAGS) & 0xffffefff;\n  }\n  if (read_successful) {\n    *(uint *)(file_info_address + FILE_OFFSET_PTR) = new_file_offset;\n  }\n  if (!read_successful) {\n    *(short *)(file_info_address + FILE_FLAGS) = (short)new_file_offset;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_file_offset_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "receive_data_08002efa",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "pRxBuffPtr": "p_rx_buff_ptr",
                "RxXferSize": "rx_xfer_size",
                "RxXferCount": "rx_xfer_count",
                "ErrorCode": "error_code",
                "HAL_UART_STATE_BUSY_RX": "HAL_UART_STATE_BUSY_RX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance": "instance",
                "CR3": "control_register_3",
                "CR1": "control_register_1"
            },
            "code": "HAL_StatusTypeDef receive_data_08002efa(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size) {\n  if (uart_handle->RxState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->Lock != HAL_LOCKED) {\n    uart_handle->pRxBuffPtr = data;\n    uart_handle->RxXferSize = size;\n    uart_handle->RxXferCount = size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR3 |= 1;\n    uart_handle->Instance->CR1 |= 0x120;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "receive_data_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(RTC_HandleTypeDef *hrtc)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_080058f0": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_080058f0": "set_flags",
                "PTR_id_08005954": "id_1",
                "PTR_id_08005958": "id_2",
                "PTR_id_0800595c": "id_3",
                "PTR_id_08005960": "id_4",
                "PTR_id_08005964": "id_5",
                "PTR_id_08005968": "id_6",
                "PTR_id_0800596c": "id_7",
                "PTR_id_08005970": "id_8",
                "FUN_080058f0": "set_flags_080058f0"
            },
            "code": "void set_flags_080058f0() {\n  if (PTR_id_08005954 < INT_MAX) {\n    PTR_id_08005954 = true;\n  }\n  if (PTR_id_08005958 < INT_MAX) {\n    PTR_id_08005958 = true;\n  }\n  if (PTR_id_0800595c < INT_MAX) {\n    PTR_id_0800595c = true;\n  }\n  if (PTR_id_08005960 < INT_MAX) {\n    PTR_id_08005960 = true;\n  }\n  if (PTR_id_08005964 < INT_MAX) {\n    PTR_id_08005964 = true;\n  }\n  if (PTR_id_08005968 < INT_MAX) {\n    PTR_id_08005968 = true;\n  }\n  if (PTR_id_0800596c < INT_MAX) {\n    PTR_id_0800596c = true;\n  }\n  if (PTR_id_08005970 < INT_MAX) {\n    PTR_id_08005970 = true;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058f0",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_080058f0"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_080056b4": {
            "renaming": {
                "FUN_080056b4": "close_file_and_set_error_code_080056b4",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_code_080056b4(int *error_code_ptr, int file_descriptor) {\n  undefined *errno_ptr;\n  int close_result;\n\n  errno_ptr = PTR_errno_080056d0;\n  *(undefined4 *)PTR_errno_080056d0 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056b4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_code_080056b4"
        },
        "FUN_0800450a": {
            "renaming": {
                "FUN_0800450a": "printIPAddress_0800450a",
                "this": "ip_address",
                "p": "printer",
                "iVar3": "i",
                "iVar4": "total_bytes_printed",
                "sVar1": "bytes_printed",
                "sVar2": "dot_printed"
            },
            "code": "size_t __thiscall printIPAddress_0800450a(IPAddress *ip_address, Print *printer)\n{\n  size_t total_bytes_printed = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t bytes_printed = Print::print(printer, (ip_address->_address).bytes[i], 10);\n    size_t dot_printed = Print::print(printer, '.');\n    total_bytes_printed += bytes_printed + dot_printed;\n  }\n  total_bytes_printed += Print::print(printer, (ip_address->_address).bytes[3], 10);\n  return total_bytes_printed;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800450a",
            "calling": [],
            "imported": false,
            "current_name": "printIPAddress_0800450a"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "handle_timer_interrupts_0800377c",
                "PTR_timer_handles_08003794": "PTR_timer_handles_08003794",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupts_0800377c(void)\n{\n  TIM_HandleTypeDef* handle1 = *(TIM_HandleTypeDef**)PTR_timer_handles_08003794;\n  TIM_HandleTypeDef* handle2 = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003794 + 0x24);\n  if (handle1 != NULL) {\n    HAL_TIM_IRQHandler(handle1);\n  }\n  if (handle2 != NULL) {\n    HAL_TIM_IRQHandler(handle2);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_0800377c"
        },
        "FUN_08003fec": {
            "renaming": {
                "FUN_08003fec": "handle_UART2_interrupt_08003fec",
                "*PTR_uart_handlers_08004000": "*uart_handlers",
                "*USART2_IRQn": "*uart2_irq",
                "*uart_handler": "*uart2_handler"
            },
            "code": "void handle_UART2_interrupt_08003fec(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fec",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART2_interrupt_08003fec"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "resetTimer_0800268e",
                "htim": "timer",
                "pTVar1": "timerInstance"
            },
            "code": "HAL_StatusTypeDef resetTimer_0800268e(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timerInstance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "resetTimer_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "decodeModbusMessage_080008e2",
                "this": "modbus",
                "regs": "registers",
                "u8size": "numRegisters",
                "uVar1": "startAddress",
                "uVar2": "numBits",
                "uVar3": "i",
                "uVar4": "byteIndex",
                "uVar5": "bitIndex",
                "au8Buffer": "messageBuffer",
                "u8BufferSize": "messageLength",
                "makeWord": "makeWord"
            },
            "code": "int8_t __thiscall decodeModbusMessage_080008e2(Modbus *modbus,uint16_t *registers,uint8_t numRegisters)\n{\n  uint16_t startAddress;\n  uint16_t numBits;\n  uint8_t byteIndex;\n  uint8_t bitIndex;\n  uint8_t numBytes;\n  uint8_t currentByte;\n  uint16_t currentBitValue;\n\n  startAddress = makeWord(modbus->messageBuffer[2], modbus->messageBuffer[3]);\n  numBits = makeWord(modbus->messageBuffer[4], modbus->messageBuffer[5]);\n  numBytes = (numBits + 7) / 8;\n  if (numBits % 8 != 0) {\n    numBytes++;\n  }\n  modbus->messageBuffer[2] = numBytes;\n  modbus->messageLength = 3;\n  byteIndex = 0;\n  bitIndex = 0;\n  for (uint16_t i = 0; i < numBits; i++) {\n    currentByte = registers[(startAddress + i) / 16];\n    currentBitValue = (currentByte >> (i % 16)) & 1;\n    if (currentBitValue == 0) {\n      modbus->messageBuffer[modbus->messageLength] &= ~(1 << bitIndex);\n    }\n    else {\n      modbus->messageBuffer[modbus->messageLength] |= (1 << bitIndex);\n    }\n    bitIndex++;\n    if (bitIndex == 8) {\n      bitIndex = 0;\n      modbus->messageLength++;\n    }\n  }\n  return modbus->messageLength + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decodeModbusMessage_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "__thiscall Print::FUN_080045c8": "convertUnsignedIntToBaseString",
                "this": "print",
                "n": "number",
                "base": "base",
                "uVar5": "baseValue",
                "uVar6": "quotient",
                "uVar4": "currentDigit",
                "__s": "stringPointer",
                "buf": "stringBuffer",
                "sVar2": "length",
                "sVar3": "totalLength",
                "cVar1": "currentDigit",
                "FUN_080045c8": "Print::convertUnsignedIntToBaseString_080045c8"
            },
            "code": "size_t Print::convertUnsignedIntToBaseString_080045c8(Print *print, unsigned long number, uint8_t base) {\n  char currentDigit;\n  size_t length;\n  size_t totalLength;\n  uint baseValue;\n  uint quotient;\n  char *stringPointer;\n  char stringBuffer[33];\n  stringBuffer[32] = '\\0';\n  if (base < 2) {\n    baseValue = 10;\n  }\n  else {\n    baseValue = base;\n  }\n  stringPointer = stringBuffer + 0x20;\n  do {\n    quotient = number / baseValue;\n    currentDigit = (number & 0xff) - ((int)(short)quotient * (int)(short)baseValue & 0xffU) & 0xff;\n    stringPointer = stringPointer + -1;\n    if (currentDigit < 10) {\n      currentDigit = currentDigit + '0';\n    }\n    else {\n      currentDigit = currentDigit + '7';\n    }\n    *stringPointer = currentDigit;\n    number = quotient;\n  } while (quotient != 0);\n  if (stringPointer == (char *)0x0) {\n    totalLength = 0;\n  }\n  else {\n    length = strlen(stringPointer);\n    totalLength = (*print->_vptr_Print[1])(length, stringPointer, length);\n  }\n  return totalLength;\n}\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "Print::convertUnsignedIntToBaseString_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "transmitDataOverUART_08003d18",
                "data": "dataBuffer",
                "size": "dataSize",
                "pin": "pinName",
                "HVar1": "status",
                "uVar2": "startTime",
                "pvVar3": "peripheral",
                "uVar4": "currentTime",
                "uVar5": "handlerIndex",
                "uart_handlers_08003dc8": "uartHandlers",
                "serial_debug_08003dcc": "serialDebug"
            },
            "code": "size_t transmitDataOverUART_08003d18(uint8_t *data, uint32_t size) {\n  PinName_conflict pinName;\n  HAL_StatusTypeDef status;\n  uint32_t startTime;\n  void *peripheral;\n  uint32_t handlerIndex;\n  uint uartHandlerCount = 10;\n  \n  startTime = HAL_GetTick();\n  pinName = *(PinName_conflict *)(PTR_digitalPin_08003dc0 + 0x9a);\n  peripheral = pinmap_peripheral(pinName,(PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  handlerIndex = 0;\n  while ((handlerIndex < uartHandlerCount && ((*(int *)(PTR_uart_handlers_08003dc8 + handlerIndex * 4) == 0 || (peripheral = pinmap_peripheral(pinName,(PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4), **(void ***)(PTR_uart_handlers_08003dc8 + handlerIndex * 4) != peripheral))))) {\n    handlerIndex++;\n  }\n  if (handlerIndex >= uartHandlerCount) {\n    if ((9 < (byte)PTR_serial_debug_08003dcc[0x44]) && (uart_debug_init(), 9 < (byte)PTR_serial_debug_08003dcc[0x44])) {\n      return 0;\n    }\n    handlerIndex = (uint)(byte)PTR_serial_debug_08003dcc[0x44];\n  }\n  do {\n    status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003dc8 + handlerIndex * 4),data,(uint16_t)size,1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n    startTime = HAL_GetTick();\n  } while (startTime - startTime < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "uart_debug_init",
                "pinmap_peripheral",
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmitDataOverUART_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "concatenate_bytes_08004640",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_08004640(uint8_t high_byte, uint8_t low_byte)\n{\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "process_FC16",
                "process_FC3",
                "validateRequest",
                "process_FC5",
                "process_FC15",
                "process_FC1",
                "process_FC6"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_08004640"
        },
        "FUN_08000c7c": {
            "renaming": {
                "FUN_08000c7c": "initialize_static_variables_08000c7c"
            },
            "code": "void initialize_static_variables_08000c7c(void)\n{\n  __static_initialization_and_destruction_0(1, 0xFFFF);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c7c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000c7c"
        },
        "FUN_08004760": {
            "renaming": {
                "FUN_08004760": "handle_external_interrupt_08004760"
            },
            "code": "void handle_external_interrupt_08004760(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004760",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_08004760"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_HAL_and_SystemClock_080034ce"
            },
            "code": "void initialize_HAL_and_SystemClock_080034ce(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_SystemClock_080034ce"
        },
        "FUN_08003798": {
            "renaming": {
                "FUN_08003798": "handle_timer_interrupt_08003798",
                "*PTR_timer_handles_080037a8": "*timer_handles_ptr"
            },
            "code": "void handle_timer_interrupt_08003798(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037a8 + 4);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003798",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003798"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "register_at_exit_function_080047fe",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_at_exit_function_080047fe(void (*func)(void), void *arg){\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_at_exit_function_080047fe"
        },
        "FUN_08005974": {
            "renaming": {
                "FUN_08005974": "set_ptr_values_08005974",
                "PTR_id_080059d8": "ptr_1",
                "PTR_id_080059dc": "ptr_2",
                "PTR_id_080059e0": "ptr_3",
                "PTR_id_080059e4": "ptr_4",
                "PTR_id_080059e8": "ptr_5",
                "PTR_id_080059ec": "ptr_6",
                "PTR_id_080059f0": "ptr_7",
                "PTR_id_080059f4": "ptr_8"
            },
            "code": "void set_ptr_values_08005974(void)\n{\n  if (PTR_id_080059d8 != nullptr && *PTR_id_080059d8 < 0)\n  {\n    *PTR_id_080059d8 = 1;\n  }\n  if (PTR_id_080059dc != nullptr && *PTR_id_080059dc < 0)\n  {\n    *PTR_id_080059dc = 1;\n  }\n  if (PTR_id_080059e0 != nullptr && *PTR_id_080059e0 < 0)\n  {\n    *PTR_id_080059e0 = 1;\n  }\n  if (PTR_id_080059e4 != nullptr && *PTR_id_080059e4 < 0)\n  {\n    *PTR_id_080059e4 = 1;\n  }\n  if (PTR_id_080059e8 != nullptr && *PTR_id_080059e8 < 0)\n  {\n    *PTR_id_080059e8 = 1;\n  }\n  if (PTR_id_080059ec != nullptr && *PTR_id_080059ec < 0)\n  {\n    *PTR_id_080059ec = 1;\n  }\n  if (PTR_id_080059f0 != nullptr && *PTR_id_080059f0 < 0)\n  {\n    *PTR_id_080059f0 = 1;\n  }\n  if (PTR_id_080059f4 != nullptr && *PTR_id_080059f4 < 0)\n  {\n    *PTR_id_080059f4 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005974",
            "calling": [],
            "imported": false,
            "current_name": "set_ptr_values_08005974"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "handleI2CEvents_08001256",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "pIVar2": "i2cTypeDef",
                "tmpreg": "tmpreg",
                "tmpreg_1": "tmpreg_1",
                "tmpreg_2": "tmpreg_2",
                "tmpreg_3": "tmpreg_3",
                "tmpreg_4": "tmpreg_4",
                "tmpreg_5": "tmpreg_5",
                "tmpreg_6": "tmpreg_6",
                "tmpreg_7": "tmpreg_7",
                "tmpreg_8": "tmpreg_8",
                "tmpreg_9": "tmpreg_9"
            },
            "code": "HAL_StatusTypeDef handleI2CEvents_08001256(I2C_HandleTypeDef *i2cHandle)\n{\n  uint32_t transferOptions = i2cHandle->XferOptions;\n  I2C_TypeDef *i2cTypeDef = i2cHandle->Instance;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_RX && (i2cHandle->EventCount != 0 || i2cHandle->Mode != HAL_I2C_MODE_MEM))\n  {\n    if (i2cHandle->EventCount == 0 && i2cHandle->Init.AddressingMode == 0xc000)\n    {\n      i2cTypeDef->CR1 |= 0x100;\n      i2cHandle->EventCount++;\n    }\n    else\n    {\n      if (i2cHandle->XferCount == 0)\n      {\n        i2cTypeDef->CR1 |= 0x200;\n      }\n      else if (i2cHandle->XferCount == 1)\n      {\n        if (transferOptions == 0xffff0000)\n        {\n          i2cTypeDef->CR1 &= 0xfffffbff;\n          I2C_TypeDef *i2cTypeDef2 = i2cHandle->Instance;\n          if ((i2cTypeDef2->CR2 & 0x800) == 0)\n          {\n            i2cTypeDef2->CR1 |= 0x200;\n          }\n          else\n          {\n            i2cTypeDef2->CR1 &= 0xfffffbff;\n          }\n        }\n        else if ((transferOptions == 4 || transferOptions == 8) || i2cHandle->PreviousState == 0x12)\n        {\n          i2cTypeDef->CR1 &= 0xfffffbff;\n          i2cTypeDef->CR1 |= 0x200;\n        }\n        else if (i2cHandle->XferOptions == 2)\n        {\n          i2cTypeDef->CR1 |= 0x400;\n        }\n        else\n        {\n          i2cTypeDef->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (i2cHandle->XferCount == 2)\n      {\n        if (i2cHandle->XferOptions == 2)\n        {\n          i2cTypeDef->CR1 |= 0x400;\n        }\n        else\n        {\n          i2cTypeDef->CR1 &= 0xfffffbff;\n          i2cTypeDef->CR1 |= 0x800;\n        }\n        I2C_TypeDef *i2cTypeDef3 = i2cHandle->Instance;\n        if ((i2cTypeDef3->CR2 & 0x800) != 0)\n        {\n          i2cTypeDef3->CR2 |= 0x1000;\n        }\n      }\n      else\n      {\n        i2cTypeDef->CR1 |= 0x400;\n        I2C_TypeDef *i2cTypeDef4 = i2cHandle->Instance;\n        if ((i2cTypeDef4->CR2 & 0x800) != 0)\n        {\n          i2cTypeDef4->CR2 |= 0x1000;\n        }\n      }\n      i2cHandle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CEvents_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "run_global_destructors_08004884",
                "puVar1": "preinit_function_pointer_end",
                "puVar2": "preinit_function_pointer_start",
                "puVar3": "global_destructor_pointer",
                "iVar4": "num_preinit_functions",
                "iVar5": "i",
                "PTR___preinit_array_end_080048bc": "preinit_array_end_pointer",
                "PTR___preinit_array_end_080048c0": "preinit_array_start_pointer",
                "PTR___do_global_dtors_aux_fini_array_entry_080048c8": "global_destructor_array_end_pointer",
                "PTR___preinit_array_end_080048c4": "global_destructor_array_start_pointer"
            },
            "code": "void run_global_destructors_08004884(void)\n{\n  void (**global_destructor)(void);\n  void (**preinit_function)(void);\n  int num_preinit_functions = (int)PTR___preinit_array_end_080048c0 - (int)PTR___preinit_array_end_080048bc;\n  int num_global_destructors = (int)PTR___do_global_dtors_aux_fini_array_entry_080048c8 - (int)PTR___preinit_array_end_080048c4;\n\n  // Call all preinit functions\n  for (int i = 0; i < num_preinit_functions; i++) {\n    preinit_function = (void (**)(void))(PTR___preinit_array_end_080048bc + i * sizeof(void*));\n    (*preinit_function)();\n  }\n\n  // Call _init\n  _init();\n\n  // Call all global destructors\n  for (int i = 0; i < num_global_destructors; i++) {\n    global_destructor = (void (**)(void))(PTR___preinit_array_end_080048c4 + i * sizeof(void*));\n    (*global_destructor)();\n  }\n}\n",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_global_destructors_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_EVP_PKEY_CTX_08004648",
                "ctx": "pkey_context",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void initialize_EVP_PKEY_CTX_08004648(void)\n{\n  EVP_PKEY_CTX *pkey_context;\n  pkey_context = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);\n  init(pkey_context);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "initializeSerialPort_08000600",
                "this": "modbusInstance",
                "u32speed": "baudRate",
                "uVar1": "serialNumber",
                "iVar2": "readResult",
                "u8serno": "deviceSerialNumber",
                "port": "serialPort",
                "HardwareSerial": "HardwareSerial",
                "PTR_Serial3_08000668": "SERIAL_PORT_3",
                "u8txenpin": "transmitEnablePin",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceivedByte",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outgoingMessageCount",
                "u16InCnt": "incomingMessageCount"
            },
            "code": "void initializeSerialPort_08000600(Modbus *modbusInstance,long baudRate)\n{\n  uint8_t serialNumber;\n  int readResult;\n  serialNumber = modbusInstance->deviceSerialNumber;\n  if (serialNumber == DEVICE_SERIAL_NUMBER_1) {\n    modbusInstance->serialPort = (HardwareSerial *)SERIAL_PORT_1;\n  }\n  else if (serialNumber == DEVICE_SERIAL_NUMBER_2) {\n    modbusInstance->serialPort = (HardwareSerial *)SERIAL_PORT_2;\n  }\n  else if (serialNumber == DEVICE_SERIAL_NUMBER_3) {\n    modbusInstance->serialPort = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else {\n    modbusInstance->serialPort = (HardwareSerial *)SERIAL_PORT_1;\n  }\n  HardwareSerial::begin(modbusInstance->serialPort,baudRate);\n  if (modbusInstance->transmitEnablePin > 1) {\n    pinMode((uint)modbusInstance->transmitEnablePin,OUTPUT);\n    digitalWrite((uint)modbusInstance->transmitEnablePin,LOW);\n  }\n  do {\n    readResult = (*(modbusInstance->serialPort->super_Stream).super_Print._vptr_Print[3])();\n  } while (readResult >= 0);\n  modbusInstance->bufferSize = 0;\n  modbusInstance->lastReceivedByte = 0;\n  modbusInstance->errorCount = 0;\n  modbusInstance->outgoingMessageCount = 0;\n  modbusInstance->incomingMessageCount = 0;\n  return;\n}",
            "called": [
                "pinMode",
                "begin",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeSerialPort_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "__thiscall Print::FUN_080045be": "print_character",
                "this": "printer",
                "c": "character",
                "sVar1": "result",
                "FUN_080045be": "print_character_080045be"
            },
            "code": "size_t print_character_080045be(Print *printer, char character) {\n  size_t result = (**printer->_vptr_Print)(printer, (int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "handle_UART8_interrupt_0800407c",
                "UART8_IRQn": "UART8_Interrupt",
                "PTR_uart_handlers_08004090": "uart_handlers"
            },
            "code": "void handle_UART8_interrupt_0800407c(UART_HandleTypeDef *huart)\n{\n  HAL_NVIC_ClearPendingIRQ(UART8_IRQn);\n  HAL_UART_IRQHandler(huart);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART8_interrupt_0800407c"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculateModbusCRC_08000728",
                "this": "modbus",
                "u8length": "bufferLength",
                "uVar2": "crc",
                "uVar3": "temp",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_08000728(Modbus *modbus, uint8_t bufferLength)\n{\n  uint16_t crc = 0xffff;\n  for (uint8_t i = 0; i < bufferLength; i++) {\n    crc ^= modbus->buffer[i];\n    for (uint8_t j = 1; j < 9; j++) {\n      uint16_t temp = crc & 1;\n      crc >>= 1;\n      if (temp != 0) {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_pin_function_0800354a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_0800354a(PinName_conflict pin, PinMap_conflict *map)\n{\n  uint32_t function_index;\n  if (pin == NC) {\n    return 0xffffffff;\n  }\n  function_index = pinmap_find_function(pin, map);\n  return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "get_dac_channel",
                "get_pwm_channel",
                "pwm_stop",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "sendI2CData_0800124a",
                "hi2c": "i2c_handle",
                "Devaddress": "dev_address",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "HAL_StatusTypeDef": "status"
            },
            "code": "HAL_StatusTypeDef sendI2CData_0800124a(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t dev_address = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = dev_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "sendI2CData_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_08004094(int increment)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_080040c4 == 0) {\n    *(undefined **)PTR_heap_end_080040c4 = PTR__ebss_080040c8;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_080040c4;\n  new_pointer = current_pointer + increment;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_080040c4 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_080040cc = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_DAC_interrupt_flags_080033c8",
                "hdac": "dac_handle",
                "DAT_080033d4": "interrupt_flags"
            },
            "code": "void clear_DAC_interrupt_flags_080033c8(DAC_HandleTypeDef *dac_handle)\n{\n  uint32_t *DAT_080033d4 = (uint32_t *)(DAT_080033d4 + 0x40);\n  *DAT_080033d4 &= ~(1U << 31);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "imported": false,
            "current_name": "clear_DAC_interrupt_flags_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "get_gpio_from_port_index_080031fc",
                "port_idx": "port_index",
                "pGVar1": "gpio_type",
                "tmpreg": "gpio_reg_offset",
                "tmpreg_1": "gpio_reg_val",
                "tmpreg_2": "gpio_reg_offset",
                "tmpreg_3": "gpio_reg_val",
                "tmpreg_4": "gpio_reg_offset",
                "tmpreg_5": "gpio_reg_val",
                "tmpreg_6": "gpio_reg_offset",
                "tmpreg_7": "gpio_reg_val",
                "tmpreg_8": "gpio_reg_offset",
                "tmpreg_9": "gpio_reg_val",
                "tmpreg_10": "gpio_reg_offset"
            },
            "code": "GPIO_TypeDef * get_gpio_from_port_index_080031fc(uint32_t port_index) {\n  GPIO_TypeDef *gpio_type;\n  uint32_t gpio_reg_offset = 0x30;\n  uint32_t gpio_reg_val = *(uint *)(DAT_08003350 + gpio_reg_offset);\n  \n  switch(port_index) {\n    case 0:\n      gpio_reg_val |= 1;\n      gpio_type = DAT_08003354;\n      break;\n    case 1:\n      gpio_reg_val |= 2;\n      gpio_type = DAT_08003358;\n      break;\n    case 2:\n      gpio_reg_val |= 4;\n      gpio_type = DAT_0800335c;\n      break;\n    case 3:\n      gpio_reg_val |= 8;\n      gpio_type = DAT_08003360;\n      break;\n    case 4:\n      gpio_reg_val |= 0x10;\n      gpio_type = DAT_08003364;\n      break;\n    case 5:\n      gpio_reg_val |= 0x20;\n      gpio_type = DAT_08003368;\n      break;\n    case 6:\n      gpio_reg_val |= 0x40;\n      gpio_type = DAT_0800336c;\n      break;\n    case 7:\n      gpio_reg_val |= 0x80;\n      gpio_type = DAT_08003370;\n      break;\n    case 8:\n      gpio_reg_val |= 0x100;\n      gpio_type = DAT_08003374;\n      break;\n    case 9:\n      gpio_reg_val |= 0x200;\n      gpio_type = DAT_08003378;\n      break;\n    case 10:\n      gpio_reg_val |= 0x400;\n      gpio_type = DAT_0800337c;\n      break;\n    default:\n      gpio_type = (GPIO_TypeDef *)0x0;\n  }\n  *(uint *)(DAT_08003350 + gpio_reg_offset) = gpio_reg_val;\n  return gpio_type;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_from_port_index_080031fc"
        },
        "FUN_08005580": {
            "renaming": {
                "FUN_08005580": "execute_command_08005580",
                "param_1": "status",
                "param_2": "command_index",
                "param_3": "signal",
                "param_4": "flags",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "command_fn",
                "pcVar4": "command_fn_ptr"
            },
            "code": "int execute_command_08005580(int *status, uint command_index, int signal, uint flags)\n{\n  __pid_t pid;\n  int result;\n  code *command_fn;\n  if (command_index > 31) {\n    *status = 22;\n    return -1;\n  }\n  command_fn = command_functions[command_index];\n  if (command_fn == NULL) {\n    pid = _getpid_r();\n    result = _kill_r(*status, pid, signal, flags);\n    return result;\n  }\n  if (command_fn == (code *)1) {\n    return 0;\n  }\n  if (command_fn == (code *)-1) {\n    *status = 22;\n    return 1;\n  }\n  command_functions[command_index] = NULL;\n  (*command_fn)(command_index);\n  return 0;\n}",
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005580",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_command_08005580"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_modbus_08000690",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "Modbus": "ModbusClass",
                "PTR_slave_080006b0": "PTR_slave_080006b0"
            },
            "code": "void initialize_modbus_08000690(int should_initialize, int priority_level) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    Modbus::Modbus((Modbus *)PTR_slave_080006b0, '\\x01', '\\0', '\\0');\n  }\n  return;\n}",
            "called": [
                "Modbus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_modbus_08000690"
        },
        "FUN_08004254": {
            "renaming": {
                "FUN_08004254": "readNextByte_08004254",
                "this": "serialObj",
                "_serial": "_serial",
                "rx_tail": "rxTail",
                "rx_head": "rxHead",
                "rx_buff": "rxBuffer"
            },
            "code": "int __thiscall readNextByte_08004254(HardwareSerial *serialObj)\n{\n  uint rxTail = (uint)(serialObj->_serial).rx_tail;\n  if ((serialObj->_serial).rx_head != rxTail) {\n    return (uint)(serialObj->_serial).rx_buff[rxTail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004254",
            "calling": [],
            "imported": false,
            "current_name": "readNextByte_08004254"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "initialize_data_080054fc",
                "param_1": "param",
                "param_2": "data",
                "uVar1": "flag",
                "iVar2": "memory",
                "local_18": "size",
                "local_14": "buffer"
            },
            "code": "void initialize_data_080054fc(int param, int *data) {\n  ushort flag;\n  int size;\n  int *buffer;\n  \n  if ((int)((uint)*(ushort *)(data + 3) << 0x1e) < 0) {\n    *data = (int)data + 0x47;\n    data[4] = (int)data + 0x47;\n    data[5] = 1;\n    return;\n  }\n  size = param;\n  buffer = data;\n  flag = __swhatbuf_r(param, data, &size, &buffer);\n  int memory = _malloc_r(param, size);\n  if (memory != 0) {\n    *(undefined4 *)(param + 0x28) = DAT_08005578;\n    *data = memory;\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n    data[5] = size;\n    data[4] = memory;\n    if ((buffer != (int *)0x0) &&\n       (_isatty_r(param, (int)*(short *)((int)data + 0xe)) != 0)) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n    }\n    *(ushort *)(data + 3) = flag | *(ushort *)(data + 3);\n    return;\n  }\n  if ((int)(short)*(ushort *)(data + 3) << 0x16 >= 0) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n}\n",
            "called": [
                "__swhatbuf_r",
                "_isatty_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "initialize_data_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "transfer_byte_08001420",
                "hi2c": "i2c_handle",
                "XferCount": "transfer_count",
                "pBuffPtr": "p_buffer",
                "Instance": "instance",
                "DR": "data_register",
                "pbVar1": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001420(I2C_HandleTypeDef *i2c_handle)\n{\n  byte *buffer_pointer;\n  \n  if (i2c_handle->transfer_count != 0) {\n    buffer_pointer = i2c_handle->p_buffer;\n    i2c_handle->p_buffer = buffer_pointer + 1;\n    i2c_handle->instance->data_register = (uint)*buffer_pointer;\n    i2c_handle->transfer_count = i2c_handle->transfer_count - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "initializeSystem_08000de4",
                "puVar1": "ptrDat",
                "HAL_NVIC_SetPriorityGrouping(3)": "HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4)",
                "FUN_08000de4Tick": "initializeSystemTick"
            },
            "code": "HAL_StatusTypeDef initializeSystem_08000de4(void)\n{\n  uint32_t *ptrDat;\n  ptrDat = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *ptrDat |= 0x400;\n  *ptrDat |= 0x100;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  initializeSystem_08000de4Tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initializeSystem_08000de4"
        },
        "FUN_08003840": {
            "renaming": {
                "FUN_08003840": "handle_timer_interrupts_08003840",
                "*PTR_timer_handles_08003850": "*timer_handles",
                "*timer_handles + 0x28": "timer_handle_ptr",
                "*(TIM_HandleTypeDef **)(PTR_timer_handles_08003850 + 0x28)": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_irq"
            },
            "code": "void handle_timer_interrupts_08003840(void)\n{\n  TIM_HandleTypeDef **(TIM_HandleTypeDef **)(PTR_timer_handles_08003850 + 0x28) = *(TIM_HandleTypeDef **)(PTR_*(TIM_HandleTypeDef **)(PTR_timer_handles_08003850 + 0x28)s_08003850 + 0x28);\n  if (*(TIM_HandleTypeDef **)(PTR_timer_handles_08003850 + 0x28) != NULL) {\n    HAL_TIM_IRQHandler(*(TIM_HandleTypeDef **)(PTR_timer_handles_08003850 + 0x28));\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003840",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_08003840"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "handle_timer_interrupts_080026ce",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "SR": "TIM_SR",
                "DIER": "TIM_DIER",
                "Channel": "active_channel"
            },
            "code": "void handle_timer_interrupts_080026ce(TIM_HandleTypeDef *timer_handle)\n{\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_CC1;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timer_instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_CC2;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timer_instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_CC3;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timer_instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_CC4;\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timer_instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_UPDATE;\n    HAL_TIM_PeriodElapsedCallback(timer_handle);\n  }\n  if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_BREAK;\n    HAL_TIMEx_BreakCallback(timer_handle);\n  }\n  if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_TRIGGER;\n    HAL_TIM_TriggerCallback(timer_handle);\n  }\n  if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n    timer_instance->SR &= ~TIM_FLAG_COM;\n    HAL_TIMEx_CommutationCallback(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "TIM8_BRK_TIM12_IRQHandler",
                "TIM8_UP_TIM13_IRQHandler",
                "TIM8_TRG_COM_TIM14_IRQHandler",
                "TIM6_DAC_IRQHandler",
                "TIM7_IRQHandler",
                "TIM1_UP_TIM10_IRQHandler",
                "TIM2_IRQHandler",
                "TIM5_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_BRK_TIM9_IRQHandler",
                "TIM3_IRQHandler",
                "TIM1_TRG_COM_TIM11_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupts_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08001f3c": {
            "renaming": {
                "FUN_08001f3c": "reset_I2C_DMA_transfer_08001f3c",
                "hdma": "dma_handle",
                "hi2c": "i2c_handle",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORTED",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ErrorCallback": "handle_I2C_error",
                "HAL_I2C_AbortCpltCallback": "handle_I2C_abort_complete"
            },
            "code": "void reset_I2C_DMA_transfer_08001f3c(DMA_HandleTypeDef *dma_handle)\n{\n  I2C_HandleTypeDef *i2c_handle;\n  i2c_handle = (I2C_HandleTypeDef *)dma_handle->Parent;\n  i2c_handle->Instance->CR1 &= 0xfffffbff;\n  i2c_handle->XferCount = 0;\n  i2c_handle->hdmatx->XferAbortCallback = NULL;\n  i2c_handle->hdmarx->XferAbortCallback = NULL;\n  if (i2c_handle->State != HAL_I2C_STATE_ABORT) {\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Instance->CR1 &= 0xfffffffe;\n    HAL_I2C_ErrorCallback(i2c_handle);\n    return;\n  }\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Instance->CR1 &= 0xfffffffe;\n  HAL_I2C_AbortCpltCallback(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f3c",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_DMA_transfer_08001f3c"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_string_length_08000218",
                "__s": "str",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t find_string_length_08000218(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  while (current_char = *current_ptr) {\n    current_ptr++;\n  }\n  return (size_t)(current_ptr - str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "printNumber"
            ],
            "imported": false,
            "current_name": "find_string_length_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_pwm_mode_0800339c",
                "pin": "pin",
                "uVar1": "pin_function",
                "uVar2": "mode",
                "PTR_PinMap_PWM_080033c4": "PTR_PinMap_PWM_080033c4"
            },
            "code": "uint32_t get_pwm_mode_0800339c(PinName_conflict pin)\n{\n  uint32_t pin_function = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_080033c4);\n  uint32_t mode = (pin_function << 12) >> 27;\n  if (mode == 3) {\n    return 8;\n  }\n  if (mode != 4) {\n    if (mode != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_pwm_mode_0800339c"
        },
        "FUN_08003968": {
            "renaming": {
                "FUN_08003968": "handle_i2c_error_interrupt_08003968",
                "PTR_i2c_handles_08003974": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_error_interrupt_08003968(I2C_HandleTypeDef* i2c_handle)\n{\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003968",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003968"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_interrupt_priority_08000e60",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_group_bits",
                "uVar3": "priority_group_value",
                "priority_group_shift": "priority_group_shift",
                "priority_mask": "priority_mask",
                "preempt_bits": "preempt_bits",
                "sub_bits": "sub_bits",
                "irq_priority_reg": "irq_priority_reg"
            },
            "code": "void set_interrupt_priority_08000e60(IRQn_Type_conflict irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint8_t irq_num = (uint8_t)irq;\n  uint8_t priority_group_bits = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint8_t priority_group_value = 7 - priority_group_bits;\n  if (priority_group_value > 3) {\n    priority_group_value = 4;\n  }\n  uint8_t priority_group_shift = (priority_group_bits + 4 < 7) ? 0 : priority_group_bits - 3;\n  uint32_t priority_mask = (1 << (priority_group_value & 0xff)) - 1U;\n  uint32_t preempt_bits = (preempt_priority & priority_mask) << (priority_group_shift & 0xff);\n  uint32_t sub_bits = (1 << (priority_group_shift & 0xff)) - 1U & sub_priority;\n  uint8_t *irq_priority_reg = (irq_num < 0) ? (DAT_08000ec0 + (irq_num & 0xf)) : (irq_num + 0xe000e400);\n  *irq_priority_reg = (uint8_t)(preempt_bits | sub_bits) << 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "SystemClock_Config",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "i2c_address_match_0800165a",
                "hi2c": "i2c_handle",
                "AddrMatchCode": "address_match_code"
            },
            "code": "HAL_StatusTypeDef i2c_address_match_0800165a(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_address_match_0800165a"
        },
        "FUN_080037d4": {
            "renaming": {
                "FUN_080037d4": "handle_timer_interrupt_080037d4",
                "*PTR_timer_handles_080037e4": "*timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "current_timer_handle": "current_timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_080037d4(void)\n{\n  TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037e4 + 0x10);\n  if (current_timer_handle != (TIM_HandleTypeDef *)0x0) {\n    HAL_TIM_IRQHandler(current_timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037d4",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037d4"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "read_registers_08000b04",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_registers",
                "bVar1": "register_offset",
                "bVar2": "num_bytes",
                "uVar3": "response_size",
                "uVar4": "register_value",
                "uVar5": "i"
            },
            "code": "int8_t __thiscall read_registers_08000b04(Modbus *modbus,uint16_t *registers,uint8_t num_registers)\\n{\\n  byte register_offset = modbus->au8Buffer[3];\\n  byte num_bytes = modbus->au8Buffer[5];\\n  modbus->au8Buffer[4] = \"\\0\";\\n  modbus->au8Buffer[5] = num_bytes;\\n  modbus->u8BufferSize = \"\\x06\";\\n  for (uint i = 0; i < num_bytes; i++) {\\n    uint16_t register_value = makeWord(modbus->au8Buffer[i * 2 + 7],modbus->au8Buffer[i * 2 + 8]);\\n    registers[register_offset + i] = register_value;\\n  }\\n  uint8_t response_size = modbus->u8BufferSize;\\n  sendTxBuffer(modbus);\\n  return response_size + \"\\x02\";\\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "handle_RTC_events_0800262c",
                "hrtc": "rtc_handle",
                "RTC_ISR_ALRAF": "RTC_ISR_ALRAF_FLAG",
                "RTC_ISR_ALRBF": "RTC_ISR_ALRBF_FLAG",
                "RTC_CR_ALRAIE": "RTC_CR_ALRAIE_ENABLE",
                "RTC_CR_ALRBIE": "RTC_CR_ALRBIE_ENABLE",
                "RTC_ISR_ALRAF_RESET": "RTC_ISR_ALRAF_FLAG_RESET",
                "RTC_ISR_ALRBF_RESET": "RTC_ISR_ALRBF_FLAG_RESET",
                "DAT_08002688": "RTC_STATUS_REG",
                "RTC_STATUS_REG_OFFSET": "0x14",
                "RTC_STATUS_REG_UPDATE": "0x20000"
            },
            "code": "void handle_RTC_events_0800262c(RTC_HandleTypeDef *rtc_handle)\n{\n  if (((rtc_handle->Instance->ISR & RTC_ISR_ALRAF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRAIE) != 0)) {\n    HAL_RTC_AlarmAEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = rtc_handle->Instance->ISR & RTC_ISR_ALRAF_RESET;\n  }\n  if (((rtc_handle->Instance->ISR & RTC_ISR_ALRBF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRBIE) != 0)) {\n    HAL_RTCEx_AlarmBEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = rtc_handle->Instance->ISR & RTC_ISR_ALRBF_RESET;\n  }\n  *(uint32_t *)(DAT_08002688 + DAT_08002688_OFFSET) = DAT_08002688_UPDATE;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback",
                "HAL_RTCEx_AlarmBEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_RTC_events_0800262c"
        },
        "FUN_080047a8": {
            "renaming": {
                "FUN_080047a8": "handle_gpio_exti_interrupts_080047a8",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_interrupts_080047a8(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while (gpio_pin < 0x8001) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupts_080047a8"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "setSerialConfig_08004388",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "parityBits",
                "iVar2": "dataBits",
                "_serial": "_serial",
                "PTR_s__home_bo__arduino15_packages_STM_08004440": "PTR_s__home_bo__arduino15_packages_STM_08004440",
                "DAT_08004434": "DAT_08004434"
            },
            "code": "void setSerialConfig_08004388(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte parityBits;\n  int dataBits;\n  serial->_serial.baudrate = baudrate;\n  serial->_config = config;\n  byte configMask = config & 7;\n  if (configMask == 4) {\n    dataBits = 7;\n  }\n  else if (configMask == 6) {\n    dataBits = 8;\n  }\n  else if (configMask == 2) {\n    dataBits = 6;\n  }\n  else {\n    dataBits = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    serial->_serial.parity = 0x600;\n    dataBits++;\n  }\n  else if ((config & 0x20) == 0) {\n    serial->_serial.parity = 0;\n  }\n  else {\n    serial->_serial.parity = 0x400;\n    dataBits++;\n  }\n  if ((config & 8) == 0) {\n    serial->_serial.stopbits = 0;\n  }\n  else {\n    serial->_serial.stopbits = 0x2000;\n  }\n  if (dataBits == 8) {\n    serial->_serial.databits = 0;\n  }\n  else if (dataBits == 9) {\n    serial->_serial.databits = 0x1000;\n  }\n  else {\n    dataBits = 0;\n  }\n  if (dataBits != 0) {\n    uart_init((serial_t *)&serial->_serial);\n    uart_attach_rx_callback((serial_t *)&serial->_serial, DAT_08004434);\n    return;\n  }\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08004440, 299, PTR___PRETTY_FUNCTION___0800443c, PTR_s_databits__0_08004438);\n}",
            "called": [
                "__assert_func",
                "uart_attach_rx_callback",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setSerialConfig_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "terminate_program_080051ac"
            },
            "code": "void terminate_program_080051ac(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "terminate_program_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "flush_if_buffer_not_empty_080052cc",
                "param_1": "stream_ptr",
                "param_2": "stream",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result",
                "PTR___sf_fake_stdin_08005314": "PTR___sf_fake_stdin_08005314",
                "PTR___sf_fake_stdout_08005318": "PTR___sf_fake_stdout_08005318",
                "PTR___sf_fake_stderr_0800531c": "PTR___sf_fake_stderr_0800531c",
                "__sinit": "__sinit",
                "*(int *)(param_2 + 0x10)": "*stream_count_ptr",
                "*(int *)(param_1 + 0x18)": "*(int *)(stream_ptr + 0x18)",
                "*(char **)(param_1 + 4)": "*(char **)(stream_ptr + 4)",
                "*(char **)(param_1 + 8)": "*(char **)(stream_ptr + 8)",
                "*(char **)(param_1 + 0xc)": "*(char **)(stream_ptr + 0xc)",
                "*(short *)(param_2 + 0xc)": "*stream_flags_ptr",
                "__sflush_r": "__sflush_r"
            },
            "code": "int flush_if_buffer_not_empty_080052cc(int stream_ptr, char* stream, int arg3, int arg4) {\n  int result = 0;\n  int* stream_count_ptr = (int *)(stream + 0x10);\n  if (*stream_count_ptr != 0) {\n    if ((stream_ptr != 0) && (*(int *)(stream_ptr + 0x18) == 0)) {\n      __sinit();\n    }\n    if (stream == PTR___sf_fake_stdin_08005314) {\n      stream = *(char **)(stream_ptr + 4);\n    }\n    else if (stream == PTR___sf_fake_stdout_08005318) {\n      stream = *(char **)(stream_ptr + 8);\n    }\n    else if (stream == PTR___sf_fake_stderr_0800531c) {\n      stream = *(char **)(stream_ptr + 0xc);\n    }\n    short* stream_flags_ptr = (short *)(stream + 0xc);\n    if (*stream_flags_ptr != 0) {\n      result = __sflush_r(stream_ptr, stream, arg3, arg4);\n    }\n  }\n  return result;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_not_empty_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "transmitData_08002eb2",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "pTxBuffPtr": "pTxBuffPtr",
                "TxXferSize": "TxXferSize",
                "TxXferCount": "TxXferCount",
                "ErrorCode": "ErrorCode",
                "gState": "gState",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance": "Instance",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef transmitData_08002eb2(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size)\n{\n  if (uartHandle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uartHandle->Lock != HAL_LOCKED) {\n    uartHandle->pTxBuffPtr = data;\n    uartHandle->TxXferSize = size;\n    uartHandle->TxXferCount = size;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n    uartHandle->Lock = HAL_UNLOCKED;\n    uartHandle->Instance->CR1 |= 0x80;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "transmitData_08002eb2"
        },
        "FUN_08005478": {
            "renaming": {
                "FUN_08005478": "process_items_08005478",
                "param_1": "item_count",
                "param_2": "item_processor",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar5": "result",
                "piVar3": "item_ptr",
                "iVar4": "item_data_ptr",
                "iVar6": "item_data_count",
                "uVar1": "processed_item"
            },
            "code": "uint process_items_08005478(int item_count, code *item_processor, undefined4 param_3, undefined4 param_4) {\n  uint result = 0;\n  for (int *item_ptr = (int *)(item_count + 0x48); item_ptr != (int *)0x0; item_ptr = (int *)*item_ptr) {\n    int item_data_ptr = item_ptr[2];\n    int item_data_count = item_ptr[1];\n    while (item_data_count = item_data_count - 1, -1 < item_data_count) {\n      if ((1 < *(ushort *)(item_data_ptr + 0xc)) && (*(short *)(item_data_ptr + 0xe) + 1 != 0)) {\n        uint processed_item = (*item_processor)(item_count, item_data_ptr, param_3, *(short *)(item_data_ptr + 0xe) + 1, param_4);\n        result |= processed_item;\n      }\n      item_data_ptr += 0x68;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005478",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_items_08005478"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMP_TABLE"
            },
            "code": "void initialize_system_08000d3c(void)\n{\n  int i;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8667_08000d84;\n  undefined4 *dso_handle_ptr = (undefined4 *)PTR___dso_handle_08000d7c;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (i = 0; dso_handle_ptr + i < (undefined4 *)PTR_completed_8667_08000d80; i += 4) {\n    *(undefined4 *)(dso_handle_ptr + i) = *(undefined4 *)(PTR__sidata_08000d78 + i);\n  }\n  for (; completed_ptr < (undefined4 *)PTR__ebss_08000d88; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  main();\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  USART_TypeDef *pUVar4;\n  USART_TypeDef *pUVar5;\n  USART_TypeDef *pUVar6;\n  USART_TypeDef *pUVar7;\n  USART_TypeDef *pUVar8;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar9;\n  GPIO_TypeDef *pGVar10;\n  uint32_t uVar11;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84);\n    }\n    else {\n      pUVar9 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar9;\n      pUVar8 = DAT_08003c7c;\n      pUVar7 = DAT_08003c78;\n      pUVar6 = DAT_08003c74;\n      pUVar5 = DAT_08003c70;\n      pUVar4 = DAT_08003c6c;\n      pUVar3 = DAT_08003c68;\n      pUVar2 = DAT_08003c64;\n      pUVar1 = DAT_08003c60;\n      if (pUVar9 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (pUVar9 == DAT_08003c60) {\n          DAT_08003c60[0xa93].CR2 = DAT_08003c60[0xa93].CR2 | 0x10;\n          pUVar1[0xa93].CR2 = pUVar1[0xa93].CR2 & 0xffffffef;\n          pUVar1[0xa94].CR3 = pUVar1[0xa94].CR3 | 0x10;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c64) {\n          DAT_08003c64[0x11dc].CR2 = DAT_08003c64[0x11dc].CR2 | 0x20000;\n          pUVar2[0x11dc].CR2 = pUVar2[0x11dc].CR2 & 0xfffdffff;\n          pUVar2[0x11dd].CR3 = pUVar2[0x11dd].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c68) {\n          DAT_08003c68[0x11b8].SR = DAT_08003c68[0x11b8].SR | 0x40000;\n          pUVar3[0x11b8].SR = pUVar3[0x11b8].SR & 0xfffbffff;\n          pUVar3[0x11b9].DR = pUVar3[0x11b9].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c6c) {\n          DAT_08003c6c[0x1193].CR1 = DAT_08003c6c[0x1193].CR1 | 0x80000;\n          pUVar4[0x1193].CR1 = pUVar4[0x1193].CR1 & 0xfff7ffff;\n          pUVar4[0x1194].CR2 = pUVar4[0x1194].CR2 | 0x80000;\n          obj->index = '\\x03';\n          obj->irq = UART4_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c70) {\n          DAT_08003c70[0x116e].GTPR = DAT_08003c70[0x116e].GTPR | 0x100000;\n          pUVar5[0x116e].GTPR = pUVar5[0x116e].GTPR & 0xffefffff;\n          pUVar5[0x1170].SR = pUVar5[0x1170].SR | 0x100000;\n          obj->index = '\\x04';\n          obj->irq = UART5_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c74) {\n          DAT_08003c74[0xa6f].SR = DAT_08003c74[0xa6f].SR | 0x20;\n          pUVar6[0xa6f].SR = pUVar6[0xa6f].SR & 0xffffffdf;\n          pUVar6[0xa70].DR = pUVar6[0xa70].DR | 0x20;\n          obj->index = '\\x05';\n          obj->irq = USART6_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c78) {\n          DAT_08003c78[0x1001].DR = DAT_08003c78[0x1001].DR | 0x40000000;\n          pUVar7[0x1001].DR = pUVar7[0x1001].DR & 0xbfffffff;\n          pUVar7[0x1002].BRR = pUVar7[0x1002].BRR | 0x40000000;\n          obj->index = '\\x06';\n          obj->irq = UART7_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c7c) {\n          DAT_08003c7c[0xfdc].CR2 = DAT_08003c7c[0xfdc].CR2 | 0x80000000;\n          pUVar8[0xfdc].CR2 = pUVar8[0xfdc].CR2 & 0x7fffffff;\n          pUVar8[0xfdd].CR3 = pUVar8[0xfdd].CR3 | 0x80000000;\n          obj->index = '\\a';\n          obj->irq = UART8_IRQn;\n        }\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        GPIO_InitStruct.Alternate = (uVar11 << 0x11) >> 0x19;\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08003c80 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_merge_peripheral",
                "iprintf",
                "HAL_UART_Init",
                "pinmap_peripheral",
                "HAL_GPIO_Init",
                "pinmap_function"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_08003854": {
            "renaming": {
                "FUN_08003854": "handle_timer_interrupt_08003854",
                "PTR_timer_handles_08003864": "PTR_timer_handles_08003864",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08003854(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003864 + 0x2c);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003854",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003854"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_pin_map_0800316c",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "mask": "mask"
            },
            "code": "void update_pin_map_0800316c(PinName_conflict pin, uint32_t *map)\n{\n  uint32_t pin_index = ((uint32_t)pin << 24) >> 28;\n  uint32_t mask = ~(1 << ((uint32_t)pin & 0xF));\n  map[pin_index] &= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "update_pin_map_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_080040d0",
                "file_UNUSED": "file_descriptor",
                "return value": "error_code"
            },
            "code": "int return_error_080040d0(int file_descriptor)\n{\n  int error_code = -1;\n  return error_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_080040d0"
        },
        "FUN_0800401c": {
            "renaming": {
                "FUN_0800401c": "handle_UART4_interrupt_0800401c",
                "UART4_IRQn": "UART4_Interrupt",
                "PTR_uart_handlers_08004030": "PTR_uart_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "UART_HandleTypeDef": "UART_handler",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "code": "void handle_UART4_interrupt_0800401c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART4_IRQn);\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004030_08004030 + 0xc);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800401c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART4_interrupt_0800401c"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_file_mode_to_directory_080040d6",
                "file_UNUSED": "N/A",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_080040d6(stat* file_stat) {\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "write_byte_to_buffer_08004a34",
                "param_1": "buffer_address",
                "param_2": "byte_to_write",
                "param_3": "buffer_pointers",
                "uVar1": "result",
                "pbVar2": "last_byte_address",
                "buffer_pointers[2]": "last_byte_address",
                "buffer_pointers[6]": "buffer_end_address",
                "current_byte_address": "current_byte_address",
                "*buffer_pointers": "current_byte_address",
                "*current_byte_address": "byte_to_write"
            },
            "code": "uint write_byte_to_buffer_08004a34(uint buffer_address, byte byte_to_write, byte **buffer_pointers)\n{\n  uint result;\n  byte *last_byte_address;\n  byte *current_byte_address;\n  byte *buffer_end_address;\n  \n  last_byte_address = buffer_pointers[2] - 1;\n  buffer_pointers[2] = last_byte_address;\n  \n  buffer_end_address = buffer_pointers[6];\n  if (((int)last_byte_address < 0) && (((int)last_byte_address < (int)buffer_end_address || (byte_to_write == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  \n  current_byte_address = *buffer_pointers;\n  *buffer_pointers = current_byte_address + 1;\n  *current_byte_address = byte_to_write;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "divide_and_conquer_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient"
            },
            "code": "void divide_and_conquer_080002d0(int dividend, int divisor, int remainder, int quotient)\n{\n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend, divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__aeabi_idiv0",
                "__udivmoddi4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "imported": false,
            "current_name": "divide_and_conquer_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_uart_handler_index_08003f00",
                "huart": "uart_handler",
                "uVar1": "index"
            },
            "code": "uint8_t find_uart_handler_index_08003f00(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t index = 0;\n  if (uart_handler == NULL) {\n    index = 10;\n  }\n  else {\n    while (index < 10) {\n      if (uart_handler == *(UART_HandleTypeDef **)(PTR_uart_handlers_08003f20 + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "imported": false,
            "current_name": "find_uart_handler_index_08003f00"
        },
        "FUN_08004270": {
            "renaming": {
                "FUN_08004270": "readSerialData_08004270",
                "this": "serial",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "currentByte",
                "uVar2": "tailIndex"
            },
            "code": "int readSerialData_08004270(HardwareSerial *serial, int fileDescriptor, void *buffer, size_t numBytes) {\n  byte currentByte;\n  ushort tailIndex;\n  tailIndex = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)tailIndex) {\n    currentByte = (serial->_serial).rx_buff[tailIndex];\n    (serial->_serial).rx_tail = (tailIndex + 1) & 0x3f;\n    return (uint)currentByte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004270",
            "calling": [],
            "imported": false,
            "current_name": "readSerialData_08004270"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_080037e8": {
            "renaming": {
                "FUN_080037e8": "handle_timer_interrupt_080037e8",
                "PTR_timer_handles_080037f8": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandleType"
            },
            "code": "void handle_timer_interrupt_080037e8(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037f8_080037f8 + 0x14);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037e8",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037e8"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "transfer_byte_08001440",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer",
                "pBuffPtr": "buffer_pointer",
                "XferCount": "transfer_count",
                "Instance": "instance",
                "DR": "data_register",
                "HAL_OK": "transfer_success"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001440(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_mem_08000230",
                "__s": "mem",
                "__c": "byte_to_find",
                "__n": "mem_size",
                "bVar1": "byte_val",
                "cVar2": "byte_val2",
                "cVar3": "byte_val3",
                "cVar4": "byte_val4",
                "cVar5": "byte_val5",
                "pbVar6": "byte_ptr",
                "puVar7": "uint_mem",
                "pbVar8": "byte_ptr",
                "uVar9": "uint_mask",
                "uVar10": "j",
                "uVar11": "i",
                "uVar12": "uint_val",
                "uVar13": "uint_val2",
                "bVar14": "bool_val1",
                "bVar15": "bool_val2",
                "bVar16": "bool_val3",
                "bVar17": "bool_val4"
            },
            "code": "void * find_byte_in_mem_08000230(void *mem, int byte_to_find, size_t mem_size) {\n  byte *byte_mem = (byte*) mem;\n  uint *uint_mem;\n  byte *byte_ptr;\n  uint uint_val;\n  uint uint_val2;\n  uint uint_mask;\n  int i;\n  int j;\n  byte byte_val;\n  byte byte_val2;\n  byte byte_val3;\n  byte byte_val4;\n  byte byte_val5;\n  bool bool_val1;\n  bool bool_val2;\n  bool bool_val3;\n  bool bool_val4;\n  uint_mask = byte_to_find & 0xff;\n  if ((int) mem_size < 0x10) {\n    while (mem_size > 0) {\n      byte_val = *byte_mem;\n      byte_mem++;\n      mem_size--;\n      if (byte_val == uint_mask) {\n        return (void*) (byte_mem - 1);\n      }\n    }\n  }\n  else {\n    j = (uint) byte_mem & 7;\n    while (true) {\n      if (j == 0) {\n        uint_mask = uint_mask | (uint_mask << 8);\n        uint_mask = uint_mask | (uint_mask << 16);\n        i = mem_size & 0xfffffff8;\n        while (i != 0) {\n          uint_mem = (uint*) byte_mem;\n          byte_mem += 8;\n          i -= 8;\n          uint_val = *uint_mem ^ uint_mask;\n          uint_val2 = *(uint_mem + 1) ^ uint_mask;\n          byte_val = (uint_val == 0);\n          byte_val2 = (uint_val >> 8 == 0);\n          byte_val3 = (uint_val >> 16 == 0);\n          byte_val4 = (uint_val >> 24 == 0);\n          uint_val = byte_val4 << 24 | byte_val3 << 16 | byte_val2 << 8 | byte_val;\n          bool_val1 = (uint_val2 & 0xff) != 0;\n          bool_val2 = (uint_val2 >> 8 & 0xff) != 0;\n          bool_val3 = (uint_val2 >> 16 & 0xff) != 0;\n          bool_val4 = (uint_val2 >> 24 & 0xff) != 0;\n          uint_val2 = bool_val4 << 24 | bool_val3 << 16 | bool_val2 << 8 | bool_val1;\n          if (uint_val2 != 0) {\n            if (uint_val == 0) {\n              byte_ptr = byte_mem + 5;\n              uint_val = uint_val2;\n            }\n            else {\n              byte_ptr = byte_mem + 1;\n            }\n            if ((uint_val & 1) == 0) {\n              bool_val1 = (uint_val & 0x100) == 0;\n              byte_mem = bool_val1 ? byte_ptr + 2 : byte_ptr + 1;\n              if ((uint_val & 0x18000) == 0) {\n                byte_mem = bool_val1 ? byte_mem : byte_mem + 1;\n              }\n            }\n            return (void*) (byte_mem - 1);\n          }\n        }\n        mem_size &= 7;\n      }\n      byte_val = *byte_mem;\n      byte_mem++;\n      mem_size--;\n      if (byte_val == uint_mask) {\n        return (void*) (byte_mem - 1);\n      }\n      j = (uint) byte_mem & 7;\n      if (mem_size == 0) {\n        return NULL;\n      }\n    }\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_in_mem_08000230"
        },
        "FUN_080051bc": {
            "renaming": {
                "FUN_080051bc": "decode_data_080051bc",
                "param_1": "data_ptr",
                "param_2": "decode_params_ptr",
                "iVar1": "total_bytes_read",
                "piVar2": "block_size_ptr",
                "uVar3": "current_block_size",
                "uVar4": "current_block_flag",
                "iVar5": "block_size_increment",
                "pcVar6": "decode_function_ptr",
                "iVar7": "data_start_offset",
                "uVar8": "bytes_read",
                "bVar9": "is_increment_zero",
                "decode_flags": "decode_flags",
                "block_size_ptr": "block_size_ptr",
                "decode_function_ptr": "decode_function_ptr",
                "decode_flags_ptr": "decode_flags_ptr",
                "data_start_ptr": "data_start_ptr",
                "is_block_flag_set": "is_block_flag_set"
            },
            "code": "uint decode_data_080051bc(uint *data_ptr, int *decode_params_ptr)\n{\n  int total_bytes_read;\n  int current_block_size;\n  uint current_block_flag;\n  uint decode_flags;\n  int *block_size_ptr;\n  int *decode_function_ptr;\n  int *decode_flags_ptr;\n  uint *data_start_ptr;\n  bool is_block_flag_set;\n  \n  current_block_flag = *(ushort *)(decode_params_ptr + 3);\n  current_block_size = (int)current_block_flag;\n  decode_flags = 0;\n  is_block_flag_set = false;\n  \n  if ((int)(current_block_size << 0x1c) < 0) {\n    block_size_ptr = decode_params_ptr + 4;\n    if (*block_size_ptr != 0) {\n      int block_size_increment = current_block_size << 0x1e;\n      bool is_increment_zero = block_size_increment == 0;\n      int data_start_offset = *decode_params_ptr;\n      decode_function_ptr = decode_params_ptr + 10;\n      if (is_increment_zero) {\n        block_size_increment = *(decode_params_ptr + 5);\n      }\n      *decode_params_ptr = *block_size_ptr;\n      if (!is_increment_zero) {\n        block_size_increment = 0;\n      }\n      *(decode_params_ptr + 2) = block_size_increment;\n      \n      for (total_bytes_read = data_start_offset - *block_size_ptr; total_bytes_read > 0; total_bytes_read -= block_size_increment) {\n        int bytes_read = (*(code *)decode_function_ptr)(data_ptr, *(decode_params_ptr + 8), *block_size_ptr, total_bytes_read);\n        if (bytes_read < 1) {\n          current_block_flag = *(ushort *)(decode_params_ptr + 3);\n          goto ERROR_EXIT;\n        }\n        *block_size_ptr += bytes_read;\n      }\n    }\n  }\n  else if (((decode_params_ptr[1] > 0) || (decode_params_ptr[0x10] > 0)) &&\n          ((decode_function_ptr = (int *)decode_params_ptr[0xb]) != (int *)0x0)) {\n    data_start_ptr = data_ptr;\n    data_ptr = 0;\n    if ((current_block_flag & 0x1000) == 0) {\n      int bytes_read = (*(code *)decode_function_ptr)(data_ptr, *(decode_params_ptr + 8), current_block_flag & 0x1000, 1);\n      if ((bytes_read == -1) && (*data_ptr != 0)) {\n        if ((*data_ptr != 0x1d) && (*data_ptr != 0x16)) {\n          *(ushort *)(decode_params_ptr + 3) |= 0x40;\n          return 0xffffffff;\n        }\n        *data_ptr = *data_start_ptr;\n        return 0;\n      }\n    }\n    else {\n      current_block_size = *(decode_params_ptr + 0x15);\n    }\n    if (((int)((uint)*(ushort *)(decode_params_ptr + 3) << 0x1d) < 0) &&\n       ((current_block_size -= decode_params_ptr[1]) != 0) && (decode_params_ptr[0xd] != 0)) {\n      current_block_size -= decode_params_ptr[0x10];\n    }\n    total_bytes_read = (*(code *)decode_function_ptr)(data_ptr, *(decode_params_ptr + 8), current_block_size, 0);\n    current_block_flag = *(ushort *)(decode_params_ptr + 3);\n    if ((total_bytes_read == -1) && ((*data_ptr > 0x1d) || (DAT_080052c8 >> (*data_ptr & 0xff)) < 0)) {\n      goto ERROR_EXIT;\n    }\n    decode_params_ptr[1] = 0;\n    *decode_params_ptr = *(decode_params_ptr + 4);\n    if (((int)((uint)current_block_flag << 0x13) < 0) && ((total_bytes_read != -1) || (*data_ptr == 0))) {\n      *(decode_params_ptr + 0x15) = total_bytes_read;\n    }\n    decode_flags_ptr = decode_params_ptr + 0xd;\n    if (*decode_flags_ptr != 0) {\n      if (decode_flags_ptr != decode_params_ptr + 0x11) {\n        _free_r(data_ptr);\n      }\n      *decode_flags_ptr = 0;\n      return 0;\n    }\n  }\n  return 0;\n\n  ERROR_EXIT:\n  *(ushort *)(decode_params_ptr + 3) |= 0x40;\n  return 0xffffffff;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051bc",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_080051bc"
        },
        "FUN_08004034": {
            "renaming": {
                "FUN_08004034": "handle_UART_interrupt_08004034",
                "UART5_IRQn": "UART_interrupt_num",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10)": "uart_handler"
            },
            "code": "void handle_UART_interrupt_08004034(UART_HandleTypeDef* *(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10))\n{\n  HAL_NVIC_ClearPendingIRQ(UART5_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10));\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004034",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08004034"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "abort_dma_transfer_08000f8c",
                "*hdma": "*dma_handle",
                "hdma->State": "dma_handle->state",
                "hdma->ErrorCode": "dma_handle->error_code",
                "hdma->Instance": "dma_handle->instance",
                "hdma->Instance->CR": "dma_handle->instance->CR",
                "& 0xfffffffe": "& ~(1U)"
            },
            "code": "HAL_StatusTypeDef abort_dma_transfer_08000f8c(DMA_HandleTypeDef *dma_handle)\n{\n  if (dma_handle->state != HAL_DMA_STATE_BUSY) {\n    dma_handle->error_code = 0x80;\n    return HAL_ERROR;\n  }\n  dma_handle->state = HAL_DMA_STATE_ABORT;\n  dma_handle->instance->CR &= ~(1U);\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "HAL_UART_IRQHandler",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "abort_dma_transfer_08000f8c"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "resetI2C_08001684",
                "hi2c": "i2c",
                "XferOptions": "transferOptions",
                "State": "currentState",
                "PreviousState": "previousState",
                "Instance": "i2cInstance",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "SR1": "statusRegister1",
                "Mode": "currentMode"
            },
            "code": "HAL_StatusTypeDef resetI2C_08001684(I2C_HandleTypeDef *i2c)\n{\n  if (((i2c->XferOptions == I2C_FIRST_FRAME) || (i2c->XferOptions == I2C_NEXT_FRAME)) && (i2c->State == HAL_I2C_STATE_LISTEN)) {\n    i2c->XferOptions = DAT_08001714;\n    i2c->Instance->CR2 &= ~(0x700);\n    i2c->Instance->SR1 &= ~(I2C_SR1_AF);\n    i2c->Instance->CR1 &= ~(I2C_CR1_ACK);\n    i2c->PreviousState = 0;\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2c);\n  }\n  else if (i2c->State == HAL_I2C_STATE_BUSY_TX) {\n    i2c->XferOptions = DAT_08001714;\n    i2c->PreviousState = 0x21;\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n    i2c->Instance->CR2 &= ~(0x700);\n    i2c->Instance->SR1 &= ~(I2C_SR1_AF);\n    i2c->Instance->CR1 &= ~(I2C_CR1_ACK);\n    HAL_I2C_SlaveTxCpltCallback(i2c);\n  }\n  else {\n    i2c->Instance->SR1 &= ~(I2C_SR1_AF);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "resetI2C_08001684"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "isInitializationCompleted_080001ac",
                "param_1": "initPtr",
                "PTR_completed_8667_080001c4": "isCompletedPtr",
                "DAT_080001c8": "initValuePtr"
            },
            "code": "bool isInitializationCompleted_080001ac(bool *PTR_completed_8667_080001c4, int *DAT_080001c8, void *initPtr) {\n  if (*PTR_completed_8667_080001c4 == false) {\n    if (*DAT_080001c8 != 0) {\n      initPtr = initPtr;\n    }\n    *PTR_completed_8667_080001c4 = true;\n  }\n  return initPtr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "isInitializationCompleted_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "count_files_080040e0",
                "file_UNUSED": "file_count"
            },
            "code": "int count_files_080040e0(int file_count)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "count_files_080040e0"
        },
        "FUN_08003868": {
            "renaming": {
                "FUN_08003868": "handle_timer_interrupt_08003868",
                "*PTR_timer_handles_08003878": "*timer_handles",
                "TIM_HandleTypeDef": "TimerHandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08003868(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003878 + 0x34);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003868",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003868"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_memory_with_char_080048cc",
                "__s": "memory",
                "__c": "character",
                "__n": "size",
                "puVar1": "current_byte"
            },
            "code": "void * fill_memory_with_char_080048cc(void *memory, int character, size_t size) {\n\tchar *current_byte;\n\n\tfor (current_byte = (char *)memory; current_byte != (char *)(size + (int)memory); current_byte++) {\n\t\t*current_byte = (char)character;\n\t}\n\treturn memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "std.isra.0",
                "__sfp",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "fill_memory_with_char_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "count_files_080040e4",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer",
                "dir_UNUSED": "directory"
            },
            "code": "int count_files_080040e4(int file_descriptor, int pointer, int directory) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "count_files_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_pin_08003506",
                "PinMap_conflict": "PinMap",
                "peripheral": "peripheral_ptr",
                "map": "pin_map",
                "NC": "NoConnection",
                "pin": "pin_name"
            },
            "code": "PinName find_pin_08003506(void *peripheral, PinMap *map) {\n  while (true) {\n    if (map->peripheral == (void *)0x0) {\n      return NC;\n    }\n    if (map->peripheral == peripheral) {\n      break;\n    }\n    map++;\n  }\n  return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "imported": false,
            "current_name": "find_pin_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "getSystemCoreClock_080025e0",
                "PTR_SystemCoreClock_080025e8": "ptr_system_core_clock"
            },
            "code": "uint32_t getSystemCoreClock_080025e0(void)\n{\n  uint32_t* PTR_SystemCoreClock_080025e8 = (uint32_t*)PTR_SystemCoreClock_080025e8;\n  return *PTR_SystemCoreClock_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "count_lines_080040e8",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "file_contents",
                "len_UNUSED": "file_length"
            },
            "code": "int count_lines_080040e8(int file_descriptor, char *file_contents, int file_length) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "count_lines_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_register_bit_08000a00",
                "this": "modbus_instance",
                "regs": "registers",
                "u8size": "num_registers",
                "uVar1": "register_value",
                "uVar2": "bit_index",
                "uVar3": "register_index"
            },
            "code": "int8_t __thiscall set_register_bit_08000a00(Modbus *modbus_instance, uint16_t *registers, uint8_t num_registers)\n{\n  uint16_t register_value;\n  uint register_index;\n  uint bit_index;\n  \n  register_value = makeWord(modbus_instance->au8Buffer[2],modbus_instance->au8Buffer[3]);\n  register_index = ((uint)register_value << 0x14) >> 0x18;\n  bit_index = register_value & 0xf;\n  if (modbus_instance->au8Buffer[4] == 0xff) {\n    registers[register_index] = (ushort)(1 << bit_index) | registers[register_index];\n  }\n  else {\n    registers[register_index] = registers[register_index] & ~(ushort)(1 << bit_index);\n  }\n  modbus_instance->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus_instance);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_register_bit_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "std::function<void()>::operator__": "execute_function",
                "function_void___": "function",
                "_M_manager": "manager",
                "_M_invoker": "invoker",
                "_Any_data": "data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080047c0": "execute_function_080047c0"
            },
            "code": "void __thiscall execute_function_080047c0(std::function<void()>::function_void___ *function)\n{\n  if ((function->super__Function_base)._M_manager != (_Manager_type)0x0) {\n    (*function->_M_invoker)((_Any_data *)function);\n    return;\n  }\n  __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_for_struct_08005374",
                "param_1": "size_of_struct",
                "param_2": "number_of_structs",
                "puVar1": "struct_ptr",
                "iVar2": "total_size_of_structs"
            },
            "code": "undefined4 * allocate_memory_for_struct_08005374(int size_of_struct, int number_of_structs){\n  undefined4 *struct_ptr;\n  int total_size_of_structs = (number_of_structs - 1) * sizeof(struct) + sizeof(int) * 2;\n  struct_ptr = (undefined4 *)_malloc_r(size_of_struct, total_size_of_structs);\n  if (struct_ptr != (undefined4 *)0x0) {\n    *struct_ptr = 0;\n    struct_ptr[1] = number_of_structs;\n    struct_ptr[2] = struct_ptr + 3;\n    memset(struct_ptr + 3, 0, total_size_of_structs - sizeof(int) * 2);\n  }\n  return struct_ptr;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08004dec;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08004e60;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar6 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08004f42:\n    *puVar3 = uVar7;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "get_stimer_from_htim_08003750",
                "htim": "input_htim",
                "prev_htim": "previous_htim"
            },
            "code": "stimer_t * get_stimer_from_htim_08003750(TIM_HandleTypeDef *htim)\n{\n  TIM_HandleTypeDef *prev_htim = htim - 1;\n  return (stimer_t *)&prev_htim->Lock;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_htim_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "i2c_listen_080014ec",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "cr1_reg"
            },
            "code": "HAL_StatusTypeDef i2c_listen_080014ec(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t options)\n{\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *instance;\n  uint32_t cr1_reg;\n\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = (data == NULL || size == 0) ? HAL_ERROR : HAL_BUSY;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      cr1_reg = instance->CR1;\n      if ((cr1_reg & 1) == 0) {\n        instance->CR1 = cr1_reg | 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "allocate_memory_080048dc",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "filler1",
                "param_4": "filler2",
                "puVar1": "free_list_ptr",
                "piVar2": "temp3",
                "extraout_r1": "temp1",
                "ppiVar3": "temp1",
                "ppiVar4": "temp2",
                "ppiVar5": "current_free_list",
                "ppiVar6": "prev_free_list",
                "ppiVar7": "current_ptr",
                "bVar8": "is_equal"
            },
            "code": "void allocate_memory_080048dc(int* error_code, int size, int filler1, int filler2) {\n  if (size == 0) {\n    return;\n  }\n  int** current_ptr = (int**)(size - 4);\n  if (*(int*)(size - 4) < 0) {\n    current_ptr = (int**)((int)current_ptr + *(int*)(size - 4));\n  }\n  __malloc_lock();\n  void* free_list_ptr = PTR___malloc_free_list_08004974;\n  int** current_free_list = *(int***)PTR___malloc_free_list_08004974;\n  if (current_free_list == NULL) {\n    current_ptr[1] = NULL;\n    *(int***)free_list_ptr = current_ptr;\n    int** temp1 = (int**)extraout_r1;\n    int** temp2 = (int**)free_list_ptr;\n  }\n  else if (current_ptr < current_free_list) {\n    int** temp1 = (int**)*current_ptr;\n    int** temp2 = (int**)((int)current_ptr + (int)temp1);\n    bool is_equal = current_free_list == temp2;\n    if (is_equal) {\n      temp2 = (int**)*current_free_list;\n      current_free_list = (int**)current_free_list[1];\n    }\n    current_ptr[1] = (int*)current_free_list;\n    if (is_equal) {\n      temp2 = (int**)((int)temp2 + (int)temp1);\n      *current_ptr = (int*)temp2;\n    }\n    *(int***)free_list_ptr = current_ptr;\n  }\n  else {\n    do {\n      int** prev_free_list = current_free_list;\n      int** temp2 = (int**)prev_free_list[1];\n      if (temp2 == NULL) break;\n      current_free_list = temp2;\n    } while (temp2 <= current_ptr);\n    int** temp1 = (int**)*prev_free_list;\n    if ((int**)((int)prev_free_list + (int)temp1) == current_ptr) {\n      temp1 = (int**)((int)temp1 + (int)*current_ptr);\n      *prev_free_list = (int*)temp1;\n      if (temp2 == (int**)((int)prev_free_list + (int)temp1)) {\n        int* temp3 = *temp2;\n        temp2 = (int**)temp2[1];\n        prev_free_list[1] = (int*)temp2;\n        temp1 = (int**)((int)temp1 + (int)temp3);\n        *prev_free_list = (int*)temp1;\n      }\n    }\n    else if (current_ptr < (int**)((int)prev_free_list + (int)temp1)) {\n      *error_code = 0xc;\n    }\n    else {\n      temp1 = (int**)((int)current_ptr + (int)*current_ptr);\n      bool is_equal = temp2 == temp1;\n      if (is_equal) {\n        temp1 = (int**)*temp2;\n        temp2 = (int**)temp2[1];\n      }\n      current_ptr[1] = (int*)temp2;\n      if (is_equal) {\n        temp1 = (int**)((int)temp1 + (int)*current_ptr);\n        *current_ptr = (int*)temp1;\n      }\n      prev_free_list[1] = (int*)current_ptr;\n    }\n  }\n  __malloc_unlock(error_code, temp1, temp2, filler2);\n  return;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "handle_timer_interrupt_08003754",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "timer_irq_handler"
            },
            "code": "void handle_timer_interrupt_08003754(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if ((timer_obj->timer_irq_handler != (_func_void_stimer_t_ptr_uint32_t *)0x0) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->timer_irq_handler)(timer_obj, 0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "i2c_listen_mode_08001578",
                "hi2c": "handle",
                "pIVar1": "i2c_instance",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "Instance": "Instance",
                "CR1": "CR1",
                "CR2": "CR2"
            },
            "code": "HAL_StatusTypeDef i2c_listen_mode_08001578(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *i2c_instance;\n  \n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = handle->Instance;\n  if ((i2c_instance->CR1 & 1) == 0) {\n    i2c_instance->CR1 |= 1;\n  }\n  i2c_instance->CR1 |= 0x400;\n  i2c_instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_mode_08001578"
        },
        "FUN_080035ac": {
            "renaming": {
                "FUN_080035ac": "handle_rtc_alarm_interrupt_080035ac",
                "PTR_RtcHandle_080035b8": "rtc_handle"
            },
            "code": "void handle_rtc_alarm_interrupt_080035ac(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_080035b8 = (RTC_HandleTypeDef*)PTR_RtcHandle_080035b8;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_080035b8);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_interrupt_080035ac"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "get_value_or_double_08004844",
                "param_1": "value",
                "param_2": "flag",
                "DAT_0800485c": "has_flag"
            },
            "code": "unsigned long long get_value_or_double_08004844(uint32_t value, uint64_t flag)\n{\n  if (DAT_0800485c != 0) {\n    return CONCAT44(value,2);\n  }\n  return (unsigned long long)flag << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "get_value_or_double_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_gpio_type_def_0800318c",
                "port_idx": "port_index",
                "DAT_080031d0": "portA",
                "DAT_080031f8": "portB",
                "DAT_080031d4": "portC",
                "DAT_080031d8": "portD",
                "DAT_080031dc": "portE",
                "DAT_080031e0": "portF",
                "DAT_080031e4": "portG",
                "DAT_080031e8": "portH",
                "DAT_080031ec": "portI",
                "DAT_080031f0": "portJ",
                "DAT_080031f4": "portK"
            },
            "code": "GPIO_TypeDef* get_gpio_type_def_0800318c(uint32_t port_idx)\n{\n  switch(port_idx) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return NULL;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_gpio_type_def_0800318c"
        },
        "FUN_080001d0": {
            "renaming": {
                "FUN_080001d0": "execute_if_completed_080001d0",
                "PTR_completed_8667_08000210": "completed_ptr",
                "PTR_object_8672_0800020c": "object_ptr",
                "DAT_08000204": "data",
                "DAT_08000214": "function_ptr"
            },
            "code": "void execute_if_completed_080001d0(void)\n{\n    int* PTR_completed_8667_08000210 = (int*)PTR_completed_8667_08000210;\n    code* DAT_08000214 = DAT_08000214;\n    \n    if (DAT_08000204 == 0)\n    {\n        return;\n    }\n    \n    if (*PTR_completed_8667_08000210 != 0 && DAT_08000214 != (code*)0x0)\n    {\n        (*DAT_08000214)(PTR_completed_8667_08000210, PTR_object_8672_0800020c);\n    }\n    \n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_completed_080001d0"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "handle_gpio_interrupt_080047d0",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_080047ec": "gpio_irq_conf_ptr"
            },
            "code": "void handle_gpio_interrupt_080047d0(uint16_t pin_number)\n{\n  byte pin_id = get_pin_id(pin_number);\n  int* PTR_gpio_irq_conf_080047ec = PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 0xc;\n  if (*PTR_gpio_irq_conf_080047ec != 0) {\n    std::function<void()>::operator__\n              ((function_void___ *)(PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 4));\n  }\n  return;\n}",
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_for_status_080040f8",
                "status_UNUSED": "status"
            },
            "code": "void wait_for_status_080040f8(int status) {\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "memory_address",
                "param_2": "memory_size",
                "puVar1": "errno_address",
                "pcVar2": "allocated_memory_address"
            },
            "code": "void allocate_memory_0800500c(int *memory_address, int memory_size) {\n  undefined *errno_address = PTR_errno_08005028;\n  *(undefined4 *)PTR_errno_08005028 = 0;\n  caddr_t allocated_memory_address = _sbrk(memory_size);\n  if ((allocated_memory_address == (caddr_t)0xffffffff) && (*(int *)errno_address != 0)) {\n    *memory_address = *(int *)errno_address;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculateResult_080023b4",
                "uVar1": "bitmask",
                "uVar2": "dividend",
                "DAT_0800247c": "dataPointer",
                "DAT_08002484": "result1",
                "DAT_08002480": "result2",
                "PTR_08002478": "pointerToData"
            },
            "code": "uint32_t calculateResult_080023b4(void)\n{\n  uint32_t bitmask = *(uint32_t *)(DAT_0800247c + 8) & 0xc;\n  if (bitmask == 4) {\n    return DAT_08002484;\n  }\n  if (bitmask != 8) {\n    return DAT_08002480;\n  }\n  uint32_t divisor = *(uint32_t *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint32_t *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint32_t dividend = (uint32_t)(*(int32_t *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    divisor = __aeabi_uldivmod(dividend * 16000000, (((uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f)) * 8 + (uint32_t)CARRY4(dividend * 0x3d08,dividend)) * 0x400 | dividend * 0x3d09 >> 0x16, divisor, 0);\n  }\n  else {\n    uint32_t dividend = (uint32_t)(*(int32_t *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    divisor = __aeabi_uldivmod(dividend * 8000000, (((uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f)) * 8 + (uint32_t)CARRY4(dividend * 0x3d08,dividend)) * 0x200, divisor, 0);\n  }\n  uint32_t quotient = divisor / ((((uint32_t)(*(int32_t *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  return quotient;\n}",
            "called": [
                "__aeabi_uldivmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculateResult_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "handle_gpio_interrupt_080011a4",
                "GPIO_Pin": "gpio_pin",
                "DAT_080011bc": "gpio_data"
            },
            "code": "void handle_gpio_interrupt_080011a4(uint16_t gpio_pin)\n{\n  uint32_t* DAT_080011bc = (uint32_t*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & (uint32_t)gpio_pin) != 0) {\n    *DAT_080011bc = (uint32_t)gpio_pin;\n    HAL_GPIO_EXTI_Callback(gpio_pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "handle_i2c_errors_08001e68",
                "hi2c": "handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "uVar3": "sr1_reg",
                "uVar4": "cr2_reg",
                "DAT_08001f38": "I2C_SR1_BUS_ERROR_FLAG",
                "I2C_CR2_ERROR_INTERRUPT_ENABLE": "0x100",
                "I2C_SR1_ERROR_MASK": "0x100",
                "I2C_SR1_ADDR_MATCHED_MASK": "0x10200",
                "I2C_SR1_DATA_REGISTER_EMPTY_MASK": "0x10400",
                "I2C_SR1_STOP_DETECTED_MASK": "0x10800",
                "I2C_STATE_LISTEN": "0x21",
                "I2C_CR1_ACKNOWLEDGE_FAILURE_RESET": "0x200",
                "I2C_ERROR_CODE_BUS_ERROR": "1",
                "I2C_ERROR_CODE_ARBITRATION_LOST": "2",
                "I2C_ERROR_CODE_ACK_FAILURE": "4",
                "I2C_ERROR_CODE_STOP_FAILURE": "8",
                "I2C_SR1_BUS_ERROR_FLAG": "0xfffffeff",
                "I2C_SR1_ARBITRATION_LOST_FLAG": "0xfffffdff",
                "I2C_SR1_ACK_FAILURE_FLAG": "0xfffffbff",
                "I2C_SR1_STOP_DETECTED_FLAG": "0xfffff7ff",
                "HAL_I2C_StateTypeDef": "state",
                "I2C_TypeDef": "instance",
                "uint": "uint32_t",
                "hi2c->Instance": "handle->Instance",
                "hi2c->ErrorCode": "handle->ErrorCode",
                "hi2c->State": "handle->State",
                "hi2c->Mode": "handle->Mode",
                "hi2c->XferCount": "handle->XferCount",
                "hi2c->PreviousState": "handle->PreviousState",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_MODE_MASTER": "HAL_I2C_MODE_MASTER",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "I2C_Slave_AF": "handle_slave_af",
                "I2C_ITError": "handle_i2c_error"
            },
            "code": "void handle_i2c_errors_08001e68(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state;\n  I2C_TypeDef *instance;\n  uint32_t sr1_reg;\n  uint32_t cr2_reg;\n  \n  instance = handle->Instance;\n  sr1_reg = instance->SR1;\n  cr2_reg = instance->CR2;\n  if (((sr1_reg & I2C_SR1_ERROR_MASK) != 0) && ((cr2_reg & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_CODE_BUS_ERROR;\n    instance->SR1 = ~(DAT_08001f38);\n  }\n  if (((sr1_reg & I2C_SR1_ADDR_MATCHED_MASK) != 0) && ((cr2_reg & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_CODE_ARBITRATION_LOST;\n    instance->SR1 = ~(I2C_SR1_ARBITRATION_LOST_FLAG);\n  }\n  if (((sr1_reg & I2C_SR1_DATA_REGISTER_EMPTY_MASK) != 0) && ((cr2_reg & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n    state = handle->State;\n    if (((handle->Mode == HAL_I2C_MODE_SLAVE) && (handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (handle->PreviousState == I2C_STATE_LISTEN)))) {\n      handle_slave_af(handle);\n    }\n    else {\n      handle->ErrorCode |= I2C_ERROR_CODE_ACK_FAILURE;\n      if (handle->Mode == HAL_I2C_MODE_MASTER) {\n        instance->CR1 |= I2C_CR1_ACKNOWLEDGE_FAILURE_RESET;\n      }\n      instance->SR1 = ~(I2C_SR1_ACK_FAILURE_FLAG);\n    }\n  }\n  if (((sr1_reg & I2C_SR1_STOP_DETECTED_MASK) != 0) && ((cr2_reg & I2C_CR2_ERROR_INTERRUPT_ENABLE) != 0)) {\n    handle->ErrorCode |= I2C_ERROR_CODE_STOP_FAILURE;\n    instance->SR1 = ~(I2C_SR1_STOP_DETECTED_FLAG);\n  }\n  if (handle->ErrorCode != 0) {\n    handle_i2c_error(handle);\n  }\n  return;\n}",
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C3_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_errors_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "receiveDataFromI2C_080019a0",
                "hi2c": "i2c_handle",
                "data_ptr": "data_pointer"
            },
            "code": "HAL_StatusTypeDef receiveDataFromI2C_080019a0(I2C_HandleTypeDef *hi2c) {\n  uint8_t *data_ptr;\n  if (hi2c->XferCount == 4) {\n    hi2c->Instance->CR2 &= 0xfffffbff;\n    data_ptr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n  }\n  else if (hi2c->XferCount == 3) {\n    hi2c->Instance->CR2 &= 0xfffffbff;\n    hi2c->Instance->CR1 &= 0xfffffbff;\n    data_ptr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n  }\n  else if (hi2c->XferCount == 2) {\n    if (hi2c->XferOptions - 1 < 2) {\n      hi2c->Instance->CR1 &= 0xfffffbff;\n      hi2c->Instance->CR1 |= 0x100;\n    }\n    else {\n      hi2c->Instance->CR1 |= 0x200;\n    }\n    data_ptr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n    data_ptr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n    hi2c->Instance->CR2 &= 0xfffffcff;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->PreviousState = 0;\n    if (hi2c->Mode == HAL_I2C_MODE_MEM) {\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(hi2c);\n    }\n    else {\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(hi2c);\n    }\n  }\n  else {\n    data_ptr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receiveDataFromI2C_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "handle_uart_rx_08003f24",
                "*huart": "*uart_handle",
                "bVar1": "uart_index",
                "uVar2": "callback_index",
                "PTR_rx_callback_08003f40": "rx_callback_ptr",
                "PTR_rx_callback_obj_08003f44": "rx_callback_obj_ptr"
            },
            "code": "void handle_uart_rx_08003f24(UART_HandleTypeDef *uart_handle)\n{\n  uint8_t uart_index = get_uart_index(uart_handle);\n  uint8_t callback_index = (uint8_t)uart_index;\n  if (callback_index < 10) {\n    (*(code **)(PTR_rx_callback_08003f40 + callback_index * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_08003f44 + callback_index * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_rx_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "configure_gpio_interrupts_080046b4",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PTR_gpio_irq_conf_08004754": "gpio_irq_conf_ptr"
            },
            "code": "void configure_gpio_interrupts_080046b4(int should_initialize, int priority) {\n  undefined *PTR_gpio_irq_conf_08004754;\n  \n  PTR_gpio_irq_conf_08004754 = PTR_gpio_irq_conf_08004754;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    *PTR_gpio_irq_conf_08004754 = 6;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xc) = 0;\n    PTR_gpio_irq_conf_08004754[0x14] = 7;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x20) = 0;\n    PTR_gpio_irq_conf_08004754[0x28] = 8;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x34) = 0;\n    PTR_gpio_irq_conf_08004754[0x3c] = 9;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x48) = 0;\n    PTR_gpio_irq_conf_08004754[0x50] = 10;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x5c) = 0;\n    PTR_gpio_irq_conf_08004754[100] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x70) = 0;\n    PTR_gpio_irq_conf_08004754[0x78] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x84) = 0;\n    PTR_gpio_irq_conf_08004754[0x8c] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x98) = 0;\n    PTR_gpio_irq_conf_08004754[0xa0] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xac) = 0;\n    PTR_gpio_irq_conf_08004754[0xb4] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xc0) = 0;\n    PTR_gpio_irq_conf_08004754[200] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xd4) = 0;\n    PTR_gpio_irq_conf_08004754[0xdc] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xe8) = 0;\n    PTR_gpio_irq_conf_08004754[0xf0] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0xfc) = 0;\n    PTR_gpio_irq_conf_08004754[0x104] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x110) = 0;\n    PTR_gpio_irq_conf_08004754[0x118] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x124) = 0;\n    PTR_gpio_irq_conf_08004754[300] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08004754 + 0x138) = 0;\n    __aeabi_atexit(0,DAT_0800475c,PTR___dso_handle_08004758);\n  }\n  return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "configure_gpio_interrupts_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "I2C_Slave_STOPF",
                "I2C_SlaveReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "readI2CData_0800160e",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "puVar2": "dataPtr",
                "HAL_I2C_STATE_BUSY_RX_LISTEN": "RX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "LISTEN",
                "HAL_I2C_SlaveRxCpltCallback": "slaveReceiveCompleteCallback"
            },
            "code": "HAL_StatusTypeDef readI2CData_0800160e(I2C_HandleTypeDef *hi2c)\n{\n  HAL_I2C_StateTypeDef currentState;\n  uint8_t *dataPtr;\n  \n  currentState = hi2c->State;\n  if (hi2c->XferCount != 0) {\n    dataPtr = hi2c->pBuffPtr;\n    hi2c->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)hi2c->Instance->DR;\n    hi2c->XferCount--;\n    if ((hi2c->XferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      hi2c->Instance->CR2 &= 0xfffffbff;\n      hi2c->PreviousState = 0x22;\n      hi2c->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(hi2c);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "readI2CData_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_uwTick_08000e18",
                "*PTR_uwTick_08000e28": "tick_ptr",
                "*PTR_uwTickFreq_08000e2c": "tick_freq",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void update_uwTick_08000e18(void)\n{\n    uint8_t *PTR_uwTickFreq_08000e2c = *PTR_uwTickFreq_08000e2c;\n    uint32_t* *PTR_uwTick_08000e28 = (uint32_t*) PTR_uwTick_08000e28;\n    **PTR_uwTick_08000e28 += *PTR_uwTickFreq_08000e2c;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "initialize_GPIO_pin_08003486",
                "PinName_conflict": "pin",
                "mode": "mode",
                "pull": "pull",
                "GPIOx": "GPIO_port",
                "GPIO_InitTypeDef": "GPIO_config",
                "GPIO_InitStructure": "GPIO_config",
                "set_GPIO_Port_Clock": "get_GPIO_Port_Clock"
            },
            "code": "void initialize_GPIO_pin_08003486(PinName_conflict pin, uint32_t mode, uint32_t pull) {\n  GPIO_TypeDef *GPIO_port;\n  GPIO_InitTypeDef GPIO_config;\n  \n  GPIO_port = get_GPIO_Port_Clock((uint)((int)pin << 0x18) >> 0x1c);\n  GPIO_config.Pin = 1 << ((int)pin & 0xfU) & 0xffff;\n  GPIO_config.Speed = GPIO_SPEED_FREQ_HIGH;\n  GPIO_config.Mode = mode;\n  GPIO_config.Pull = pull;\n  HAL_GPIO_Init(GPIO_port, &GPIO_config);\n  return;\n}",
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "initialize_GPIO_pin_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "read_file_and_set_flag_08005662",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "bVar3": "seek_failed"
            },
            "code": "void read_file_and_set_flag_08005662(int file_descriptor, int* buffer){\n  int seek_result = _lseek_r(file_descriptor, (int)*(short *)(buffer + 0xe));\n  bool seek_failed = seek_result == -1;\n  ushort flag = *(ushort *)(buffer + 0xc);\n  if (seek_failed) {\n    flag &= 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = seek_result;\n    flag |= 0x1000;\n  }\n  *(ushort *)(buffer + 0xc) = flag;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "read_file_and_set_flag_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "HardwareSerial::FUN_080042ac": "read_serial_data",
                "obj": "serial_data",
                "iVar1": "read_status",
                "uVar2": "next_head_index",
                "c": "received_char",
                "FUN_080042ac": "read_serial_data_080042ac"
            },
            "code": "void read_serial_data_080042ac(serial_t_conflict *serial_data)\n{\n  int read_status;\n  ushort next_head_index;\n  uchar received_char;\n  \n  read_status = uart_getc((serial_t *)serial_data,&received_char);\n  if ((read_status == 0) && (next_head_index = serial_data->rx_head + 1 & 0x3f, next_head_index != serial_data->rx_tail)) {\n    serial_data->rx_buff[serial_data->rx_head] = received_char;\n    serial_data->rx_head = next_head_index;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "read_serial_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "handleI2CTransfer_08001864",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "pbVar2": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef handleI2CTransfer_08001864(I2C_HandleTypeDef *i2cHandle) {\n  uint32_t transferOptions = i2cHandle->XferOptions;\n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2cHandle->XferCount == 0) {\n      if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2cHandle);\n        }\n      }\n      else {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->PreviousState = 0x11;\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPtr;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CTransfer_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "setClockSource_08000f2c",
                "CLKSource": "clockSource",
                "DAT_08000f48": "clockControlRegister"
            },
            "code": "void setClockSource_08000f2c(uint32_t clockSource)\n{\n  if (clockSource != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "setClockSource_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_interrupt_priority_08000ec4",
                "IRQn": "interrupt_number",
                "uVar1": "interrupt_index",
                "DAT_08000edc": "interrupt_register_base_address"
            },
            "code": "void set_interrupt_priority_08000ec4(IRQn_Type_conflict interrupt_number)\n{\n  uint32_t interrupt_index = (uint32_t)interrupt_number;\n  if (interrupt_index >= 0)\n  {\n    uint32_t interrupt_register_index = interrupt_index >> 5;\n    uint32_t interrupt_register_offset = interrupt_index & 0x1f;\n    uint32_t* interrupt_register_pointer = (uint32_t*)(DAT_08000edc + interrupt_register_index * 4);\n    *interrupt_register_pointer = 1 << interrupt_register_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkSerial3Availability_08004338",
                "DAT_0800435c": "serial3Enabled",
                "PTR_Serial3_08004360": "serial3"
            },
            "code": "void checkSerial3Availability_08004338(void)\n{\n  if (DAT_0800435c) {\n    HardwareSerial::available(PTR_Serial3_08004360);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial3Availability_08004338"
        },
        "FUN_08003928": {
            "renaming": {
                "FUN_08003928": "handle_i2c_error_interrupt_08003928",
                "PTR_i2c_handles_08003934": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_error_interrupt_08003928(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08003934;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003928",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003928"
        },
        "FUN_0800468c": {
            "renaming": {
                "FUN_0800468c": "free_gpio_irq_configurations_0800468c",
                "param_1": "list_start",
                "puVar1": "current_node",
                "puVar2": "previous_node"
            },
            "code": "void free_gpio_irq_configurations_0800468c(void *list_start)\n{\n  undefined *current_node;\n  undefined *previous_node;\n  current_node = PTR___malloc_free_list_080046ac;\n  while (previous_node = current_node, previous_node != PTR_gpio_irq_conf_080046b0) {\n    current_node = previous_node + -0x14;\n    if (*(code **)(previous_node + -8) != (code *)0x0) {\n      (**(code **)(previous_node + -8))(previous_node + -0x10,previous_node + -0x10,3);\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800468c",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_0800468c"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "interrupt_and_return_080005e0",
                "a0": "input_value",
                "a1": "interrupt_type",
                "a2": "interrupt_parameter"
            },
            "code": "uint32_t interrupt_and_return_080005e0(uint32_t input_value, uint32_t interrupt_type, int32_t interrupt_parameter) {\n  software_interrupt(interrupt_type);\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_and_return_080005e0"
        },
        "FUN_0800311c": {
            "renaming": {
                "FUN_0800311c": "reset_uart_transfer_counts_0800311c",
                "hdma": "dma_handle",
                "huart": "uart_handle",
                "Parent": "Parent",
                "RxXferCount": "RxXferCount",
                "TxXferCount": "TxXferCount",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback"
            },
            "code": "void reset_uart_transfer_counts_0800311c(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800311c",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_0800311c"
        },
        "FUN_0800420c": {
            "renaming": {
                "FUN_0800420c": "calculateNextTail_0800420c",
                "obj": "serialObj",
                "iVar3": "nextTail",
                "uVar1": "tailAsUshort",
                "uVar2": "tailAsUint16"
            },
            "code": "int calculateNextTail_0800420c(serial_t_conflict *serialObj)\n{\n  int nextTail = serialObj->txTail + 1;\n  ushort tailAsUshort = (ushort)nextTail;\n  uint16_t tailAsUint16 = tailAsUshort & 0x7f;\n  if (nextTail == 0) {\n    tailAsUint16 = -(-tailAsUshort & 0x7f);\n  }\n  serialObj->txTail = tailAsUint16;\n  if (serialObj->txHead != serialObj->txTail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800420c",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTail_0800420c"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "getAflCallResult_080005e4",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_080005fc": "PTR_noHyperCall_080005fc",
                "aflCall": "aflCall"
            },
            "code": "uint32_t getAflCallResult_080005e4(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_080005fc != 0) {\n    return 0;\n  }\n  result = aflCall(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "getAflCallResult_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "sendModbusMessage_0800076c",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "uVar1": "crc",
                "uVar4": "nextBufferIndex",
                "u8txenpin": "txEnablePin",
                "u8serno": "serialNumber",
                "au8Buffer": "messageBuffer",
                "u8BufferSize": "messageBufferLength",
                "port": "serialPort",
                "u32timeOut": "timeoutTimestamp",
                "u16timeOut": "timeoutPeriod",
                "u16OutCnt": "outgoingMessageCount",
                "uVar2": "serialReadResult"
            },
            "code": "void __thiscall sendModbusMessage_0800076c(Modbus *modbusInstance)\\n{\\n  byte bufferLength = modbusInstance->messageBufferLength;\\n  uint16_t crc = calculateCRC(modbusInstance, bufferLength);\\n  modbusInstance->messageBuffer[bufferLength] = (uint8_t)((uint)crc >> 8);\\n  uint nextBufferIndex = bufferLength + 1 & 0xff;\\n  modbusInstance->messageBuffer[nextBufferIndex] = (uint8_t)crc;\\n  modbusInstance->messageBufferLength = (char)nextBufferIndex + \"\\x01\";\\n  if (modbusInstance->txEnablePin > 1) {\\n    digitalWrite((uint)modbusInstance->txEnablePin, HIGH);\\n  }\\n  if (modbusInstance->serialNumber < 4) {\\n    (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[1])(modbusInstance->port, modbusInstance->messageBuffer, (uint)modbusInstance->messageBufferLength);\\n  }\\n  if (modbusInstance->txEnablePin > 1) {\\n    digitalWrite((uint)modbusInstance->txEnablePin, LOW);\\n  }\\n  if (modbusInstance->serialNumber < 4) {\\n    do {\\n      int serialReadResult = (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[3])();\\n    } while (serialReadResult >= 0);\\n  }\\n  modbusInstance->messageBufferLength = \"\\0\";\\n  uint32_t currentTime = millis();\\n  modbusInstance->timeoutTimestamp = currentTime + modbusInstance->timeoutPeriod;\\n  modbusInstance->outgoingMessageCount = modbusInstance->outgoingMessageCount + 1;\\n  return;\\n}",
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "process_FC16",
                "poll",
                "process_FC3",
                "process_FC5",
                "process_FC15",
                "process_FC1",
                "process_FC6"
            ],
            "imported": false,
            "current_name": "sendModbusMessage_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "setSerialPin_08004460",
                "_tx": "txPinNumber",
                "PVar1": "txPin",
                "this": "serialObject"
            },
            "code": "void __thiscall setSerialPin_08004460(HardwareSerial *serialObject, uint32_t txPinNumber) {\n  PinName txPin;\n  if (txPinNumber < 0x60) {\n    txPin = *(PinName *)(PTR_digitalPin_08004478 + txPinNumber * 2);\n  }\n  else {\n    txPin = NC;\n  }\n  (serialObject->_serial).pin_tx = txPin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setSerialPin_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_gpio_pin_state_08001198",
                "GPIOx": "gpio_port",
                "GPIO_Pin": "pin_number",
                "PinState": "pin_state",
                "BSRR": "bit_set_reset_register"
            },
            "code": "void set_gpio_pin_state_08001198(GPIO_TypeDef *gpio_port, uint16_t pin_number, GPIO_PinState pin_state) {\n  if (pin_state == GPIO_PIN_RESET) {\n    gpio_port->BSRR = (uint32_t)pin_number << 0x10;\n    return;\n  }\n  gpio_port->BSRR = (uint32_t)pin_number;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001198"
        },
        "FUN_080044fc": {
            "renaming": {
                "FUN_080044fc": "initialize_static_variables_080044fc"
            },
            "code": "void initialize_static_variables_080044fc(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044fc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080044fc"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "IsPinHigh_08003138",
                "pin": "pin",
                "map": "pin_map",
                "(byte)": "",
                "(uint)": "",
                "(int)": "",
                "_Bool": "bool"
            },
            "code": "\nbool IsPinHigh_08003138(PinName_conflict pin, uint32_t *pin_map)\n{\n    uint32_t pin_index = (uint32_t)pin << 24 >> 28;\n    uint32_t pin_offset = (uint32_t)pin & 0xF;\n    uint32_t pin_mask = 1 << pin_offset;\n    return (bool)(pin_map[pin_index] & pin_mask);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "pinMode",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "IsPinHigh_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_080005dc": {
            "renaming": {
                "FUN_080005dc": "do_nothing_080005dc"
            },
            "code": "\nvoid do_nothing_080005dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080005dc"
        },
        "FUN_08003810": {
            "renaming": {
                "FUN_08003810": "handle_timer_interrupts_08003810",
                "*PTR_timer_handles_08003828": "*timer_handles",
                "*DAT_0800382c": "*timer_handle1",
                "*DAT_08003830": "*timer_handle2"
            },
            "code": "void handle_timer_interrupts_08003810(void)\n{\n  TIM_HandleTypeDef *DAT_0800382c = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x1c);\n  TIM_HandleTypeDef *DAT_08003830 = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003828 + 0x30);\n  if (timer_handle1 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle1);\n  }\n  if (timer_handle2 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle2);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003810",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_08003810"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_Channel_State_08002848",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "CCER": "channel_mask"
            },
            "code": "void set_Channel_State_08002848(TIM_TypeDef *timer, uint32_t channel, uint32_t state)\n{\n  uint32_t channel_mask = 1 << (channel & 0xff);\n  timer->CCER &= ~channel_mask;\n  timer->CCER |= state << (channel & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "set_Channel_State_08002848"
        },
        "FUN_08003938": {
            "renaming": {
                "FUN_08003938": "handle_i2c_event_interrupt_08003938",
                "PTR_i2c_handles_08003944": "PTR_i2c_handles_08003944",
                "*(I2C_HandleTypeDef **)(PTR_i2c_handles_08003944 + 4)": "i2c_handle"
            },
            "code": "void handle_i2c_event_interrupt_08003938(I2C_HandleTypeDef* *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003944 + 4)){\n  HAL_I2C_EV_IRQHandler(*(I2C_HandleTypeDef **)(PTR_i2c_handles_08003944 + 4));\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003938",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08003938"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "get_uart_state_0800312c",
                "huart": "uart_handle",
                "RxState": "rx_state",
                "gState": "g_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_state_0800312c(UART_HandleTypeDef *huart)\n{\n  HAL_UART_StateTypeDef rx_state = huart->RxState;\n  HAL_UART_StateTypeDef g_state = huart->gState;\n  return rx_state | g_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "imported": false,
            "current_name": "get_uart_state_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "disable_timer_channel_080028f0",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance"
            },
            "code": "HAL_StatusTypeDef disable_timer_channel_080028f0(TIM_HandleTypeDef *timer_handle, uint32_t channel)\n{\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_CCxNChannelCmd(timer_instance, channel, DISABLE);\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR &= ~(1 << 15);\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= ~(1 << 0);\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_uwTick_value_08000e30",
                "PTR_uwTick_08000e38": "PTR_uwTick_08000e38"
            },
            "code": "uint32_t get_uwTick_value_08000e30(void)\n{\n  return *(uint32_t *)PTR_uwTick_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "uart_debug_write",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCC_OscConfig",
                "HAL_UART_Transmit",
                "HAL_PWREx_EnableOverDrive"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "reset_DAC_state_08000f56",
                "hdac": "dac_handle",
                "hdac->State": "dac_handle->State",
                "HAL_DAC_MspDeInit": "HAL_DAC_MspDeInit",
                "hdac->ErrorCode": "dac_handle->ErrorCode",
                "hdac->Lock": "dac_handle->Lock",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef reset_DAC_state_08000f56(DAC_HandleTypeDef *dac_handle)\n{\n  if (dac_handle != NULL) {\n    dac_handle->State = HAL_DAC_STATE_BUSY;\n    HAL_DAC_MspDeInit(dac_handle);\n    dac_handle->ErrorCode = 0;\n    dac_handle->State = HAL_DAC_STATE_RESET;\n    dac_handle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "reset_DAC_state_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "transmitData_0800295c",
                "*huart": "*uart",
                "uVar1": "data",
                "pbVar2": "buffer",
                "huart->gState": "uart->gState",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "HAL_BUSY": "HAL_BUSY",
                "(huart->Init).WordLength": "(uart->Init).WordLength",
                "UART_WORDLENGTH_9B": "UART_WORDLENGTH_9B",
                "huart->Instance->DR": "uart->Instance->DR",
                "*(ushort *)huart->pTxBuffPtr & 0x1ff": "*(uint16_t *)uart->pTxBuffPtr & 0x1FF",
                "(huart->Init).Parity": "(uart->Init).Parity",
                "UART_PARITY_NONE": "UART_PARITY_NONE",
                "huart->pTxBuffPtr": "uart->pTxBuffPtr",
                "huart->pTxBuffPtr + 2": "uart->pTxBuffPtr += 2",
                "huart->pTxBuffPtr + 1": "uart->pTxBuffPtr++",
                "pbVar2 = huart->pTxBuffPtr": "buffer = uart->pTxBuffPtr",
                "(uint)*pbVar2": "(uint32_t)*buffer",
                "huart->TxXferCount - 1": "uart->TxXferCount--",
                "huart->TxXferCount = uVar1": "uart->TxXferCount--",
                "huart->Instance->CR1": "uart->Instance->CR1",
                "huart->Instance->CR1 & 0xffffff7f": "uart->Instance->CR1 &= ~USART_CR1_TXEIE",
                "huart->Instance->CR1 | 0x40": "uart->Instance->CR1 |= USART_CR1_TCIE",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef transmitData_0800295c(UART_HandleTypeDef *uart)\n{\n  uint16_t data;\n  uint8_t *buffer;\n\n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n    data = *(uint16_t *)uart->pTxBuffPtr & 0x1FF;\n    uart->Instance->DR = data;\n    if ((uart->Init).Parity == UART_PARITY_NONE) {\n      uart->pTxBuffPtr += 2;\n    }\n    else {\n      uart->pTxBuffPtr++;\n    }\n  }\n  else {\n    buffer = uart->pTxBuffPtr;\n    uart->pTxBuffPtr++;\n    uart->Instance->DR = (uint32_t)*buffer;\n  }\n  uart->TxXferCount--;\n  if (uart->TxXferCount == 0) {\n    uart->Instance->CR1 &= ~USART_CR1_TXEIE;\n    uart->Instance->CR1 |= USART_CR1_TCIE;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmitData_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "get_dac_pin_mode_08003380",
                "pin": "pin_name",
                "uVar1": "function_index"
            },
            "code": "uint32_t get_dac_pin_mode_08003380(PinName_conflict pin) {\n  uint32_t function_index = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_DAC_08003398);\n  if ((function_index << 12) >> 27 != 2) {\n    return 0;\n  }\n  return 16;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "get_dac_pin_mode_08003380"
        },
        "FUN_08005686": {
            "renaming": {
                "FUN_08005686": "close_file_descriptor_08005686",
                "param_1": "file_descriptor",
                "param_2": "offset"
            },
            "code": "void close_file_descriptor_08005686(void* file_descriptor, int offset) {\n  _close_r(file_descriptor, (int)*(short *)(offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005686",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08005686"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "configure_output_pin_08004110",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_found",
                "pin": "pin_name",
                "PTR_digitalPin_080041a8": "digital_pin_ptr",
                "NC": "no_connection",
                "is_pin_configured": "check_pin_configured",
                "PTR_g_anOutputPinConfigured_080041ac": "output_pin_configured_ptr",
                "pin_in_pinmap": "check_pin_in_pinmap",
                "PinMap_conflict": "pin_map_conflict",
                "PTR_PinMap_DAC_080041b0": "dac_pin_map_ptr",
                "dac_stop": "stop_dac",
                "PTR_PinMap_PWM_080041b4": "pwm_pin_map_ptr",
                "pwm_stop": "stop_pwm",
                "reset_pin_configured": "clear_pin_configured",
                "switch": "configure_pin_mode",
                "digital_io_init": "initialize_digital_io",
                "set_pin_configured": "mark_pin_configured",
                "PTR_g_digPinConfigured_080041b8": "dig_pin_configured_ptr"
            },
            "code": "void configure_output_pin_08004110(uint32_t pin_number, uint32_t mode)\n{\n  bool is_pin_found;\n  PinName_conflict pin_name;\n  \n  if (pin_number < 0x60) {\n    pin_name = *(PinName_conflict *)(PTR_digitalPin_080041a8 + pin_number * 2);\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_found = is_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    if (is_pin_found) {\n      is_pin_found = pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_DAC_080041b0);\n      if (is_pin_found) {\n        dac_stop(pin_name);\n      }\n      else {\n        is_pin_found = pin_in_pinmap(pin_name, (PinMap_conflict *)PTR_PinMap_PWM_080041b4);\n        if (is_pin_found) {\n          pwm_stop(pin_name);\n        }\n      }\n      reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_080041ac);\n    }\n    switch (mode) {\n      case 0:\n        digital_io_init(pin_name, 0, 0);\n        break;\n      case 1:\n        digital_io_init(pin_name, 1, 0);\n        break;\n      case 2:\n        digital_io_init(pin_name, 0, 1);\n        break;\n      case 3:\n        digital_io_init(pin_name, 0, 2);\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_080041b8);\n  }\n  return;\n}",
            "called": [
                "set_pin_configured",
                "digital_io_init",
                "is_pin_configured",
                "pin_in_pinmap",
                "dac_stop",
                "reset_pin_configured",
                "pwm_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configure_output_pin_08004110"
        },
        "FUN_08005320": {
            "renaming": {
                "FUN_08005320": "walk_all_reentrant_streams_08005320",
                "param_1": "reent_structure",
                "DAT_08005328": "global_reentrancy_guard"
            },
            "code": "void walk_all_reentrant_streams_08005320(void *reent_structure){\n  _fwalk_reent(reent_structure, DAT_08005328);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005320",
            "calling": [],
            "imported": false,
            "current_name": "walk_all_reentrant_streams_08005320"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "calculate_ticks_08000ee0",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr",
                "DAT_08000f04": "ticks_ptr",
                "DAT_08000f08": "ticks_data"
            },
            "code": "uint32_t calculate_ticks_08000ee0(uint32_t ticks_number)\n{\n  undefined4 *DAT_08000f04;\n  DAT_08000f04 = DAT_08000f04;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08000f04[1] = ticks_number - 1;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "transferData_080015bc",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "pbVar2": "data_ptr"
            },
            "code": "HAL_StatusTypeDef transferData_080015bc(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state;\n  uint8_t *data_ptr;\n  \n  current_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    i2c_handle->Instance->DR = (uint)*data_ptr;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (current_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transferData_080015bc"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "update_systick_timer_08000f4e"
            },
            "code": "void update_systick_timer_08000f4e(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_systick_timer_08000f4e"
        },
        "FUN_08003948": {
            "renaming": {
                "FUN_08003948": "handle_i2c_error_interrupt_08003948",
                "PTR_i2c_handles_08003954": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_error_interrupt_08003948(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003948",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003948"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_static_variables_0800458c"
            },
            "code": "void initialize_static_variables_0800458c() {\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_0800458c"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_modbus_configuration_0800066c",
                "this": "modbus_instance",
                "u8id": "device_id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "u16timeOut": "timeout_value"
            },
            "code": "void __thiscall set_modbus_configuration_0800066c(Modbus *modbus_instance, uint8_t device_id, uint8_t serial_number, uint8_t tx_enable_pin)\n{\n  modbus_instance->device_id = device_id;\n  if (serial_number > 3) {\n    serial_number = 0;\n  }\n  modbus_instance->serial_number = serial_number;\n  modbus_instance->tx_enable_pin = tx_enable_pin;\n  modbus_instance->timeout_value = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "Modbus"
            ],
            "imported": false,
            "current_name": "set_modbus_configuration_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "writeByte_080042e8",
                "this": "serialObject",
                "c": "byteToWrite",
                "_written": "isWritten",
                "_serial": "serialData",
                "tx_head": "txHead",
                "uVar2": "isTxActive",
                "bVar1": "nextTxHead",
                "bVar3": "txTail",
                "iVar4": "nextTxHeadInt"
            },
            "code": "size_t __thiscall writeByte_080042e8(HardwareSerial *serialObject,uint8_t byteToWrite)\\n{\\n  bool isWritten;\\n  uint txHead;\\n  byte nextTxHead;\\n  int nextTxHeadInt;\\n  byte txTail;\\n  uint8_t isTxActive;\\n\\n  serialObject->_written = true;\\n  txHead = (uint)(serialObject->_serial).tx_head;\\n  nextTxHeadInt = txHead + 1;\\n  nextTxHead = (byte) nextTxHeadInt;\\n  if (nextTxHeadInt == 0) {\\n    nextTxHead = -(-nextTxHead & 0x7f);\\n  }\\n  do {\\n  } while ((serialObject->_serial).tx_tail == (ushort)nextTxHead);\\n  (serialObject->_serial).tx_buff[txHead] = byteToWrite;\\n  (serialObject->_serial).tx_head = (ushort)nextTxHead;\\n  isTxActive = serial_tx_active((serial_t *)&serialObject->_serial);\\n  if (isTxActive == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serialObject->_serial,DAT_08004334);\\n  }\\n  return 1;\\n}",
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "writeByte_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "handle_i2c_slave_receive_080038d0",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "num_bytes_received",
                "get_i2c_obj": "get_i2c_object",
                "i2c_onSlaveReceive": "on_slave_receive",
                "slaveMode": "slave_mode",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void handle_i2c_slave_receive_080038d0(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_obj;\n  uint8_t num_bytes_received;\n  \n  i2c_obj = get_i2c_object(i2c_handle);\n  if (((i2c_obj->on_slave_receive != NULL) && (i2c_obj->slave_mode == 1)) && ((num_bytes_received = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff) != 0)) {\n    (*i2c_obj->on_slave_receive)(i2c_obj->tx_rx_buffer, num_bytes_received);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}\n",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "I2C_Slave_STOPF",
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "handle_i2c_slave_receive_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_process_id_0800410c"
            },
            "code": "__pid_t get_process_id_0800410c(void)\n{\n  __pid_t process_id = 1;\n  return process_id;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_HCLK_frequency_divider_0800260c",
                "uVar1": "HCLK_freq",
                "PTR_APBPrescTable_08002628": "APB_prescaler_table",
                "DAT_08002624": "APB1_register_address"
            },
            "code": "uint32_t get_HCLK_frequency_divider_0800260c(void)\n{\n  uint32_t HCLK_freq = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08002628[APB_prescaler_index];\n  return HCLK_freq >> APB_prescaler_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_rx_buffer_size_08004240",
                "this": "serial_obj",
                "_serial": "serial",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "buffer_size": "buffer_size"
            },
            "code": "int calculate_rx_buffer_size_08004240(HardwareSerial *serial_obj) {\n    uint32_t rx_head = (serial_obj->_serial).rx_head;\n    uint32_t rx_tail = (serial_obj->_serial).rx_tail;\n    uint32_t buffer_size = (rx_head + 0x40) - rx_tail;\n    return buffer_size & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculate_rx_buffer_size_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "write_to_file_08005690",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08005690(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n  undefined *errno_ptr;\n  int write_result;\n  errno_ptr = PTR_errno_080056b0;\n  *(undefined4 *)PTR_errno_080056b0 = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08005690"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "write_to_digital_pin_080041bc",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "_Var1": "is_pin_configured",
                "port": "GPIO_port",
                "uVar2": "digital_pin_number"
            },
            "code": "void write_to_digital_pin_080041bc(uint32_t pin_number, uint32_t pin_value)\n{\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t digital_pin_number;\n  \n  if (pin_number < 0x60) {\n    digital_pin_number = (uint32_t)*(short *)(PTR_digitalPin_080041fc + pin_number * 2);\n  }\n  else {\n    digital_pin_number = 0xffffffff;\n  }\n  if ((digital_pin_number != 0xffffffff) &&\n     (is_pin_configured = is_pin_configured((PinName_conflict)digital_pin_number, (uint32_t *)PTR_g_digPinConfigured_08004200), is_pin_configured)) {\n    port = get_GPIO_Port((digital_pin_number << 0x18) >> 0x1c);\n    digital_io_write(port, 1 << (digital_pin_number & 0xf) & 0xffff, pin_value);\n  }\n  return;\n}",
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "sendTxBuffer",
                "getRxBuffer",
                "begin"
            ],
            "imported": false,
            "current_name": "write_to_digital_pin_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initializeSerialBuffers_08004364",
                "this": "serial",
                "ctx": "context",
                "_serial": "serialData",
                "rx_buff": "receiveBuffer",
                "_rx_buffer": "receiveBufferPointer",
                "rx_head": "receiveHead",
                "rx_tail": "receiveTail",
                "tx_buff": "transmitBuffer",
                "_tx_buffer": "transmitBufferPointer",
                "tx_head": "transmitHead",
                "tx_tail": "transmitTail"
            },
            "code": "int __thiscall initializeSerialBuffers_08004364(HardwareSerial *serial,EVP_PKEY_CTX *context)\n{\n  (serial->_serial).rx_buff = serial->_rx_buffer;\n  (serial->_serial).rx_head = 0;\n  (serial->_serial).rx_tail = 0;\n  (serial->_serial).tx_buff = serial->_tx_buffer;\n  (serial->_serial).tx_head = 0;\n  (serial->_serial).tx_tail = 0;\n  return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerialBuffers_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682::FUN_08000682": "initializeCommunication",
                "this": "communicationObject",
                "u8id": "communicationId",
                "u8serno": "communicationSerialNumber",
                "u8txenpin": "transmitEnablePin",
                "FUN_08000682": "initializeCommunication_08000682"
            },
            "code": "initializeCommunication_08000682 * __thiscall initializeCommunication_08000682(initializeCommunication_08000682 *communicationObject, uint8_t communicationId, uint8_t communicationSerialNumber, uint8_t transmitEnablePin)\n{\n  init(communicationObject, communicationId, communicationSerialNumber, transmitEnablePin);\n  return communicationObject;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeCommunication_08000682"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "handle_USART3_interrupt_08004004",
                "USART3_IRQn": "USART3_irq",
                "PTR_uart_handlers_08004018": "uart_handlers",
                "UART_HandleTypeDef": "UART_handler",
                "current_uart_handler": "current_handler"
            },
            "code": "void handle_USART3_interrupt_08004004(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  if (current_uart_handler != NULL) {\n    HAL_UART_IRQHandler(current_uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_08004004"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_priority_group_08000e3c",
                "PriorityGroup": "priority_group",
                "DAT_08000e5c": "priority_group_data",
                "PTR_": "pointer_",
                "original_value": "original_value",
                "new_value": "new_value",
                "uint32_t": "unsigned_integer"
            },
            "code": "void set_priority_group_08000e3c(uint32_t priority_group) {\n    uint32_t* priority_group_ptr = (uint32_t*)(DAT_08000e5c + 0xc);\n    uint32_t original_value = *(uint32_t*)(DAT_08000e5c + 0xc);\n    uint32_t new_value = (priority_group & 7) << 8 | (original_value & 0xf8ff) | 0x5fa0000;\n    *priority_group_ptr = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08000e3c"
        },
        "FUN_080037ac": {
            "renaming": {
                "FUN_080037ac": "handle_timer_interrupt_080037ac",
                "PTR_timer_handles_080037bc": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandleTypeDef",
                "current_timer_handle": "current_timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_080037ac(void)\n{\n  TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037bc_080037bc + 8);\n  if (current_timer_handle != NULL) {\n    HAL_TIM_IRQHandler(current_timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037ac"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "disable_timer_channel_08002864",
                "htim": "timer_handle",
                "Channel": "channel",
                "bVar1": "is_matched",
                "pTVar2": "timer_instance"
            },
            "code": "HAL_StatusTypeDef disable_timer_channel_08002864(TIM_HandleTypeDef *timer_handle,uint32_t channel)\n{\n  bool is_matched = false;\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  if (timer_instance == PTR_DAT_080028d0) {\n    is_matched = true;\n  }\n  else if (timer_instance == (TIM_TypeDef *)&DAT_080028d0[0xc].SR) {\n    is_matched = true;\n  }\n  else {\n    is_matched = false;\n  }\n  if (((is_matched) && ((timer_instance->CCER & 0x1111) == 0)) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR = timer_instance->BDTR & 0xffff7fff;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 = timer_instance->CR1 & 0xfffffffe;\n  }\n  timer_handle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_timer_channel_08002864"
        },
        "FUN_0800459a": {
            "renaming": {
                "__thiscall Print::FUN_0800459a": "printBuffer",
                "this": "printInstance",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentInstance",
                "sVar2": "bytesPrinted",
                "FUN_0800459a": "Print::printBuffer_0800459a"
            },
            "code": "size_t Print::printBuffer_0800459a(Print *printInstance, uint8_t *buffer, size_t bufferSize) {\n  Print *currentInstance;\n  size_t bytesPrinted = 0;\n\n  currentInstance = printInstance;\n  while (true) {\n    if (bufferSize == 0) {\n      return bytesPrinted;\n    }\n    currentInstance = (Print *)(**printInstance->_vptr_Print)(currentInstance, (uint)*buffer);\n    if (currentInstance == (Print *)0x0) {\n      break;\n    }\n    bytesPrinted = bytesPrinted + 1;\n    buffer = buffer + 1;\n    bufferSize = bufferSize - 1;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459a",
            "calling": [],
            "imported": false,
            "current_name": "Print::printBuffer_0800459a"
        },
        "FUN_08003958": {
            "renaming": {
                "FUN_08003958": "handle_I2C_event_interrupt_08003958",
                "PTR_i2c_handles_08003964": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_event_interrupt_08003958(I2C_HandleTypeDef* i2c_handle) {\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003958",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_interrupt_08003958"
        },
        "FUN_0800532c": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "var1",
                "FUN_0800532c": "initialize_data_0800532c"
            },
            "code": "void initialize_data_0800532c(undefined4 *data_ptr, undefined2 value1, undefined2 value2) {\n  *data_ptr = 0;\n  data_ptr[1] = 0;\n  data_ptr[2] = 0;\n  *(undefined2 *)(data_ptr + 3) = value1;\n  data_ptr[0x19] = 0;\n  *(undefined2 *)((int)data_ptr + 0xe) = value2;\n  data_ptr[4] = 0;\n  data_ptr[5] = 0;\n  data_ptr[6] = 0;\n  memset(data_ptr + 0x17, 0, 8);\n  data_ptr[9] = PTR_DAT_08005364;\n  data_ptr[10] = PTR_DAT_08005368;\n  data_ptr[0xb] = PTR_DAT_0800536c;\n  undefined4 var1 = PTR_DAT_08005370;\n  data_ptr[8] = data_ptr;\n  data_ptr[0xc] = var1;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_pin_high_0800314e",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_high_0800314e(PinName_conflict pin, uint32_t *pin_map)\n{\n  uint32_t pin_index = (uint32_t)((int)pin << 24) >> 28;\n  pin_map[pin_index] |= 1 << ((int)pin & 0x0F);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_high_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c::FUN_0800447c": "SerialStream::SerialStream",
                "this": "this",
                "peripheral": "peripheral",
                "PinName_conflict": "PinName",
                "PVar1": "pin",
                "EVP_PKEY_CTX": "ctx",
                "extraout_r1": "ctx",
                "extraout_r1_00": "ctx",
                "PTR_PTR_write_1_080044c8": "write_1",
                "PTR_Serial3_080044cc": "Serial3",
                "setRx": "setRx",
                "setTx": "setTx",
                "PTR_PinMap_UART_RX_080044d0": "PinMap_UART_RX",
                "PTR_PinMap_UART_TX_080044d4": "PinMap_UART_TX",
                "init": "init",
                "FUN_0800447c": "\npublic:\n\tSerialStream_0800447c"
            },
            "code": "class SerialStream { \npublic:\n\tSerialStream_0800447c(void *peripheral) {\n\t\tthis->write_error = 0;\n\t\tthis->_timeout = 1000;\n\t\tthis->_vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_080044c8;\n\t\tif (this == (SerialStream *)PTR_Serial3_080044cc) {\n\t\t\tsetRx(this,0x4c);\n\t\t\tsetTx(this,0x4d);\n\t\t}\n\t\telse {\n\t\t\tthis->pin_rx = pinmap_pin(peripheral,(PTR_PinMap_UART_RX_080044d0 *)PTR_PinMap_UART_RX_080044d0);\n\t\t\tthis->pin_tx = pinmap_pin(peripheral,(PTR_PinMap_UART_TX_080044d4 *)PTR_PinMap_UART_TX_080044d4);\n\t\t}\n\t\tinit(this);\n\t}\n\n\tvoid setRx(SerialStream *serial, PinName pin) {\n\t\tserial->pin_rx = pin;\n\t}\n\n\tvoid setTx(SerialStream *serial, PinName pin) {\n\t\tserial->pin_tx = pin;\n\t}\n\nprivate:\n\tSerial _serial;\n\tPrint _Print;\n\tStream super_Stream;\n};",
            "called": [
                "setTx",
                "init",
                "setRx",
                "pinmap_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "\npublic:\n\tSerialStream_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "print_assertion_failed_08004808",
                "param_1": "file",
                "param_2": "filename",
                "param_3": "function_name",
                "param_4": "expression",
                "puVar1": "message",
                "puVar2": "file_name",
                "PTR_s__08004840": "file_name",
                "PTR_s___function__08004838": "function_name",
                "PTR_s_assertion___s__failed__file___s__0800483c": "assertion_failed_format_string",
                "PTR__impure_ptr_08004834": "impure_ptr"
            },
            "code": "void print_assertion_failed_08004808(FILE *file, const char *filename, int line, const char *PTR_s___function__08004838, const char *expression, const char *message)\n{\n  const char *PTR_s__08004840 = filename ? filename : \"\";\n  const char *func_name = PTR_s___function__08004838 ? PTR_s___function__08004838 : \"\";\n  const char *expr = expression ? expression : \"\";\n  const char *msg = message ? message : \"\";\n  fprintf(file, \"Assertion failed: %s:%d: %s: '%s'%s%s\\n\", PTR_s__08004840, line, func_name, expr, *msg ? \": \" : \"\", msg);\n  abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "set_DAC_channel_to_zero_08000f72",
                "hdac": "dac_handle",
                "Channel": "channel_number",
                "Instance": "instance",
                "CR": "control_register",
                "State": "state"
            },
            "code": "HAL_StatusTypeDef set_DAC_channel_to_zero_08000f72(DAC_HandleTypeDef *dac_handle, uint32_t channel_number) {\n    uint32_t mask = ~(1 << (channel_number & 0xff));\n    dac_handle->Instance->CR &= mask;\n    dac_handle->State = HAL_DAC_STATE_READY;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "set_DAC_channel_to_zero_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "handle_I2C_operation_08001d00",
                "hi2c": "I2C_handle",
                "I2C_instance": "I2C_instance",
                "SR1_value": "SR1_value",
                "SR2_value": "SR2_value",
                "CR2_value": "CR2_value",
                "SR1_ADDR_flag": "0x0001",
                "SR1_TXE_flag": "0x0080",
                "SR1_RXNE_flag": "0x0040",
                "SR1_BTF_flag": "0x0004",
                "SR1_STOPF_flag": "0x0010",
                "SR2_MSL_flag": "0x0001",
                "I2C_Master_ADDR": "I2C_master_address_phase",
                "I2C_Master_ADD10": "I2C_master_10bit_header_phase",
                "I2C_Master_SB": "I2C_master_start_bit",
                "I2C_MasterReceive_RXNE": "I2C_master_receive_data_RXNE",
                "I2C_MasterReceive_BTF": "I2C_master_receive_data_BTF",
                "I2C_MasterTransmit_TXE": "I2C_master_transmit_data_TXE",
                "I2C_MasterTransmit_BTF": "I2C_master_transmit_data_BTF",
                "I2C_Slave_ADDR": "I2C_slave_address_match",
                "I2C_Slave_STOPF": "I2C_slave_stop_detection",
                "I2C_SlaveReceive_RXNE": "I2C_slave_receive_data_RXNE",
                "I2C_SlaveReceive_BTF": "I2C_slave_receive_data_BTF",
                "I2C_SlaveTransmit_TXE": "I2C_slave_transmit_data_TXE",
                "I2C_SlaveTransmit_BTF": "I2C_slave_transmit_data_BTF"
            },
            "code": "void handle_I2C_operation_08001d00(I2C_HandleTypeDef *hi2c)\n{\n  I2C_TypeDef *I2C_instance;\n  uint32_t SR1_value;\n  uint32_t SR2_value;\n  uint32_t CR2_value;\n  \n  I2C_instance = hi2c->Instance;\n  SR2_value = I2C_instance->SR2;\n  SR1_value = I2C_instance->SR1;\n  CR2_value = I2C_instance->CR2;\n  \n  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) || (hi2c->Mode == HAL_I2C_MODE_MEM)) {\n    if (((SR1_value & 0x10001) == 0) || ((CR2_value & 0x200) == 0)) {\n      if (((SR1_value & SR1_ADDR_flag) == 0) || ((CR2_value & 0x200) == 0)) {\n        if (((SR1_value & SR1_TXE_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n          I2C_Master_ADDR(hi2c);\n        }\n      }\n      else {\n        I2C_Master_ADD10(hi2c);\n      }\n    }\n    else {\n      I2C_Master_SB(hi2c);\n    }\n    if ((SR2_value & SR2_MSL_flag) == 0) {\n      if ((((SR1_value & SR1_RXNE_flag) != 0) && ((CR2_value & 0x400) != 0)) && ((SR1_value & SR1_BTF_flag) == 0)) {\n        I2C_MasterReceive_RXNE(hi2c);\n        return;\n      }\n      if (((SR1_value & SR1_BTF_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(hi2c);\n        return;\n      }\n    }\n    else {\n      if ((((SR1_value & SR1_TXE_flag) != 0) && ((CR2_value & 0x400) != 0)) && ((SR1_value & SR1_BTF_flag) == 0)) {\n        I2C_MasterTransmit_TXE(hi2c);\n        return;\n      }\n      if (((SR1_value & SR1_BTF_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(hi2c);\n        return;\n      }\n    }\n  }\n  else {\n    if (((SR1_value & SR1_ADDR_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n      I2C_Slave_ADDR(hi2c);\n      return;\n    }\n    if (((SR1_value & SR1_STOPF_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n      I2C_Slave_STOPF(hi2c);\n      return;\n    }\n    if ((SR2_value & SR2_MSL_flag) == 0) {\n      if ((((SR1_value & SR1_RXNE_flag) != 0) && ((CR2_value & 0x400) != 0)) && ((SR1_value & SR1_BTF_flag) == 0)) {\n        I2C_SlaveReceive_RXNE(hi2c);\n        return;\n      }\n      if (((SR1_value & SR1_BTF_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(hi2c);\n      }\n    }\n    else {\n      if ((((SR1_value & SR1_TXE_flag) != 0) && ((CR2_value & 0x400) != 0)) && ((SR1_value & SR1_BTF_flag) == 0)) {\n        I2C_SlaveTransmit_TXE(hi2c);\n        return;\n      }\n      if (((SR1_value & SR1_BTF_flag) != 0) && ((CR2_value & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(hi2c);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_Slave_STOPF",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterReceive_RXNE",
                "I2C_Slave_ADDR",
                "I2C_SlaveReceive_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADD10",
                "I2C_Master_SB",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [
                "I2C3_EV_IRQHandler",
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_operation_08001d00"
        },
        "FUN_080037c0": {
            "renaming": {
                "FUN_080037c0": "handle_timer_interrupt_080037c0",
                "*PTR_timer_handles_080037d0": "*timer_handles",
                "*(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc)": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_tim_interrupt"
            },
            "code": "void handle_timer_interrupt_080037c0(void) \\n\\\n{\\n\\\n  TIM_HandleTypeDef **(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc) = *(TIM_HandleTypeDef **)(PTR_*(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc)s_080037d0 + 0xc);\\n\\\n  if (*(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc) != NULL) {\\n\\\n    HAL_TIM_IRQHandler(*(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc));\\n\\\n  }\\n\\\n  return;\\n\\\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037c0"
        },
        "FUN_0800382c": {
            "renaming": {
                "FUN_0800382c": "handle_timer_interrupt_0800382c",
                "PTR_timer_handles_0800383c": "PTR_timer_handles_0800383c",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_0800382c(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_0800383c + 0x20);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800382c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800382c"
        }
    },
    "used_tokens": 188293,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004774",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800476a",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_080056d4",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004788",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800477e",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08004792",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08005768",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_08003f94",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_080055e0",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_08003918",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_08004298",
            "FUN_08003880",
            "FUN_08003fd4",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_08000c4c",
            "FUN_080025ec",
            "FUN_080037fc",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_0800404c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08004064",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_080047f0",
            "FUN_0800502c",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_0800582c",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8c",
            "FUN_08005604",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_080058f0",
            "FUN_080056b4",
            "FUN_0800450a",
            "FUN_0800377c",
            "FUN_08003fec",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_08000c7c",
            "FUN_08004760",
            "FUN_080034ce",
            "FUN_08003798",
            "FUN_080047fe",
            "FUN_08005974",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_080045be",
            "FUN_0800407c",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08005580",
            "FUN_08000690",
            "FUN_08004254",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08003840",
            "FUN_080026ce",
            "FUN_08001f3c",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08003968",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_080037d4",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_080047a8",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08005478",
            "FUN_08000d3c",
            "FUN_08003854",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_0800401c",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08004270",
            "FUN_080037e8",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_080051bc",
            "FUN_08004034",
            "FUN_08000f8c",
            "FUN_08001684",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_08003868",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_080035ac",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080001d0",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_08003928",
            "FUN_0800468c",
            "FUN_080005e0",
            "FUN_0800311c",
            "FUN_0800420c",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_080044fc",
            "FUN_08003138",
            "FUN_08003810",
            "FUN_08002848",
            "FUN_08003938",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08005686",
            "FUN_08004110",
            "FUN_08005320",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_08003948",
            "FUN_0800458c",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_08005690",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08004004",
            "FUN_08000e3c",
            "FUN_080037ac",
            "FUN_08002864",
            "FUN_0800459a",
            "FUN_08003958",
            "FUN_0800314e",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00",
            "FUN_080037c0",
            "FUN_0800382c"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005760",
            "FUN_080055d0",
            "FUN_080040ec",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_08000600",
            "FUN_08000de4",
            "FUN_080047c0",
            "FUN_08000682",
            "FUN_0800532c",
            "FUN_0800447c"
        ]
    ],
    "locked_functions": []
}