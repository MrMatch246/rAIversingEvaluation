{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "format_string_080050fc",
                "param_1": "error_code",
                "param_2": "specifiers",
                "param_3": "format",
                "param_4": "arg_list",
                "local_8c": "arg_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "mem_ptr",
                "local_7c": "arg_index",
                "local_74": "bytes_written",
                "local_70": "current_char",
                "local_6f": "pad_char",
                "local_6e": "sign_char",
                "local_45": "is_space_flag",
                "local_30": "temp_int",
                "PTR_DAT_080052d0": "flags_array_1",
                "PTR_DAT_080052d4": "flags_array_2",
                "PTR_s_efgEFG_080052d8": "flags_array_3",
                "DAT_080052dc": "use_printf_string",
                "DAT_080052e0": "format_string_literal"
            },
            "code": "int format_string_080050fc(undefined4 *error_code, int *specifiers, byte *format, int *arg_list)\n{\n  bool is_space_flag;\n  undefined *char_ptr;\n  int format_length;\n  int bytes_written;\n  int arg_index;\n  byte current_char;\n  undefined pad_char;\n  undefined sign_char;\n  undefined4 *mem_ptr;\n  int *arg_ptr;\n  byte *format_ptr;\n  uint flags;\n  int width;\n  int precision;\n  int temp_int;\n  bytes_written = 0;\n  pad_char = 0x20;\n  sign_char = 0x30;\n  format_ptr = format;\n  while (true) {\n    char_ptr = format_ptr;\n    if (*char_ptr == 0) {\n      if ((int)((uint)*(ushort *)(specifiers + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return bytes_written;\n    }\n    while (*char_ptr != 0x25) {\n      char_ptr = char_ptr + 1;\n      if (*char_ptr == 0) {\n        break;\n      }\n    }\n    format_length = (int)char_ptr - (int)format_ptr;\n    if (format_length != 0) {\n      temp_int = __ssputs_r(error_code, specifiers, format_ptr, format_length);\n      if (temp_int == -1) {\n        if ((int)((uint)*(ushort *)(specifiers + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return bytes_written;\n      }\n      bytes_written = bytes_written + format_length;\n    }\n    if (*char_ptr == 0) {\n      if ((int)((uint)*(ushort *)(specifiers + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return bytes_written;\n    }\n    flags = 0;\n    arg_index = 0;\n    width = -1;\n    precision = 0;\n    pad_char = 0x20;\n    sign_char = 0x30;\n    char_ptr = char_ptr + 1;\n    while (true) {\n      mem_ptr = memchr(PTR_DAT_080052d0, (uint)*char_ptr, 5);\n      arg_ptr = arg_list;\n      if (mem_ptr == (void *)0x0) {\n        break;\n      }\n      flags |= 1 << ((int)mem_ptr - (int)PTR_DAT_080052d0 & 0xffU);\n      char_ptr = char_ptr + 1;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      pad_char = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      sign_char = 0x2b;\n    }\n    if (*char_ptr == 0x2a) {\n      arg_ptr = arg_list + 1;\n      temp_int = *arg_list;\n      arg_list = arg_ptr;\n      if (-1 < temp_int) {\n        goto LAB_080051ee;\n      }\n      arg_index = -temp_int;\n      flags |= 2;\n    }\n    else {\n      is_space_flag = false;\n      temp_int = arg_index;\n      while (true) {\n        if (9 < *char_ptr - 0x30) {\n          break;\n        }\n        temp_int = temp_int * 10 + (*char_ptr - 0x30);\n        is_space_flag = true;\n        char_ptr = char_ptr + 1;\n      }\n      if (is_space_flag) {\n        arg_index = temp_int;\n      }\n    }\n    if (*char_ptr == 0x2e) {\n      if (char_ptr[1] == 0x2a) {\n        char_ptr = char_ptr + 2;\n        arg_ptr = arg_list + 1;\n        precision = *arg_list;\n        arg_list = arg_ptr;\n        if (precision < 0) {\n          precision = -1;\n        }\n      }\n      else {\n        is_space_flag = false;\n        temp_int = 0;\n        precision = 0;\n        while (true) {\n          char_ptr = char_ptr + 1;\n          if (9 < *char_ptr - 0x30) {\n            break;\n          }\n          temp_int = temp_int * 10 + (*char_ptr - 0x30);\n          is_space_flag = true;\n        }\n        if (is_space_flag) {\n          precision = temp_int;\n        }\n      }\n    }\n    mem_ptr = memchr(PTR_DAT_080052d4, (uint)*char_ptr, 3);\n    if (mem_ptr != (void *)0x0) {\n      char_ptr = char_ptr + 1;\n      flags |= 64 << ((int)mem_ptr - (int)PTR_DAT_080052d4 & 0xffU);\n    }\n    current_char = *char_ptr;\n    char_ptr = char_ptr + 1;\n    mem_ptr = memchr(PTR_s_efgEFG_080052d8, (uint)current_char, 6);\n    if (mem_ptr == (void *)0x0) {\n      temp_int = _printf_i(error_code, &flags, specifiers, DAT_080052e0, &arg_list);\n    }\n    else {\n      temp_int = __printf_string(error_code, &flags, specifiers, current_char, arg_index, width, precision, pad_char, sign_char, arg_list);\n    }\n    if (temp_int == -1) {\n      if ((int)((uint)*(ushort *)(specifiers + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return bytes_written;\n    }\n    bytes_written = bytes_written + temp_int;\n    format_ptr = char_ptr;\n  }\n}\n",
            "called": [
                "_printf_i",
                "_malloc_r",
                "__ssputs_r",
                "memchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "siprintf"
            ],
            "imported": false,
            "current_name": "format_string_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "updateDeltaTime_08003320",
                "_deltat": "deltaTime",
                "PTR_deltat_08003328": "deltaTimePointer"
            },
            "code": "void updateDeltaTime_08003320(float deltaTime) {\n  *(float *)PTR_deltat_08003328 = deltaTime;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "updateDeltaTime_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_attitude_data_08004410",
                "in_r1": "input_data",
                "local_10": "attitude_data",
                "local_c": "data_to_send",
                "PTR_msp_txf_attitude_08004430": "msp_attitude_ptr"
            },
            "code": "void send_attitude_data_08004410(void)\n{\n  uint16_t attitude_data = *(uint16_t *)PTR_msp_txf_attitude_08004430;\n  uint32_t data_to_send = (in_r1 & 0xffff0000) | (uint32_t)attitude_data;\n  MSP_SendFrame('l', (uint8_t *)&data_to_send, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_attitude_data_08004410"
        },
        "FUN_08003ef2": {
            "renaming": {
                "FUN_08003ef2": "initializeCircularBuffer_08003ef2",
                "cb": "circularBuffer",
                "iVar1": "bufferIndex"
            },
            "code": "void initializeCircularBuffer_08003ef2(CircularBuffer *circularBuffer) {\n  int bufferIndex = 0;\n  circularBuffer->head = 0;\n  circularBuffer->tail = 0;\n  circularBuffer->size = 0;\n  do {\n    circularBuffer->buffer[bufferIndex] = '\\0';\n    bufferIndex++;\n  } while (bufferIndex != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ef2",
            "calling": [
                "serialFlush"
            ],
            "imported": false,
            "current_name": "initializeCircularBuffer_08003ef2"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "configure_gpio_pins_08001264",
                "GPIOx": "GPIO",
                "GPIO_Init": "GPIO_Init",
                "puVar1": "reg_ptr",
                "uVar2": "GPIO_MODE_IT_RISING",
                "uVar3": "GPIO_MODE_IT_FALLING",
                "uVar4": "pin_mask",
                "uVar5": "bit_mask",
                "uVar6": "mode",
                "iVar7": "port_index",
                "uVar8": "bit_index",
                "uVar9": "crl_or_crh",
                "uVar10": "GPIO_MODE_IT_RISING_FALLING",
                "tmpreg": "tmpreg",
                "unaff_r10": "unaff_r10",
                "iVar11": "bsrr_offset"
            },
            "code": "void configure_gpio_pins_08001264(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *GPIO_Init)\n{\n  uint32_t pin_mask = 0;\n  uint32_t speed = 0;\n  uint32_t pull = 0;\n  uint32_t mode = 0;\n  uint32_t crl_or_crh = 0;\n  uint32_t crl_or_crh_mask = 0;\n  uint32_t crl_or_crh_shift = 0;\n  uint32_t port_index = 0;\n  uint32_t port_offset = 0;\n  uint32_t bit_index = 0;\n  uint32_t bit_mask = 0;\n  uint32_t bit_value = 0;\n  uint32_t bsrr_offset = 0;\n  uint32_t brr_offset = 0;\n  uint32_t *reg_ptr = NULL;\n\n  for (bit_index = 0; bit_index < 16; bit_index++) {\n    bit_mask = 1 << bit_index;\n    if (bit_mask & GPIO_Init->Pin) {\n      mode = GPIO_Init->Mode;\n      pull = GPIO_Init->Pull;\n      if (mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_OUTPUT_OD) {\n        speed = GPIO_Init->Speed;\n        if (mode == GPIO_MODE_OUTPUT_PP) {\n          pull = GPIO_NOPULL;\n        }\n        bit_value = (mode == GPIO_MODE_OUTPUT_PP) ? GPIO_Init->Speed : GPIO_Init->Speed + 0x08;\n        crl_or_crh = GPIO->CRL;\n        if (bit_index > 7) {\n          crl_or_crh = GPIO->CRH;\n          bit_index -= 8;\n        }\n        crl_or_crh_mask = 0x0F << (bit_index * 4);\n        crl_or_crh_shift = bit_index * 4;\n        crl_or_crh &= ~crl_or_crh_mask;\n        crl_or_crh |= bit_value << crl_or_crh_shift;\n        if (bit_index > 7) {\n          GPIO->CRH = crl_or_crh;\n        } else {\n          GPIO->CRL = crl_or_crh;\n        }\n      } else if (mode == GPIO_MODE_INPUT) {\n        crl_or_crh = GPIO->CRL;\n        if (bit_index > 7) {\n          crl_or_crh = GPIO->CRH;\n          bit_index -= 8;\n        }\n        crl_or_crh_mask = 0x0F << (bit_index * 4);\n        crl_or_crh_shift = bit_index * 4;\n        crl_or_crh &= ~crl_or_crh_mask;\n        crl_or_crh |= GPIO_CRL_CNF0_1 << crl_or_crh_shift;\n        if (bit_index > 7) {\n          GPIO->CRH = crl_or_crh;\n        } else {\n          GPIO->CRL = crl_or_crh;\n        }\n      } else if (mode == GPIO_MODE_IT_RISING || mode == GPIO_MODE_IT_FALLING || mode == GPIO_MODE_IT_RISING_FALLING) {\n        port_offset = (uint32_t)(GPIO - GPIOA) / 0x400;\n        bsrr_offset = port_offset * 0x24 + 0x18;\n        brr_offset = port_offset * 0x24 + 0x1C;\n        reg_ptr = (uint32_t *)(0x40010000 + port_offset * 0x400 + (bit_index / 4) * 4);\n        bit_index %= 4;\n        *reg_ptr &= ~(0xF << (bit_index * 4));\n        if (mode == GPIO_MODE_IT_RISING) {\n          *reg_ptr |= 0x08 << (bit_index * 4);\n        } else if (mode == GPIO_MODE_IT_FALLING) {\n          *reg_ptr |= 0x04 << (bit_index * 4);\n        } else {\n          *reg_ptr |= 0x0C << (bit_index * 4);\n        }\n        if (GPIO == GPIOA) {\n          port_index = 0;\n        } else if (GPIO == GPIOB) {\n          port_index = 1;\n        } else if (GPIO == GPIOC) {\n          port_index = 2;\n        } else if (GPIO == GPIOD) {\n          port_index = 3;\n        } else if (GPIO == GPIOE) {\n          port_index = 4;\n        } else if (GPIO == GPIOF) {\n          port_index = 5;\n        } else {\n          port_index = 6;\n        }\n        bit_value = port_index << (bit_index * 4);\n        reg_ptr = (uint32_t *)(0x40010008 + (bit_index / 4) * 4);\n        bit_index %= 4;\n        *reg_ptr &= ~(0xF << (bit_index * 4));\n        *reg_ptr |= bit_value;\n        if (pull == GPIO_PULLUP) {\n          GPIO->BSRR = bit_mask;\n        } else if (pull == GPIO_PULLDOWN) {\n          GPIO->BRR = bit_mask;\n        }\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "HAL_TIM_MspPostInit",
                "HAL_UART_MspInit",
                "Peripherals_Init",
                "HAL_I2C_MspInit"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08001264"
        },
        "FUN_080058fc": {
            "renaming": {
                "FUN_080058fc": "calculate_080058fc",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "atan_input",
                "uVar1": "tmp1",
                "extraout_r1": "tmp2",
                "extraout_r1_00": "tmp3",
                "unaff_r4": "tmp4",
                "iVar2": "tmp5",
                "uVar3": "tmp6",
                "uVar4": "tmp7",
                "iVar5": "tmp8",
                "uVar6": "tmp9",
                "uVar7": "tmp10",
                "uVar8": "tmp11",
                "DAT_08006204": "double_upper_word",
                "DAT_08006200": "double_lower_word",
                "DAT_08006220": "max_int",
                "DAT_080061fc": "positive_infinity_upper_word",
                "DAT_080061f8": "positive_infinity_lower_word",
                "DAT_080061ec": "negative_infinity_upper_word",
                "DAT_080061e8": "negative_infinity_lower_word",
                "DAT_080061f4": "nan_upper_word",
                "DAT_080061f0": "nan_lower_word",
                "DAT_0800621c": "qnan_upper_word",
                "DAT_08006218": "qnan_lower_word",
                "DAT_080061e4": "snan_upper_word",
                "DAT_080061e0": "snan_lower_word",
                "DAT_08006210": "divisor_const",
                "DAT_08006214": "remainder_const",
                "DAT_08006208": "atan_upper_word",
                "DAT_0800620c": "atan_lower_word"
            },
            "code": "undefined8 calculate_080058fc(uint dividend, uint divisor, uint quotient, uint remainder, double atan_input)\n{\n  uint abs_remainder = remainder & 0x7fffffff;\n  uint abs_divisor = divisor & 0x7fffffff;\n  undefined8 result;\n  if (2147483648 < (abs_remainder | (-quotient | quotient) >> 0x1f)) || (2147483648 < (abs_divisor | (-dividend | dividend) >> 0x1f))) {\n    result = __aeabi_dadd(dividend, divisor);\n    return result;\n  }\n  if ((remainder + 0xc0100000 | quotient) == 0) {\n    atan(atan_input);\n    result = CONCAT44(extraout_r1, dividend);\n  }\n  else {\n    uint uVar3 = (int)remainder >> 0x1e & 2U | divisor >> 0x1f;\n    if ((dividend | abs_divisor) == 0) {\n      if (uVar3 == 2) {\n        result = CONCAT44(DAT_080061fc, DAT_080061f8);\n      }\n      else if (uVar3 != 3) {\n        result = CONCAT44(dividend, divisor);\n      }\n    }\n    else {\n      if ((quotient | abs_remainder) != 0) {\n        if (abs_remainder == 2147483648) {\n          if (abs_divisor == abs_remainder) {\n            if (uVar3 == 2) {\n              result = CONCAT44(DAT_080061ec, DAT_080061e8);\n            }\n            else if (uVar3 == 3) {\n              result = CONCAT44(DAT_080061f4, DAT_080061f0);\n            }\n            else if (uVar3 != 1) {\n              result = CONCAT44(DAT_0800621c, DAT_08006218);\n            }\n            else {\n              result = CONCAT44(DAT_080061e4, DAT_080061e0);\n            }\n          }\n          else if (uVar3 == 2) {\n            result = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          else if (uVar3 == 3) {\n            result = result = CONCAT44(DAT_08006204, DAT_08006200);\n          }\n          else if (uVar3 == 1) {\n            result = 0x8000000000000000;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else if (abs_divisor != 2147483648) {\n          int iVar5 = (int)(abs_divisor - abs_remainder) >> 0x14;\n          undefined4 uVar1 = DAT_08006210;\n          int iVar2 = DAT_08006214;\n          if (iVar5 < 0x3d) {\n            if (((int)remainder < 0) && (iVar5 + 0x3c < 0 != SCARRY4(iVar5, 0x3c))) {\n              uVar1 = 0;\n              iVar2 = 0;\n            }\n            else {\n              uVar1 = __divdf3(dividend, divisor);\n              fabs((double)CONCAT44(unaff_r4, remainder));\n              atan((double)CONCAT44(unaff_r4, remainder));\n              iVar2 = extraout_r1_00;\n            }\n          }\n          if (uVar3 != 1) {\n            if (uVar3 == 2) {\n              undefined8 uVar7 = __subdf3(uVar1, iVar2, DAT_08006208, DAT_0800620c);\n              result = CONCAT44(DAT_080061fc, DAT_080061f8);\n              result = __subdf3((int)result, (int)((ulonglong)result >> 0x20), (int)uVar7, (int)((ulonglong)uVar7 >> 0x20));\n            }\n            else {\n              if (uVar3 == 0) {\n                result = CONCAT44(iVar2, uVar1);\n              }\n              else {\n                undefined8 uVar8 = __subdf3(uVar1, iVar2, DAT_08006208, DAT_0800620c);\n                result = CONCAT44(DAT_080061fc, DAT_080061f8);\n                result = __subdf3((int)result, (int)((ulonglong)result >> 0x20), (int)uVar8, (int)((ulonglong)uVar8 >> 0x20));\n              }\n            }\n          }\n          else {\n            result = CONCAT44(iVar2 + -0x80000000, uVar1);\n          }\n        }\n      }\n      else {\n        result = CONCAT44(DAT_08006214, DAT_08006210);\n        if ((int)divisor < 0) {\n          result = CONCAT44(DAT_080061dc, DAT_080061d8);\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_080058fc"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "__x": "input",
                "iVar1": "exponentSign",
                "in_r0": "mantissaBitsLower",
                "in_r1": "exponentBits",
                "uVar2": "signMask",
                "uVar3": "exponentMask",
                "uVar4": "shiftedExponent",
                "uVar5": "shiftedExponentBits",
                "in_d0": "input",
                "dVar6": "result",
                "uVar7": "sum",
                "PTR_TWO52_080071b8": "two52",
                "PTR_TWO52_080071bc": "two52Shifts",
                "DAT_080071bc": "two52ShiftsMask"
            },
            "code": "double calculate_080070b0(double input){\n  int exponentShifted;\n  uint32_t exponentBits;\n  uint32_t signBit;\n  uint32_t mantissaBitsLower;\n  uint32_t mantissaBitsUpper;\n  double result;\n  uint32_t mask;\n  uint32_t shiftedMask;\n  uint32_t shiftedOne;\n  uint32_t shiftedMantissa;\n  uint32_t signMask;\n  uint32_t mantissaMask;\n  uint32_t exponentMask;\n  exponentBits = (uint32_t)(in_d0 >> 32);\n  signBit = exponentBits >> 31;\n  exponentShifted = (int)(exponentBits << 1) >> 21;\n  mantissaBitsUpper = exponentBits & 0x000FFFFF;\n  mantissaBitsLower = (uint32_t)in_d0;\n  if (exponentShifted < 0x14) {\n    if (exponentShifted < 0) {\n      if ((mantissaBitsUpper | mantissaBitsLower) == 0) {\n        return input;\n      }\n      shiftedMantissa = mantissaBitsUpper << 11 | mantissaBitsLower >> 21;\n      signMask = *(uint32_t *)(PTR_TWO52_080071b8 + signBit * -8);\n      exponentMask = *(uint32_t *)((int)(PTR_TWO52_080071b8 + signBit * -8) + 4);\n      shiftedOne = 0x80000 | (mantissaBitsLower & 0x7FFFFF) << 1;\n      mask = ~(signMask | exponentMask);\n      shiftedMask = mask >> (0x13 - exponentShifted);\n      shiftedMantissa &= shiftedMask;\n      if (shiftedMantissa != 0) {\n        if (exponentShifted == 0x13) {\n          shiftedMantissa = 0x80000000;\n        }\n        else {\n          shiftedMantissa = 0;\n        }\n        exponentMask = 0x40000 >> (exponentShifted & 0xFF) | exponentBits & ~shiftedMask;\n      }\n    }\n    else {\n      mask = *(uint32_t *)(PTR_TWO52_080071bc + (exponentShifted & 0xFF));\n      if ((mantissaBitsUpper & mask | mantissaBitsLower) == 0) {\n        return input;\n      }\n      shiftedMask = mask >> 1;\n      shiftedMantissa = mantissaBitsUpper & shiftedMask | mantissaBitsLower;\n      if (shiftedMantissa != 0) {\n        if (exponentShifted == 0x13) {\n          shiftedMantissa = 0x80000000;\n        }\n        else {\n          shiftedMantissa = 0;\n        }\n        exponentMask = 0x40000 >> (exponentShifted & 0xFF) | exponentBits & ~shiftedMask;\n      }\n    }\n  }\n  else {\n    if (exponentShifted <= 0x33) {\n      mask = 0xFFFFFFFF >> (0x33 - exponentShifted);\n      if ((mantissaBitsLower & mask) == 0) {\n        return input;\n      }\n      shiftedMask = mask >> 1;\n      shiftedMantissa = mantissaBitsLower & shiftedMask | mantissaBitsLower & ~mask;\n      if (shiftedMantissa != 0) {\n        exponentMask = 0x40000000 >> (exponentShifted & 0xFF) | exponentBits & ~shiftedMask;\n      }\n    }\n    else {\n      if (exponentShifted != 0x400) {\n        return input;\n      }\n      result = (double)__aeabi_dadd((uint32_t)in_d0, exponentBits << 20);\n      return result;\n    }\n  }\n  result = (double)__aeabi_dadd(shiftedMantissa, exponentMask);\n  return result;\n}",
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "isStringTerminated_08001028",
                "in_CY": "current_char"
            },
            "code": "bool isStringTerminated_08001028(char* str) {\n  char current_char = *str;\n  __aeabi_cfcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "PID_Update",
                "AHRS_GetYaw",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "isStringTerminated_08001028"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "var1",
                "unaff_r4": "var2",
                "uVar2": "var3",
                "uVar3": "var4",
                "in_r12": "var5",
                "bVar4": "var6"
            },
            "code": "ulonglong calculate_result_080006ac(uint input1, uint input2, uint input3, uint input4)\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  bool var6;\n  \n  var2 = input4 >> 0x14;\n  if (input2 != input4 && var2 != input4) {\n    var6 = (input1 | input2 << 1) == 0;\n    if (!var6) {\n      var6 = (input3 | input4 << 1) == 0;\n    }\n    if (var6) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input2 == 0) {\n      var3 = input2 & 0x80000000;\n      do {\n        var1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(var1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | var3;\n      if (var2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      var2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(var2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  var6 = (input1 | input2 << 1) == 0;\n  if (var6) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!var6) {\n    var6 = (input3 | input4 << 1) == 0;\n  }\n  var3 = input2;\n  if (((!var6) && ((input2 != input4 || ((input1 | input2 << 0xc) == 0)))) && ((var2 != input4 || (input1 = input3, var3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(var3,input1) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_0800125a": {
            "renaming": {
                "FUN_0800125a": "handle_systick_interrupt_0800125a"
            },
            "code": "void handle_systick_interrupt_0800125a(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800125a",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_0800125a"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "write_memory_08001828",
                "hi2c": "i2c_handler",
                "DevAddress": "device_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_add_size",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "i2c_instance",
                "uVar5": "i2c_cr1_reg",
                "LAB_080018e2": "transmit_data",
                "i2c_sr2_reg": "i2c_sr2_reg"
            },
            "code": "HAL_StatusTypeDef write_memory_08001828(I2C_HandleTypeDef *i2c_handler, uint16_t device_address, uint16_t mem_address, uint16_t mem_add_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  uint32_t current_time;\n  I2C_TypeDef *i2c_instance;\n  uint32_t i2c_cr1_reg;\n  uint i2c_sr2_reg;\n  if (i2c_handler->State == HAL_I2C_STATE_READY) {\n    if (data == NULL) {\n      return HAL_ERROR;\n    }\n    if (size == 0) {\n      return HAL_ERROR;\n    }\n    start_time = HAL_GetTick();\n    do {\n      i2c_instance = i2c_handler->Instance;\n      if ((~i2c_instance->SR2 & 2) != 0) {\n        if (i2c_handler->Lock == HAL_LOCKED) {\n          return HAL_BUSY;\n        }\n        i2c_cr1_reg = i2c_instance->CR1;\n        i2c_handler->Lock = HAL_LOCKED;\n        i2c_instance->CR1 = i2c_cr1_reg & 0xfffff7ff;\n        i2c_handler->State = HAL_I2C_STATE_BUSY_TX;\n        i2c_handler->Mode = HAL_I2C_MODE_MEM;\n        i2c_handler->ErrorCode = 0;\n        status = I2C_RequestMemoryWrite(i2c_handler, device_address, mem_address, mem_add_size, timeout);\n        if (status != HAL_OK) {\n          i2c_handler->Lock = HAL_UNLOCKED;\n          if (i2c_handler->ErrorCode == 4) {\n            return HAL_ERROR;\n          }\n          return HAL_TIMEOUT;\n        }\n        goto transmit_data;\n      }\n      current_time = HAL_GetTick();\n    } while (current_time - start_time < 0x2711);\n    i2c_handler->Lock = HAL_UNLOCKED;\n    i2c_handler->State = HAL_I2C_STATE_READY;\n  }\n  return HAL_BUSY;\ntransmit_data:\n  while (size != 0) {\n    status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout);\n    if (status != HAL_OK) goto transmit_error;\n    i2c_instance = i2c_handler->Instance;\n    i2c_instance->DR = (uint)*data;\n    i2c_sr2_reg = (int)(i2c_instance->SR1 << 0x1d);\n    if (i2c_sr2_reg < 0) {\n      if ((uint16_t)(size - 1) == 0) break;\n      size = size - 2;\n      i2c_instance->DR = (uint)data[1];\n      data = data + 2;\n    }\n    else {\n      data = data + 1;\n      size = size - 1;\n    }\n  }\n  status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout);\n  if (status == HAL_OK) {\n    i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n    i2c_handler->Lock = HAL_UNLOCKED;\n    i2c_handler->State = HAL_I2C_STATE_READY;\n    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n    return HAL_OK;\n  }\ntransmit_error:\n  if (i2c_handler->ErrorCode == 4) {\n    i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n    return HAL_ERROR;\n  }\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "I2C_WriteByte"
            ],
            "imported": false,
            "current_name": "write_memory_08001828"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "scalbn",
                "__aeabi_drsub",
                "__ieee754_asin",
                "rint",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nHAL_StatusTypeDef FUNC_08001b58(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1f) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar6 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar3 = RCC_OscInitStruct->HSEState;\n      if (uVar3 == 0x10000) {\nLAB_08001c1e:\n        uVar6 = *puVar1 | 0x10000;\n      }\n      else {\n        if (uVar3 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          uVar3 = HAL_GetTick();\n          while (uVar6 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            uVar4 = HAL_GetTick();\n            if (100 < uVar4 - uVar3) {\n              return HAL_TIMEOUT;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (uVar3 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar6 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar6;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f))\n      {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1e) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar6 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSIState == 0) {\n        iVar5 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n        uVar3 = HAL_GetTick();\n        while (uVar6 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n          uVar4 = HAL_GetTick();\n          if (2 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    uVar6 = count_leading_zeroes(0x1f000000);\n    *puVar1 = RCC_OscInitStruct->HSICalibrationValue << (uVar6 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1c) < 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 0;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < (int)(RCC_OscInitStruct->OscillatorType << 0x1d)) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  uVar3 = HAL_GetTick();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    uVar4 = HAL_GetTick();\n    if (100 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\n  uVar3 = RCC_OscInitStruct->LSEState;\n  if (uVar3 == 1) {\nLAB_08001e1a:\n    uVar6 = puVar1[8] | 1;\n  }\n  else {\n    if (uVar3 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (uVar3 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar6 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar6;\n  uVar3 = HAL_GetTick();\n  while (uVar6 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f)\n        ) {\n    uVar4 = HAL_GetTick();\n    if (5000 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    return HAL_OK;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (uVar3 != 2) {\n      iVar5 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n      uVar3 = HAL_GetTick();\n      do {\n        uVar6 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n          return HAL_OK;\n        }\n        uVar4 = HAL_GetTick();\n      } while (uVar4 - uVar3 < 3);\n      return HAL_TIMEOUT;\n    }\n    iVar5 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      uVar6 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar6 = (RCC_OscInitStruct->PLL).PLLSource;\n        if (uVar6 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        puVar1[1] = uVar6 | (RCC_OscInitStruct->PLL).PLLMUL | puVar1[1] & 0xffc2ffff;\n        iVar5 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          uVar6 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "receive_data_from_uart_0800290c",
                "huart": "uart_handle",
                "State": "state",
                "Init": "init",
                "Parity": "parity",
                "Instance": "uart_instance",
                "WordLength": "word_length",
                "pRxBuffPtr": "rx_buffer_ptr",
                "DR": "data",
                "RxXferCount": "rx_transfer_count",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK",
                "ushort": "ushort",
                "byte": "byte",
                "bool": "bool"
            },
            "code": "HAL_StatusTypeDef receive_data_from_uart_0800290c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t parity;\n  byte data;\n  USART_TypeDef *uart_instance;\n  uint16_t word_length;\n  ushort *rx_buffer_ptr;\n  ushort *next_rx_buffer_ptr;\n  bool is_busy;\n\n  if ((uart_handle->State & 0xef) != 0x22) {\n    return HAL_BUSY;\n  }\n\n  parity = uart_handle->Init.Parity;\n  uart_instance = uart_handle->Instance;\n  rx_buffer_ptr = (ushort *)uart_handle->pRxBuffPtr;\n  word_length = uart_handle->Init.WordLength;\n\n  if (word_length == 0x1000) {\n    if (parity == 0) {\n      next_rx_buffer_ptr = rx_buffer_ptr + 1;\n      *rx_buffer_ptr = (ushort)((uart_instance->DR << 0x17) >> 0x17);\n    }\n    else {\n      next_rx_buffer_ptr = (ushort *)((int)rx_buffer_ptr + 1);\n      *rx_buffer_ptr = (ushort)uart_instance->DR & 0xff;\n    }\n    uart_handle->pRxBuffPtr = (uint8_t *)next_rx_buffer_ptr;\n  }\n  else {\n    if (parity == 0) {\n      data = (byte)uart_instance->DR;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n    }\n    else {\n      data = (byte)uart_instance->DR & 0x7f;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n    }\n    *(byte *)rx_buffer_ptr = data;\n  }\n\n  uart_handle->RxXferCount--;\n\n  if (uart_handle->RxXferCount == 0) {\n    uart_instance = uart_handle->Instance;\n    uart_instance->CR1 &= 0xffffffdf;\n\n    if (uart_handle->State != 0x32) {\n      uart_instance->CR1 &= 0xfffffeff;\n      uart_instance->CR3 &= 0xfffffffe;\n      uart_handle->State = (HAL_UART_StateTypeDef)uart_instance;\n      HAL_UART_RxCpltCallback(uart_handle);\n    }\n    else {\n      uart_handle->State = (HAL_UART_StateTypeDef)0x12;\n    }\n\n    return HAL_OK;\n  }\n\n  return HAL_BUSY;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_from_uart_0800290c"
        },
        "FUN_080028a6": {
            "renaming": {
                "FUN_080028a6": "receive_data_080028a6",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HVar1": "uart_state",
                "uVar2": "control_reg_val",
                "pUVar3": "uart_instance"
            },
            "code": "HAL_StatusTypeDef receive_data_080028a6(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)\n{\n  HAL_UART_StateTypeDef uart_state;\n  uint control_reg_val;\n  USART_TypeDef *uart_instance;\n  \n  if ((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX)) {\n    if ((data == NULL) || (size == 0)) {\n      return HAL_ERROR;\n    }\n    if (huart->Lock != HAL_LOCKED) {\n      huart->Lock = HAL_LOCKED;\n      huart->ErrorCode = 0;\n      huart->RxXferSize = size;\n      huart->RxXferCount = size;\n      huart->Lock = HAL_UNLOCKED;\n      if (huart->State == HAL_UART_STATE_BUSY_TX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_RX;\n      }\n      uart_instance = huart->Instance;\n      huart->State = uart_state;\n      control_reg_val = uart_instance->CR1;\n      huart->pRxBuffPtr = data;\n      uart_instance->CR1 = control_reg_val | 0x100;\n      uart_instance->CR3 |= 1;\n      uart_instance->CR1 |= 0x20;\n      return HAL_OK;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028a6",
            "calling": [
                "serialBegin",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "receive_data_080028a6"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "print_data_with_checksum_08004300",
                "code": "checksum_key",
                "data": "data",
                "data_length": "data_length",
                "ch": "checksum",
                "pbVar1": "current_byte"
            },
            "code": "void print_data_with_checksum_08004300(uint8_t checksum_key, uint8_t *data, uint16_t data_length)\n{\n  uint8_t checksum = 0;\n  uint8_t *current_byte;\n  serialPrint(PTR_DAT_08004344);\n  serialWrite((byte)data_length);\n  checksum = (byte)data_length ^ checksum_key;\n  serialWrite(checksum_key);\n  for (current_byte = data; (int)current_byte - (int)data < (int)(uint)data_length; current_byte = current_byte + 1) {\n    serialWrite(*current_byte);\n    checksum = checksum ^ *current_byte;\n  }\n  serialWrite(checksum);\n  return;\n}",
            "called": [
                "serialPrint",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "MSP_SendMotor",
                "MSP_SendRawIMU",
                "MSP_SendStatus",
                "MSP_SendAltitude",
                "MSP_SendIdent",
                "MSP_SendAttitude",
                "MSP_SendPID"
            ],
            "imported": false,
            "current_name": "print_data_with_checksum_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "reverse_copy_08005630",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "code": "void * reverse_copy_08005630(void *destination, const void *source, size_t size)\n{\n  unsigned char *dest = (unsigned char *)destination + size - 1;\n  const unsigned char *src = (const unsigned char *)source;\n  for (; src < (const unsigned char *)source + size; ++src, --dest)\n  {\n    *dest = *src;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "_realloc_r",
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330\n               (float ax,float ay,float az,float gx,float gy,float gz,float mx,float my,float mz,\n               float *angle)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 in_r2;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_00000000;\n  undefined4 in_stack_00000004;\n  undefined4 in_stack_00000008;\n  undefined4 in_stack_0000000c;\n  undefined4 in_stack_00000010;\n  undefined4 *in_stack_00000014;\n  undefined4 in_stack_ffffff78;\n  float hy;\n  float hx;\n  \n  uVar28 = *(undefined4 *)PTR_q_080035d8;\n  iVar29 = *(int *)(PTR_q_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_q_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_q_080035d8 + 0xc);\n  uVar2 = __aeabi_fmul(ax,mz,mz);\n  uVar3 = __aeabi_fmul(angle);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar3 = __aeabi_fmul(in_r2);\n  __addsf3(uVar2,uVar3);\n  __aeabi_f2d();\n  sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n  uVar2 = __truncdfsf2();\n  iVar4 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = __aeabi_fmul(in_stack_00000008);\n    uVar5 = __aeabi_fmul(in_stack_0000000c);\n    uVar3 = __addsf3(uVar3,uVar5);\n    uVar5 = __aeabi_fmul(in_stack_00000010);\n    __addsf3(uVar3,uVar5);\n    __aeabi_f2d();\n    sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n    uVar3 = __truncdfsf2();\n    iVar4 = __aeabi_fcmpeq(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = __aeabi_f2d();\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000000);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000004);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = __truncdfsf2();\n      iVar4 = __addsf3(uVar28);\n      uVar8 = __addsf3(iVar29);\n      iVar9 = __addsf3(uVar31,uVar31);\n      uVar10 = __addsf3(uVar30,uVar30);\n      uVar11 = __aeabi_fmul(uVar28);\n      uVar12 = __aeabi_fmul(uVar28,iVar29);\n      uVar13 = __aeabi_fmul(uVar28,uVar31);\n      uVar14 = __aeabi_fmul(iVar29);\n      uVar15 = __aeabi_fmul(iVar29,uVar30);\n      uVar16 = __aeabi_fmul(uVar31,uVar31);\n      uVar17 = __aeabi_fmul(uVar30,uVar30);\n      uVar2 = __aeabi_fdiv(0x3f800000,uVar2);\n      uVar3 = __aeabi_fdiv(0x3f800000,uVar3);\n      uVar18 = __aeabi_fmul(in_stack_00000008,uVar3);\n      uVar19 = __aeabi_fmul(in_stack_0000000c,uVar3);\n      uVar3 = __aeabi_fmul(in_stack_00000010,uVar3);\n      iVar20 = __aeabi_fmul(iVar4,uVar18);\n      uVar21 = __aeabi_fmul(iVar4,uVar19);\n      uVar22 = __aeabi_fmul(iVar4,uVar3);\n      uVar23 = __aeabi_fmul(uVar8,uVar18);\n      uVar24 = __aeabi_fmul(uVar11,uVar18);\n      uVar25 = __aeabi_fmul(uVar30,uVar21);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar31,uVar22);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar18);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar19);\n      uVar25 = __aeabi_fmul(uVar25,uVar31);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar30,iVar20);\n      uVar26 = __aeabi_fmul(uVar11,uVar19);\n      uVar25 = __addsf3(uVar25,uVar26);\n      uVar22 = __aeabi_fmul(iVar29,uVar22);\n      uVar22 = __aeabi_fsub(uVar25,uVar22);\n      uVar25 = __aeabi_fmul(uVar31,uVar23);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar19);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(iVar9,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar24 = __aeabi_fmul(uVar24,uVar24);\n      uVar22 = __aeabi_fmul(uVar22,uVar22);\n      __addsf3(uVar24,uVar22);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      iVar27 = __truncdfsf2();\n      uVar22 = __aeabi_fmul(iVar20 + -0x80000000,uVar31);\n      uVar21 = __aeabi_fmul(iVar29,uVar21);\n      uVar21 = __addsf3(uVar22,uVar21);\n      uVar11 = __aeabi_fmul(uVar11,uVar3);\n      uVar11 = __addsf3(uVar21,uVar11);\n      uVar21 = __aeabi_fmul(uVar30,uVar23);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar14,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(iVar9,uVar19);\n      uVar21 = __aeabi_fmul(uVar21,uVar30);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar16,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar17,uVar3);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __addsf3(uVar11,uVar11);\n      uVar22 = __addsf3(uVar15);\n      uVar23 = __aeabi_fmul(uVar31,iVar4);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(mz,uVar2);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(uVar30,iVar9);\n      uVar24 = __addsf3(uVar12);\n      uVar23 = __addsf3(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(angle,uVar2);\n      uVar23 = __aeabi_fsub(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(uVar31,uVar11);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar16);\n      uVar17 = __aeabi_fsub(uVar25,uVar17);\n      uVar17 = __aeabi_fmul(uVar17,iVar27);\n      uVar25 = __aeabi_fsub(uVar15,uVar13);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar17 = __addsf3(uVar17,uVar25);\n      uVar17 = __aeabi_fsub(uVar17,uVar18);\n      uVar18 = __aeabi_fmul(iVar29,uVar11);\n      uVar25 = __aeabi_fmul(iVar29,uVar31);\n      uVar26 = __aeabi_fmul(uVar28,uVar30);\n      uVar25 = __aeabi_fsub(uVar25,uVar26);\n      uVar25 = __aeabi_fmul(uVar25,iVar27);\n      uVar26 = __aeabi_fmul(uVar31,uVar30);\n      uVar12 = __addsf3(uVar26,uVar12);\n      uVar12 = __aeabi_fmul(uVar12,uVar11);\n      uVar12 = __addsf3(uVar25,uVar12);\n      uVar12 = __aeabi_fsub(uVar12,uVar19);\n      uVar19 = __aeabi_fmul(uVar31,iVar27);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar14);\n      uVar25 = __aeabi_fsub(uVar25,uVar16);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar13 = __aeabi_fmul(uVar13,iVar27);\n      uVar13 = __addsf3(uVar25,uVar13);\n      uVar3 = __aeabi_fsub(uVar13,uVar3);\n      uVar13 = __aeabi_fmul(iVar9 + -0x80000000,uVar22);\n      uVar15 = __aeabi_fmul(uVar8,uVar23);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar24,uVar17);\n      uVar13 = __aeabi_fsub(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar30,iVar27 + -0x80000000);\n      uVar15 = __addsf3(uVar15,uVar18);\n      uVar15 = __aeabi_fmul(uVar15,uVar12);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar19,uVar3);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar14 = __addsf3(uVar14);\n      uVar14 = __aeabi_fsub(0x3f800000,uVar14);\n      uVar15 = __addsf3(uVar16);\n      uVar14 = __aeabi_fsub(uVar14,uVar15);\n      uVar2 = __aeabi_fmul(in_r2,uVar2);\n      uVar2 = __aeabi_fsub(uVar14,uVar2);\n      uVar14 = __aeabi_fmul(uVar30,uVar11);\n      uVar11 = __aeabi_fmul(uVar28,uVar11);\n      uVar15 = __aeabi_fmul(uVar10,uVar22);\n      uVar16 = __aeabi_fmul(iVar4,uVar23);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(iVar29,0x40800000);\n      uVar16 = __aeabi_fmul(uVar16,uVar2);\n      uVar15 = __aeabi_fsub(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar17,uVar14);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __addsf3(uVar19,uVar11);\n      uVar16 = __aeabi_fmul(uVar16,uVar12);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar30,iVar27);\n      uVar19 = __aeabi_fmul(iVar29,uVar21);\n      uVar16 = __aeabi_fsub(uVar16,uVar19);\n      uVar16 = __aeabi_fmul(uVar16,uVar3);\n      uVar15 = __addsf3(uVar15,uVar16);\n      iVar20 = __addsf3(iVar27,iVar27);\n      uVar16 = __aeabi_fmul(iVar29,iVar27);\n      uVar19 = __aeabi_fmul(iVar4 + -0x80000000,uVar22);\n      uVar10 = __aeabi_fmul(uVar10,uVar23);\n      uVar10 = __addsf3(uVar19,uVar10);\n      uVar19 = __aeabi_fmul(uVar31,0x40800000);\n      uVar2 = __aeabi_fmul(uVar19,uVar2);\n      uVar2 = __aeabi_fsub(uVar10,uVar2);\n      uVar10 = __aeabi_fmul(uVar31,iVar20 + -0x80000000);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __addsf3(uVar14,uVar16);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27);\n      uVar11 = __aeabi_fmul(uVar31,uVar21);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar3);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar8 = __aeabi_fmul(uVar8,uVar22);\n      uVar10 = __aeabi_fmul(iVar9,uVar23);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar30,iVar20 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar18);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar24);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar3 = __aeabi_fmul(uVar3,uVar16);\n      uVar3 = __addsf3(uVar8,uVar3);\n      uVar8 = __aeabi_fmul(uVar13);\n      uVar10 = __aeabi_fmul(uVar15);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar2,uVar2);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar8,uVar10);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      uVar8 = __truncdfsf2();\n      uVar8 = __aeabi_fdiv(0x3f800000,uVar8);\n      puVar1 = PTR_deltat_08003d84;\n      uVar12 = *(undefined4 *)PTR_beta_08003d80;\n      uVar14 = *(undefined4 *)PTR_beta_08003d80;\n      uVar16 = *(undefined4 *)PTR_beta_08003d80;\n      uVar17 = *(undefined4 *)PTR_beta_08003d80;\n      uVar10 = __aeabi_fmul(iVar29 + -0x80000000,uVar5);\n      uVar11 = __aeabi_fmul(uVar31,uVar6);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar11 = __aeabi_fmul(uVar30,uVar7);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,0x3f000000);\n      uVar11 = __aeabi_fmul(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __aeabi_fmul(uVar11,uVar12);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar13);\n      uVar10 = __addsf3(uVar10,uVar28);\n      uVar11 = __aeabi_fmul(uVar28,uVar5);\n      uVar12 = __aeabi_fmul(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __addsf3(uVar11,uVar12);\n      uVar12 = __aeabi_fmul(uVar30,uVar6);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,0x3f000000);\n      uVar12 = __aeabi_fmul(uVar15,uVar8);\n      uVar12 = __aeabi_fmul(uVar12,uVar14);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,uVar13);\n      uVar11 = __addsf3(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = __aeabi_fmul(uVar28,uVar6);\n      uVar13 = __aeabi_fmul(iVar29,uVar7);\n      uVar12 = __aeabi_fsub(uVar12,uVar13);\n      uVar13 = __aeabi_fmul(uVar30,uVar5);\n      uVar12 = __addsf3(uVar12,uVar13);\n      uVar12 = __aeabi_fmul(uVar12,0x3f000000);\n      uVar2 = __aeabi_fmul(uVar2,uVar8);\n      uVar2 = __aeabi_fmul(uVar2,uVar16);\n      uVar2 = __aeabi_fsub(uVar12,uVar2);\n      uVar2 = __aeabi_fmul(uVar2,uVar14);\n      uVar2 = __addsf3(uVar2,uVar31);\n      uVar28 = __aeabi_fmul(uVar28,uVar7);\n      uVar6 = __aeabi_fmul(iVar29,uVar6);\n      uVar28 = __addsf3(uVar28,uVar6);\n      uVar31 = __aeabi_fmul(uVar31,uVar5);\n      uVar31 = __aeabi_fsub(uVar28,uVar31);\n      uVar31 = __aeabi_fmul(uVar31,0x3f000000);\n      uVar3 = __aeabi_fmul(uVar3,uVar8);\n      uVar3 = __aeabi_fmul(uVar3,uVar17);\n      uVar5 = *(undefined4 *)puVar1;\n      uVar3 = __aeabi_fsub(uVar31,uVar3);\n      uVar3 = __aeabi_fmul(uVar3,uVar5);\n      uVar3 = __addsf3(uVar3,uVar30);\n      uVar30 = __aeabi_fmul(uVar10,uVar10);\n      uVar31 = __aeabi_fmul(uVar11,uVar11);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar2,uVar2);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar30,uVar31);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar30 = __truncdfsf2();\n      uVar30 = __aeabi_fdiv(0x3f800000,uVar30);\n      uVar31 = __aeabi_fmul(uVar10,uVar30);\n      puVar1 = PTR_q_08003d88;\n      *(undefined4 *)PTR_q_08003d88 = uVar31;\n      uVar5 = __aeabi_fmul(uVar11,uVar30);\n      *(undefined4 *)(puVar1 + 4) = uVar5;\n      uVar2 = __aeabi_fmul(uVar2,uVar30);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = __aeabi_fmul(uVar3,uVar30);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = __aeabi_fmul(uVar5,uVar3);\n      uVar2 = __aeabi_fmul(uVar31,uVar2);\n      uVar2 = __aeabi_fsub(uVar3,uVar2);\n      __addsf3(uVar2,uVar2);\n      __aeabi_f2d();\n      asin((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar32 = __muldf3();\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = __truncdfsf2();\n      *in_stack_00000014 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar31,uVar31);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar30,uVar30);\n      __addsf3(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar28,uVar30);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar30,uVar30);\n      uVar3 = __aeabi_fmul(uVar31,uVar31);\n      uVar2 = __addsf3(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      __aeabi_fsub(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar30,uVar28);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "asin",
                "atan2",
                "__addsf3",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "__divdf3",
                "__truncdfsf2",
                "__muldf3",
                "__aeabi_f2d"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_double_values_and_set_flag_08000980",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "flag",
                "param_4": "0"
            },
            "code": "void compare_double_values_and_set_flag_08000980(int value1, int value2, int* flag) {\n  __aeabi_cdcmpeq(value1, value2, flag, 0);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_double_values_and_set_flag_08000980"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "set_timer_08002368",
                "TIMx": "timer",
                "Structure": "init_settings",
                "uVar1": "control_reg",
                "pTVar2": "timer_pointer",
                "DAT_080023cc": "timer1"
            },
            "code": "void set_timer_08002368(TIM_TypeDef *timer, TIM_Base_InitTypeDef *init_settings)\n{\n  uint32_t control_reg;\n  TIM_TypeDef *timer_pointer;\n  control_reg = timer->CR1;\n  if ((((timer == DAT_080023cc) || (timer == (TIM_TypeDef *)0x40000000)) ||\n      (timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR)) ||\n     (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37A].SMCR)) {\n    control_reg = control_reg & 0xffffff8f | init_settings->CounterMode;\n    if (((timer == DAT_080023cc) || (timer == (TIM_TypeDef *)0x40000000)) ||\n       ((timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR ||\n        (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37A].SMCR)))) {\n      control_reg = control_reg & 0xfffffcff | init_settings->ClockDivision;\n    }\n  }\n  timer->CR1 = control_reg;\n  timer->ARR = init_settings->Period;\n  timer->PSC = init_settings->Prescaler;\n  timer_pointer = DAT_080023cc;\n  if (timer == DAT_080023cc) {\n    timer_pointer = (TIM_TypeDef *)init_settings->RepetitionCounter;\n  }\n  if (timer == DAT_080023cc) {\n    timer->RCR = (uint32_t)timer_pointer;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "set_timer_08002368"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_PLL_multiplier_08002008",
                "uVar1": "temp1",
                "uVar2": "PLL_multiplier",
                "uVar3": "temp2",
                "uVar4": "RCC_CFGR",
                "uVar5": "prediv_index",
                "uVar6": "PLL_MUL_index",
                "puVar7": "PLL_MUL_factor_table_ptr",
                "puVar8": "PLL_MUL_factor_table_copy_ptr",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "PLL_MUL_factor_table",
                "DAT_08002090": "unknown_data_1",
                "DAT_08002094": "unknown_data_2",
                "DAT_08002098": "unknown_data_3"
            },
            "code": "uint32_t calculate_PLL_multiplier_08002008(void)\n{\n  uint32_t PLL_multiplier;\n  uint32_t RCC_CFGR = *(uint32_t *)(0x40021000 + 0x04);\n  uint8_t prediv_factor_table[2] = {1, 2};\n  uint8_t PLL_MUL_factor_table[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20};\n  uint8_t prediv_index = 0;\n  uint8_t PLL_MUL_index = 0;\n\n  for (int i = 0; i < 16; i += 2) {\n    PLL_MUL_factor_table[i] = *(uint32_t *)(0x0800208c + i);\n    PLL_MUL_factor_table[i + 1] = *(uint32_t *)(0x0800208c + i + 4);\n  }\n\n  if ((RCC_CFGR & 0xc) == 8) {\n    prediv_index = __builtin_clz(0x3c00);\n    PLL_MUL_index = (RCC_CFGR & 0x3c0000) >> (31 - prediv_index);\n    if ((int)(RCC_CFGR << 0xf) < 0) {\n      prediv_index = __builtin_clz(0x4000);\n      PLL_multiplier = (DAT_08002094 / prediv_factor_table[(RCC_CFGR & 0x20000) >> (31 - prediv_index)]);\n    }\n    PLL_multiplier *= PLL_MUL_factor_table[PLL_MUL_index];\n  }\n  else {\n    PLL_multiplier = DAT_08002094;\n  }\n  return PLL_multiplier;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_PLL_multiplier_08002008"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_if_overlap_or_touching_080008fc",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "xor",
                "bVar2": "overlap_or_touching",
                "bVar3": "is_second_rectangle_on_left_or_above_first",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_if_overlap_or_touching_080008fc(uint x1, uint y1, uint x2, uint y2)\n{\n  bool overlap_or_touching = false;\n  bool x1y1_zero = (x1 | y1) == 0;\n  bool x2y2_zero = (x2 | y2) == 0;\n  bool x1_eq_x2 = x1 == x2;\n  bool y1_eq_y2 = y1 == y2;\n  if (((int)(y1 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) && ((((int)(y1 << 1) >> 0x15 == -1 && !x1y1_zero) || ((int)(y2 << 1) >> 0x15 == -1 && !x2y2_zero)))) {\n    return 1;\n  }\n  if (!x1y1_zero && !x2y2_zero) {\n    if (x1_eq_x2 && y1_eq_y2) {\n      overlap_or_touching = true;\n    }\n    else {\n      uint xor = x1 ^ x2 ^ y1 ^ y2;\n      if (xor == 0) {\n        overlap_or_touching = true;\n      }\n      else if (xor > 0) {\n        if (x1_eq_x2 && y2 <= y1) {\n          overlap_or_touching = true;\n        }\n        else if (y1_eq_y2 && x2 <= x1) {\n          overlap_or_touching = true;\n        }\n      }\n      else {\n        if (x1_eq_x2 && y1 <= y2) {\n          overlap_or_touching = true;\n        }\n        else if (y1_eq_y2 && x1 <= x2) {\n          overlap_or_touching = true;\n        }\n      }\n    }\n  }\n  return overlap_or_touching;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [],
            "imported": false,
            "current_name": "check_if_overlap_or_touching_080008fc"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_uwTick_0800114c",
                "PTR_uwTick_08001158": "tick_ptr"
            },
            "code": "void increment_uwTick_0800114c(void)\n{\n  int* PTR_uwTick_08001158 = (int*)PTR_uwTick_08001158;\n  *PTR_uwTick_08001158 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "main",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_uwTick_0800114c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "calculate_APB_prescaler_08002250",
                "uVar1": "leading_zeroes_count",
                "PTR_SystemCoreClock_0800227c": "system_core_clock",
                "PTR_APBPrescTable_08002278": "apb_prescaler_table",
                "DAT_08002274": "apb_prescaler_register"
            },
            "code": "uint32_t calculate_APB_prescaler_08002250(void)\n{\n  uint32_t leading_zeroes_count = count_leading_zeroes(0x1c0000);\n  uint32_t PTR_SystemCoreClock_0800227c = *(uint32_t *)PTR_SystemCoreClock_0800227c;\n  uint32_t apb_prescaler_index = (*(uint32_t *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes_count & 0xff);\n  return PTR_SystemCoreClock_0800227c >> PTR_APBPrescTable_08002278[apb_prescaler_index];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "calculate_APB_prescaler_08002250"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_interrupt_priority_080011fc",
                "IRQn": "interrupt_number",
                "DAT_08001210": "interrupt_register_base_address"
            },
            "code": "void set_interrupt_priority_080011fc(IRQn_Type interrupt_number) {\n    int* interrupt_register = (int*)(DAT_08001210 + ((uint)(int)interrupt_number >> 5) * 4);\n    int interrupt_bit = 1 << ((int)interrupt_number & 0x1fU);\n    *interrupt_register = interrupt_bit;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_080011fc"
        },
        "FUN_08003f7c": {
            "renaming": {
                "FUN_08003f7c": "blinkLEDs_08003f7c",
                "iVar1": "numBlinks",
                "toggleLED": "toggleLED",
                "delay_ms": "delay_ms"
            },
            "code": "void blinkLEDs_08003f7c(void)\n{\n  int numBlinks = 3;\n  do {\n    toggleLED(1,0,0);\n    delay_ms(100);\n    toggleLED(0,1,0);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    numBlinks--;\n  } while (numBlinks > 0);\n  toggleLED(1,1,1);\n  return;\n}",
            "called": [
                "delay_ms",
                "toggleLED"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f7c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "blinkLEDs_08003f7c"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "copy_memory_08005646",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dst",
                "iVar2": "remaining_size",
                "puVar3": "src_end"
            },
            "code": "void * copy_memory_08005646(void * destination, const void * source, size_t size)\n{\n  unsigned char * dst = (unsigned char *)destination;\n  const unsigned char * src = (const unsigned char *)source;\n\n  if (dst > src && dst < src + size) {\n    dst += size;\n    src += size;\n    while (size--) {\n      *(--dst) = *(--src);\n    }\n  } else {\n    while (size--) {\n      *(dst++) = *(src++);\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "calculate_result_08000990",
                "param_1": "input_value"
            },
            "code": "undefined4 calculate_result_08000990(undefined4 input_value)\n{\n  __nedf2();\n  return input_value;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "calculate_result_08000990"
        },
        "FUN_08004ee6": {
            "renaming": {
                "FUN_08004ee6": "wait_forever_08004ee6"
            },
            "code": "void wait_forever_08004ee6(void)\n{\n  while(true)\n  {\n    //Do nothing block with infinite loop\n  }\n}",
            "called": [
                "HardFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee6",
            "calling": [
                "HardFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004ee6"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "send_altitude_frame_08004434",
                "in_r1": "altitude",
                "local_10": "altitude_long",
                "local_c": "altitude_short"
            },
            "code": "void send_altitude_frame_08004434(uint altitude)\n{\n  uint16_t altitude_short = altitude & 0x0000FFFF;\n  uint32_t altitude_long = (uint32_t)altitude_short << 16;\n  altitude_long |= *(uint32_t *)PTR_msp_txf_altitude_08004454;\n  MSP_SendFrame('m', (uint8_t *)&altitude_long, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_altitude_frame_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "delay_ms",
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08004ee4": {
            "renaming": {
                "FUN_08004ee4": "do_nothing_08004ee4"
            },
            "code": "\nvoid do_nothing_08004ee4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee4",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ee4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "waitForInput_08004ee8"
            },
            "code": "void waitForInput_08004ee8(void) {\n  while (true) {\n    // Do nothing, just wait for input\n  }\n}",
            "called": [
                "MemManage_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [
                "MemManage_Handler"
            ],
            "imported": false,
            "current_name": "waitForInput_08004ee8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "print_formatted_string_08004ffc",
                "__s": "string_buffer",
                "__format": "format_string",
                "local_78": "args",
                "local_70": "max_field_width",
                "local_64": "max_total_length",
                "local_6c": "max_string_length",
                "local_6a": "max_integer_length",
                "local_68": "current_position",
                "pcStack_c": "format_string_position",
                "uStack_8": "arg1",
                "uStack_4": "arg2",
                "iVar1": "num_chars_printed"
            },
            "code": "int print_formatted_string_08004ffc(char *string_buffer, char *format_string, ...)\n{\n  int num_chars_printed;\n  char *args[2];\n  int max_field_width = 0x208;\n  int max_string_length = 0x7fffffff;\n  int max_total_length = 0x7fffffff;\n  int max_integer_length = 0xffff;\n  args[0] = string_buffer;\n  char *current_position = string_buffer;\n  char *format_string_position = format_string;\n  int arg1 = (int)__builtin_va_arg(args, void *);\n  int arg2 = (int)__builtin_va_arg(args, void *);\n  num_chars_printed = _svfiprintf_r(*(int *)PTR__impure_ptr_08005040, args, format_string);\n  *args[0] = '\\0';\n  return num_chars_printed;\n}",
            "called": [
                "_svfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "serialInt"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004ffc"
        },
        "FUN_0800103c": {
            "renaming": {
                "FUN_0800103c": "check_float_equal_0800103c",
                "in_CY": "is_CY_zero",
                "in_ZR": "in_ZR"
            },
            "code": "bool check_float_equal_0800103c(void)\n{\n  bool is_CY_zero = __aeabi_cfcmpeq();\n  bool are_ZR_and_CY_equal = !(bool)is_CY_zero || (bool)in_ZR;\n  return are_ZR_and_CY_equal;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800103c",
            "calling": [],
            "imported": false,
            "current_name": "check_float_equal_0800103c"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_uwTick_value_0800115c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_0800115c(void)\n{\n  uint32_t *PTR_uwTick_08001164 = (uint32_t *)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "micros",
                "HAL_I2C_Mem_Write",
                "HAL_UART_Transmit",
                "HAL_RCC_OscConfig",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "millis",
                "HAL_I2C_Mem_Read",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_0800115c"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "get_uwTick_value_08004f60",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08004f60(void)\n{\n  uint32_t *PTR_uwTick_08001164 = (uint32_t *)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f60"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "read_mpu9250_data_08002d88",
                "puVar3": "src_ptr",
                "puVar4": "data_ptr",
                "puVar5": "calib_ptr",
                "puVar6": "bias_ptr",
                "uVar8": "result",
                "uVar9": "resolution",
                "raw_data": "raw_mag_data",
                "mag_x": "mag_x_axis",
                "mag_y": "mag_y_axis",
                "bVar7": "status"
            },
            "code": "void read_mpu9250_data_08002d88()\n{\n  short mag_x;\n  short mag_y;\n  byte status;\n  uint8_t raw_data [7];\n  raw_data[0] = 0;\n  raw_data[1] = 0;\n  raw_data[2] = 0;\n  raw_data[3] = 0;\n  raw_data[4] = 0;\n  raw_data[5] = 0;\n  raw_data[6] = 0;\n  status = I2C_ReadByte(0x18,2,PTR_s____Src_MPU9250_c_08002e80,0xd7);\n  if ((int)((uint)status << 0x1f) < 0) {\n    I2C_ReadByteArray(0x18,3,raw_data,7,PTR_s____Src_MPU9250_c_08002e80,0xda);\n    if ((int)((uint)raw_data[6] << 0x1c) < 0) {\n      *(short *)(PTR_msp_txf_status_08002e94 + 2) = *(short *)(PTR_msp_txf_status_08002e94 + 2) + 1;\n    }\n    else {\n      mag_x = (raw_data[3] << 8) | raw_data[2];\n      mag_y = (raw_data[5] << 8) | raw_data[4];\n      *(short *)PTR_magRaw_08002e84 = raw_data[0] | (raw_data[1] << 8);\n      *(short *)(PTR_magRaw_08002e84 + 2) = mag_x;\n      *(short *)(PTR_magRaw_08002e84 + 4) = mag_y;\n      float resolution = __floatsisf(*(int *)PTR_mRes_08002e88);\n      float scale = *(float *)PTR_magCalib_08002e98;\n      float bias[3];\n      bias[0] = *(float *)PTR_magBias_08002e9c;\n      bias[1] = *(float *)(PTR_magBias_08002e9c + 4);\n      bias[2] = *(float *)(PTR_magBias_08002e9c + 8);\n      float mag_data[3];\n      mag_data[0] = (mag_x * resolution * scale) - bias[0];\n      mag_data[1] = (mag_y * resolution * scale) - bias[1];\n      mag_data[2] = (__floatsisf(raw_data[6]) * resolution * scale) - bias[2];\n      *(float *)PTR_magData_08002e90 = mag_data[0];\n      *(float *)(PTR_magData_08002e90 + 4) = mag_data[1];\n      *(float *)(PTR_magData_08002e90 + 8) = mag_data[2];\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_ReadByte",
                "__floatsisf",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_mpu9250_data_08002d88"
        },
        "FUN_08004f64": {
            "renaming": {
                "FUN_08004f64": "do_nothing_08004f64"
            },
            "code": "\nvoid do_nothing_08004f64(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "MS5611_Init",
                "I2C_WriteByte",
                "_Error_Handler",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f64"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_acceleration_data_08002b48",
                "puVar1": "accel_raw_ptr",
                "uVar2": "float_conversion_var",
                "in_r3": "stack_var_2",
                "raw_data": "raw_data",
                "PTR_s____Src_MPU9250_c_08002be4": "i2c_config_ptr",
                "PTR_accelRaw_08002be8": "accel_raw_ptr",
                "PTR_accelData_08002bec": "accel_data_ptr"
            },
            "code": "/**\n * Reads acceleration data from MPU9250 sensor and stores it in a more readable format.\n */\nvoid read_acceleration_data_08002b48(void)\n{\n  uint16_t x_axis_raw, y_axis_raw, z_axis_raw;\n  float x_axis_g, y_axis_g, z_axis_g;\n  uint32_t i2c_read_status;\n  uint32_t stack_var_1 = stack_var_2 & 0xffff0000;\n  uint8_t raw_data[6];\n  raw_data[0] = 0;\n  i2c_read_status = I2C_ReadByteArray(0xd0, 0x3b, raw_data, 6, PTR_s____Src_MPU9250_c_08002be4, 0x58);\n  x_axis_raw = (raw_data[0] << 8) | raw_data[1];\n  y_axis_raw = (raw_data[2] << 8) | raw_data[3];\n  z_axis_raw = (raw_data[4] << 8) | raw_data[5];\n  x_axis_g = x_axis_raw * 0.0000610352f;\n  y_axis_g = y_axis_raw * 0.0000610352f;\n  z_axis_g = z_axis_raw * 0.0000610352f;\n  *(float *)PTR_accelData_08002bec = x_axis_g;\n  *(float *)(PTR_accelData_08002bec + 4) = y_axis_g;\n  *(float *)(PTR_accelData_08002bec + 8) = z_axis_g;\n}\n",
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_acceleration_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08004f68(void)\n{\n  int index;\n  undefined4 *completed_ptr;\n  code *jump_table;\n  for (index = 0; PTR_gyroBias_08004fa0 + index < PTR_completed_8672_08004fa4; index = index + 4) {\n    *(undefined4 *)(PTR_gyroBias_08004fa0 + index) = *(undefined4 *)(PTR__sidata_08004f9c + index);\n  }\n  for (completed_ptr = (undefined4 *)PTR_completed_8672_08004fa8; completed_ptr < PTR__ebss_08004fac; completed_ptr = completed_ptr + 1) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8004f9a;\n  main();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "main",
                "SystemInit",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_priority_group_08001170",
                "PriorityGroup": "priority_group",
                "*(uint *)(DAT_08001190 + 0xc)": "priority_register",
                "uint": "uint32_t",
                "0xc": "priority_offset",
                "0xf8ff": "priority_mask",
                "0x5fa0000": "priority_value_mask",
                "& 7": "priority_value_bitwise_and",
                "<< 8": "priority_value_bitshift_left"
            },
            "code": "void set_priority_group_08001170(uint32_t priority_group)\n{\n    uint32_t* *(uint *)(DAT_08001190 + 0xc) = (uint32_t*)(DAT_08001190 + 0xc);\n    uint32_t priority_mask = 0xf8ff;\n    uint32_t priority_value = (priority_group & 7) << 8;\n    **(uint *)(DAT_08001190 + 0xc) = (**(uint *)(DAT_08001190 + 0xc) & priority_mask) | 0x5fa0000 | priority_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_priority_group_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "readGyroData_08002bf0",
                "raw_data": "raw_data",
                "puVar1": "gyro_raw_ptr",
                "puVar2": "gyro_data_ptr",
                "uVar3": "float_temp",
                "PTR_s____Src_MPU9250_c_08002c9c": "gyro_src",
                "PTR_gyroRaw_08002ca0": "gyro_raw",
                "PTR_gyroBias_08002ca4": "gyro_bias",
                "DAT_08002ca8": "gyro_scale_factor",
                "PTR_gyroData_08002cac": "gyro_data"
            },
            "code": "void readGyroData_08002bf0()\n{\n  uint8_t raw_data [6];\n  raw_data[0] = 0;\n  raw_data[1] = 0;\n  I2C_ReadByteArray(0xd0, 0x43, raw_data, 6, PTR_s____Src_MPU9250_c_08002c9c, 0x7b);\n  float x_gyro = (float)(int16_t)(raw_data[0] << 8 | raw_data[1]);\n  float y_gyro = (float)(int16_t)(raw_data[2] << 8 | raw_data[3]);\n  float z_gyro = (float)(int16_t)(raw_data[4] << 8 | raw_data[5]);\n  float PTR_gyroBias_08002ca4_x = gyroBias[0];\n  float PTR_gyroBias_08002ca4_y = gyroBias[1];\n  float PTR_gyroBias_08002ca4_z = gyroBias[2];\n  x_gyro = x_gyro * DAT_08002ca8 * 0.0000610352 - PTR_gyroBias_08002ca4_x;\n  y_gyro = y_gyro * DAT_08002ca8 * 0.0000610352 - PTR_gyroBias_08002ca4_y;\n  z_gyro = z_gyro * DAT_08002ca8 * 0.0000610352 - PTR_gyroBias_08002ca4_z;\n  PTR_gyroData_08002cac[0] = x_gyro;\n  PTR_gyroData_08002cac[1] = y_gyro;\n  PTR_gyroData_08002cac[2] = z_gyro;\n}\n",
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "readGyroData_08002bf0"
        },
        "FUN_08004ef0": {
            "renaming": {
                "FUN_08004ef0": "do_nothing_08004ef0"
            },
            "code": "\nvoid do_nothing_08004ef0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "read_MPU9250_data_08002ad0",
                "PTR_s____Src_MPU9250_c_08002b44": "mpu9250_data"
            },
            "code": "void read_MPU9250_data_08002ad0(void)\n{\n  I2C_ReadByte(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  I2C_WriteByte(0xd0,0x6b,0x80,1);\n  I2C_WriteByte(0xd0,0x6b,1,1);\n  I2C_WriteByte(0xd0,0x6c,0,1);\n  I2C_WriteByte(0xd0,0x19,0,1);\n  I2C_WriteByte(0xd0,0x1d,3,1);\n  I2C_WriteByte(0xd0,0x1a,3,1);\n  I2C_WriteByte(0xd0,0x1b,16,1);\n  I2C_WriteByte(0xd0,0x1c,8,1);\n  return;\n}",
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_MPU9250_data_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "is_not_greater_than_or_equal_to_zero_08001050",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_not_greater_than_or_equal_to_zero_08001050(void)\n{\n  bool is_CY_zero = false;\n  bool is_ZR_zero = false;\n  __aeabi_cfrcmple(&is_CY_zero, &is_ZR_zero);\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "AHRS_GetYaw"
            ],
            "imported": false,
            "current_name": "is_not_greater_than_or_equal_to_zero_08001050"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "increment_system_tick_08004ef4"
            },
            "code": "void increment_system_tick_08004ef4(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [],
            "imported": false,
            "current_name": "increment_system_tick_08004ef4"
        },
        "FUN_08004ef2": {
            "renaming": {
                "FUN_08004ef2": "do_nothing_08004ef2"
            },
            "code": "\nvoid do_nothing_08004ef2(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef2"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_imu_data_and_send_080043bc",
                "puVar3": "imu_data_ptr",
                "puVar4": "msp_txf_raw_imu_ptr",
                "uVar1": "imu_data_high_word",
                "uVar2": "imu_data_low_word",
                "local_24": "imu_data",
                "local_1c": "unused_variable"
            },
            "code": "void copy_imu_data_and_send_080043bc()\n{\n  uint16_t imu_data[6];\n  uint32_t *msp_txf_raw_imu_ptr = (uint32_t *)PTR_msp_txf_raw_imu_080043ec;\n  for(int i = 0; i < 6; i++)\n  {\n    imu_data[i] = (uint16_t)msp_txf_raw_imu_ptr[i];\n  }\n  MSP_SendFrame('f', (uint8_t *)imu_data, 0x12);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_imu_data_and_send_080043bc"
        },
        "FUN_08004f5c": {
            "renaming": {
                "FUN_08004f5c": "get_uwTick_value_08004f5c",
                "PTR_uwTick_08001164": "PTR_uwTick_08001164"
            },
            "code": "uint32_t get_uwTick_value_08004f5c(void)\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f5c",
            "calling": [
                "MS5611_Update",
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f5c"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input",
                "uVar1": "leading_zeroes_count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount_adjusted",
                "iVar4": "leading_zeroes_count",
                "uVar5": "shift_amount",
                "uVar6": "sign_bit",
                "in_r12": "shift_amount_complement",
                "bVar7": "is_shift_amount_adjusted_negative",
                "bVar8": "is_shift_amount_adjusted_zero",
                "bVar9": "is_shift_amount_negative"
            },
            "code": "ulonglong calculate_shifted_value_08000404(uint input)\n{\n  uint abs_input = input;\n  uint sign_bit = input & 0x80000000;\n  if (input == 0) {\n    return 0;\n  }\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  uint leading_zeroes_count = count_leading_zeroes(abs_input);\n  uint shift_amount = leading_zeroes_count + 0x15;\n  bool is_shift_amount_negative = SBORROW4(shift_amount,0x20);\n  uint shift_amount_adjusted = leading_zeroes_count - 0xb;\n  bool is_shift_amount_adjusted_negative = (int)shift_amount_adjusted < 0;\n  bool is_shift_amount_adjusted_zero = shift_amount_adjusted == 0;\n  if ((int)shift_amount < 0x20) {\n    is_shift_amount_negative = SCARRY4(shift_amount_adjusted,0xc);\n    leading_zeroes_count++;\n    is_shift_amount_adjusted_negative = leading_zeroes_count < 0;\n    is_shift_amount_adjusted_zero = leading_zeroes_count == 0;\n    shift_amount_adjusted = shift_amount;\n    if (!is_shift_amount_adjusted_zero && is_shift_amount_adjusted_negative == is_shift_amount_negative) {\n      return abs_input << (shift_amount & 0xff) | (ulonglong)sign_bit;\n    }\n  }\n  uint shift_amount_complement = 0x20 - shift_amount_adjusted;\n  uint shifted_value = abs_input << (shift_amount_adjusted & 0xff);\n  if (is_shift_amount_adjusted_zero || is_shift_amount_adjusted_negative != is_shift_amount_negative) {\n    shifted_value |= 0U >> (shift_amount_complement & 0xff);\n  }\n  ulonglong result = 0;\n  if (is_shift_amount_adjusted_zero || is_shift_amount_adjusted_negative != is_shift_amount_negative) {\n    result |= 0 << (shift_amount_adjusted & 0xff);\n  }\n  if ((int)shift_amount < 0x433) {\n    result |= (ulonglong)(shifted_value + (0x432 - shift_amount) * 0x100000 | sign_bit);\n  }\n  else {\n    uint shift_amount_complement_negated = ~(0x432 - shift_amount);\n    if (0x1e < (int)shift_amount_complement_negated) {\n      result |= (ulonglong)(input >> (shift_amount_complement_negated - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    else {\n      int shift_amount_complement_adjusted = shift_amount_complement_negated - 0x13;\n      if (shift_amount_complement_adjusted == 0 || shift_amount_complement_adjusted < 0 != SCARRY4(shift_amount_complement_negated - 0x1f,0xc)) {\n        shift_amount_complement_negated++;\n        result |= (ulonglong)(sign_bit | shifted_value >> (shift_amount_complement_negated & 0xff));\n        result |= (ulonglong)(abs_input >> (shift_amount_complement_negated & 0xff) | shifted_value << (0x20 - shift_amount_complement_negated & 0xff));\n      }\n      else {\n        result |= (ulonglong)(input >> (0x20 - (0xcU - shift_amount_complement_adjusted) & 0xff) | shifted_value << (0xcU - shift_amount_complement_adjusted & 0xff)) & 0x80000000ffffffff;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000404"
        },
        "FUN_08004eec": {
            "renaming": {
                "FUN_08004eec": "run_infinite_loop_08004eec"
            },
            "code": "void run_infinite_loop_08004eec(void)\n{\n  while(true)\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "UsageFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eec",
            "calling": [
                "UsageFault_Handler"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_08004eec"
        },
        "FUN_08004eea": {
            "renaming": {
                "FUN_08004eea": "waitForEvent_08004eea"
            },
            "code": "void waitForEvent_08004eea(void)\n{\n  while(true) {\n    // Do nothing until an event occurs\n  }\n}",
            "called": [
                "BusFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eea",
            "calling": [
                "BusFault_Handler"
            ],
            "imported": false,
            "current_name": "waitForEvent_08004eea"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "improvedFunction_08006070",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "divisionResult",
                "extraout_r1": "extraOut1",
                "extraout_r1_00": "divisionExtraOut",
                "unaff_r4": "unusedVar",
                "iVar2": "atanResult",
                "uVar3": "bitwiseShiftResult",
                "uVar4": "param2Masked",
                "iVar5": "differenceShifted",
                "uVar6": "param4Masked",
                "uVar7": "specialValue",
                "uVar8": "subResult",
                "result": "returnResult",
                "atanResult": "atanResult",
                "divisionResult": "divisionResult",
                "divisionExtraOut": "divisionExtraOut",
                "fabsResult": "fabsResult",
                "subResult1": "subResult1",
                "subResult2": "subResult2"
            },
            "code": "undefined8 improvedFunction_08006070(uint param1, uint param2, uint param3, uint param4, double param5) {\n  uint uVar3;\n  uint uVar4;\n  uint uVar6;\n  int iVar2;\n  int iVar5;\n  double result;\n  double atanResult;\n  uint uVar7;\n  uint uVar8;\n  \n  uVar7 = CONCAT44(DAT_08006204,DAT_08006200);\n  uVar6 = param4 & 0x7fffffff;\n  if ((DAT_08006220 < (uVar6 | (-param3 | param3) >> 0x1f)) ||\n     (uVar4 = param2 & 0x7fffffff, DAT_08006220 < (uVar4 | (-param1 | param1) >> 0x1f))) {\n    result = __aeabi_dadd(param1,param2);\n    return result;\n  }\n  if ((param4 + 0xc0100000 | param3) == 0) {\n    atanResult = atan(param5);\n    result = CONCAT44(extraout_r1,param1);\n    return result;\n  }\n  uVar3 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n  if ((param1 | uVar4) == 0) {\n    if (uVar3 == 2) {\n      result = CONCAT44(DAT_080061fc,DAT_080061f8);\n      return result;\n    }\n    if (uVar3 != 3) {\n      result = CONCAT44(param2,param1);\n      return result;\n    }\n  }\n  else {\n    if ((param3 | uVar6) != 0) {\n      if (uVar6 == DAT_08006220) {\n        if (uVar4 == uVar6) {\n          if (uVar3 == 2) {\n            result = CONCAT44(DAT_080061ec,DAT_080061e8);\n            return result;\n          }\n          if (uVar3 == 3) {\n            result = CONCAT44(DAT_080061f4,DAT_080061f0);\n            return result;\n          }\n          if (uVar3 != 1) {\n            result = CONCAT44(DAT_0800621c,DAT_08006218);\n            return result;\n          }\n          result = CONCAT44(DAT_080061e4,DAT_080061e0);\n          return result;\n        }\n        if (uVar3 == 2) {\n          result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          return result;\n        }\n        if (uVar3 == 3) {\n          result = uVar7;\n          return result;\n        }\n        if (uVar3 == 1) {\n          result = 0x8000000000000000;\n          return result;\n        }\n        result = 0;\n        return result;\n      }\n      if (uVar4 != DAT_08006220) {\n        iVar5 = (int)(uVar4 - uVar6) >> 0x14;\n        double divisionResult;\n        int divisionExtraOut;\n        double fabsResult;\n        \n        if (iVar5 < 0x3d) {\n          if (((int)param4 < 0) && (iVar5 + 0x3c < 0 != SCARRY4(iVar5,0x3c))) {\n            divisionResult = 0;\n            divisionExtraOut = 0;\n          }\n          else {\n            divisionResult = __divdf3(param1,param2);\n            fabsResult = fabs((double)CONCAT44(unaff_r4,param4));\n            atanResult = atan((double)CONCAT44(unaff_r4,param4));\n            divisionExtraOut = extraout_r1_00;\n          }\n        }\n        if (uVar3 != 1) {\n          double subResult1;\n          double subResult2;\n          \n          if (uVar3 == 2) {\n            subResult1 = __subdf3(divisionResult,divisionExtraOut,DAT_08006208,DAT_0800620c);\n            result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (uVar3 == 0) {\n              result = CONCAT44(divisionExtraOut,divisionResult);\n              return result;\n            }\n            subResult1 = __subdf3(divisionResult,divisionExtraOut,DAT_08006208,DAT_0800620c);\n            result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          subResult2 = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)subResult1,\n                           (int)((ulonglong)subResult1 >> 0x20));\n          return subResult2;\n        }\n        result = CONCAT44(divisionExtraOut + -0x80000000,divisionResult);\n        return result;\n      }\n    }\n    result = CONCAT44(DAT_08006214,DAT_08006210);\n    if ((int)param2 < 0) {\n      result = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result;\n}",
            "called": [
                "fabs",
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "atan"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "improvedFunction_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "printSerialData_08004cac",
                "val": "value",
                "data": "dataBuffer",
                "PTR_tx_buffer_08004cc4": "txBufferPointer",
                "PTR_DAT_08004cc8": "dataPointer"
            },
            "code": "void printSerialData_08004cac(int value)\n{\n  undefined *dataBuffer;\n  dataBuffer = PTR_tx_buffer_08004cc4;\n  siprintf(PTR_tx_buffer_08004cc4,PTR_DAT_08004cc8,value);\n  serialPrint(dataBuffer);\n  return;\n}",
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "printSerialData_08004cac"
        },
        "FUN_08004eee": {
            "renaming": {
                "FUN_08004eee": "do_nothing_08004eee"
            },
            "code": "\nvoid do_nothing_08004eee(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eee",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004eee"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "transmit_data_08004c18",
                "ch": "data",
                "pData": "buffer_pointer",
                "PTR_tx_buffer_08004c28": "tx_buffer_pointer",
                "HAL_UART_Transmit": "HAL_UART_Transmit",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "PTR_huart1_08004c2c": "huart1_pointer"
            },
            "code": "void transmit_data_08004c18(uchar data) {\n  undefined *buffer_pointer;\n  buffer_pointer = PTR_tx_buffer_08004c28;\n  *PTR_tx_buffer_08004c28 = data;\n  HAL_UART_Transmit((UART_HandleTypeDef *)PTR_huart1_08004c2c, buffer_pointer, 1, 5);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "_Error_Handler",
                "serialPrint",
                "MSP_SendFrame"
            ],
            "imported": false,
            "current_name": "transmit_data_08004c18"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "print_serial_data_08004c8c",
                "data": "serial_data",
                "sVar1": "data_length",
                "puVar2": "current_byte"
            },
            "code": "void print_serial_data_08004c8c(char *data)\n{\n  size_t data_length = strlen(data);\n  uchar *current_byte;\n  for (current_byte = (uchar *)data; (uint)((int)current_byte - (int)data) < data_length; current_byte++) {\n    serialWrite(*current_byte);\n  }\n  return;\n}",
            "called": [
                "strlen",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "_Error_Handler",
                "MSP_SendFrame",
                "serialInt"
            ],
            "imported": false,
            "current_name": "print_serial_data_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_i2c_status_08001460",
                "*hi2c": "*i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "uVar3": "status_reg",
                "pIVar4": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08001460(I2C_HandleTypeDef *i2c_handle,uint32_t flag,uint32_t timeout)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  uint32_t status_reg;\n  I2C_TypeDef *i2c_instance;\n  start_time = HAL_GetTick();\n  do {\n    i2c_instance = i2c_handle->Instance;\n    if ((flag << 8) >> 0x18 == 1) {\n      status_reg = i2c_instance->SR1;\n    }\n    else {\n      status_reg = i2c_instance->SR2;\n    }\n    if ((flag & 0xffff & ~status_reg) == 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x15) < 0) {\n      i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n      i2c_instance->SR1 = i2c_instance->SR1 & 0xfffffbff;\n      i2c_handle->ErrorCode = 4;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n    current_time = HAL_GetTick();\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_time - start_time <= timeout))));\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08001460"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_pwm_value_08003fd0",
                "pwm": "pwm_value",
                "PTR_htim4_08003fd8": "htim4_address"
            },
            "code": "void set_pwm_value_08003fd0(int pwm_value)\n{\n  int* PTR_htim4_08003fd8 = *(int*)PTR_htim4_08003fd8;\n  int pwm_offset = 0x3c;\n  *(int*)(PTR_htim4_08003fd8 + pwm_offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "Motor_StopAll",
                "Motor_SetSpeed"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fd0"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "DAT_08000144": "DAT_global_initialized",
                "PTR__init_0800014c": "PTR_init_function",
                "PTR_object_8677_08000148": "PTR_object"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t *ptr1, uint64_t *ptr2)\n{\n  uint64_t result;\n  if (DAT_08000144 != 0) {\n    ptr1 = PTR__init_0800014c;\n    ptr2 = PTR_object_8677_08000148;\n  }\n  result = ((uint64_t)*ptr2 << 32) | (uint64_t)*ptr1;\n  return result;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "call_with_ticks_08003eb0",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08003ec4": "PTR_noHyperCall_08003ec4"
            },
            "code": "int call_with_ticks_08003eb0(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08003ec4 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "call_with_ticks_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffc8;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = __divdf3((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = __muldf3(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = __muldf3(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = __aeabi_dadd((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = __muldf3(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = __muldf3(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = __muldf3(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    fabs((double)CONCAT44(param_2,in_stack_ffffffc8));\n    uVar10 = __subdf3(0,DAT_08005f98,param_1,extraout_r1);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __muldf3(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = __ieee754_sqrt(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = __aeabi_dadd((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = __aeabi_dadd(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __muldf3(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = __aeabi_dadd(uVar7,uVar6,0,uVar6);\n      uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                        (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = __subdf3(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __aeabi_dadd(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = __subdf3(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "fabs",
                "__ieee754_sqrt",
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "asin"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "calculate_angle_08002ee8",
                "iVar1": "comparison_result",
                "uVar2": "angle_value",
                "fVar3": "calculated_angle"
            },
            "code": "float calculate_angle_08002ee8(void)\n{\n  int comparison_result;\n  undefined4 angle_value;\n  float calculated_angle;\n  angle_value = *(undefined4 *)(PTR_AHRS_Angle_08002f18 + 8);\n  comparison_result = __aeabi_fcmpge(angle_value,DAT_08002f1c);\n  if ((comparison_result != 0) && (comparison_result = __aeabi_fcmplt(angle_value,DAT_08002f20), comparison_result != 0)) {\n    calculated_angle = (float)__addsf3(angle_value,DAT_08002f20);\n    return calculated_angle;\n  }\n  calculated_angle = (float)__aeabi_fsub(angle_value,DAT_08002f24);\n  return calculated_angle;\n}",
            "called": [
                "__aeabi_fcmplt",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fcmpge"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "PID_Update",
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_angle_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "configureSysTickTimer_08001104",
                "TickPriority": "tickPriority",
                "uVar1": "hclkFrequency",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "SysTick_IRQn": "SysTick_IRQn",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTickTimer_08001104(uint32_t tickPriority)\n{\n  uint32_t hclkFrequency;\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  uint32_t tickInterval = hclkFrequency / 1000;\n  HAL_SYSTICK_Config(tickInterval);\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "configureSysTickTimer_08001104"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "initialize_pid_values_08004978",
                "puVar1": "roll_pid",
                "puVar2": "pitch_pid",
                "puVar3": "yaw_pid",
                "puVar4": "alt_pid",
                "uVar5": "val_1",
                "uVar6": "val_2",
                "uVar7": "val_3",
                "uVar8": "val_4"
            },
            "code": "void initialize_pid_values_08004978(void)\n{\n  float *roll_pid = PTR_pid_roll_080049e8;\n  float *pitch_pid = PTR_pid_pitch_080049ec;\n  float *yaw_pid = PTR_pid_yaw_080049f0;\n  float *alt_pid = PTR_pid_altitude_080049f4;\n  \n  *(yaw_pid + 0x4c) = -1;\n  *(roll_pid + 0x4c) = 1;\n  *(pitch_pid + 0x4c) = 1;\n  *(alt_pid + 0x4c) = 1;\n  \n  *(pitch_pid + 0x20) = DAT_080049fc;\n  *(roll_pid + 0x20) = DAT_08004a04;\n  *(yaw_pid + 0x20) = DAT_08004a0c;\n  \n  *(pitch_pid + 4) = DAT_08004a18;\n  *(pitch_pid + 8) = DAT_08004a10;\n  *(pitch_pid + 0xc) = DAT_08004a00;\n  *(pitch_pid + 0x10) = DAT_08004a08;\n  *(pitch_pid + 0x14) = DAT_08004a10;\n  *(pitch_pid + 0x18) = DAT_08004a14;\n  \n  *(roll_pid + 4) = DAT_08004a18;\n  *(roll_pid + 8) = DAT_08004a10;\n  *(roll_pid + 0xc) = DAT_08004a00;\n  *(roll_pid + 0x10) = DAT_08004a08;\n  *(roll_pid + 0x14) = DAT_08004a10;\n  *(roll_pid + 0x18) = DAT_08004a14;\n  \n  *(yaw_pid + 4) = DAT_08004a24;\n  *(yaw_pid + 8) = DAT_08004a28;\n  *(yaw_pid + 0xc) = DAT_08004a00;\n  \n  *(alt_pid + 4) = DAT_08004a2c;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_pid_values_08004978"
        },
        "FUN_08000c60": {
            "renaming": {
                "FUN_08000c60": "calculate_crc_08000c60",
                "param_1": "data",
                "param_2": "polynomial",
                "uVar1": "remainder",
                "uVar2": "quotient",
                "iVar3": "leading_zeroes",
                "uVar4": "shifted_polynomial",
                "iVar5": "constant",
                "uVar6": "shifted_data"
            },
            "code": "uint calculate_crc_08000c60(uint data, uint polynomial) {\n  uint remainder;\n  uint quotient;\n  int leading_zeroes;\n  uint shifted_polynomial;\n  int constant;\n  uint shifted_data;\n  \n  if ((data | polynomial) == 0) {\n    return data;\n  }\n  remainder = data;\n  quotient = polynomial;\n  if (polynomial == 0) {\n    remainder = 0;\n    quotient = data;\n  }\n  constant = 0x5b000000;\n  if (polynomial == 0) {\n    constant = 0x4b000000;\n  }\n  leading_zeroes = count_leading_zeroes(quotient);\n  shifted_polynomial = quotient << (leading_zeroes - 8);\n  constant = constant + (-0x800000 + shifted_polynomial * -0x800000);\n  if (leading_zeroes < 8) {\n    shifted_data = remainder << (leading_zeroes + 0x18 & 0xff);\n    remainder = constant + ((remainder >> (0x20 - (leading_zeroes + 0x18 & 0xff))) - ((int)shifted_data >> 0x1f));\n    if ((quotient | shifted_data << 1) == 0) {\n      remainder = remainder & ~(shifted_data >> 0x1f);\n    }\n    return remainder;\n  }\n  shifted_data = remainder << (leading_zeroes - 8 & 0xff);\n  remainder = constant + (quotient << (leading_zeroes - 8 & 0xff)) + (remainder >> (0x20 - leading_zeroes & 0xff)) + (uint)(0x7fffffff < shifted_data);\n  if (shifted_data == 0x80000000) {\n    remainder = remainder & 0xfffffffe;\n  }\n  return remainder;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_crc_08000c60"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\ndouble FUNC_08006d68(double __x)\n\n{\n  int in_r0;\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint in_r1;\n  undefined4 extraout_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  double in_d0;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar11 = CONCAT44(in_r1,in_r0);\n  uVar8 = in_r1 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (in_r0 != 0)))) {\n      in_d0 = (double)__aeabi_dadd();\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar11 = __divdf3(0,DAT_0800707c,in_r0,extraout_r1);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = __subdf3();\n          uVar10 = __muldf3(in_r0,extraout_r1,0,DAT_08007078);\n          uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n          uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                            (int)((ulonglong)uVar10 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = __subdf3();\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_0800706c);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = __aeabi_dadd();\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar10 = __aeabi_dadd(in_r0,in_r1,DAT_08006ff8,DAT_08006ffc);\n        iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar6 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __muldf3(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_FUNC_08006d68hi_08007080 + iVar1 * 8);\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                        *(undefined4 *)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8),\n                        *(undefined4 *)((int)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8) + 4));\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n  }\n  return in_d0;\n}\n\n",
            "called": [
                "fabs",
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_08004f04": {
            "renaming": {
                "FUN_08004f04": "handle_uart_interrupt_08004f04",
                "PTR_huart1_08004f0c": "uart_handle"
            },
            "code": "void handle_uart_interrupt_08004f04(UART_HandleTypeDef *PTR_huart1_08004f0c)\n{\n  HAL_UART_IRQHandler(PTR_huart1_08004f0c);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f04",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08004f04"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "allocate_memory_080072b8",
                "__delta": "delta",
                "puVar1": "heap_end",
                "pvVar2": "allocated_memory"
            },
            "code": "void * allocate_memory_080072b8(intptr_t delta)\n{\n  undefined *heap_end;\n  void *allocated_memory;\n  \n  heap_end = PTR_heap_end_4116_080072cc;\n  if (*(int *)PTR_heap_end_4116_080072cc == 0) \n  {\n    *(undefined **)PTR_heap_end_4116_080072cc = PTR__ebss_080072d0;\n  }\n  allocated_memory = *(void **)heap_end;\n  *(intptr_t *)heap_end = delta + (int)allocated_memory;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pvVar2": "memory_ptr",
                "PTR_errno_08005838": "errno_ptr",
                "*(undefined4 *)PTR_errno_08005838": "*(undefined4 *)errno_ptr",
                "_sbrk": "_sbrk",
                "(void *)0xffffffff": "(void *)-1"
            },
            "code": "void allocate_memory_0800581c(int *error_code,intptr_t size) {\n  undefined *PTR_errno_08005838;\n  void *memory_ptr;\n  PTR_errno_08005838 = PTR_errno_08005838;\n  *(undefined4 *)PTR_errno_08005838 = 0;\n  memory_ptr = _sbrk(size);\n  if ((memory_ptr == (void *)0xffffffff) && (*(int *)PTR_errno_08005838 != 0)) {\n    *error_code = *(int *)PTR_errno_08005838;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800581c"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "call_software_interrupt_08003eac",
                "a0": "interrupt_number",
                "a1": "a1",
                "a2": "a2"
            },
            "code": "uint32_t call_software_interrupt_08003eac(uint32_t interrupt_number, uint32_t a1, int32_t a2)\n{\n  software_interrupt(interrupt_number);\n  return a1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "call_software_interrupt_08003eac"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_impure_ptr_value_080072ac",
                "PTR__impure_ptr_080072b4": "impure_ptr"
            },
            "code": "get_impure_ptr_value_080072ac() {\n    return *(undefined4 *)PTR__impure_ptr_080072b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_080072ac"
        },
        "FUN_08000ad0": {
            "renaming": {
                "FUN_08000ad0": "FUNC_08000ad0"
            },
            "code": "\nuint FUNC_08000ad0(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000c12:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000ad0"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "read_mpu9250_sensor_data_08002cb0",
                "in_r3": "raw_data",
                "PTR_s____Src_MPU9250_c_08002d80": "mag_data",
                "PTR_magCalib_08002d84": "mag_calibration_data",
                "uVar2": "float_value",
                "rawData": "raw_data_buffer"
            },
            "code": "void read_mpu9250_sensor_data_08002cb0(void) {\n  uint8_t rawData[3];\n  uint16_t raw_data = (uint16_t)in_r3;\n  I2C_WriteByte(0xd0, 0x37, '\"', '\\x01');\n  I2C_WriteByte(0xd0, 0x6a, '\\x01', '\\x01');\n  I2C_ReadByte(0x18, 0, PTR_s____Src_MPU9250_c_08002d80, 0xad);\n  I2C_WriteByte(0x18, 0xb, '\\x01', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\0', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\x0f', '\\x01');\n  I2C_ReadByteArray(0x18, 0x10, rawData, 3, PTR_s____Src_MPU9250_c_08002d80, 0xb6);\n  PTR_magCalib_08002d84.x_axis = (__floatsisf((raw_data & 0xff) - 0x80) - 0x3f800000) * 0x3b800000;\n  PTR_magCalib_08002d84.y_axis = (__floatsisf((raw_data >> 8 & 0xff) - 0x80) - 0x3f800000) * 0x3b800000;\n  PTR_magCalib_08002d84.z_axis = (__floatsisf(rawData[2] - 0x80) - 0x3f800000) * 0x3b800000;\n  I2C_WriteByte(0x18, 10, '\\0', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\x16', '\\x01');\n}\n",
            "called": [
                "I2C_WriteByte",
                "__floatsisf",
                "I2C_ReadByte",
                "__addsf3",
                "__aeabi_fmul",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_mpu9250_sensor_data_08002cb0"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "configure_timer_output_compare_08002324",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "cr2_reg_value",
                "uVar2": "oc_mode_value",
                "uVar3": "oc_polarity_value",
                "pTVar4": "idle_state_timer"
            },
            "code": "void configure_timer_output_compare_08002324(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_compare_config)\n{\n  uint32_t cr2_reg_value;\n  uint32_t oc_mode_value;\n  uint32_t oc_polarity_value;\n  TIM_TypeDef *idle_state_timer;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  cr2_reg_value = timer->CR2;\n  oc_mode_value = output_compare_config->OCMode;\n  oc_polarity_value = output_compare_config->OCPolarity;\n  idle_state_timer = DAT_08002364;\n  if (timer == DAT_08002364) {\n    idle_state_timer = (TIM_TypeDef *)output_compare_config->OCIdleState;\n    cr2_reg_value = cr2_reg_value & 0xffffbfff;\n  }\n  if (timer == DAT_08002364) {\n    cr2_reg_value = cr2_reg_value | (int)idle_state_timer << 6;\n  }\n  timer->CR2 = cr2_reg_value;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | oc_mode_value << 8;\n  timer->CCR4 = output_compare_config->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | oc_polarity_value << 0xc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_output_compare_08002324"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "set_TIM_BreakDeadTime_08002564",
                "*htim": "htim",
                "*sBreakDeadTimeConfig": "config",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef set_TIM_BreakDeadTime_08002564(TIM_HandleTypeDef *htim, TIM_BreakDeadTimeConfigTypeDef *config)\n{\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (htim->Lock != HAL_LOCKED) {\n    htim->State = HAL_TIM_STATE_BUSY;\n    htim->Instance->BDTR = config->OffStateRunMode |\n                            config->OffStateIDLEMode |\n                            config->LockLevel |\n                            config->DeadTime |\n                            config->BreakState |\n                            config->BreakPolarity |\n                            config->AutomaticOutput;\n    htim->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    htim->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_TIM_BreakDeadTime_08002564"
        },
        "FUN_08004fb0": {
            "renaming": {
                "FUN_08004fb0": "wait_forever_08004fb0"
            },
            "code": "void wait_forever_08004fb0(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb0",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004fb0"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Compute",
                "AK8963_ReadData",
                "lowPassFilter",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "add_to_circular_buffer_08003ec8",
                "cb": "buffer",
                "data": "data",
                "size": "size",
                "tail": "tail",
                "buffer": "data"
            },
            "code": "int add_to_circular_buffer_08003ec8(CircularBuffer *buffer, uint8_t data) {\n  buffer->size++;\n  buffer->data[buffer->tail] = data;\n  buffer->tail = (buffer->tail + 1) & 0x7ff;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "add_to_circular_buffer_08003ec8"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_pwm_value_08003fe8",
                "pwm": "pwm_value",
                "PTR_htim3_08003ff0": "htim3"
            },
            "code": "void set_pwm_value_08003fe8(int pwm_value)\n{\n  int* PTR_htim3_08003ff0 = *(int*)PTR_PTR_htim3_08003ff0_08003ff0;\n  int pwm_offset = 0x3c;\n  *(int *)(PTR_htim3_08003ff0 + pwm_offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "Motor_StopAll",
                "Motor_SetSpeed"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "*param_1": "*out_param",
                "param_2": "size",
                "puVar1": "brk_start",
                "uVar2": "brk_result",
                "puVar3": "free_list",
                "iVar4": "result",
                "puVar5": "current_free_block",
                "uVar6": "diff",
                "puVar7": "prev_free_block",
                "uVar8": "adjusted_size"
            },
            "code": "uint allocate_memory_block_08005714(uint *out_param, uint size) {\n  uint adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *out_param = 0xc;\n  }\n  else {\n    __malloc_lock();\n    void *brk_start = PTR___malloc_sbrk_start_080057cc;\n    uint *free_list = *(uint **)PTR___malloc_free_list_080057c8;\n    uint *prev_free_list = *(uint **)PTR___malloc_free_list_080057c8;\n    while (free_list != (uint *)0x0) {\n      uint diff = *free_list - adjusted_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (prev_free_list == free_list) {\n            uint next_free_block = prev_free_list[1];\n            *(uint *)PTR___malloc_free_list_080057c8 = next_free_block;\n          }\n          else {\n            uint next_free_block = free_list[1];\n          }\n          if (prev_free_list != free_list) {\n            prev_free_list[1] = next_free_block;\n            prev_free_list = free_list;\n          }\n        }\n        else {\n          *free_list = diff;\n          *(uint *)((int)free_list + diff) = adjusted_size;\n          prev_free_list = (uint *)((int)free_list + diff);\n        }\n        goto LAB_08005778;\n      }\n      prev_free_list = free_list;\n      free_list = (uint *)free_list[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_080057cc == 0) {\n      uint brk_result = _sbrk_r(out_param);\n      *(void *)brk_start = brk_result;\n    }\n    free_list = (uint *)_sbrk_r(out_param, adjusted_size);\n    if ((free_list != (uint *)0xffffffff) && ((prev_free_list = (uint *)((int)free_list + 3U & 0xfffffffc), free_list == prev_free_list || (_sbrk_r(out_param,(int)prev_free_list - (int)free_list) != -1)))) {\n      *prev_free_list = adjusted_size;\nLAB_08005778:\n      __malloc_unlock(out_param);\n      uint aligned_address = (int)prev_free_list + 0xbU & 0xfffffff8;\n      int diff = aligned_address - (int)(prev_free_list + 1);\n      if (diff != 0) {\n        *(int *)((int)prev_free_list + diff) = -diff;\n        return aligned_address;\n      }\n      return aligned_address;\n    }\n    *out_param = 0xc;\n    __malloc_unlock(out_param);\n  }\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_realloc_r",
                "__ssputs_r",
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "initialize_crypto_08004fb4",
                "param_1": "context",
                "puVar1": "frame_dummy_init_array_entry",
                "iVar2": "num_entries",
                "iVar3": "i"
            },
            "code": "void initialize_crypto_08004fb4(EVP_PKEY_CTX *context){\n  unsigned int *frame_dummy_init_array_entry = PTR___frame_dummy_init_array_entry_08004fec;\n  int num_entries = (int)PTR___frame_dummy_init_array_entry_08004ff0 - (int)PTR___frame_dummy_init_array_entry_08004fec;\n  for (int i = 0; i < num_entries / 4; i++) {\n    context = (EVP_PKEY_CTX *)(**(code **)(frame_dummy_init_array_entry + i * 4))();\n  }\n  _init(context);\n  unsigned int *frame_dummy_init_array_entry_2 = PTR___frame_dummy_init_array_entry_08004ff4;\n  num_entries = (int)PTR___do_global_dtors_aux_fini_array_entry_08004ff8 - (int)PTR___frame_dummy_init_array_entry_08004ff4;\n  for (int i = 0; i < num_entries / 4; i++) {\n    (**(code **)(frame_dummy_init_array_entry_2 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_crypto_08004fb4"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_CY_not_less_than_ZR_080009dc",
                "in_CY": "CY",
                "in_ZR": "ZR"
            },
            "code": "bool is_CY_not_less_than_ZR_080009dc(void)\n{\n  bool CY_is_not_less_than_ZR = false;\n  __aeabi_cdrcmple();\n  CY_is_not_less_than_ZR = !(bool)in_CY || (bool)in_ZR;\n  return CY_is_not_less_than_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [],
            "imported": false,
            "current_name": "is_CY_not_less_than_ZR_080009dc"
        },
        "FUN_08000c70": {
            "renaming": {
                "FUN_08000c70": "calculate_division_remainder_08000c70",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift",
                "uVar5": "sign_bit_mask",
                "iVar6": "shifted_divisor",
                "uVar7": "shifted_dividend",
                "bVar8": "is_positive_dividend"
            },
            "code": "uint calculate_division_remainder_08000c70(uint dividend, uint divisor)\n{\n  uint quotient;\n  uint remainder;\n  int leading_zeroes_count;\n  uint shifted_divisor;\n  uint sign_bit_mask;\n  bool is_positive_dividend;\n  bool is_positive_divisor;\n\n  if ((dividend | divisor) == 0) {\n    return dividend;\n  }\n\n  is_positive_dividend = dividend >> 31 == 0;\n  is_positive_divisor = divisor >> 31 == 0;\n\n  if (!is_positive_dividend) {\n    dividend = -dividend;\n  }\n\n  if (!is_positive_divisor) {\n    divisor = -divisor;\n  }\n\n  quotient = 0;\n  remainder = dividend;\n  sign_bit_mask = is_positive_dividend ? 0 : 0x80000000;\n  shifted_divisor = divisor << 24;\n\n  if (divisor == 0) {\n    return 0;\n  }\n\n  if (divisor == 0x80000000) {\n    if (dividend == 0x80000000) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  leading_zeroes_count = __builtin_clz(divisor);\n\n  while (shifted_divisor != 0) {\n    int shift = leading_zeroes_count + 1;\n    shifted_divisor >>= shift;\n    quotient <<= shift;\n\n    uint shifted_dividend = remainder << shift;\n    uint shifted_quotient = shifted_dividend / shifted_divisor;\n    uint shifted_remainder = shifted_dividend % shifted_divisor;\n\n    quotient |= shifted_quotient;\n    remainder = shifted_remainder;\n  }\n\n  if (!is_positive_dividend && is_positive_divisor) {\n    quotient = -quotient;\n  }\n\n  if (is_positive_dividend && !is_positive_divisor) {\n    quotient = -quotient;\n  }\n\n  return quotient | sign_bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_division_remainder_08000c70"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "initialize_timer_080023d0",
                "htim": "timer_handle",
                "State": "state",
                "Lock": "lock",
                "HAL_TIM_PWM_MspInit": "initialize_timer_pwm",
                "Instance": "instance",
                "Init": "init",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef initialize_timer_080023d0(TIM_HandleTypeDef *timer_handle)\n{\n  if (timer_handle != NULL) {\n    if (timer_handle->state == HAL_TIM_STATE_RESET) {\n      timer_handle->lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer_handle);\n    }\n    timer_handle->state = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer_handle->instance,&timer_handle->init);\n    timer_handle->state = HAL_TIM_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_080023d0"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_08000a30",
                "param_1": "float_bits",
                "param_2": "sign_and_exponent_bits",
                "uVar1": "exponent_and_fraction_bits",
                "uVar2": "shifted_exponent_bits",
                "uVar3": "shifted_denormalized_fraction_bits",
                "in_r12": "denormalized_fraction_bits",
                "bVar4": "is_exponent_and_fraction_bits_zero",
                "bVar5": "is_shifted_exponent_bits_less_than_0x70000000"
            },
            "code": "uint calculate_float_08000a30(uint float_bits, uint sign_and_exponent_bits)\n{\n  uint exponent;\n  uint fraction;\n  uint normalized_fraction;\n  bool is_normalized;\n  bool is_denormalized;\n  \n  exponent = (sign_and_exponent_bits & 0x7F800000) >> 23;\n  fraction = sign_and_exponent_bits & 0x7FFFFF;\n  normalized_fraction = fraction | 0x800000;\n  is_normalized = (sign_and_exponent_bits & 0x7F800000) != 0;\n  is_denormalized = (exponent == 0) && (fraction != 0);\n  \n  if (is_normalized)\n  {\n    if (exponent == 0xFF)\n    {\n      if (fraction != 0)\n      {\n        return 0x7FC00000;\n      }\n      else\n      {\n        return sign_and_exponent_bits;\n      }\n    }\n    else if (exponent == 0)\n    {\n      exponent = 1 - __builtin_clz(normalized_fraction);\n      normalized_fraction <<= exponent;\n      exponent = 0;\n    }\n  }\n  else if (is_denormalized)\n  {\n    exponent = 1 - __builtin_clz(fraction);\n    normalized_fraction <<= exponent;\n  }\n  else\n  {\n    return sign_and_exponent_bits & 0x80000000;\n  }\n  \n  exponent += 127;\n  if (exponent > 0xFF)\n  {\n    return sign_and_exponent_bits & 0x80000000 | 0x7F800000;\n  }\n  else\n  {\n    return sign_and_exponent_bits & 0x80000000 | exponent << 23 | (normalized_fraction & 0x7FFFFF);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "MadgwickQuaternionUpdate",
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "calculate_float_08000a30"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_pwm_value_08003fdc",
                "pwm": "pwm_value",
                "PTR_htim2_08003fe4": "htim2_address"
            },
            "code": "void set_pwm_value_08003fdc(int pwm_value) {\n  int* PTR_htim2_08003fe4 = *(int*)PTR_htim2_08003fe4;\n  int* pwm_address = (int*)(PTR_htim2_08003fe4 + 0x38);\n  *pwm_address = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "Motor_StopAll",
                "Motor_SetSpeed"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_string_080009f0",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009f0(char current_char)\n{\n  __aeabi_cdrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "asin",
                "__ieee754_asin",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_flags_and_values_08004f10",
                "puVar1": "flags_and_values"
            },
            "code": "void set_flags_and_values_08004f10(void)\n{\n  uint *flags_and_values;\n  flags_and_values = DAT_08004f50;\n  *DAT_08004f50 |= 1;\n  flags_and_values[1] &= DAT_08004f54;\n  *flags_and_values &= 0xfef6ffff;\n  *flags_and_values &= 0xfffbffff;\n  flags_and_values[1] &= 0xff80ffff;\n  flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_buffer_08005044",
                "param_1": "error_code",
                "param_2": "buffer_ptr",
                "param_3": "data_ptr",
                "param_4": "data_end_ptr",
                "pvVar1": "new_buffer_ptr",
                "pvVar2": "old_buffer_ptr",
                "__n": "data_size"
            },
            "code": "int resize_buffer_08005044(unsigned int *error_code, void **buffer_ptr, void *data_ptr, void *data_end_ptr)\n{\n  void *new_buffer_ptr;\n  void *old_buffer_ptr;\n  size_t data_size;\n  \n  old_buffer_ptr = buffer_ptr[2];\n  if ((old_buffer_ptr <= data_end_ptr) && ((*(ushort *)(buffer_ptr + 3) & 0x480) != 0)) {\n    data_size = (int)*buffer_ptr - (int)buffer_ptr[4];\n    new_buffer_ptr = (void *)((uint)((int)buffer_ptr[5] * 3) / 2);\n    new_buffer_ptr = (new_buffer_ptr < (void *)((int)data_end_ptr + data_size + 1)) ? (void *)((int)data_end_ptr + data_size + 1) : new_buffer_ptr;\n    if ((int)((uint)*(ushort *)(buffer_ptr + 3) << 0x15) < 0) {\n      new_buffer_ptr = (void *)_malloc_r(error_code, new_buffer_ptr);\n      if (new_buffer_ptr == (void *)0x0) {\n        *error_code = 0xc;\n        *(ushort *)(buffer_ptr + 3) = *(ushort *)(buffer_ptr + 3) | 0x40;\n        return -1;\n      }\n      memcpy(new_buffer_ptr, buffer_ptr[4], data_size);\n      *(ushort *)(buffer_ptr + 3) = *(ushort *)(buffer_ptr + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      new_buffer_ptr = (void *)_realloc_r(error_code, buffer_ptr[4], new_buffer_ptr);\n      if (new_buffer_ptr == (void *)0x0) {\n        _free_r(error_code, buffer_ptr[4]);\n        *error_code = 0xc;\n        *(ushort *)(buffer_ptr + 3) = *(ushort *)(buffer_ptr + 3) | 0x40;\n        return -1;\n      }\n    }\n    buffer_ptr[4] = new_buffer_ptr;\n    *buffer_ptr = (void *)((int)new_buffer_ptr + data_size);\n    buffer_ptr[5] = new_buffer_ptr;\n    buffer_ptr[2] = (void *)((int)new_buffer_ptr - data_size);\n    old_buffer_ptr = data_end_ptr;\n  }\n  if (data_end_ptr <= old_buffer_ptr) {\n    old_buffer_ptr = data_end_ptr;\n  }\n  memmove(*buffer_ptr, data_ptr, (size_t)old_buffer_ptr);\n  buffer_ptr[2] = (void *)((int)buffer_ptr[2] - (int)old_buffer_ptr);\n  *buffer_ptr = (void *)((int)old_buffer_ptr + (int)*buffer_ptr);\n  return 0;\n}",
            "called": [
                "_realloc_r",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "resize_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initializeSensors_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611",
                "PID_Init": "initializePID"
            },
            "code": "void initializeSensors_08004194(void)\n{\n  initializeDevices();\n  initializeSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  initializePID();\n  return;\n}",
            "called": [
                "Devices_Init",
                "MS5611_Init",
                "PID_Init",
                "serialBegin",
                "IMU_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSensors_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "setClockSource_08001240",
                "CLKSource": "source",
                "uVar1": "clockRegisterValue",
                "DAT_08001254": "clockRegister"
            },
            "code": "void setClockSource_08001240(uint32_t source) {\n  uint32_t DAT_08001254Value;\n  if (source == 4) {\n    DAT_08001254Value = *DAT_08001254 | 4;\n  }\n  else {\n    DAT_08001254Value = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = DAT_08001254Value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "setClockSource_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "param_1": "previous_value",
                "param_2": "current_value",
                "iVar1": "new_value"
            },
            "code": "int calculate_value_08005840(int previous_value, int current_value)\n{\n  int new_value;\n  new_value = *(int *)(current_value - 4) - 4;\n  if (previous_value < 0) {\n    new_value = new_value + *(int *)(current_value + new_value);\n  }\n  return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "count_characters_08000150",
                "__s": "string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char"
            },
            "code": "size_t count_characters_08000150(char* string) {\n  char current_char;\n  char* current_position;\n  current_position = string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return (size_t)(current_position + (-1 - (int)string));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "serialPrint"
            ],
            "imported": false,
            "current_name": "count_characters_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "set_LEDs_08003f3c",
                "led_white": "white_LED_pin",
                "led_red": "red_LED_pin",
                "led_blue": "blue_LED_pin",
                "GPIOx": "LED_GPIO",
                "uVar1": "leading_zeroes_count",
                "DAT_08003f78": "LED_GPIO",
                "HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(LED_GPIO, LED_WHITE_PIN, (GPIO_PinState)(leading_zeroes_count >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x4000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIOx, LED_RED_PIN, (GPIO_PinState)(leading_zeroes_count >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x2000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIOx, LED_BLUE_PIN, (GPIO_PinState)(leading_zeroes_count >> 5))"
            },
            "code": "void set_LEDs_08003f3c(int white_LED_pin, int red_LED_pin, int blue_LED_pin)\n{\n  GPIO_TypeDef *GPIOx;\n  uint32_t leading_zeroes_count;\n  \n  GPIOx = DAT_08003f78;\n  leading_zeroes_count = count_leading_zeroes(white_LED_pin);\n  HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5));\n  leading_zeroes_count = count_leading_zeroes(red_LED_pin);\n  HAL_GPIO_WritePin(GPIOx, LED_RED_PIN, (GPIO_PinState)(leading_zeroes_count >> 5));\n  leading_zeroes_count = count_leading_zeroes(blue_LED_pin);\n  HAL_GPIO_WritePin(GPIOx, LED_BLUE_PIN, (GPIO_PinState)(leading_zeroes_count >> 5));\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "PID_Update",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "set_LEDs_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "getSystemCoreClock_08002214",
                "PTR_SystemCoreClock_0800221c": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClock_08002214(void)\n{\n  uint32_t* PTR_SystemCoreClock_0800221c = (uint32_t*)PTR_SystemCoreClock_0800221c;\n  return *PTR_SystemCoreClock_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_08002214"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "start_PWM_timers_08003ff4",
                "htim": "timer_handler",
                "PTR_htim2_08004020": "timer2_handler",
                "PTR_htim3_08004024": "timer3_handler",
                "PTR_htim4_0800401c": "timer4_handler"
            },
            "code": "void start_PWM_timers_08003ff4(void)\n{\n  TIM_HandleTypeDef *PTR_htim2_08004020 = PTR_htim2_08004020;\n  TIM_HandleTypeDef *PTR_htim3_08004024 = PTR_htim3_08004024;\n  TIM_HandleTypeDef *PTR_htim4_0800401c = PTR_htim4_0800401c;\n  HAL_TIM_PWM_Start(PTR_htim2_08004020, 4);\n  HAL_TIM_PWM_Start(PTR_htim3_08004024, 8);\n  HAL_TIM_PWM_Start(PTR_htim4_0800401c, 8);\n  HAL_TIM_PWM_Start(PTR_htim4_0800401c, 0xc);\n  return;\n}\n",
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "start_PWM_timers_08003ff4"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "compare_floats_08001004",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int32_t compare_floats_08001004(float a, float b) {\n  __cmpsf2();\n  return ((int64_t)b << 32) | (uint32_t)a;\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmple"
            ],
            "imported": false,
            "current_name": "compare_floats_08001004"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "enableInterrupts_08001128",
                "DAT_08001148": "PTR_DATA_REG_08001148",
                "FUN_08001128Tick": "enableInterruptsTick",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "HAL_OK": "HAL_StatusTypeDef",
                "HAL_MspInit": "HAL_MspInit"
            },
            "code": "HAL_StatusTypeDef enableInterrupts_08001128(void)\n{\n  *DAT_08001148 |= 0x10;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  enableInterrupts_08001128Tick(0);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "enableInterrupts_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "initialize_clocks_08004514",
                "HVar1": "status",
                "uVar3": "hclk_freq",
                "line": "line_number",
                "FLatency": "latency",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "puVar2": "unused_pointer"
            },
            "code": "void initialize_clocks_08004514(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  int line_number;\n  uint latency = 2;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.HSICalibrationValue = 0x10;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n\n  status = HAL_RCC_OscConfig(&osc_init);\n\n  if (status != HAL_OK) {\n    line_number = 60;\n    _Error_Handler(__FILE__, line_number);\n  }\n\n  clk_init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n\n  status = HAL_RCC_ClockConfig(&clk_init, latency);\n\n  while (status != HAL_OK) {\n    line_number = 73;\n    _Error_Handler(__FILE__, line_number);\n  }\n\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclk_freq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_OscConfig",
                "HAL_NVIC_SetPriority",
                "_Error_Handler",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "flight_controller_08004a84",
                "puVar1": "pitch_pid",
                "puVar2": "roll_pid",
                "puVar3": "yaw_pid",
                "puVar4": "msp_txf_pid",
                "puVar5": "pid_altitude",
                "extraout_s0": "throttle",
                "extraout_s1": "pitch",
                "extraout_s2": "roll",
                "extraout_s3": "yaw",
                "DAT_08004c00": "MAX_PITCH_ANGLE",
                "DAT_08004bfc": "MIN_PITCH_ANGLE",
                "PTR_pid_pitch_08004bf0": "pid_pitch",
                "PTR_pid_roll_08004bf4": "pid_roll",
                "PTR_pid_yaw_08004bf8": "pid_yaw",
                "PTR_pid_altitude_08004c08": "pid_altitude",
                "PTR_joystick_08004c04": "joystick",
                "DAT_08004c10": "PID_SCALE_FACTOR",
                "DAT_08004c0c": "ALTITUDE_CHANGE_RATE"
            },
            "code": "void flight_controller_08004a84()\n{\n  float throttle;\n  float pitch;\n  float roll;\n  float yaw;\n  float altitude;\n  \n  float pitch_pid;\n  float roll_pid;\n  float yaw_pid;\n  float altitude_pid;\n  \n  pitch_pid = PID_Compute(&PTR_pid_pitch_08004bf0);\n  roll_pid = PID_Compute(&PTR_pid_roll_08004bf4);\n  yaw_pid = PID_Compute(&PTR_pid_yaw_08004bf8);\n  altitude_pid = PID_Compute(&PTR_pid_altitude_08004c08);\n  \n  AHRS_GetPitch();\n  AHRS_GetRoll();\n  AHRS_GetYaw();\n  flight_controller_08004a84Altitude();\n  \n  if (pitch_pid > 0 && pitch_pid < DAT_08004c00) {\n    if (roll_pid > 0 && roll_pid < MAX_ROLL_ANGLE) {\n      toggleLED(1,1,1);\n      \n      throttle = PTR_joystick_08004c04[4];\n      pitch = pitch_pid;\n      roll = roll_pid;\n      yaw = yaw_pid;\n      altitude = altitude_pid;\n      \n      if (PTR_joystick_08004c04[1] != 0) {\n        altitude = altitude + DAT_08004c0c;\n      }\n      \n      Motor_DistributeSpeed(throttle, pitch, roll, yaw);\n      \n      msp_txf_pid[0] = (int)(pitch_pid * DAT_08004c10);\n      msp_txf_pid[1] = (int)(roll_pid * DAT_08004c10);\n      msp_txf_pid[2] = (int)(yaw_pid * DAT_08004c10);\n      msp_txf_pid[3] = (int)(altitude_pid * DAT_08004c10);\n      \n      msp_txf_pid[4] = (int)(PTR_joystick_08004c04[0] * DAT_08004c10);\n      msp_txf_pid[5] = (int)(PTR_joystick_08004c04[1] * DAT_08004c10);\n      msp_txf_pid[6] = (int)(PTR_joystick_08004c04[2] * DAT_08004c10);\n      msp_txf_pid[7] = (int)(PTR_joystick_08004c04[3] * DAT_08004c10);\n      \n      msp_txf_pid[8] = (int)(altitude * DAT_08004c10);\n      \n    } else {\n      Motor_StopAll();\n      toggleLED(0,1,0);\n    }\n  } else {\n    Motor_StopAll();\n    toggleLED(0,1,0);\n  }\n}",
            "called": [
                "AHRS_GetPitch",
                "AHRS_GetYaw",
                "__addsf3",
                "__aeabi_fmul",
                "__fixunssfsi",
                "AHRS_GetRoll",
                "toggleLED",
                "Motor_StopAll",
                "PID_Compute",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "PID_UpdateAltitude",
                "Motor_DistributeSpeed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "flight_controller_08004a84"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "copy_memory_080057d0",
                "param_1": "size",
                "param_2": "src",
                "param_3": "dst",
                "param_4": "alignment",
                "pvVar1": "result",
                "pvVar2": "usable_size"
            },
            "code": "void * copy_memory_080057d0(size_t size, void *src, void *dst, size_t alignment) {\n  void *result;\n\n  if (src != NULL) {\n    if (dst == NULL) {\n      free(dst);\n      result = src;\n    }\n    else {\n      size_t usable_size = malloc_usable_size(dst);\n      result = src;\n      if ((usable_size < size) && (result = malloc(size), result != NULL)) {\n        memcpy(result, src, size);\n        free(src);\n      }\n    }\n    return result;\n  }\n  result = malloc(size);\n  return result;\n}",
            "called": [
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "copy_memory_080057d0"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "get_context_address_080072d4",
                "ctx": "context"
            },
            "code": "int get_context_address_080072d4(EVP_PKEY_CTX *context){\n  return (int)context;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "get_context_address_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "PID_Update",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Compute",
                "AK8963_Init",
                "MS5611_Update",
                "__aeabi_frsub",
                "lowPassFilter",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08000160": {
            "renaming": {
                "FUN_08000160": "FUNC_08000160"
            },
            "code": "\nulonglong FUNC_08000160(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000160",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000160"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "calculate_clock_frequency_08002220",
                "uVar1": "leading_zeroes_count",
                "PTR_SystemCoreClock_0800224c": "system_core_clock",
                "PTR_APBPrescTable_08002248": "apb_prescaler",
                "DAT_08002244": "data_08002244"
            },
            "code": "uint32_t calculate_clock_frequency_08002220(void)\n{\n  uint32_t leading_zeroes_count;\n  leading_zeroes_count = count_leading_zeroes(0xe00000);\n  uint32_t PTR_SystemCoreClock_0800224c = *(uint32_t *)PTR_SystemCoreClock_0800224c;\n  uint32_t PTR_APBPrescTable_08002248 = PTR_APBPrescTable_08002248[(*(uint32_t *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes_count & 0xff)];\n  return PTR_SystemCoreClock_0800224c >> PTR_APBPrescTable_08002248;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08002220"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "setBeta_08003314",
                "_beta": "betaValue",
                "PTR_beta_0800331c": "betaPointer",
                "in_r0": "betaValue"
            },
            "code": "void setBeta_08003314(float betaValue) {\n  *(float *)PTR_beta_0800331c = betaValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "setBeta_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "calculate_08005854",
                "__x": "x",
                "PTR___fdlib_version_080058f8": "version",
                "__ieee754_FUN_08005854": "__ieee754_calculate",
                "__unorddf2": "compare_double",
                "in_stack_ffffffb8": "value_1",
                "in_stack_ffffffbc": "value_2",
                "fabs": "absolute_value",
                "__aeabi_dcmpgt": "compare_absolute_values",
                "nan": "not_a_number",
                "PTR_DAT_080058f4": "data_pointer",
                "matherr": "math_error",
                "exception": "math_error_type",
                "stack0xffffffb8": "exception_data",
                "__errno": "error_number"
            },
            "code": "double calculate_08005854(double x)\n{\n  undefined *PTR___fdlib_version_080058f8;\n  int cmp_result;\n  undefined4 *errno_ptr;\n  double result;\n  double fabs_result;\n  int matherr_result;\n  \n  result = (double)__ieee754_calculate_08005854();\n  PTR___fdlib_version_080058f8 = PTR___fdlib_PTR___fdlib_version_080058f8_080058f8;\n  if ((*PTR___fdlib_PTR___fdlib_version_080058f8_080058f8 != -1) &&\n     (cmp_result = __unorddf2(), result = result, cmp_result == 0)) {\n    fabs_result = fabs((double)CONCAT44(in_stack_ffffffbc,in_stack_ffffffb8));\n    cmp_result = __aeabi_dcmpgt();\n    result = result;\n    if ((cmp_result != 0) &&\n       ((nan(PTR_DAT_080058f4), *PTR___fdlib_version_080058f8 == '\\x02' ||\n        (matherr_result = matherr((exception *)&stack0xffffffb8), result = result, matherr_result == 0)))) {\n      errno_ptr = (undefined4 *)__errno();\n      *errno_ptr = 0x21;\n      result = result;\n    }\n  }\n  return result;\n}",
            "called": [
                "fabs",
                "matherr",
                "__errno",
                "__unorddf2",
                "__ieee754_asin",
                "nan",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "MS5611_Update",
                "__ieee754_asin",
                "rint",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "check_if_not_null_08001014",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_not_null_08001014(char input_char){\\n  __aeabi_cfcmpeq();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "check_if_not_null_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_080071c0",
                "__x": "x",
                "__n": "n",
                "in_r1": "shiftCount",
                "extraout_r1": "extraout_shiftCount",
                "in_r2": "exponent",
                "uVar1": "sign",
                "in_d0": "result",
                "dVar3": "result",
                "DAT_08007290": "constant",
                "DAT_08007294": "0x7ff",
                "SCARRY4": "SCARRY4",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "unaff_r6": "unaff_r6"
            },
            "code": "double calculate_080071c0(double x, int n)\n{\n  uint shiftCount;\n  int extraout_shiftCount;\n  int exponent;\n  uint sign;\n  double result;\n  double DAT_08007290 = 1.0 / 4294967296.0;\n  \n  sign = (shiftCount << 1) >> 0x15;\n  if (sign == 0) {\n    if ((shiftCount & DAT_08007294fffff | n) == 0) {\n      return result;\n    }\n    result = (double)__muldf3(n, shiftCount, 0, DAT_08007290);\n    if (exponent < DAT_08007294) {\n      exponent = ((uint)(extraout_shiftCount << 1) >> 0x15) - 0x36 + exponent;\n      if (exponent < 0) {\n        if (exponent + 0x35 < 0 == SCARRY4(exponent, 0x35)) {\n          result = (double)__muldf3();\n          return result;\n        }\n        if (exponent < 0xc351) {\n          copysign((double)CONCAT44(PTR_calculate_080071c0 + 0x4, PTR_calculate_080071c0), (double)CONCAT44(PTR_calculate_080071c0 + 0x8, PTR_calculate_080071c0 + 0xc));\n          result = (double)__muldf3();\n          return result;\n        }\n      }\n      else {\n        if (exponent < DAT_08007294) {\n          return result;\n        }\n        result = (double)__aeabi_dadd(n, shiftCount, n);\n        return result;\n      }\n    }\n    copysign((double)CONCAT44(PTR_calculate_080071c0 + 0x4, PTR_calculate_080071c0), (double)CONCAT44(PTR_calculate_080071c0 + 0x8, PTR_calculate_080071c0 + 0xc));\n    result = (double)__muldf3();\n    return result;\n  }\n}",
            "called": [
                "__aeabi_dadd",
                "__muldf3",
                "copysign"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_byte_in_memory_08005614",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_checked"
            },
            "code": "void * find_byte_in_memory_08005614(void *memory, int byte_to_find, size_t memory_size) {\n  unsigned char *current_byte = (unsigned char *)memory;\n  while (current_byte < (unsigned char *)(memory_size + (int)memory)) {\n    if (*current_byte == (unsigned char)byte_to_find) {\n      return current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "_printf_i",
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "__ieee754_atan2",
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "sqrt",
                "pow",
                "__ieee754_asin",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "calculate_080070a4",
                "__tagb": "input_array",
                "in_d0": "result"
            },
            "code": "double calculate_080070a4(double *__tagb)\n{\n  double result;\n  //calculate_080070a4 result\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_i2c_register_0800407c",
                "device_add": "device_address",
                "register_add": "register_address",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "status",
                "byte": "data"
            },
            "code": "uint8_t read_i2c_register_0800407c(uint16_t device_address, uint16_t register_address, char *file_name, int line_number)\n{\n  HAL_StatusTypeDef status;\n  uint8_t data[1];\n  data[0] = 0;\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040b4, device_address, register_address, 1, data, 1, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(file_name, line_number);\n  }\n  return data[0];\n}",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "AK8963_ReadData",
                "I2C_ReadByteArray"
            ],
            "imported": false,
            "current_name": "read_i2c_register_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nHAL_StatusTypeDef\nFUNC_08001938(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint8_t *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  I2C_TypeDef *pIVar5;\n  uint uVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  \n  if (hi2c->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (pData == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (Size == 0) {\n    return HAL_ERROR;\n  }\n  uVar3 = HAL_GetTick();\n  while (pIVar5 = hi2c->Instance, (~pIVar5->SR2 & 2) == 0) {\n    uVar4 = HAL_GetTick();\n    if (10000 < uVar4 - uVar3) {\n      hi2c->Lock = HAL_UNLOCKED;\n      hi2c->State = HAL_I2C_STATE_READY;\n      return HAL_BUSY;\n    }\n  }\n  if (hi2c->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  uVar6 = pIVar5->CR1;\n  hi2c->Lock = HAL_LOCKED;\n  pIVar5->CR1 = uVar6 & 0xfffff7ff;\n  hi2c->State = HAL_I2C_STATE_BUSY_RX;\n  hi2c->Mode = HAL_I2C_MODE_MEM;\n  hi2c->ErrorCode = 0;\n  HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout);\n  if (HVar2 != HAL_OK) {\n    hi2c->Lock = HAL_UNLOCKED;\n    if (hi2c->ErrorCode == 4) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  pIVar5 = hi2c->Instance;\n  uVar6 = pIVar5->CR1;\n  if (Size == 1) {\n    pIVar5->CR1 = uVar6 & 0xfffffbff;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n    enableIRQinterrupts();\n    HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n    if (HVar2 == HAL_OK) {\n      *pData = (uint8_t)hi2c->Instance->DR;\nLAB_08001ab8:\n      hi2c->State = HAL_I2C_STATE_READY;\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      hi2c->Lock = HAL_UNLOCKED;\n      return HAL_OK;\n    }\nLAB_08001a18:\n    if (hi2c->ErrorCode != 0x20) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  if (Size == 2) {\n    pIVar5->CR1 = uVar6 | 0x800;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    pIVar5->CR1 = uVar6 | 0x400;\n    while (3 < Size) {\n      HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n      if (HVar2 != HAL_OK) goto LAB_08001a18;\n      *pData = (uint8_t)hi2c->Instance->DR;\n      pIVar5 = hi2c->Instance;\n      bVar8 = (int)(pIVar5->SR1 << 0x1d) < 0;\n      if (bVar8) {\n        pIVar5 = (I2C_TypeDef *)pIVar5->DR;\n        puVar7 = pData + 2;\n        Size = Size - 2;\n      }\n      else {\n        puVar7 = pData + 1;\n        Size = Size - 1;\n      }\n      puVar1 = pData + 1;\n      pData = puVar7;\n      if (bVar8) {\n        *puVar1 = (uint8_t)pIVar5;\n      }\n    }\n    if (Size != 2) {\n      uVar3 = HAL_GetTick();\n      do {\n        pIVar5 = hi2c->Instance;\n        do {\n          if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n            pIVar5->CR1 = pIVar5->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            *pData = (uint8_t)hi2c->Instance->DR;\n            uVar3 = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (Timeout == 0xffffffff);\n      } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n      goto LAB_08001afa;\n    }\n  }\n  uVar3 = HAL_GetTick();\n  do {\n    do {\n      if ((int)(hi2c->Instance->SR1 << 0x1d) < 0) {\n        disableIRQinterrupts();\n        pIVar5 = hi2c->Instance;\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        *pData = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[1] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\nLAB_08001afa:\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\nLAB_08001b3a:\n  do {\n    pIVar5 = hi2c->Instance;\n    do {\n      if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        pData[1] = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[2] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "configure_timer_080022d0",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "oc_bits",
                "uVar2": "cr2_bits",
                "uVar3": "oc_mode_bits",
                "TIMx->CCER": "cc1_bits",
                "OC_Config->OCMode": "oc_mode_bits",
                "OC_Config->OCPolarity": "oc_polarity_bits",
                "OC_Config->OCNPolarity": "ocn_polarity_bits",
                "OC_Config->OCIdleState": "oc_idle_state_bits",
                "OC_Config->OCNIdleState": "ocn_idle_state_bits",
                "TIMx == DAT_08002320": "timer == PTR_08002320"
            },
            "code": "void configure_timer_080022d0(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t cc1_bits, cr2_bits, oc_mode_bits, oc_polarity_bits, ocn_polarity_bits, oc_idle_state_bits, ocn_idle_state_bits;\n  \n  cc1_bits = timer->CCER & 0xfffffeff;\n  cr2_bits = timer->CR2;\n  oc_mode_bits = output_config->OCMode;\n  oc_polarity_bits = (output_config->OCPolarity << 8) & 0x00000100;\n  ocn_polarity_bits = (output_config->OCNPolarity << 8) & 0x00000400;\n  oc_idle_state_bits = (output_config->OCIdleState << 4) & 0x00003000;\n  ocn_idle_state_bits = (output_config->OCNIdleState << 4) & 0x0000C000;\n  if (TIMx == DAT_08002320) {\n    oc_polarity_bits &= 0xfffff7ff;\n    ocn_polarity_bits &= 0xfffffbff;\n    cr2_bits &= 0xffffcfff;\n    cr2_bits |= oc_idle_state_bits | ocn_idle_state_bits;\n  }\n  timer->CR2 = cr2_bits;\n  timer->CCMR2 = (timer->CCMR2 & 0xffffff8c) | oc_mode_bits;\n  timer->CCR3 = output_config->Pulse;\n  timer->CCER = (cc1_bits | oc_polarity_bits | ocn_polarity_bits);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "decode_uint32_080010c4",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "return": "decoded_value"
            },
            "code": "uint decode_uint32_080010c4(uint encoded_value) {\n  uint decoded_value;\n\n  if (((encoded_value & 0x80000000) != 0) || (encoded_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n\n  uint shift_amount = 0x1e - ((encoded_value << 1) >> 0x18);\n\n  if (shift_amount >= 0) {\n    decoded_value = (encoded_value << 8 | 0x80000000) >> (shift_amount);\n    return decoded_value;\n  }\n\n  if ((shift_amount == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "decode_uint32_080010c4"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "set_timer_output_compare_0800245c",
                "htim": "timer_handle",
                "sConfig": "output_config",
                "Channel": "channel",
                "extraout_r1": "extra_out_r1",
                "extraout_r1_00": "extra_out_r1_00",
                "extraout_r1_01": "extra_out_r1_01",
                "uVar1": "u_var1",
                "extraout_r1_02": "extra_out_r1_02",
                "iVar2": "i_var2",
                "uVar3": "u_var3",
                "pTVar4": "timer_instance"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_0800245c(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *output_config, uint32_t channel) {\n  int extra_out_r1;\n  int extra_out_r1_00;\n  int extra_out_r1_01;\n  uint32_t u_var1;\n  int extra_out_r1_02;\n  int i_var2;\n  uint32_t u_var3;\n  TIM_TypeDef *timer_instance;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  timer_handle->State = HAL_TIM_STATE_BUSY;\n  timer_handle->Lock = HAL_LOCKED;\n  switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->Instance, output_config);\n      timer_instance = timer_handle->Instance;\n      u_var1 = *(uint32_t *)(extra_out_r1 + 0x10);\n      timer_instance->CCMR1 = timer_instance->CCMR1 | 8;\n      timer_instance->CCMR1 = timer_instance->CCMR1 & 0xfffffffb;\n      u_var3 = timer_instance->CCMR1 | u_var1;\n      break;\n    default:\n      goto switchD_0800247a_caseD_1;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->Instance, output_config);\n      timer_instance = timer_handle->Instance;\n      i_var2 = *(int *)(extra_out_r1_00 + 0x10);\n      timer_instance->CCMR1 = timer_instance->CCMR1 | 0x800;\n      timer_instance->CCMR1 = timer_instance->CCMR1 & 0xfffffbff;\n      u_var3 = timer_instance->CCMR1 | i_var2 << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->Instance, output_config);\n      timer_instance = timer_handle->Instance;\n      u_var1 = *(uint32_t *)(extra_out_r1_01 + 0x10);\n      timer_instance->CCMR2 = timer_instance->CCMR2 | 8;\n      timer_instance->CCMR2 = timer_instance->CCMR2 & 0xfffffffb;\n      u_var3 = timer_instance->CCMR2 | u_var1;\n      goto LAB_080024fa;\n    case 12:\n      TIM_OC4_SetConfig(timer_handle->Instance, output_config);\n      timer_instance = timer_handle->Instance;\n      i_var2 = *(int *)(extra_out_r1_02 + 0x10);\n      timer_instance->CCMR2 = timer_instance->CCMR2 | 0x800;\n      timer_instance->CCMR2 = timer_instance->CCMR2 & 0xfffffbff;\n      u_var3 = timer_instance->CCMR2 | i_var2 << 8;\n      goto LAB_080024fa;\n  }\n  timer_instance->CCMR1 = u_var3;\n  switchD_0800247a_caseD_1:\n  timer_handle->State = HAL_TIM_STATE_READY;\n  timer_handle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_0800245c"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "compare_and_swap_080008f4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "mask1",
                "param_4": "mask2",
                "uVar1": "xor_value",
                "bVar2": "both_masks_negative",
                "bVar3": "value2_is_greater_than_mask2",
                "values_are_zero": "values_are_zero",
                "values_are_equal": "values_are_equal",
                "result": "result"
            },
            "code": "uint compare_and_swap_080008f4(uint value1, uint value2, uint mask1, uint mask2)\n{\n  uint result;\n  bool both_masks_negative = ((int)(value2 << 1) >> 0x15 == -1 || (int)(mask2 << 1) >> 0x15 == -1);\n  bool either_mask_negative = ((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) || ((int)(mask2 << 1) >> 0x15 == -1 && ((mask1 | mask2 << 0xc) != 0));\n  if (both_masks_negative || either_mask_negative) {\n    return 0xffffffff;\n  }\n  bool values_are_zero = (value1 | value2 << 1) == 0 && (mask1 | mask2 << 1) == 0;\n  bool values_are_equal = value2 == mask2 && value1 == mask1;\n  if (!values_are_zero && !values_are_equal) {\n    uint xor_value = value2 ^ mask2;\n    bool xor_value_is_positive = -1 < (int)xor_value;\n    bool value2_is_greater_than_mask2 = xor_value_is_positive && mask2 <= value2;\n    bool value1_is_less_than_mask1 = xor_value_is_positive ? value1 <= mask1 : false;\n    result = (int)mask2 >> 0x1f;\n    if (!value2_is_greater_than_mask2 && !value1_is_less_than_mask1) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_swap_080008f4"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "init_GPIO_speed_mode_08004e14",
                "TIM_HandleTypeDef": "htim",
                "TIM_TypeDef": "TIMx",
                "GPIO_TypeDef": "GPIOx",
                "GPIO_InitTypeDef": "GPIO_InitStruct",
                "pGVar1": "GPIOx",
                "pTVar2": "TIMx",
                "DAT_08004e6c": "GPIOE",
                "DAT_08004e68": "TIM1",
                "(TIM_TypeDef *)0x40000000": "TIM2",
                "DAT_08004e74": "GPIOB",
                "DAT_08004e70": "TIM3",
                "DAT_08004e78": "TIM4"
            },
            "code": "void init_GPIO_speed_mode_08004e14(TIM_HandleTypeDef *htim)\n{\n  GPIO_TypeDef *GPIOx;\n  TIM_TypeDef *TIMx;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  TIMx = htim->Instance;\n  GPIOx = DAT_08004e6c;\n  if (TIMx == DAT_08004e68) {\n    GPIO_InitStruct.Pin = GPIO_PIN_11;\n  }\n  else if (TIMx == TIM2) {\n    GPIO_InitStruct.Pin = GPIO_PIN_1;\n  }\n  else {\n    GPIOx = DAT_08004e74;\n    if (TIMx == DAT_08004e70) {\n      GPIO_InitStruct.Pin = GPIO_PIN_3;\n    }\n    else {\n      if (TIMx != DAT_08004e78) {\n        return;\n      }\n      GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;\n    }\n  }\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n  HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "init_GPIO_speed_mode_08004e14"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initializeSensors_08002ea0",
                "_beta": "beta_value",
                "_deltat": "delta_t"
            },
            "code": "void initializeSensors_08002ea0(void)\n{\n  float beta_value;\n  float delta_t;\n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(beta_value);\n  MadgwickSetDelta(delta_t);\n  return;\n}",
            "called": [
                "MPU9250_Init",
                "AK8963_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeSensors_08002ea0"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_GPIO_Pin_state_08001424",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "Pin_number",
                "PinState": "Pin_state",
                "uVar1": "Pin_mask"
            },
            "code": "void set_GPIO_Pin_state_08001424(GPIO_TypeDef *GPIO_port, uint16_t Pin_number, GPIO_PinState Pin_state)\n{\n  uint32_t Pin_mask;\n  Pin_mask = (uint32_t)Pin_number;\n  if (Pin_state == GPIO_PIN_RESET) {\n    Pin_mask = Pin_mask << 0x10;\n  }\n  GPIO_port->BSRR = Pin_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "Peripherals_Init",
                "_Error_Handler",
                "toggleLED"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_state_08001424"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble FUNC_08005900(double __x,double __y)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 uVar7;\n  double extraout_d0;\n  double extraout_d0_00;\n  double extraout_d0_01;\n  double extraout_d0_02;\n  double extraout_d0_03;\n  double extraout_d0_04;\n  double extraout_d0_05;\n  double extraout_d0_06;\n  double extraout_d0_07;\n  double extraout_d0_08;\n  double extraout_d0_09;\n  double extraout_d0_10;\n  double extraout_d0_11;\n  double extraout_d0_12;\n  double dVar8;\n  undefined8 uVar9;\n  undefined local_50 [24];\n  undefined8 local_38;\n  int local_30;\n  \n  dVar8 = (double)__ieee754_FUNC_08005900();\n  puVar2 = PTR___fdlib_version_08005ba8;\n  cVar1 = *PTR___fdlib_version_08005ba8;\n  if (cVar1 == -1) {\n    return extraout_d0;\n  }\n  local_30 = __unorddf2();\n  if (local_30 != 0) {\n    return extraout_d0_00;\n  }\n  iVar3 = __unorddf2();\n  if (iVar3 != 0) {\n    iVar3 = __aeabi_dcmpeq();\n    if (iVar3 == 0) {\n      return extraout_d0_01;\n    }\n    local_50._0_4_ = 1;\n    local_50._4_4_ = PTR_DAT_08005bac;\n    local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n    if (cVar1 == '\\x02') {\n      return extraout_d0_01;\n    }\n    goto LAB_08005978;\n  }\n  iVar4 = __aeabi_dcmpeq();\n  if (iVar4 == 0) {\n    iVar3 = finite(dVar8);\n    if ((iVar3 == 0) && (iVar4 = finite(dVar8), iVar4 != 0)) {\n      iVar4 = finite(dVar8);\n      if (iVar4 == 0) goto LAB_08005b4c;\n      local_30 = __unorddf2(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20));\n      cVar1 = *puVar2;\n      if (local_30 != 0) {\n        local_50._4_4_ = PTR_DAT_08005bac;\n        local_50._0_4_ = 1;\n        local_30 = iVar3;\n        if (cVar1 == '\\0') goto LAB_08005a22;\n        local_38 = (double)__divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_50._0_4_ = 3;\n      if (cVar1 != '\\0') {\n        local_38._0_4_ = 0;\n        local_38._4_4_ = DAT_08005bc4;\n        iVar3 = __aeabi_dcmplt();\n        if (iVar3 != 0) {\n          uVar9 = __muldf3();\n          uVar7 = (int)uVar9;\n          rint(dVar8);\n          iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1_00);\n          if (iVar3 == 0) {\n            local_38._0_4_ = 0;\n            local_38._4_4_ = DAT_08005bb4;\n          }\n        }\n        goto LAB_08005afa;\n      }\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 != 0) {\n        uVar9 = __muldf3();\n        uVar7 = (int)uVar9;\n        rint(dVar8);\n        iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1);\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_12;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\nLAB_08005b4c:\n      iVar3 = __aeabi_dcmpeq(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20),0,0);\n      if (iVar3 == 0) {\n        return extraout_d0_09;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_10;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_11;\n      }\n      local_50._0_4_ = 4;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x22;\n    dVar8 = extraout_d0_08;\n  }\n  else {\n    local_30 = __aeabi_dcmpeq();\n    if (local_30 == 0) {\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_05;\n      }\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 == 0) {\n        return extraout_d0_06;\n      }\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') {\nLAB_08005a22:\n        local_50._0_4_ = 1;\n        local_38 = 0.0;\n        local_50._4_4_ = PTR_DAT_08005bac;\n        goto LAB_08005978;\n      }\n      local_38 = (double)((ulonglong)DAT_08005bb4 << 0x20);\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n    }\n    else {\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_38 = 0.0;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n        dVar8 = extraout_d0_03;\n        goto LAB_080059d0;\n      }\nLAB_08005978:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_02;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x21;\n    dVar8 = extraout_d0_07;\n  }\n  *puVar6 = uVar7;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)__errno();\n    *piVar5 = local_30;\n    dVar8 = extraout_d0_04;\n  }\n  return dVar8;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "matherr",
                "__errno",
                "__unorddf2",
                "__divdf3",
                "finite",
                "rint",
                "__muldf3",
                "__aeabi_dcmplt",
                "__ieee754_pow"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_circular_buffer_08004c64",
                "PTR_rxc_08004c6c": "rxc_buffer"
            },
            "code": "void initialize_circular_buffer_08004c64(void)\n{\n  CB_Init(&PTR_rxc_08004c6c);\n  return;\n}",
            "called": [
                "CB_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08004c64"
        },
        "FUN_080041e4": {
            "renaming": {
                "FUN_080041e4": "set_motor_pwm_080041e4",
                "m1": "motor1_speed",
                "m2": "motor2_speed",
                "m3": "motor3_speed",
                "m4": "motor4_speed",
                "puVar1": "motor_pwm_pointer",
                "puVar2": "msp_txf_motor_pointer",
                "pwm": "pwm_value"
            },
            "code": "void set_motor_pwm_080041e4(int motor1_speed, int motor2_speed, int motor3_speed, int motor4_speed)\n{\n  uint32_t pwm;\n  if (motor1_speed > 999) {\n    motor1_speed = 1000;\n  }\n  if (motor2_speed > 999) {\n    motor2_speed = 1000;\n  }\n  if (motor3_speed > 999) {\n    motor3_speed = 1000;\n  }\n  if (motor4_speed > 999) {\n    motor4_speed = 1000;\n  }\n  pwm = motor1_speed & ~(motor1_speed >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 8) = motor3_speed & ~(motor3_speed >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 0xc) = motor4_speed & ~(motor4_speed >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 4) = motor2_speed & ~(motor2_speed >> 0x1f);\n  *(uint32_t *)PTR_motor_pwm_08004264 = pwm;\n  Motor1_SetPWM(pwm);\n  Motor2_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 4));\n  Motor3_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 8));\n  Motor4_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 0xc));\n  uint16_t *msp_txf_motor = PTR_msp_txf_motor_08004268;\n  *(msp_txf_motor) = (uint16_t)(*(int *)(PTR_motor_pwm_08004264)) + 1000;\n  *(msp_txf_motor + 1) = (uint16_t)(*(int *)(PTR_motor_pwm_08004264 + 4)) + 1000;\n  *(msp_txf_motor + 2) = (uint16_t)(*(int *)(PTR_motor_pwm_08004264 + 8)) + 1000;\n  *(msp_txf_motor + 3) = (uint16_t)(*(int *)(PTR_motor_pwm_08004264 + 0xc)) + 1000;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor3_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041e4",
            "calling": [
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "set_motor_pwm_080041e4"
        },
        "FUN_080003e4": {
            "renaming": {
                "FUN_080003e4": "calculate_shifted_value_080003e4",
                "param_1": "input",
                "uVar1": "shifted_output_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp",
                "in_r12": "unshift_amount",
                "bVar5": "is_shift_difference_negative",
                "bVar6": "is_shift_difference_zero",
                "bVar7": "is_negative_shift",
                "SBORROW4": "is_subtraction_overflow",
                "SCARRY4": "is_addition_overflow"
            },
            "code": "ulonglong calculate_shifted_value_080003e4(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  bool is_negative_shift = shift_amount < 32;\n  uint shifted_input = is_negative_shift ? input << (shift_amount & 0xff) : 0;\n  if (is_negative_shift)\n  {\n    shifted_input |= input >> ((32 - leading_zeroes - 11) & 0xff);\n  }\n  if (shift_amount < 1075)\n  {\n    return CONCAT44(shifted_input + (1074 - shift_amount) * 0x100000, is_negative_shift ? input << (shift_amount & 0xff) : 0);\n  }\n  uint unshift_amount = ~(1074 - shift_amount);\n  if (unshift_amount > 30)\n  {\n    return (ulonglong)(input >> (unshift_amount - 31));\n  }\n  int shift_difference = unshift_amount - 19;\n  if (shift_difference == 0 || (shift_difference < 0) != SCARRY4(unshift_amount - 31, 12))\n  {\n    unshift_amount++;\n    return CONCAT44(input >> (unshift_amount & 0xff), (is_negative_shift ? input << (32 - unshift_amount & 0xff) : 0) | shifted_input >> (unshift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_input >> (32 - (12 - shift_difference) & 0xff) | input << (12 - shift_difference & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003e4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_shifted_value_080003e4"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "convert_to_binary_08007092",
                "__value": "decimal_value",
                "in_r1": "negative_mask",
                "0x80000000": "negative_mask",
                "0x100000": "positive_mask",
                "0x1f": "31"
            },
            "code": "int convert_to_binary_08007092(int decimal_value) {\n    uint negative_mask = 0x80000000;\n    uint positive_mask = 0x7FFFFFFF;\n    uint sign_bit = (decimal_value & negative_mask) >> 31;\n    return (decimal_value & positive_mask) | (sign_bit); \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "convert_to_binary_08007092"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "updateAHRSData_08002f28",
                "PTR_AHRS_timeNow_08003004": "currentTime",
                "PTR_AHRS_lastUpdate_08003000": "lastUpdate",
                "DAT_08003008": "MICROS_PER_SECOND",
                "PTR_accelData_0800300c": "accelData",
                "PTR_accelRaw_0800301c": "accelRaw",
                "PTR_gyroRaw_08003028": "gyroRaw",
                "PTR_magRaw_0800302c": "magRaw",
                "PTR_msp_txf_raw_imu_08003020": "rawIMU",
                "PTR_msp_txf_attitude_08003024": "txfAttitude"
            },
            "code": "void updateAHRSData_08002f28(void) {\n  float deltaTime;\n  float accelX;\n  float accelY;\n  float accelZ;\n  float gyroX;\n  float gyroY;\n  float gyroZ;\n  float magX;\n  float magY;\n\n  MPU9250_ReadAccelData();\n  MPU9250_ReadGyroData();\n  AK8963_ReadData();\n\n  uint32_t PTR_AHRS_timeNow_08003004 = micros();\n  uint32_t PTR_AHRS_lastUpdate_08003000Time = *(uint32_t *)PTR_AHRS_lastUpdate_08003000;\n  *(uint32_t *)PTR_AHRS_lastUpdate_08003000 = PTR_AHRS_timeNow_08003004;\n\n  uint32_t elapsedTime = PTR_AHRS_timeNow_08003004 - PTR_AHRS_lastUpdate_08003000Time;\n  deltaTime = (float)elapsedTime / 1000000.0f;\n\n  MadgwickSetDelta(deltaTime);\n\n  accelX = *(int *)(PTR_accelData_0800300c + 4) / 100.0f;\n  accelY = *(int *)PTR_accelData_0800300c / 100.0f;\n  accelZ = *(int *)(PTR_accelData_0800300c + 8) / 100.0f;\n  gyroX = *(int *)(PTR_gyroRaw_08003028 + 2) / 100.0f;\n  gyroY = *(int *)(PTR_gyroRaw_08003028 + 4) / 100.0f;\n  gyroZ = *(int *)PTR_gyroRaw_08003028 / 100.0f;\n  magX = *(int *)PTR_magRaw_0800302c;\n  magY = *(int *)(PTR_magRaw_0800302c + 2);\n\n  MadgwickQuaternionUpdate(accelX, accelY, accelZ, gyroX, gyroY, gyroZ, magX, magY);\n\n  *(short *)PTR_msp_txf_raw_imu_08003020 = (short)(*(short *)PTR_accelRaw_0800301c / 100);\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 2) = (short)(*(short *)(PTR_accelRaw_0800301c + 4) / 100);\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 4) = (short)(*(short *)(PTR_gyroRaw_08003028 + 4) / 100);\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 6) = (short)(*(short *)(PTR_gyroRaw_08003028 + 2) / 100);\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 8) = (short)(*(short *)PTR_gyroRaw_08003028 / 100);\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 10) = *(short *)PTR_magRaw_0800302c;\n  *(short *)(PTR_msp_txf_raw_imu_08003020 + 12) = *(short *)(PTR_magRaw_0800302c + 2);\n\n  *(short *)PTR_msp_txf_attitude_08003024 = (short)(AHRS_GetRoll() * 100.0f);\n  *(short *)(PTR_msp_txf_attitude_08003024 + 2) = (short)(AHRS_GetPitch() * 100.0f);\n  *(short *)(PTR_msp_txf_attitude_08003024 + 4) = (short)(AHRS_GetYaw() * 100.0f);\n}",
            "called": [
                "AHRS_GetPitch",
                "MadgwickQuaternionUpdate",
                "MPU9250_ReadAccelData",
                "__floatunsisf",
                "AHRS_GetYaw",
                "AK8963_ReadData",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "AHRS_GetRoll",
                "micros",
                "__aeabi_f2iz",
                "MadgwickSetDelta",
                "MPU9250_ReadGyroData"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "updateAHRSData_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "send_msp_txf_status_08004384",
                "puVar1": "msp_txf_status_ptr",
                "in_r3": "current_frame_id",
                "local_14": "current_status",
                "uStack_10": "unused_variable",
                "local_c": "new_status"
            },
            "code": "void send_msp_txf_status_08004384(void)\n{\n  uint32_t* msp_txf_status_ptr = PTR_msp_txf_status_080043b8;\n  uint32_t current_status = msp_txf_status_ptr[0];\n  uint32_t current_frame_id = msp_txf_status_ptr[1];\n  msp_txf_status_ptr[4] = 7;\n  msp_txf_status_ptr[5] = 0;\n  msp_txf_status_ptr[6] = 0x2a;\n  msp_txf_status_ptr[7] = 0;\n  msp_txf_status_ptr[8] = 0;\n  msp_txf_status_ptr[9] = 0;\n  msp_txf_status_ptr[10] = 0;\n  uint32_t new_status = (current_status & 0xff000000) | ((uint32_t)*(uint16_t*)(msp_txf_status_ptr + 2));\n  MSP_SendFrame('e', (uint8_t*)&current_status, 0xb);\n}\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_txf_status_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "compare_double_equals_zero_080009a0",
                "in_ZR": "result"
            },
            "code": "bool compare_double_equals_zero_080009a0(void)\\n{\\n  char result;\\n  __aeabi_cdcmpeq();\\n  return result != \"\\0\";\\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "compare_double_equals_zero_080009a0"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "initialize_MS5611_sensor_08003298",
                "puVar1": "coefficients_ptr",
                "file": "file_ptr",
                "iVar3": "index",
                "rxbuf": "rx_buffer",
                "PTR_MS5611_Coefficients_0800330c": "coefficients_array",
                "PTR_s____Src_MS5611_c_08003308": "file_array",
                "PTR_MS5611_OSR_08003304": "OSR_ptr",
                "PTR_alt_filter_08003310": "filter_array"
            },
            "code": "void initialize_MS5611_sensor_08003298(void)\n{\n  undefined *coefficients_ptr;\n  undefined *file_ptr;\n  int index = 0;\n  uint8_t rxbuf [2];\n  \n  I2C_WriteByte(0xee,0x1e,0x01,0x01);\n  delay_ms(10);\n  file_ptr = PTR_s____Src_MS5611_c_08003308;\n  coefficients_ptr = PTR_MS5611_Coefficients_0800330c;\n  *PTR_MS5611_OSR_08003304 = 8;\n  \n  do {\n    rxbuf[0] = 0;\n    rxbuf[1] = 0;\n    I2C_ReadByteArray(0xee,index + 0xa0,rxbuf,2,file_ptr,0x7c);\n    *(ushort *)(coefficients_ptr + index) = CONCAT11(rxbuf[0],rxbuf[1]);\n    index += 2;\n  } while (index != 0x10);\n  \n  index = 0;\n  undefined *filter_ptr = PTR_alt_filter_08003310;\n  do {\n    *(undefined4 *)(filter_ptr + index * 4) = 0;\n    index++;\n  } while (index != 0x14);\n  \n  return;\n}",
            "called": [
                "delay_ms",
                "I2C_WriteByte",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_MS5611_sensor_08003298"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "initialize_peripherals_and_LED_sequence_08004028",
                "Peripherals_Init": "initialize_peripherals",
                "PWM_Init": "initialize_PWM",
                "LED_StartupSequence": "start_LED_startup_sequence"
            },
            "code": "void initialize_peripherals_and_LED_sequence_08004028(void)\n{\n  initialize_peripherals();\n  initialize_PWM();\n  start_LED_startup_sequence();\n  return;\n}",
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "LED_StartupSequence"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_and_LED_sequence_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "calculate_0800708c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_0800708c(double input) {\n  double result;\n  // Perform calculation here\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "__ieee754_atan2",
                "asin",
                "__ieee754_asin",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_0800708c"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "setChannelState_08002520",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState",
                "CCER": "ccerMask"
            },
            "code": "void setChannelState_08002520(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState)\n{\n  uint32_t channelBit = channel & 0xff;\n  uint32_t ccerMask = ~(1 << channelBit);\n  timer->CCER &= ccerMask;\n  timer->CCER |= (channelState << channelBit);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "setChannelState_08002520"
        },
        "FUN_08000464": {
            "renaming": {
                "FUN_08000464": "calculate_08000464",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar2": "quotient_low",
                "uVar3": "shift_amount",
                "uVar4": "remainder_high",
                "uVar6": "shift_amount",
                "iVar5": "shift_count",
                "iVar7": "shift_count",
                "uVar8": "quotient_high",
                "bVar1": "temp_byte",
                "bVar9": "carry_flag",
                "bVar10": "sign_flag",
                "bVar11": "overflow_flag"
            },
            "code": "ulonglong calculate_08000464(uint dividend, uint divisor)\n{\n  byte bVar1;\n  uint quotient_high;\n  uint quotient_low;\n  uint shift_amount;\n  int shift_count;\n  uint remainder_high;\n  uint remainder_low;\n  bool carry_flag;\n  bool sign_flag;\n  bool overflow_flag;\n  \n  if ((dividend | divisor) == 0) {\n    return CONCAT44(divisor, dividend);\n  }\n  shift_count = 0x432;\n  remainder_high = divisor >> 0x16;\n  if (remainder_high != 0) {\n    shift_count = 3;\n    if (divisor >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (divisor >> 0x1c != 0) {\n      shift_count += 3;\n    }\n    shift_amount = shift_count - ((int)divisor >> 0x1f);\n    remainder_high = dividend << (0x20 - shift_amount & 0xff);\n    dividend = dividend >> (shift_amount & 0xff) | divisor << (0x20 - shift_amount & 0xff);\n    divisor = divisor >> (shift_amount & 0xff);\n    shift_count = shift_amount + 0x432;\n  }\n  if (0xfffff < divisor) {\n    if (0x1fffff < divisor) {\n      remainder_low = divisor & 1;\n      divisor = divisor >> 1;\n      bVar1 = (byte)dividend;\n      dividend = (uint)(remainder_low != 0) << 0x1f | dividend >> 1;\n      quotient_high = (uint)(bVar1 & 1) << 0x1f | remainder_high >> 1;\n      shift_count += 1;\n      if (0xffbfffff < (uint)(shift_count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000278:\n    sign_flag = 0x7fffffff < remainder_high;\n    if (remainder_high == 0x80000000) {\n      sign_flag = (dividend & 1) != 0;\n    }\n    return CONCAT44(divisor + shift_count * 0x100000 + (uint)CARRY4(dividend,(uint)sign_flag), dividend + sign_flag);\n  }\n  carry_flag = (remainder_high & 0x80000000) != 0;\n  remainder_high = remainder_high << 1;\n  remainder_low = dividend * 2;\n  overflow_flag = CARRY4(dividend,dividend);\n  dividend = dividend * 2 + (uint)carry_flag;\n  divisor = divisor * 2 + (uint)(overflow_flag || CARRY4(remainder_low,(uint)carry_flag));\n  shift_count = shift_count + -1;\n  if ((divisor & 0x100000) != 0) goto LAB_08000278;\n  quotient_low = dividend;\n  quotient_high = divisor;\n  if (divisor == 0) {\n    quotient_low = 0;\n    quotient_high = dividend;\n  }\n  shift_amount = count_leading_zeroes(quotient_high);\n  if (divisor == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  shift_amount = shift_amount - 0xb;\n  overflow_flag = (int)shift_amount < 0;\n  sign_flag = shift_amount == 0;\n  if ((int)shift_amount < 0x20) {\n    overflow_flag = SCARRY4(shift_amount,0xc);\n    shift_count = shift_count + -0x1f;\n    sign_flag = shift_count < 0;\n    carry_flag = shift_count == 0;\n    shift_amount = shift_amount;\n    if (!carry_flag && overflow_flag == sign_flag) {\n      quotient_low = quotient_high << (shift_amount & 0xff);\n      quotient_high = quotient_high >> (0xcU - shift_count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (sign_flag || overflow_flag != carry_flag) {\n    remainder_high = 0x20 - shift_amount;\n  }\n  quotient_high = quotient_high << (shift_amount & 0xff);\n  if (sign_flag || overflow_flag != carry_flag) {\n    quotient_high = quotient_high | quotient_low >> (remainder_high & 0xff);\n  }\n  if (sign_flag || overflow_flag != carry_flag) {\n    quotient_low = quotient_low << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount <= shift_count) {\n    return CONCAT44(quotient_high + (shift_count - shift_amount) * 0x100000, quotient_low);\n  }\n  shift_amount = ~(shift_count - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(quotient_high >> (shift_amount - 0x1f & 0xff));\n  }\n  shift_count = shift_amount - 0x13;\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(quotient_high >> (shift_amount & 0xff), quotient_low >> (shift_amount & 0xff) | quotient_high << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(quotient_low >> (0x20 - (0xcU - shift_count) & 0xff) | quotient_high << (0xcU - shift_count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000464",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000464"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "set_timer_output_compare_08002404",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "ccer_value",
                "uVar2": "cr2_value",
                "uVar3": "ccmr1_value"
            },
            "code": "void set_timer_output_compare_08002404(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_compare_config) {\n  uint32_t ccer_value;\n  uint32_t cr2_value;\n  uint32_t ccmr1_value;\n  \n  ccer_value = timer->CCER & 0xffffffef;\n  cr2_value = timer->CR2;\n  ccmr1_value = timer->CCMR1 & 0xffff8cff | output_compare_config->OCMode << 8;\n  \n  ccer_value = ccer_value & 0xffffffdf | output_compare_config->OCPolarity << 4;\n  if (timer == PTR_08002458) {\n    ccer_value = (ccer_value & 0xffffff7f | output_compare_config->OCNPolarity << 4) & 0xffffffbf;\n    cr2_value = cr2_value & 0xfffff3ff | (output_compare_config->OCIdleState | output_compare_config->OCNIdleState) << 2;\n  }\n  \n  timer->CR2 = cr2_value;\n  timer->CCR2 = output_compare_config->Pulse;\n  timer->CCER = ccer_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_double_value_08005bc8",
                "__x": "input",
                "result": "result",
                "cVar1": "fdlib_version",
                "iVar2": "comparison_result",
                "piVar3": "errno_ptr",
                "puVar4": "undefined4_ptr",
                "dVar5": "matherr_result",
                "extraout_d0": "extraout_d0",
                "extraout_d0_00": "extraout_d0_00",
                "extraout_d0_01": "extraout_d0_01",
                "extraout_d0_02": "extraout_d0_02",
                "extraout_d0_03": "extraout_d0_03",
                "local_50": "error_info",
                "local_38": "zero_double",
                "local_30": "unorddf2_result",
                "PTR___fdlib_version_08005c68": "PTR___fdlib_version_08005c68",
                "PTR_DAT_08005c6c": "PTR_DAT_08005c6c",
                "exception": "exception"
            },
            "code": "double calculate_double_value_08005bc8(double input)\n{\n  double result;\n  char fdlib_version;\n  int comparison_result;\n  int *errno_ptr;\n  undefined4 *undefined4_ptr;\n  double matherr_result;\n  double unorddf2_result;\n  undefined error_info [24];\n  undefined8 zero_double;\n  int zero_int = 0;\n  result = (double)__ieee754_calculate_double_value_08005bc8();\n  fdlib_version = *PTR___fdlib_version_08005c68;\n  if (fdlib_version == -1) {\n    return result;\n  }\n  unorddf2_result = __unorddf2();\n  if (unorddf2_result != 0) {\n    return matherr_result;\n  }\n  comparison_result = __aeabi_dcmplt();\n  if (comparison_result == 0) {\n    return extraout_d0_00;\n  }\n  error_info._0_4_ = 1;\n  error_info._4_4_ = PTR_DAT_08005c6c;\n  if (fdlib_version == '\\0') {\n    zero_double = 0.0;\nLAB_08005c26:\n    comparison_result = matherr((exception *)error_info);\n    result = extraout_d0_01;\n    if (comparison_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    zero_double = (double)__divdf3(0,0,0,0);\n    if (fdlib_version != '\\x02') goto LAB_08005c26;\n  }\n  undefined4_ptr = (undefined4 *)__errno();\n  *undefined4_ptr = 0x21;\n  result = extraout_d0_03;\nLAB_08005c2e:\n  if (unorddf2_result != 0) {\n    errno_ptr = (int *)__errno();\n    *errno_ptr = zero_int;\n    result = extraout_d0_02;\n  }\n  return result;\n}",
            "called": [
                "__ieee754_sqrt",
                "matherr",
                "__errno",
                "__unorddf2",
                "__divdf3",
                "__aeabi_dcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_double_value_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "checkI2CStatus_08001436",
                "hi2c": "i2c_handle",
                "pIVar1": "i2c_instance",
                "SR1": "I2C_SR1_TIMEOUT",
                "ErrorCode": "HAL_I2C_ERROR_TIMEOUT",
                "State": "HAL_I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08001436(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->SR1 & I2C_SR1_TIMEOUT) != 0) {\n    i2c_instance->SR1 &= ~I2C_SR1_TIMEOUT;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_TIMEOUT;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "calculate_altitude_pid_08004a30",
                "PTR_pid_altitude_08004a7c": "altitude",
                "PTR_ALT_FLAG_08004a78": "alt_flag",
                "PTR_joystick_08004a74": "joystick"
            },
            "code": "void calculate_altitude_pid_08004a30(void)\\n{\\n  float *PTR_pid_altitude_08004a7c = PTR_pid_PTR_pid_altitude_08004a7c_08004a7c;\\n  char *PTR_ALT_FLAG_08004a78 = PTR_ALT_FLAG_08004a78;\\n  char *PTR_joystick_08004a74 = PTR_PTR_joystick_08004a74_08004a74;\\n  if (PTR_joystick_08004a74[1] != \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 == \"\\0\") {\\n      float PTR_pid_altitude_08004a7c_val = MS5611_GetFilteredAltitude() * 100.0;\\n      PTR_pid_altitude_08004a7c[7] = PTR_pid_altitude_08004a7c_val;\\n      *PTR_ALT_FLAG_08004a78 = 1;\\n    }\\n    else {\\n      float PTR_pid_altitude_08004a7c_val = MS5611_GetFilteredAltitude() * 100.0;\\n      PTR_pid_altitude_08004a7c[12] = PTR_pid_altitude_08004a7c_val;\\n    }\\n  }\\n  if (PTR_joystick_08004a74[1] == \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 != \"\\0\") {\\n      *PTR_ALT_FLAG_08004a78 = 0;\\n    }\\n    PTR_pid_altitude_08004a7c[18] = *(float *)(PTR_joystick_08004a74 + 4);\\n  }\\n  return;\\n}",
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_altitude_pid_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "initializeSerialCommunication_08004c70",
                "PTR_huart1_08004c88": "huart1_ptr",
                "PTR_rx_buffer_08004c84": "rx_buffer_ptr",
                "serialFlush": "serialFlush",
                "HAL_UART_Receive_IT": "HAL_UART_Receive_IT"
            },
            "code": "void initializeSerialCommunication_08004c70(void)\n{\n  serialFlush();\n  HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_huart1_08004c88, PTR_rx_buffer_08004c84, 1);\n  return;\n}",
            "called": [
                "serialFlush",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeSerialCommunication_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_overlap_08000904",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "xor_res",
                "bVar2": "x_overlap",
                "bVar3": "lower_y"
            },
            "code": "uint check_overlap_08000904(uint x1, uint y1, uint x2, uint y2)\n{\n  bool no_overlap = ((int)(y1 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) && ((((int)(y1 << 1) >> 0x15 == -1 && ((x1 | y1 << 0xc) != 0)) || (((int)(y2 << 1) >> 0x15 == -1 && ((x2 | y2 << 0xc) != 0)))));\n  if (no_overlap) {\n    return 1;\n  }\n  bool x_overlap = (x1 | y1 << 1) == 0 && (x2 | y2 << 1) == 0 ? true : (x1 == x2);\n  bool y_overlap = x_overlap ? y1 == y2 : false;\n  if (!y_overlap) {\n    uint xor_res = y1 ^ y2;\n    bool same_y = xor_res == 0 ? true : (int)xor_res >= 0 ? x2 == y2 : false;\n    bool lower_y = (int)xor_res >= 0 && y2 <= y1;\n    if (same_y) {\n      lower_y = x2 <= x1;\n    }\n    uint result = (int)y2 >> 0x1f;\n    if (!lower_y) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_overlap_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "receive_uart_data_0800299a",
                "huart": "uart_handle",
                "uVar1": "cr1_reg",
                "uVar2": "tx_count",
                "uVar3": "sr_reg",
                "puVar4": "tx_buff_ptr",
                "HVar5": "uart_state",
                "pUVar6": "uart_instance",
                "uVar7": "err_code",
                "uVar8": "cr3_reg",
                "bVar9": "is_error"
            },
            "code": "void receive_uart_data_0800299a(UART_HandleTypeDef *huart)\n{\n  uint32_t sr_reg;\n  uint32_t cr1_reg;\n  uint32_t cr3_reg;\n  uint32_t err_code;\n  uint16_t tx_count;\n  USART_TypeDef *uart_instance;\n  HAL_UART_StateTypeDef uart_state;\n  ushort *tx_buff_ptr;\n  uint8_t *tx_byte_ptr;\n  uint8_t data_byte;\n  bool is_error;\n  \n  uart_instance = huart->Instance;\n  sr_reg = uart_instance->SR;\n  cr1_reg = uart_instance->CR1;\n  \n  if ((sr_reg & USART_SR_RXNE) == 0)\n  {\n    if (((int)(sr_reg << USART_SR_TXE_Pos) < 0) && ((int)(cr1_reg << USART_CR1_TXEIE_Pos) < 0))\n    {\n      HAL_UART_Receive_IT(huart);\n      return;\n    }\n  }\n  else\n  {\n    cr3_reg = uart_instance->CR3 & USART_CR3_EIE;\n    if ((cr3_reg != 0) || ((cr1_reg & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0))\n    {\n      err_code = sr_reg << 31;\n      if ((int)err_code < 0)\n      {\n        is_error = (int)(cr1_reg << USART_CR1_UE_Pos) < 0;\n        if (is_error)\n        {\n          err_code = huart->ErrorCode | HAL_UART_ERROR_NONE;\n        }\n        if (is_error)\n        {\n          huart->ErrorCode = err_code;\n        }\n      }\n      if (((int)(sr_reg << USART_SR_FE_Pos) < 0) && (cr3_reg != 0))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_FE;\n      }\n      if (((int)(sr_reg << USART_SR_NE_Pos) < 0) && (cr3_reg != 0))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_NE;\n      }\n      if (((int)(sr_reg << USART_SR_ORE_Pos) < 0) && (cr3_reg != 0))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_ORE;\n      }\n      if (huart->ErrorCode == HAL_UART_ERROR_NONE)\n      {\n        return;\n      }\n      if (((int)(sr_reg << USART_SR_TXE_Pos) < 0) && ((int)(cr1_reg << USART_CR1_TXEIE_Pos) < 0))\n      {\n        HAL_UART_Receive_IT(huart);\n      }\n      if ((-1 < (int)(huart->ErrorCode << HAL_UART_ERROR_DMAE_Pos)) && ((uart_instance->CR3 & USART_CR3_DMAT) == 0))\n      {\n        HAL_UART_ErrorCallback(huart);\n        huart->ErrorCode = HAL_UART_ERROR_NONE;\n        return;\n      }\n      uart_instance->CR1 &= ~USART_CR1_TXEIE;\n      uart_instance->CR3 &= ~USART_CR3_DMAR;\n      uart_state = HAL_UART_STATE_READY;\n      huart->State = uart_state;\n      HAL_UART_ErrorCallback(huart);\n      return;\n    }\n  }\n  if (((int)(sr_reg << USART_SR_TC_Pos) < 0) && ((int)(cr1_reg << USART_CR1_TCIE_Pos) < 0))\n  {\n    if ((huart->State & HAL_UART_STATE_BUSY_TX) == HAL_UART_STATE_BUSY_TX)\n    {\n      tx_buff_ptr = (ushort *)huart->pTxBuffPtr;\n      tx_byte_ptr = (uint8_t *)huart->pTxBuffPtr;\n      if ((huart->Init).WordLength == USART_WORDLENGTH_9B)\n      {\n        data_byte = *tx_byte_ptr & 0x1ff;\n        uart_instance->DR = data_byte;\n        if ((huart->Init).Parity == USART_PARITY_NONE)\n        {\n          tx_buff_ptr = tx_buff_ptr + 1;\n        }\n        else\n        {\n          tx_buff_ptr = (ushort *)((int)tx_buff_ptr + 1);\n        }\n        huart->pTxBuffPtr = (uint8_t *)tx_buff_ptr;\n      }\n      else\n      {\n        huart->pTxBuffPtr = (byte *)((int)tx_byte_ptr + 1);\n        uart_instance->DR = (uint)*(byte *)tx_byte_ptr;\n      }\n      tx_count = huart->TxXferCount - 1;\n      huart->TxXferCount = tx_count;\n      if (tx_count == 0)\n      {\n        uart_instance->CR1 &= ~USART_CR1_TXEIE;\n        uart_instance->CR1 |= USART_CR1_TCIE;\n        return;\n      }\n    }\n  }\n  else if (((int)(sr_reg << USART_SR_TXE_Pos) < 0) && ((int)(cr1_reg << USART_CR1_TXEIE_Pos) < 0))\n  {\n    uart_instance->CR1 &= ~USART_CR1_TXEIE;\n    if (huart->State == HAL_UART_STATE_BUSY_TX_RX)\n    {\n      uart_state = HAL_UART_STATE_BUSY_RX;\n    }\n    else\n    {\n      uart_state = HAL_UART_STATE_READY;\n    }\n    huart->State = uart_state;\n    HAL_UART_TxCpltCallback(huart);\n  }\n  return;\n}",
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [
                "USART1_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_uart_data_0800299a"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "data",
                "param_2": "out_data",
                "param_3": "out_len",
                "param_4": "flags",
                "param_5": "callback",
                "iVar1": "count",
                "uVar2": "max_len",
                "uVar3": "padding",
                "bVar4": "use_padding"
            },
            "code": "uint32_t process_data_080052e4(uint32_t data, uint32_t *out_len, uint32_t *out_data, uint32_t flags, code *callback)\\n{\\n  int count;\\n  uint32_t max_len;\\n  uint32_t padding = 0;\\n  bool use_padding = false;\\n  \\n  max_len = out_data[2];\\n  if (data > max_len) {\\n    max_len = data;\\n  }\\n  *out_len = max_len;\\n  if (*(char *)((int)out_data + 0x43) != \"\\0\") {\\n    *out_len = max_len + 1;\\n  }\\n  if ((int)(data << 0x1a) < 0) {\\n    *out_len += 2;\\n  }\\n  count = data & 6;\\n  if (count == 0) {\\n    for (; count < (int)(out_data[3] - *out_len); count++) {\\n      int result = (*callback)(data, flags, (int)out_data + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  if (*(char *)((int)out_data + 0x43) != \"\\0\") {\\n    use_padding = true;\\n  }\\n  if ((int)(data << 0x1a) < 0) {\\n    *(undefined *)((int)out_data + padding + 0x43) = 0x30;\\n    padding += 2;\\n    *(undefined *)((int)out_data + padding + 0x44) = *(undefined *)((int)out_data + 0x45);\\n  }\\n  int result = (*callback)(data, flags, (int)out_data + 0x43, padding + use_padding);\\n  if (result != -1) {\\n    uint32_t remaining = out_data[3];\\n    bool no_padding = (data & 6) == 4;\\n    if (no_padding) {\\n      remaining = 0;\\n    }\\n    uint32_t to_process = 0;\\n    if (!no_padding) {\\n      to_process = remaining - *out_len;\\n      to_process = to_process & ~((int)to_process >> 0x1f);\\n    }\\n    if (data > out_data[2]) {\\n      to_process += data - out_data[2];\\n    }\\n    while (to_process > remaining) {\\n      int result = (*callback)(data, flags, (int)out_data + 0x1a, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n      remaining++;\\n    }\\n    return 0;\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_08000f94": {
            "renaming": {
                "FUN_08000f94": "calculate_result_08000f94",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_combined_inputs_zero"
            },
            "code": "uint calculate_result_08000f94(uint input_1, uint input_2)\n{\n  bool is_negative;\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  bool is_combined_inputs_zero = combined_inputs == 0;\n  if (!is_combined_inputs_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_combined_inputs_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_combined_inputs_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_combined_inputs_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_inputs_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f94",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f94"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_i2c_acknowledge_080014e2",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time"
            },
            "code": "HAL_StatusTypeDef check_i2c_acknowledge_080014e2(I2C_HandleTypeDef *i2c_handler, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time = HAL_GetTick();\n  while(true) {\n    if ((int)(i2c_handler->Instance->SR1 << 0x18) < 0) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handler);\n    if (status != HAL_OK) break;\n    if ((timeout != 0xffffffff) && ((timeout == 0) || (HAL_GetTick() - start_time > timeout))) {\n      i2c_handler->ErrorCode |= 0x20;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_IsAcknowledgeFailed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2c_acknowledge_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "toggle_gpio_pin_state_0800142e",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin"
            },
            "code": "void toggle_gpio_pin_state_0800142e(GPIO_TypeDef *gpio, uint16_t pin) {\n  gpio->ODR = (uint)pin ^ gpio->ODR;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "toggle_gpio_pin_state_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_TIM_flags_08004d8c",
                "htim_pwm": "tim_handle",
                "pTVar1": "tim_instance",
                "tmpreg": "unused_tmpreg",
                "tmpreg_1": "unused_tmpreg_1",
                "tmpreg_2": "unused_tmpreg_2",
                "tmpreg_3": "unused_tmpreg_3",
                "DAT_08004e04": "TIM1",
                "DAT_08004e08": "TIM1_FLAG",
                "TIM_TypeDef": "TIM",
                "_DAT_4002101c": "TIM2_CR1",
                "DAT_08004e0c": "TIM3",
                "DAT_08004e10": "TIM4"
            },
            "code": "void update_TIM_flags_08004d8c(TIM_HandleTypeDef *htim_pwm)\n{\n  TIM_TypeDef *tim_instance;\n  uint32_t *tim_flag;\n\n  tim_instance = htim_pwm->Instance;\n\n  if (tim_instance == PTR_08004e04) {\n    tim_flag = (uint32_t *)(DAT_08004e08 + 0x18);\n    *tim_flag |= 0x800;\n  }\n  else if (tim_instance == (TIM_TypeDef *)0x40000000) {\n    _DAT_4002101c |= 1;\n  }\n  else if (tim_instance == PTR_08004e0c) {\n    tim_flag = (uint32_t *)(DAT_08004e08 + 0x1c);\n    *tim_flag |= 2;\n  }\n  else if (tim_instance == PTR_08004e10) {\n    tim_flag = (uint32_t *)(DAT_08004e08 + 0x1c);\n    *tim_flag |= 4;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "update_TIM_flags_08004d8c"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "isEndOfString_080009b4",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009b4(void)\n{\n  char currentChar;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009b4"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "calculateInputValue_08003068",
                "in_s0": "inputValue"
            },
            "code": "float calculateInputValue_08003068(void)\n{\n  float inputValue;\n  return inputValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "calculateInputValue_08003068"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "calculate_result_08000f8c",
                "param_1": "first_value",
                "param_2": "second_value",
                "uVar2": "doubled_first_value",
                "uVar3": "doubled_second_value",
                "uVar4": "combined_values",
                "bVar5": "is_combined_zero",
                "bVar1": "is_negative"
            },
            "code": "uint calculate_result_08000f8c(uint first_value, uint second_value)\n{\n  bool is_negative;\n  uint doubled_first_value;\n  uint doubled_second_value;\n  uint combined_values;\n  bool is_combined_zero;\n  \n  doubled_first_value = first_value * 2;\n  doubled_second_value = second_value * 2;\n  \n  if (((int)doubled_first_value >> 0x18 == -1 || (int)doubled_second_value >> 0x18 == -1) &&\n     ((((int)doubled_first_value >> 0x18 == -1 && ((first_value & 0x7fffff) != 0)) ||\n      (((int)doubled_second_value >> 0x18 == -1 && ((second_value & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  \n  combined_values = doubled_first_value | second_value & 0x7fffffff;\n  is_combined_zero = combined_values == 0;\n  if (!is_combined_zero) {\n    combined_values = first_value ^ second_value;\n    is_combined_zero = combined_values == 0;\n  }\n  is_negative = -1 < (int)combined_values;\n  if (is_negative) {\n    first_value = doubled_first_value + second_value * -2;\n    is_combined_zero = first_value == 0;\n  }\n  if ((is_negative && doubled_second_value <= doubled_first_value) && !is_combined_zero) {\n    first_value = (int)second_value >> 0x1f;\n  }\n  if (!is_negative || doubled_second_value > doubled_first_value) {\n    first_value = ~((int)second_value >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    first_value = first_value | 1;\n  }\n  return first_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f8c"
        },
        "FUN_08000474": {
            "renaming": {
                "FUN_08000474": "calculate_08000474",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "carry",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "iVar5": "shift",
                "uVar4": "mask",
                "bVar10": "dividend_is_negative",
                "bVar11": "carry",
                "bVar12": "is_overflow"
            },
            "code": "ulonglong calculate_08000474(uint dividend, uint divisor)\n{\n  byte carry = 0;\n  uint quotient = 0;\n  uint remainder = 0;\n  int shift = 0;\n  uint mask = 0x80000000;\n  if ((dividend | divisor) == 0) {\n    return CONCAT44(divisor, dividend);\n  }\n  if ((int)mask < 0) {\n    bool dividend_is_negative = dividend != 0;\n    dividend = -dividend;\n    remainder = -divisor - (uint)dividend_is_negative;\n  } else {\n    remainder = divisor;\n  }\n  if (remainder >> 0x16 != 0) {\n    shift = 0x432;\n    if (remainder >> 0x19 != 0) {\n      shift = 6;\n    }\n    if (remainder >> 0x1c != 0) {\n      shift += 3;\n    }\n    int quotient_shift = shift - ((int)remainder >> 0x1f);\n    uint quotient_mask = 0xFFFFFFFF << (0x20 - quotient_shift);\n    quotient = dividend << quotient_shift;\n    remainder = (remainder << quotient_shift) | (dividend >> (0x20 - quotient_shift));\n    shift += 0x432;\n  }\n  while (remainder > 0xFFFFF) {\n    if (remainder > 0x1FFFFF) {\n      carry = (byte)dividend & 1;\n      dividend >>= 1;\n      remainder = (remainder >> 1) | ((uint)carry << 0x1F);\n      shift++;\n      if (0xFFBFFFFF < (uint)(shift * 0x200000)) {\n        return (ulonglong)(mask | 0x7FF00000) << 0x20;\n      }\n    }\n    carry = (byte)remainder & 1;\n    remainder >>= 1;\n    quotient = (quotient << 1) | (uint)carry;\n    shift--;\n  }\n  if (remainder == 0) {\n    return CONCAT44(mask | quotient, dividend);\n  }\n  int leading_zeroes = count_leading_zeroes(remainder);\n  int quotient_shift = leading_zeroes - 0xB;\n  uint quotient_mask = 0xFFFFFFFF << (0x20 - quotient_shift);\n  int remainder_shift = leading_zeroes - 0x2B;\n  if (remainder_shift >= 0) {\n    remainder <<= remainder_shift;\n    quotient |= remainder >> (0x20 - quotient_shift);\n  } else {\n    quotient |= remainder >> (0x20 - quotient_shift);\n    remainder <<= quotient_shift;\n  }\n  if (leading_zeroes <= shift) {\n    return CONCAT44(remainder + (shift - leading_zeroes) * 0x100000 | mask, quotient);\n  }\n  int quotient_shift2 = ~(shift - leading_zeroes);\n  if (quotient_shift2 > 0x1E) {\n    return CONCAT44(divisor, remainder >> (quotient_shift2 - 0x1F)) & 0x80000000FFFFFFFF;\n  }\n  int remainder_shift2 = quotient_shift2 - 0x13;\n  if (remainder_shift2 == 0 || remainder_shift2 < 0 != SCARRY4(quotient_shift2 - 0x1F, 0xC)) {\n    quotient_shift2++;\n    return CONCAT44(mask | remainder >> quotient_shift2, quotient >> quotient_shift2 | remainder << (0x20 - quotient_shift2));\n  }\n  return CONCAT44(divisor, quotient >> (0x20 - (0xCU - remainder_shift2) & 0xFF) | remainder << (0xCU - remainder_shift2 & 0xFF)) & 0x80000000FFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000474",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000474"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "is_function_completed_08000110",
                "param_1": "init_ptr",
                "PTR_completed_8672_08000128": "is_completed_ptr",
                "DAT_0800012c": "is_initialized",
                "PTR__init_08000130": "init_ptr"
            },
            "code": "bool is_function_completed_08000110(bool* PTR_completed_8672_08000128, bool DAT_0800012c, bool* PTR__init_08000130) {\n  if (*PTR_completed_8672_08000128 == false) {\n    if (DAT_0800012c) {\n      PTR__init_08000130 = DAT_0800012c;\n    }\n    *PTR_completed_8672_08000128 = true;\n  }\n  return PTR__init_08000130;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "is_function_completed_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "count_exceptions_caught_0800709e",
                "__exc": "__exception_pointer"
            },
            "code": "int count_exceptions_caught_0800709e(exception *__exception_pointer){\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "count_exceptions_caught_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_pitch_LPF_08002ec0",
                "in_s0": "input_signal",
                "fVar1": "filtered_signal"
            },
            "code": "float calculate_pitch_LPF_08002ec0(float input_signal)\n{\n  float filtered_signal;\n  filtered_signal = lowPassFilter((LPF *)PTR_lpf_pitch_08002ed0, input_signal);\n  return filtered_signal;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "PID_Update",
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_pitch_LPF_08002ec0"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_product_and_sum_08006c0c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "unused",
                "uVar2": "shifted_multiplier",
                "iVar3": "exponent",
                "uVar4": "quotient",
                "uVar5": "shifted_msb_index",
                "uVar6": "trial_remainder",
                "iVar7": "sign_bit",
                "uVar8": "divisor",
                "uVar9": "remainder_divisor",
                "iVar10": "trial_dividend",
                "uVar11": "trial_divisor",
                "uVar12": "remainder_dividend",
                "uVar13": "unused"
            },
            "code": "undefined8 calculate_product_and_sum_08006c0c(uint multiplicand, uint multiplier)\n{\n  uint product_high, product_low, quotient_high, quotient_low;\n  uint shifted_multiplier, shifted_msb_index;\n  int exponent;\n\n  if ((DAT_08006d60 & ~multiplier) == 0) {\n    product_low = multiplicand * multiplier;\n    product_high = __aeabi_uldivmod(product_low, 0, 2, 0, multiplier, 0);\n    return CONCAT44(product_high, product_low);\n  }\n  if ((int)multiplier < 1) {\n    if ((multiplier & 0x7fffffff | multiplicand) == 0) {\n      return CONCAT44(multiplier, multiplicand);\n    }\n    if (multiplier != 0) {\n      quotient_low = multiplicand - multiplier;\n      quotient_high = __aeabi_uidivmod(quotient_low, 0, multiplier, 0);\n      return CONCAT44(quotient_high, quotient_low);\n    }\n  }\n  exponent = (int)multiplier >> 0x14;\n  if (exponent == 0) {\n    while (multiplier == 0) {\n      exponent = exponent + -0x15;\n      shifted_multiplier = multiplicand >> 0xb;\n      multiplicand = multiplicand << 0x15;\n    }\n    shifted_msb_index = 0;\n    for (; -1 < (int)(shifted_multiplier << 0xb); shifted_multiplier = shifted_multiplier << 1) {\n      shifted_msb_index = shifted_msb_index + 1;\n    }\n    exponent = exponent - (shifted_msb_index - 1);\n    shifted_multiplier = shifted_multiplier | multiplicand >> (0x20 - shifted_msb_index & 0xff);\n    multiplicand = multiplicand << (shifted_msb_index & 0xff);\n  }\n  int sign_bit = 0;\n  shifted_multiplier = shifted_multiplier & 0xfffff | 0x100000;\n  if ((exponent + -0x3ff) * -0x80000000 < 0) {\n    shifted_multiplier = shifted_multiplier * 2 - ((int)multiplicand >> 0x1f);\n    multiplicand = multiplicand << 1;\n  }\n  shifted_multiplier = shifted_multiplier * 2 - ((int)multiplicand >> 0x1f);\n  uint bit_index = 0x16;\n  uint quotient = 0;\n  uint divisor = 0x200000;\n  multiplicand = multiplicand << 1;\n  do {\n    int trial_dividend = quotient + divisor;\n    if (trial_dividend <= (int)shifted_multiplier) {\n      shifted_multiplier = shifted_multiplier - trial_dividend;\n      quotient = trial_dividend + divisor;\n      sign_bit = sign_bit + divisor;\n    }\n    bit_index = bit_index - 1;\n    shifted_multiplier = shifted_multiplier * 2 - ((int)multiplicand >> 0x1f);\n    divisor = divisor >> 1;\n    multiplicand = multiplicand << 1;\n  } while (bit_index != 0);\n  uint remainder_dividend = 0x20;\n  uint remainder_divisor = 0x80000000;\n  divisor = quotient;\n  quotient = sign_bit;\n  do {\n    uint trial_divisor = remainder_divisor + divisor;\n    uint trial_remainder = remainder_dividend;\n    if (((int)divisor < (int)shifted_multiplier) || ((shifted_multiplier == divisor && (trial_divisor <= multiplicand)))) {\n      remainder_divisor = trial_divisor + remainder_divisor;\n      if (((int)trial_divisor < 0) && (-1 < (int)remainder_divisor)) {\n        trial_remainder = remainder_dividend + 1;\n      }\n      shifted_multiplier = shifted_multiplier - divisor;\n      if (multiplicand < trial_divisor) {\n        shifted_multiplier = shifted_multiplier - 1;\n      }\n      multiplicand = multiplicand - trial_divisor;\n      quotient = quotient + remainder_dividend;\n    }\n    shifted_multiplier = shifted_multiplier * 2 - ((int)multiplicand >> 0x1f);\n    remainder_dividend = remainder_dividend >> 1;\n    multiplicand = multiplicand << 1;\n    remainder_divisor = remainder_divisor >> 1;\n    divisor = divisor >> 1;\n  } while (remainder_dividend != 0);\n  if ((multiplicand | shifted_multiplier) != 0) {\n    if (quotient == 0xffffffff) {\n      exponent = exponent + 1;\n      quotient = remainder_dividend;\n    }\n    else {\n      quotient = quotient + 1 & 0xfffffffe;\n    }\n  }\n  quotient = quotient >> 1;\n  if (sign_bit << 0x1f < 0) {\n    quotient = quotient | 0x80000000;\n  }\n  return CONCAT44((sign_bit >> 1) + 0x3fe00000 + (exponent + -0x3ff >> 1) * 0x100000, quotient);\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "sqrt",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_product_and_sum_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "CalculateMotorSpeeds_0800426c",
                "throttle": "throttle",
                "pitch": "pitch",
                "roll": "roll",
                "yaw": "yaw",
                "uVar1": "throttle_diff",
                "uVar2": "pitch_add",
                "uVar3": "roll_diff",
                "m4": "motor4_speed",
                "m3": "motor3_speed",
                "m2": "motor2_speed",
                "m1": "motor1_speed"
            },
            "code": "void CalculateMotorSpeeds_0800426c(float throttle, float pitch, float roll, float yaw)\n{\n  float throttle_diff = throttle - 0.5;\n  float pitch_add = pitch + roll;\n  float roll_diff = roll - 0.5;\n  float yaw_diff = yaw - 0.5;\n  int motor4_speed = (int)(throttle_diff - pitch_add + roll_diff - yaw_diff);\n  int motor3_speed = (int)(throttle_diff + pitch_add + roll_diff + yaw_diff);\n  int motor2_speed = (int)(throttle_diff + pitch_add - roll_diff - yaw_diff);\n  int motor1_speed = (int)(throttle_diff - pitch_add - roll_diff + yaw_diff);\n  Motor_SetSpeed(motor1_speed, motor2_speed, motor3_speed, motor4_speed);\n  return;\n}",
            "called": [
                "Motor_SetSpeed",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "CalculateMotorSpeeds_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "enable_timer_channel_08002538",
                "*htim": "*timer_handle",
                "Channel": "channel",
                "pTVar1": "bdtr_instance",
                "pTVar2": "timer_instance",
                "DAT_08002560": "bdtr_instance",
                "HAL_OK": "HAL_OK",
                "TIM_CCxChannelCmd": "TIM_CCxChannelCmd",
                "TIM_TypeDef": "TIM_TypeDef",
                "|": "|",
                "CR1": "CR1",
                "ENABLE": "ENABLE",
                "TIM_CR1_CEN": "TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef enable_timer_channel_08002538(TIM_HandleTypeDef *timer_handle, uint32_t channel)\n{\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_TypeDef *DAT_08002560 = DAT_08002560;\n  \n  TIM_CCxChannelCmd(timer_instance, channel, ENABLE);\n  if (timer_instance == DAT_08002560) {\n    DAT_08002560 = (TIM_TypeDef *)(timer_instance->BDTR | 0x8000);\n  }\n  if (timer_instance == DAT_08002560) {\n    timer_instance->BDTR = (uint32_t)DAT_08002560;\n  }\n  timer_instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "PWM_Init"
            ],
            "imported": false,
            "current_name": "enable_timer_channel_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "read_i2c_data_080040e8",
                "device_add": "device_address",
                "register_add": "register_address",
                "byte_array": "data_array",
                "size": "data_size",
                "file": "file_name",
                "line": "line_number",
                "file_00": "file_ptr",
                "uVar1": "read_byte",
                "iVar2": "i",
                "puVar3": "data_ptr"
            },
            "code": "void read_i2c_data_080040e8(uint16_t device_address, uint16_t register_address, uint8_t *data_array, uint16_t data_size, char *file_name, int line_number)\n{\n  uint8_t *data_ptr;\n  uint8_t read_byte;\n  int i;\n  char *file_ptr = PTR_s____Src_i2c_c_08004118;\n\n  data_ptr = data_array - 1;\n  for (i = 0; i < (int)(uint)data_size; i++) {\n    read_byte = I2C_ReadByte(device_address, register_address + (short)i, file_ptr, 0x4c);\n    data_ptr++;\n    *data_ptr = read_byte;\n  }\n  return;\n}",
            "called": [
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_Init",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080040e8"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar4": "hash_value",
                "uVar3": "sign_bit_mask",
                "uVar5": "carry_bit",
                "count_leading_zeroes": "count_leading_zeroes",
                "DAT_0804c6a0": "mask",
                "PTR_FUN_08000c44": "PTR_calculate_hash"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes_count;\n  uint sign_bit_DAT_0804c6a0;\n  uint hash_value;\n  int shift_amount;\n  uint shifted_input;\n  uint DAT_0804c6a0;\n  uint carry_bit;\n  \n  sign_bit_DAT_0804c6a0 = input & 0x80000000;\n  if ((int)sign_bit_DAT_0804c6a0 < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shift_amount = leading_zeroes_count - 8;\n  DAT_0804c6a0 = (1 << shift_amount) - 1;\n  shifted_input = input << shift_amount;\n  carry_bit = (shifted_input & 0x80000000) >> 31;\n  hash_value = ((sign_bit_DAT_0804c6a0 | 0x4b000000) - 0x800000) + (shifted_input & ~DAT_0804c6a0) + (0x7fffffff < carry_bit);\n  if (carry_bit == 0x80000000) {\n    hash_value = hash_value & 0xfffffffe;\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "MPU9250_ReadAccelData",
                "PID_Compute",
                "AK8963_Init",
                "MS5611_Update",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a04(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n  int is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  int is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n  if (is_input1_valid && is_input2_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "configure_uart_080025e8",
                "huart": "uart",
                "uVar1": "pclk_freq",
                "uVar2": "baud_rate",
                "uVar3": "parity",
                "iVar4": "integer_brr",
                "uVar5": "baud_rate",
                "iVar6": "fractional_brr",
                "pUVar7": "usart_instance"
            },
            "code": "void configure_uart_080025e8(UART_HandleTypeDef *uart)\n{\n  uint32_t pclk_freq, baud_rate, brr_value, integer_brr, fractional_brr, oversampling_ratio;\n  USART_TypeDef *usart_instance = uart->Instance;\n  uint8_t parity = uart->Init.Parity;\n  usart_instance->CR2 = (usart_instance->CR2 & 0xffffcfff) | uart->Init.StopBits;\n  usart_instance->CR1 = (uart->Init.WordLength | parity | uart->Init.Mode) | (usart_instance->CR1 & 0xffffe9f3);\n  usart_instance->CR3 = (usart_instance->CR3 & 0xfffffcff) | uart->Init.HwFlowCtl;\n  if (usart_instance == PTR_DAT_08002720) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  } else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  baud_rate = uart->Init.BaudRate;\n  oversampling_ratio = 16;\n  integer_brr = (pclk_freq / (oversampling_ratio * baud_rate));\n  fractional_brr = ((((pclk_freq * 100) / (oversampling_ratio * baud_rate)) - (integer_brr * 100)) * 16 + 50) / 100;\n  brr_value = (integer_brr << 4) | fractional_brr;\n  usart_instance->BRR = brr_value;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_080025e8"
        },
        "FUN_08003078": {
            "renaming": {
                "FUN_08003078": "FUNC_08003078"
            },
            "code": "\nvoid FUNC_08003078(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  uint32_t uVar13;\n  undefined4 extraout_r1;\n  uint uVar14;\n  undefined4 unaff_r4;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r5;\n  undefined4 unaff_r6;\n  undefined4 unaff_r7;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  bool bVar22;\n  undefined8 uVar23;\n  \n  puVar6 = PTR_PRESSURE_READY_08003254;\n  puVar5 = PTR_TEMP_READY_08003250;\n  if ((*PTR_TEMP_READY_08003250 != '\\0') && (*PTR_PRESSURE_READY_08003254 != '\\0')) {\n    iVar21 = *(int *)PTR_MS5611_RawTemperature_0800325c +\n             (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x17 |\n             (int)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                    (longlong)iVar21 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                   (longlong)iVar21) >> 8);\n    iVar19 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000;\n    bVar22 = (int)uVar14 < 0;\n    if (1999 < iVar19) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar22 != SBORROW4(iVar19,2000)) {\n      iVar20 = uVar14 * uVar14 * 5;\n      uVar14 = iVar20 >> 2;\n      uVar4 = iVar20 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_MS5611_RawPressure_08003260;\n    iVar20 = *(uint *)PTR_MS5611_RawPressure_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                      (longlong)iVar21 >> 0x28) +\n               (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000))\n              - ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar20 * 0x800;\n    uVar10 = __floatsisf(uVar8 - uVar17 >> 0xf |\n                         (((iVar20 >> 0x15) -\n                          ((((int)((longlong)\n                                   (int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                                   (longlong)iVar21 >> 0x27) +\n                            (uint)CARRY4(uVar15,(uint)*(ushort *)\n                                                       (PTR_MS5611_Coefficients_08003258 + 4) *\n                                                0x10000)) - ((int)uVar4 >> 0x1f)) -\n                          (uint)(uVar16 < uVar4))) - (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar11 = __aeabi_fdiv(uVar10,DAT_08003264);\n    *(undefined4 *)PTR_MS5611_CompensatedPressure_08003268 = uVar11;\n    uVar10 = __floatsisf(iVar19);\n    uVar12 = __aeabi_fdiv(uVar10,DAT_08003264);\n    uVar10 = DAT_08003270;\n    *(undefined4 *)PTR_MS5611_CompensatedTemperature_0800326c = uVar12;\n    __aeabi_fdiv(uVar11,uVar10);\n    uVar10 = __aeabi_f2d();\n    pow((double)CONCAT44(unaff_r5,unaff_r4),(double)CONCAT44(unaff_r7,unaff_r6));\n    uVar23 = __subdf3(0,DAT_08003274,uVar10,extraout_r1);\n    __muldf3((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar10 = __truncdfsf2();\n    puVar7 = PTR_alt_filter_08003278;\n    *(undefined4 *)PTR_MS5611_Altitude_0800327c = uVar10;\n    uVar11 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar11 = __addsf3(uVar11);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar10;\n    uVar10 = __addsf3(uVar11,uVar10);\n    uVar10 = __aeabi_fdiv(uVar10,DAT_08003280);\n    *(undefined4 *)PTR_MS5611_FilteredAltitude_08003284 = uVar10;\n    iVar19 = __aeabi_f2iz();\n    puVar7 = PTR_MS5611_OSR_0800328c;\n    *(int *)PTR_msp_txf_altitude_08003288 = iVar19 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    I2C_WriteByte(0xee,bVar2 + 0x50,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)PTR_temp_time_08003290 = uVar13;\n  }\n  uVar13 = millis();\n  puVar6 = PTR_pressure_time_08003294;\n  if (((10 < uVar13 - *(int *)PTR_temp_time_08003290) && (*puVar5 == '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    puVar7 = PTR_MS5611_RawTemperature_0800325c;\n    *puVar5 = 1;\n    *(uint32_t *)puVar7 = uVar13;\n    I2C_WriteByte(0xee,(byte)*PTR_MS5611_OSR_0800328c + 0x40,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)puVar6 = uVar13;\n  }\n  uVar13 = millis();\n  puVar7 = PTR_PRESSURE_READY_08003254;\n  if (((10 < uVar13 - *(int *)puVar6) && (*puVar5 != '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    *(uint32_t *)PTR_MS5611_RawPressure_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "I2C_WriteByte",
                "__floatsisf",
                "__addsf3",
                "__subdf3",
                "__aeabi_fdiv",
                "pow",
                "__truncdfsf2",
                "MS5611_ReadADC",
                "__aeabi_f2iz",
                "millis",
                "__muldf3",
                "__aeabi_f2d"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003078",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "FUNC_08003078"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_not_equal_to_zero_080009c8",
                "in_CY": "is_carry_set",
                "in_ZR": "is_zero_set"
            },
            "code": "bool is_not_equal_to_zero_080009c8(void)\n{\n  bool is_carry_set;\n  bool is_zero_set;\n  __aeabi_cdcmpeq();\n  return !is_carry_set || is_zero_set;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_zero_080009c8"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar2": "doubled_multiplicand",
                "uVar3": "doubled_multiplier",
                "uVar4": "combined_multiplicand_multiplier",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f9c(uint multiplicand, uint multiplier)\n{\n  bool is_negative;\n  uint doubled_multiplicand = multiplicand * 2;\n  uint doubled_multiplier = multiplier * 2;\n  if (((int)doubled_multiplicand >> 0x18 == -1 || (int)doubled_multiplier >> 0x18 == -1) && ((((int)doubled_multiplicand >> 0x18 == -1 && ((multiplicand & 0x7fffff) != 0)) || (((int)doubled_multiplier >> 0x18 == -1 && ((multiplier & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint combined_multiplicand_multiplier = doubled_multiplicand | multiplier & 0x7fffffff;\n  bool is_zero = combined_multiplicand_multiplier == 0;\n  if (!is_zero) {\n    combined_multiplicand_multiplier = multiplicand ^ multiplier;\n    is_zero = combined_multiplicand_multiplier == 0;\n  }\n  is_negative = -1 < (int)combined_multiplicand_multiplier;\n  if (is_negative) {\n    multiplicand = doubled_multiplicand + multiplier * -2;\n    is_zero = multiplicand == 0;\n  }\n  if ((is_negative && doubled_multiplier <= doubled_multiplicand) && !is_zero) {\n    multiplicand = (int)multiplier >> 0x1f;\n  }\n  if (!is_negative || doubled_multiplier > doubled_multiplicand) {\n    multiplicand = ~((int)multiplier >> 0x1f);\n  }\n  if (!is_zero) {\n    multiplicand = multiplicand | 1;\n  }\n  return multiplicand;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculateFilteredRoll_08002ed4",
                "in_s0": "rawRoll",
                "fVar1": "filteredRoll",
                "PTR_lpf_roll_08002ee4": "rollFilter"
            },
            "code": "float calculateFilteredRoll_08002ed4(void)\n{\n  float rawRoll;\n  float filteredRoll;\n  \n  rawRoll = getRawRoll();\n  filteredRoll = lowPassFilter(&PTR_lpf_roll_08002ee4, rawRoll);\n  return filteredRoll;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "PID_Update",
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculateFilteredRoll_08002ed4"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nvoid FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  undefined4 extraout_r1;\n  uint extraout_r1_00;\n  undefined4 uVar2;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  uint extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  longlong lVar16;\n  ulonglong uVar17;\n  undefined8 uVar18;\n  undefined4 uVar19;\n  undefined4 in_stack_ffffff94;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar9 = param_4 & 0x7fffffff;\n  if ((uVar9 | param_3) == 0) {\n    return;\n  }\n  uVar7 = param_2 & 0x7fffffff;\n  if ((int)uVar7 <= (int)DAT_08006428) {\n    if (uVar7 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar7 < uVar9) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar9 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar9) {\n            uVar1 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar9 == DAT_08006428) {\n                return;\n              }\nLAB_0800630c:\n              if (uVar9 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return;\n                }\n                uVar7 = 0;\n                uVar9 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                __ieee754_sqrt(param_1,param_2);\n                return;\n              }\n            }\n          }\n          else {\n            if ((int)uVar9 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              uVar1 = 0;\n              goto LAB_080062ba;\n            }\n            iVar4 = ((int)uVar9 >> 0x14) + -0x3ff;\n            if (0x14 < iVar4) {\n              uVar1 = param_3 >> (0x34U - iVar4 & 0xff);\n              if (param_3 == uVar1 << (0x34U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar5 = (int)uVar9 >> (0x14U - iVar4 & 0xff);\n              uVar1 = param_3;\n              if (uVar9 == uVar5 << (0x14U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar5 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            uVar1 = 0;\n          }\n          uVar5 = param_1;\n          fabs((double)CONCAT44(in_stack_ffffff94,uVar1));\n          uVar17 = CONCAT44(param_2,uVar5) & 0x7fffffffffffffff;\n          if ((param_1 == 0) && ((uVar7 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              __divdf3(0,DAT_08006438,uVar5,extraout_r1);\n            }\n            if (-1 < (int)param_2) {\n              return;\n            }\n            if ((uVar1 | uVar7 + 0xc0100000) != 0) {\n              return;\n            }\n          }\n          else {\n            uVar5 = 0xffffffff - ((int)param_2 >> 0x1f);\n            if ((uVar1 | uVar5) != 0) {\n              if (DAT_08006440 < (int)uVar9) {\n                if (DAT_08006440 + 0x2100000 < (int)uVar9) {\n                  if (DAT_08006434 < (int)uVar7) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  if (-1 < (int)param_4) {\n                    return;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar7 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar7) goto LAB_08006418;\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar8 = (undefined4)uVar12;\n                uVar12 = __muldf3(uVar8,uVar10,DAT_080065a8,DAT_080065ac);\n                uVar13 = __muldf3(uVar8,uVar10,DAT_080065b0,DAT_080065b4);\n                uVar14 = __muldf3(uVar8,uVar10,0,DAT_080065d4);\n                uVar14 = __subdf3(DAT_080065b8,DAT_080065bc,(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar8,uVar10);\n                uVar14 = __subdf3(0,DAT_080065d8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar15 = __muldf3(uVar8,uVar10,uVar8,uVar10);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                  (int)((ulonglong)uVar15 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),DAT_080065c0,\n                                  DAT_080065c4);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                             (int)((ulonglong)uVar13 >> 0x20));\n                lVar16 = (ulonglong)extraout_r1_00 << 0x20;\n                uVar9 = extraout_r1_00;\n              }\n              else {\n                local_54 = 0;\n                if (uVar7 < 0x100000) {\n                  uVar17 = __muldf3();\n                  local_54 = -0x35;\n                }\n                uVar9 = (uint)(uVar17 >> 0x20);\n                local_54 = ((int)uVar9 >> 0x14) + -0x3ff + local_54;\n                uVar9 = uVar9 & 0xfffff;\n                uVar7 = uVar9 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar9) {\n                  if (DAT_08006920 < (int)uVar9) {\n                    uVar7 = uVar7 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar4 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar4 = 0;\n                }\n                uVar6 = *(undefined4 *)(PTR_bp_08006924 + iVar4 * 8);\n                uVar19 = *(undefined4 *)((int)(PTR_bp_08006924 + iVar4 * 8) + 4);\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __aeabi_dadd((int)uVar17,uVar7,uVar6,uVar19);\n                uVar13 = __divdf3(0,DAT_08006928,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3((int)uVar12,uVar10,(int)uVar13,uVar11);\n                uVar2 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar8 = (undefined4)uVar14;\n                uVar14 = __muldf3(0,uVar2);\n                uVar12 = __subdf3((int)uVar12,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __subdf3(0,((int)uVar7 >> 1 | 0x20000000U) + 0x80000 + iVar4 * 0x40000,\n                                  uVar6,uVar19);\n                uVar14 = __subdf3((int)uVar17,uVar7,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),0,uVar2);\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,uVar11);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar8,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar10 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar10,uVar6,DAT_080068d0,DAT_080068d4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar14 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __aeabi_dadd(uVar8,uVar2,0,uVar2);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar11);\n                uVar13 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar10 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(0,uVar2,0,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = __aeabi_dadd((int)uVar14,uVar6,0,DAT_0800692c);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar10);\n                uVar15 = __muldf3(0,uVar2,0,extraout_r1_01);\n                uVar19 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar18 = __subdf3(0,extraout_r1_01,0,DAT_0800692c);\n                uVar14 = __subdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar14,uVar6);\n                uVar13 = __subdf3((int)uVar13,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar8,uVar2);\n                uVar12 = __muldf3((int)uVar12,uVar11,0,extraout_r1_01);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar8 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                __aeabi_dadd((int)uVar15,uVar19,(int)uVar13,uVar8);\n                uVar12 = __muldf3(0,extraout_r1_02,DAT_08006900,DAT_08006904);\n                uVar14 = __subdf3(0,extraout_r1_02,(int)uVar15,uVar19);\n                uVar13 = __subdf3((int)uVar13,uVar8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006908,\n                                  DAT_0800690c);\n                uVar14 = __muldf3(0,extraout_r1_02,DAT_08006910,DAT_08006914);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),\n                                      *(undefined4 *)(PTR_dp_l_08006930 + iVar4 * 8),\n                                      *(undefined4 *)((int)(PTR_dp_l_08006930 + iVar4 * 8) + 4));\n                uVar14 = __aeabi_i2d(local_54);\n                uVar8 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = *(undefined4 *)(PTR_dp_h_08006934 + iVar4 * 8);\n                uVar11 = *(undefined4 *)((int)(PTR_dp_h_08006934 + iVar4 * 8) + 4);\n                uVar15 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar15 = __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar10,uVar11);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,uVar8);\n                uVar14 = __subdf3(0,extraout_r1_03,(int)uVar14,uVar8);\n                lVar16 = __subdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar10,uVar11);\n                uVar9 = extraout_r1_03;\n              }\n              uVar12 = __subdf3((int)lVar16,(int)((ulonglong)lVar16 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar8 = DAT_080065dc;\n              if ((uVar1 - 1 | uVar5) != 0) {\n                uVar8 = DAT_080065d0;\n              }\n              uVar19 = 0;\n              uVar13 = __subdf3(param_3,param_4,0,param_4);\n              uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar9);\n              uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),param_3,param_4);\n              uVar12 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar10 = (undefined4)uVar12;\n              uVar12 = __muldf3(0,uVar9,0,param_4);\n              uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar11 = (undefined4)uVar12;\n              lVar16 = __aeabi_dadd(uVar10,uVar2,uVar11,uVar6);\n              uVar7 = (uint)((ulonglong)lVar16 >> 0x20);\n              uVar9 = (uint)lVar16;\n              if (DAT_080065e0 < (int)uVar7) {\n                if ((uVar7 + 0xbf700000 | uVar9) == 0) {\n                  uVar13 = __aeabi_dadd(uVar10,uVar2,DAT_08006ba8,DAT_08006bac);\n                  uVar14 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmpgt((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                         (int)((ulonglong)uVar14 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_080065c8,DAT_080065cc);\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar7 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar7 | uVar9) == 0) {\n                  uVar13 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmple(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_08006bf0,DAT_08006bf4);\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar7 & 0x7fffffff)) {\n                  uVar7 = (0x100000 >> (((int)(uVar7 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar7;\n                  uVar9 = (uVar7 * 2 >> 0x15) - 0x3ff;\n                  iVar4 = (int)(uVar7 & 0xfffff | 0x100000) >> (0x14 - uVar9 & 0xff);\n                  if (lVar16 < 0) {\n                    iVar4 = -iVar4;\n                  }\n                  uVar12 = __subdf3(uVar11,uVar6,0,uVar7 & ~(DAT_08006bfc >> (uVar9 & 0xff)));\n                }\n                else {\n                  iVar4 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                local_68 = (undefined4)uVar12;\n                __aeabi_dadd(local_68,local_64,uVar10,uVar2);\n                uVar12 = __muldf3(0,extraout_r1_04,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __subdf3(0,extraout_r1_04,local_68,local_64);\n                uVar13 = __subdf3(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bb8,\n                                  DAT_08006bbc);\n                uVar14 = __muldf3(0,extraout_r1_04,DAT_08006bc0,DAT_08006bc4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __aeabi_dadd((int)uVar12,uVar11,(int)uVar13,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = (undefined4)uVar14;\n                uVar12 = __subdf3(uVar10,uVar6,(int)uVar12,uVar11);\n                uVar12 = __subdf3((int)uVar13,uVar2,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar11 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar11,uVar3,DAT_08006bc8,DAT_08006bcc);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd0,\n                                  DAT_08006bd4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be0,\n                                  DAT_08006be4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3(uVar10,uVar6,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar13,uVar11);\n                uVar13 = __subdf3((int)uVar13,uVar11,0,0x40000000);\n                uVar13 = __divdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                  (int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar12,uVar2);\n                uVar12 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar2\n                                     );\n                uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                  (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar10,uVar6);\n                uVar12 = __subdf3(0,DAT_08006c00,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                if ((int)((ulonglong)uVar12 >> 0x20) + iVar4 * 0x100000 < 0x100000) {\n                  scalbn((double)CONCAT44(uVar8,uVar19),(int)uVar12);\n                }\n              }\nLAB_0800634a:\n              __muldf3();\n              return;\n            }\n          }\n          uVar12 = __subdf3();\n          uVar9 = (uint)((ulonglong)uVar12 >> 0x20);\n          uVar7 = (uint)uVar12;\n          param_1 = uVar7;\n          param_2 = uVar9;\nLAB_08006320:\n          __divdf3(uVar7,uVar9,param_1,param_2);\n          return;\n        }\n      }\n    }\n    else if ((int)uVar9 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar7 + 0xc0100000 | param_1) == 0) {\n    return;\n  }\nLAB_08006278:\n  nan(PTR_DAT_0800642c);\n  return;\n}\n\n",
            "called": [
                "fabs",
                "__aeabi_dcmple",
                "scalbn",
                "__ieee754_sqrt",
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "__muldf3",
                "nan",
                "__aeabi_dcmpgt",
                "__aeabi_i2d"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_new_value_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "left_shifted",
                "count_leading_zeroes": "count_leading_zeroes",
                "DAT_0804a7a0": "0x80000000",
                "DAT_0804a7a4": "0x7fffffff"
            },
            "code": "uint calculate_new_value_08000c3c(uint number) {\n  uint mask = DAT_0804a7a0;\n  uint count = 0;\n  while((number & mask) == 0 && mask != 0) {\n    count++;\n    mask >>= 1;\n  }\n  return count;\n}\n\nuint calculate_new_value_08000c3c(uint input) {\n  if(input == 0) {\n    return 0;\n  }\n  uint leading_zeroes = calculate_new_value_08000c3c(input);\n  uint shift = leading_zeroes - 8;\n  uint multiplier = shift * -0x800000 + 0x4a800000;\n  if(leading_zeroes > 7) {\n    uint left_shifted = input << (shift & 0xff);\n    uint right_shifted = 0U >> (0x20 - shift & 0xff);\n    uint carry = (uint)(DAT_0804a7a4 < 0);\n    uint result = multiplier + left_shifted + right_shifted + carry;\n    if((0U << (shift & 0xff)) == DAT_0804a7a0) {\n      return result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint left_shifted = input << (leading_zeroes + 0x18U & 0xff);\n  uint right_shifted = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)left_shifted >> 0x1f);\n  if((left_shifted & DAT_0804a7a4) == 0) {\n    return multiplier & ~(left_shifted >> 0x1f);\n  }\n  return multiplier + right_shifted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08000c3c"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "calculate_ticks_08001214",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr",
                "iVar2": "data_var"
            },
            "code": "uint32_t calculate_ticks_08001214(uint32_t ticks_number)\n{\n  undefined4 *ticks_ptr;\n  int data_var;\n  \n  data_var = DAT_0800123c;\n  ticks_ptr = DAT_08001238;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08001238[1] = ticks_number - 1;\n    *(undefined *)(data_var + 0x23) = 0xf0;\n    ticks_ptr[2] = 0;\n    *ticks_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_pwm_value_08003fc4",
                "pwm": "pwm_value",
                "PTR_htim4_08003fcc": "timer4_ptr"
            },
            "code": "void set_pwm_value_08003fc4(int pwm_value)\n{\n  int* timer4_reg = (int*) *(int*)PTR_htim4_08003fcc;\n  int* pwm_reg = timer4_reg + 0x40;\n  *pwm_reg = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "Motor_StopAll",
                "Motor_SetSpeed"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fc4"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "configureRCCClocks_0800209c",
                "RCC_ClkInitStruct": "clock_init_struct",
                "FLatency": "latency",
                "DAT_08002204": "flash_latency",
                "uVar4": "ticks_diff",
                "uVar5": "clock_type",
                "uVar6": "sysclk_source",
                "uVar7": "ahb_presc_table_index",
                "puVar3": "DAT_08002208",
                "PTR_SystemCoreClock_08002210": "system_core_clock_ptr",
                "PTR_AHBPrescTable_0800220c": "ahb_presc_table_ptr"
            },
            "code": "HAL_StatusTypeDef configureRCCClocks_0800209c(RCC_ClkInitTypeDef *clock_init_struct, uint32_t latency)\n{\n  uint32_t *DAT_08002204 = DAT_08002204;\n  uint32_t clock_type = clock_init_struct->ClockType;\n  uint32_t sysclk_source = clock_init_struct->SYSCLKSource;\n  uint32_t ahb_clk_divider = clock_init_struct->AHBCLKDivider;\n  uint32_t apb1_clk_divider = clock_init_struct->APB1CLKDivider;\n  uint32_t apb2_clk_divider = clock_init_struct->APB2CLKDivider;\n  uint32_t sysclk_freq;\n  uint32_t ahb_presc_table_index;\n  uint32_t ticks_start = HAL_GetTick();\n  uint32_t ticks_diff;\n\n  if (latency <= (*DAT_08002204 & 7)) {\n    *DAT_08002204 = *DAT_08002204 & 0xfffffff8 | latency;\n  } else if (latency != (*DAT_08002204 & 7)) {\n    return HAL_ERROR;\n  }\n\n  if (clock_type & RCC_CLOCKTYPE_SYSCLK) {\n    if (sysclk_source == RCC_SYSCLKSOURCE_PLLCLK) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xfffffffc | sysclk_source;\n      while (((DAT_08002208[1] & 0xc) >> 2) != 2) {\n        ticks_diff = HAL_GetTick() - ticks_start;\n        if (ticks_diff >= 5000) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (clock_type & RCC_CLOCKTYPE_HCLK) {\n      ahb_presc_table_index = count_leading_zeroes(0xf000000);\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffff0f | ahb_clk_divider;\n      sysclk_freq = HAL_RCC_GetSysClockFreq();\n      *(uint32_t *)PTR_SystemCoreClock_08002210 = sysclk_freq >> PTR_AHBPrescTable_0800220c[(DAT_08002208[1] & 0xf0) >> (ahb_presc_table_index & 0xff)];\n    }\n    if (clock_type & RCC_CLOCKTYPE_PCLK1) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xfffff8ff | apb1_clk_divider;\n    }\n    if (clock_type & RCC_CLOCKTYPE_PCLK2) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffc7ff | apb2_clk_divider << 3;\n    }\n  }\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureRCCClocks_0800209c"
        },
        "FUN_08003f0e": {
            "renaming": {
                "FUN_08003f0e": "calculateLPF_08003f0e",
                "*var": "*filter",
                "current": "currentSample",
                "uVar1": "multiplier1",
                "uVar2": "multiplier2",
                "fVar3": "beta",
                "extraout_s0": "filteredSample",
                "beta": "betaCoefficient",
                "last": "lastSample"
            },
            "code": "float calculateLPF_08003f0e(LPF *filter, float currentSample) {\n  float beta = filter->beta;\n  float oneMinusBeta = 1.0f - beta;\n  float filteredSample = oneMinusBeta * filter->last + beta * currentSample;\n  filter->last = filteredSample;\n  return filteredSample;\n}",
            "called": [
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fmul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0e",
            "calling": [
                "AHRS_GetPitch",
                "AHRS_GetRoll"
            ],
            "imported": false,
            "current_name": "calculateLPF_08003f0e"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "write_i2c_register_0800403c",
                "device_add": "device_address",
                "register_add": "register_address",
                "register_val": "register_value",
                "delay_mode": "delay_enabled",
                "HVar1": "status",
                "byte": "data",
                "PTR_hi2c1_08004074": "hi2c1",
                "PTR_s____Src_i2c_c_08004078": "__FILE__"
            },
            "code": "void write_i2c_register_0800403c(uint16_t device_address, uint16_t register_address, uint8_t register_value, uint8_t delay_enabled)\n{\n  HAL_StatusTypeDef status;\n  uint8_t data[1];\n  data[0] = register_value;\n  status = HAL_I2C_Mem_Write(&PTR_hi2c1_08004074, device_address, register_address, 1, data, 1, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____Src_i2c_c_08004078, __LINE__);\n  }\n  if (delay_enabled) {\n    delay_ms(50);\n  }\n  return;\n}",
            "called": [
                "delay_ms",
                "HAL_I2C_Mem_Write",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "MPU9250_Init",
                "MS5611_Init",
                "AK8963_Init",
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "write_i2c_register_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "PID_Update",
                "MadgwickQuaternionUpdate",
                "MPU9250_ReadAccelData",
                "PID_Compute",
                "AK8963_Init",
                "AK8963_ReadData",
                "AHRS_ComputeAngles",
                "lowPassFilter",
                "PID_UpdateAltitude",
                "MPU9250_ReadGyroData"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_0800277c": {
            "renaming": {
                "FUN_0800277c": "send_data_over_uart_0800277c",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "HVar3": "uart_state",
                "pUVar4": "uart_instance"
            },
            "code": "HAL_StatusTypeDef send_data_over_uart_0800277c(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  HAL_UART_StateTypeDef uart_state;\n  USART_TypeDef *uart_instance;\n  \n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_RX)) {\n    if ((data == NULL) || (size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->TxXferSize = size;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_RX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_TX;\n      }\n      uart_handle->TxXferCount = size;\n      uart_handle->State = uart_state;\nLAB_080027c4:\n      if (uart_handle->TxXferCount == 0) {\n        start_time = HAL_GetTick();\n        do {\n          do {\n            if ((int)(uart_handle->Instance->SR << 0x19) < 0) {\n              if (uart_handle->State == HAL_UART_STATE_BUSY_TX_RX) {\n                uart_state = HAL_UART_STATE_BUSY_RX;\n              }\n              else {\n                uart_state = HAL_UART_STATE_READY;\n              }\n              uart_handle->State = uart_state;\n              uart_handle->Lock = HAL_UNLOCKED;\n              return HAL_OK;\n            }\n          } while (timeout == 0xffffffff);\n        } while ((timeout != 0) && (current_time = HAL_GetTick(), current_time - start_time <= timeout));\n      }\n      else {\n        uart_handle->TxXferCount = uart_handle->TxXferCount - 1;\n        if ((uart_handle->Init).WordLength == UART_WORDLENGTH_9B) {\n          start_time = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = *(uint16_t *)data & 0x1ff;\n                if ((uart_handle->Init).Parity == UART_PARITY_NONE) {\n                  data = (uint8_t *)((int)data + 2);\n                }\n                else {\nLAB_08002812:\n                  data = (uint8_t *)((int)data + 1);\n                }\n                goto LAB_080027c4;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (current_time = HAL_GetTick(), current_time - start_time <= timeout));\n        }\n        else {\n          start_time = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = (uint32_t)*data;\n                goto LAB_08002812;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (current_time = HAL_GetTick(), current_time - start_time <= timeout));\n        }\n      }\n      uart_instance = uart_handle->Instance;\n      uart_instance->CR1 = uart_instance->CR1 & 0xffffff7f;\n      uart_instance->CR1 = uart_instance->CR1 & 0xffffffdf;\n      uart_instance->CR1 = uart_instance->CR1 & 0xfffffeff;\n      uart_instance->CR3 = uart_instance->CR3 & 0xfffffffe;\n      uart_handle->State = HAL_UART_STATE_READY;\n      uart_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800277c",
            "calling": [
                "serialWrite"
            ],
            "imported": false,
            "current_name": "send_data_over_uart_0800277c"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculatePIDOutput_0800483c",
                "pid": "pid",
                "input": "input",
                "set_point_offset": "set_point_offset",
                "error": "error",
                "instance": "instance",
                "error_threshold": "error_threshold",
                "con_KI": "con_KI",
                "offset": "offset",
                "con_KP": "con_KP",
                "integral": "integral",
                "integral_min": "integral_min",
                "integral_max": "integral_max",
                "last_input": "last_input",
                "derivative": "derivative",
                "con_KD": "con_KD",
                "direction": "direction",
                "output_min": "output_min",
                "output_max": "output_max",
                "output": "output",
                "last_error": "last_error",
                "time": "time"
            },
            "code": "void calculatePIDOutput_0800483c(PID_TypeDef *pid)\n{\n  float input = pid->input;\n  float set_point_offset = pid->set_point + pid->offset;\n  float error = set_point_offset - input;\n  pid->error = error;\n  if (pid->instance == 3) {\n    int is_error_gt_zero = error > 0;\n    int is_error_lt_threshold = error < pid->error_threshold;\n    if (!is_error_gt_zero) {\n      is_error_lt_threshold = error < -pid->error_threshold;\n    }\n    if (is_error_lt_threshold) {\n      float error_times_con_KI = error * pid->con_KI;\n      float error_divided_by_error_plus_offset = error / (error + pid->offset);\n      error = error - error_times_con_KI * error_divided_by_error_plus_offset;\n      pid->error = error;\n    }\n  }\n  float proportional = pid->con_KP * error;\n  float integral = pid->integral + error;\n  if (integral < pid->integral_min) {\n    integral = pid->integral_min;\n  }\n  else if (integral > pid->integral_max) {\n    integral = pid->integral_max;\n  }\n  pid->integral = integral;\n  float derivative = input - pid->last_input;\n  pid->derivative = derivative;\n  float output = pid->con_KI * integral + proportional - pid->con_KD * derivative;\n  output *= pid->direction;\n  if (output < pid->output_min) {\n    output = pid->output_min;\n  }\n  else if (output > pid->output_max) {\n    output = pid->output_max;\n  }\n  pid->output = output;\n  pid->last_input = input;\n  pid->last_error = error;\n  pid->last_time = pid->time;\n}",
            "called": [
                "__aeabi_fcmplt",
                "__floatsisf",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fdiv",
                "__aeabi_fmul",
                "__aeabi_fcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculatePIDOutput_0800483c"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "is_end_of_string_08001064",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08001064(char current_char)\n{\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "PID_Update",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001064"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_result_08000892",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "carry",
                "unaff_r4": "temp3",
                "uVar2": "mask_and_param4_shifted",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_08000892(uint param1, uint param2, uint param3, uint param4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool is_zero;\n  \n  temp1 = param1;\n  temp2 = param2;\n  temp3 = param3;\n  temp4 = param4;\n  \n  if (temp4 >> 0x14 != 0 && temp4 >> 0x14 != temp3) {\n    if (temp3 == temp4 >> 0x14) {\n      is_zero = (temp1 | temp2 << 0xc) == 0;\n      if (is_zero && temp4 >> 0x14 != temp3) {\n        return ((temp2 ^ temp4) & mask | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp4 >> 0x14 == temp3) {\n      is_zero = (temp3 | temp4 << 0xc) == 0;\n      if (is_zero) {\n        return ((temp2 ^ temp4) & mask) << 0x20;\n      }\n    }\n    else {\n      is_zero = (temp1 | temp2 << 1) == 0 || (temp3 | temp4 << 1) == 0;\n      if (!is_zero) {\n        if (temp3 == 0) {\n          uint carry = 0;\n          while ((temp2 & 0x100000) == 0) {\n            carry = temp1 & mask;\n            temp1 = temp1 << 1;\n            temp2 = temp2 * 2 + (carry != 0);\n          }\n          temp2 |= temp4 & mask;\n          if (temp4 >> 0x14 != 0) {\n            return ((ulonglong)temp2 << 0x20) | temp1;\n          }\n        }\n        else {\n          uint carry = 0;\n          while ((temp4 & 0x100000) == 0) {\n            carry = temp3 & mask;\n            temp3 = temp3 << 1;\n            temp4 = temp4 * 2 + (carry != 0);\n          }\n          return ((ulonglong)temp2 << 0x20) | temp1;\n        }\n      }\n      else {\n        if ((temp1 | temp2 << 1) == 0) {\n          return ((temp2 ^ temp4) & mask | 0x7ff00000) << 0x20;\n        }\n        else if ((temp3 | temp4 << 1) == 0) {\n          return ((temp2 ^ temp4) & mask) << 0x20;\n        }\n      }\n    }\n  }\n  return ((ulonglong)temp2 << 0x20) | temp1 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_and_send_data_08004458",
                "puVar1": "destination_ptr",
                "uVar2": "temp_variable_1",
                "puVar3": "destination_ptr_2",
                "puVar4": "source_ptr_2",
                "puVar5": "source_ptr",
                "local_30": "temp_buffer",
                "local_24": "temp_buffer_2"
            },
            "code": "void copy_and_send_data_08004458(void)\n{\n  uint8_t *source_ptr;\n  uint8_t *destination_ptr;\n  uint8_t temp_buffer [3];\n  uint16_t temp_buffer_2 [10];\n  source_ptr = (uint8_t *)msp_txf_pid;\n  do {\n    destination_ptr = (uint8_t *)temp_buffer;\n    destination_ptr[0] = source_ptr[0];\n    destination_ptr[1] = source_ptr[4];\n    destination_ptr[2] = source_ptr[8];\n    source_ptr += 0xC;\n    MSP_SendFrame('p', temp_buffer, 0x1e);\n  } while (source_ptr != (uint8_t *)(msp_txf_pid + 0x18));\n  destination_ptr = (uint8_t *)temp_buffer;\n  destination_ptr[0] = source_ptr[0];\n  destination_ptr[1] = source_ptr[4];\n  *(uint16_t *)(destination_ptr + 2) = *(uint16_t *)(source_ptr + 8);\n  MSP_SendFrame('p', temp_buffer, 0x1e);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_and_send_data_08004458"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "configure_I2C_GPIO_pins_08004d48",
                "hi2c": "I2C_handle",
                "GPIO_InitStruct": "GPIO_Init_Struct",
                "tmpreg": "tmp_register",
                "DAT_08004d80": "I2C1",
                "0xc0": "GPIO_PIN_6 | GPIO_PIN_7",
                "0x12": "GPIO_MODE_AF_OD",
                "3": "GPIO_SPEED_FREQ_HIGH",
                "DAT_08004d84": "GPIOB",
                "DAT_08004d88": "0x40013800"
            },
            "code": "void configure_I2C_GPIO_pins_08004d48(I2C_HandleTypeDef *I2C_handle)\n{\n  uint32_t tmp_register;\n  GPIO_InitTypeDef GPIO_Init_Struct;\n  \n  if (I2C_handle->Instance == DAT_08004d80) {\n    GPIO_Init_Struct.Pin = GPIO_PIN_6 | GPIO_PIN_7;\n    GPIO_Init_Struct.Mode = GPIO_MODE_AF_OD;\n    GPIO_Init_Struct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004d84, &GPIO_Init_Struct);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "configure_I2C_GPIO_pins_08004d48"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "configure_timer_08002280",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "cc_enable_reg_value",
                "uVar2": "cr2_reg_value",
                "uVar3": "oc_mode",
                "CCER": "cc_enable_mask",
                "DAT_080022cc": "PTR_080022cc"
            },
            "code": "void configure_timer_08002280(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n  uint32_t cc_enable_mask = 0xfffffffe;\n  uint32_t cr2_reg_value = timer->CR2;\n  uint oc_mode = output_channel_config->OCMode;\n  uint32_t cc_enable_reg_value = (timer->CCER & 0xfffffffd) | output_channel_config->OCPolarity;\n  if (timer == DAT_080022cc) {\n    cc_enable_reg_value = (cc_enable_reg_value & 0xfffffff7) | output_channel_config->OCNPolarity;\n    cr2_reg_value = (cr2_reg_value & 0xfffffcff) | output_channel_config->OCIdleState | output_channel_config->OCNIdleState;\n  }\n  timer->CR2 = cr2_reg_value;\n  timer->CCMR1 = (timer->CCMR1 & 0xffffff8c) | oc_mode;\n  timer->CCR1 = output_channel_config->Pulse;\n  timer->CCER = cc_enable_reg_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "set_interrupt_priority_08001194",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_value",
                "uVar3": "priority_group_bits",
                "uVar4": "priority_shift_amount",
                "uVar5": "priority_group_size"
            },
            "code": "void set_interrupt_priority_08001194(IRQn_Type irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)irq;\n  uint32_t priority_group_bits = (*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  uint32_t priority_group_size = 1 << priority_group_bits;\n  uint32_t priority_group_mask = priority_group_size - 1;\n  uint32_t priority_shift_amount = (irq_num < 0) ? (irq_num & 0xf) : 0xe000e100 + irq_num;\n  uint32_t priority_value = (sub_priority & priority_group_mask) | ((preempt_priority & (priority_group_size - 1)) << priority_group_bits);\n  *(undefined *)(priority_shift_amount + 0x300) = (undefined)(priority_value << 4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "HAL_MspInit",
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001194"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "send_identification_frame_08004348",
                "puVar1": "msp_txf_ident_ptr",
                "local_10": "identification_data",
                "local_c": "identification_length"
            },
            "code": "void send_identification_frame_08004348(void)\n{\n  uint32_t *msp_txf_ident_ptr;\n  uint32_t identification_data;\n  uint32_t identification_length;\n\n  msp_txf_ident_ptr = PTR_msp_txf_ident_08004380;\n  *msp_txf_ident_ptr = 0xe9;\n  *(uint8_t *)(msp_txf_ident_ptr + 1) = 3;\n  *(uint8_t *)(msp_txf_ident_ptr + 3) = 4;\n  *(uint16_t *)(msp_txf_ident_ptr + 2) = 0;\n  identification_data = *msp_txf_ident_ptr;\n  *(uint8_t *)(msp_txf_ident_ptr + 4) = 0;\n  *(uint8_t *)(msp_txf_ident_ptr + 5) = 0;\n  *(uint8_t *)(msp_txf_ident_ptr + 6) = 0;\n  identification_length = (in_r1 & 0xff000000) | *(uint16_t *)(msp_txf_ident_ptr + 4);\n  MSP_SendFrame('d', (uint8_t *)&identification_data, 7);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_identification_frame_08004348"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "extract_bits_from_integer_08001078",
                "param_1": "input_integer",
                "uVar1": "shift_amount",
                "uVar2": "shifted_amount",
                "output_integer": "output_integer"
            },
            "code": "int32_t extract_bits_from_integer_08001078(int32_t input_integer) {\n  int32_t shift_amount;\n  int32_t shifted_input;\n  int32_t output_integer;\n  if (input_integer << 1 < 0x7f000000) {\n    return 0;\n  }\n  shift_amount = (input_integer << 1) >> 0x18;\n  shifted_input = input_integer << 8 | 0x80000000;\n  if (shift_amount < 0x9f && (0x9e - shift_amount) != 0) {\n    output_integer = shifted_input >> (0x9e - shift_amount);\n    if ((input_integer & 0x80000000) != 0) {\n      output_integer = -output_integer;\n    }\n    return output_integer;\n  }\n  if ((0x9e - shift_amount) == 0xffffff9f && ((input_integer & 0x7fffff) != 0)) {\n    return 0;\n  }\n  if ((input_integer & 0x80000000) == 0) {\n    return 0x7fffffff;\n  }\n  return input_integer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "extract_bits_from_integer_08001078"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "initializeI2C_08001754",
                "hi2c": "i2cHandle",
                "uVar1": "pclkFreq",
                "extraout_r1": "ccrValue",
                "uVar2": "riseTime",
                "pIVar3": "i2cInstance",
                "uVar4": "clockSpeed",
                "uVar5": "DAT_08001820",
                "uVar6": "noStretchMode",
                "PTR_08001824": "1000000U"
            },
            "code": "HAL_StatusTypeDef initializeI2C_08001754(I2C_HandleTypeDef *i2cHandle)\n{\n  uint32_t pclkFreq;\n  uint32_t clockSpeed;\n  uint32_t ccrValue;\n  uint32_t riseTime;\n  uint32_t ownAddress1;\n  uint32_t ownAddress2;\n  uint32_t dualAddressMode;\n  uint32_t addressingMode;\n  uint32_t generalCallMode;\n  uint32_t noStretchMode;\n  I2C_TypeDef *i2cInstance;\n  if (i2cHandle == NULL) {\n    return HAL_ERROR;\n  }\n  if (i2cHandle->State == HAL_I2C_STATE_RESET) {\n    i2cHandle->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(i2cHandle);\n  }\n  i2cHandle->State = HAL_I2C_STATE_BUSY;\n  pclkFreq = HAL_RCC_GetPCLK1Freq();\n  clockSpeed = (i2cHandle->Init).ClockSpeed;\n  ccrValue = 0;\n  riseTime = 0;\n  ownAddress1 = (i2cHandle->Init).OwnAddress1;\n  ownAddress2 = (i2cHandle->Init).OwnAddress2;\n  dualAddressMode = (i2cHandle->Init).DualAddressMode;\n  addressingMode = (i2cHandle->Init).AddressingMode;\n  generalCallMode = (i2cHandle->Init).GeneralCallMode;\n  noStretchMode = (i2cHandle->Init).NoStretchMode;\n  i2cInstance = i2cHandle->Instance;\n  if (clockSpeed <= 100000U) {\n    ccrValue = pclkFreq / (clockSpeed << 1U);\n    if (ccrValue < 4U) {\n      ccrValue = 4U;\n    }\n    riseTime = pclkFreq / PTR_08001824 + 1U;\n    if ((i2cHandle->Init).DutyCycle == I2C_DUTYCYCLE_2) {\n      ccrValue |= 0x4000U;\n    }\n  }\n  else {\n    if (noStretchMode == I2C_NOSTRETCH_ENABLE) {\n      return HAL_ERROR;\n    }\n    ccrValue = pclkFreq / (clockSpeed * 3U);\n    if (ccrValue < 1U) {\n      ccrValue = 1U;\n    }\n    riseTime = (pclkFreq / PTR_08001824) * 300U / 1000U + 1U;\n  }\n  i2cInstance->CR2 = pclkFreq / PTR_08001824;\n  i2cInstance->CCR = ccrValue;\n  i2cInstance->TRISE = riseTime;\n  i2cInstance->OAR1 = addressingMode | ownAddress1;\n  i2cInstance->OAR2 = dualAddressMode | ownAddress2;\n  i2cInstance->CR1 = generalCallMode | noStretchMode | I2C_CR1_PE;\n  i2cHandle->ErrorCode = HAL_I2C_ERROR_NONE;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MspInit",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initializeI2C_08001754"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "huart": "uart_handle",
                "pUVar1": "uart_instance"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002724(UART_HandleTypeDef* uart_handle)\n{\n  USART_TypeDef* uart_instance;\n  \n  if (uart_handle != NULL)\n  {\n    if (uart_handle->State == HAL_UART_STATE_RESET)\n    {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    \n    uart_handle->State = HAL_UART_STATE_BUSY;\n    \n    // Clearing the 13th bit of CR1 register\n    uart_handle->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart_handle);\n    \n    uart_instance = uart_handle->Instance;\n    // Clearing the 11th bit of CR2 register\n    uart_instance->CR2 &= ~(1 << 11);\n    // Clearing the 3rd and 4th bit of CR3 register\n    uart_instance->CR3 &= ~(1 << 3);\n    uart_instance->CR3 &= ~(1 << 4);\n    // Setting the 13th bit of CR1 register\n    uart_instance->CR1 |= (1 << 13);\n    \n    uart_handle->ErrorCode = 0;\n    uart_handle->State = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002724"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "send_motor_data_080043f0",
                "local_10": "motor_data_1",
                "uStack_c": "motor_data_2",
                "PTR_msp_txf_motor_0800440c": "PTR_motor_data"
            },
            "code": "void send_motor_data_080043f0(void)\n{\n  uint32_t motor_data_1;\n  uint32_t motor_data_2;\n  motor_data_1 = *(uint32_t *)PTR_msp_txf_motor_0800440c;\n  motor_data_2 = *(uint32_t *)(PTR_msp_txf_motor_0800440c + 4);\n  MSP_SendFrame('h', (uint8_t *)&motor_data_1, 8);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_motor_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "reverseBits_08000428",
                "param_1": "num",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "mask",
                "uVar1": "sign",
                "uVar2": "num2",
                "uVar3": "reversed",
                "uVar4": "bits",
                "uVar5": "shift",
                "uVar7": "shiftAmount",
                "iVar6": "leadingZeros",
                "bVar8": "isZero2",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "code": "ulonglong reverseBits_08000428(uint num, undefined4 param_2, undefined4 param_3, uint mask)\n{\n  uint shift = num << 1;\n  bool isZero = shift == 0;\n  uint sign = (uint)((num & 0x80000000) != 0) << 0x1f;\n  uint bits = (uint)((int)shift >> 3) >> 1;\n  uint reversed = sign | bits;\n  num = num << 0x1d;\n  if (!isZero) {\n    mask = shift & 0xff000000;\n    isZero = mask == 0;\n  }\n  if (!isZero) {\n    isZero = mask == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(reversed, num) ^ 0x3800000000000000;\n  }\n  if (shift == 0 || mask == 0xff000000) {\n    return CONCAT44(reversed, num);\n  }\n  uint bits2 = bits;\n  uint num2 = num;\n  if (bits == 0) {\n    num2 = 0;\n    bits2 = num;\n  }\n  int leadingZeros = count_leading_zeroes(bits2);\n  if (bits == 0) {\n    leadingZeros = leadingZeros + 0x20;\n  }\n  uint shiftAmount = leadingZeros - 0xb;\n  bool isNegative = shiftAmount < 0;\n  bool isZero2 = shiftAmount == 0;\n  bool isCarry = SBORROW4(shiftAmount, 0x20);\n  if (!isNegative) {\n    isCarry = SCARRY4(leadingZeros - 0x2b, 0xc);\n    leadingZeros = leadingZeros + -0x1f;\n    isZero2 = leadingZeros == 0;\n    isNegative = leadingZeros < 0;\n    shiftAmount = shiftAmount < 0x20 ? shiftAmount : 0x20 - bits2;\n    if (!isZero2 && isNegative == isCarry) {\n      num2 = bits2 << (shiftAmount & 0xff);\n      bits2 = bits2 >> ((0xc - leadingZeros) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero2 || isNegative != isCarry) {\n    shiftAmount = 0x20 - shiftAmount;\n  }\n  bits2 = bits2 << (shiftAmount & 0xff);\n  if (isZero2 || isNegative != isCarry) {\n    bits2 = bits2 | num2 >> ((0x20 - shiftAmount) & 0xff);\n  }\n  if (isZero2 || isNegative != isCarry) {\n    num2 = num2 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftAmount < 0x381) {\n    return CONCAT44(bits2 + (0x380 - shiftAmount) * 0x100000 | sign, num2);\n  }\n  uint shiftAmount2 = ~(0x380 - shiftAmount);\n  if ((int)shiftAmount2 < 0x1f) {\n    int shiftAmount3 = shiftAmount2 - 0x13;\n    if (shiftAmount3 != 0 && shiftAmount3 < 0 == SCARRY4(shiftAmount2 - 0x1f, 0xc)) {\n      return CONCAT44(reversed, num2 >> ((0x20 - (0xcU - shiftAmount3)) & 0xff) | bits2 << ((0xcU - shiftAmount3) & 0xff)) & 0x80000000ffffffff;\n    }\n    shiftAmount2 = shiftAmount2 + 1;\n    return CONCAT44(sign | bits2 >> (shiftAmount2 & 0xff), num2 >> (shiftAmount2 & 0xff) | bits2 << ((0x20 - shiftAmount2) & 0xff));\n  }\n  return CONCAT44(reversed, bits2 >> ((shiftAmount2 - 0x1f) & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "MadgwickQuaternionUpdate",
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "reverseBits_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "initialize_interrupts_08004ccc",
                "tmpreg": "interrupt_flags"
            },
            "code": "void initialize_interrupts_08004ccc(void)\n{\n  uint32_t interrupt_flags;\n  interrupt_flags = *(uint *)(DAT_08004d44 + 0x18);\n  interrupt_flags |= 1;\n  *(uint *)(DAT_08004d44 + 0x18) = interrupt_flags;\n\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  HAL_NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  HAL_NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_4, 0, 0));\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "initialize_interrupts_08004ccc"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "receive_uart_data_08004c30",
                "*huart": "*uart_handle",
                "pData": "data_ptr",
                "PTR_rx_buffer_08004c58": "rx_buffer_ptr",
                "DAT_08004c54": "uart_instance_ptr",
                "PTR_rxc_08004c5c": "rx_circular_buffer_ptr",
                "PTR_huart1_08004c60": "uart_handle_ptr"
            },
            "code": "void receive_uart_data_08004c30(UART_HandleTypeDef *uart_handle)\n{\n  uint8_t *data_ptr;\n  data_ptr = PTR_rx_buffer_08004c58;\n  if (uart_handle->Instance == DAT_08004c54) {\n    circular_buffer_write(PTR_rxc_08004c5c, *PTR_rx_buffer_08004c58);\n    HAL_UART_Receive_IT(PTR_huart1_08004c60, data_ptr, 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "CB_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "scalbn",
                "MS5611_Update",
                "pow",
                "__ieee754_asin",
                "atan",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "calculate_distance_0800729c",
                "__x": "x",
                "__y": "y",
                "in_d0": "distance"
            },
            "code": "double calculate_distance_0800729c(double x, double y)\n{\n  double distance;\n  distance = sqrt(pow(x, 2) + pow(y, 2));\n  return distance;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "scalbn"
            ],
            "imported": false,
            "current_name": "calculate_distance_0800729c"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "runTaskScheduler_080041ae",
                "setup": "setupTasks",
                "taskScheduler": "executeScheduledTasks"
            },
            "code": "int runTaskScheduler_080041ae(void)\n{\n  startForkserver(0);\n  setupTasks();\n  do {\n    HAL_IncTick();\n    executeScheduledTasks();\n  } while( true );\n}",
            "called": [
                "HAL_IncTick",
                "startForkserver",
                "taskScheduler",
                "setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runTaskScheduler_080041ae"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08005424;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08005498;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar6 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_0800557a:\n    *puVar3 = uVar7;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "stopAllMotors_080041c4"
            },
            "code": "void stopAllMotors_080041c4(void)\n{\n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0);\n  return;\n}\n",
            "called": [
                "Motor2_SetPWM",
                "Motor3_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "stopAllMotors_080041c4"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "param_1": "errorCode",
                "param_2": "size",
                "param_3": "filler1",
                "param_4": "filler2",
                "puVar1": "listPtr",
                "extraout_r1": "prevPtr",
                "ppiVar2": "prevPtr",
                "ppiVar3": "nextPtr",
                "piVar4": "chunkPtr",
                "ppiVar5": "currentPtr",
                "ppiVar6": "prevListPtr",
                "ppiVar7": "listPtr"
            },
            "code": "void allocate_memory_0800567c(int *errorCode, int size, int filler1, int filler2)\n{\n  int **listPtr;\n  int **prevPtr;\n  int **nextPtr;\n  int *chunkPtr;\n  int **currentPtr;\n  int **prevListPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  currentPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    currentPtr = (int **)((int)currentPtr + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  listPtr = *(int ***)PTR___malloc_free_list_08005710;\n  prevListPtr = (int **)&PTR___malloc_free_list_08005710;\n  while (listPtr != NULL) {\n    if (listPtr > currentPtr) {\n      break;\n    }\n    prevPtr = listPtr;\n    listPtr = (int **)listPtr[1];\n  }\n  if (listPtr == currentPtr + (int **)*currentPtr) {\n    chunkPtr = *listPtr;\n    nextPtr = (int **)listPtr[1];\n    currentPtr = (int **)((int)currentPtr + (int)*currentPtr);\n    *prevPtr = (int *)currentPtr;\n    if (nextPtr == currentPtr) {\n      chunkPtr = *nextPtr;\n      nextPtr = (int **)nextPtr[1];\n      currentPtr = (int **)((int)currentPtr + (int)chunkPtr);\n      *prevPtr = (int *)currentPtr;\n      prevPtr[1] = (int *)nextPtr;\n    }\n  }\n  else if (currentPtr < listPtr + (int **)*listPtr) {\n    *errorCode = 0xc;\n  }\n  else {\n    chunkPtr = (int *)*currentPtr;\n    nextPtr = (int **)currentPtr[1];\n    currentPtr = (int **)((int)currentPtr + (int)chunkPtr);\n    currentPtr[1] = (int *)nextPtr;\n    prevListPtr[1] = (int *)currentPtr;\n    prevPtr = prevListPtr;\n  }\n  __malloc_unlock(errorCode, currentPtr, prevPtr, filler2);\n  return;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "_realloc_r",
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  GPIO_TypeDef *GPIOx;\n  undefined4 uVar1;\n  undefined *huart;\n  HAL_StatusTypeDef HVar2;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  TIM_MasterConfigTypeDef sMasterConfig;\n  TIM_OC_InitTypeDef sConfigOC;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  undefined *puVar3;\n  \n  HAL_Init();\n  SystemClock_Config();\n  GPIOx = DAT_08004800;\n  iVar5 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  uVar6 = 2;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 8;\n  HAL_GPIO_WritePin(GPIOx,0xe000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004808,0x20,GPIO_PIN_RESET);\n  GPIO_InitStruct.Pin = 0xe000;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004800,&GPIO_InitStruct);\n  GPIO_InitStruct.Pin = 0x20;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004808,&GPIO_InitStruct);\n  puVar3 = PTR_hi2c1_0800480c;\n  *(undefined4 *)PTR_hi2c1_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar3 + 4) = uVar1;\n  *(undefined4 *)(puVar3 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar3 + 8) = 0;\n  *(undefined4 *)(puVar3 + 0xc) = 0;\n  *(undefined4 *)(puVar3 + 0x14) = 0;\n  *(undefined4 *)(puVar3 + 0x18) = 0;\n  *(undefined4 *)(puVar3 + 0x1c) = 0;\n  *(undefined4 *)(puVar3 + 0x20) = 0;\n  HVar2 = HAL_I2C_Init((I2C_HandleTypeDef *)puVar3);\n  puVar3 = (undefined *)(uint)HVar2;\n  if (puVar3 == (undefined *)0x0) goto LAB_0800463a;\n  iVar5 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  puVar3 = PTR_s____Src_peripherals_c_08004814;\n                                  _Error_Handler(PTR_s____Src_peripherals_c_08004814,iVar5);\nLAB_0800463a:\n                                  uVar1 = DAT_0800481c;\n                                  huart = PTR_huart1_08004818;\n                                  *(undefined **)(PTR_huart1_08004818 + 8) = puVar3;\n                                  *(undefined **)(huart + 0xc) = puVar3;\n                                  *(undefined **)(huart + 0x10) = puVar3;\n                                  *(undefined **)(huart + 0x18) = puVar3;\n                                  *(undefined **)(huart + 0x1c) = puVar3;\n                                  *(undefined4 *)huart = uVar1;\n                                  *(undefined4 *)(huart + 4) = 0x1c200;\n                                  *(undefined4 *)(huart + 0x14) = 0xc;\n                                  HVar2 = HAL_UART_Init((UART_HandleTypeDef *)huart);\n                                  uVar1 = DAT_08004824;\n                                  puVar3 = PTR_htim1_08004820;\n                                  if (HVar2 == HAL_OK) break;\n                                  iVar5 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_htim1_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar3 + 0x10) = 0;\n                                *(undefined4 *)(puVar3 + 0x14) = 0;\n                                *(undefined4 *)puVar3 = uVar1;\n                                *(uint *)(puVar3 + 4) = uVar6;\n                                *(undefined4 *)(puVar3 + 0xc) = 1000;\n                                HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                                uVar4 = (uint)HVar2;\n                                if (uVar4 == 0) break;\n                                iVar5 = 0x88;\n                              }\n                              sMasterConfig.MasterOutputTrigger = uVar4;\n                              sMasterConfig.MasterSlaveMode = uVar4;\n                              HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                                ((TIM_HandleTypeDef *)puVar3,&sMasterConfig);\n                              uVar4 = (uint)HVar2;\n                              if (uVar4 == 0) break;\n                              iVar5 = 0x8f;\n                            }\n                            sConfigOC.OCMode = 0x60;\n                            sConfigOC.Pulse = uVar4;\n                            sConfigOC.OCPolarity = uVar4;\n                            sConfigOC.OCFastMode = uVar4;\n                            sConfigOC.OCIdleState = uVar4;\n                            sConfigOC.OCNIdleState = uVar4;\n                            HVar2 = HAL_TIM_PWM_ConfigChannel\n                                              ((TIM_HandleTypeDef *)puVar3,&sConfigOC,0xc);\n                            uVar4 = (uint)HVar2;\n                            if (uVar4 == 0) break;\n                            iVar5 = 0x9a;\n                          }\n                          GPIO_InitStruct.Pin = uVar4;\n                          GPIO_InitStruct.Mode = uVar4;\n                          GPIO_InitStruct.Pull = uVar4;\n                          GPIO_InitStruct.Speed = uVar4;\n                          HVar2 = HAL_TIMEx_ConfigBreakDeadTime\n                                            ((TIM_HandleTypeDef *)puVar3,\n                                             (TIM_BreakDeadTimeConfigTypeDef *)&GPIO_InitStruct);\n                          if (HVar2 == HAL_OK) break;\n                          iVar5 = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                        puVar3 = PTR_htim2_08004828;\n                        *(undefined4 *)PTR_htim2_08004828 = 0x40000000;\n                        *(uint *)(puVar3 + 4) = uVar6;\n                        *(undefined4 *)(puVar3 + 8) = 0;\n                        *(undefined4 *)(puVar3 + 0xc) = 1000;\n                        *(undefined4 *)(puVar3 + 0x10) = 0;\n                        HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                        uVar4 = (uint)HVar2;\n                        if (uVar4 == 0) break;\n                        iVar5 = 0xc3;\n                      }\n                      sConfigOC.OCMode = uVar4;\n                      sConfigOC.Pulse = uVar4;\n                      HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                        ((TIM_HandleTypeDef *)puVar3,\n                                         (TIM_MasterConfigTypeDef *)&sConfigOC);\n                      uVar4 = (uint)HVar2;\n                      if (uVar4 == 0) break;\n                      iVar5 = 0xca;\n                    }\n                    GPIO_InitStruct.Pin = 0x60;\n                    GPIO_InitStruct.Mode = uVar4;\n                    GPIO_InitStruct.Pull = uVar4;\n                    HVar2 = HAL_TIM_PWM_ConfigChannel\n                                      ((TIM_HandleTypeDef *)puVar3,\n                                       (TIM_OC_InitTypeDef *)&GPIO_InitStruct,4);\n                    if (HVar2 == HAL_OK) break;\n                    iVar5 = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                  uVar1 = DAT_08004830;\n                  puVar3 = PTR_htim3_0800482c;\n                  *(undefined4 *)(PTR_htim3_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar3 = uVar1;\n                  *(uint *)(puVar3 + 4) = uVar6;\n                  *(undefined4 *)(puVar3 + 8) = 0;\n                  *(undefined4 *)(puVar3 + 0x10) = 0;\n                  HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                  if (HVar2 == HAL_OK) break;\n                  iVar5 = 0xf0;\n                }\n                sConfigOC.OCMode = 0;\n                sConfigOC.Pulse = 0;\n                HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                  ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                   (TIM_MasterConfigTypeDef *)&sConfigOC);\n                uVar4 = (uint)HVar2;\n                if (uVar4 == 0) break;\n                iVar5 = 0xf7;\n              }\n              GPIO_InitStruct.Pin = 0x60;\n              GPIO_InitStruct.Mode = uVar4;\n              GPIO_InitStruct.Pull = uVar4;\n              HVar2 = HAL_TIM_PWM_ConfigChannel\n                                ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                 (TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n              if (HVar2 == HAL_OK) break;\n              iVar5 = 0x100;\n            }\n            HVar2 = HAL_TIM_PWM_ConfigChannel\n                              ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                               (TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n            uVar6 = (uint)HVar2;\n            if (uVar6 == 0) break;\n            iVar5 = 0x105;\n          }\n          HAL_TIM_MspPostInit((TIM_HandleTypeDef *)PTR_htim3_0800482c);\n          puVar3 = PTR_htim4_08004834;\n          *(undefined4 *)PTR_htim4_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar3 + 4) = 2;\n          *(undefined4 *)(puVar3 + 8) = 0;\n          *(undefined4 *)(puVar3 + 0xc) = 1000;\n          *(undefined4 *)(puVar3 + 0x10) = 0;\n          HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n          uVar4 = (uint)HVar2;\n          if (uVar4 == 0) break;\n          iVar5 = 0x122;\n        }\n        sConfigOC.OCMode = uVar4;\n        sConfigOC.Pulse = uVar4;\n        HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                          ((TIM_HandleTypeDef *)puVar3,(TIM_MasterConfigTypeDef *)&sConfigOC);\n        uVar4 = (uint)HVar2;\n        if (uVar4 == 0) break;\n        iVar5 = 0x129;\n      }\n      GPIO_InitStruct.Pin = 0x60;\n      GPIO_InitStruct.Mode = uVar4;\n      GPIO_InitStruct.Pull = uVar4;\n      HVar2 = HAL_TIM_PWM_ConfigChannel\n                        ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n      if (HVar2 == HAL_OK) break;\n      iVar5 = 0x132;\n    }\n    HVar2 = HAL_TIM_PWM_ConfigChannel\n                      ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n    if (HVar2 == HAL_OK) break;\n    iVar5 = 0x137;\n  }\n  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n  return;\n}\n\n",
            "called": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_MasterConfigSynchronization",
                "SystemClock_Config",
                "HAL_UART_Init",
                "HAL_Init",
                "HAL_I2C_Init",
                "HAL_GPIO_WritePin",
                "_Error_Handler",
                "HAL_GPIO_Init",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "compareFloats_08000ffc",
                "param_1": "firstFloat",
                "param_2": "secondFloat"
            },
            "code": "void compareFloats_08000ffc(float firstFloat, float secondFloat)\n{\n  __aeabi_cfcmpeq(secondFloat, firstFloat);\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compareFloats_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_i2c_status_080016f4",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pIVar3": "i2c_instance",
                "SR1": "I2C_SR1",
                "HAL_OK": "HAL_OK",
                "ErrorCode": "I2C_ERROR",
                "State": "I2C_STATE",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_080016f4(I2C_HandleTypeDef *i2c_handler, uint32_t timeout)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  I2C_TypeDef *i2c_instance;\n  start_time = HAL_GetTick();\n  while (true) {\n    i2c_instance = i2c_handler->Instance;\n    if ((i2c_instance->SR1 & I2C_SR1_BTF) != 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x1b) < 0) break;\n    if ((timeout == 0) || (current_time = HAL_GetTick(), timeout < current_time - start_time)) {\n      i2c_handler->ErrorCode = i2c_handler->ErrorCode | I2C_ERROR_TIMEOUT;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_instance->SR1 = i2c_instance->SR1 & I2C_SR1_AF;\n  i2c_handler->ErrorCode = 0;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2c_status_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "configure_timer_080025a4",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "uVar1": "master_slave_mode",
                "HVar2": "status",
                "pTVar3": "timer_instance",
                "uVar4": "master_output_trigger"
            },
            "code": "HAL_StatusTypeDef configure_timer_080025a4(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  uint32_t master_output_trigger;\n  HAL_StatusTypeDef status = HAL_BUSY;\n  TIM_TypeDef *timer_instance;\n  uint32_t master_slave_mode;\n  \n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    timer_instance = timer_handle->Instance;\n    master_output_trigger = master_config->MasterOutputTrigger;\n    master_slave_mode = master_config->MasterSlaveMode;\n    timer_instance->CR2 &= 0xffffff8f;\n    timer_instance->CR2 |= master_output_trigger;\n    timer_instance->SMCR &= 0xffffff7f;\n    timer_instance->SMCR |= master_slave_mode;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timer_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_080025a4"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "read_MS5611_data_08003034",
                "in_r3": "sensor_address",
                "rxbuf": "rx_buffer",
                "_rxbuf": "_rx_buffer"
            },
            "code": "uint32_t read_MS5611_data_08003034(void)\n{\n  uint8_t rx_buffer[3];\n  uint32_t data;\n\n  _rx_buffer = sensor_address;\n  I2C_ReadBytes(sensor_address, 0, rx_buffer, 3, PTR_s____Src_MS5611_c_08003064, 0x8c);\n  data = (uint32_t) (rx_buffer[0] << 16 | rx_buffer[1] << 8 | rx_buffer[2]);\n  return data;\n}",
            "called": [
                "I2C_ReadBytes"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "read_MS5611_data_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "initialize_UART_08004e7c",
                "huart": "uart_handle",
                "tmpreg": "tmp_reg",
                "GPIO_InitStruct": "gpio_init_struct",
                "Instance": "USART1",
                "CR3": "CR3",
                "Pin": "GPIO_PIN_",
                "Mode": "GPIO_MODE_",
                "Speed": "GPIO_SPEED_FREQ_",
                "Pull": "GPIO_PULL_"
            },
            "code": "void initialize_UART_08004e7c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t tmp_reg;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  if (uart_handle->Instance == USART1) {\n    DAT_08004edc[0x7b7].CR3 = DAT_08004edc[0x7b7].CR3 | 0x4000;\n    gpio_init_struct.Pin = GPIO_PIN_9;\n    gpio_init_struct.Mode = GPIO_MODE_AF_PP;\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init_struct);\n    gpio_init_struct.Pin = GPIO_PIN_10;\n    gpio_init_struct.Mode = GPIO_MODE_INPUT;\n    gpio_init_struct.Pull = GPIO_NOPULL;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init_struct);\n    HAL_NVIC_SetPriority(USART1_IRQn,0,0);\n    HAL_NVIC_EnableIRQ(USART1_IRQn);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_UART_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "I2C_Transmit_08001530",
                "hi2c": "handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_tick",
                "uVar3": "current_tick",
                "pIVar4": "i2c_instance",
                "tmpreg": "N/A"
            },
            "code": "HAL_StatusTypeDef I2C_Transmit_08001530(I2C_HandleTypeDef *handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout) {\n  HAL_StatusTypeDef status;\n  uint32_t start_tick, current_tick;\n  I2C_TypeDef *i2c_instance;\n  handle->Instance->CR1 |= I2C_CR1_ACK;\n  start_tick = HAL_GetTick();\n  do {\n    do {\n      if ((int)(handle->Instance->SR1 << 0x1f) < 0) {\n        handle->Instance->DR = device_address & 0xfe;\n        status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, timeout);\n        if (status == HAL_OK) {\n          status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n          if (status == HAL_OK) {\n            i2c_instance = handle->Instance;\n            if (memory_address_size == 1) {\n              i2c_instance->DR = (uint)(byte)memory_address;\n              return status;\n            }\n            i2c_instance->DR = (uint)(memory_address >> 8);\n            status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n            if (status == HAL_OK) {\n              i2c_instance = handle->Instance;\n              goto LAB_080015ca;\n            }\n          }\n          if (handle->ErrorCode != 4) {\n            return HAL_TIMEOUT;\n          }\n          handle->Instance->CR1 |= I2C_CR1_STOP;\n        }\n        else if (handle->ErrorCode != 4) {\n          return HAL_TIMEOUT;\n        }\n        return HAL_ERROR;\n      }\n    } while (timeout == 0xffffffff);\n    current_tick = HAL_GetTick();\n    if ((timeout == 0) || (timeout < current_tick - start_tick)) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  } while( true );\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "I2C_Transmit_08001530"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "updateSensorsAndCommunications_0800411c",
                "puVar1": "lastTick",
                "uVar2": "currentMillis",
                "PTR_last_tick1_08004188": "lastTick1",
                "PTR_last_tick3_0800418c": "lastTick3",
                "PTR_last_tick2_08004190": "lastTick2",
                "AHRS_ComputeAngles": "computeAHRSAngles",
                "PID_Update": "updatePID",
                "MSP_SendIdent": "sendMSPIdent",
                "MSP_SendStatus": "sendMSPStatus",
                "MSP_SendMotor": "sendMSPMotor",
                "MSP_SendAttitude": "sendMSPAttitude",
                "MSP_SendAltitude": "sendMSPAltitude",
                "MSP_SendRawIMU": "sendMSPRawIMU",
                "MSP_SendPID": "sendMSPPID",
                "MS5611_Update": "updateMS5611"
            },
            "code": "void updateSensorsAndCommunications_0800411c(void)\n{\n  uint32_t currentMillis = millis();\n  uint32_t *PTR_last_tick1_08004188 = PTR_last_tick1_08004188;\n  if (currentMillis - *(int *)PTR_last_tick1_08004188 > 1)\n  {\n    *PTR_last_tick1_08004188 = currentMillis;\n    AHRS_ComputeAngles();\n  }\n  uint32_t *PTR_last_tick3_0800418c = PTR_last_tick3_0800418c;\n  if (currentMillis - *(int *)PTR_last_tick3_0800418c > 2)\n  {\n    *PTR_last_tick3_0800418c = currentMillis;\n    PID_Update();\n  }\n  uint32_t *PTR_last_tick2_08004190 = PTR_last_tick2_08004190;\n  if (currentMillis - *(int *)PTR_last_tick2_08004190 > 3)\n  {\n    *PTR_last_tick2_08004190 = currentMillis;\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  MS5611_Update();\n}",
            "called": [
                "PID_Update",
                "MS5611_Update",
                "MSP_SendMotor",
                "MSP_SendRawIMU",
                "AHRS_ComputeAngles",
                "MSP_SendStatus",
                "millis",
                "MSP_SendAltitude",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendPID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "updateSensorsAndCommunications_0800411c"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "read_I2C_memory_080040b8",
                "device_add": "device_address",
                "register_add": "register_address",
                "bytes": "data",
                "size": "size",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "status"
            },
            "code": "void read_I2C_memory_080040b8(uint16_t device_address, uint16_t register_address, uint8_t *data, uint16_t size, char *file_name, int line_number) {\n  HAL_StatusTypeDef status;\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040e4, device_address, register_address, 1, data, size, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(file_name, line_number);\n    return;\n  }\n  return;\n}",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "MS5611_ReadADC"
            ],
            "imported": false,
            "current_name": "read_I2C_memory_080040b8"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "log_error_08004490",
                "file": "filename",
                "line": "line_number",
                "GPIOx": "gpio_port",
                "data": "line_msg",
                "data_00": "error_msg"
            },
            "code": "void log_error_08004490(char* filename, int line_number)\n{\n  GPIO_TypeDef *gpio_port;\n  char* error_msg;\n  char* line_msg;\n  \n  HAL_GPIO_WritePin(gpio_port, GPIO_PIN_14, GPIO_PIN_SET);\n  HAL_GPIO_WritePin(gpio_port, GPIO_PIN_15, GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(gpio_port, GPIO_PIN_13, GPIO_PIN_RESET);\n  \n  error_msg = PTR_s_Error_with_08004510;\n  line_msg = PTR_s__at_line__0800450c;\n  gpio_port = DAT_08004508;\n  \n  do {\n    HAL_GPIO_TogglePin(gpio_port, GPIO_PIN_14);\n    HAL_GPIO_TogglePin(gpio_port, GPIO_PIN_15);\n    HAL_GPIO_TogglePin(gpio_port, GPIO_PIN_13);\n    serialPrint(error_msg);\n    serialPrint(filename);\n    serialPrint(line_msg);\n    serialInt(line_number);\n    serialWrite('\n');\n    delay_ms(500);\n  } while( true );\n}",
            "called": [
                "delay_ms",
                "HAL_GPIO_TogglePin",
                "HAL_GPIO_WritePin",
                "serialPrint",
                "serialInt",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "SystemClock_Config",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "I2C_ReadBytes",
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "log_error_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "MadgwickQuaternionUpdate",
                "PID_Compute",
                "MS5611_Update",
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "send_i2c_data_080015e8",
                "hi2c": "handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance"
            },
            "code": "HAL_StatusTypeDef send_i2c_data_080015e8(I2C_HandleTypeDef *handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time, current_time;\n  I2C_TypeDef *instance = handle->Instance;\n  instance->CR1 |= I2C_CR1_ACK | I2C_CR1_START;\n  start_time = HAL_GetTick();\n  while ((handle->Instance->SR1 & I2C_SR1_ADDR) == 0)\n  {\n    if (timeout != HAL_MAX_DELAY && HAL_GetTick() - start_time >= timeout)\n    {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;\n      return HAL_ERROR;\n    }\n  }\n  instance->SR2;\n  instance->DR = (device_address << 1) & ~1;\n  status = wait_on_flag(handle, I2C_FLAG_TXE, RESET, timeout);\n  if (status != HAL_OK)\n  {\n    return status;\n  }\n  if (memory_address_size == 2)\n  {\n    instance->DR = memory_address >> 8;\n    status = wait_on_flag(handle, I2C_FLAG_TXE, RESET, timeout);\n    if (status != HAL_OK)\n    {\n      return status;\n    }\n  }\n  instance->DR = memory_address & 0xFF;\n  status = wait_on_flag(handle, I2C_FLAG_TXE, RESET, timeout);\n  if (status != HAL_OK)\n  {\n    return status;\n  }\n  instance->CR1 |= I2C_CR1_STOP;\n  start_time = HAL_GetTick();\n  while ((handle->Instance->SR1 & I2C_SR1_ADDR) == 0)\n  {\n    if (timeout != HAL_MAX_DELAY && HAL_GetTick() - start_time >= timeout)\n    {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;\n      return HAL_ERROR;\n    }\n  }\n  handle->State = HAL_I2C_STATE_READY;\n  handle->ErrorCode = HAL_I2C_ERROR_NONE;\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "send_i2c_data_080015e8"
        }
    },
    "used_tokens": 151272,
    "layers": [
        [
            "FUN_080050fc",
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08003ef2",
            "FUN_08001264",
            "FUN_080058fc",
            "FUN_080070b0",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_0800125a",
            "FUN_08001828",
            "FUN_0800290c",
            "FUN_080028a6",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08000980",
            "FUN_08002368",
            "FUN_08002008",
            "FUN_080008fc",
            "FUN_0800114c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003f7c",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08004ee6",
            "FUN_08004434",
            "FUN_08004ee8",
            "FUN_08004ffc",
            "FUN_0800103c",
            "FUN_0800115c",
            "FUN_08004f60",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_08004ef4",
            "FUN_080043bc",
            "FUN_08004f5c",
            "FUN_08000404",
            "FUN_08004eec",
            "FUN_08004eea",
            "FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08003fd0",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08002ee8",
            "FUN_08001104",
            "FUN_08004978",
            "FUN_08000c60",
            "FUN_08004f04",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08003eac",
            "FUN_080072ac",
            "FUN_08002cb0",
            "FUN_08002324",
            "FUN_08002564",
            "FUN_08004fb0",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080009dc",
            "FUN_08000c70",
            "FUN_080023d0",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08003ff4",
            "FUN_08001004",
            "FUN_08004514",
            "FUN_080057d0",
            "FUN_080072d4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_0800245c",
            "FUN_080008f4",
            "FUN_08004e14",
            "FUN_08002ea0",
            "FUN_08001424",
            "FUN_08004c64",
            "FUN_080041e4",
            "FUN_080003e4",
            "FUN_08007092",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004028",
            "FUN_0800708c",
            "FUN_08002520",
            "FUN_08000464",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_080052e4",
            "FUN_08000f94",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_080009b4",
            "FUN_08003068",
            "FUN_08000f8c",
            "FUN_08000474",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_080009c8",
            "FUN_08000f9c",
            "FUN_08002ed4",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_0800209c",
            "FUN_08003f0e",
            "FUN_0800403c",
            "FUN_0800277c",
            "FUN_0800483c",
            "FUN_08001064",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08004d48",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08004348",
            "FUN_08001078",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08004c30",
            "FUN_0800729c",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800567c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_0800411c",
            "FUN_080040b8",
            "FUN_08004490",
            "FUN_080015e8"
        ],
        [
            "FUN_08001128",
            "FUN_08004a84",
            "FUN_08005854",
            "FUN_08005bc8"
        ]
    ],
    "locked_functions": []
}