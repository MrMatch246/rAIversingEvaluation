{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_data_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeData_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_data_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateValues_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "get_null_terminated_string_length_08000150",
            "code": "\nchar * get_null_terminated_string_length_08000150(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "get_null_terminated_string_length_08000150",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculate_result_08000168(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  byte temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  bool temp_13;\n  bool temp_14;\n  bool temp_15;\n  \n  temp_6 = input_4 ^ 0x80000000;\n  temp_9 = input_2 << 1;\n  input_4 = input_4 << 1;\n  temp_13 = ((input_2 ^ temp_6) & 0x7fffffff) == 0;\n  temp_14 = temp_13 && input_1 == input_3;\n  if (!temp_13 || input_1 != input_3) {\n    temp_14 = (temp_9 | input_1) == 0;\n  }\n  if (!temp_14) {\n    temp_14 = (input_4 | input_3) == 0;\n  }\n  temp_8 = (int)temp_9 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_8 == -1;\n  }\n  temp_1 = (int)input_4 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_1 == -1;\n  }\n  if (temp_14) {\n    if (temp_8 == -1 || temp_1 == -1) {\n      temp_9 = temp_6;\n      temp_11 = input_3;\n      if (temp_8 == -1) {\n        temp_9 = input_2;\n        temp_11 = input_1;\n      }\n      if (temp_8 != -1 || temp_1 != -1) {\n        input_3 = temp_11;\n        temp_6 = temp_9;\n      }\n      temp_14 = (temp_11 | temp_9 << 0xc) == 0;\n      if (temp_14) {\n        temp_14 = (input_3 | temp_6 << 0xc) == 0;\n      }\n      if (temp_14) {\n        temp_14 = temp_9 == temp_6;\n      }\n      if (!temp_14) {\n        temp_9 = temp_9 | 0x80000;\n      }\n      return CONCAT44(temp_9,temp_11);\n    }\n    if (((input_2 ^ temp_6) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_9 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_6;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_6) {\n      return 0;\n    }\n    if (temp_9 >> 0x15 == 0) {\n      temp_14 = (input_1 & 0x80000000) != 0;\n      temp_6 = input_2 * 2 + (uint)temp_14;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)temp_14)) {\n        temp_6 = temp_6 | 0x80000000;\n      }\n      return CONCAT44(temp_6,input_1 << 1);\n    }\n    if (temp_9 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_9 = temp_9 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  temp_11 = input_4 - temp_9;\n  temp_14 = temp_11 != 0;\n  if (input_4 < temp_9) {\n    temp_11 = -temp_11;\n  }\n  temp_10 = input_1;\n  temp_7 = input_2;\n  if (temp_14 && temp_9 <= input_4) {\n    temp_9 = temp_9 + temp_11;\n    temp_10 = input_3;\n    temp_7 = temp_6;\n    input_3 = input_1;\n    temp_6 = input_2;\n  }\n  if (0x36 < temp_11) {\n    return CONCAT44(temp_7,temp_10);\n  }\n  temp_4 = temp_7 & 0xfffff | 0x100000;\n  if ((temp_7 & 0x80000000) != 0) {\n    temp_14 = temp_10 != 0;\n    temp_10 = -temp_10;\n    temp_4 = -temp_4 - (uint)temp_14;\n  }\n  temp_7 = temp_6 & 0xfffff | 0x100000;\n  if ((temp_6 & 0x80000000) != 0) {\n    temp_14 = input_3 != 0;\n    input_3 = -input_3;\n    temp_7 = -temp_7 - (uint)temp_14;\n  }\n  if (temp_9 == temp_11) {\n    temp_7 = temp_7 ^ 0x100000;\n    if (temp_9 == 0) {\n      temp_4 = temp_4 ^ 0x100000;\n      temp_9 = 1;\n    }\n    else {\n      temp_11 = temp_11 - 1;\n    }\n  }\n  temp_6 = -temp_11 + 0x20;\n  if ((int)temp_11 < 0x21) {\n    temp_12 = input_3 << (temp_6 & 0xff);\n    input_3 = input_3 >> (temp_11 & 0xff);\n    temp_3 = temp_10 + input_3;\n    temp_5 = temp_7 << (temp_6 & 0xff);\n    temp_6 = temp_3 + temp_5;\n    temp_4 = temp_4 + CARRY4(temp_10,input_3) + ((int)temp_7 >> (temp_11 & 0xff)) +\n            (uint)CARRY4(temp_3,temp_5);\n  }\n  else {\n    temp_12 = temp_7 << (-temp_11 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_12 = temp_12 | 2;\n    }\n    temp_7 = (int)temp_7 >> (temp_11 - 0x20 & 0xff);\n    temp_6 = temp_10 + temp_7;\n    temp_4 = temp_4 + ((int)temp_7 >> 0x1f) + (uint)CARRY4(temp_10,temp_7);\n  }\n  input_2 = temp_4 & 0x80000000;\n  temp_11 = temp_4;\n  if ((int)temp_4 < 0) {\n    temp_14 = temp_12 == 0;\n    temp_12 = -temp_12;\n    temp_11 = -temp_6;\n    temp_6 = -(uint)!temp_14 - temp_6;\n    temp_11 = -(uint)(temp_14 <= temp_11) - temp_4;\n  }\n  if (0xfffff < temp_11) {\n    temp_10 = temp_9 - 1;\n    if (0x1fffff < temp_11) {\n      temp_10 = temp_11 & 1;\n      temp_11 = temp_11 >> 1;\n      temp_2 = (byte)temp_6;\n      temp_6 = (uint)(temp_10 != 0) << 0x1f | temp_6 >> 1;\n      temp_12 = (uint)(temp_2 & 1) << 0x1f | temp_12 >> 1;\n      temp_10 = temp_9;\n      if (0xffbfffff < temp_9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    temp_14 = 0x7fffffff < temp_12;\n    if (temp_12 == 0x80000000) {\n      temp_14 = (temp_6 & 1) != 0;\n    }\n    return CONCAT44(temp_11 + temp_10 * 0x100000 + (uint)CARRY4(temp_6,(uint)temp_14) | input_2,\n                    temp_6 + temp_14);\n  }\n  temp_13 = (temp_12 & 0x80000000) != 0;\n  temp_12 = temp_12 << 1;\n  temp_10 = temp_6 * 2;\n  temp_14 = CARRY4(temp_6,temp_6);\n  temp_6 = temp_6 * 2 + (uint)temp_13;\n  temp_11 = temp_11 * 2 + (uint)(temp_14 || CARRY4(temp_10,(uint)temp_13));\n  temp_10 = temp_9 - 2;\n  if ((temp_11 & 0x100000) != 0) goto LAB_08000278;\n  temp_7 = temp_6;\n  temp_9 = temp_11;\n  if (temp_11 == 0) {\n    temp_7 = 0;\n    temp_9 = temp_6;\n  }\n  temp_8 = LZCOUNT(temp_9);\n  if (temp_11 == 0) {\n    temp_8 = temp_8 + 0x20;\n  }\n  temp_11 = temp_8 - 0xb;\n  temp_15 = SBORROW4(temp_11,0x20);\n  temp_6 = temp_8 - 0x2b;\n  temp_14 = (int)temp_6 < 0;\n  temp_13 = temp_6 == 0;\n  if ((int)temp_11 < 0x20) {\n    temp_15 = SCARRY4(temp_6,0xc);\n    temp_8 = temp_8 + -0x1f;\n    temp_14 = temp_8 < 0;\n    temp_13 = temp_8 == 0;\n    temp_6 = temp_11;\n    if (!temp_13 && temp_14 == temp_15) {\n      temp_7 = temp_9 << (temp_11 & 0xff);\n      temp_9 = temp_9 >> (0xcU - temp_8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_12 = 0x20 - temp_6;\n  }\n  temp_9 = temp_9 << (temp_6 & 0xff);\n  if (temp_13 || temp_14 != temp_15) {\n    temp_9 = temp_9 | temp_7 >> (temp_12 & 0xff);\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_7 = temp_7 << (temp_6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_11 <= (int)temp_10) {\n    return CONCAT44(temp_9 + (temp_10 - temp_11) * 0x100000 | input_2,temp_7);\n  }\n  temp_6 = ~(temp_10 - temp_11);\n  if ((int)temp_6 < 0x1f) {\n    temp_8 = temp_6 - 0x13;\n    if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_6 - 0x1f,0xc)) {\n      return CONCAT44(temp_4,temp_7 >> (0x20 - (0xcU - temp_8) & 0xff) | temp_9 << (0xcU - temp_8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_6 = temp_6 + 1;\n    return CONCAT44(input_2 | temp_9 >> (temp_6 & 0xff),\n                    temp_7 >> (temp_6 & 0xff) | temp_9 << (0x20 - temp_6 & 0xff));\n  }\n  return CONCAT44(temp_4,temp_9 >> (temp_6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "bVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "bVar13": "temp_13",
                "bVar14": "temp_14",
                "bVar15": "temp_15"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "bitwise_math_operation_0800016c",
            "code": "\nulonglong bitwiseMathOperation_0800016c(uint inputval_1,uint inputval_2,uint inputval_3,uint inputval_4)\n\n{\n  int shifted_val1;\n  byte carry;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  int shifted_val2;\n  uint shifted_input2;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  uint result_4;\n  uint temp_4;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  \n  shifted_input2 = inputval_2 << 1;\n  result_2 = inputval_4 << 1;\n  condition_1 = ((inputval_2 ^ inputval_4) & 0x7fffffff) == 0;\n  condition_2 = condition_1 && inputval_1 == inputval_3;\n  if (!condition_1 || inputval_1 != inputval_3) {\n    condition_2 = (shifted_input2 | inputval_1) == 0;\n  }\n  if (!condition_2) {\n    condition_2 = (result_2 | inputval_3) == 0;\n  }\n  shifted_val2 = (int)shifted_input2 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shifted_val2 == -1;\n  }\n  shifted_val1 = (int)result_2 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shifted_val1 == -1;\n  }\n  if (condition_2) {\n    if (shifted_val2 == -1 || shifted_val1 == -1) {\n      result_2 = inputval_4;\n      shifted_input2 = inputval_3;\n      if (shifted_val2 == -1) {\n        result_2 = inputval_2;\n        shifted_input2 = inputval_1;\n      }\n      if (shifted_val2 != -1 || shifted_val1 != -1) {\n        inputval_3 = shifted_input2;\n        inputval_4 = result_2;\n      }\n      condition_2 = (shifted_input2 | result_2 << 0xc) == 0;\n      if (condition_2) {\n        condition_2 = (inputval_3 | inputval_4 << 0xc) == 0;\n      }\n      if (condition_2) {\n        condition_2 = result_2 == inputval_4;\n      }\n      if (!condition_2) {\n        result_2 = result_2 | 0x80000;\n      }\n      return CONCAT44(result_2,shifted_input2);\n    }\n    if (((inputval_2 ^ inputval_4) & 0x7fffffff) != 0 || inputval_1 != inputval_3) {\n      if ((shifted_input2 | inputval_1) == 0) {\n        inputval_1 = inputval_3;\n        inputval_2 = inputval_4;\n      }\n      return CONCAT44(inputval_2,inputval_1);\n    }\n    if (inputval_2 != inputval_4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      condition_2 = (inputval_1 & 0x80000000) != 0;\n      result_2 = inputval_2 * 2 + (uint)condition_2;\n      if (CARRY4(inputval_2,inputval_2) || CARRY4(inputval_2 * 2,(uint)condition_2)) {\n        result_2 = result_2 | 0x80000000;\n      }\n      return CONCAT44(result_2,inputval_1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(inputval_2 + 0x100000,inputval_1);\n    }\n    inputval_2 = inputval_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(inputval_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  result_2 = result_2 >> 0x15;\n  result_3 = result_2 - shifted_input2;\n  condition_2 = result_3 != 0;\n  if (result_2 < shifted_input2) {\n    result_3 = -result_3;\n  }\n  result_1 = inputval_1;\n  temp_3 = inputval_2;\n  if (condition_2 && shifted_input2 <= result_2) {\n    shifted_input2 = shifted_input2 + result_3;\n    result_1 = inputval_3;\n    temp_3 = inputval_4;\n    inputval_3 = inputval_1;\n    inputval_4 = inputval_2;\n  }\n  if (0x36 < result_3) {\n    return CONCAT44(temp_3,result_1);\n  }\n  result_2 = temp_3 & 0xfffff | 0x100000;\n  if ((temp_3 & 0x80000000) != 0) {\n    condition_2 = result_1 != 0;\n    result_1 = -result_1;\n    result_2 = -result_2 - (uint)condition_2;\n  }\n  temp_3 = inputval_4 & 0xfffff | 0x100000;\n  if ((inputval_4 & 0x80000000) != 0) {\n    condition_2 = inputval_3 != 0;\n    inputval_3 = -inputval_3;\n    temp_3 = -temp_3 - (uint)condition_2;\n  }\n  if (shifted_input2 == result_3) {\n    temp_3 = temp_3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      result_2 = result_2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      result_3 = result_3 - 1;\n    }\n  }\n  temp_4 = -result_3 + 0x20;\n  if ((int)result_3 < 0x21) {\n    result_4 = inputval_3 << (temp_4 & 0xff);\n    inputval_3 = inputval_3 >> (result_3 & 0xff);\n    temp_1 = result_1 + inputval_3;\n    temp_2 = temp_3 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_2;\n    result_2 = result_2 + CARRY4(result_1,inputval_3) + ((int)temp_3 >> (result_3 & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    result_4 = temp_3 << (-result_3 + 0x40 & 0xff);\n    if (inputval_3 != 0) {\n      result_4 = result_4 | 2;\n    }\n    temp_3 = (int)temp_3 >> (result_3 - 0x20 & 0xff);\n    temp_4 = result_1 + temp_3;\n    result_2 = result_2 + ((int)temp_3 >> 0x1f) + (uint)CARRY4(result_1,temp_3);\n  }\n  inputval_2 = result_2 & 0x80000000;\n  result_3 = result_2;\n  if ((int)result_2 < 0) {\n    condition_2 = result_4 == 0;\n    result_4 = -result_4;\n    result_3 = -temp_4;\n    temp_4 = -(uint)!condition_2 - temp_4;\n    result_3 = -(uint)(condition_2 <= result_3) - result_2;\n  }\n  if (0xfffff < result_3) {\n    result_1 = shifted_input2 - 1;\n    if (0x1fffff < result_3) {\n      result_2 = result_3 & 1;\n      result_3 = result_3 >> 1;\n      carry = (byte)temp_4;\n      temp_4 = (uint)(result_2 != 0) << 0x1f | temp_4 >> 1;\n      result_4 = (uint)(carry & 1) << 0x1f | result_4 >> 1;\n      result_1 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition_2 = 0x7fffffff < result_4;\n    if (result_4 == 0x80000000) {\n      condition_2 = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(result_3 + result_1 * 0x100000 + (uint)CARRY4(temp_4,(uint)condition_2) | inputval_2,\n                    temp_4 + condition_2);\n  }\n  condition_1 = (result_4 & 0x80000000) != 0;\n  result_4 = result_4 << 1;\n  result_1 = temp_4 * 2;\n  condition_2 = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)condition_1;\n  result_3 = result_3 * 2 + (uint)(condition_2 || CARRY4(result_1,(uint)condition_1));\n  result_1 = shifted_input2 - 2;\n  if ((result_3 & 0x100000) != 0) goto LAB_08000278;\n  temp_3 = temp_4;\n  shifted_input2 = result_3;\n  if (result_3 == 0) {\n    temp_3 = 0;\n    shifted_input2 = temp_4;\n  }\n  shifted_val2 = LZCOUNT(shifted_input2);\n  if (result_3 == 0) {\n    shifted_val2 = shifted_val2 + 0x20;\n  }\n  temp_4 = shifted_val2 - 0xb;\n  condition_3 = SBORROW4(temp_4,0x20);\n  result_3 = shifted_val2 - 0x2b;\n  condition_2 = (int)result_3 < 0;\n  condition_1 = result_3 == 0;\n  if ((int)temp_4 < 0x20) {\n    condition_3 = SCARRY4(result_3,0xc);\n    shifted_val2 = shifted_val2 + -0x1f;\n    condition_2 = shifted_val2 < 0;\n    condition_1 = shifted_val2 == 0;\n    result_3 = temp_4;\n    if (!condition_1 && condition_2 == condition_3) {\n      temp_3 = shifted_input2 << (temp_4 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shifted_val2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    result_4 = 0x20 - result_3;\n  }\n  shifted_input2 = shifted_input2 << (result_3 & 0xff);\n  if (condition_1 || condition_2 != condition_3) {\n    shifted_input2 = shifted_input2 | temp_3 >> (result_4 & 0xff);\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    temp_3 = temp_3 << (result_3 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_4 <= (int)result_1) {\n    return CONCAT44(shifted_input2 + (result_1 - temp_4) * 0x100000 | inputval_2,temp_3);\n  }\n  result_3 = ~(result_1 - temp_4);\n  if ((int)result_3 < 0x1f) {\n    shifted_val2 = result_3 - 0x13;\n    if (shifted_val2 != 0 && shifted_val2 < 0 == SCARRY4(result_3 - 0x1f,0xc)) {\n      return CONCAT44(result_2,temp_3 >> (0x20 - (0xcU - shifted_val2) & 0xff) | shifted_input2 << (0xcU - shifted_val2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_3 = result_3 + 1;\n    return CONCAT44(inputval_2 | shifted_input2 >> (result_3 & 0xff),\n                    temp_3 >> (result_3 & 0xff) | shifted_input2 << (0x20 - result_3 & 0xff));\n  }\n  return CONCAT44(result_2,shifted_input2 >> (result_3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "bitwise_math_operation_0800016c",
                "param_1": "inputval_1",
                "param_2": "inputval_2",
                "param_3": "inputval_3",
                "param_4": "inputval_4",
                "iVar1": "shifted_val1",
                "bVar2": "carry",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "iVar6": "shifted_val2",
                "uVar7": "shifted_input2",
                "uVar8": "result_1",
                "uVar9": "result_2",
                "uVar10": "result_3",
                "uVar11": "result_4",
                "uVar12": "temp_4",
                "bVar13": "condition_1",
                "bVar14": "condition_2",
                "bVar15": "condition_3"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculate_shifted_value_08000404(uint input_value)\n\n{\n  uint shifted_value;\n  uint absolute_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  absolute_value = input_value;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input_value;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(absolute_value);\n  total_bits = leading_zeros + 0x15;\n  is_overflow = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_overflow == false) {\n      shifted_value = absolute_value << total_bits;\n      absolute_value = absolute_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  absolute_value = absolute_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    absolute_value = absolute_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if (total_bits < 0x433) {\n    return CONCAT44(absolute_value + (0x432 - total_bits) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,absolute_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | absolute_value >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | absolute_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | absolute_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_bits",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_operation_08000428",
            "code": "\nulonglong bitwiseOperation_08000428(uint input1,undefined4 input2,undefined4 input3,uint input4)\n\n{\n  uint bit31;\n  uint tempVar1;\n  uint merged;\n  uint bitsShifted;\n  uint shifted;\n  int count;\n  uint shiftAmount;\n  uint remainder;\n  bool isZero;\n  bool isFF000000;\n  bool isCarry;\n  \n  shifted = input1 << 1;\n  isFF000000 = shifted == 0;\n  bit31 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  bitsShifted = (uint)((int)shifted >> 3) >> 1;\n  merged = bit31 | bitsShifted;\n  input1 = input1 << 0x1d;\n  if (!isFF000000) {\n    input4 = shifted & 0xff000000;\n    isFF000000 = input4 == 0;\n  }\n  if (!isFF000000) {\n    isFF000000 = input4 == 0xff000000;\n  }\n  if (!isFF000000) {\n    return CONCAT44(merged,input1) ^ 0x3800000000000000;\n  }\n  if (shifted == 0 || input4 == 0xff000000) {\n    return CONCAT44(merged,input1);\n  }\n  tempVar1 = input1;\n  shifted = bitsShifted;\n  if (bitsShifted == 0) {\n    tempVar1 = 0;\n    shifted = input1;\n  }\n  count = LZCOUNT(shifted);\n  if (bitsShifted == 0) {\n    count = count + 0x20;\n  }\n  shiftAmount = count - 0xb;\n  isCarry = SBORROW4(shiftAmount,0x20);\n  bitsShifted = count - 0x2b;\n  isFF000000 = (int)bitsShifted < 0;\n  isZero = bitsShifted == 0;\n  if ((int)shiftAmount < 0x20) {\n    isCarry = SCARRY4(bitsShifted,0xc);\n    count = count + -0x1f;\n    isFF000000 = count < 0;\n    isZero = count == 0;\n    bitsShifted = shiftAmount;\n    if (!isZero && isFF000000 == isCarry) {\n      tempVar1 = shifted << (shiftAmount & 0xff);\n      shifted = shifted >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isFF000000 != isCarry) {\n    remainder = 0x20 - bitsShifted;\n  }\n  shifted = shifted << (bitsShifted & 0xff);\n  if (isZero || isFF000000 != isCarry) {\n    shifted = shifted | tempVar1 >> (remainder & 0xff);\n  }\n  if (isZero || isFF000000 != isCarry) {\n    tempVar1 = tempVar1 << (bitsShifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shifted + (0x380 - shiftAmount) * 0x100000 | bit31,tempVar1);\n  }\n  bitsShifted = ~(0x380 - shiftAmount);\n  if ((int)bitsShifted < 0x1f) {\n    count = bitsShifted - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(bitsShifted - 0x1f,0xc)) {\n      return CONCAT44(merged,tempVar1 >> (0x20 - (0xcU - count) & 0xff) | shifted << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    bitsShifted = bitsShifted + 1;\n    return CONCAT44(bit31 | shifted >> (bitsShifted & 0xff),\n                    tempVar1 >> (bitsShifted & 0xff) | shifted << (0x20 - bitsShifted & 0xff));\n  }\n  return CONCAT44(merged,shifted >> (bitsShifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_operation_08000428",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit31",
                "uVar2": "tempVar1",
                "uVar3": "merged",
                "uVar4": "bitsShifted",
                "uVar5": "shifted",
                "iVar6": "count",
                "uVar7": "shiftAmount",
                "in_r12": "remainder",
                "bVar8": "isZero",
                "bVar9": "isFF000000",
                "bVar10": "isCarry"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_product_080004d0",
            "code": "\nulonglong calculateProduct_080004d0(undefined4 inputVar1,uint inputVar2,uint inputVar3,uint inputVar4)\n\n{\n  ulonglong result;\n  longlong tempVar;\n  uint var1;\n  uint var2;\n  int var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  bool flag;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedVars;\n  \n  combinedVars = CONCAT44(inputVar2,inputVar1);\n  var6 = 0x7ff;\n  var2 = inputVar2 >> 0x14 & 0x7ff;\n  flag = var2 == 0;\n  if (!flag) {\n    var5 = inputVar4 >> 0x14 & 0x7ff;\n    flag = var5 == 0;\n  }\n  if (!flag) {\n    flag = var2 == 0x7ff;\n  }\n  if (!flag) {\n    flag = var5 == 0x7ff;\n  }\n  if (flag) {\n    combinedVars = FUN_080006ac();\n  }\n  var1 = (uint)(combinedVars >> 0x20);\n  var3 = var2 + var5;\n  var2 = var1 ^ inputVar4;\n  var1 = var1 & ~(var6 << 0x15);\n  inputVar4 = inputVar4 & ~(var6 << 0x15);\n  flag = ((uint)combinedVars | var1 << 0xc) == 0;\n  if (!flag) {\n    flag = (inputVar3 | inputVar4 << 0xc) == 0;\n  }\n  var1 = var1 | 0x100000;\n  inputVar4 = inputVar4 | 0x100000;\n  if (flag) {\n    inputVar3 = (uint)combinedVars | inputVar3;\n    inputVar4 = (var2 & 0x80000000 | var1) ^ inputVar4;\n    var2 = var6 >> 1;\n    flag3 = SBORROW4(var3,var2);\n    var4 = var3 - var2;\n    flag = var4 == 0;\n    var1 = var4;\n    if (!flag && (int)var2 <= var3) {\n      flag3 = SBORROW4(var6,var4);\n      var1 = var6 - var4;\n      flag = var6 == var4;\n    }\n    if (!flag && (int)var1 < 0 == flag3) {\n      inputVar4 = inputVar4 | var4 * 0x100000;\n    }\n    if (!flag && (int)var1 < 0 == flag3) {\n      return CONCAT44(inputVar4,inputVar3);\n    }\n    inputVar4 = inputVar4 | 0x100000;\n    var6 = 0;\n    flag3 = SBORROW4(var4,1);\n    var4 = var4 - 1;\n    flag = var4 == 0;\n    var2 = var4;\n  }\n  else {\n    result = (combinedVars & 0xffffffff) * (ulonglong)inputVar3;\n    combinedVars = (combinedVars & 0xffffffff) * (ulonglong)inputVar4 +\n             (ulonglong)var1 * (ulonglong)inputVar3 + (result >> 0x20);\n    var7 = (uint)combinedVars;\n    tempVar = (ulonglong)var1 * (ulonglong)inputVar4 + (combinedVars >> 0x20);\n    var6 = (uint)tempVar;\n    var1 = (uint)((ulonglong)tempVar >> 0x20);\n    if ((int)result != 0) {\n      var7 = var7 | 1;\n    }\n    var4 = (var3 + -0x3ff) - (uint)(var1 < 0x200);\n    if (var1 < 0x200) {\n      flag = (var7 & 0x80000000) != 0;\n      var7 = var7 << 1;\n      tempVar = CONCAT44(var1 * 2 + (uint)(CARRY4(var6,var6) || CARRY4(var6 * 2,(uint)flag)),\n                       var6 * 2 + (uint)flag);\n    }\n    inputVar4 = var2 & 0x80000000 | (int)((ulonglong)tempVar >> 0x20) << 0xb | (uint)tempVar >> 0x15;\n    inputVar3 = (uint)tempVar << 0xb | var7 >> 0x15;\n    var6 = var7 * 0x800;\n    flag2 = 0xfc < var4;\n    flag3 = SBORROW4(var4,0xfd);\n    var1 = var4 - 0xfd;\n    flag = var1 == 0;\n    var2 = var1;\n    if (flag2 && !flag) {\n      flag2 = 0x6ff < var1;\n      flag3 = SBORROW4(var1,0x700);\n      var2 = var4 - 0x7fd;\n      flag = var1 == 0x700;\n    }\n    if (!flag2 || flag) {\n      flag = 0x7fffffff < var6;\n      if (var6 == 0x80000000) {\n        flag = (var7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(inputVar4 + var4 * 0x100000 + (uint)CARRY4(inputVar3,(uint)flag),inputVar3 + flag\n                     );\n    }\n  }\n  if (!flag && (int)var2 < 0 == flag3) {\n    return (ulonglong)(inputVar4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(var4,0x36);\n  flag = (int)(var4 + 0x36) < 0;\n  flag3 = var4 == 0xffffffca;\n  if (flag3 || flag != flag2) {\n    inputVar3 = 0;\n  }\n  if (flag3 || flag != flag2) {\n    inputVar4 = inputVar4 & 0x80000000;\n  }\n  if (flag3 || flag != flag2) {\n    return CONCAT44(inputVar4,inputVar3);\n  }\n  var2 = -var4;\n  var1 = var2 - 0x20;\n  if (0x1f < (int)var2) {\n    var4 = inputVar3 >> (var1 & 0xff) | inputVar4 << (0x20 - var1 & 0xff);\n    var2 = (inputVar4 >> (var1 & 0xff) & ~((inputVar4 & 0x80000000) >> (var1 & 0xff))) -\n            ((int)var4 >> 0x1f);\n    if ((var6 | inputVar3 << (0x20 - var1 & 0xff) | var4 << 1) == 0) {\n      var2 = var2 & ~(var4 >> 0x1f);\n    }\n    return CONCAT44(inputVar4,var2) & 0x80000000ffffffff;\n  }\n  var3 = var2 - 0x14;\n  if (var3 == 0 || var3 < 0 != SCARRY4(var1,0xc)) {\n    var7 = inputVar3 << (var4 + 0x20 & 0xff);\n    var1 = inputVar3 >> (var2 & 0xff) | inputVar4 << (var4 + 0x20 & 0xff);\n    var4 = var1 + -((int)var7 >> 0x1f);\n    if ((var6 | var7 << 1) == 0) {\n      var4 = var4 & ~(var7 >> 0x1f);\n    }\n    return CONCAT44((inputVar4 & 0x80000000) +\n                    ((inputVar4 & 0x7fffffff) >> (var2 & 0xff)) +\n                    (uint)CARRY4(var1,-((int)var7 >> 0x1f)),var4);\n  }\n  var2 = 0xc - var3;\n  var4 = inputVar3 << (var2 & 0xff);\n  var2 = inputVar3 >> (0x20 - var2 & 0xff) | inputVar4 << (var2 & 0xff);\n  var1 = var2 + -((int)var4 >> 0x1f);\n  if ((var6 | var4 << 1) == 0) {\n    var1 = var1 & ~(var4 >> 0x1f);\n  }\n  return CONCAT44((inputVar4 & 0x80000000) + (uint)CARRY4(var2,-((int)var4 >> 0x1f)),var1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_product_080004d0",
                "param_1": "inputVar1",
                "param_2": "inputVar2",
                "param_3": "inputVar3",
                "param_4": "inputVar4",
                "uVar1": "result",
                "lVar2": "tempVar",
                "uVar3": "var1",
                "uVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "unaff_r5": "var5",
                "uVar7": "var6",
                "uVar8": "var7",
                "bVar9": "flag",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedVars"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "reverse_bits_and_concatenate_080006ac",
            "code": "\nulonglong reverse_bits_and_concatenate_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_check1;\n  uint bit_check2;\n  uint result4;\n  uint result3;\n  uint bit_check5;\n  bool is_zero;\n  \n  result4 = bit_check5 & input_4 >> 0x14;\n  if (bit_check2 != bit_check5 && result4 != bit_check5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_check2 == 0) {\n      result3 = input_2 & 0x80000000;\n      do {\n        bit_check1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_check1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | result3;\n      if (result4 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      result4 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(result4 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  result3 = input_2;\n  if (((!is_zero) && ((bit_check2 != bit_check5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((result4 != bit_check5 || (input_1 = input_3, result3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(result3,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "reverse_bits_and_concatenate_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_check1",
                "unaff_r4": "bit_check2",
                "uVar2": "result4",
                "uVar3": "result3",
                "in_r12": "bit_check5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_float_08000724",
            "code": "\nulonglong calculateFloat_08000724(undefined4 param_1,uint float_bits,uint flt_bits,uint flt_bits2)\n\n{\n  uint shifted_flt_bits;\n  uint shifted_flt_bits2;\n  uint flt_bits1;\n  uint flt_bits2_shifted;\n  uint shifted_flt_bits1;\n  uint bitwise_or;\n  uint shifted_11_bits;\n  int diff_exponents;\n  uint diff_exponents_normalized;\n  uint exponent2;\n  uint exponent1_normalized;\n  uint mantissa1;\n  uint mantissa2;\n  uint int_0x7ff;\n  bool is_zero_exponent1;\n  bool is_zero_exponent2;\n  bool is_carry;\n  undefined8 shifted_flt_bits7;\n  \n  shifted_flt_bits7 = CONCAT44(float_bits,param_1);\n  int_0x7ff = 0x7ff;\n  shifted_11_bits = float_bits >> 0x14 & 0x7ff;\n  is_zero_exponent1 = shifted_11_bits == 0;\n  if (!is_zero_exponent1) {\n    exponent2 = flt_bits2 >> 0x14 & 0x7ff;\n    is_zero_exponent1 = exponent2 == 0;\n  }\n  if (!is_zero_exponent1) {\n    is_zero_exponent1 = shifted_11_bits == 0x7ff;\n  }\n  if (!is_zero_exponent1) {\n    is_zero_exponent1 = exponent2 == 0x7ff;\n  }\n  if (is_zero_exponent1) {\n    shifted_flt_bits7 = FUN_08000892();\n  }\n  diff_exponents_normalized = (uint)((ulonglong)shifted_flt_bits7 >> 0x20);\n  mantissa1 = (uint)shifted_flt_bits7;\n  diff_exponents = shifted_11_bits - exponent2;\n  if ((flt_bits | flt_bits2 << 0xc) == 0) {\n    shifted_11_bits = (diff_exponents_normalized ^ flt_bits2) & 0x80000000 | diff_exponents_normalized & 0xfffff;\n    is_carry = SCARRY4(diff_exponents,int_0x7ff >> 1);\n    diff_exponents_normalized = diff_exponents + (int_0x7ff >> 1);\n    is_zero_exponent1 = (int)diff_exponents_normalized < 0;\n    is_zero_exponent2 = diff_exponents_normalized == 0;\n    if (!is_zero_exponent2 && is_zero_exponent1 == is_carry) {\n      is_carry = SBORROW4(int_0x7ff,diff_exponents_normalized);\n      is_zero_exponent1 = (int)(int_0x7ff - diff_exponents_normalized) < 0;\n      is_zero_exponent2 = int_0x7ff == diff_exponents_normalized;\n    }\n    if (!is_zero_exponent2 && is_zero_exponent1 == is_carry) {\n      shifted_11_bits = shifted_11_bits | diff_exponents_normalized * 0x100000;\n    }\n    if (!is_zero_exponent2 && is_zero_exponent1 == is_carry) {\n      return CONCAT44(shifted_11_bits,mantissa1);\n    }\n    shifted_11_bits = shifted_11_bits | 0x100000;\n    int_0x7ff = 0;\n    is_zero_exponent2 = SBORROW4(diff_exponents_normalized,1);\n    diff_exponents_normalized = diff_exponents_normalized - 1;\n    is_zero_exponent1 = diff_exponents_normalized == 0;\n    flt_bits1 = diff_exponents_normalized;\n  }\n  else {\n    flt_bits1 = (flt_bits2 << 0xc) >> 4 | 0x10000000 | flt_bits >> 0x18;\n    int_0x7ff = flt_bits << 8;\n    exponent1_normalized = (diff_exponents_normalized << 0xc) >> 4 | 0x10000000 | mantissa1 >> 0x18;\n    mantissa1 = mantissa1 * 0x100;\n    shifted_11_bits = (diff_exponents_normalized ^ flt_bits2) & 0x80000000;\n    is_zero_exponent1 = flt_bits1 <= exponent1_normalized;\n    if (exponent1_normalized == flt_bits1) {\n      is_zero_exponent1 = int_0x7ff <= mantissa1;\n    }\n    diff_exponents = diff_exponents + (uint)is_zero_exponent1;\n    diff_exponents_normalized = diff_exponents + 0x3fd;\n    if (is_zero_exponent1 == false) {\n      flt_bits1 = flt_bits1 >> 1;\n      int_0x7ff = (uint)((flt_bits >> 0x18 & 1) != 0) << 0x1f | int_0x7ff >> 1;\n    }\n    mantissa2 = mantissa1 - int_0x7ff;\n    exponent1_normalized = (exponent1_normalized - flt_bits1) - (uint)(mantissa1 < int_0x7ff);\n    flt_bits2_shifted = flt_bits1 >> 1;\n    shifted_flt_bits = (uint)((flt_bits1 & 1) != 0) << 0x1f | int_0x7ff >> 1;\n    mantissa1 = 0x100000;\n    flt_bits1 = 0x80000;\n    while( true ) {\n      is_zero_exponent1 = shifted_flt_bits <= mantissa2;\n      if (flt_bits2_shifted < exponent1_normalized || exponent1_normalized - flt_bits2_shifted < (uint)is_zero_exponent1) {\n        mantissa2 = mantissa2 - shifted_flt_bits;\n        mantissa1 = mantissa1 | flt_bits1;\n        exponent1_normalized = (exponent1_normalized - flt_bits2_shifted) - (uint)!is_zero_exponent1;\n      }\n      shifted_flt_bits1 = flt_bits2_shifted >> 1;\n      shifted_flt_bits = (uint)((flt_bits2_shifted & 1) != 0) << 0x1f | shifted_flt_bits >> 1;\n      is_zero_exponent2 = shifted_flt_bits <= mantissa2;\n      is_zero_exponent1 = exponent1_normalized - shifted_flt_bits1 < (uint)is_zero_exponent2;\n      int_0x7ff = exponent1_normalized;\n      if (shifted_flt_bits1 < exponent1_normalized || is_zero_exponent1) {\n        mantissa2 = mantissa2 - shifted_flt_bits;\n        int_0x7ff = (exponent1_normalized - shifted_flt_bits1) - (uint)!is_zero_exponent2;\n      }\n      if (shifted_flt_bits1 < exponent1_normalized || is_zero_exponent1) {\n        mantissa1 = mantissa1 | flt_bits1 >> 1;\n      }\n      exponent1_normalized = flt_bits2_shifted >> 2;\n      shifted_flt_bits2 = (uint)((shifted_flt_bits1 & 1) != 0) << 0x1f | shifted_flt_bits >> 1;\n      is_zero_exponent2 = shifted_flt_bits2 <= mantissa2;\n      is_zero_exponent1 = int_0x7ff - exponent1_normalized < (uint)is_zero_exponent2;\n      shifted_flt_bits1 = int_0x7ff;\n      if (exponent1_normalized < int_0x7ff || is_zero_exponent1) {\n        mantissa2 = mantissa2 - shifted_flt_bits2;\n        shifted_flt_bits1 = (int_0x7ff - exponent1_normalized) - (uint)!is_zero_exponent2;\n      }\n      if (exponent1_normalized < int_0x7ff || is_zero_exponent1) {\n        mantissa1 = mantissa1 | flt_bits1 >> 2;\n      }\n      bitwise_or = flt_bits2_shifted >> 3;\n      shifted_flt_bits = (uint)((exponent1_normalized & 1) != 0) << 0x1f | shifted_flt_bits2 >> 1;\n      is_zero_exponent2 = shifted_flt_bits <= mantissa2;\n      is_zero_exponent1 = shifted_flt_bits1 - bitwise_or < (uint)is_zero_exponent2;\n      exponent1_normalized = shifted_flt_bits1;\n      if (bitwise_or < shifted_flt_bits1 || is_zero_exponent1) {\n        mantissa2 = mantissa2 - shifted_flt_bits;\n        exponent1_normalized = (shifted_flt_bits1 - bitwise_or) - (uint)!is_zero_exponent2;\n      }\n      if (bitwise_or < shifted_flt_bits1 || is_zero_exponent1) {\n        mantissa1 = mantissa1 | flt_bits1 >> 3;\n      }\n      int_0x7ff = exponent1_normalized | mantissa2;\n      if (int_0x7ff == 0) break;\n      exponent1_normalized = exponent1_normalized << 4 | mantissa2 >> 0x1c;\n      mantissa2 = mantissa2 << 4;\n      flt_bits2_shifted = flt_bits2_shifted & 0xfffffff8 | shifted_flt_bits >> 0x1d;\n      shifted_flt_bits = (shifted_flt_bits2 >> 1) << 3;\n      flt_bits1 = flt_bits1 >> 4;\n      if (flt_bits1 == 0) {\n        bitwise_or = flt_bits2_shifted;\n        if ((shifted_11_bits & 0x100000) != 0) goto LAB_08000842;\n        shifted_11_bits = shifted_11_bits | mantissa1;\n        mantissa1 = 0;\n        flt_bits1 = 0x80000000;\n      }\n    }\n    if ((shifted_11_bits & 0x100000) == 0) {\n      shifted_11_bits = shifted_11_bits | mantissa1;\n      mantissa1 = 0;\n    }\nLAB_08000842:\n    is_carry = 0xfc < diff_exponents_normalized;\n    is_zero_exponent2 = SBORROW4(diff_exponents_normalized,0xfd);\n    flt_bits2_shifted = diff_exponents + 0x300;\n    is_zero_exponent1 = flt_bits2_shifted == 0;\n    flt_bits1 = flt_bits2_shifted;\n    if (is_carry && !is_zero_exponent1) {\n      is_carry = 0x6ff < flt_bits2_shifted;\n      is_zero_exponent2 = SBORROW4(flt_bits2_shifted,0x700);\n      flt_bits1 = diff_exponents - 0x400;\n      is_zero_exponent1 = flt_bits2_shifted == 0x700;\n    }\n    if (!is_carry || is_zero_exponent1) {\n      is_zero_exponent1 = bitwise_or <= exponent1_normalized;\n      if (exponent1_normalized == bitwise_or) {\n        is_zero_exponent1 = shifted_flt_bits <= mantissa2;\n      }\n      if (exponent1_normalized == bitwise_or && mantissa2 == shifted_flt_bits) {\n        is_zero_exponent1 = (mantissa1 & 1) != 0;\n      }\n      return CONCAT44(shifted_11_bits + diff_exponents_normalized * 0x100000 + (uint)CARRY4(mantissa1,(uint)is_zero_exponent1),mantissa1 + is_zero_exponent1);\n    }\n  }\n  if (!is_zero_exponent1 && (int)flt_bits1 < 0 == is_zero_exponent2) {\n    return (ulonglong)(shifted_11_bits & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_carry = SCARRY4(diff_exponents_normalized,0x36);\n  is_zero_exponent1 = (int)(diff_exponents_normalized + 0x36) < 0;\n  is_zero_exponent2 = diff_exponents_normalized == 0xffffffca;\n  if (is_zero_exponent2 || is_zero_exponent1 != is_carry) {\n    mantissa1 = 0;\n  }\n  if (is_zero_exponent2 || is_zero_exponent1 != is_carry) {\n    shifted_11_bits = shifted_11_bits & 0x80000000;\n  }\n  if (is_zero_exponent2 || is_zero_exponent1 != is_carry) {\n    return CONCAT44(shifted_11_bits,mantissa1);\n  }\n  flt_bits1 = -diff_exponents_normalized;\n  exponent1_normalized = flt_bits1 - 0x20;\n  if (0x1f < (int)flt_bits1) {\n    flt_bits1 = mantissa1 >> (exponent1_normalized & 0xff) | shifted_11_bits << (0x20 - exponent1_normalized & 0xff);\n    diff_exponents_normalized = (shifted_11_bits >> (exponent1_normalized & 0xff) & ~((shifted_11_bits & 0x80000000) >> (exponent1_normalized & 0xff))) -\n            ((int)flt_bits1 >> 0x1f);\n    if ((int_0x7ff | mantissa1 << (0x20 - exponent1_normalized & 0xff) | flt_bits1 << 1) == 0) {\n      diff_exponents_normalized = diff_exponents_normalized & ~(flt_bits1 >> 0x1f);\n    }\n    return CONCAT44(shifted_11_bits,diff_exponents_normalized) & 0x80000000ffffffff;\n  }\n  diff_exponents = flt_bits1 - 0x14;\n  if (diff_exponents != 0 && diff_exponents < 0 == SCARRY4(exponent1_normalized,0xc)) {\n    diff_exponents_normalized = 0xc - diff_exponents;\n    flt_bits1 = mantissa1 << (diff_exponents_normalized & 0xff);\n    mantissa1 = mantissa1 >> (0x20 - diff_exponents_normalized & 0xff) | shifted_11_bits << (diff_exponents_normalized & 0xff);\n    diff_exponents_normalized = mantissa1 + -((int)flt_bits1 >> 0x1f);\n    if ((int_0x7ff | flt_bits1 << 1) == 0) {\n      diff_exponents_normalized = diff_exponents_normalized & ~(flt_bits1 >> 0x1f);\n    }\n    return CONCAT44((shifted_11_bits & 0x80000000) + (uint)CARRY4(mantissa1,-((int)flt_bits1 >> 0x1f)),diff_exponents_normalized);\n  }\n  exponent1_normalized = mantissa1 << (diff_exponents_normalized + 0x20 & 0xff);\n  mantissa1 = mantissa1 >> (flt_bits1 & 0xff) | shifted_11_bits << (diff_exponents_normalized + 0x20 & 0xff);\n  diff_exponents_normalized = mantissa1 + -((int)exponent1_normalized >> 0x1f);\n  if ((int_0x7ff | exponent1_normalized << 1) == 0) {\n    diff_exponents_normalized = diff_exponents_normalized & ~(exponent1_normalized >> 0x1f);\n  }\n  return CONCAT44((shifted_11_bits & 0x80000000) +\n                  ((shifted_11_bits & 0x7fffffff) >> (flt_bits1 & 0xff)) +\n                  (uint)CARRY4(mantissa1,-((int)exponent1_normalized >> 0x1f)),diff_exponents_normalized);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_float_08000724",
                "param_2": "float_bits",
                "param_3": "flt_bits",
                "param_4": "flt_bits2",
                "uVar1": "shifted_flt_bits",
                "uVar2": "shifted_flt_bits2",
                "uVar3": "flt_bits1",
                "uVar4": "flt_bits2_shifted",
                "uVar5": "shifted_flt_bits1",
                "uVar6": "bitwise_or",
                "uVar7": "shifted_11_bits",
                "iVar8": "diff_exponents",
                "uVar9": "diff_exponents_normalized",
                "unaff_r5": "exponent2",
                "uVar10": "exponent1_normalized",
                "uVar11": "mantissa1",
                "uVar12": "mantissa2",
                "uVar13": "int_0x7ff",
                "bVar14": "is_zero_exponent1",
                "bVar15": "is_zero_exponent2",
                "bVar16": "is_carry"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "reverse_and_convert_08000892",
            "code": "\nulonglong reverse_and_convert_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit_check1;\n  uint temp_input1;\n  uint masked_param4;\n  uint temp_input2;\n  uint constant_value;\n  bool is_zero;\n  \n  masked_param4 = constant_value & input4 >> 0x14;\n  temp_input2 = input2;\n  if (temp_input1 != constant_value || masked_param4 != constant_value) {\n    if (temp_input1 == constant_value) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp_input2 = input4, masked_param4 != constant_value)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (masked_param4 == constant_value) {\n      input1 = input3;\n      temp_input2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp_input1 == 0) {\n          temp_input2 = input2 & 0x80000000;\n          do {\n            bit_check1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit_check1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp_input2;\n          if (masked_param4 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp_input2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp_input2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp_input2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "reverse_and_convert_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "masked_param4",
                "uVar3": "temp_input2",
                "unaff_r4": "temp_input1",
                "uVar1": "bit_check1",
                "bVar4": "is_zero",
                "in_r12": "constant_value"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_08000904",
            "code": "\nuint checkEquality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xorResult;\n  bool bothZero;\n  bool comparisonResult;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  bothZero = (value1 | value2 << 1) == 0;\n  if (bothZero) {\n    bothZero = (value3 | value4 << 1) == 0;\n  }\n  if (!bothZero) {\n    bothZero = value2 == value4;\n  }\n  if (bothZero) {\n    bothZero = value1 == value3;\n  }\n  if (!bothZero) {\n    xorResult = value2 ^ value4;\n    bothZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      bothZero = value2 == value4;\n    }\n    comparisonResult = -1 < (int)xorResult && value4 <= value2;\n    if (bothZero) {\n      comparisonResult = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!comparisonResult) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xorResult",
                "bVar2": "bothZero",
                "bVar3": "comparisonResult"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "execute_data_transfer_08000980",
            "code": "\nvoid execute_data_transfer_08000980(undefined4 source_address,undefined4 destination_address,undefined4 data_length,undefined4 data_buffer)\n\n{\n  FUN_08000990(data_length,data_buffer,source_address,destination_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "execute_data_transfer_08000980",
                "param_1": "source_address",
                "param_2": "destination_address",
                "param_3": "data_length",
                "param_4": "data_buffer"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "initialize_08000990",
            "code": "\nundefined4 initialize_08000990(undefined4 input_value)\n\n{\n  FUN_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "initialize_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_initialized_080009a0",
            "code": "\nbool checkIfInitialized_080009a0(void)\n\n{\n  char isInitialized;\n  \n  FUN_08000990();\n  return isInitialized != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_initialized_080009a0",
                "in_ZR": "isInitialized"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_null_terminated_080009b4",
            "code": "\nbool is_null_terminated_080009b4(void)\n\n{\n  char input_character;\n  \n  FUN_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_null_terminated_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_for_zero_flag_and_carry_flag_080009c8",
            "code": "\nbool checkForZeroFlagAndCarryFlag_080009c8(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  FUN_08000990();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_for_zero_flag_and_carry_flag_080009c8",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_end_of_input_080009f0",
            "code": "\nbool isEndOfInput_080009f0(void)\n\n{\n  char charToCheck;\n  \n  FUN_08000980();\n  return charToCheck == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_end_of_input_080009f0",
                "in_CY": "charToCheck"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 checkParameters_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputValue,uint inputFlag)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = inputFlag * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputFlag & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue | inputFlag << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputFlag & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != isCarrySet(temp2,0x2e00000)) {\n      return inputFlag & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp1 & 0xff);\n    if (inputValue << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputFlag & 0x1fffff | 0x100000;\n    inputValue = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (inputFlag & 0x80000000 | inputValue >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan",
                "SCARRY4": "isCarrySet"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_exponential_08000ad8",
            "code": "\nuint calculate_exponential_08000ad8(uint base,uint exponent,undefined4 param_3,uint param_4)\n\n{\n  int base_sign;\n  int exponent_sign;\n  uint base_shifted;\n  uint exponent_sign_inverted;\n  uint base_masked;\n  uint base_updated;\n  uint exponent_difference;\n  bool is_base_not_zero;\n  \n  base_shifted = exponent ^ 0x80000000;\n  base_masked = base << 1;\n  is_base_not_zero = base_masked == 0;\n  if (!is_base_not_zero) {\n    param_4 = exponent << 1;\n    is_base_not_zero = param_4 == 0;\n  }\n  if (!is_base_not_zero) {\n    is_base_not_zero = base_masked == param_4;\n  }\n  base_sign = (int)base_masked >> 0x18;\n  if (!is_base_not_zero) {\n    is_base_not_zero = base_sign == -1;\n  }\n  if (!is_base_not_zero) {\n    is_base_not_zero = (int)param_4 >> 0x18 == -1;\n  }\n  if (is_base_not_zero) {\n    exponent_sign = (int)(exponent << 1) >> 0x18;\n    if (base_sign == -1 || exponent_sign == -1) {\n      base_masked = base_shifted;\n      if (base_sign == -1) {\n        base_masked = base;\n      }\n      if (base_sign != -1 || exponent_sign != -1) {\n        base_shifted = base_masked;\n      }\n      is_base_not_zero = (base_masked & 0x7fffff) == 0;\n      if (is_base_not_zero) {\n        is_base_not_zero = (base_shifted & 0x7fffff) == 0;\n      }\n      if (is_base_not_zero) {\n        is_base_not_zero = base_masked == base_shifted;\n      }\n      if (!is_base_not_zero) {\n        base_masked = base_masked | 0x400000;\n      }\n      return base_masked;\n    }\n    if (((base ^ base_shifted) & 0x7fffffff) != 0) {\n      if (base_masked == 0) {\n        base = base_shifted;\n      }\n      return base;\n    }\n    if (base != base_shifted) {\n      return 0;\n    }\n    if ((base_masked & 0xff000000) == 0) {\n      base_shifted = base << 1;\n      if ((base & 0x80000000) != 0) {\n        base_shifted = base_shifted | 0x80000000;\n      }\n      return base_shifted;\n    }\n    if (base_masked < 0xfe000000) {\n      return base + 0x800000;\n    }\n    base = base & 0x80000000;\nLAB_08000c12:\n    return base | 0x7f800000;\n  }\n  base_masked = base_masked >> 0x18;\n  param_4 = param_4 >> 0x18;\n  exponent_difference = param_4 - base_masked;\n  is_base_not_zero = exponent_difference != 0;\n  base_updated = base_masked;\n  if (is_base_not_zero && base_masked <= param_4) {\n    base_updated = base_masked + exponent_difference;\n  }\n  if (is_base_not_zero && base_masked <= param_4) {\n    base_shifted = base_shifted ^ base;\n  }\n  if (is_base_not_zero && base_masked <= param_4) {\n    base = base ^ base_shifted;\n  }\n  if (is_base_not_zero && base_masked <= param_4) {\n    base_shifted = base_shifted ^ base;\n  }\n  if (param_4 < base_masked) {\n    exponent_difference = -exponent_difference;\n  }\n  if (0x19 < exponent_difference) {\n    return base;\n  }\n  base_masked = base & 0xffffff | 0x800000;\n  if ((base & 0x80000000) != 0) {\n    base_masked = -base_masked;\n  }\n  exponent_sign_inverted = base_shifted & 0xffffff | 0x800000;\n  if ((base_shifted & 0x80000000) != 0) {\n    exponent_sign_inverted = -exponent_sign_inverted;\n  }\n  if (base_updated == exponent_difference) {\n    exponent_sign_inverted = exponent_sign_inverted ^ 0x800000;\n    if (base_updated == 0) {\n      base_masked = base_masked ^ 0x800000;\n      base_updated = 1;\n    }\n    else {\n      exponent_difference = exponent_difference - 1;\n    }\n  }\n  base_masked = base_masked + ((int)exponent_sign_inverted >> (exponent_difference & 0xff));\n  exponent_sign_inverted = exponent_sign_inverted << (0x20 - exponent_difference & 0xff);\n  base = base_masked & 0x80000000;\n  if ((int)base_masked < 0) {\n    is_base_not_zero = exponent_sign_inverted != 0;\n    exponent_sign_inverted = -exponent_sign_inverted;\n    base_masked = -base_masked - (uint)is_base_not_zero;\n  }\n  if (base_masked < 0x800000) {\n    base_shifted = exponent_sign_inverted & 0x80000000;\n    exponent_sign_inverted = exponent_sign_inverted << 1;\n    base_masked = base_masked * 2 + (uint)(base_shifted != 0);\n    base_shifted = base_updated - 2;\n    if ((base_masked & 0x800000) == 0) {\n      exponent_difference = leading_zero_count(base_masked) - 8;\n      base_masked = base_masked << (exponent_difference & 0xff);\n      if ((int)base_shifted < (int)exponent_difference) {\n        base_masked = base_masked >> (-(base_shifted - exponent_difference) & 0xff);\n      }\n      else {\n        base_masked = base_masked + (base_shifted - exponent_difference) * 0x800000;\n      }\n      return base_masked | base;\n    }\n  }\n  else {\n    base_shifted = base_updated - 1;\n    if (0xffffff < base_masked) {\n      base_shifted = base_masked & 1;\n      base_masked = base_masked >> 1;\n      exponent_sign_inverted = (uint)(base_shifted != 0) << 0x1f | exponent_sign_inverted >> 1;\n      base_shifted = base_updated;\n      if (0xfd < base_updated) goto LAB_08000c12;\n    }\n  }\n  base_masked = base_masked + base_shifted * 0x800000 + (uint)(0x7fffffff < exponent_sign_inverted);\n  if (exponent_sign_inverted == 0x80000000) {\n    base_masked = base_masked & 0xfffffffe;\n  }\n  return base_masked | base;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_exponential_08000ad8",
                "param_1": "base",
                "param_2": "exponent",
                "iVar1": "base_sign",
                "iVar2": "exponent_sign",
                "uVar3": "base_shifted",
                "uVar4": "exponent_sign_inverted",
                "uVar5": "base_masked",
                "uVar6": "base_updated",
                "uVar7": "exponent_difference",
                "bVar8": "is_base_not_zero",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint input1,uint input2,undefined4 unused,uint unused)\n\n{\n  int upperBits1;\n  int upperBits2;\n  uint fraction1;\n  uint fraction2;\n  uint exponent1;\n  uint exponent2;\n  bool isEqual;\n  \n  fraction2 = input1 << 1;\n  isEqual = fraction2 == 0;\n  if (!isEqual) {\n    unused = input2 << 1;\n    isEqual = unused == 0;\n  }\n  if (!isEqual) {\n    isEqual = fraction2 == unused;\n  }\n  upperBits1 = (int)fraction2 >> 0x18;\n  if (!isEqual) {\n    isEqual = upperBits1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)unused >> 0x18 == -1;\n  }\n  if (isEqual) {\n    upperBits2 = (int)(input2 << 1) >> 0x18;\n    if (upperBits1 == -1 || upperBits2 == -1) {\n      fraction2 = input2;\n      if (upperBits1 == -1) {\n        fraction2 = input1;\n      }\n      if (upperBits1 != -1 || upperBits2 != -1) {\n        input2 = fraction2;\n      }\n      isEqual = (fraction2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = fraction2 == input2;\n      }\n      if (!isEqual) {\n        fraction2 = fraction2 | 0x400000;\n      }\n      return fraction2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (fraction2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((fraction2 & 0xff000000) == 0) {\n      fraction2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        fraction2 = fraction2 | 0x80000000;\n      }\n      return fraction2;\n    }\n    if (fraction2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  fraction2 = fraction2 >> 0x18;\n  unused = unused >> 0x18;\n  exponent2 = unused - fraction2;\n  isEqual = exponent2 != 0;\n  exponent1 = fraction2;\n  if (isEqual && fraction2 <= unused) {\n    exponent1 = fraction2 + exponent2;\n  }\n  if (isEqual && fraction2 <= unused) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && fraction2 <= unused) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && fraction2 <= unused) {\n    input2 = input2 ^ input1;\n  }\n  if (unused < fraction2) {\n    exponent2 = -exponent2;\n  }\n  if (0x19 < exponent2) {\n    return input1;\n  }\n  fraction2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    fraction2 = -fraction2;\n  }\n  fraction1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    fraction1 = -fraction1;\n  }\n  if (exponent1 == exponent2) {\n    fraction1 = fraction1 ^ 0x800000;\n    if (exponent1 == 0) {\n      fraction2 = fraction2 ^ 0x800000;\n      exponent1 = 1;\n    }\n    else {\n      exponent2 = exponent2 - 1;\n    }\n  }\n  fraction2 = fraction2 + ((int)fraction1 >> (exponent2 & 0xff));\n  fraction1 = fraction1 << (0x20 - exponent2 & 0xff);\n  input1 = fraction2 & 0x80000000;\n  if ((int)fraction2 < 0) {\n    isEqual = fraction1 != 0;\n    fraction1 = -fraction1;\n    fraction2 = -fraction2 - (uint)isEqual;\n  }\n  if (fraction2 < 0x800000) {\n    exponent2 = fraction1 & 0x80000000;\n    fraction1 = fraction1 << 1;\n    fraction2 = fraction2 * 2 + (uint)(exponent2 != 0);\n    exponent2 = exponent1 - 2;\n    if ((fraction2 & 0x800000) == 0) {\n      exponent1 = LZCOUNT(fraction2) - 8;\n      fraction2 = fraction2 << (exponent1 & 0xff);\n      if ((int)exponent2 < (int)exponent1) {\n        fraction2 = fraction2 >> (-(exponent2 - exponent1) & 0xff);\n      }\n      else {\n        fraction2 = fraction2 + (exponent2 - exponent1) * 0x800000;\n      }\n      return fraction2 | input1;\n    }\n  }\n  else {\n    exponent2 = exponent1 - 1;\n    if (0xffffff < fraction2) {\n      exponent2 = fraction2 & 1;\n      fraction2 = fraction2 >> 1;\n      fraction1 = (uint)(exponent2 != 0) << 0x1f | fraction1 >> 1;\n      exponent2 = exponent1;\n      if (0xfd < exponent1) goto LAB_08000c12;\n    }\n  }\n  fraction2 = fraction2 + exponent2 * 0x800000 + (uint)(0x7fffffff < fraction1);\n  if (fraction1 == 0x80000000) {\n    fraction2 = fraction2 & 0xfffffffe;\n  }\n  return fraction2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused",
                "param_4": "unused",
                "iVar1": "upperBits1",
                "iVar2": "upperBits2",
                "uVar3": "fraction1",
                "uVar4": "fraction2",
                "uVar5": "exponent1",
                "uVar6": "exponent2",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_uncompressed_size_08000c3c",
            "code": "\nuint calculateUncompressedSize_08000c3c(uint compressedData)\n\n{\n  uint result2;\n  uint temp2;\n  int constant;\n  uint temp;\n  \n  if (compressedData == 0) {\n    return 0;\n  }\n  result2 = LZCOUNT(compressedData);\n  temp2 = result2 - 8;\n  constant = temp2 * -0x800000 + 0x4a800000;\n  if (7 < result2) {\n    temp = 0 << (temp2 & 0xff);\n    result2 = constant + (compressedData << (temp2 & 0xff)) +\n            (0U >> (0x20 - temp2 & 0xff)) + (uint)(0x7fffffff < temp);\n    if (temp == 0x80000000) {\n      result2 = result2 & 0xfffffffe;\n    }\n    return result2;\n  }\n  temp2 = compressedData << result2 + 0x18;\n  result2 = constant + ((compressedData >> (0x20 - (result2 + 0x18) & 0xff)) - ((int)temp2 >> 0x1f));\n  if ((temp2 & 0x7fffffff) == 0) {\n    result2 = result2 & ~(temp2 >> 0x1f);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_uncompressed_size_08000c3c",
                "param_1": "compressedData",
                "uVar1": "result2",
                "uVar2": "temp2",
                "iVar3": "constant",
                "uVar4": "temp"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_unsigned_value_08000c44",
            "code": "\nuint calculateUnsignedValue_08000c44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint isNegative;\n  int result;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftValue = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    isNegative = result + (input << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftValue = input << leadingZeros + 0x18;\n  isNegative = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftValue >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_unsigned_value_08000c44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "isNegative",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculate_float_08000cec(uint input1,uint input2,undefined4 constant1,uint constant2)\n\n{\n  longlong temp1;\n  uint result;\n  uint input1_shifted;\n  int sum;\n  int shift_value;\n  uint temp2;\n  int temp3;\n  uint combined_input;\n  bool is_zero;\n  bool borrow_flag;\n  \n  input1_shifted = input1 >> 0x17 & 0xff;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    constant2 = input2 >> 0x17 & 0xff;\n    is_zero = constant2 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input1_shifted == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = constant2 == 0xff;\n  }\n  if (is_zero) {\n    constant2 = input2 >> 0x17 & 0xff;\n    if (input1_shifted == 0xff || constant2 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      combined_input = result;\n      if (((is_zero) || ((input1_shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((constant2 == 0xff && (combined_input = input2, (input2 & 0x7fffff) != 0)))) {\n        return combined_input | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = input1_shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input1_shifted = input1_shifted - 1;\n    }\n    input1 = input1 | result;\n    is_zero = constant2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      constant2 = constant2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1_shifted + constant2;\n  combined_input = input1 ^ input2;\n  input1_shifted = input1 << 9;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (input1_shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = combined_input & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    borrow_flag = SBORROW4(sum,0x7f);\n    shift_value = sum + -0x7f;\n    is_zero = shift_value == 0;\n    temp3 = shift_value;\n    if (!is_zero && 0x7e < sum) {\n      borrow_flag = SBORROW4(0xff,shift_value);\n      temp3 = 0xff - shift_value;\n      is_zero = shift_value == 0xff;\n    }\n    if (!is_zero && temp3 < 0 == borrow_flag) {\n      result = result | shift_value * 0x800000;\n    }\n    if (!is_zero && temp3 < 0 == borrow_flag) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    borrow_flag = SBORROW4(shift_value,1);\n    combined_input = sum - 0x80;\n    is_zero = combined_input == 0;\n    input1_shifted = combined_input;\n  }\n  else {\n    temp1 = (ulonglong)(input1_shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp2 = (uint)temp1;\n    result = (uint)((ulonglong)temp1 >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = combined_input & 0x80000000 | result;\n    combined_input = (sum + -0x7f) - (uint)is_zero;\n    borrow_flag = SBORROW4(combined_input,0xfd);\n    is_zero = combined_input == 0xfd;\n    input1_shifted = combined_input - 0xfd;\n    if (combined_input < 0xfe) {\n      result = result + combined_input * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)input1_shifted < 0 != borrow_flag) {\n    is_zero = (int)(combined_input + 0x19) < 0;\n    if (combined_input == 0xffffffe7 || is_zero != SCARRY4(combined_input,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (combined_input != 0xffffffe7 && is_zero == SCARRY4(combined_input,0x19)) {\n      input1_shifted = (result << 1) >> (-combined_input & 0xff);\n      combined_input = result << (combined_input + 0x20 & 0xff);\n      input1_shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1_shifted >> 1) + (uint)((byte)input1_shifted & 1);\n      if ((temp2 | combined_input << 1) == 0) {\n        input1_shifted = input1_shifted & ~(combined_input >> 0x1f);\n      }\n      return input1_shifted;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "lVar1": "temp1",
                "uVar2": "result",
                "uVar3": "input1_shifted",
                "iVar4": "sum",
                "iVar5": "shift_value",
                "uVar6": "temp2",
                "iVar7": "temp3",
                "uVar8": "combined_input",
                "bVar9": "is_zero",
                "bVar10": "borrow_flag"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculateFloat_08000e54(uint floatA,uint floatB,undefined4 floatC,uint floatD)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  tempVar2 = floatA >> 0x17 & 0xff;\n  flag1 = tempVar2 == 0;\n  if (!flag1) {\n    floatD = floatB >> 0x17 & 0xff;\n    flag1 = floatD == 0;\n  }\n  if (!flag1) {\n    flag1 = tempVar2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = floatD == 0xff;\n  }\n  if (flag1) {\n    floatD = floatB >> 0x17 & 0xff;\n    tempVar6 = floatA;\n    if (tempVar2 == 0xff) {\n      if (((floatA & 0x7fffff) != 0) || (tempVar6 = floatB, floatD == 0xff)) {\nLAB_08000e4a:\n        return tempVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (floatD == 0xff) {\n        tempVar6 = floatB;\n        if ((floatB & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (floatA ^ floatB) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      flag1 = (floatA & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (floatB & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = tempVar2 == 0;\n        tempVar6 = floatA & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            floatA = floatA << 1;\n            flag1 = (floatA & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          tempVar2 = tempVar2 - 1;\n        }\n        floatA = floatA | tempVar6;\n        flag1 = floatD == 0;\n        tempVar6 = floatB & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            floatB = floatB << 1;\n            flag1 = (floatB & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          floatD = floatD - 1;\n        }\n        floatB = floatB | tempVar6;\n        goto LAB_08000e6c;\n      }\n      if ((floatA & 0x7fffffff) == 0) {\n        if ((floatB & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    floatA = floatA ^ floatB;\n  }\n  else {\nLAB_08000e6c:\n    tempVar3 = tempVar2 - floatD;\n    if (floatB << 9 == 0) {\n      floatA = (floatA ^ floatB) & 0x80000000 | floatA & 0x7fffff;\n      flag3 = SCARRY4(tempVar3,0x7f);\n      tempVar5 = tempVar3 + 0x7f;\n      flag1 = tempVar5 < 0;\n      flag2 = tempVar5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,tempVar5);\n        flag1 = 0xff - tempVar5 < 0;\n        flag2 = tempVar5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        floatA = floatA | tempVar5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return floatA;\n      }\n      floatA = floatA | 0x800000;\n      tempVar2 = 0;\n      flag2 = SBORROW4(tempVar5,1);\n      tempVar4 = tempVar3 + 0x7e;\n      flag1 = tempVar4 == 0;\n      tempVar6 = tempVar4;\n    }\n    else {\n      tempVar1 = (floatB << 9) >> 4 | 0x10000000;\n      tempVar2 = (floatA << 9) >> 4 | 0x10000000;\n      floatA = (floatA ^ floatB) & 0x80000000;\n      flag1 = tempVar1 <= tempVar2;\n      if (!flag1) {\n        tempVar2 = tempVar2 << 1;\n      }\n      tempVar4 = tempVar3 + 0x7d + (uint)flag1;\n      tempVar6 = 0x800000;\n      do {\n        if (tempVar1 <= tempVar2) {\n          tempVar2 = tempVar2 - tempVar1;\n          floatA = floatA | tempVar6;\n        }\n        flag1 = tempVar1 >> 1 <= tempVar2;\n        if (flag1) {\n          tempVar2 = tempVar2 - (tempVar1 >> 1);\n        }\n        if (flag1) {\n          floatA = floatA | tempVar6 >> 1;\n        }\n        flag1 = tempVar1 >> 2 <= tempVar2;\n        if (flag1) {\n          tempVar2 = tempVar2 - (tempVar1 >> 2);\n        }\n        if (flag1) {\n          floatA = floatA | tempVar6 >> 2;\n        }\n        flag1 = tempVar1 >> 3 <= tempVar2;\n        if (flag1) {\n          tempVar2 = tempVar2 - (tempVar1 >> 3);\n        }\n        if (flag1) {\n          floatA = floatA | tempVar6 >> 3;\n        }\n        tempVar2 = tempVar2 * 0x10;\n        flag1 = tempVar2 == 0;\n        if (!flag1) {\n          tempVar6 = tempVar6 >> 4;\n          flag1 = tempVar6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(tempVar4,0xfd);\n      flag1 = tempVar4 == 0xfd;\n      tempVar6 = tempVar4 - 0xfd;\n      if (tempVar4 < 0xfe) {\n        floatA = floatA + tempVar4 * 0x800000 + (uint)(tempVar1 <= tempVar2);\n        if (tempVar2 - tempVar1 == 0) {\n          floatA = floatA & 0xfffffffe;\n        }\n        return floatA;\n      }\n    }\n    if (flag1 || (int)tempVar6 < 0 != flag2) {\n      flag1 = (int)(tempVar4 + 0x19) < 0;\n      if (tempVar4 == 0xffffffe7 || flag1 != SCARRY4(tempVar4,0x19)) {\n        floatA = floatA & 0x80000000;\n      }\n      if (tempVar4 == 0xffffffe7 || flag1 != SCARRY4(tempVar4,0x19)) {\n        return floatA;\n      }\n      tempVar6 = (floatA << 1) >> (-tempVar4 & 0xff);\n      tempVar4 = floatA << (tempVar4 + 0x20 & 0xff);\n      tempVar6 = ((uint)((floatA & 0x80000000) != 0) << 0x1f | tempVar6 >> 1) + (uint)((byte)tempVar6 & 1);\n      if ((tempVar2 | tempVar4 << 1) == 0) {\n        tempVar6 = tempVar6 & ~(tempVar4 >> 0x1f);\n      }\n      return tempVar6;\n    }\n  }\n  return floatA & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "floatA",
                "param_2": "floatB",
                "param_3": "floatC",
                "param_4": "floatD",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_input;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "call_function_with_swapped_params_08000ffc",
            "code": "\nvoid callFunctionWithSwappedParams_08000ffc(undefined4 outParam,undefined4 inParam)\n\n{\n  FUN_08001004(inParam,outParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "call_function_with_swapped_params_08000ffc",
                "param_1": "outParam",
                "param_2": "inParam"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenate_params_08001004(undefined4 param1,undefined4 param2)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(param2,param1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_initialized_08001014",
            "code": "\nbool check_if_initialized_08001014(void)\n\n{\n  char is_initialized;\n  \n  FUN_08001004();\n  return is_initialized != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_initialized_08001014",
                "in_ZR": "is_initialized"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_null_terminated_08001028",
            "code": "\nbool is_null_terminated_08001028(void)\n\n{\n  char input_char;\n  \n  FUN_08001004();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_null_terminated_08001028",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_flags_and_execute_08001050",
            "code": "\nbool checkFlagsAndExecute_08001050(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  FUN_08000ffc();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_flags_and_execute_08001050",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_cy_null_08001064",
            "code": "\nbool is_cy_null_08001064(void)\n\n{\n  char character;\n  \n  FUN_08000ffc();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_cy_null_08001064",
                "in_CY": "character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_signed_integer_08001078",
            "code": "\nuint convertToSignedInteger_08001078(uint negativeValue)\n\n{\n  uint transformedValue;\n  uint negativeExponent;\n  \n  if (negativeValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  transformedValue = (negativeValue << 1) >> 0x18;\n  negativeExponent = 0x9e - transformedValue;\n  if (transformedValue < 0x9f && negativeExponent != 0) {\n    transformedValue = (negativeValue << 8 | 0x80000000) >> (negativeExponent & 0xff);\n    if ((negativeValue & 0x80000000) != 0) {\n      transformedValue = -transformedValue;\n    }\n    return transformedValue;\n  }\n  if ((negativeExponent == 0xffffff9f) && ((negativeValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  negativeValue = negativeValue & 0x80000000;\n  if (negativeValue == 0) {\n    negativeValue = 0x7fffffff;\n  }\n  return negativeValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "negativeValue",
                "uVar1": "transformedValue",
                "uVar2": "negativeExponent"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "bitwise_shift_function_080010c4",
            "code": "\nuint bitwise_shift_function_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "bitwise_shift_function_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "execute_function_08001104",
            "code": "\nundefined4 executeFunction_08001104(undefined4 input_param)\n\n{\n  uint result;\n  \n  result = FUN_08002214();\n  FUN_08001214(result / 1000);\n  FUN_08001194(0xffffffff,input_param,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "execute_function_08001104",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_device_08001128",
            "code": "\n\n\nundefined4 initializeDevice_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_device_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_value_08001194",
            "code": "\n\n\nvoid updateMemoryValue_08001194(uint address,uint value1,uint value2)\n\n{\n  undefined newValue;\n  uint bitShift;\n  uint mask;\n  uint offset;\n  \n  mask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  bitShift = 7 - mask;\n  offset = mask + 4;\n  if (3 < bitShift) {\n    bitShift = 4;\n  }\n  if (offset < 7) {\n    mask = 0;\n  }\n  bitShift = (1 << (bitShift & 0xff)) - 1;\n  if (6 < offset) {\n    mask = mask - 3;\n  }\n  newValue = (undefined)\n          ((value2 & (1 << (mask & 0xff)) - 1U | (value1 & bitShift) << (mask & 0xff)) << 4);\n  if (-1 < (int)address) {\n    mask = address + 0xe000e100;\n  }\n  else {\n    bitShift = 0xe000ed14;\n    mask = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(mask + 0x300) = newValue;\n  }\n  else {\n    *(undefined *)(bitShift + mask) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_value_08001194",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "newValue",
                "uVar2": "bitShift",
                "uVar3": "mask",
                "uVar4": "offset"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_at_offset_080011fc",
            "code": "\nvoid setBitAtOffset_080011fc(uint offset)\n\n{\n  *(int *)((offset >> 5) * 4 + -0x1fff1f00) = 1 << (offset & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_at_offset_080011fc",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_parameters_08001214",
            "code": "\n\n\nundefined4 set_parameters_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_parameters_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "update_register_08001240",
            "code": "\n\n\nvoid updateRegister_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "update_register_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *bitArray1,uint *bitArray2)\n\n{\n  uint newValue;\n  uint bitMask;\n  uint value;\n  int index;\n  uint bitIndex;\n  uint bitPattern;\n  uint specialValue;\n  uint *bitArrayPtr;\n  int position;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    bitPattern = 1 << (bitIndex & 0xff);\n    bitMask = bitPattern & *bitArray2;\n    if (bitPattern == bitMask) {\n      value = bitArray2[1];\n      if (value == 0x12) {\n        newValue = bitArray2[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          newValue = bitArray2[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_080013be;\n          if (value == 1) {\n            newValue = bitArray2[3];\n          }\n        }\n        else if (value == 3) {\n          newValue = 0;\n        }\n        else if (value == 0x11) {\n          newValue = bitArray2[3] + 4;\n        }\n      }\n      else {\n        if (value != 0x10210000) {\n          if (value < 0x10210001) {\n            if (value != 0x10110000) {\n              specialValue = 0x10120000;\nLAB_080013b8:\n              if (value != specialValue) goto LAB_080012a8;\n            }\n          }\n          else if ((value != 0x10310000) && (value != 0x10320000)) {\n            specialValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = bitArray2[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            bitArray1[4] = bitPattern;\n          }\n          if (newValue != 1) {\n            bitArray1[5] = bitPattern;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bitPattern = *bitArray1;\n        value = bitIndex << 2;\n        bitArrayPtr = bitArray1;\n      }\n      else {\n        bitPattern = bitArray1[1];\n        value = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        bitArrayPtr = bitArray1 + 1;\n      }\n      *bitArrayPtr = bitPattern & ~(0xf << (value & 0xff)) | newValue << (value & 0xff);\n      bitArrayPtr = (uint *)bitArray2[1];\n      if (((uint)bitArrayPtr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        position = (bitIndex & 3) << 2;\n        if (bitArray1 == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (bitArray1 == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (bitArray1 == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (bitArray1 == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             index << position | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << position);\n        if (((uint)bitArrayPtr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)bitArrayPtr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)bitArrayPtr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)bitArrayPtr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "bitArray1",
                "param_2": "bitArray2",
                "uVar1": "newValue",
                "uVar2": "bitMask",
                "uVar3": "value",
                "iVar4": "index",
                "uVar5": "bitIndex",
                "uVar6": "bitPattern",
                "uVar7": "specialValue",
                "unaff_r10": "bitArrayPtr",
                "iVar8": "position"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_08001424",
            "code": "\nvoid set_param_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "update_value_xor_0800142e",
            "code": "\nvoid updateValueXOR_0800142e(int pointerToData,uint newValue)\n\n{\n  *(uint *)(pointerToData + 0xc) = newValue ^ *(uint *)(pointerToData + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "update_value_xor_0800142e",
                "param_1": "pointerToData",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_flags_and_values_08001436",
            "code": "\nundefined4 updateFlagsAndValues_08001436(int *inputArray)\n\n{\n  int value;\n  \n  value = *inputArray;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n    *(undefined *)(inputArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_flags_and_values_08001436",
                "param_1": "inputArray",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_and_update_data_08001460",
            "code": "\nundefined4 check_and_update_data_08001460(uint **data_ptr,uint flag,uint timeout)\n\n{\n  int initial_func_result;\n  int current_func_result;\n  uint value;\n  uint *current_data_ptr;\n  \n  initial_func_result = FUN_0800115c();\n  do {\n    current_data_ptr = *data_ptr;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = current_data_ptr[5];\n    }\n    else {\n      value = current_data_ptr[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(current_data_ptr[5] << 0x15) < 0) {\n      *current_data_ptr = *current_data_ptr | 0x200;\n      current_data_ptr[5] = current_data_ptr[5] & 0xfffffbff;\n      data_ptr[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_func_result = FUN_0800115c(), (uint)(current_func_result - initial_func_result) <= timeout))));\n  *(undefined *)((int)data_ptr + 0x35) = 0x20;\n  *(undefined *)(data_ptr + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_and_update_data_08001460",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "initial_func_result",
                "iVar2": "current_func_result",
                "uVar3": "value",
                "puVar4": "current_data_ptr"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_validity_080014e2",
            "code": "\nundefined4 checkValidity_080014e2(int *array,uint length)\n\n{\n  int result_1;\n  int result_2;\n  \n  result_1 = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result_2 = FUN_08001436(array);\n    if (result_2 != 0) break;\n    if ((length != 0xffffffff) &&\n       ((length == 0 || (result_2 = FUN_0800115c(), length < (uint)(result_2 - result_1))))) {\n      array[0xe] = array[0xe] | 0x20;\n      *(undefined *)((int)array + 0x35) = 0x20;\n      *(undefined *)(array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_validity_080014e2",
                "param_1": "array",
                "param_2": "length",
                "iVar1": "result_1",
                "iVar2": "result_2"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "set_flag_and_process_08001530",
            "code": "\nundefined4 setFlagAndProcess_08001530(uint **ppuData,uint flag1,uint flag2,int control,uint param)\n\n{\n  int start;\n  int end;\n  uint *pData;\n  uint **pppData;\n  uint data1;\n  uint data2;\n  \n  **ppuData = **ppuData | 0x100;\n  pppData = ppuData;\n  data1 = flag1;\n  data2 = flag2;\n  start = FUN_0800115c();\n  do {\n    pData = *ppuData;\n    do {\n      if ((int)(pData[5] << 0x1f) < 0) {\n        pData[4] = flag1 & 0xfe;\n        start = FUN_08001460(ppuData,0x10002,param,pData,pppData,data1,data2);\n        if (start == 0) {\n          start = FUN_080014e2(ppuData,param,(*ppuData)[5],(*ppuData)[6]);\n          if (start == 0) {\n            pData = *ppuData;\n            if (control == 1) {\nLAB_080015ca:\n              pData[4] = flag2 & 0xff;\n              return 0;\n            }\n            pData[4] = flag2 >> 8;\n            start = FUN_080014e2(ppuData,param);\n            if (start == 0) {\n              pData = *ppuData;\n              goto LAB_080015ca;\n            }\n          }\n          if (ppuData[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **ppuData = **ppuData | 0x200;\n        }\n        else if (ppuData[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (end = FUN_0800115c(), param < (uint)(end - start))) {\n      *(undefined *)((int)ppuData + 0x35) = 0x20;\n      *(undefined *)(ppuData + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "set_flag_and_process_08001530",
                "param_1": "ppuData",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "control",
                "param_5": "param",
                "iVar1": "start",
                "iVar2": "end",
                "puVar3": "pData",
                "ppuVar4": "pppData",
                "uVar5": "data1",
                "uVar6": "data2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "initialize_flags_080015e8",
            "code": "\nundefined4 initializeFlags_080015e8(uint **flags,uint value1,uint value2,int flagType,uint timeout)\n\n{\n  int result;\n  int currentValue;\n  uint *flagPtr;\n  uint **flagsPtr;\n  uint tempValue1;\n  uint tempValue2;\n  \n  flagPtr = *flags;\n  *flagPtr = *flagPtr | 0x400;\n  *flagPtr = *flagPtr | 0x100;\n  flagsPtr = flags;\n  tempValue1 = value1;\n  tempValue2 = value2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  flagPtr = *flags;\n  while (-1 < (int)(flagPtr[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  flagPtr[4] = value1 & 0xfe;\n  result = FUN_08001460(flags,0x10002,timeout,flagPtr,flagsPtr,tempValue1,tempValue2);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(flags,timeout,(*flags)[5],(*flags)[6]);\n  if (result == 0) {\n    flagPtr = *flags;\n    if (flagType != 1) {\n      flagPtr[4] = value2 >> 8;\n      result = FUN_080014e2(flags,timeout);\n      if (result != 0) goto LAB_08001642;\n      flagPtr = *flags;\n    }\n    flagPtr[4] = value2 & 0xff;\n    result = FUN_080014e2(flags,timeout);\n    if (result == 0) {\n      **flags = **flags | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*flags)[5] << 0x1f) < 0) {\n            (*flags)[4] = value1 & 0xff | 1;\n            result = FUN_08001460(flags,0x10002,timeout);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (flags[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentValue = FUN_0800115c(), (uint)(currentValue - result) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)flags + 0x35) = 0x20;\n      *(undefined *)(flags + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (flags[0xe] == (uint *)0x4) {\n    **flags = **flags | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentValue = FUN_0800115c(), timeout < (uint)(currentValue - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "initialize_flags_080015e8",
                "param_1": "flags",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flagType",
                "param_5": "timeout",
                "iVar1": "result",
                "iVar2": "currentValue",
                "puVar3": "flagPtr",
                "ppuVar4": "flagsPtr",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_and_modify_data_080016f4",
            "code": "\nundefined4 checkAndModifyData_080016f4(int *pointerArray,uint size)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  initialValue = FUN_0800115c();\n  while( true ) {\n    currentValue = *pointerArray;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((size == 0) || (currentValue = FUN_0800115c(), size < (uint)(currentValue - initialValue))) {\n      pointerArray[0xe] = pointerArray[0xe] | 0x20;\n      *(undefined *)((int)pointerArray + 0x35) = 0x20;\n      *(undefined *)(pointerArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  pointerArray[0xe] = 0;\n  *(undefined *)(pointerArray + 0xd) = 0;\n  *(undefined *)((int)pointerArray + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_and_modify_data_080016f4",
                "param_1": "pointerArray",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_parameters_08001754",
            "code": "\nundefined4 initializeParameters_08001754(uint **parameterArray)\n\n{\n  uint firstValue;\n  uint secondValue;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint calculatedValue;\n  undefined8 result;\n  \n  if (parameterArray != (uint **)0x0) {\n    if (*(char *)((int)parameterArray + 0x35) == '\\0') {\n      *(undefined *)(parameterArray + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)parameterArray + 0x35) = 0x24;\n    **parameterArray = **parameterArray & 0xfffffffe;\n    result = FUN_08002220();\n    secondValue = (uint)((ulonglong)result >> 0x20);\n    firstValue = (uint)result;\n    pointer2 = parameterArray[1];\n    calculatedValue = firstValue / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      secondValue = 300;\n    }\n    pointer1 = *parameterArray;\n    if ((uint *)0x186a0 < pointer2) {\n      secondValue = calculatedValue * secondValue;\n    }\n    pointer1[1] = calculatedValue;\n    if ((uint *)0x186a0 < pointer2) {\n      calculatedValue = secondValue / 1000;\n    }\n    pointer1[8] = calculatedValue + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      firstValue = firstValue / (uint)((int)pointer2 << 1);\n      if ((firstValue & 0xfff) < 4) {\n        firstValue = 4;\n      }\n    }\n    else {\n      if (parameterArray[2] == (uint *)0x0) {\n        firstValue = firstValue / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        firstValue = firstValue / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((firstValue & 0xfff) == 0) {\n        firstValue = 1;\n      }\n    }\n    pointer2 = parameterArray[8];\n    pointer3 = parameterArray[7];\n    pointer1[7] = firstValue;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)parameterArray[4] | (uint)parameterArray[3];\n    pointer1[3] = (uint)parameterArray[5] | (uint)parameterArray[6];\n    *pointer1 = *pointer1 | 1;\n    parameterArray[0xe] = (uint *)0x0;\n    *(undefined *)((int)parameterArray + 0x35) = 0x20;\n    *(undefined *)((int)parameterArray + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_parameters_08001754",
                "param_1": "parameterArray",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar6": "calculatedValue",
                "uVar7": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,byte *bytes,\n            short length,undefined4 param4)\n\n{\n  int counter1;\n  int counter2;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (bytes == (byte *)0x0) {\n      return 1;\n    }\n    if (length == 0) {\n      return 1;\n    }\n    counter1 = FUN_0800115c();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        counter1 = FUN_08001530(data,param1,param2,param3,param4);\n        if (counter1 != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto loop;\n      }\n      counter2 = FUN_0800115c();\n    } while ((uint)(counter2 - counter1) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (length != 0) {\nloop:\n    counter1 = FUN_080014e2(data,param4);\n    if (counter1 != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*bytes;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(length + -1) == 0) break;\n      length = length + -2;\n      ptr[4] = (uint)bytes[1];\n      bytes = bytes + 2;\n    }\n    else {\n      bytes = bytes + 1;\n      length = length + -1;\n    }\n  }\n  counter1 = FUN_080014e2(data,param4);\n  if (counter1 == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "bytes",
                "param_6": "length",
                "param_7": "param4",
                "iVar1": "counter1",
                "iVar2": "counter2",
                "puVar3": "ptr",
                "uVar4": "value",
                "LAB_080018e2": "loop"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,\n            undefined *buffer,ushort size,uint timeout)\n\n{\n  undefined *ptr1;\n  int startTime;\n  int currentTime;\n  uint *ptr2;\n  uint value;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (buffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  startTime = FUN_0800115c();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    currentTime = FUN_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  startTime = FUN_080015e8(data,param1,param2,param3,timeout);\n  if (startTime != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (size == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    startTime = FUN_080016f4(data,timeout);\n    if (startTime == 0) {\n      *buffer = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *ptr2 = value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < size) {\n      startTime = FUN_080016f4(data,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *buffer = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = buffer + 2;\n        size = size - 2;\n      }\n      else {\n        ptr3 = buffer + 1;\n        size = size - 1;\n      }\n      ptr1 = buffer + 1;\n      buffer = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (size != 2) {\n      startTime = FUN_0800115c();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQinterrupts();\n            *buffer = (char)(*data)[4];\n            startTime = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *buffer = (char)ptr2[4];\n        enableIRQinterrupts();\n        buffer[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        buffer[1] = (char)ptr2[4];\n        enableIRQinterrupts();\n        buffer[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "buffer",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "ptr2",
                "uVar5": "value",
                "puVar6": "ptr3",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_and_modify_settings_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_and_modify_settings_08001b58(int *settings)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (*settings << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (settings[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      iVar1 = settings[1];\n      if (iVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (iVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          iVar1 = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            iVar2 = FUN_0800115c();\n            if (100 < (uint)(iVar2 - iVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (iVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      iVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        iVar2 = FUN_0800115c();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*settings << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (settings[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag_1 = settings[4];\n      if (flag_1 == 0) {\n        iVar1 = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          iVar2 = FUN_0800115c();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag_1 = 1;\n      iVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        iVar2 = FUN_0800115c();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = settings[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*settings << 0x1c < 0) {\n    flag_2 = settings[6];\n    if (flag_2 == 0) {\n      iVar1 = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        iVar2 = FUN_0800115c();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag_2 = 1;\n      iVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        iVar2 = FUN_0800115c();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *settings << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  iVar1 = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    iVar2 = FUN_0800115c();\n    if (100 < (uint)(iVar2 - iVar1)) {\n      return 3;\n    }\n  }\n  iVar1 = flag_3;\n  if (iVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (iVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      iVar1 = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        iVar2 = FUN_0800115c();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (iVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  iVar1 = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    iVar2 = FUN_0800115c();\n    if (5000 < (uint)(iVar2 - iVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (flag_4 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (flag_4 != 2) {\n      flag_7 = 0;\n      iVar1 = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        iVar2 = FUN_0800115c();\n      } while ((uint)(iVar2 - iVar1) < 3);\n      return 3;\n    }\n    flag_7 = 0;\n    iVar1 = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (flag_5 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | settings[2];\n        }\n        _DAT_40021004 = flag_5 | flag_6 | _DAT_40021004 & 0xffc2ffff;\n        flag_7 = 1;\n        iVar1 = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          iVar2 = FUN_0800115c();\n        } while ((uint)(iVar2 - iVar1) < 3);\n        return 3;\n      }\n      iVar2 = FUN_0800115c();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_and_modify_settings_08001b58",
                "param_1": "settings",
                "iRam42420000": "flag_1",
                "iRam42420480": "flag_2",
                "param_1[3]": "flag_3",
                "param_1[7]": "flag_4",
                "param_1[8]": "flag_5",
                "param_1[9]": "flag_6",
                "uRam42420060": "flag_7"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_speed_08002008",
            "code": "\n\n\nint calculateClockSpeed_08002008(void)\n\n{\n  undefined4 value1;\n  int clockSpeed;\n  undefined4 value2;\n  undefined4 *dataPointer;\n  uint divider;\n  undefined4 *newDataPointer;\n  byte byteArray [4];\n  undefined4 valueArray [5];\n  \n  dataPointer = &DAT_080072f0;\n  newDataPointer = valueArray;\n  do {\n    value1 = *dataPointer;\n    value2 = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *newDataPointer = value1;\n    newDataPointer[1] = value2;\n    newDataPointer = newDataPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    clockSpeed = divider * *(byte *)((int)valueArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockSpeed = 8000000;\n  }\n  return clockSpeed;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_speed_08002008",
                "uVar1": "value1",
                "iVar2": "clockSpeed",
                "uVar3": "value2",
                "puVar4": "dataPointer",
                "uVar5": "divider",
                "puVar6": "newDataPointer",
                "local_24": "byteArray",
                "local_20": "valueArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "process_data_0800209c",
            "code": "\n\n\nundefined4 process_data_0800209c(uint *data_array,uint data_size)\n\n{\n  char flag_a;\n  char flag_b;\n  int shifted_data;\n  uint value_1;\n  int comparison_result;\n  uint value_2;\n  \n  if ((data_size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size, data_size == (data_size & 7))) {\n    if ((int)(*data_array << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_array[2];\n    }\n    shifted_data = *data_array << 0x1f;\n    if (-1 < shifted_data) {\nLAB_080020ba:\n      if ((data_size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size, data_size != (data_size & 7))) {\n        return 1;\n      }\n      if ((*data_array & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_array[3];\n      }\n      if ((int)(*data_array << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_array[4] << 3;\n      }\n      value_1 = FUN_08002008();\n      DAT_200001bc = value_1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    value_1 = data_array[1];\n    if (value_1 == 1) {\n      flag_b = '\\x01';\n      flag_a = '\\0';\n    }\n    else {\n      value_2 = _DAT_40021000;\n      if (value_1 == 2) goto LAB_08002176;\n      flag_b = '\\0';\n      flag_a = '\\x01';\n    }\n    value_2 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag_a << 6) << 0x18 | (uint)(byte)(flag_b << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)value_2 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | value_1;\n      shifted_data = FUN_0800115c(shifted_data,value_2);\n      if (data_array[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_data) < 0x1389);\n      }\n      else if (data_array[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_data) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_data) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "process_data_0800209c",
                "param_1": "data_array",
                "param_2": "data_size",
                "cVar1": "flag_a",
                "cVar2": "flag_b",
                "iVar3": "shifted_data",
                "uVar4": "value_1",
                "iVar5": "comparison_result",
                "uVar6": "value_2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extract_and_shift_08002250",
            "code": "\n\n\nuint extract_And_Shift_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extract_and_shift_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_settings_08002280",
            "code": "\nvoid updateSettings_08002280(int settingsAddress,uint *newSettings)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(settingsAddress + 0x20) = *(uint *)(settingsAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(settingsAddress + 4);\n  updatedValue3 = *newSettings;\n  updatedValue1 = *(uint *)(settingsAddress + 0x20) & 0xfffffffd | newSettings[2];\n  if (settingsAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | newSettings[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | newSettings[5] | newSettings[6];\n  }\n  *(uint *)(settingsAddress + 4) = updatedValue2;\n  *(uint *)(settingsAddress + 0x18) = *(uint *)(settingsAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(settingsAddress + 0x34) = newSettings[1];\n  *(uint *)(settingsAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_settings_08002280",
                "param_1": "settingsAddress",
                "param_2": "newSettings",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid update_parameters_080022d0(int address,uint *values)\n\n{\n  uint updated_param1;\n  uint updated_param2;\n  uint updated_param3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  updated_param2 = *(uint *)(address + 4);\n  updated_param3 = *values;\n  updated_param1 = *(uint *)(address + 0x20) & 0xfffffdff | values[2] << 8;\n  if (address == 0x40012c00) {\n    updated_param1 = (updated_param1 & 0xfffff7ff | values[3] << 8) & 0xfffffbff;\n    updated_param2 = updated_param2 & 0xffffcfff | (values[5] | values[6]) << 4;\n  }\n  *(uint *)(address + 4) = updated_param2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | updated_param3;\n  *(uint *)(address + 0x3c) = values[1];\n  *(uint *)(address + 0x20) = updated_param1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updated_param1",
                "uVar2": "updated_param2",
                "uVar3": "updated_param3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_permissions_08002324",
            "code": "\nvoid updatePermissions_08002324(int baseAddress,int *parameters)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int constantValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  value1 = *(uint *)(baseAddress + 4);\n  value2 = *parameters;\n  value3 = parameters[2];\n  constantValue = 0x40012c00;\n  if (baseAddress == 0x40012c00) {\n    constantValue = parameters[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (baseAddress == 0x40012c00) {\n    value1 = value1 | constantValue << 6;\n  }\n  *(uint *)(baseAddress + 4) = value1;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(baseAddress + 0x40) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_permissions_08002324",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "constantValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryPointer,uint *dataPointer)\n\n{\n  uint tempValue;\n  \n  tempValue = *memoryPointer;\n  if (((((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n       (memoryPointer == (uint *)0x40000400)) || (memoryPointer == (uint *)0x40000800)) &&\n     (((tempValue = tempValue & 0xffffff8f | dataPointer[1], memoryPointer == (uint *)0x40012c00 ||\n       (memoryPointer == (uint *)0x40000000)) ||\n      ((memoryPointer == (uint *)0x40000400 || (memoryPointer == (uint *)0x40000800)))))) {\n    tempValue = tempValue & 0xfffffcff | dataPointer[3];\n  }\n  *memoryPointer = tempValue;\n  memoryPointer[0xb] = dataPointer[2];\n  memoryPointer[10] = *dataPointer;\n  tempValue = 0x40012c00;\n  if (memoryPointer == (uint *)0x40012c00) {\n    tempValue = dataPointer[4];\n  }\n  if (memoryPointer == (uint *)0x40012c00) {\n    memoryPointer[0xc] = tempValue;\n  }\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryPointer",
                "param_2": "dataPointer",
                "uVar1": "tempValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_data_080023d0",
            "code": "\nundefined4 initializeData_080023d0(undefined4 *dataPtr)\n\n{\n  if (dataPtr != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 2;\n    FUN_08002368(*dataPtr,dataPtr + 1);\n    *(undefined *)((int)dataPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_data_080023d0",
                "param_1": "dataPtr"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_config_08002404",
            "code": "\nvoid updateConfig_08002404(int configAddress,int *configData)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int configValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(configAddress + 4);\n  configValue = *configData;\n  updatedValue1 = *(uint *)(configAddress + 0x20) & 0xffffffdf | configData[2] << 4;\n  if (configAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | configData[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (configData[5] | configData[6]) << 2;\n  }\n  *(uint *)(configAddress + 4) = updatedValue2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffff8cff | configValue << 8;\n  *(int *)(configAddress + 0x38) = configData[1];\n  *(uint *)(configAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_config_08002404",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "configValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "set_flag_and_value_0800245c",
            "code": "\nvoid setFlagAndValue_0800245c(int *paramPtr,undefined4 unknownFlag,undefined4 flagValue)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int tempVar4;\n  int tempVar5;\n  uint updatedFlagValue;\n  int var1;\n  \n  if (*(char *)(paramPtr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)paramPtr + 0x39) = 2;\n  *(undefined *)(paramPtr + 0xe) = 1;\n  switch(flagValue) {\n  case 0:\n    FUN_08002280(*paramPtr);\n    var1 = *paramPtr;\n    updatedFlagValue = *(uint *)(tempVar1 + 0x10);\n    *(uint *)(var1 + 0x18) = *(uint *)(var1 + 0x18) | 8;\n    *(uint *)(var1 + 0x18) = *(uint *)(var1 + 0x18) & 0xfffffffb;\n    updatedFlagValue = *(uint *)(var1 + 0x18) | updatedFlagValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*paramPtr);\n    var1 = *paramPtr;\n    tempVar5 = *(int *)(tempVar2 + 0x10);\n    *(uint *)(var1 + 0x18) = *(uint *)(var1 + 0x18) | 0x800;\n    *(uint *)(var1 + 0x18) = *(uint *)(var1 + 0x18) & 0xfffffbff;\n    updatedFlagValue = *(uint *)(var1 + 0x18) | tempVar5 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*paramPtr);\n    var1 = *paramPtr;\n    updatedFlagValue = *(uint *)(tempVar3 + 0x10);\n    *(uint *)(var1 + 0x1c) = *(uint *)(var1 + 0x1c) | 8;\n    *(uint *)(var1 + 0x1c) = *(uint *)(var1 + 0x1c) & 0xfffffffb;\n    updatedFlagValue = *(uint *)(var1 + 0x1c) | updatedFlagValue;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*paramPtr);\n    var1 = *paramPtr;\n    tempVar5 = *(int *)(tempVar4 + 0x10);\n    *(uint *)(var1 + 0x1c) = *(uint *)(var1 + 0x1c) | 0x800;\n    *(uint *)(var1 + 0x1c) = *(uint *)(var1 + 0x1c) & 0xfffffbff;\n    updatedFlagValue = *(uint *)(var1 + 0x1c) | tempVar5 << 8;\nLAB_080024fa:\n    *(uint *)(var1 + 0x1c) = updatedFlagValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var1 + 0x18) = updatedFlagValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)paramPtr + 0x39) = 1;\n  *(undefined *)(paramPtr + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "set_flag_and_value_0800245c",
                "param_1": "paramPtr",
                "param_2": "unknownFlag",
                "param_3": "flagValue",
                "extraout_r1": "tempVar1",
                "extraout_r1_00": "tempVar2",
                "extraout_r1_01": "tempVar3",
                "extraout_r1_02": "tempVar4",
                "iVar1": "tempVar5",
                "uVar2": "updatedFlagValue",
                "iVar3": "var1"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid updateBit_08002520(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = bitValue << (bitPosition & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_memory_08002538",
            "code": "\nundefined4 initializeMemory_08002538(uint **memory,undefined4 value)\n\n{\n  uint defaultInitValue;\n  uint *memoryPointer;\n  \n  FUN_08002520(*memory,value,1);\n  memoryPointer = *memory;\n  defaultInitValue = 0x40012c00;\n  if (memoryPointer == (uint *)0x40012c00) {\n    defaultInitValue = uRam40012c44 | 0x8000;\n  }\n  if (memoryPointer == (uint *)0x40012c00) {\n    memoryPointer[0x11] = defaultInitValue;\n  }\n  *memoryPointer = *memoryPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_memory_08002538",
                "param_1": "memory",
                "param_2": "value",
                "uVar1": "defaultInitValue",
                "puVar2": "memoryPointer"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "validate_and_set_data_08002564",
            "code": "\nundefined4 validate_and_set_data_08002564(int *data_ptr,uint *mask_ptr)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    *(undefined *)((int)data_ptr + 0x39) = 2;\n    *(uint *)(*data_ptr + 0x44) =\n         *mask_ptr | mask_ptr[1] | mask_ptr[2] | mask_ptr[3] | mask_ptr[4] | mask_ptr[5] | mask_ptr[6];\n    *(undefined *)((int)data_ptr + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data_ptr + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "validate_and_set_data_08002564",
                "param_1": "data_ptr",
                "param_2": "mask_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 updatePermissions_080025a4(int *permissions,uint *flags)\n\n{\n  uint newVal;\n  undefined4 result;\n  int ptrPermissions;\n  uint newFlags;\n  \n  result = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    ptrPermissions = *permissions;\n    newFlags = *flags;\n    newVal = flags[1];\n    *(uint *)(ptrPermissions + 4) = *(uint *)(ptrPermissions + 4) & 0xffffff8f;\n    *(uint *)(ptrPermissions + 4) = *(uint *)(ptrPermissions + 4) | newFlags;\n    *(uint *)(ptrPermissions + 8) = *(uint *)(ptrPermissions + 8) & 0xffffff7f;\n    *(uint *)(ptrPermissions + 8) = *(uint *)(ptrPermissions + 8) | newVal;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "permissions",
                "param_2": "flags",
                "uVar2": "result",
                "iVar3": "ptrPermissions",
                "uVar4": "newFlags",
                "uVar1": "newVal"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *param_1)\n\n{\n  int result1;\n  int result2;\n  uint value;\n  int value1;\n  int value2;\n  int address;\n  \n  address = *param_1;\n  value = param_1[4];\n  *(uint *)(address + 0x10) = *(uint *)(address + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(address + 0xc) = param_1[2] | value | param_1[5] | *(uint *)(address + 0xc) & 0xffffe9f3;\n  *(uint *)(address + 0x14) = *(uint *)(address + 0x14) & 0xfffffcff | param_1[6];\n  if (address == 0x40013800) {\n    result1 = FUN_08002250();\n    value1 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100);\n    result1 = FUN_08002250();\n    value2 = param_1[1];\n    result2 = FUN_08002250();\n    result2 = (uint)(result1 * 0x19) / (uint)(value2 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002250();\n    value = (uint)(result1 * 0x19) / (uint)(param_1[1] << 2);\n    result1 = FUN_08002250();\n  }\n  else {\n    result1 = FUN_08002220();\n    value1 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100);\n    result1 = FUN_08002220();\n    value2 = param_1[1];\n    result2 = FUN_08002220();\n    result2 = (uint)(result1 * 0x19) / (uint)(value2 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002220();\n    value = (uint)(result1 * 0x19) / (uint)(param_1[1] << 2);\n    result1 = FUN_08002220();\n  }\n  *(uint *)(address + 8) =\n       (((value + (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (result2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       value1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "value",
                "iVar4": "value1",
                "iVar5": "value2",
                "iVar6": "address"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_data_08002724",
            "code": "\nundefined4 initializeData_08002724(int *dataPtr)\n\n{\n  int dataAddress;\n  \n  if (dataPtr != (int *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 2;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffdfff;\n    FUN_080025e8(dataPtr);\n    dataAddress = *dataPtr;\n    *(uint *)(dataAddress + 0x10) = *(uint *)(dataAddress + 0x10) & 0xffffb7ff;\n    *(uint *)(dataAddress + 0x14) = *(uint *)(dataAddress + 0x14) & 0xffffffd5;\n    *(uint *)(dataAddress + 0xc) = *(uint *)(dataAddress + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_data_08002724",
                "param_1": "dataPtr",
                "iVar1": "dataAddress",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *inputData)\n\n{\n  byte byteValue;\n  int ptrToData;\n  uint result;\n  undefined4 tempVar;\n  short counter;\n  ushort *ptrToUShort1;\n  ushort *ptrToUShort2;\n  bool isConditionMet;\n  \n  if ((*(byte *)((int)inputData + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptrToData = *inputData;\n  ptrToUShort1 = (ushort *)inputData[10];\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      ptrToUShort2 = ptrToUShort1 + 1;\n      *ptrToUShort1 = (ushort)((uint)(*(int *)(ptrToData + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptrToUShort2 = (ushort *)((int)ptrToUShort1 + 1);\n      *ptrToUShort1 = (ushort)*(int *)(ptrToData + 4) & 0xff;\n    }\n    inputData[10] = (int)ptrToUShort2;\n  }\n  else {\n    if (inputData[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(ptrToData + 4);\n      inputData[10] = (int)ptrToUShort1 + 1;\n    }\n    else {\n      tempVar = *(undefined4 *)(ptrToData + 4);\n      inputData[10] = (int)ptrToUShort1 + 1;\n      byteValue = (byte)tempVar & 0x7f;\n    }\n    *(byte *)ptrToUShort1 = byteValue;\n  }\n  counter = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = counter;\n  if (counter == 0) {\n    ptrToData = *inputData;\n    *(uint *)(ptrToData + 0xc) = *(uint *)(ptrToData + 0xc) & 0xffffffdf;\n    isConditionMet = *(char *)((int)inputData + 0x39) != '2';\n    if (isConditionMet) {\n      result = *(uint *)(ptrToData + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptrToData = 0x12;\n      result = 0x32;\n    }\n    if (isConditionMet) {\n      *(uint *)(ptrToData + 0xc) = result;\n      result = *(uint *)(ptrToData + 0x14) & 0xfffffffe;\n    }\n    if (isConditionMet) {\n      *(uint *)(ptrToData + 0x14) = result;\n      ptrToData = 1;\n    }\n    *(char *)((int)inputData + 0x39) = (char)ptrToData;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "inputData",
                "bVar1": "byteValue",
                "iVar2": "ptrToData",
                "uVar3": "result",
                "uVar4": "tempVar",
                "sVar5": "counter",
                "puVar6": "ptrToUShort1",
                "puVar7": "ptrToUShort2",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *pointer1;\n  undefined flag;\n  uint *pointer2;\n  uint flag2;\n  bool condition;\n  \n  pointer2 = *data;\n  value2 = *pointer2;\n  value1 = pointer2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      FUN_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer2 = (uint *)(value2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          pointer2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (condition) {\n          data[0xf] = pointer2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        FUN_0800290c(data);\n      }\n      pointer2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)pointer1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        data[8] = pointer1;\n      }\n      else {\n        data[8] = (uint *)((int)pointer1 + 1);\n        pointer2[1] = (uint)*(byte *)pointer1;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "counter",
                "uVar3": "value2",
                "puVar4": "pointer1",
                "uVar5": "flag",
                "puVar6": "pointer2",
                "uVar7": "flag2",
                "bVar8": "condition"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 resultValue;\n  uint inputValue;\n  int convertedValue1;\n  int convertedValue2;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  \n  tempValue1 = 0;\n  tempValue2 = inputValue & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&tempValue1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(tempValue1._2_1_,tempValue1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)tempValue1,tempValue1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)tempValue2,tempValue2._1_1_);\n  convertedValue2 = (int)DAT_200002f6;\n  convertedValue1 = (int)DAT_200002f8;\n  resultValue = FUN_08000c44();\n  resultValue = FUN_08000cec(resultValue,0x40800000);\n  DAT_200002d0 = FUN_08000cec(resultValue,0x38000000);\n  resultValue = FUN_08000c44(convertedValue2);\n  resultValue = FUN_08000cec(resultValue,0x40800000);\n  DAT_200002d4 = FUN_08000cec(resultValue,0x38000000);\n  resultValue = FUN_08000c44(convertedValue1);\n  resultValue = FUN_08000cec(resultValue,0x40800000);\n  DAT_200002d8 = FUN_08000cec(resultValue,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "iVar2": "convertedValue1",
                "iVar3": "convertedValue2",
                "local_18": "tempValue1",
                "local_14": "tempValue2",
                "uVar1": "resultValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 result;\n  int registeredValue3Int;\n  int registeredValue1Int;\n  undefined4 registerValue;\n  undefined2 tempValue;\n  \n  registerValue = 0;\n  tempValue = 0;\n  FUN_080040e8(0xd0,0x43,&registerValue,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(registerValue._2_1_,registerValue._3_1_);\n  DAT_200002be = CONCAT11((undefined)registerValue,registerValue._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)tempValue,tempValue._1_1_);\n  registeredValue1Int = (int)DAT_200002c0;\n  registeredValue3Int = (int)DAT_200002c2;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(result,DAT_20000000);\n  result = FUN_08000c44(registeredValue1Int);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(result,DAT_20000004);\n  result = FUN_08000c44(registeredValue3Int);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002cc = FUN_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "registerValue",
                "local_1c": "tempValue",
                "iVar3": "registeredValue1Int",
                "iVar2": "registeredValue3Int",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 result;\n  uint config;\n  \n  config = param4;\n  FUN_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&config,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((config & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((config >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((config >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "local_c": "config"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initializeMPU9250_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  int tempVar3;\n  undefined2 var1;\n  undefined var2;\n  undefined var3;\n  undefined var4;\n  undefined var5;\n  byte var6;\n  undefined var7;\n  \n  var7 = (undefined)((uint)param4 >> 0x18);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  returnValue = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (returnValue << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&var1,7,\"../Src/MPU9250.c\",0xda);\n    tempVar2 = DAT_2000001c;\n    if ((int)((uint)var6 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(var3,var2);\n      DAT_200002bc = CONCAT11(var5,var4);\n      tempVar3 = (int)DAT_200002ba;\n      returnValue = (int)DAT_200002bc;\n      DAT_200002b8 = var1;\n      tempVar1 = FUN_08000c44();\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002e8);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(tempVar1,DAT_2000002c);\n      tempVar1 = FUN_08000c44(tempVar3);\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002ec);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(tempVar1,DAT_20000030);\n      tempVar1 = FUN_08000c44(returnValue);\n      tempVar2 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar2 = FUN_08000cec(tempVar2,DAT_200002f0);\n      tempVar2 = FUN_08000ad8(tempVar2,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(tempVar2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "local_28": "var1",
                "uStack_26": "var2",
                "uStack_25": "var3",
                "local_24": "var4",
                "local_23": "var5",
                "local_22": "var6",
                "uStack_21": "var7"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_program_08002ea0",
            "code": "\nvoid initialize_program_08002ea0(undefined4 unused_param_1,undefined4 unused_param_2,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined4 unused_variable;\n  \n  FUN_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,unused_variable,unused_param_3,unused_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_program_08002ea0",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "extraout_r1": "unused_variable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_and_store_result_08002ec0",
            "code": "\nvoid calculateAndStoreResult_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_2000024c;\n  constant2 = DAT_20000010;\n  result1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_and_store_result_08002ec0",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_update_value_08002ed4",
            "code": "\nvoid calculateAndUpdateValue_08002ed4(void)\n\n{\n  undefined4 result;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = uRam20000018;\n  result = FUN_08000ad8(0x3f800000,uRam20000018);\n  constant1 = FUN_08000cec(result,constant1);\n  constant2 = FUN_08000cec(constant2,uRam20000014);\n  uRam20000014 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_update_value_08002ed4",
                "uVar1": "result",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "initialize_connection_08002ee8",
            "code": "\nvoid initializeConnection_08002ee8(void)\n\n{\n  undefined4 data;\n  int result;\n  \n  data = DAT_20000250;\n  result = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = FUN_08001028(data,0x42b40000), result != 0)) {\n    FUN_08000adc(data,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "initialize_connection_08002ee8",
                "uVar1": "data",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_application_08002f28",
            "code": "\n\n\nvoid initializeApplication_08002f28(void)\n\n{\n  undefined4 result;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  result = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(result,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  result = FUN_08002ed4();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  result = FUN_08002ec0();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_application_08002f28",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "decode_and_concatenate_data_08003034",
            "code": "\nuint decode_and_concatenate_data_08003034(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 result_variable;\n  \n  result_variable = input_param4;\n  FUN_080040b8(0xee,0,&result_variable,3,\"../Src/MS5611.c\",0x8c,input_param3);\n  return (uint)CONCAT12((undefined)result_variable,CONCAT11(result_variable._1_1_,result_variable._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "decode_and_concatenate_data_08003034",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "local_c": "result_variable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_ms5611_08003298",
            "code": "\nvoid initializeMS5611_08003298(void)\n\n{\n  int counter;\n  undefined byte1;\n  undefined byte2;\n  \n  counter = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    FUN_080040e8(0xee,counter + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(byte1,byte2);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_ms5611_08003298",
                "iVar1": "counter",
                "local_1c": "byte1",
                "local_1b": "byte2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_data_08003314",
            "code": "\nvoid initializeData_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_data_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_global_variable_08003320",
            "code": "\nvoid initializeGlobalVariable_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_global_variable_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "extract_data_08003330",
            "code": "\nvoid extract_data_08003330(undefined4 ptr_param_1,undefined4 ptr_param_2,undefined4 ptr_param_3,undefined4 ptr_param_4,\n                 undefined4 ptr_param_5,undefined4 ptr_param_6,undefined4 ptr_param_7,undefined4 ptr_param_8,\n                 undefined4 ptr_param_9,undefined4 *ptr_result)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int status;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  int temp;\n  undefined4 result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  int temp2;\n  undefined4 result_17;\n  undefined4 result_18;\n  undefined4 result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  int temp3;\n  undefined4 result_23;\n  undefined4 result_24;\n  undefined4 result_25;\n  int temp4;\n  undefined8 result_26;\n  undefined8 result_27;\n  \n  result_25 = DAT_20000048;\n  result_24 = DAT_20000044;\n  temp4 = DAT_20000040;\n  result_23 = DAT_2000003c;\n  result_1 = FUN_08000cec(ptr_param_1,ptr_param_1);\n  result_2 = FUN_08000cec(ptr_param_2);\n  result_1 = FUN_08000adc(result_1,result_2);\n  result_2 = FUN_08000cec(ptr_param_3);\n  FUN_08000adc(result_1,result_2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result_1 = FUN_08000a30();\n  status = FUN_08001014(result_1,0);\n  if (status == 0) {\n    result_2 = FUN_08000cec(ptr_param_7);\n    result_3 = FUN_08000cec(ptr_param_8);\n    result_2 = FUN_08000adc(result_2,result_3);\n    result_3 = FUN_08000cec(ptr_param_9);\n    FUN_08000adc(result_2,result_3);\n    FUN_08000428();\n    FUN_08005bc8();\n    result_2 = FUN_08000a30();\n    status = FUN_08001014(result_2,0);\n    if (status == 0) {\n      result_26 = FUN_08000428(ptr_param_4);\n      FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0xa2529d39,0x3f91df46);\n      result_3 = FUN_08000a30();\n      result_26 = FUN_08000428(ptr_param_5);\n      FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = FUN_08000a30();\n      result_26 = FUN_08000428(ptr_param_6);\n      FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = FUN_08000a30();\n      status = FUN_08000adc(result_23);\n      result_6 = FUN_08000adc(temp4);\n      temp = FUN_08000adc(result_24,result_24);\n      result_7 = FUN_08000adc(result_25,result_25);\n      result_8 = FUN_08000cec(result_23);\n      result_9 = FUN_08000cec(result_23,temp4);\n      result_10 = FUN_08000cec(result_23,result_24);\n      result_11 = FUN_08000cec(temp4);\n      result_12 = FUN_08000cec(temp4,result_25);\n      result_13 = FUN_08000cec(result_24,result_24);\n      result_14 = FUN_08000cec(result_25,result_25);\n      result_1 = FUN_08000e54(0x3f800000,result_1);\n      result_2 = FUN_08000e54(0x3f800000,result_2);\n      result_15 = FUN_08000cec(ptr_param_7,result_2);\n      result_16 = FUN_08000cec(ptr_param_8,result_2);\n      result_2 = FUN_08000cec(ptr_param_9,result_2);\n      temp2 = FUN_08000cec(status,result_15);\n      result_17 = FUN_08000cec(status,result_16);\n      result_18 = FUN_08000cec(status,result_2);\n      result_19 = FUN_08000cec(result_6,result_15);\n      result_20 = FUN_08000cec(result_8,result_15);\n      result_21 = FUN_08000cec(result_25,result_17);\n      result_20 = FUN_08000ad8(result_20,result_21);\n      result_21 = FUN_08000cec(result_24,result_18);\n      result_20 = FUN_08000adc(result_20,result_21);\n      result_21 = FUN_08000cec(result_11,result_15);\n      result_20 = FUN_08000adc(result_20,result_21);\n      result_21 = FUN_08000cec(result_6,result_16);\n      result_21 = FUN_08000cec(result_21,result_24);\n      result_20 = FUN_08000adc(result_20,result_21);\n      result_21 = FUN_08000cec(result_6,result_2);\n      result_21 = FUN_08000cec(result_21,result_25);\n      result_20 = FUN_08000adc(result_20,result_21);\n      result_21 = FUN_08000cec(result_13,result_15);\n      result_20 = FUN_08000ad8(result_20,result_21);\n      result_21 = FUN_08000cec(result_14,result_15);\n      result_20 = FUN_08000ad8(result_20,result_21);\n      result_21 = FUN_08000cec(result_25,temp2);\n      result_22 = FUN_08000cec(result_8,result_16);\n      result_21 = FUN_08000adc(result_21,result_22);\n      result_18 = FUN_08000cec(temp4,result_18);\n      result_18 = FUN_08000ad8(result_21,result_18);\n      result_21 = FUN_08000cec(result_24,result_19);\n      result_18 = FUN_08000adc(result_18,result_21);\n      result_21 = FUN_08000cec(result_11,result_16);\n      result_18 = FUN_08000ad8(result_18,result_21);\n      result_21 = FUN_08000cec(result_13,result_16);\n      result_18 = FUN_08000adc(result_18,result_21);\n      result_21 = FUN_08000cec(temp,result_2);\n      result_21 = FUN_08000cec(result_21,result_25);\n      result_18 = FUN_08000adc(result_18,result_21);\n      result_21 = FUN_08000cec(result_14,result_16);\n      result_18 = FUN_08000ad8(result_18,result_21);\n      result_20 = FUN_08000cec(result_20,result_20);\n      result_18 = FUN_08000cec(result_18,result_18);\n      FUN_08000adc(result_20,result_18);\n      FUN_08000428();\n      FUN_08005bc8();\n      temp3 = FUN_08000a30();\n      result_18 = FUN_08000cec(temp2 + -0x80000000,result_24);\n      result_17 = FUN_08000cec(temp4,result_17);\n      result_17 = FUN_08000adc(result_18,result_17);\n      result_8 = FUN_08000cec(result_8,result_2);\n      result_8 = FUN_08000adc(result_17,result_8);\n      result_17 = FUN_08000cec(result_25,result_19);\n      result_8 = FUN_08000adc(result_8,result_17);\n      result_17 = FUN_08000cec(result_11,result_2);\n      result_8 = FUN_08000ad8(result_8,result_17);\n      result_17 = FUN_08000cec(temp,result_16);\n      result_17 = FUN_08000cec(result_17,result_25);\n      result_8 = FUN_08000adc(result_8,result_17);\n      result_17 = FUN_08000cec(result_13,result_2);\n      result_8 = FUN_08000ad8(result_8,result_17);\n      result_17 = FUN_08000cec(result_14,result_2);\n      result_8 = FUN_08000adc(result_8,result_17);\n      result_17 = FUN_08000adc(result_8,result_8);\n      result_18 = FUN_08000adc(result_12);\n      result_19 = FUN_08000cec(result_24,status);\n      result_18 = FUN_08000ad8(result_18,result_19);\n      result_19 = FUN_08000cec(ptr_param_1,result_1);\n      result_18 = FUN_08000ad8(result_18,result_19);\n      result_19 = FUN_08000cec(result_25,temp);\n      result_20 = FUN_08000adc(result_9);\n      result_19 = FUN_08000adc(result_19,result_20);\n      result_20 = FUN_08000cec(ptr_param_2,result_1);\n      result_19 = FUN_08000ad8(result_19,result_20);\n      result_20 = FUN_08000cec(result_24,result_8);\n      result_21 = FUN_08000ad8(0x3f000000,result_13);\n      result_14 = FUN_08000ad8(result_21,result_14);\n      result_14 = FUN_08000cec(result_14,temp3);\n      result_21 = FUN_08000ad8(result_12,result_10);\n      result_21 = FUN_08000cec(result_21,result_8);\n      result_14 = FUN_08000adc(result_14,result_21);\n      result_14 = FUN_08000ad8(result_14,result_15);\n      result_15 = FUN_08000cec(temp4,result_8);\n      result_21 = FUN_08000cec(temp4,result_24);\n      result_22 = FUN_08000cec(result_23,result_25);\n      result_21 = FUN_08000ad8(result_21,result_22);\n      result_21 = FUN_08000cec(result_21,temp3);\n      result_22 = FUN_08000cec(result_24,result_25);\n      result_9 = FUN_08000adc(result_22,result_9);\n      result_9 = FUN_08000cec(result_9,result_8);\n      result_9 = FUN_08000adc(result_21,result_9);\n      result_9 = FUN_08000ad8(result_9,result_16);\n      result_16 = FUN_08000cec(result_24,temp3);\n      result_21 = FUN_08000ad8(0x3f000000,result_11);\n      result_21 = FUN_08000ad8(result_21,result_13);\n      result_21 = FUN_08000cec(result_21,result_8);\n      result_10 = FUN_08000adc(result_10,result_12);\n      result_10 = FUN_08000cec(result_10,temp3);\n      result_10 = FUN_08000adc(result_21,result_10);\n      result_2 = FUN_08000ad8(result_10,result_2);\n      result_10 = FUN_08000cec(temp + -0x80000000,result_18);\n      result_12 = FUN_08000cec(result_6,result_19);\n      result_10 = FUN_08000adc(result_10,result_12);\n      result_12 = FUN_08000cec(result_20,result_14);\n      result_10 = FUN_08000ad8(result_10,result_12);\n      result_12 = FUN_08000cec(result_25,temp3 + -0x80000000);\n      result_12 = FUN_08000adc(result_12,result_15);\n      result_12 = FUN_08000cec(result_12,result_9);\n      result_10 = FUN_08000adc(result_10,result_12);\n      result_12 = FUN_08000cec(result_16,result_2);\n      result_10 = FUN_08000adc(result_10,result_12);\n      result_11 = FUN_08000adc(result_11);\n      result_11 = FUN_08000ad8(0x3f800000,result_11);\n      result_12 = FUN_08000adc(result_13);\n      result_11 = FUN_08000ad8(result_11,result_12);\n      result_1 = FUN_08000cec(ptr_param_3,result_1);\n      result_1 = FUN_08000ad8(result_11,result_1);\n      result_11 = FUN_08000cec(result_25,result_8);\n      result_8 = FUN_08000cec(result_23,result_8);\n      result_12 = FUN_08000cec(result_7,result_18);\n      result_13 = FUN_08000cec(status,result_19);\n      result_12 = FUN_08000adc(result_12,result_13);\n      result_13 = FUN_08000cec(temp4,0x40800000);\n      result_13 = FUN_08000cec(result_13,result_1);\n      result_12 = FUN_08000ad8(result_12,result_13);\n      result_13 = FUN_08000cec(result_14,result_11);\n      result_12 = FUN_08000adc(result_12,result_13);\n      result_13 = FUN_08000adc(result_16,result_8);\n      result_13 = FUN_08000cec(result_13,result_9);\n      result_12 = FUN_08000adc(result_12,result_13);\n      result_13 = FUN_08000cec(result_25,temp3);\n      result_16 = FUN_08000cec(temp4,result_17);\n      result_13 = FUN_08000ad8(result_13,result_16);\n      result_13 = FUN_08000cec(result_13,result_2);\n      result_12 = FUN_08000adc(result_12,result_13);\n      temp2 = FUN_08000adc(temp3,temp3);\n      result_13 = FUN_08000cec(temp4,temp3);\n      result_16 = FUN_08000cec(status + -0x80000000,result_18);\n      result_7 = FUN_08000cec(result_7,result_19);\n      result_7 = FUN_08000adc(result_16,result_7);\n      result_16 = FUN_08000cec(result_24,0x40800000);\n      result_1 = FUN_08000cec(result_16,result_1);\n      result_1 = FUN_08000ad8(result_7,result_1);\n      result_7 = FUN_08000cec(result_24,temp2 + -0x80000000);\n      result_7 = FUN_08000ad8(result_7,result_8);\n      result_7 = FUN_08000cec(result_7,result_14);\n      result_1 = FUN_08000adc(result_1,result_7);\n      result_7 = FUN_08000adc(result_11,result_13);\n      result_7 = FUN_08000cec(result_7,result_9);\n      result_1 = FUN_08000adc(result_1,result_7);\n      result_7 = FUN_08000cec(result_23,temp3);\n      result_8 = FUN_08000cec(result_24,result_17);\n      result_7 = FUN_08000ad8(result_7,result_8);\n      result_7 = FUN_08000cec(result_7,result_2);\n      result_7 = FUN_08000adc(result_1,result_7);\n      result_1 = FUN_08000cec(result_6,result_18);\n      result_6 = FUN_08000cec(temp,result_19);\n      result_1 = FUN_08000adc(result_1,result_6);\n      result_6 = FUN_08000cec(result_25,temp2 + -0x80000000);\n      result_6 = FUN_08000adc(result_6,result_15);\n      result_6 = FUN_08000cec(result_6,result_14);\n      result_1 = FUN_08000adc(result_1,result_6);\n      result_6 = FUN_08000cec(result_23,temp3 + -0x80000000);\n      result_6 = FUN_08000adc(result_6,result_20);\n      result_6 = FUN_08000cec(result_6,result_9);\n      result_1 = FUN_08000adc(result_1,result_6);\n      result_2 = FUN_08000cec(result_2,result_13);\n      result_6 = FUN_08000adc(result_1,result_2);\n      result_1 = FUN_08000cec(result_10);\n      result_2 = FUN_08000cec(result_12);\n      result_1 = FUN_08000adc(result_1,result_2);\n      result_2 = FUN_08000cec(result_7,result_7);\n      result_1 = FUN_08000adc(result_1,result_2);\n      result_2 = FUN_08000cec(result_6,result_6);\n      FUN_08000adc(result_1,result_2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result_1 = FUN_08000a30();\n      result_8 = FUN_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = FUN_08000cec(temp4 + -0x80000000,result_3);\n      result_9 = FUN_08000cec(result_24,result_4);\n      result_2 = FUN_08000ad8(result_2,result_9);\n      result_9 = FUN_08000cec(result_25,result_5);\n      result_2 = FUN_08000ad8(result_2,result_9);\n      result_9 = FUN_08000cec(result_2,0x3f000000);\n      result_10 = FUN_08000cec(result_10,result_8);\n      result_2 = DAT_20000360;\n      result_10 = FUN_08000cec(result_10,result_1);\n      result_9 = FUN_08000ad8(result_9,result_10);\n      result_2 = FUN_08000cec(result_9,result_2);\n      result_9 = FUN_08000adc(result_2,result_23);\n      result_10 = FUN_08000cec(result_23,result_3);\n      result_11 = FUN_08000cec(result_24,result_5);\n      result_2 = DAT_20000360;\n      result_10 = FUN_08000adc(result_10,result_11);\n      result_11 = FUN_08000cec(result_25,result_4);\n      result_10 = FUN_08000ad8(result_10,result_11);\n      result_10 = FUN_08000cec(result_10,0x3f000000);\n      result_11 = FUN_08000cec(result_12,result_8);\n      result_11 = FUN_08000cec(result_11,result_1);\n      result_10 = FUN_08000ad8(result_10,result_11);\n      result_2 = FUN_08000cec(result_10,result_2);\n      result_10 = FUN_08000adc(result_2,temp4);\n      result_2 = DAT_20000360;\n      result_11 = FUN_08000cec(result_23,result_4);\n      result_12 = FUN_08000cec(temp4,result_5);\n      result_11 = FUN_08000ad8(result_11,result_12);\n      result_12 = FUN_08000cec(result_25,result_3);\n      result_11 = FUN_08000adc(result_11,result_12);\n      result_11 = FUN_08000cec(result_11,0x3f000000);\n      result_7 = FUN_08000cec(result_7,result_8);\n      result_7 = FUN_08000cec(result_7,result_1);\n      result_7 = FUN_08000ad8(result_11,result_7);\n      result_2 = FUN_08000cec(result_7,result_2);\n      result_2 = FUN_08000adc(result_2,result_24);\n      result_23 = FUN_08000cec(result_23,result_5);\n      result_4 = FUN_08000cec(temp4,result_4);\n      result_23 = FUN_08000adc(result_23,result_4);\n      result_24 = FUN_08000cec(result_24,result_3);\n      result_23 = FUN_08000ad8(result_23,result_24);\n      result_24 = FUN_08000cec(result_23,0x3f000000);\n      result_23 = FUN_08000cec(result_6,result_8);\n      result_1 = FUN_08000cec(result_23,result_1);\n      result_23 = DAT_20000360;\n      result_24 = FUN_08000ad8(result_24,result_1);\n      result_23 = FUN_08000cec(result_24,result_23);\n      result_23 = FUN_08000adc(result_23,result_25);\n      result_24 = FUN_08000cec(result_9,result_9);\n      result_25 = FUN_08000cec(result_10,result_10);\n      result_24 = FUN_08000adc(result_24,result_25);\n      result_25 = FUN_08000cec(result_2,result_2);\n      result_24 = FUN_08000adc(result_24,result_25);\n      result_25 = FUN_08000cec(result_23,result_23);\n      FUN_08000adc(result_24,result_25);\n      FUN_08000428();\n      FUN_08005bc8();\n      result_24 = FUN_08000a30();\n      result_24 = FUN_08000e54(0x3f800000,result_24);\n      result_25 = FUN_08000cec(result_9,result_24);\n      DAT_2000003c = result_25;\n      temp4 = FUN_08000cec(result_10,result_24);\n      DAT_20000040 = temp4;\n      result_1 = FUN_08000cec(result_2,result_24);\n      DAT_20000044 = result_1;\n      DAT_20000048 = FUN_08000cec(result_23,result_24);\n      result_23 = FUN_08000cec(temp4,DAT_20000048);\n      result_24 = FUN_08000cec(result_25,result_1);\n      result_23 = FUN_08000ad8(result_23,result_24);\n      FUN_08000adc(result_23,result_23);\n      FUN_08000428();\n      result_26 = FUN_08005854();\n      result_26 = FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_26,(int)((ulonglong)result_26 >> 0x20),0x54442d18,0x400921fb);\n      result_23 = FUN_08000a30();\n      *ptr_result = result_23;\n      temp4 = DAT_20000040;\n      result_23 = DAT_2000003c;\n      result_24 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result_25 = FUN_08000cec(temp4,temp4);\n      result_25 = FUN_08000ad8(result_24,result_25);\n      result_24 = DAT_20000044;\n      result_1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = FUN_08000ad8(result_25,result_1);\n      result_25 = DAT_20000048;\n      result_2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result_1,result_2);\n      result_26 = FUN_08000428();\n      result_23 = FUN_08000cec(result_23,temp4);\n      result_24 = FUN_08000cec(result_24,result_25);\n      result_23 = FUN_08000adc(result_23,result_24);\n      FUN_08000adc(result_23,result_23);\n      result_27 = FUN_08000428();\n      result_26 = thunk_FUN_08006070((int)result_27,(int)((ulonglong)result_27 >> 0x20),(int)result_26,\n                                  (int)((ulonglong)result_26 >> 0x20));\n      result_26 = FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_26,(int)((ulonglong)result_26 >> 0x20),0x54442d18,0x400921fb);\n      result_23 = FUN_08000a30();\n      ptr_result[1] = result_23;\n      temp4 = DAT_20000040;\n      result_23 = DAT_2000003c;\n      result_24 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result_25 = FUN_08000cec(temp4,temp4);\n      result_25 = FUN_08000adc(result_24,result_25);\n      result_24 = DAT_20000044;\n      result_1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = FUN_08000ad8(result_25,result_1);\n      result_25 = DAT_20000048;\n      result_2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result_1,result_2);\n      result_26 = FUN_08000428();\n      result_24 = FUN_08000cec(temp4,result_24);\n      result_23 = FUN_08000cec(result_23,result_25);\n      result_23 = FUN_08000adc(result_24,result_23);\n      FUN_08000adc(result_23,result_23);\n      result_27 = FUN_08000428();\n      result_26 = thunk_FUN_08006070((int)result_27,(int)((ulonglong)result_27 >> 0x20),(int)result_26,\n                                  (int)((ulonglong)result_26 >> 0x20));\n      result_26 = FUN_080004d0((int)result_26,(int)((ulonglong)result_26 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result_26,(int)((ulonglong)result_26 >> 0x20),0x54442d18,0x400921fb);\n      result_23 = FUN_08000a30();\n      ptr_result[2] = result_23;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "extract_data_08003330",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "ptr_param_3",
                "param_4": "ptr_param_4",
                "param_5": "ptr_param_5",
                "param_6": "ptr_param_6",
                "param_7": "ptr_param_7",
                "param_8": "ptr_param_8",
                "param_9": "ptr_param_9",
                "param_10": "ptr_result",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "status",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "result_6",
                "iVar8": "temp",
                "uVar9": "result_7",
                "uVar10": "result_8",
                "uVar11": "result_9",
                "uVar12": "result_10",
                "uVar13": "result_11",
                "uVar14": "result_12",
                "uVar15": "result_13",
                "uVar16": "result_14",
                "uVar17": "result_15",
                "uVar18": "result_16",
                "iVar19": "temp2",
                "uVar20": "result_17",
                "uVar21": "result_18",
                "uVar22": "result_19",
                "uVar23": "result_20",
                "uVar24": "result_21",
                "uVar25": "result_22",
                "iVar26": "temp3",
                "uVar27": "result_23",
                "uVar28": "result_24",
                "uVar29": "result_25",
                "iVar30": "temp4",
                "uVar31": "result_26",
                "uVar32": "result_27"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to_long_long_08003eb0",
            "code": "\nlonglong convertToLongLong_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to_long_long_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_insert_value_08003ec8",
            "code": "\nvoid incrementAndInsertValue_08003ec8(int baseAddr,undefined value)\n\n{\n  *(short *)(baseAddr + 0x804) = *(short *)(baseAddr + 0x804) + 1;\n  *(undefined *)(baseAddr + (uint)*(ushort *)(baseAddr + 0x802)) = value;\n  *(ushort *)(baseAddr + 0x802) = *(short *)(baseAddr + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_insert_value_08003ec8",
                "param_1": "baseAddr",
                "param_2": "value",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flags_08003f3c",
            "code": "\nvoid initializeFlags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_value_08003fc4",
            "code": "\nvoid setParamValue_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "store_parameter_to_memory_08003fd0",
            "code": "\nvoid storeParameterToMemory_08003fd0(undefined4 inputValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "store_parameter_to_memory_08003fd0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_stored_value_08003fdc",
            "code": "\nvoid setStoredValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_stored_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_parameter_08003fe8",
            "code": "\nvoid setParameter_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_parameter_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initializeData_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "perform_task_08004028",
            "code": "\nvoid performTask_08004028(void)\n\n{\n  int iterationCount;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  iterationCount = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "perform_task_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "execute_i2_c_transaction_0800403c",
            "code": "\nvoid executeI2CTransaction_0800403c(undefined4 deviceAddress,undefined4 registerAddress,undefined value,int executeThunks)\n\n{\n  int returnValue;\n  undefined transactionData [8];\n  \n  transactionData[0] = value;\n  returnValue = FUN_08001828(&DAT_20001504,deviceAddress,registerAddress,1,transactionData,1,200);\n  if (returnValue != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (executeThunks != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "execute_i2_c_transaction_0800403c",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "value",
                "param_4": "executeThunks",
                "iVar1": "returnValue",
                "local_14": "transactionData"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_update_data_0800407c",
            "code": "\nundefined checkAndUpdateData_0800407c(undefined4 inputParam1,undefined4 inputParam2,undefined4 outputParam1,undefined4 outputParam2)\n\n{\n  int result;\n  undefined returnValue [8];\n  \n  returnValue[0] = 0;\n  result = FUN_08001938(&DAT_20001504,inputParam1,inputParam2,1,returnValue,1,200);\n  if (result != 0) {\n    FUN_08004490(outputParam1,outputParam2);\n  }\n  return returnValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_update_data_0800407c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "outputParam1",
                "param_4": "outputParam2",
                "local_14": "returnValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_080040b8",
            "code": "\nvoid processData_080040b8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 output1,undefined4 output2)\n\n{\n  int result;\n  \n  result = FUN_08001938(&DAT_20001504,input1,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    FUN_08004490(output1,output2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_to_buffer_080040e8",
            "code": "\nvoid copy_data_to_buffer_080040e8(undefined4 param,int source_buffer,int dest_buffer,int buffer_size)\n\n{\n  undefined data;\n  int index;\n  undefined *dest_ptr;\n  int line_number;\n  \n  dest_ptr = (undefined *)(dest_buffer + -1);\n  line_number = buffer_size;\n  for (index = 0; index < buffer_size; index = index + 1) {\n    data = FUN_0800407c(param,source_buffer + index & 0xffff,\"../Src/i2c.c\",0x4c,line_number);\n    dest_ptr = dest_ptr + 1;\n    *dest_ptr = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_to_buffer_080040e8",
                "param_1": "param",
                "param_2": "source_buffer",
                "param_3": "dest_buffer",
                "param_4": "buffer_size",
                "uVar1": "data",
                "iVar2": "index",
                "puVar3": "dest_ptr",
                "iVar4": "line_number"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "calculate_values_and_store_results_0800411c",
            "code": "\nvoid calculateValuesAndStoreResults_0800411c(void)\n\n{\n  undefined4 *pointerToVariable1;\n  longlong longValue;\n  uint uintValue1;\n  uint uintValue2;\n  uint uintValue3;\n  undefined4 uintValue4;\n  undefined4 uintValue5;\n  int returnValue;\n  uint processedValue1;\n  uint processedValue2;\n  uint processedValue3;\n  uint processedValue4;\n  undefined4 *pointerToVariable2;\n  undefined4 unaffectedValue;\n  int tempVariable1;\n  int tempVariable2;\n  bool booleanValue;\n  undefined8 newValue;\n  \n  returnValue = thunk_FUN_0800115c();\n  if (1 < (uint)(returnValue - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (2 < (uint)(returnValue - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (3 < (uint)(returnValue - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    tempVariable2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    processedValue1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVariable2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVariable2) >> 0x20) << 9;\n    processedValue2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVariable2 >> 7);\n    processedValue3 = processedValue2 + (uint)DAT_20000260 * 0x10000;\n    uintValue2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVariable2) >> 8);\n    returnValue = processedValue1 + 2000;\n    uintValue3 = uintValue2 + (uint)DAT_2000025e * 0x8000;\n    booleanValue = (int)processedValue1 < 0;\n    if (1999 < returnValue) {\n      processedValue1 = 0;\n    }\n    uintValue1 = processedValue1;\n    if (booleanValue != SBORROW4(returnValue,2000)) {\n      tempVariable1 = processedValue1 * processedValue1 * 5;\n      processedValue1 = tempVariable1 >> 2;\n      uintValue1 = tempVariable1 >> 1;\n    }\n    processedValue4 = processedValue3 - uintValue1;\n    longValue = (ulonglong)(uintValue3 - processedValue1) * (ulonglong)DAT_2000026c;\n    tempVariable1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVariable2 >> 0x28) +\n               (uint)CARRY4(uintValue2,(uint)DAT_2000025e * 0x8000)) - ((int)processedValue1 >> 0x1f)) -\n             (uint)(uintValue3 < processedValue1)) + (int)((ulonglong)longValue >> 0x20);\n    uintValue2 = (uint)longValue >> 0x15 | tempVariable1 * 0x800;\n    uintValue4 = FUN_08000c44(uintValue2 - processedValue4 >> 0xf |\n                         (((tempVariable1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVariable2 >> 0x27) +\n                            (uint)CARRY4(processedValue2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)uintValue1 >> 0x1f)) - (uint)(processedValue3 < uintValue1))) - (uint)(uintValue2 < processedValue4)\n                         ) * 0x20000);\n    uintValue4 = FUN_08000e54(uintValue4,0x42c80000);\n    DAT_20000354 = uintValue4;\n    uintValue5 = FUN_08000c44(returnValue);\n    DAT_20000358 = FUN_08000e54(uintValue5,0x42c80000);\n    FUN_08000e54(uintValue4,0x447d5000);\n    newValue = FUN_08000428();\n    newValue = FUN_08005900((int)newValue,(int)((ulonglong)newValue >> 0x20),0x60000000,0x3fc85b95);\n    newValue = FUN_08000168(0,0x3ff00000,(int)newValue,(int)((ulonglong)newValue >> 0x20));\n    FUN_080004d0((int)newValue,(int)((ulonglong)newValue >> 0x20),0,0x40e5a540);\n    uintValue4 = FUN_08000a30();\n    uintValue5 = 0;\n    pointerToVariable2 = &DAT_20000300;\n    DAT_20000350 = uintValue4;\n    do {\n      pointerToVariable1 = pointerToVariable2 + 1;\n      *pointerToVariable2 = *pointerToVariable1;\n      uintValue5 = FUN_08000adc(uintValue5);\n      pointerToVariable2 = pointerToVariable1;\n    } while (pointerToVariable1 != &DAT_2000034c);\n    DAT_2000034c = uintValue4;\n    uintValue4 = FUN_08000adc(uintValue5,uintValue4);\n    DAT_200002fc = FUN_08000e54(uintValue4,0x41a00000);\n    returnValue = FUN_08001078();\n    DAT_200014ab = returnValue * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(returnValue - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedValue);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(returnValue - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "calculate_values_and_store_results_0800411c",
                "puVar1": "pointerToVariable1",
                "lVar2": "longValue",
                "uVar3": "uintValue1",
                "uVar4": "uintValue2",
                "uVar5": "uintValue3",
                "uVar6": "uintValue4",
                "uVar7": "uintValue5",
                "iVar8": "returnValue",
                "uVar9": "processedValue1",
                "uVar10": "processedValue2",
                "uVar11": "processedValue3",
                "uVar12": "processedValue4",
                "puVar13": "pointerToVariable2",
                "unaff_r4": "unaffectedValue",
                "iVar14": "tempVariable1",
                "iVar15": "tempVariable2",
                "bVar16": "booleanValue",
                "uVar17": "newValue"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_application_08004194",
            "code": "\nvoid initialize_application_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_application_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "infinite_loop_080041ae",
            "code": "\nvoid infiniteLoop_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "infinite_loop_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_system_080041c4",
            "code": "\nvoid initializeSystem_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 unusedVariable;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,unusedVariable,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_system_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "unusedVariable"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "extract_data_and_calculate_0800426c",
            "code": "\n\n\nvoid extract_data_and_calculate_0800426c(undefined4 data_1,undefined4 data_2,undefined4 data_3,undefined4 data_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  uint value_4;\n  \n  result_1 = FUN_08000ad8();\n  result_2 = FUN_08000adc(data_1,data_2);\n  result_3 = FUN_08000ad8(result_1,data_3);\n  result_3 = FUN_08000adc(result_3,data_4);\n  FUN_08000ad8(result_3,0x447a0000);\n  value_1 = FUN_08001078();\n  result_3 = FUN_08000ad8(result_2,data_3);\n  result_3 = FUN_08000ad8(result_3,data_4);\n  FUN_08000ad8(result_3,0x447a0000);\n  value_2 = FUN_08001078();\n  result_1 = FUN_08000adc(result_1,data_3);\n  result_1 = FUN_08000ad8(result_1,data_4);\n  FUN_08000ad8(result_1,0x447a0000);\n  value_3 = FUN_08001078();\n  result_1 = FUN_08000adc(data_3,result_2);\n  result_1 = FUN_08000adc(result_1,data_4);\n  FUN_08000ad8(result_1,0x447a0000);\n  value_4 = FUN_08001078();\n  if (999 < (int)value_4) {\n    value_4 = 1000;\n  }\n  if (999 < (int)value_3) {\n    value_3 = 1000;\n  }\n  if (999 < (int)value_2) {\n    value_2 = 1000;\n  }\n  if (999 < (int)value_1) {\n    value_1 = 1000;\n  }\n  DAT_200002a0 = value_2 & ~((int)value_2 >> 0x1f);\n  DAT_200002a4 = value_1 & ~((int)value_1 >> 0x1f);\n  DAT_2000029c = value_3 & ~((int)value_3 >> 0x1f);\n  DAT_20000298 = value_4 & ~((int)value_4 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "extract_data_and_calculate_0800426c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "value_1",
                "uVar5": "value_2",
                "uVar6": "value_3",
                "uVar7": "value_4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "calculate_xor_checksum_08004300",
            "code": "\nvoid calculate_xor_checksum_08004300(uint input_value,byte *data,uint data_length)\n\n{\n  uint checksum;\n  byte *current_byte;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(data_length & 0xff);\n  checksum = data_length & 0xff ^ input_value;\n  FUN_08004c18(input_value);\n  for (current_byte = data; (int)current_byte - (int)data < (int)data_length; current_byte = current_byte + 1) {\n    FUN_08004c18(*current_byte);\n    checksum = checksum ^ *current_byte;\n  }\n  FUN_08004c18(checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "calculate_xor_checksum_08004300",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "checksum",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 data1,uint data2,undefined4 data3)\n\n{\n  undefined4 initializedValue;\n  uint maskedData;\n  undefined4 stackData;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  initializedValue = 0x40003e9;\n  maskedData = data2 & 0xff000000;\n  stackData = data3;\n  FUN_08004300(100,&initializedValue,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "local_10": "initializedValue",
                "local_c": "maskedData",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 dataValue1;\n  undefined4 dataValue2;\n  uint maskedParam4;\n  \n  _DAT_200013bd = 0x2a0007;\n  dataValue1 = _DAT_200013b9;\n  dataValue2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedParam4 = inputParam4 & 0xff000000;\n  FUN_08004300(0x65,&dataValue1,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "dataValue1",
                "uStack_10": "dataValue2",
                "local_c": "maskedParam4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_call_function_080043bc",
            "code": "\nvoid copyAndCallFunction_080043bc(void)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 *destPointer;\n  undefined4 *srcPointer;\n  undefined4 copiedData [2];\n  undefined2 tempArray [6];\n  \n  srcPointer = (undefined4 *)&DAT_2000142a;\n  destPointer = copiedData;\n  do {\n    tempVar1 = *srcPointer;\n    tempVar2 = srcPointer[1];\n    srcPointer = srcPointer + 2;\n    *destPointer = tempVar1;\n    destPointer[1] = tempVar2;\n    destPointer = destPointer + 2;\n  } while (srcPointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destPointer = DAT_2000143a;\n  FUN_08004300(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_call_function_080043bc",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "destPointer",
                "puVar4": "srcPointer",
                "local_24": "copiedData",
                "local_1c": "tempArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "extract_data_080043f0",
            "code": "\n\n\nvoid extractData_080043f0(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data_array [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  data_array[0] = input3;\n  FUN_08004300(0x68,&data1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "extract_data_080043f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_values_08004410",
            "code": "\nvoid initializeValues_08004410(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 dataValue1;\n  undefined4 dataValue2;\n  undefined4 dataValue3;\n  \n  dataValue1 = DAT_20001395;\n  dataValue2 = CONCAT22((short)((uint)input2 >> 0x10),DAT_20001399);\n  dataValue3 = input3;\n  FUN_08004300(0x6c,&dataValue1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_values_08004410",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "dataValue1",
                "local_c": "dataValue2",
                "uStack_8": "dataValue3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_data_08004434",
            "code": "\nvoid initializeData_08004434(undefined4 dataPtr1,undefined4 dataPtr2,undefined4 dataPtr3)\n\n{\n  undefined4 constant1;\n  undefined4 combinedData;\n  undefined4 dataValue;\n  \n  constant1 = DAT_200014ab;\n  combinedData = CONCAT22((short)((uint)dataPtr2 >> 0x10),DAT_200014af);\n  dataValue = dataPtr3;\n  FUN_08004300(0x6d,&constant1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_data_08004434",
                "param_1": "dataPtr1",
                "param_2": "dataPtr2",
                "param_3": "dataPtr3",
                "local_10": "constant1",
                "local_c": "combinedData",
                "uStack_8": "dataValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_data_08004458",
            "code": "\nvoid copyAndProcessData_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 tempValue;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 temporaryData [3];\n  undefined2 temporaryArray [10];\n  \n  destination = temporaryData;\n  source = &DAT_2000139b;\n  do {\n    srcPtr = source;\n    destPtr = destination;\n    tempValue = srcPtr[1];\n    *destPtr = *srcPtr;\n    destPtr[1] = tempValue;\n    destination = destPtr + 2;\n    source = srcPtr + 2;\n  } while (srcPtr + 2 != (undefined4 *)0x200013b3);\n  destPtr[2] = uRam200013b3;\n  *(undefined2 *)(destPtr + 3) = *(undefined2 *)(srcPtr + 3);\n  FUN_08004300(0x70,temporaryData,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_data_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "tempValue",
                "puVar4": "destPtr",
                "puVar5": "srcPtr",
                "local_30": "temporaryData",
                "local_24": "temporaryArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_error_handling_08004490",
            "code": "\nvoid continuousErrorHandling_08004490(undefined4 errorDescription,undefined4 currentLine)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(errorDescription);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(currentLine);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_error_handling_08004490",
                "param_1": "errorDescription",
                "param_2": "currentLine"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initializePeripherals_08004514(void)\n\n{\n  int result1;\n  uint result2;\n  undefined4 loopCounter;\n  int loopVariable;\n  undefined4 variable1;\n  int variable2;\n  int variable3;\n  undefined4 variable4;\n  int variable5;\n  undefined4 array1 [4];\n  undefined4 variable6;\n  undefined4 variable7;\n  undefined4 variable8;\n  undefined4 variable9;\n  undefined4 variable10;\n  \n  variable6 = 1;\n  variable7 = 0x10;\n  loopVariable = 2;\n  variable9 = 0;\n  array1[0] = 2;\n  variable8 = 2;\n  variable10 = 0x380000;\n  result1 = FUN_08001b58(array1);\n  if (result1 == 0) goto LAB_08004540;\n  loopCounter = 0x3c;\n  while( true ) {\n    result1 = FUN_08004490(\"../Src/peripherals.c\",loopCounter);\nLAB_08004540:\n    variable1 = 0xf;\n    variable4 = 0x400;\n    variable2 = loopVariable;\n    variable3 = result1;\n    variable5 = result1;\n    loopVariable = FUN_0800209c(&variable1,loopVariable);\n    if (loopVariable == 0) break;\n    loopCounter = 0x49;\n  }\n  result2 = FUN_08002214();\n  FUN_08001214(result2 / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "local_44": "variable1",
                "local_40": "variable2",
                "local_3c": "variable3",
                "local_38": "variable4",
                "local_34": "variable5",
                "local_30": "array1",
                "local_20": "variable6",
                "local_1c": "variable7",
                "local_14": "variable8",
                "local_10": "variable9",
                "local_c": "variable10",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "loopCounter",
                "iVar4": "loopVariable"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_device_0800458c",
            "code": "\n\n\nvoid initializeDevice_0800458c(void)\n\n{\n  int result;\n  undefined4 constant;\n  int value;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int var9;\n  int var10;\n  int var11;\n  int var12;\n  int var13;\n  undefined4 var14;\n  int var15;\n  \n  FUN_08001128();\n  FUN_08004514();\n  value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  var9 = 0xe000;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40011000,&var9);\n  var9 = 0x20;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40010800,&var9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = FUN_08001754();\n  if (result == 0) goto LAB_0800463a;\n  constant = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = FUN_08004490(\"../Src/peripherals.c\",constant);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = FUN_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  constant = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = FUN_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                constant = 0x88;\n                              }\n                              var1 = result;\n                              var2 = result;\n                              result = FUN_080025a4(&DAT_200015bc,&var1);\n                              if (result == 0) break;\n                              constant = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = result;\n                            var5 = result;\n                            var6 = result;\n                            var7 = result;\n                            var8 = result;\n                            result = FUN_0800245c(&DAT_200015bc,&var3,0xc);\n                            if (result == 0) break;\n                            constant = 0x9a;\n                          }\n                          var14 = 0x2000;\n                          var9 = result;\n                          var10 = result;\n                          var11 = result;\n                          var12 = result;\n                          var13 = result;\n                          var15 = result;\n                          result = FUN_08002564(&DAT_200015bc,&var9);\n                          if (result == 0) break;\n                          constant = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = FUN_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        constant = 0xc3;\n                      }\n                      var3 = result;\n                      var4 = result;\n                      result = FUN_080025a4(&DAT_200015f8,&var3);\n                      if (result == 0) break;\n                      constant = 0xca;\n                    }\n                    var9 = 0x60;\n                    var10 = result;\n                    var11 = result;\n                    var13 = result;\n                    result = FUN_0800245c(&DAT_200015f8,&var9,4);\n                    if (result == 0) break;\n                    constant = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = FUN_080023d0();\n                  if (result == 0) break;\n                  constant = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                result = FUN_080025a4(&DAT_20001540,&var3);\n                if (result == 0) break;\n                constant = 0xf7;\n              }\n              var9 = 0x60;\n              var10 = result;\n              var11 = result;\n              var13 = result;\n              result = FUN_0800245c(&DAT_20001540,&var9,8);\n              if (result == 0) break;\n              constant = 0x100;\n            }\n            value = FUN_0800245c(&DAT_20001540,&var9,0xc);\n            if (value == 0) break;\n            constant = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = value;\n          DAT_200014d8 = value;\n          result = FUN_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          constant = 0x122;\n        }\n        var3 = result;\n        var4 = result;\n        result = FUN_080025a4(&DAT_200014c8,&var3);\n        if (result == 0) break;\n        constant = 0x129;\n      }\n      var9 = 0x60;\n      var10 = result;\n      var11 = result;\n      var13 = result;\n      result = FUN_0800245c(&DAT_200014c8,&var9,8);\n      if (result == 0) break;\n      constant = 0x132;\n    }\n    result = FUN_0800245c(&DAT_200014c8,&var9,0xc);\n    if (result == 0) break;\n    constant = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_device_0800458c",
                "iVar1": "result",
                "uVar2": "constant",
                "iVar3": "value",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "var9",
                "local_30": "var10",
                "local_2c": "var11",
                "local_28": "var12",
                "local_24": "var13",
                "local_20": "var14",
                "local_1c": "var15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "process_data_0800483c",
            "code": "\nvoid processData_0800483c(int *inputArray)\n\n{\n  undefined4 temp2;\n  undefined4 temp3;\n  int temp4;\n  int temp1;\n  int temp5;\n  \n  temp1 = inputArray[0xc];\n  temp2 = FUN_08000adc(inputArray[7],inputArray[9]);\n  temp1 = FUN_08000ad8(temp2,temp1);\n  inputArray[10] = temp1;\n  if (*inputArray == 3) {\n    temp1 = FUN_08001064(inputArray[10],0);\n    if (temp1 == 0) {\n      temp1 = FUN_08001028(inputArray[10],0xc3340000);\n    }\n    else {\n      temp1 = FUN_08001064(inputArray[10],0x43340000);\n    }\n    if (temp1 != 0) {\n      temp5 = inputArray[10];\n      temp2 = FUN_08000cec(inputArray[10],0x43b40000);\n      temp1 = FUN_08001064(inputArray[10],0);\n      temp4 = inputArray[10];\n      if (temp1 == 0) {\n        temp4 = temp4 + -0x80000000;\n      }\n      temp2 = FUN_08000e54(temp2,temp4);\n      temp1 = FUN_08000ad8(temp5,temp2);\n      inputArray[10] = temp1;\n    }\n  }\n  temp5 = inputArray[2];\n  temp4 = inputArray[3];\n  temp1 = FUN_08000cec(inputArray[1],inputArray[10]);\n  inputArray[0xe] = temp1;\n  temp1 = FUN_08000adc(inputArray[10],inputArray[0xf]);\n  inputArray[0xf] = temp1;\n  temp1 = FUN_08001028(inputArray[0xf],0xc3fa0000);\n  if (temp1 == 0) {\n    temp1 = FUN_08001064(inputArray[0xf],0x43fa0000);\n    if (temp1 == 0) {\n      temp1 = inputArray[0xf];\n    }\n    else {\n      temp1 = 0x43fa0000;\n    }\n  }\n  else {\n    temp1 = -0x3c060000;\n  }\n  inputArray[0xf] = temp1;\n  temp1 = FUN_08000ad8(inputArray[0xc],inputArray[0xd]);\n  inputArray[0x10] = temp1;\n  temp1 = inputArray[0xe];\n  temp2 = FUN_08000cec(temp5,inputArray[0xf]);\n  temp2 = FUN_08000adc(temp2,temp1);\n  temp3 = FUN_08000cec(temp4,inputArray[0x10]);\n  temp1 = FUN_08000ad8(temp2,temp3);\n  inputArray[0x12] = temp1;\n  temp2 = FUN_08000c44(inputArray[0x13]);\n  temp1 = FUN_08001028(inputArray[0x12],0xc3fa0000);\n  if (temp1 == 0) {\n    temp1 = FUN_08001064(inputArray[0x12],0x43fa0000);\n    if (temp1 == 0) {\n      temp1 = inputArray[0x12];\n    }\n    else {\n      temp1 = 0x43fa0000;\n    }\n  }\n  else {\n    temp1 = -0x3c060000;\n  }\n  temp1 = FUN_08000cec(temp1,temp2);\n  inputArray[0x12] = temp1;\n  inputArray[0xd] = inputArray[0xc];\n  inputArray[0xb] = inputArray[10];\n  inputArray[0x15] = inputArray[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "process_data_0800483c",
                "param_1": "inputArray",
                "iVar4": "temp1",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "iVar3": "temp4",
                "iVar5": "temp5"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initializeData_08004a30(void)\n\n{\n  undefined4 uVar1;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      uVar1 = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(uVar1,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      uVar1 = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(uVar1,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_system_08004a84",
            "code": "\nvoid initializeSystem_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  result = FUN_08001064(DAT_200000d8,0);\n  if (result == 0) {\n    result = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = FUN_08001064(DAT_20000134,0);\n    if (result == 0) {\n      result = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_system_08004a84",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined input)\n\n{\n  int *ptr1;\n  int var1;\n  int var2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var1 = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var2 = FUN_0800115c();\n      } while ((uint)(var2 - var1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = FUN_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = FUN_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "iVar3": "var2",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_modify_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndModifyData_08004c30(int *data_ptr)\n\n{\n  int iVar1;\n  \n  if (*data_ptr != 0x40013800) {\n    return data_ptr;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  iVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) | 1;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_modify_data_08004c30",
                "param_1": "data_ptr"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_variables_08004c64",
            "code": "\nvoid initializeVariables_08004c64(void)\n\n{\n  int counter;\n  \n  counter = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_variables_08004c64",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_state_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeState_08004c70(void)\n\n{\n  int tempVariable;\n  \n  FUN_08004c64();\n  tempVariable = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVariable + 0x14) = *(uint *)(tempVariable + 0x14) | 1;\n    *(uint *)(tempVariable + 0xc) = *(uint *)(tempVariable + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_state_08004c70",
                "iVar1": "tempVariable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_data_08004c8c",
            "code": "\nvoid processData_08004c8c(undefined *data)\n\n{\n  uint result;\n  undefined *currentData;\n  \n  currentData = data;\n  while( true ) {\n    result = FUN_08000150(data);\n    if (result <= (uint)((int)currentData - (int)data)) break;\n    FUN_08004c18(*currentData);\n    currentData = currentData + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_data_08004c8c",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "currentData"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "update_data_08004cac",
            "code": "\nvoid updateData_08004cac(undefined4 data)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,data);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "update_data_08004cac",
                "param_1": "data"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_flags_08004ccc",
            "code": "\n\n\nvoid initializeFlags_08004ccc(undefined4 flag1,undefined4 flag2,undefined4 flag3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,flag2,_DAT_40021018,1,flag1,1,flag3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_flags_08004ccc",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_set_flag_08004d48",
            "code": "\n\n\nvoid checkAndSetFlag_08004d48(int *memoryAddress,undefined4 value)\n\n{\n  undefined4 flagValue1;\n  undefined4 flagValue2;\n  \n  if (*memoryAddress == 0x40005400) {\n    flagValue1 = 0xc0;\n    flagValue2 = 0x12;\n    FUN_08001264(0x40010c00,&flagValue1,0x40005400,3,memoryAddress,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_set_flag_08004d48",
                "param_1": "memoryAddress",
                "param_2": "value",
                "local_18": "flagValue1",
                "local_14": "flagValue2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_settings_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateSettings_08004d8c(int *settings)\n\n{\n  int value;\n  \n  value = *settings;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_settings_08004d8c",
                "param_1": "settings",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_value_08004e14",
            "code": "\nvoid initializeValue_08004e14(int *pointer,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 constant1;\n  int value;\n  undefined4 size;\n  undefined4 localSize;\n  undefined4 stackValue;\n  undefined4 constant2;\n  \n  value = *pointer;\n  if (value == 0x40012c00) {\n    size = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        size = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        size = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    size = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  constant2 = 2;\n  localSize = 2;\n  stackValue = param3;\n  FUN_08001264(constant1,&size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_value_08004e14",
                "param_1": "pointer",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "constant1",
                "iVar2": "value",
                "local_18": "size",
                "local_14": "localSize",
                "uStack_10": "stackValue",
                "local_c": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_data_08004e7c",
            "code": "\n\n\nvoid updateData_08004e7c(int *param_1)\n\n{\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  if (*param_1 == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    flag = 0x200;\n    value1 = 2;\n    value3 = 3;\n    FUN_08001264(0x40010800,&flag);\n    flag = 0x400;\n    value1 = 0;\n    value2 = 0;\n    FUN_08001264(0x40010800,&flag);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_data_08004e7c",
                "local_18": "flag",
                "local_14": "value1",
                "local_10": "value2",
                "local_c": "value3"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_08004f10",
            "code": "\n\n\nvoid initializeMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_dat_value_thunk_0800115c",
            "code": "\nundefined4 get_dat_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_dat_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_buffer_08004ffc",
            "code": "\nvoid clearBuffer_08004ffc(undefined *buffer,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *bufferArray [2];\n  undefined4 maxSize;\n  undefined2 bufferSize;\n  undefined2 maxValue;\n  undefined *currentBuffer;\n  undefined4 maxValue2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  \n  bufferSize = 0x208;\n  maxSize = 0x7fffffff;\n  maxValue2 = 0x7fffffff;\n  maxValue = 0xffff;\n  bufferArray[0] = buffer;\n  currentBuffer = buffer;\n  value3 = size;\n  value4 = value1;\n  value5 = value2;\n  FUN_080050fc(DAT_200001c0,bufferArray,size);\n  *bufferArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_buffer_08004ffc",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_78": "bufferArray",
                "local_70": "maxSize",
                "local_6c": "bufferSize",
                "local_6a": "maxValue",
                "local_68": "currentBuffer",
                "local_64": "maxValue2",
                "uStack_c": "value3",
                "uStack_8": "value4",
                "uStack_4": "value5"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "process_data_08005044",
            "code": "\nundefined4 processData_08005044(undefined4 *outputArray,int *inputArray,undefined4 value,uint limit)\n\n{\n  int result;\n  uint newLimit;\n  uint arraySize;\n  int initialOffset;\n  \n  arraySize = inputArray[2];\n  if ((arraySize <= limit) && ((*(ushort *)(inputArray + 3) & 0x480) != 0)) {\n    initialOffset = *inputArray - inputArray[4];\n    arraySize = (uint)(inputArray[5] * 3) / 2;\n    newLimit = limit + 1 + initialOffset;\n    if (arraySize < newLimit) {\n      arraySize = newLimit;\n    }\n    if ((int)((uint)*(ushort *)(inputArray + 3) << 0x15) < 0) {\n      result = FUN_08005714(outputArray,arraySize);\n      if (result == 0) {\nLAB_0800508a:\n        *outputArray = 0xc;\n        *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(result,inputArray[4],initialOffset);\n      *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = FUN_080057d0(outputArray,inputArray[4],arraySize);\n      if (result == 0) {\n        FUN_0800567c(outputArray,inputArray[4]);\n        goto LAB_0800508a;\n      }\n    }\n    inputArray[4] = result;\n    *inputArray = result + initialOffset;\n    inputArray[5] = arraySize;\n    inputArray[2] = arraySize - initialOffset;\n    arraySize = limit;\n  }\n  if (limit <= arraySize) {\n    arraySize = limit;\n  }\n  FUN_08005646(*inputArray,value,arraySize);\n  inputArray[2] = inputArray[2] - arraySize;\n  *inputArray = arraySize + *inputArray;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "process_data_08005044",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "value",
                "param_4": "limit",
                "iVar1": "result",
                "uVar2": "newLimit",
                "uVar3": "arraySize",
                "iVar4": "initialOffset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *result,int *buffer,byte *inputData,int *outputData)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int *tempPtr;\n  bool isNumeric;\n  byte *currentChar;\n  byte *nextChar;\n  int subResult;\n  int *outputPtr;\n  uint flag1;\n  int flag2;\n  undefined4 tempResult;\n  int tempFlag;\n  int totalSize;\n  byte operationType;\n  undefined constant1;\n  undefined constant2;\n  undefined constant3;\n  undefined4 constant4;\n  \n  outputPtr = outputData;\n  if (((int)((uint)*(ushort *)(buffer + 3) << 0x18) < 0) && (buffer[4] == 0)) {\n    tempVar1 = FUN_08005714(result,0x40);\n    *buffer = tempVar1;\n    buffer[4] = tempVar1;\n    if (tempVar1 == 0) {\n      *result = 0xc;\n      return -1;\n    }\n    buffer[5] = 0x40;\n  }\n  totalSize = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  currentChar = inputData;\nLAB_08005146:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_08005146;\nLAB_08005150:\n  tempVar1 = (int)nextChar - (int)inputData;\n  if (tempVar1 != 0) {\n    tempVar2 = FUN_08005044(result,buffer,inputData,tempVar1);\n    if (tempVar2 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalSize;\n    }\n    totalSize = totalSize + tempVar1;\n  }\n  if (*nextChar == 0) goto LAB_080052ac;\n  flag1 = 0;\n  tempFlag = 0;\n  flag2 = -1;\n  tempResult = 0;\n  constant3 = 0;\n  constant4 = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempVar1 = FUN_08005614(&DAT_08007379,*currentChar);\n    inputData = currentChar + 1;\n    if (tempVar1 == 0) break;\n    flag1 = 1 << (tempVar1 + 0xf7ff8c87U & 0xff) | flag1;\n    currentChar = inputData;\n  }\n  if ((int)(flag1 << 0x1b) < 0) {\n    constant3 = 0x20;\n  }\n  if ((int)(flag1 << 0x1c) < 0) {\n    constant3 = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    tempPtr = outputPtr + 1;\n    tempVar1 = *outputPtr;\n    outputPtr = tempPtr;\n    if (tempVar1 < 0) {\n      tempFlag = -tempVar1;\n      flag1 = flag1 | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumeric = false;\n    tempVar1 = tempFlag;\n    inputData = currentChar;\n    while( true ) {\n      if (9 < *inputData - 0x30) break;\n      tempVar1 = tempVar1 * 10 + (*inputData - 0x30);\n      isNumeric = true;\n      inputData = inputData + 1;\n    }\n    if (!isNumeric) goto LAB_080051fc;\n  }\n  tempFlag = tempVar1;\nLAB_080051fc:\n  if (*inputData == 0x2e) {\n    if (inputData[1] == 0x2a) {\n      inputData = inputData + 2;\n      tempPtr = outputPtr + 1;\n      flag2 = *outputPtr;\n      outputPtr = tempPtr;\n      if (flag2 < 0) {\n        flag2 = -1;\n      }\n    }\n    else {\n      isNumeric = false;\n      tempVar1 = 0;\n      flag2 = 0;\n      while( true ) {\n        inputData = inputData + 1;\n        if (9 < *inputData - 0x30) break;\n        tempVar1 = tempVar1 * 10 + (*inputData - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        flag2 = tempVar1;\n      }\n    }\n  }\n  tempVar1 = FUN_08005614(&DAT_0800737f,*inputData,3);\n  if (tempVar1 != 0) {\n    inputData = inputData + 1;\n    flag1 = flag1 | 0x40 << (tempVar1 + 0xf7ff8c81U & 0xff);\n  }\n  operationType = *inputData;\n  inputData = inputData + 1;\n  tempVar1 = FUN_08005614(\"efgEFG\",operationType,6);\n  if (tempVar1 == 0) {\n    subResult = FUN_080053d4(result,&flag1,buffer,0x8005045,&outputPtr);\n    if (subResult == -1) goto LAB_080052ac;\n  }\n  else {\n    outputPtr = (int *)(((int)outputPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalSize = totalSize + subResult;\n  currentChar = inputData;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "result",
                "param_2": "buffer",
                "param_3": "inputData",
                "param_4": "outputData",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "piVar3": "tempPtr",
                "bVar4": "isNumeric",
                "pbVar5": "currentChar",
                "pbVar6": "nextChar",
                "unaff_r9": "subResult",
                "local_8c": "outputPtr",
                "local_88": "flag1",
                "local_84": "flag2",
                "local_80": "tempResult",
                "local_7c": "tempFlag",
                "local_74": "totalSize",
                "local_70": "operationType",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "constant3",
                "local_30": "constant4"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *buffer,uint *outputSize,undefined4 param_4,code *callback)\n\n{\n  int loopCounter1;\n  int callbackResult;\n  uint maxBufferSize;\n  uint processedBytes;\n  bool useDefaultOffset;\n  \n  maxBufferSize = buffer[4];\n  if ((int)buffer[4] < (int)buffer[2]) {\n    maxBufferSize = buffer[2];\n  }\n  *outputSize = maxBufferSize;\n  if (*(char *)((int)buffer + 0x43) != '\\0') {\n    *outputSize = maxBufferSize + 1;\n  }\n  if ((int)(*buffer << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*buffer & 6) == 0) {\n    for (loopCounter1 = 0; loopCounter1 < (int)(buffer[3] - *outputSize); loopCounter1 = loopCounter1 + 1) {\n      callbackResult = (*callback)(input,param_4,(int)buffer + 0x19,1);\n      if (callbackResult == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxBufferSize = (uint)*(byte *)((int)buffer + 0x43);\n  if (maxBufferSize != 0) {\n    maxBufferSize = 1;\n  }\n  processedBytes = maxBufferSize;\n  if ((int)(*buffer << 0x1a) < 0) {\n    *(undefined *)((int)buffer + maxBufferSize + 0x43) = 0x30;\n    processedBytes = maxBufferSize + 2;\n    *(undefined *)((int)buffer + maxBufferSize + 0x44) = *(undefined *)((int)buffer + 0x45);\n  }\n  loopCounter1 = (*callback)(input,param_4,(int)buffer + 0x43,processedBytes);\n  if (loopCounter1 != -1) {\n    maxBufferSize = buffer[3];\n    useDefaultOffset = (*buffer & 6) != 4;\n    if (useDefaultOffset) {\n      maxBufferSize = 0;\n    }\n    processedBytes = 0;\n    if (!useDefaultOffset) {\n      maxBufferSize = maxBufferSize - *outputSize;\n    }\n    if (!useDefaultOffset) {\n      maxBufferSize = maxBufferSize & ~((int)maxBufferSize >> 0x1f);\n    }\n    if ((int)buffer[4] < (int)buffer[2]) {\n      maxBufferSize = maxBufferSize + (buffer[2] - buffer[4]);\n    }\n    while( true ) {\n      if (maxBufferSize == processedBytes) {\n        return 0;\n      }\n      loopCounter1 = (*callback)(input,param_4,(int)buffer + 0x1a,1);\n      if (loopCounter1 == -1) break;\n      processedBytes = processedBytes + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "buffer",
                "param_3": "outputSize",
                "param_5": "callback",
                "iVar1": "loopCounter1",
                "iVar2": "callbackResult",
                "uVar3": "maxBufferSize",
                "uVar4": "processedBytes",
                "bVar5": "useDefaultOffset"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "convert_and_copy_to_string_080053d4",
            "code": "\nuint convertAndCopyToString_080053d4(undefined4 input1,uint *input2,undefined4 input3,code *conversionFunc,uint **output)\n\n{\n  byte byteVal;\n  int indexVar;\n  uint *ptrVar;\n  int iterVar;\n  char *charPtr;\n  uint value;\n  uint **doublePtr;\n  char **charPtrPtr;\n  uint result;\n  uint tempVar;\n  char *destPtr;\n  char *srcPtr;\n  uint localArray [2];\n  \n  byteVal = *(byte *)(input2 + 6);\n  srcPtr = (char *)((int)input2 + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800558e;\n          if (byteVal != 0x58) goto LAB_08005404;\n          *(undefined *)((int)input2 + 0x45) = 0x58;\n          charPtr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          value = *input2;\n          ptrVar = *output;\n          *output = ptrVar + 1;\n          if (((value & 0x80) == 0) && ((int)(value << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptrVar;\n          }\n          else {\n            result = *ptrVar;\n          }\n          if ((int)(value << 0x1f) < 0) {\n            *input2 = value | 0x20;\n          }\n          if (result == 0) {\n            *input2 = *input2 & 0xffffffdf;\n          }\n          value = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)input2 + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_08005404;\n          result = *input2;\n          ptrVar = *output;\n          if ((result & 0x80) == 0) {\n            *output = ptrVar + 1;\n            if ((result & 0x40) == 0) goto LAB_08005424;\n            result = (uint)(short)*(ushort *)ptrVar;\n          }\n          else {\n            *output = ptrVar + 1;\nLAB_08005424:\n            result = *ptrVar;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)input2 + 0x43) = 0x2d;\n          }\n          charPtr = \"0123456789ABCDEF\";\n          value = 10;\n        }\n        tempVar = input2[1];\n        input2[2] = tempVar;\n        destPtr = srcPtr;\n        if ((int)tempVar < 0) {\n          if (result != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)input2 + 0x42) = *charPtr;\n          destPtr = (char *)((int)input2 + 0x42);\n        }\n        else {\n          *input2 = *input2 & 0xfffffffb;\n          if (result == 0) {\n            if (tempVar != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              tempVar = result / value;\n              destPtr = destPtr + -1;\n              *destPtr = charPtr[result - value * tempVar];\n              result = tempVar;\n            } while (tempVar != 0);\n          }\n        }\n        if (((value == 8) && ((int)(*input2 << 0x1f) < 0)) && ((int)input2[1] <= (int)input2[4]))\n        {\n          destPtr[-1] = '0';\n          destPtr = destPtr + -1;\n        }\n        input2[4] = (int)srcPtr - (int)destPtr;\n        srcPtr = destPtr;\n        goto LAB_080054fa;\n      }\n      ptrVar = *output;\n      *output = ptrVar + 1;\n      *(char *)((int)input2 + 0x42) = (char)*ptrVar;\nLAB_08005464:\n      srcPtr = (char *)((int)input2 + 0x42);\n      result = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_0800548a:\n            result = *input2;\n            ptrVar = *output;\n            if ((result & 0x80) == 0) {\n              *output = ptrVar + 1;\n              if ((result & 0x40) == 0) goto LAB_08005498;\n              result = (uint)*(ushort *)ptrVar;\n            }\n            else {\n              *output = ptrVar + 1;\nLAB_08005498:\n              result = *ptrVar;\n            }\n            if (byteVal == 0x6f) {\n              value = 8;\n            }\n            else {\n              value = 10;\n            }\n            charPtr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVal == 0x70) {\n            *input2 = *input2 | 0x20;\nLAB_0800544a:\n            charPtr = \"0123456789abcdef\";\n            *(undefined *)((int)input2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_0800548a;\n          if (byteVal == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)input2 + 0x42) = byteVal;\n        goto LAB_08005464;\n      }\n      charPtrPtr = (char **)*output;\n      *output = (uint *)(charPtrPtr + 1);\n      srcPtr = *charPtrPtr;\n      indexVar = FUN_08005614(srcPtr,0,input2[1]);\n      if (indexVar != 0) {\n        input2[1] = indexVar - (int)srcPtr;\n      }\n      result = input2[1];\n    }\n    input2[4] = result;\n    *(undefined *)((int)input2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  result = *input2;\n  doublePtr = (uint **)*output;\n  value = input2[5];\n  if ((result & 0x80) == 0) {\n    *output = (uint *)(doublePtr + 1);\n    ptrVar = *doublePtr;\n    if ((result & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptrVar = (short)value;\n  }\n  else {\n    *output = (uint *)(doublePtr + 1);\n    ptrVar = *doublePtr;\nLAB_0800557a:\n    *ptrVar = value;\n  }\nLAB_0800558e:\n  input2[4] = 0;\nLAB_080054fa:\n  indexVar = FUN_080052e4(input1,input2,localArray,input3,conversionFunc);\n  if ((indexVar == -1) || (indexVar = (*conversionFunc)(input1,input3,srcPtr,input2[4]), indexVar == -1)) {\nLAB_0800550e:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*input2 << 0x1e) < 0) {\n      for (indexVar = 0; indexVar < (int)(input2[3] - localArray[0]); indexVar = indexVar + 1) {\n        iterVar = (*conversionFunc)(input1,input3,(int)input2 + 0x19,1);\n        if (iterVar == -1) goto LAB_0800550e;\n      }\n    }\n    result = input2[3];\n    if ((int)input2[3] < (int)localArray[0]) {\n      result = localArray[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "convert_and_copy_to_string_080053d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "conversionFunc",
                "param_5": "output",
                "bVar1": "byteVal",
                "iVar2": "indexVar",
                "puVar3": "ptrVar",
                "iVar4": "iterVar",
                "pcVar5": "charPtr",
                "uVar6": "value",
                "ppuVar7": "doublePtr",
                "ppcVar8": "charPtrPtr",
                "uVar9": "result",
                "uVar10": "tempVar",
                "pcVar11": "destPtr",
                "pcVar12": "srcPtr",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_position;\n  char *next_position;\n  \n  current_position = string;\n  do {\n    next_position = current_position;\n    if (next_position == string + length) {\n      return (char *)0x0;\n    }\n    current_position = next_position + 1;\n  } while (*next_position != character);\n  return next_position;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_position",
                "pcVar2": "next_position"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int startingIndex,undefined *sourceArray,int length)\n\n{\n  undefined *destinationPointer;\n  undefined *sourcePointer;\n  \n  sourcePointer = (undefined *)(startingIndex + -1);\n  destinationPointer = sourceArray + length;\n  for (; sourceArray != destinationPointer; sourceArray = sourceArray + 1) {\n    sourcePointer = sourcePointer + 1;\n    *sourcePointer = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "startingIndex",
                "param_2": "sourceArray",
                "param_3": "length",
                "puVar1": "destinationPointer",
                "puVar2": "sourcePointer"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_data_08005646",
            "code": "\nvoid copyAndReverseData_08005646(undefined *dest,undefined *src,int size)\n\n{\n  undefined *endPtr;\n  \n  endPtr = src + size;\n  if ((src < dest) && (dest < endPtr)) {\n    dest = dest + size;\n    size = size - (int)endPtr;\n    while (endPtr + size != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      dest = dest + -1;\n      *dest = *endPtr;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != endPtr; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_data_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "extract_and_improve_0800567c",
            "code": "\nvoid extractAndImprove_0800567c(undefined4 *output,int length,undefined4 param3,undefined4 param4)\n\n{\n  int **extraOutput;\n  int **ptr1;\n  int **ptr2;\n  int *pointerVar;\n  int **ptr4;\n  int **ptr5;\n  \n  if (length == 0) {\n    return;\n  }\n  ptr5 = (int **)(length + -4);\n  if (*(int *)(length + -4) < 0) {\n    ptr5 = (int **)((int)ptr5 + *(int *)(length + -4));\n  }\n  FUNC_0800583c();\n  ptr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    ptr5[1] = (int *)0x0;\n    ptr1 = extraOutput;\n    DAT_200002ac = ptr5;\n  }\n  else {\n    ptr2 = DAT_200002ac;\n    if (ptr5 < DAT_200002ac) {\n      ptr1 = (int **)*ptr5;\n      ptr2 = (int **)((int)ptr5 + (int)ptr1);\n      if (DAT_200002ac == ptr2) {\n        pointerVar = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        ptr2 = (int **)((int)pointerVar + (int)ptr1);\n        *ptr5 = (int *)ptr2;\n      }\n      ptr5[1] = (int *)DAT_200002ac;\n      DAT_200002ac = ptr5;\n    }\n    else {\n      do {\n        ptr4 = ptr2;\n        ptr2 = (int **)ptr4[1];\n        if (ptr2 == (int **)0x0) break;\n      } while (ptr2 <= ptr5);\n      ptr1 = (int **)*ptr4;\n      if ((int **)((int)ptr4 + (int)ptr1) == ptr5) {\n        ptr1 = (int **)((int)ptr1 + (int)*ptr5);\n        *ptr4 = (int *)ptr1;\n        if (ptr2 == (int **)((int)ptr4 + (int)ptr1)) {\n          pointerVar = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          ptr1 = (int **)((int)ptr1 + (int)pointerVar);\n          *ptr4 = (int *)ptr1;\n          ptr4[1] = (int *)ptr2;\n        }\n      }\n      else if (ptr5 < (int **)((int)ptr4 + (int)ptr1)) {\n        *output = 0xc;\n      }\n      else {\n        ptr1 = (int **)((int)ptr5 + (int)*ptr5);\n        if (ptr2 == ptr1) {\n          pointerVar = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          ptr1 = (int **)((int)pointerVar + (int)*ptr5);\n          *ptr5 = (int *)ptr1;\n        }\n        ptr5[1] = (int *)ptr2;\n        ptr4[1] = (int *)ptr5;\n      }\n    }\n  }\n  FUNC_0800583e(output,ptr1,ptr2,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "extract_and_improve_0800567c",
                "param_1": "output",
                "param_2": "length",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraOutput",
                "ppiVar1": "ptr1",
                "ppiVar2": "ptr2",
                "piVar3": "pointerVar",
                "ppiVar4": "ptr4",
                "ppiVar5": "ptr5"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_block_08005714",
            "code": "\nuint allocate_memory_block_08005714(undefined4 *mem_block_ptr,uint requested_size)\n\n{\n  uint *current_block_ptr;\n  int difference;\n  uint *next_block_ptr;\n  uint new_block_size;\n  uint *previous_block_ptr;\n  uint actual_block_size;\n  \n  actual_block_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (actual_block_size < 0xc) {\n    actual_block_size = 0xc;\n  }\n  if (((int)actual_block_size < 0) || (actual_block_size < requested_size)) {\n    *mem_block_ptr = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block_ptr = DAT_200002ac;\n    previous_block_ptr = DAT_200002ac;\n    while (next_block_ptr = current_block_ptr, next_block_ptr != (uint *)0x0) {\n      new_block_size = *next_block_ptr - actual_block_size;\n      if (-1 < (int)new_block_size) {\n        if (new_block_size < 0xc) {\n          if (previous_block_ptr == next_block_ptr) {\n            current_block_ptr = (uint *)previous_block_ptr[1];\n            DAT_200002ac = current_block_ptr;\n          }\n          else {\n            current_block_ptr = (uint *)next_block_ptr[1];\n          }\n          if (previous_block_ptr != next_block_ptr) {\n            previous_block_ptr[1] = (uint)current_block_ptr;\n            previous_block_ptr = next_block_ptr;\n          }\n        }\n        else {\n          *next_block_ptr = new_block_size;\n          *(uint *)((int)next_block_ptr + new_block_size) = actual_block_size;\n          previous_block_ptr = (uint *)((int)next_block_ptr + new_block_size);\n        }\n        goto LAB_08005778;\n      }\n      previous_block_ptr = next_block_ptr;\n      current_block_ptr = (uint *)next_block_ptr[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(mem_block_ptr);\n    }\n    current_block_ptr = (uint *)FUN_0800581c(mem_block_ptr,actual_block_size);\n    if ((current_block_ptr != (uint *)0xffffffff) &&\n       ((previous_block_ptr = (uint *)((int)current_block_ptr + 3U & 0xfffffffc), current_block_ptr == previous_block_ptr ||\n        (difference = FUN_0800581c(mem_block_ptr,(int)previous_block_ptr - (int)current_block_ptr), difference != -1)))) {\n      *previous_block_ptr = actual_block_size;\nLAB_08005778:\n      FUNC_0800583e(mem_block_ptr);\n      actual_block_size = (int)previous_block_ptr + 0xbU & 0xfffffff8;\n      difference = actual_block_size - (int)(previous_block_ptr + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block_ptr + difference) = -difference;\n        return actual_block_size;\n      }\n      return actual_block_size;\n    }\n    *mem_block_ptr = 0xc;\n    FUNC_0800583e(mem_block_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "mem_block_ptr",
                "param_2": "requested_size",
                "puVar1": "current_block_ptr",
                "iVar2": "difference",
                "puVar3": "next_block_ptr",
                "uVar4": "new_block_size",
                "puVar5": "previous_block_ptr",
                "uVar6": "actual_block_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint process_data_080057d0(undefined4 input_data,int size,uint limit,undefined4 extra_param)\n\n{\n  int result;\n  uint compare_result;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      FUN_0800567c();\n      result = 0;\n    }\n    else {\n      compare_result = FUN_08005840();\n      result = size;\n      if ((compare_result < limit) && (result = FUN_08005714(input_data,limit), result != 0)) {\n        FUN_08005630(result,size,limit);\n        FUN_0800567c(input_data,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_08005714(input_data,limit,limit,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "input_data",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "compare_result"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "check_and_update_value_0800581c",
            "code": "\nvoid checkAndUpdateValue_0800581c(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_2000169c = 0;\n  returnValue = FUN_080072b8(inputValue);\n  if ((returnValue == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "check_and_update_value_0800581c",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 undefined,int inputValue)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(inputValue + -4) + -4;\n  if (*(int *)(inputValue + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(inputValue + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "undefined",
                "param_2": "inputValue",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_data_08005854",
            "code": "\nundefined8 processData_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int result;\n  undefined4 *ptr;\n  int *ptrValue;\n  undefined8 returnValue;\n  undefined8 tempVar;\n  undefined4 flag;\n  undefined *dataPtr;\n  undefined4 input1_2;\n  undefined4 input2_2;\n  undefined4 input1_3;\n  undefined4 input2_3;\n  undefined8 processedData;\n  int errorCode;\n  \n  returnValue = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  errorCode = FUN_08000a04(input1,input2,input1,input2);\n  if (errorCode != 0) {\n    return returnValue;\n  }\n  tempVar = FUNC_0800708c(input1,input2);\n  result = FUN_080009f0((int)tempVar,(int)((ulonglong)tempVar >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return returnValue;\n  }\n  flag = 1;\n  dataPtr = &DAT_080073ac;\n  input1_2 = input1;\n  input2_2 = input2;\n  input1_3 = input1;\n  input2_3 = input2;\n  processedData = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  ptr = (undefined4 *)FUN_080072ac();\n  *ptr = 0x21;\nLAB_080058d0:\n  if (errorCode != 0) {\n    ptrValue = (int *)FUN_080072ac();\n    *ptrValue = errorCode;\n  }\n  return processedData;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_data_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "puVar2": "ptr",
                "piVar3": "ptrValue",
                "uVar4": "returnValue",
                "uVar5": "tempVar",
                "local_48": "flag",
                "local_44": "dataPtr",
                "local_40": "input1_2",
                "uStack_3c": "input2_2",
                "local_38": "input1_3",
                "uStack_34": "input2_3",
                "local_30": "processedData",
                "local_28": "errorCode"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_floating_point_value_thunk_08006070",
            "code": "\nundefined8 calculateFloatingPointValue_thunk_08006070(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 result1;\n  uint flag1;\n  uint result2;\n  int difference;\n  uint normalizedValue4;\n  undefined8 result;\n  undefined8 anotherResult;\n  \n  normalizedValue4 = value4 & 0x7fffffff;\n  if ((0x7ff00000 < (normalizedValue4 | (-value3 | value3) >> 0x1f)) ||\n     (result2 = value2 & 0x7fffffff, 0x7ff00000 < (result2 | (-value1 | value1) >> 0x1f))) {\n    result = FUN_0800016c(value1,value2,value3,value4,value4);\n    return result;\n  }\n  if ((value4 + 0xc0100000 | value3) == 0) {\n    result = FUN_08006d68();\n    return result;\n  }\n  flag1 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n  if ((value1 | result2) == 0) {\n    if (flag1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag1 != 3) {\n      return CONCAT44(value2,value1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((value3 | normalizedValue4) != 0) {\n      if (normalizedValue4 == 0x7ff00000) {\n        if (result2 == 0x7ff00000) {\n          if (flag1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag1 != 3) {\n          if (flag1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result2 != 0x7ff00000) {\n        difference = (int)(result2 - normalizedValue4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)value4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUN_08000724(value1,value2);\n            FUNC_0800708c();\n            result = FUN_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (flag1 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (flag1 == 2) {\n          anotherResult = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (flag1 == 0) {\n            return result;\n          }\n          result = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          anotherResult = 0x400921fb54442d18;\n        }\n        result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)anotherResult,\n                             (int)((ulonglong)anotherResult >> 0x20));\n        return result;\n      }\n    }\n    if ((int)value2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_floating_point_value_thunk_08006070",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "flag1",
                "uVar3": "result2",
                "iVar4": "difference",
                "uVar5": "normalizedValue4",
                "uVar6": "result",
                "uVar7": "anotherResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "extract_data_08005900",
            "code": "\nundefined8 extract_data_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *pointerVar;\n  undefined4 *pointerVar2;\n  int comparisonResult;\n  undefined4 upperPart;\n  undefined4 lowerPart;\n  undefined8 returnValue;\n  undefined8 auxiliaryVar1;\n  undefined4 flag1;\n  undefined *pointerVar3;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined8 output;\n  int localVar;\n  \n  returnValue = FUN_08006228();\n  flag = DAT_20000224;\n  upperPart = (undefined4)((ulonglong)returnValue >> 0x20);\n  lowerPart = (undefined4)returnValue;\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  result = FUN_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return returnValue;\n  }\n  result = FUN_08000a04(input1,input2,input1,input2);\n  input1Copy = input1;\n  input2Copy = input2;\n  input3Copy = input3;\n  input4Copy = input4;\n  if (result == 0) {\n    result = FUN_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        flag1 = 1;\n        pointerVar3 = &DAT_080073b1;\n        output = 0;\n        localVar = 0;\n        if (flag != '\\0') {\n          output = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue;\n      }\n      result = FUN_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return returnValue;\n      }\n      flag1 = 1;\n      pointerVar3 = &DAT_080073b1;\n      localVar = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      output = 0xfff0000000000000;\n      localVar = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(lowerPart,upperPart);\n    if (((result != 0) || (comparisonResult = FUN_08007092(input1,input2), comparisonResult == 0)) ||\n       (comparisonResult = FUN_08007092(input3,input4), comparisonResult == 0)) {\n      result = FUN_080009a0(lowerPart,upperPart,0,0);\n      if (result == 0) {\n        return returnValue;\n      }\n      result = FUN_08007092(input1,input2);\n      if (result == 0) {\n        return returnValue;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue;\n      }\n      flag1 = 4;\n      pointerVar3 = &DAT_080073b1;\n      localVar = 0;\n      output._0_4_ = 0;\n      output._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    localVar = FUN_08000a04(lowerPart,upperPart);\n    flag = DAT_20000224;\n    if (localVar != 0) {\n      pointerVar3 = &DAT_080073b1;\n      flag1 = 1;\n      localVar = result;\n      if (DAT_20000224 != '\\0') {\n        output = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      pointerVar3 = &DAT_080073b1;\n      flag1 = 1;\n      output = 0;\n      goto LAB_08005978;\n    }\n    pointerVar3 = &DAT_080073b1;\n    flag1 = 3;\n    if (DAT_20000224 == '\\0') {\n      output._0_4_ = 0xe0000000;\n      output._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue = FUN_080004d0(input3,input4,0,0x3fe00000);\n        auxiliaryVar1 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue,(int)((ulonglong)returnValue >> 0x20),(int)auxiliaryVar1,\n                             (int)((ulonglong)auxiliaryVar1 >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0xe0000000;\n          output._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&flag1);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      output._0_4_ = 0;\n      output._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue = FUN_080004d0(input3,input4,0,0x3fe00000);\n        auxiliaryVar1 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue,(int)((ulonglong)returnValue >> 0x20),(int)auxiliaryVar1,\n                             (int)((ulonglong)auxiliaryVar1 >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0;\n          output._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    pointerVar2 = (undefined4 *)FUN_080072ac();\n    lowerPart = 0x22;\n  }\n  else {\n    result = FUN_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return returnValue;\n    }\n    flag1 = 1;\n    pointerVar3 = &DAT_080073b1;\n    output = 0x3ff0000000000000;\n    localVar = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&flag1);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    pointerVar2 = (undefined4 *)FUN_080072ac();\n    lowerPart = 0x21;\n  }\n  *pointerVar2 = lowerPart;\nLAB_080059d0:\n  if (localVar != 0) {\n    pointerVar = (int *)FUN_080072ac();\n    *pointerVar = localVar;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005900": "extract_data_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "pointerVar",
                "puVar4": "pointerVar2",
                "iVar5": "comparisonResult",
                "uVar6": "upperPart",
                "uVar7": "lowerPart",
                "uVar8": "returnValue",
                "uVar9": "auxiliaryVar1",
                "local_50": "flag1",
                "local_4c": "pointerVar3",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input3Copy",
                "uStack_3c": "input4Copy",
                "local_38": "output",
                "local_30": "localVar"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "extract_data_08005bc8",
            "code": "\nundefined8 extract_data_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  int result;\n  int *ptr_result;\n  undefined4 *ptr_data;\n  undefined8 return_val;\n  undefined4 data_1;\n  undefined *data_2;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy2;\n  undefined4 input_2_copy2;\n  undefined8 final_result;\n  int validation_result;\n  \n  return_val = FUN_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return return_val;\n  }\n  validation_result = FUN_08000a04(input_1,input_2,input_1,input_2);\n  if (validation_result != 0) {\n    return return_val;\n  }\n  result = FUN_080009b4(input_1,input_2,0,0);\n  if (result == 0) {\n    return return_val;\n  }\n  data_1 = 1;\n  data_2 = &DAT_080073b5;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy2 = input_1;\n  input_2_copy2 = input_2;\n  if (flag == '\\0') {\n    final_result = 0;\nLAB_08005c26:\n    result = FUN_0800709e(&data_1);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    final_result = FUN_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  ptr_data = (undefined4 *)FUN_080072ac();\n  *ptr_data = 0x21;\nLAB_08005c2e:\n  if (validation_result != 0) {\n    ptr_result = (int *)FUN_080072ac();\n    *ptr_result = validation_result;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "extract_data_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptr_result",
                "puVar4": "ptr_data",
                "uVar5": "return_val",
                "local_50": "data_1",
                "local_4c": "data_2",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_1_copy2",
                "uStack_3c": "input_2_copy2",
                "local_38": "final_result",
                "local_30": "validation_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculateResult_08005c70(uint input1,uint input2)\n\n{\n  int comparisonResult;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  uint tempVar7;\n  undefined8 tempVar8;\n  undefined8 tempVar9;\n  undefined8 tempVar10;\n  \n  tempVar8 = CONCAT44(input2,input1);\n  tempVar7 = input2 & 0x7fffffff;\n  if (tempVar7 < 0x3ff00000) {\n    if (tempVar7 < 0x3fe00000) {\n      if (0x3e3fffff < tempVar7) {\n        tempVar9 = FUN_080004d0(input1,input2,input1,input2);\n        tempVar6 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n        tempVar5 = (undefined4)tempVar9;\n        tempVar9 = FUN_080004d0(tempVar5,tempVar6,0xdfdf709,0x3f023de1);\n        tempVar9 = FUN_0800016c((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x7501b288,0x3f49efe0);\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar6);\n        tempVar9 = FUN_08000168((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0xb5688f3b,0x3fa48228);\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar6);\n        tempVar9 = FUN_0800016c((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0xe884455,0x3fc9c155);\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar6);\n        tempVar9 = FUN_08000168((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar6);\n        tempVar9 = FUN_0800016c((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x55555555,0x3fc55555);\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar6);\n        tempVar10 = FUN_080004d0(tempVar5,tempVar6,0xb12e9282,0x3fb3b8c5);\n        tempVar10 = FUN_08000168((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x1b8d0159,0x3fe6066c);\n        tempVar10 = FUN_080004d0((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar5,tempVar6);\n        tempVar10 = FUN_0800016c((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x9c598ac8,0x40002ae5);\n        tempVar10 = FUN_080004d0((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar5,tempVar6);\n        tempVar10 = FUN_08000168((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x1c8a2d4b,0x40033a27);\n        tempVar10 = FUN_080004d0((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar5,tempVar6);\n        tempVar10 = FUN_0800016c((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0,0x3ff00000);\n        tempVar9 = FUN_08000724((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),(int)tempVar10,\n                              (int)((ulonglong)tempVar10 >> 0x20));\n        tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      tempVar9 = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c);\n      comparisonResult = FUN_080009f0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0,0x3ff00000);\n      if (comparisonResult != 0) {\n        return tempVar8;\n      }\n    }\n    tempVar8 = FUNC_0800708c(input1,input2);\n    tempVar8 = FUN_08000168(0,0x3ff00000,(int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20));\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0,0x3fe00000);\n    tempVar1 = (undefined4)((ulonglong)tempVar8 >> 0x20);\n    tempVar5 = (undefined4)tempVar8;\n    tempVar8 = FUN_080004d0(tempVar5,tempVar1,0xdfdf709,0x3f023de1);\n    tempVar8 = FUN_0800016c((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0x7501b288,0x3f49efe0);\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar5,tempVar1);\n    tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0xb5688f3b,0x3fa48228);\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar5,tempVar1);\n    tempVar8 = FUN_0800016c((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0xe884455,0x3fc9c155);\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar5,tempVar1);\n    tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar5,tempVar1);\n    tempVar8 = FUN_0800016c((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0x55555555,0x3fc55555);\n    tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar5,tempVar1);\n    tempVar2 = (undefined4)((ulonglong)tempVar8 >> 0x20);\n    tempVar9 = FUN_080004d0(tempVar5,tempVar1,0xb12e9282,0x3fb3b8c5);\n    tempVar9 = FUN_08000168((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x1b8d0159,0x3fe6066c);\n    tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar1);\n    tempVar9 = FUN_0800016c((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x9c598ac8,0x40002ae5);\n    tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar1);\n    tempVar9 = FUN_08000168((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0x1c8a2d4b,0x40033a27);\n    tempVar9 = FUN_080004d0((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),tempVar5,tempVar1);\n    tempVar9 = FUN_0800016c((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),0,0x3ff00000);\n    tempVar3 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n    tempVar10 = FUN_08006c0c(tempVar5,tempVar1);\n    tempVar4 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n    tempVar6 = (undefined4)tempVar10;\n    if (tempVar7 < 0x3fef3333) {\n      tempVar8 = FUN_08000724((int)tempVar8,tempVar2,(int)tempVar9,tempVar3);\n      tempVar9 = FUN_0800016c(tempVar6,tempVar4,tempVar6,tempVar4);\n      tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                           (int)((ulonglong)tempVar9 >> 0x20));\n      tempVar9 = FUN_080004d0(0,tempVar4,0,tempVar4);\n      tempVar9 = FUN_08000168(tempVar5,tempVar1,(int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20));\n      tempVar10 = FUN_0800016c(tempVar6,tempVar4,0,tempVar4);\n      tempVar9 = FUN_08000724((int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20),(int)tempVar10,\n                            (int)((ulonglong)tempVar10 >> 0x20));\n      tempVar5 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n      tempVar9 = FUN_0800016c((int)tempVar9,tempVar5,(int)tempVar9,tempVar5);\n      tempVar9 = FUN_08000168(0x33145c07,0x3c91a626,(int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20));\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                           (int)((ulonglong)tempVar9 >> 0x20));\n      tempVar9 = FUN_0800016c(0,tempVar4,0,tempVar4);\n      tempVar9 = FUN_08000168(0x54442d18,0x3fe921fb,(int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20));\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                           (int)((ulonglong)tempVar9 >> 0x20));\n      tempVar5 = 0x3fe921fb;\n    }\n    else {\n      tempVar8 = FUN_08000724((int)tempVar8,tempVar2,(int)tempVar9,tempVar3);\n      tempVar8 = FUN_080004d0((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar6,tempVar4);\n      tempVar8 = FUN_0800016c((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar6,tempVar4);\n      tempVar5 = (undefined4)((ulonglong)tempVar8 >> 0x20);\n      tempVar8 = FUN_0800016c((int)tempVar8,tempVar5,(int)tempVar8,tempVar5);\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),0x33145c07,0x3c91a626);\n      tempVar5 = 0x3ff921fb;\n    }\n    tempVar8 = FUN_08000168(0x54442d18,tempVar5,(int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20));\n    if ((int)input2 < 1) {\n      tempVar8 = CONCAT44((int)((ulonglong)tempVar8 >> 0x20) + -0x80000000,(int)tempVar8);\n    }\n  }\n  else {\n    if ((tempVar7 + 0xc0100000 | input1) != 0) {\n      tempVar8 = FUN_08000168(input1,input2,input1,input2);\n      tempVar5 = (undefined4)((ulonglong)tempVar8 >> 0x20);\n      tempVar8 = FUN_08000724((int)tempVar8,tempVar5,(int)tempVar8,tempVar5);\n      return tempVar8;\n    }\n    tempVar8 = FUN_080004d0(input1,input2,0x54442d18,0x3ff921fb);\n    tempVar9 = FUN_080004d0(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    tempVar8 = FUN_0800016c((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),(int)tempVar9,\n                         (int)((ulonglong)tempVar9 >> 0x20));\n  }\n  return tempVar8;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "uVar6": "tempVar5",
                "uVar7": "tempVar6",
                "uVar8": "tempVar7",
                "uVar9": "tempVar8",
                "uVar10": "tempVar9",
                "uVar11": "tempVar10",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_floating_point_08006070",
            "code": "\nundefined8 calculateFloatingPoint_08006070(uint number1,uint number2,uint number3,uint number4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 result6;\n  undefined8 result7;\n  \n  result5 = number4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-number3 | number3) >> 0x1f)) ||\n     (result3 = number2 & 0x7fffffff, 0x7ff00000 < (result3 | (-number1 | number1) >> 0x1f))) {\n    result6 = FUN_0800016c(number1,number2,number3,number4,number4);\n    return result6;\n  }\n  if ((number4 + 0xc0100000 | number3) == 0) {\n    result6 = FUN_08006d68();\n    return result6;\n  }\n  result2 = (int)number4 >> 0x1e & 2U | number2 >> 0x1f;\n  if ((number1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(number2,number1);\n    }\nLAB_0800613e:\n    result6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((number3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)number4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            result6 = 0;\n          }\n          else {\n            FUN_08000724(number1,number2);\n            FUNC_0800708c();\n            result6 = FUN_08006d68();\n          }\n        }\n        else {\n          result6 = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)result6 >> 0x20);\n        result1 = (undefined4)result6;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          result7 = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          result6 = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return result6;\n          }\n          result6 = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          result7 = 0x400921fb54442d18;\n        }\n        result6 = FUN_08000168((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,\n                             (int)((ulonglong)result7 >> 0x20));\n        return result6;\n      }\n    }\n    if ((int)number2 < 0) {\n      result6 = 0xbff921fb54442d18;\n    }\n    else {\n      result6 = 0x3ff921fb54442d18;\n    }\n  }\n  return result6;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_floating_point_08006070",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "number3",
                "param_4": "number4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_exponent_08006228",
            "code": "\nuint calculateExponent_08006228(uint sign,uint exponent,uint fraction1,uint fraction2)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int result10;\n  int result11;\n  undefined4 result12;\n  uint value1;\n  undefined4 value2;\n  int value3;\n  uint value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined8 value7;\n  undefined8 tempValue1;\n  undefined8 tempValue2;\n  undefined8 tempValue3;\n  longlong tempValue4;\n  ulonglong tempValue5;\n  undefined8 tempValue6;\n  uint specialCase;\n  undefined4 specialCaseResult1;\n  undefined4 specialCaseResult2;\n  int shiftAmount;\n  \n  tempValue1 = CONCAT44(exponent,sign);\n  value4 = fraction2 & 0x7fffffff;\n  if ((value4 | fraction1) == 0) {\n    return 0;\n  }\n  value1 = exponent & 0x7fffffff;\n  if (value1 < 0x7ff00001) {\n    if (value1 == 0x7ff00000) {\n      if (sign == 0) {\n        if (0x7ff00000 < value4) goto LAB_08006278;\nLAB_08006262:\n        if ((value4 != 0x7ff00000) || (fraction1 == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (value4 < 0x43400000) {\n            if (value4 < 0x3ff00000) {\nLAB_0800632a:\n              specialCase = 0;\n              goto LAB_080062ba;\n            }\n            result10 = ((int)value4 >> 0x14) + -0x3ff;\n            if (0x14 < result10) {\n              result2 = fraction1 >> (0x34U - result10 & 0xff);\n              if (fraction1 == result2 << (0x34U - result10 & 0xff)) {\n                specialCase = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (fraction1 == 0) {\n              result2 = (int)value4 >> (0x14U - result10 & 0xff);\n              if (value4 == result2 << (0x14U - result10 & 0xff)) {\n                specialCase = 2 - (result2 & 1);\n              }\n              else {\n                specialCase = 0;\n              }\n              goto LAB_0800630c;\n            }\n            specialCase = 0;\n          }\n          else {\n            specialCase = 2;\nLAB_080062ba:\n            if (fraction1 == 0) {\n              if (value4 == 0x7ff00000) {\n                if ((value1 + 0xc0100000 | sign) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < value1) {\n                  if ((int)fraction2 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)fraction2) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (value4 == 0x3ff00000) {\n                if (-1 < (int)fraction2) {\n                  return sign;\n                }\n                value7 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (fraction2 == 0x40000000) goto LAB_0800634a;\n              if ((fraction2 == 0x3fe00000) && (-1 < (int)exponent)) {\n                value4 = FUN_08006c0c(sign,exponent);\n                return value4;\n              }\n            }\n          }\n          value7 = FUNC_0800708c(sign,exponent);\n          value5 = (undefined4)((ulonglong)value7 >> 0x20);\n          result1 = (undefined4)value7;\n          tempValue5 = CONCAT44(exponent,result1) & 0x7fffffffffffffff;\n          if ((sign == 0) && ((value1 == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)fraction2 < 0) {\n              value7 = FUN_08000724(0,0x3ff00000,result1,value5);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)value7;\n            }\n            if ((specialCase | value1 + 0xc0100000) != 0) {\n              return (uint)value7;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)exponent >> 0x1f);\n            value7 = tempValue1;\n            if ((specialCase | result2) != 0) {\n              if (value4 < 0x41e00001) {\n                shiftAmount = 0;\n                if (value1 < 0x100000) {\n                  tempValue5 = FUN_080004d0();\n                  shiftAmount = -0x35;\n                }\n                value4 = (uint)(tempValue5 >> 0x20);\n                result1 = (undefined4)tempValue5;\n                shiftAmount = ((int)value4 >> 0x14) + -0x3ff + shiftAmount;\n                value4 = value4 & 0xfffff;\n                value1 = value4 | 0x3ff00000;\n                if (value4 < 0x3988f) {\nLAB_08006628:\n                  result10 = 0;\n                }\n                else {\n                  if (0xbb679 < value4) {\n                    value1 = value1 - 0x100000;\n                    shiftAmount = shiftAmount + 1;\n                    goto LAB_08006628;\n                  }\n                  result10 = 1;\n                }\n                result11 = result10 * 8;\n                result12 = (&DAT_080073c0)[result10 * 2];\n                value2 = (&DAT_080073c4)[result10 * 2];\n                tempValue1 = FUN_08000168(result1,value1,result12,value2);\n                value6 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                value7 = FUN_0800016c(result1,value1,result12,value2);\n                value7 = FUN_08000724(0,0x3ff00000,(int)value7,(int)((ulonglong)value7 >> 0x20));\n                result4 = (undefined4)((ulonglong)value7 >> 0x20);\n                tempValue2 = FUN_080004d0((int)tempValue1,value6,(int)value7,result4);\n                result5 = (undefined4)((ulonglong)tempValue2 >> 0x20);\n                value5 = (undefined4)tempValue2;\n                tempValue2 = FUN_080004d0(0,result5);\n                tempValue1 = FUN_08000168((int)tempValue1,value6,(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                tempValue2 = FUN_08000168(0,((int)value1 >> 1 | 0x20000000U) + 0x80000 + result10 * 0x40000,\n                                      result12,value2);\n                tempValue2 = FUN_08000168(result1,value1,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n                tempValue2 = FUN_080004d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0,result5);\n                tempValue1 = FUN_08000168((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                tempValue1 = FUN_080004d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)value7,result4\n                                     );\n                value6 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                value7 = FUN_080004d0(value5,result5);\n                result4 = (undefined4)((ulonglong)value7 >> 0x20);\n                result1 = (undefined4)value7;\n                value7 = FUN_080004d0(result1,result4,0x4a454eef,0x3fca7e28);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),result1,result4);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),result1,result4);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),result1,result4);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),result1,result4);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                tempValue2 = FUN_080004d0(result1,result4,result1,result4);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                tempValue2 = FUN_0800016c(value5,result5,0,result5);\n                tempValue2 = FUN_080004d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue1,\n                                      value6);\n                value7 = FUN_0800016c((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)value7,\n                                      (int)((ulonglong)value7 >> 0x20));\n                result1 = (undefined4)((ulonglong)value7 >> 0x20);\n                tempValue2 = FUN_080004d0(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)tempValue2 >> 0x20);\n                tempValue3 = FUN_0800016c((int)tempValue2,result4,0,0x40080000);\n                FUN_0800016c((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20),(int)value7,result1);\n                tempValue3 = FUN_080004d0(0,result5,0,result6);\n                result12 = (undefined4)((ulonglong)tempValue3 >> 0x20);\n                tempValue6 = FUN_08000168(0,result6,0,0x40080000);\n                tempValue2 = FUN_08000168((int)tempValue6,(int)((ulonglong)tempValue6 >> 0x20),(int)tempValue2,result4\n                                     );\n                value7 = FUN_08000168((int)value7,result1,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20)\n                                     );\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),value5,result5);\n                tempValue1 = FUN_080004d0((int)tempValue1,value6,0,result6);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue1,\n                                      (int)((ulonglong)tempValue1 >> 0x20));\n                result1 = (undefined4)((ulonglong)value7 >> 0x20);\n                FUN_0800016c((int)tempValue3,result12,(int)value7,result1);\n                tempValue1 = FUN_080004d0(0,result7,0xe0000000,0x3feec709);\n                tempValue2 = FUN_08000168(0,result7,(int)tempValue3,result12);\n                value7 = FUN_08000168((int)value7,result1,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20)\n                                     );\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                tempValue2 = FUN_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + result11),\n                                      *(undefined4 *)(&DAT_080073e4 + result11));\n                tempValue2 = FUN_08000404(shiftAmount);\n                result1 = (undefined4)((ulonglong)tempValue2 >> 0x20);\n                value5 = *(undefined4 *)(&DAT_080073d0 + result11);\n                value6 = *(undefined4 *)(&DAT_080073d4 + result11);\n                tempValue3 = FUN_0800016c((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)value7,\n                                      (int)((ulonglong)value7 >> 0x20));\n                tempValue3 = FUN_0800016c((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20),value5,value6);\n                FUN_0800016c((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20),(int)tempValue2,result1);\n                tempValue2 = FUN_08000168(0,result8,(int)tempValue2,result1);\n                tempValue4 = FUN_08000168((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),value5,value6);\n                value4 = result8;\n              }\n              else {\n                if (0x43f00000 < value4) {\n                  if (value1 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)fraction2 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  sign = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  tempValue1 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (value1 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)fraction2) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < value1) goto LAB_08006418;\n                tempValue1 = FUN_08000168(result1,value5,0,0x3ff00000);\n                value5 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                result1 = (undefined4)tempValue1;\n                tempValue1 = FUN_080004d0(result1,value5,0x60000000,0x3ff71547);\n                value7 = FUN_080004d0(result1,value5,0xf85ddf44,0x3e54ae0b);\n                tempValue2 = FUN_080004d0(result1,value5,0,0x3fd00000);\n                tempValue2 = FUN_08000168(0x55555555,0x3fd55555,(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                tempValue2 = FUN_080004d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),result1,value5);\n                tempValue2 = FUN_08000168(0,0x3fe00000,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n                tempValue3 = FUN_080004d0(result1,value5,result1,value5);\n                tempValue2 = FUN_080004d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue3,\n                                      (int)((ulonglong)tempValue3 >> 0x20));\n                tempValue2 = FUN_080004d0((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                value7 = FUN_08000168((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                FUN_0800016c((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)value7,\n                             (int)((ulonglong)value7 >> 0x20));\n                tempValue4 = (ulonglong)result3 << 0x20;\n                value4 = result3;\n              }\n              tempValue1 = FUN_08000168((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),(int)tempValue1,\n                                    (int)((ulonglong)tempValue1 >> 0x20));\n              tempValue1 = FUN_08000168((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue1,\n                                    (int)((ulonglong)tempValue1 >> 0x20));\n              if ((specialCase - 1 | result2) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              specialCase = 0;\n              value7 = FUN_08000168(fraction1,fraction2,0,fraction2);\n              value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),0,value4);\n              tempValue1 = FUN_080004d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),fraction1,fraction2);\n              tempValue1 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue1,\n                                    (int)((ulonglong)tempValue1 >> 0x20));\n              value6 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n              result1 = (undefined4)tempValue1;\n              tempValue1 = FUN_080004d0(0,value4,0,fraction2);\n              result4 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n              value5 = (undefined4)tempValue1;\n              tempValue4 = FUN_0800016c(result1,value6,value5,result4);\n              value1 = (uint)((ulonglong)tempValue4 >> 0x20);\n              value4 = (uint)tempValue4;\n              if (0x408fffffffffffff < tempValue4) {\n                if ((value1 + 0xbf700000 | value4) == 0) {\n                  value7 = FUN_0800016c(result1,value6,0x652b82fe,0x3c971547);\n                  tempValue2 = FUN_08000168(value4,value1,value5,result4);\n                  result10 = FUN_080009f0((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue2,\n                                       (int)((ulonglong)tempValue2 >> 0x20));\n                  if (result10 == 0) goto LAB_08006968;\n                }\n                tempValue1 = FUN_080004d0(0,exponent,0x8800759c,0x7e37e43c);\n                sign = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((value1 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((value1 & 0x7fffffff) < 0x3fe00001) {\n                  result10 = 0;\n                }\n                else {\n                  value1 = (0x100000 >> (((int)(value1 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          value1;\n                  value4 = (value1 * 2 >> 0x15) - 0x3ff;\n                  result10 = (int)(value1 & 0xfffff | 0x100000) >> (0x14 - value4 & 0xff);\n                  if (tempValue4 < 0) {\n                    result10 = -result10;\n                  }\n                  tempValue1 = FUN_08000168(value5,result4,0,value1 & ~(0xfffff >> (value4 & 0xff)));\n                }\n                specialCaseResult2 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                specialCaseResult1 = (undefined4)tempValue1;\n                FUN_0800016c(specialCaseResult1,specialCaseResult2,result1,value6);\n                tempValue1 = FUN_080004d0(0,result9,0,0x3fe62e43);\n                value5 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                value7 = FUN_08000168(0,result9,specialCaseResult1,specialCaseResult2);\n                value7 = FUN_08000168(result1,value6,(int)value7,(int)((ulonglong)value7 >> 0x20));\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                tempValue2 = FUN_080004d0(0,result9,0xca86c39,0xbe205c61);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue2,\n                                      (int)((ulonglong)tempValue2 >> 0x20));\n                value6 = (undefined4)((ulonglong)value7 >> 0x20);\n                tempValue2 = FUN_0800016c((int)tempValue1,value5,(int)value7,value6);\n                result4 = (undefined4)((ulonglong)tempValue2 >> 0x20);\n                result1 = (undefined4)tempValue2;\n                tempValue1 = FUN_08000168(result1,result4,(int)tempValue1,value5);\n                tempValue1 = FUN_08000168((int)value7,value6,(int)tempValue1,\n                                      (int)((ulonglong)tempValue1 >> 0x20));\n                value6 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n                value7 = FUN_080004d0(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)value7 >> 0x20);\n                value5 = (undefined4)value7;\n                value7 = FUN_080004d0(value5,result5,0x72bea4d0,0x3e663769);\n                value7 = FUN_08000168((int)value7,(int)((ulonglong)value7 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),value5,result5);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),value5,result5);\n                value7 = FUN_08000168((int)value7,(int)((ulonglong)value7 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),value5,result5);\n                value7 = FUN_0800016c((int)value7,(int)((ulonglong)value7 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                value7 = FUN_080004d0((int)value7,(int)((ulonglong)value7 >> 0x20),value5,result5);\n                value7 = FUN_08000168(result1,result4,(int)value7,(int)((ulonglong)value7 >> 0x20));\n                value5 = (undefined4)((ulonglong)value7 >> 0x20);\n                tempValue2 = FUN_080004d0(result1,result4,(int)value7,value5);\n                value7 = FUN_08000168((int)value7,value5,0,0x40000000);\n                value7 = FUN_08000724((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)value7,\n                                      (int)((ulonglong)value7 >> 0x20));\n                tempValue2 = FUN_080004d0(result1,result4,(int)tempValue1,value6);\n                tempValue1 = FUN_0800016c((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue1,\n                                      value6);\n                tempValue1 = FUN_08000168((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue1,\n                                      (int)((ulonglong)tempValue1 >> 0x20));\n                tempValue1 = FUN_08000168((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),result1,result4);\n                value7 = FUN_08000168(0,0x3ff00000,(int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n                result11 = (int)((ulonglong)value7 >> 0x20);\n                value3 = result11 + result10 * 0x100000;\n                tempValue1 = CONCAT44(value3,(int)value7);\n                sign = specialCase;\n                if (value3 < 0x100000) {\n                  tempValue1 = FUN_080071c0((int)value7,result11,result10);\n                }\n              }\n              else {\n                if ((value1 + 0x3f6f3400 | value4) == 0) {\n                  value7 = FUN_08000168(value4,value1,value5,result4);\n                  result10 = FUN_080009c8(result1,value6,(int)value7,(int)((ulonglong)value7 >> 0x20));\n                  if (result10 == 0) goto LAB_08006968;\n                }\n                tempValue1 = FUN_080004d0(0,exponent,0xc2f8f359,0x1a56e1f);\n                sign = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              value4 = FUN_080004d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),sign,exponent);\n              return value4;\n            }\n          }\n          result1 = (undefined4)((ulonglong)value7 >> 0x20);\n          value7 = FUN_08000168((int)value7,result1,(int)value7,result1);\n          tempValue1 = value7;\nLAB_08006320:\n          value4 = FUN_08000724((int)value7,(int)((ulonglong)value7 >> 0x20),(int)tempValue1,\n                                (int)((ulonglong)tempValue1 >> 0x20));\n          return value4;\n        }\n      }\n    }\n    else if (value4 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((value1 + 0xc0100000 | sign) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  value4 = FUN_080070a4(&DAT_0800737e);\n  return value4;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_exponent_08006228",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "fraction1",
                "param_4": "fraction2",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "result10",
                "iVar6": "result11",
                "uVar7": "result12",
                "uVar8": "value1",
                "uVar9": "value2",
                "iVar10": "value3",
                "uVar11": "value4",
                "uVar12": "value5",
                "uVar13": "value6",
                "uVar14": "value7",
                "uVar15": "tempValue1",
                "uVar16": "tempValue2",
                "uVar17": "tempValue3",
                "lVar18": "tempValue4",
                "uVar19": "tempValue5",
                "uVar20": "tempValue6",
                "local_70": "specialCase",
                "local_68": "specialCaseResult1",
                "local_64": "specialCaseResult2",
                "local_54": "shiftAmount"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculateFloatingPoint_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  int tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  int tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  int tempVar10;\n  uint tempVar11;\n  undefined8 result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result = FUN_080004d0(input1,input2,input1,input2);\n    result = FUN_0800016c(input1,input2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      result = FUN_08000168(input1,input2,input1,input2);\n      tempVar1 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_08000724((int)result,tempVar1,(int)result,tempVar1);\n      return result;\n    }\n  }\n  tempVar3 = (int)input2 >> 0x14;\n  if (tempVar3 == 0) {\n    while (input2 == 0) {\n      tempVar3 = tempVar3 + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    tempVar2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      tempVar2 = tempVar2 + 1;\n    }\n    tempVar3 = tempVar3 - (tempVar2 - 1);\n    input2 = input2 | input1 >> (0x20 - tempVar2 & 0xff);\n    input1 = input1 << (tempVar2 & 0xff);\n  }\n  tempVar7 = 0;\n  tempVar2 = input2 & 0xfffff | 0x100000;\n  if ((tempVar3 + -0x3ff) * -0x80000000 < 0) {\n    tempVar2 = tempVar2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  tempVar2 = tempVar2 * 2 - ((int)input1 >> 0x1f);\n  tempVar4 = 0x16;\n  tempVar5 = 0;\n  tempVar8 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    tempVar10 = tempVar5 + tempVar8;\n    if (tempVar10 <= (int)tempVar2) {\n      tempVar2 = tempVar2 - tempVar10;\n      tempVar5 = tempVar10 + tempVar8;\n      tempVar7 = tempVar7 + tempVar8;\n    }\n    tempVar4 = tempVar4 + -1;\n    tempVar2 = tempVar2 * 2 - ((int)input1 >> 0x1f);\n    tempVar8 = tempVar8 >> 1;\n    input1 = input1 << 1;\n  } while (tempVar4 != 0);\n  tempVar10 = 0x20;\n  tempVar9 = 0x80000000;\n  tempVar8 = 0;\n  tempVar4 = 0;\n  do {\n    tempVar11 = tempVar9 + tempVar4;\n    tempVar6 = tempVar5;\n    if (((int)tempVar5 < (int)tempVar2) || ((tempVar2 == tempVar5 && (tempVar11 <= input1)))) {\n      tempVar4 = tempVar11 + tempVar9;\n      if (((int)tempVar11 < 0) && (-1 < tempVar4)) {\n        tempVar6 = tempVar5 + 1;\n      }\n      tempVar2 = tempVar2 - tempVar5;\n      if (input1 < tempVar11) {\n        tempVar2 = tempVar2 - 1;\n      }\n      input1 = input1 - tempVar11;\n      tempVar8 = tempVar8 + tempVar9;\n    }\n    tempVar2 = tempVar2 * 2 - ((int)input1 >> 0x1f);\n    tempVar10 = tempVar10 + -1;\n    input1 = input1 << 1;\n    tempVar9 = tempVar9 >> 1;\n    tempVar5 = tempVar6;\n  } while (tempVar10 != 0);\n  if ((input1 | tempVar2) != 0) {\n    if (tempVar8 == 0xffffffff) {\n      tempVar7 = tempVar7 + 1;\n      tempVar8 = 0;\n    }\n    else {\n      tempVar8 = tempVar8 + 1 & 0xfffffffe;\n    }\n  }\n  tempVar8 = tempVar8 >> 1;\n  if (tempVar7 << 0x1f < 0) {\n    tempVar8 = tempVar8 | 0x80000000;\n  }\n  return CONCAT44((tempVar7 >> 1) + 0x3fe00000 + (tempVar3 + -0x3ff >> 1) * 0x100000,tempVar8);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "tempVar3",
                "iVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "iVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "iVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculateResult_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint absInput2;\n  undefined8 resultValue1;\n  undefined8 resultValue2;\n  \n  resultValue1 = CONCAT44(input2,input1);\n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x44100000) {\n    if (absInput2 < 0x3fdc0000) {\n      if (absInput2 < 0x3e200000) {\n        resultValue2 = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = FUN_080009f0((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return resultValue1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      resultValue1 = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)resultValue1 >> 0x20);\n      temp1 = (undefined4)resultValue1;\n      if (absInput2 < 0x3ff30000) {\n        if (absInput2 < 0x3fe60000) {\n          resultValue1 = FUN_0800016c(temp1,temp2,temp1,temp2);\n          resultValue1 = FUN_08000168((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0,0x3ff00000);\n          resultValue2 = FUN_0800016c(temp1,temp2,0,0x40000000);\n          resultValue1 = FUN_08000724((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),(int)resultValue2,\n                               (int)((ulonglong)resultValue2 >> 0x20));\n          result = 0;\n        }\n        else {\n          resultValue1 = FUN_08000168(temp1,temp2,0,0x3ff00000);\n          resultValue2 = FUN_0800016c(temp1,temp2,0,0x3ff00000);\n          resultValue1 = FUN_08000724((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),(int)resultValue2,\n                               (int)((ulonglong)resultValue2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (absInput2 < 0x40038000) {\n        resultValue1 = FUN_08000168(temp1,temp2,0,0x3ff80000);\n        resultValue2 = FUN_080004d0(temp1,temp2,0,0x3ff80000);\n        resultValue2 = FUN_0800016c((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0,0x3ff00000);\n        resultValue1 = FUN_08000724((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),(int)resultValue2,\n                             (int)((ulonglong)resultValue2 >> 0x20));\n        result = 2;\n      }\n      else {\n        resultValue1 = FUN_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)resultValue1 >> 0x20);\n    temp5 = (undefined4)resultValue1;\n    resultValue1 = FUN_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)resultValue1 >> 0x20);\n    temp1 = (undefined4)resultValue1;\n    resultValue1 = FUN_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)resultValue1 >> 0x20);\n    temp2 = (undefined4)resultValue1;\n    resultValue1 = FUN_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    resultValue1 = FUN_0800016c((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0x24760deb,0x3fa97b4b);\n    resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp2,temp4);\n    resultValue1 = FUN_0800016c((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp2,temp4);\n    resultValue1 = FUN_0800016c((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0xc54c206e,0x3fb745cd);\n    resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp2,temp4);\n    resultValue1 = FUN_0800016c((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0x920083ff,0x3fc24924);\n    resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp2,temp4);\n    resultValue1 = FUN_0800016c((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),0x5555550d,0x3fd55555);\n    resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)resultValue1 >> 0x20);\n    resultValue2 = FUN_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    resultValue2 = FUN_08000168((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0x52defd9a,0x3fadde2d);\n    resultValue2 = FUN_080004d0((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),temp2,temp4);\n    resultValue2 = FUN_08000168((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    resultValue2 = FUN_080004d0((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),temp2,temp4);\n    resultValue2 = FUN_08000168((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0xfe231671,0x3fbc71c6);\n    resultValue2 = FUN_080004d0((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),temp2,temp4);\n    resultValue2 = FUN_08000168((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),0x9998ebc4,0x3fc99999);\n    resultValue2 = FUN_080004d0((int)resultValue2,(int)((ulonglong)resultValue2 >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)resultValue2 >> 0x20);\n    if (result == -1) {\n      resultValue1 = FUN_0800016c((int)resultValue1,temp1,(int)resultValue2,temp2);\n      resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp5,temp6);\n      resultValue1 = FUN_08000168(temp5,temp6,(int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20));\n    }\n    else {\n      resultValue1 = FUN_0800016c((int)resultValue1,temp1,(int)resultValue2,temp2);\n      resultValue1 = FUN_080004d0((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp5,temp6);\n      result = result * 8;\n      resultValue1 = FUN_08000168((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      resultValue1 = FUN_08000168((int)resultValue1,(int)((ulonglong)resultValue1 >> 0x20),temp5,temp6);\n      resultValue1 = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)resultValue1,\n                           (int)((ulonglong)resultValue1 >> 0x20));\n      if ((int)input2 < 0) {\n        resultValue1 = CONCAT44((int)((ulonglong)resultValue1 >> 0x20) + -0x80000000,(int)resultValue1);\n      }\n    }\n  }\n  else if ((absInput2 < 0x7ff00001) && ((absInput2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      resultValue1 = 0xbff921fb54442d18;\n    }\n    else {\n      resultValue1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    resultValue1 = FUN_0800016c(input1,input2,input1,input2,input4);\n  }\n  return resultValue1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "absInput2",
                "uVar9": "resultValue1",
                "uVar10": "resultValue2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "sign_extend_08007092",
            "code": "\nuint signExtend_08007092(undefined4 inputFlag,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "sign_extend_08007092",
                "param_1": "inputFlag",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_application_0800709e",
            "code": "\nvoid initializeApplication_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_application_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_value_080070b0",
            "code": "\nundefined8 calculateValue_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 value1;\n  uint newValue1;\n  undefined4 value2;\n  uint newValue2;\n  uint shiftAmount;\n  uint tempValue;\n  undefined8 result;\n  \n  tempValue = (input2 << 1) >> 0x15;\n  shiftAmount = tempValue - 0x3ff;\n  newValue1 = input2;\n  if ((int)shiftAmount < 0x14) {\n    if ((int)shiftAmount < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      newValue1 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      value1 = *(undefined4 *)(&DAT_08007430 + index);\n      value2 = *(undefined4 *)(&DAT_08007434 + index);\n      result = FUN_0800016c(input1,(-newValue1 | newValue1) >> 0xc & 0x80000 | input2 & 0xfffe0000,value1,\n                           value2,input1,input2,input3);\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),value1,value2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    tempValue = 0xfffff >> (shiftAmount & 0xff);\n    if ((input2 & tempValue | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempValue = tempValue >> 1;\n    newValue2 = input2 & tempValue | input1;\n    if (newValue2 != 0) {\n      if (shiftAmount == 0x13) {\n        newValue2 = 0x80000000;\n      }\n      else {\n        newValue2 = 0;\n      }\n      newValue1 = 0x40000 >> (shiftAmount & 0xff) | input2 & ~tempValue;\n    }\n  }\n  else {\n    if (0x33 < (int)shiftAmount) {\n      if (shiftAmount != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = FUN_0800016c();\n      return result;\n    }\n    tempValue = tempValue - 0x413;\n    shiftAmount = 0xffffffff >> (tempValue & 0xff);\n    if ((input1 & shiftAmount) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    shiftAmount = shiftAmount >> 1;\n    newValue2 = input1;\n    if ((input1 & shiftAmount) != 0) {\n      newValue2 = 0x40000000 >> (tempValue & 0xff) | input1 & ~shiftAmount;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  value1 = *(undefined4 *)(&DAT_08007430 + index);\n  value2 = *(undefined4 *)(&DAT_08007434 + index);\n  result = FUN_0800016c(newValue2,newValue1,value1,value2,input1,input2,input3);\n  result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),value1,value2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_value_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "index",
                "uVar2": "value1",
                "uVar3": "newValue1",
                "uVar4": "value2",
                "uVar5": "newValue2",
                "uVar6": "shiftAmount",
                "uVar7": "tempValue",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_floating_point_080071c0",
            "code": "\nundefined8 calculateFloatingPoint_080071c0(uint number1,uint number2,int exponent,undefined4 constant)\n\n{\n  uint shifted;\n  undefined4 result1;\n  int result2;\n  undefined4 result3;\n  uint upperBits;\n  undefined8 combined;\n  \n  combined = CONCAT44(number2,number1);\n  shifted = (number2 << 1) >> 0x15;\n  if (shifted == 0) {\n    if ((number2 & 0x7fffffff | number1) == 0) {\n      return combined;\n    }\n    combined = FUN_080004d0(number1,number2,0,0x43500000);\n    if (-0xc351 < exponent) {\n      shifted = ((uint)((int)((ulonglong)combined >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result1 = 0xc2f8f359;\n    result3 = 0x1a56e1f;\n  }\n  else {\n    if (shifted == 0x7ff) {\n      combined = FUN_0800016c(number1,number2,number1,number2,constant);\n      return combined;\n    }\nLAB_08007210:\n    upperBits = (uint)((ulonglong)combined >> 0x20);\n    result1 = (undefined4)combined;\n    result2 = shifted + exponent;\n    if (result2 < 0x7ff) {\n      if (0 < result2) {\n        return CONCAT44(upperBits & 0x800fffff | result2 * 0x100000,result1);\n      }\n      if (result2 + 0x35 < 0 == SCARRY4(result2,0x35)) {\n        combined = CONCAT44(upperBits & 0x800fffff | (result2 + 0x36) * 0x100000,result1);\n        result1 = 0;\n        result3 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (exponent < 0xc351) {\n        combined = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result1,upperBits);\n        goto LAB_080071ec;\n      }\n    }\n    combined = FUNC_0800729c(0x8800759c,0x7e37e43c,result1,upperBits);\n    result1 = 0x8800759c;\n    result3 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  combined = FUN_080004d0((int)combined,(int)((ulonglong)combined >> 0x20),result1,result3);\n  return combined;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_floating_point_080071c0",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "exponent",
                "param_4": "constant",
                "uVar1": "shifted",
                "uVar2": "result1",
                "iVar3": "result2",
                "uVar4": "result3",
                "uVar5": "upperBits",
                "uVar6": "combined"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "increment_pointer_080072b8",
            "code": "\nvoid incrementPointer_080072b8(int incrementValue)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + incrementValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "increment_pointer_080072b8",
                "param_1": "incrementValue"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 159421,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}