{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_64bit_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64bit_values_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_64bit_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "get_string_length_08000150",
            "code": "\nchar * get_string_length_08000150(char *string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "get_string_length_08000150",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_product_08000168",
            "code": "\nulonglong calculateProduct_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int bitDifference;\n  byte carryBit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int bitShift1;\n  uint result;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  bool isZero;\n  bool isNegative;\n  bool isCarry;\n  \n  temp4 = param_4 ^ 0x80000000;\n  result = param_2 << 1;\n  param_4 = param_4 << 1;\n  isZero = ((param_2 ^ temp4) & 0x7fffffff) == 0;\n  isNegative = isZero && param_1 == param_3;\n  if (!isZero || param_1 != param_3) {\n    isNegative = (result | param_1) == 0;\n  }\n  if (!isNegative) {\n    isNegative = (param_4 | param_3) == 0;\n  }\n  bitShift1 = (int)result >> 0x15;\n  if (!isNegative) {\n    isNegative = bitShift1 == -1;\n  }\n  bitDifference = (int)param_4 >> 0x15;\n  if (!isNegative) {\n    isNegative = bitDifference == -1;\n  }\n  if (isNegative) {\n    if (bitShift1 == -1 || bitDifference == -1) {\n      result = temp4;\n      temp7 = param_3;\n      if (bitShift1 == -1) {\n        result = param_2;\n        temp7 = param_1;\n      }\n      if (bitShift1 != -1 || bitDifference != -1) {\n        param_3 = temp7;\n        temp4 = result;\n      }\n      isNegative = (temp7 | result << 0xc) == 0;\n      if (isNegative) {\n        isNegative = (param_3 | temp4 << 0xc) == 0;\n      }\n      if (isNegative) {\n        isNegative = result == temp4;\n      }\n      if (!isNegative) {\n        result = result | 0x80000;\n      }\n      return CONCAT44(result,temp7);\n    }\n    if (((param_2 ^ temp4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((result | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = temp4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != temp4) {\n      return 0;\n    }\n    if (result >> 0x15 == 0) {\n      isNegative = (param_1 & 0x80000000) != 0;\n      temp4 = param_2 * 2 + (uint)isNegative;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)isNegative)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,param_1 << 1);\n    }\n    if (result < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  result = result >> 0x15;\n  param_4 = param_4 >> 0x15;\n  temp7 = param_4 - result;\n  isNegative = temp7 != 0;\n  if (param_4 < result) {\n    temp7 = -temp7;\n  }\n  temp6 = param_1;\n  temp5 = param_2;\n  if (isNegative && result <= param_4) {\n    result = result + temp7;\n    temp6 = param_3;\n    temp5 = temp4;\n    param_3 = param_1;\n    temp4 = param_2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp5,temp6);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    isNegative = temp6 != 0;\n    temp6 = -temp6;\n    temp2 = -temp2 - (uint)isNegative;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    isNegative = param_3 != 0;\n    param_3 = -param_3;\n    temp5 = -temp5 - (uint)isNegative;\n  }\n  if (result == temp7) {\n    temp5 = temp5 ^ 0x100000;\n    if (result == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp4 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = param_3 << (temp4 & 0xff);\n    param_3 = param_3 >> (temp7 & 0xff);\n    temp1 = temp6 + param_3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp6,param_3) + ((int)temp5 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp8 = temp5 << (-temp7 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp5 = (int)temp5 >> (temp7 - 0x20 & 0xff);\n    temp4 = temp6 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp6,temp5);\n  }\n  param_2 = temp2 & 0x80000000;\n  temp7 = temp2;\n  if ((int)temp2 < 0) {\n    isNegative = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp4;\n    temp4 = -(uint)!isNegative - temp4;\n    temp7 = -(uint)(isNegative <= temp7) - temp2;\n  }\n  if (0xfffff < temp7) {\n    temp6 = result - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carryBit = (byte)temp4;\n      temp4 = (uint)(temp6 != 0) << 0x1f | temp4 >> 1;\n      temp8 = (uint)(carryBit & 1) << 0x1f | temp8 >> 1;\n      temp6 = result;\n      if (0xffbfffff < result * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isNegative = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      isNegative = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp6 * 0x100000 + (uint)CARRY4(temp4,(uint)isNegative) | param_2,\n                    temp4 + isNegative);\n  }\n  isZero = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp6 = temp4 * 2;\n  isNegative = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isZero;\n  temp7 = temp7 * 2 + (uint)(isNegative || CARRY4(temp6,(uint)isZero));\n  temp6 = result - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  result = temp7;\n  if (temp7 == 0) {\n    temp5 = 0;\n    result = temp4;\n  }\n  bitShift1 = LZCOUNT(result);\n  if (temp7 == 0) {\n    bitShift1 = bitShift1 + 0x20;\n  }\n  temp7 = bitShift1 - 0xb;\n  isCarry = SBORROW4(temp7,0x20);\n  temp4 = bitShift1 - 0x2b;\n  isNegative = (int)temp4 < 0;\n  isZero = temp4 == 0;\n  if ((int)temp7 < 0x20) {\n    isCarry = SCARRY4(temp4,0xc);\n    bitShift1 = bitShift1 + -0x1f;\n    isNegative = bitShift1 < 0;\n    isZero = bitShift1 == 0;\n    temp4 = temp7;\n    if (!isZero && isNegative == isCarry) {\n      temp5 = result << (temp7 & 0xff);\n      result = result >> (0xcU - bitShift1 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    temp8 = 0x20 - temp4;\n  }\n  result = result << (temp4 & 0xff);\n  if (isZero || isNegative != isCarry) {\n    result = result | temp5 >> (temp8 & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp7 <= (int)temp6) {\n    return CONCAT44(result + (temp6 - temp7) * 0x100000 | param_2,temp5);\n  }\n  temp4 = ~(temp6 - temp7);\n  if ((int)temp4 < 0x1f) {\n    bitShift1 = temp4 - 0x13;\n    if (bitShift1 != 0 && bitShift1 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - bitShift1) & 0xff) | result << (0xcU - bitShift1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(param_2 | result >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_product_08000168",
                "iVar1": "bitDifference",
                "bVar2": "carryBit",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "bitShift1",
                "uVar9": "result",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "bVar13": "isZero",
                "bVar14": "isNegative",
                "bVar15": "isCarry"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_sum_0800016c",
            "code": "\nulonglong calculate_sum_0800016c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shifted1;\n  byte carry;\n  uint sum;\n  uint temp;\n  uint shifted2;\n  int shift1;\n  uint shifted_num2;\n  uint shifted_num4;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool is_zero;\n  bool condition;\n  bool carry_flag;\n  \n  shifted_num2 = num2 << 1;\n  result1 = num4 << 1;\n  is_zero = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition = is_zero && num1 == num3;\n  if (!is_zero || num1 != num3) {\n    condition = (shifted_num2 | num1) == 0;\n  }\n  if (!condition) {\n    condition = (result1 | num3) == 0;\n  }\n  shift1 = (int)shifted_num2 >> 0x15;\n  if (!condition) {\n    condition = shift1 == -1;\n  }\n  shifted1 = (int)result1 >> 0x15;\n  if (!condition) {\n    condition = shifted1 == -1;\n  }\n  if (condition) {\n    if (shift1 == -1 || shifted1 == -1) {\n      result1 = num4;\n      shifted_num2 = num3;\n      if (shift1 == -1) {\n        result1 = num2;\n        shifted_num2 = num1;\n      }\n      if (shift1 != -1 || shifted1 != -1) {\n        num3 = shifted_num2;\n        num4 = result1;\n      }\n      condition = (shifted_num2 | result1 << 0xc) == 0;\n      if (condition) {\n        condition = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = result1 == num4;\n      }\n      if (!condition) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,shifted_num2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shifted_num2 >> 0x15 == 0) {\n      condition = (num1 & 0x80000000) != 0;\n      result1 = num2 * 2 + (uint)condition;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,num1 << 1);\n    }\n    if (shifted_num2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num2 = shifted_num2 >> 0x15;\n  result1 = result1 >> 0x15;\n  result2 = result1 - shifted_num2;\n  condition = result2 != 0;\n  if (result1 < shifted_num2) {\n    result2 = -result2;\n  }\n  shifted_num4 = num1;\n  shifted2 = num2;\n  if (condition && shifted_num2 <= result1) {\n    shifted_num2 = shifted_num2 + result2;\n    shifted_num4 = num3;\n    shifted2 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(shifted2,shifted_num4);\n  }\n  result1 = shifted2 & 0xfffff | 0x100000;\n  if ((shifted2 & 0x80000000) != 0) {\n    condition = shifted_num4 != 0;\n    shifted_num4 = -shifted_num4;\n    result1 = -result1 - (uint)condition;\n  }\n  shifted2 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition = num3 != 0;\n    num3 = -num3;\n    shifted2 = -shifted2 - (uint)condition;\n  }\n  if (shifted_num2 == result2) {\n    shifted2 = shifted2 ^ 0x100000;\n    if (shifted_num2 == 0) {\n      result1 = result1 ^ 0x100000;\n      shifted_num2 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  temp2 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    temp1 = num3 << (temp2 & 0xff);\n    num3 = num3 >> (result2 & 0xff);\n    sum = shifted_num4 + num3;\n    temp = shifted2 << (temp2 & 0xff);\n    temp2 = sum + temp;\n    result1 = result1 + CARRY4(shifted_num4,num3) + ((int)shifted2 >> (result2 & 0xff)) +\n            (uint)CARRY4(sum,temp);\n  }\n  else {\n    temp1 = shifted2 << (-result2 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp1 = temp1 | 2;\n    }\n    shifted2 = (int)shifted2 >> (result2 - 0x20 & 0xff);\n    temp2 = shifted_num4 + shifted2;\n    result1 = result1 + ((int)shifted2 >> 0x1f) + (uint)CARRY4(shifted_num4,shifted2);\n  }\n  num2 = result1 & 0x80000000;\n  result2 = result1;\n  if ((int)result1 < 0) {\n    condition = temp1 == 0;\n    temp1 = -temp1;\n    result2 = -temp2;\n    temp2 = -(uint)!condition - temp2;\n    result2 = -(uint)(condition <= result2) - result1;\n  }\n  if (0xfffff < result2) {\n    shifted_num4 = shifted_num2 - 1;\n    if (0x1fffff < result2) {\n      result1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)temp2;\n      temp2 = (uint)(result1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carry & 1) << 0x1f | temp1 >> 1;\n      shifted_num4 = shifted_num2;\n      if (0xffbfffff < shifted_num2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      condition = (temp2 & 1) != 0;\n    }\n    return CONCAT44(result2 + shifted_num4 * 0x100000 + (uint)CARRY4(temp2,(uint)condition) | num2,\n                    temp2 + condition);\n  }\n  is_zero = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  shifted_num4 = temp2 * 2;\n  condition = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)is_zero;\n  result2 = result2 * 2 + (uint)(condition || CARRY4(shifted_num4,(uint)is_zero));\n  shifted_num4 = shifted_num2 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_08000278;\n  shifted2 = temp2;\n  shifted_num2 = result2;\n  if (result2 == 0) {\n    shifted2 = 0;\n    shifted_num2 = temp2;\n  }\n  shift1 = LZCOUNT(shifted_num2);\n  if (result2 == 0) {\n    shift1 = shift1 + 0x20;\n  }\n  temp2 = shift1 - 0xb;\n  carry_flag = SBORROW4(temp2,0x20);\n  result2 = shift1 - 0x2b;\n  condition = (int)result2 < 0;\n  is_zero = result2 == 0;\n  if ((int)temp2 < 0x20) {\n    carry_flag = SCARRY4(result2,0xc);\n    shift1 = shift1 + -0x1f;\n    condition = shift1 < 0;\n    is_zero = shift1 == 0;\n    result2 = temp2;\n    if (!is_zero && condition == carry_flag) {\n      shifted2 = shifted_num2 << (temp2 & 0xff);\n      shifted_num2 = shifted_num2 >> (0xcU - shift1 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || condition != carry_flag) {\n    temp1 = 0x20 - result2;\n  }\n  shifted_num2 = shifted_num2 << (result2 & 0xff);\n  if (is_zero || condition != carry_flag) {\n    shifted_num2 = shifted_num2 | shifted2 >> (temp1 & 0xff);\n  }\n  if (is_zero || condition != carry_flag) {\n    shifted2 = shifted2 << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp2 <= (int)shifted_num4) {\n    return CONCAT44(shifted_num2 + (shifted_num4 - temp2) * 0x100000 | num2,shifted2);\n  }\n  result2 = ~(shifted_num4 - temp2);\n  if ((int)result2 < 0x1f) {\n    shift1 = result2 - 0x13;\n    if (shift1 != 0 && shift1 < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,shifted2 >> (0x20 - (0xcU - shift1) & 0xff) | shifted_num2 << (0xcU - shift1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(num2 | shifted_num2 >> (result2 & 0xff),\n                    shifted2 >> (result2 & 0xff) | shifted_num2 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,shifted_num2 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_sum_0800016c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shifted1",
                "bVar2": "carry",
                "uVar3": "sum",
                "uVar4": "temp",
                "uVar5": "shifted2",
                "iVar6": "shift1",
                "uVar7": "shifted_num2",
                "uVar8": "shifted_num4",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "is_zero",
                "bVar14": "condition",
                "bVar15": "carry_flag"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_merge_08000404",
            "code": "\nulonglong shiftAndMerge_08000404(uint input)\n\n{\n  uint shiftedInput;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint threshold;\n  uint sign;\n  uint mask;\n  bool isNegative;\n  bool isZero;\n  bool isThresholdOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign = input & 0x80000000;\n  absInput = input;\n  if ((int)sign < 0) {\n    absInput = -input;\n  }\n  shiftedInput = 0;\n  leadingZeros = LZCOUNT(absInput);\n  threshold = leadingZeros + 0x15;\n  isThresholdOverflow = SBORROW4(threshold,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (threshold < 0x20) {\n    isThresholdOverflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = threshold;\n    if (!isZero && isThresholdOverflow == false) {\n      shiftedInput = absInput << threshold;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isThresholdOverflow) {\n    mask = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != isThresholdOverflow) {\n    absInput = absInput | 0U >> (mask & 0xff);\n  }\n  if (isZero || isNegative != isThresholdOverflow) {\n    shiftedInput = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (threshold < 0x433) {\n    return CONCAT44(absInput + (0x432 - threshold) * 0x100000 | sign,shiftedInput);\n  }\n  shiftAmount = ~(0x432 - threshold);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(sign | absInput >> (shiftAmount & 0xff),\n                    shiftedInput >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,shiftedInput >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_merge_08000404",
                "param_1": "input",
                "uVar1": "shiftedInput",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "threshold",
                "uVar6": "sign",
                "in_r12": "mask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isThresholdOverflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_binary_operations_08000428",
            "code": "\nulonglong reverseBinaryOperations_08000428(uint inputValue,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bit31;\n  uint tempVar1;\n  uint result1;\n  uint uVar4;\n  uint bitwiseShift;\n  int bitCount;\n  uint tempVar2;\n  uint tempVar3;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  bitwiseShift = inputValue << 1;\n  flag2 = bitwiseShift == 0;\n  bit31 = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  uVar4 = (uint)((int)bitwiseShift >> 3) >> 1;\n  result1 = bit31 | uVar4;\n  inputValue = inputValue << 0x1d;\n  if (!flag2) {\n    param4 = bitwiseShift & 0xff000000;\n    flag2 = param4 == 0;\n  }\n  if (!flag2) {\n    flag2 = param4 == 0xff000000;\n  }\n  if (!flag2) {\n    return CONCAT44(result1,inputValue) ^ 0x3800000000000000;\n  }\n  if (bitwiseShift == 0 || param4 == 0xff000000) {\n    return CONCAT44(result1,inputValue);\n  }\n  tempVar1 = inputValue;\n  bitwiseShift = uVar4;\n  if (uVar4 == 0) {\n    tempVar1 = 0;\n    bitwiseShift = inputValue;\n  }\n  bitCount = LZCOUNT(bitwiseShift);\n  if (uVar4 == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  tempVar2 = bitCount - 0xb;\n  flag3 = SBORROW4(tempVar2,0x20);\n  uVar4 = bitCount - 0x2b;\n  flag2 = (int)uVar4 < 0;\n  flag1 = uVar4 == 0;\n  if ((int)tempVar2 < 0x20) {\n    flag3 = SCARRY4(uVar4,0xc);\n    bitCount = bitCount + -0x1f;\n    flag2 = bitCount < 0;\n    flag1 = bitCount == 0;\n    uVar4 = tempVar2;\n    if (!flag1 && flag2 == flag3) {\n      tempVar1 = bitwiseShift << (tempVar2 & 0xff);\n      bitwiseShift = bitwiseShift >> (0xcU - bitCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    tempVar3 = 0x20 - uVar4;\n  }\n  bitwiseShift = bitwiseShift << (uVar4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    bitwiseShift = bitwiseShift | tempVar1 >> (tempVar3 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    tempVar1 = tempVar1 << (uVar4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)tempVar2 < 0x381) {\n    return CONCAT44(bitwiseShift + (0x380 - tempVar2) * 0x100000 | bit31,tempVar1);\n  }\n  uVar4 = ~(0x380 - tempVar2);\n  if ((int)uVar4 < 0x1f) {\n    bitCount = uVar4 - 0x13;\n    if (bitCount != 0 && bitCount < 0 == SCARRY4(uVar4 - 0x1f,0xc)) {\n      return CONCAT44(result1,tempVar1 >> (0x20 - (0xcU - bitCount) & 0xff) | bitwiseShift << (0xcU - bitCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar4 = uVar4 + 1;\n    return CONCAT44(bit31 | bitwiseShift >> (uVar4 & 0xff),\n                    tempVar1 >> (uVar4 & 0xff) | bitwiseShift << (0x20 - uVar4 & 0xff));\n  }\n  return CONCAT44(result1,bitwiseShift >> (uVar4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_binary_operations_08000428",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bit31",
                "uVar2": "tempVar1",
                "uVar3": "result1",
                "uVar5": "bitwiseShift",
                "iVar6": "bitCount",
                "uVar7": "tempVar2",
                "in_r12": "tempVar3",
                "bVar8": "flag1",
                "bVar9": "flag2",
                "bVar10": "flag3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_value_080004d0",
            "code": "\nulonglong calculate_value_080004d0(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint unaff_r5;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong masked_value;\n  \n  masked_value = CONCAT44(value2,value1);\n  temp5 = 0x7ff;\n  temp2 = value2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    unaff_r5 = value4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    masked_value = calculate_masked_value_080006ac();\n  }\n  temp1 = (uint)(masked_value >> 0x20);\n  temp3 = temp2 + unaff_r5;\n  temp2 = temp1 ^ value4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  value4 = value4 & ~(temp5 << 0x15);\n  flag1 = ((uint)masked_value | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (value3 | value4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  value4 = value4 | 0x100000;\n  if (flag1) {\n    value3 = (uint)masked_value | value3;\n    value4 = (temp2 & 0x80000000 | temp1) ^ value4;\n    temp2 = temp5 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp5,temp4);\n      temp1 = temp5 - temp4;\n      flag1 = temp5 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      value4 = value4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(value4,value3);\n    }\n    value4 = value4 | 0x100000;\n    temp5 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (masked_value & 0xffffffff) * (ulonglong)value3;\n    masked_value = (masked_value & 0xffffffff) * (ulonglong)value4 +\n             (ulonglong)temp1 * (ulonglong)value3 + (result1 >> 0x20);\n    temp6 = (uint)masked_value;\n    result2 = (ulonglong)temp1 * (ulonglong)value4 + (masked_value >> 0x20);\n    temp5 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp6 = temp6 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp6 & 0x80000000) != 0;\n      temp6 = temp6 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)flag1)),\n                       temp5 * 2 + (uint)flag1);\n    }\n    value4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    value3 = (uint)result2 << 0xb | temp6 >> 0x15;\n    temp5 = temp6 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        flag1 = (temp6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value4 + temp4 * 0x100000 + (uint)CARRY4(value3,(uint)flag1),value3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    value3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    value4 = value4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(value4,value3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = value3 >> (temp1 & 0xff) | value4 << (0x20 - temp1 & 0xff);\n    temp2 = (value4 >> (temp1 & 0xff) & ~((value4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp5 | value3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(value4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp6 = value3 << (temp4 + 0x20 & 0xff);\n    temp1 = value3 >> (temp2 & 0xff) | value4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp6 >> 0x1f);\n    if ((temp5 | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44((value4 & 0x80000000) +\n                    ((value4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp6 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = value3 << (temp2 & 0xff);\n  temp2 = value3 >> (0x20 - temp2 & 0xff) | value4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp5 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((value4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_value_080004d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "masked_value"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_masked_value_080006ac",
            "code": "\nulonglong calculate_masked_value_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_masked_value_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 input1,uint input2,uint param3,uint param4)\n\n{\n  uint bitwiseOp1;\n  uint bitwiseOp2;\n  uint bitwiseOp3;\n  uint bitwiseOp4;\n  uint bitwiseOp5;\n  uint bitwiseOp6;\n  uint bitwiseOp7;\n  int difference;\n  uint opResult;\n  uint shiftedOp4;\n  uint shiftedOp1;\n  uint shiftedOp2;\n  uint shiftedOp3;\n  uint constant;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  constant = 0x7ff;\n  bitwiseOp7 = input2 >> 0x14 & 0x7ff;\n  bool1 = bitwiseOp7 == 0;\n  if (!bool1) {\n    shiftedOp4 = param4 >> 0x14 & 0x7ff;\n    bool1 = shiftedOp4 == 0;\n  }\n  if (!bool1) {\n    bool1 = bitwiseOp7 == 0x7ff;\n  }\n  if (!bool1) {\n    bool1 = shiftedOp4 == 0x7ff;\n  }\n  if (bool1) {\n    result = calculation_with_bitwise_operations_08000892();\n  }\n  opResult = (uint)((ulonglong)result >> 0x20);\n  shiftedOp2 = (uint)result;\n  difference = bitwiseOp7 - shiftedOp4;\n  if ((param3 | param4 << 0xc) == 0) {\n    bitwiseOp7 = (opResult ^ param4) & 0x80000000 | opResult & 0xfffff;\n    bool3 = SCARRY4(difference,constant >> 1);\n    opResult = difference + (constant >> 1);\n    bool1 = (int)opResult < 0;\n    bool2 = opResult == 0;\n    if (!bool2 && bool1 == bool3) {\n      bool3 = SBORROW4(constant,opResult);\n      bool1 = (int)(constant - opResult) < 0;\n      bool2 = constant == opResult;\n    }\n    if (!bool2 && bool1 == bool3) {\n      bitwiseOp7 = bitwiseOp7 | opResult * 0x100000;\n    }\n    if (!bool2 && bool1 == bool3) {\n      return CONCAT44(bitwiseOp7,shiftedOp2);\n    }\n    bitwiseOp7 = bitwiseOp7 | 0x100000;\n    constant = 0;\n    bool2 = SBORROW4(opResult,1);\n    opResult = opResult - 1;\n    bool1 = opResult == 0;\n    bitwiseOp3 = opResult;\n  }\n  else {\n    bitwiseOp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    constant = param3 << 8;\n    shiftedOp1 = (opResult << 0xc) >> 4 | 0x10000000 | shiftedOp2 >> 0x18;\n    shiftedOp2 = shiftedOp2 * 0x100;\n    bitwiseOp7 = (opResult ^ param4) & 0x80000000;\n    bool1 = bitwiseOp3 <= shiftedOp1;\n    if (shiftedOp1 == bitwiseOp3) {\n      bool1 = constant <= shiftedOp2;\n    }\n    difference = difference + (uint)bool1;\n    opResult = difference + 0x3fd;\n    if (bool1 == false) {\n      bitwiseOp3 = bitwiseOp3 >> 1;\n      constant = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | constant >> 1;\n    }\n    shiftedOp3 = shiftedOp2 - constant;\n    shiftedOp1 = (shiftedOp1 - bitwiseOp3) - (uint)(shiftedOp2 < constant);\n    bitwiseOp4 = bitwiseOp3 >> 1;\n    bitwiseOp1 = (uint)((bitwiseOp3 & 1) != 0) << 0x1f | constant >> 1;\n    shiftedOp2 = 0x100000;\n    bitwiseOp3 = 0x80000;\n    while( true ) {\n      bool1 = bitwiseOp1 <= shiftedOp3;\n      if (bitwiseOp4 < shiftedOp1 || shiftedOp1 - bitwiseOp4 < (uint)bool1) {\n        shiftedOp3 = shiftedOp3 - bitwiseOp1;\n        shiftedOp2 = shiftedOp2 | bitwiseOp3;\n        shiftedOp1 = (shiftedOp1 - bitwiseOp4) - (uint)!bool1;\n      }\n      bitwiseOp5 = bitwiseOp4 >> 1;\n      bitwiseOp1 = (uint)((bitwiseOp4 & 1) != 0) << 0x1f | bitwiseOp1 >> 1;\n      bool2 = bitwiseOp1 <= shiftedOp3;\n      bool1 = shiftedOp1 - bitwiseOp5 < (uint)bool2;\n      constant = shiftedOp1;\n      if (bitwiseOp5 < shiftedOp1 || bool1) {\n        shiftedOp3 = shiftedOp3 - bitwiseOp1;\n        constant = (shiftedOp1 - bitwiseOp5) - (uint)!bool2;\n      }\n      if (bitwiseOp5 < shiftedOp1 || bool1) {\n        shiftedOp2 = shiftedOp2 | bitwiseOp3 >> 1;\n      }\n      shiftedOp1 = bitwiseOp4 >> 2;\n      bitwiseOp2 = (uint)((bitwiseOp5 & 1) != 0) << 0x1f | bitwiseOp1 >> 1;\n      bool2 = bitwiseOp2 <= shiftedOp3;\n      bool1 = constant - shiftedOp1 < (uint)bool2;\n      bitwiseOp5 = constant;\n      if (shiftedOp1 < constant || bool1) {\n        shiftedOp3 = shiftedOp3 - bitwiseOp2;\n        bitwiseOp5 = (constant - shiftedOp1) - (uint)!bool2;\n      }\n      if (shiftedOp1 < constant || bool1) {\n        shiftedOp2 = shiftedOp2 | bitwiseOp3 >> 2;\n      }\n      bitwiseOp6 = bitwiseOp4 >> 3;\n      bitwiseOp1 = (uint)((shiftedOp1 & 1) != 0) << 0x1f | bitwiseOp2 >> 1;\n      bool2 = bitwiseOp1 <= shiftedOp3;\n      bool1 = bitwiseOp5 - bitwiseOp6 < (uint)bool2;\n      shiftedOp1 = bitwiseOp5;\n      if (bitwiseOp6 < bitwiseOp5 || bool1) {\n        shiftedOp3 = shiftedOp3 - bitwiseOp1;\n        shiftedOp1 = (bitwiseOp5 - bitwiseOp6) - (uint)!bool2;\n      }\n      if (bitwiseOp6 < bitwiseOp5 || bool1) {\n        shiftedOp2 = shiftedOp2 | bitwiseOp3 >> 3;\n      }\n      constant = shiftedOp1 | shiftedOp3;\n      if (constant == 0) break;\n      shiftedOp1 = shiftedOp1 << 4 | shiftedOp3 >> 0x1c;\n      shiftedOp3 = shiftedOp3 << 4;\n      bitwiseOp4 = bitwiseOp4 & 0xfffffff8 | bitwiseOp1 >> 0x1d;\n      bitwiseOp1 = (bitwiseOp2 >> 1) << 3;\n      bitwiseOp3 = bitwiseOp3 >> 4;\n      if (bitwiseOp3 == 0) {\n        bitwiseOp6 = bitwiseOp4;\n        if ((bitwiseOp7 & 0x100000) != 0) goto LAB_08000842;\n        bitwiseOp7 = bitwiseOp7 | shiftedOp2;\n        shiftedOp2 = 0;\n        bitwiseOp3 = 0x80000000;\n      }\n    }\n    if ((bitwiseOp7 & 0x100000) == 0) {\n      bitwiseOp7 = bitwiseOp7 | shiftedOp2;\n      shiftedOp2 = 0;\n    }\nLAB_08000842:\n    bool3 = 0xfc < opResult;\n    bool2 = SBORROW4(opResult,0xfd);\n    bitwiseOp4 = difference + 0x300;\n    bool1 = bitwiseOp4 == 0;\n    bitwiseOp3 = bitwiseOp4;\n    if (bool3 && !bool1) {\n      bool3 = 0x6ff < bitwiseOp4;\n      bool2 = SBORROW4(bitwiseOp4,0x700);\n      bitwiseOp3 = difference - 0x400;\n      bool1 = bitwiseOp4 == 0x700;\n    }\n    if (!bool3 || bool1) {\n      bool1 = bitwiseOp6 <= shiftedOp1;\n      if (shiftedOp1 == bitwiseOp6) {\n        bool1 = bitwiseOp1 <= shiftedOp3;\n      }\n      if (shiftedOp1 == bitwiseOp6 && shiftedOp3 == bitwiseOp1) {\n        bool1 = (shiftedOp2 & 1) != 0;\n      }\n      return CONCAT44(bitwiseOp7 + opResult * 0x100000 + (uint)CARRY4(shiftedOp2,(uint)bool1),shiftedOp2 + bool1);\n    }\n  }\n  if (!bool1 && (int)bitwiseOp3 < 0 == bool2) {\n    return (ulonglong)(bitwiseOp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bool3 = SCARRY4(opResult,0x36);\n  bool1 = (int)(opResult + 0x36) < 0;\n  bool2 = opResult == 0xffffffca;\n  if (bool2 || bool1 != bool3) {\n    shiftedOp2 = 0;\n  }\n  if (bool2 || bool1 != bool3) {\n    bitwiseOp7 = bitwiseOp7 & 0x80000000;\n  }\n  if (bool2 || bool1 != bool3) {\n    return CONCAT44(bitwiseOp7,shiftedOp2);\n  }\n  bitwiseOp3 = -opResult;\n  shiftedOp1 = bitwiseOp3 - 0x20;\n  if (0x1f < (int)bitwiseOp3) {\n    bitwiseOp3 = shiftedOp2 >> (shiftedOp1 & 0xff) | bitwiseOp7 << (0x20 - shiftedOp1 & 0xff);\n    opResult = (bitwiseOp7 >> (shiftedOp1 & 0xff) & ~((bitwiseOp7 & 0x80000000) >> (shiftedOp1 & 0xff))) -\n            ((int)bitwiseOp3 >> 0x1f);\n    if ((constant | shiftedOp2 << (0x20 - shiftedOp1 & 0xff) | bitwiseOp3 << 1) == 0) {\n      opResult = opResult & ~(bitwiseOp3 >> 0x1f);\n    }\n    return CONCAT44(bitwiseOp7,opResult) & 0x80000000ffffffff;\n  }\n  difference = bitwiseOp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(shiftedOp1,0xc)) {\n    opResult = 0xc - difference;\n    bitwiseOp3 = shiftedOp2 << (opResult & 0xff);\n    shiftedOp2 = shiftedOp2 >> (0x20 - opResult & 0xff) | bitwiseOp7 << (opResult & 0xff);\n    opResult = shiftedOp2 + -((int)bitwiseOp3 >> 0x1f);\n    if ((constant | bitwiseOp3 << 1) == 0) {\n      opResult = opResult & ~(bitwiseOp3 >> 0x1f);\n    }\n    return CONCAT44((bitwiseOp7 & 0x80000000) + (uint)CARRY4(shiftedOp2,-((int)bitwiseOp3 >> 0x1f)),opResult);\n  }\n  shiftedOp1 = shiftedOp2 << (opResult + 0x20 & 0xff);\n  shiftedOp2 = shiftedOp2 >> (bitwiseOp3 & 0xff) | bitwiseOp7 << (opResult + 0x20 & 0xff);\n  opResult = shiftedOp2 + -((int)shiftedOp1 >> 0x1f);\n  if ((constant | shiftedOp1 << 1) == 0) {\n    opResult = opResult & ~(shiftedOp1 >> 0x1f);\n  }\n  return CONCAT44((bitwiseOp7 & 0x80000000) +\n                  ((bitwiseOp7 & 0x7fffffff) >> (bitwiseOp3 & 0xff)) +\n                  (uint)CARRY4(shiftedOp2,-((int)shiftedOp1 >> 0x1f)),opResult);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitwiseOp1",
                "uVar2": "bitwiseOp2",
                "uVar3": "bitwiseOp3",
                "uVar4": "bitwiseOp4",
                "uVar5": "bitwiseOp5",
                "uVar6": "bitwiseOp6",
                "uVar7": "bitwiseOp7",
                "iVar8": "difference",
                "uVar9": "opResult",
                "unaff_r5": "shiftedOp4",
                "uVar10": "shiftedOp1",
                "uVar11": "shiftedOp2",
                "uVar12": "shiftedOp3",
                "uVar13": "constant",
                "bVar14": "bool1",
                "bVar15": "bool2",
                "bVar16": "bool3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculation_with_bitwise_operations_08000892",
            "code": "\nulonglong calculation_with_bitwise_operations_08000892(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  bool flag;\n  \n  temp_var_3 = temp_var_5 & input_4 >> 0x14;\n  temp_var_4 = input_2;\n  if (temp_var_2 != temp_var_5 || temp_var_3 != temp_var_5) {\n    if (temp_var_2 == temp_var_5) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, temp_var_4 = input_4, temp_var_3 != temp_var_5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_var_3 == temp_var_5) {\n      input_1 = input_3;\n      temp_var_4 = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input_1 | input_2 << 1) == 0;\n      if (!flag) {\n        flag = (input_3 | input_4 << 1) == 0;\n      }\n      if (!flag) {\n        if (temp_var_2 == 0) {\n          temp_var_4 = input_2 & 0x80000000;\n          do {\n            temp_var_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_var_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp_var_4;\n          if (temp_var_3 != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          temp_var_4 = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_var_4 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto LAB_08000704;\n      if ((input_3 | input_4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp_var_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculation_with_bitwise_operations_08000892",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_var_1",
                "unaff_r4": "temp_var_2",
                "uVar2": "temp_var_3",
                "uVar3": "temp_var_4",
                "in_r12": "temp_var_5",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_params_equality_08000904",
            "code": "\nuint check_params_equality_08000904(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint xor_result;\n  bool params_zero;\n  bool result_condition;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  params_zero = (param_1 | param_2 << 1) == 0;\n  if (params_zero) {\n    params_zero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!params_zero) {\n    params_zero = param_2 == param_4;\n  }\n  if (params_zero) {\n    params_zero = param_1 == param_3;\n  }\n  if (!params_zero) {\n    xor_result = param_2 ^ param_4;\n    params_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      params_zero = param_2 == param_4;\n    }\n    result_condition = -1 < (int)xor_result && param_4 <= param_2;\n    if (params_zero) {\n      result_condition = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!result_condition) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_params_equality_08000904",
                "uVar1": "xor_result",
                "bVar2": "params_zero",
                "bVar3": "result_condition"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "validate_and_process_params_08000980",
            "code": "\nvoid validate_and_process_params_08000980(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  validate_params_08000990(input_param3,input_param4,input_param1,input_param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "validate_and_process_params_08000980",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "validate_params_08000990",
            "code": "\nundefined4 validate_params_08000990(undefined4 input_param)\n\n{\n  validate_equality();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "validate_params_08000990",
                "param_1": "input_param",
                "check_params_equality_08000904": "validate_equality"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "validate_and_check_input_080009a0",
            "code": "\nbool validate_and_check_input_080009a0(void)\n\n{\n  char is_valid_input;\n  \n  validate_params_08000990();\n  return is_valid_input != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "validate_and_check_input_080009a0",
                "in_ZR": "is_valid_input"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_cy_null_080009b4",
            "code": "\nbool is_CyNull_080009b4(void)\n\n{\n  char input_cy;\n  \n  validate_params_08000990();\n  return input_cy == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_cy_null_080009b4",
                "in_CY": "input_cy"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "validate_and_combine_flags_080009c8",
            "code": "\nbool validate_and_combine_flags_080009c8(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  validate_params_08000990();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "validate_and_combine_flags_080009c8",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_params_valid_080009f0",
            "code": "\nbool check_if_params_valid_080009f0(void)\n\n{\n  char input_char;\n  \n  validate_and_process_params_08000980();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_params_valid_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 checkParameters_08000a04(uint inputValue1,int inputValue2,uint inputValue3,int inputValue4)\n\n{\n  if ((((inputValue2 << 1) >> 0x15 != -1) || ((inputValue1 | inputValue2 << 0xc) == 0)) &&\n     (((inputValue4 << 1) >> 0x15 != -1 || ((inputValue3 | inputValue4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_float_bits_08000a30",
            "code": "\nuint calculateFloatBits_08000a30(uint float_value,uint float_value_sign)\n\n{\n  uint result;\n  uint double_param_2;\n  uint new_value;\n  uint tmp_value;\n  bool is_zero;\n  bool is_less_than_0x70000000;\n  \n  double_param_2 = float_value_sign * 2;\n  is_less_than_0x70000000 = double_param_2 < 0x70000000;\n  new_value = double_param_2 + 0x90000000;\n  result = new_value;\n  if (!is_less_than_0x70000000) {\n    tmp_value = double_param_2 + 0x8fe00000;\n    result = tmp_value;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_0x70000000 && new_value >= 0x200000) {\n    is_zero = tmp_value == 0x1fc00000;\n  }\n  if (((is_less_than_0x70000000 || new_value < 0x200000) || 0x1fc00000 < tmp_value) || is_zero) {\n    if ((float_value_sign & 0x40000000) != 0) {\n      if (((int)double_param_2 >> 0x15 == -1) && ((float_value | float_value_sign << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return float_value_sign & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(double_param_2 + 0x92e00000) < 0 != SCARRY(new_value,0x2e00000)) {\n      return float_value_sign & 0x80000000;\n    }\n    double_param_2 = 0x18 - (double_param_2 + 0x92e00000 >> 0x15);\n    result = float_value >> (double_param_2 & 0xff);\n    if (float_value << (0x20 - double_param_2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    new_value = float_value_sign & 0x1fffff | 0x100000;\n    float_value = result | new_value << (0x20 - double_param_2 & 0xff);\n    new_value = (new_value >> (double_param_2 & 0xff)) << 1;\n  }\n  result = (float_value_sign & 0x80000000 | float_value >> 0x1d) + new_value * 4 + (uint)(0x7fffffff < float_value * 8);\n  if (float_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "float_value",
                "param_2": "float_value_sign",
                "uVar1": "result",
                "uVar2": "double_param_2",
                "uVar3": "new_value",
                "in_r12": "tmp_value",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_0x70000000",
                "SCARRY4": "SCARRY"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculateFloatingPoint_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint temp1;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool isConditionMet;\n  \n  temp1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  isConditionMet = result1 == 0;\n  if (!isConditionMet) {\n    input4 = input2 << 1;\n    isConditionMet = input4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = result1 == input4;\n  }\n  shiftAmount1 = (int)result1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftAmount1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)input4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      result1 = temp1;\n      if (shiftAmount1 == -1) {\n        result1 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        temp1 = result1;\n      }\n      isConditionMet = (result1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (temp1 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = result1 == temp1;\n      }\n      if (!isConditionMet) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  isConditionMet = difference != 0;\n  result2 = result1;\n  if (isConditionMet && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (isConditionMet && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (isConditionMet && result1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (isConditionMet && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    isConditionMet = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)isConditionMet;\n  }\n  if (result1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result1 = result1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (temp1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < result1) {\n      temp1 = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08000c12;\n    }\n  }\n  result1 = result1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "float_operation_08000adc",
            "code": "\nuint floatOperation_08000adc(uint input1,uint input2,undefined4 option,uint flags)\n\n{\n  int shiftAmount;\n  int shiftAmount2;\n  uint absInput1;\n  uint absResult;\n  uint loopCount;\n  uint difference;\n  bool isZero;\n  \n  absResult = input1 << 1;\n  isZero = absResult == 0;\n  if (!isZero) {\n    flags = input2 << 1;\n    isZero = flags == 0;\n  }\n  if (!isZero) {\n    isZero = absResult == flags;\n  }\n  shiftAmount = (int)absResult >> 0x18;\n  if (!isZero) {\n    isZero = shiftAmount == -1;\n  }\n  if (!isZero) {\n    isZero = (int)flags >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount == -1 || shiftAmount2 == -1) {\n      absResult = input2;\n      if (shiftAmount == -1) {\n        absResult = input1;\n      }\n      if (shiftAmount != -1 || shiftAmount2 != -1) {\n        input2 = absResult;\n      }\n      isZero = (absResult & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = absResult == input2;\n      }\n      if (!isZero) {\n        absResult = absResult | 0x400000;\n      }\n      return absResult;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (absResult == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((absResult & 0xff000000) == 0) {\n      absResult = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        absResult = absResult | 0x80000000;\n      }\n      return absResult;\n    }\n    if (absResult < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  absResult = absResult >> 0x18;\n  flags = flags >> 0x18;\n  difference = flags - absResult;\n  isZero = difference != 0;\n  loopCount = absResult;\n  if (isZero && absResult <= flags) {\n    loopCount = absResult + difference;\n  }\n  if (isZero && absResult <= flags) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && absResult <= flags) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && absResult <= flags) {\n    input2 = input2 ^ input1;\n  }\n  if (flags < absResult) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  absResult = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    absResult = -absResult;\n  }\n  absInput1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    absInput1 = -absInput1;\n  }\n  if (loopCount == difference) {\n    absInput1 = absInput1 ^ 0x800000;\n    if (loopCount == 0) {\n      absResult = absResult ^ 0x800000;\n      loopCount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  absResult = absResult + ((int)absInput1 >> (difference & 0xff));\n  absInput1 = absInput1 << (0x20 - difference & 0xff);\n  input1 = absResult & 0x80000000;\n  if ((int)absResult < 0) {\n    isZero = absInput1 != 0;\n    absInput1 = -absInput1;\n    absResult = -absResult - (uint)isZero;\n  }\n  if (absResult < 0x800000) {\n    difference = absInput1 & 0x80000000;\n    absInput1 = absInput1 << 1;\n    absResult = absResult * 2 + (uint)(difference != 0);\n    difference = loopCount - 2;\n    if ((absResult & 0x800000) == 0) {\n      loopCount = leadingZeroCount(absResult) - 8;\n      absResult = absResult << (loopCount & 0xff);\n      if ((int)difference < (int)loopCount) {\n        absResult = absResult >> (-(difference - loopCount) & 0xff);\n      }\n      else {\n        absResult = absResult + (difference - loopCount) * 0x800000;\n      }\n      return absResult | input1;\n    }\n  }\n  else {\n    difference = loopCount - 1;\n    if (0xffffff < absResult) {\n      difference = absResult & 1;\n      absResult = absResult >> 1;\n      absInput1 = (uint)(difference != 0) << 0x1f | absInput1 >> 1;\n      difference = loopCount;\n      if (0xfd < loopCount) goto LAB_08000c12;\n    }\n  }\n  absResult = absResult + difference * 0x800000 + (uint)(0x7fffffff < absInput1);\n  if (absInput1 == 0x80000000) {\n    absResult = absResult & 0xfffffffe;\n  }\n  return absResult | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "float_operation_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "option",
                "param_4": "flags",
                "iVar1": "shiftAmount",
                "iVar2": "shiftAmount2",
                "uVar3": "absInput1",
                "uVar4": "absResult",
                "uVar5": "loopCount",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_modified_value_08000c3c",
            "code": "\nuint calculateModifiedValue_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int offset;\n  uint zeroBit;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    zeroBit = 0 << (shiftAmount & 0xff);\n    leadingZeros = offset + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < zeroBit);\n    if (zeroBit == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = offset + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_modified_value_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "zeroBit"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_unsigned_integer_08000c44",
            "code": "\nuint calculateUnsignedInteger_08000c44(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int intermediateResult;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateResult = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = intermediateResult + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  signBit = intermediateResult + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_unsigned_integer_08000c44",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "intermediateResult"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint value1,uint value2,undefined4 var3,uint var4)\n\n{\n  longlong result;\n  uint resultFlag;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int exponentDiff;\n  uint resultValue;\n  bool flag1;\n  bool flag2;\n  \n  exponent1 = value1 >> 0x17 & 0xff;\n  flag1 = exponent1 == 0;\n  if (!flag1) {\n    var4 = value2 >> 0x17 & 0xff;\n    flag1 = var4 == 0;\n  }\n  if (!flag1) {\n    flag1 = exponent1 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = var4 == 0xff;\n  }\n  if (flag1) {\n    var4 = value2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || var4 == 0xff) {\n      flag1 = value1 == 0 || value1 == 0x80000000;\n      resultFlag = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        flag1 = value2 == 0;\n        resultFlag = value1;\n      }\n      if (!flag1) {\n        flag1 = value2 == 0x80000000;\n      }\n      resultValue = resultFlag;\n      if (((flag1) || ((exponent1 == 0xff && ((resultFlag & 0x7fffff) != 0)))) ||\n         ((var4 == 0xff && (resultValue = value2, (value2 & 0x7fffff) != 0)))) {\n        return resultValue | 0x7fc00000;\n      }\n      resultFlag = resultFlag ^ value2;\n      goto LAB_08000e3c;\n    }\n    flag1 = (value1 & 0x7fffffff) == 0;\n    if (!flag1) {\n      flag1 = (value2 & 0x7fffffff) == 0;\n    }\n    if (flag1) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    flag1 = exponent1 == 0;\n    resultFlag = value1 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value1 = value1 << 1;\n        flag1 = (value1 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      exponent1 = exponent1 - 1;\n    }\n    value1 = value1 | resultFlag;\n    flag1 = var4 == 0;\n    resultFlag = value2 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value2 = value2 << 1;\n        flag1 = (value2 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      var4 = var4 - 1;\n    }\n    value2 = value2 | resultFlag;\n  }\n  sum = exponent1 + var4;\n  resultValue = value1 ^ value2;\n  exponent1 = value1 << 9;\n  flag1 = exponent1 == 0;\n  if (!flag1) {\n    value2 = value2 << 9;\n    flag1 = value2 == 0;\n  }\n  if (flag1) {\n    if (exponent1 == 0) {\n      value2 = value2 << 9;\n    }\n    resultFlag = resultValue & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    flag2 = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    flag1 = difference == 0;\n    exponentDiff = difference;\n    if (!flag1 && 0x7e < sum) {\n      flag2 = SBORROW4(0xff,difference);\n      exponentDiff = 0xff - difference;\n      flag1 = difference == 0xff;\n    }\n    if (!flag1 && exponentDiff < 0 == flag2) {\n      resultFlag = resultFlag | difference * 0x800000;\n    }\n    if (!flag1 && exponentDiff < 0 == flag2) {\n      return resultFlag;\n    }\n    resultFlag = resultFlag | 0x800000;\n    product = 0;\n    flag2 = SBORROW4(difference,1);\n    resultValue = sum - 0x80;\n    flag1 = resultValue == 0;\n    exponent1 = resultValue;\n  }\n  else {\n    result = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    product = (uint)result;\n    resultFlag = (uint)((ulonglong)result >> 0x20);\n    flag1 = resultFlag < 0x800000;\n    if (flag1) {\n      resultFlag = resultFlag << 1;\n    }\n    if (flag1) {\n      resultFlag = resultFlag | product >> 0x1f;\n      product = product << 1;\n    }\n    resultFlag = resultValue & 0x80000000 | resultFlag;\n    resultValue = (sum + -0x7f) - (uint)flag1;\n    flag2 = SBORROW4(resultValue,0xfd);\n    flag1 = resultValue == 0xfd;\n    exponent1 = resultValue - 0xfd;\n    if (resultValue < 0xfe) {\n      resultFlag = resultFlag + resultValue * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        resultFlag = resultFlag & 0xfffffffe;\n      }\n      return resultFlag;\n    }\n  }\n  if (flag1 || (int)exponent1 < 0 != flag2) {\n    flag1 = (int)(resultValue + 0x19) < 0;\n    if (resultValue == 0xffffffe7 || flag1 != SCARRY4(resultValue,0x19)) {\n      resultFlag = resultFlag & 0x80000000;\n    }\n    if (resultValue != 0xffffffe7 && flag1 == SCARRY4(resultValue,0x19)) {\n      exponent1 = (resultFlag << 1) >> (-resultValue & 0xff);\n      resultValue = resultFlag << (resultValue + 0x20 & 0xff);\n      exponent1 = ((uint)((resultFlag & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | resultValue << 1) == 0) {\n        exponent1 = exponent1 & ~(resultValue >> 0x1f);\n      }\n      return exponent1;\n    }\n    return resultFlag;\n  }\nLAB_08000e3c:\n  return resultFlag & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "var3",
                "param_4": "var4",
                "lVar1": "result",
                "uVar2": "resultFlag",
                "uVar3": "exponent1",
                "uVar6": "product",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "exponentDiff",
                "uVar8": "resultValue",
                "bVar9": "flag1",
                "bVar10": "flag2"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "float_conversion_08000e54",
            "code": "\nuint floatConversion_08000e54(uint number1,uint number2,undefined4 flag,uint shiftAmount)\n\n{\n  uint significand1;\n  uint exponent1;\n  int exponentDifference;\n  uint carry;\n  int adjustedExponent;\n  uint result;\n  bool condition;\n  bool overflowCondition;\n  bool carryCondition;\n  \n  exponent1 = number1 >> 0x17 & 0xff;\n  condition = exponent1 == 0;\n  if (!condition) {\n    shiftAmount = number2 >> 0x17 & 0xff;\n    condition = shiftAmount == 0;\n  }\n  if (!condition) {\n    condition = exponent1 == 0xff;\n  }\n  if (!condition) {\n    condition = shiftAmount == 0xff;\n  }\n  if (condition) {\n    shiftAmount = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (exponent1 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, shiftAmount == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (shiftAmount == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition = (number1 & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (number2 & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = exponent1 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            number1 = number1 << 1;\n            condition = (number1 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          exponent1 = exponent1 - 1;\n        }\n        number1 = number1 | result;\n        condition = shiftAmount == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            number2 = number2 << 1;\n            condition = (number2 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          shiftAmount = shiftAmount - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_08000e6c:\n    exponentDifference = exponent1 - shiftAmount;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      carryCondition = SCARRY4(exponentDifference,0x7f);\n      adjustedExponent = exponentDifference + 0x7f;\n      condition = adjustedExponent < 0;\n      overflowCondition = adjustedExponent == 0;\n      if (!overflowCondition && condition == carryCondition) {\n        carryCondition = SBORROW4(0xff,adjustedExponent);\n        condition = 0xff - adjustedExponent < 0;\n        overflowCondition = adjustedExponent == 0xff;\n      }\n      if (!overflowCondition && condition == carryCondition) {\n        number1 = number1 | adjustedExponent * 0x800000;\n      }\n      if (!overflowCondition && condition == carryCondition) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      exponent1 = 0;\n      overflowCondition = SBORROW4(adjustedExponent,1);\n      carry = exponentDifference + 0x7e;\n      condition = carry == 0;\n      result = carry;\n    }\n    else {\n      significand1 = (number2 << 9) >> 4 | 0x10000000;\n      exponent1 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      condition = significand1 <= exponent1;\n      if (!condition) {\n        exponent1 = exponent1 << 1;\n      }\n      carry = exponentDifference + 0x7d + (uint)condition;\n      result = 0x800000;\n      do {\n        if (significand1 <= exponent1) {\n          exponent1 = exponent1 - significand1;\n          number1 = number1 | result;\n        }\n        condition = significand1 >> 1 <= exponent1;\n        if (condition) {\n          exponent1 = exponent1 - (significand1 >> 1);\n        }\n        if (condition) {\n          number1 = number1 | result >> 1;\n        }\n        condition = significand1 >> 2 <= exponent1;\n        if (condition) {\n          exponent1 = exponent1 - (significand1 >> 2);\n        }\n        if (condition) {\n          number1 = number1 | result >> 2;\n        }\n        condition = significand1 >> 3 <= exponent1;\n        if (condition) {\n          exponent1 = exponent1 - (significand1 >> 3);\n        }\n        if (condition) {\n          number1 = number1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        condition = exponent1 == 0;\n        if (!condition) {\n          result = result >> 4;\n          condition = result == 0;\n        }\n      } while (!condition);\n      overflowCondition = SBORROW4(carry,0xfd);\n      condition = carry == 0xfd;\n      result = carry - 0xfd;\n      if (carry < 0xfe) {\n        number1 = number1 + carry * 0x800000 + (uint)(significand1 <= exponent1);\n        if (exponent1 - significand1 == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (condition || (int)result < 0 != overflowCondition) {\n      condition = (int)(carry + 0x19) < 0;\n      if (carry == 0xffffffe7 || condition != SCARRY4(carry,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (carry == 0xffffffe7 || condition != SCARRY4(carry,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-carry & 0xff);\n      carry = number1 << (carry + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | carry << 1) == 0) {\n        result = result & ~(carry >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "float_conversion_08000e54",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "flag",
                "param_4": "shiftAmount",
                "uVar1": "significand1",
                "uVar2": "exponent1",
                "iVar3": "exponentDifference",
                "uVar4": "carry",
                "iVar5": "adjustedExponent",
                "uVar6": "result",
                "bVar7": "condition",
                "bVar8": "overflowCondition",
                "bVar9": "carryCondition"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_value_1,uint input_value_2)\n\n{\n  bool is_negative_result;\n  uint dbl_input_value_1;\n  uint dbl_input_value_2;\n  uint combined_values;\n  bool is_combined_zero;\n  \n  dbl_input_value_1 = input_value_1 * 2;\n  dbl_input_value_2 = input_value_2 * 2;\n  if (((int)dbl_input_value_1 >> 0x18 == -1 || (int)dbl_input_value_2 >> 0x18 == -1) &&\n     ((((int)dbl_input_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)dbl_input_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_values = dbl_input_value_1 | input_value_2 & 0x7fffffff;\n  is_combined_zero = combined_values == 0;\n  if (!is_combined_zero) {\n    combined_values = input_value_1 ^ input_value_2;\n    is_combined_zero = combined_values == 0;\n  }\n  is_negative_result = -1 < (int)combined_values;\n  if (is_negative_result) {\n    input_value_1 = dbl_input_value_1 + input_value_2 * -2;\n    is_combined_zero = input_value_1 == 0;\n  }\n  if ((is_negative_result && dbl_input_value_2 <= dbl_input_value_1) && !is_combined_zero) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_negative_result || dbl_input_value_2 > dbl_input_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "is_negative_result",
                "uVar2": "dbl_input_value_1",
                "uVar3": "dbl_input_value_2",
                "uVar4": "combined_values",
                "bVar5": "is_combined_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_parameters_08000ffc",
            "code": "\nvoid concatenateParameters_08000ffc(undefined4 input1,undefined4 input2)\n\n{\n  concatenate_params_08001004(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_parameters_08000ffc",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  calculate_result_08000f9c();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_parameters_08001014",
            "code": "\nbool checkConcatenatedParameters_08001014(void)\n\n{\n  char resultFlag;\n  \n  concatenate_params_08001004();\n  return resultFlag != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_parameters_08001014",
                "in_ZR": "resultFlag"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_concatenation_successful_08001028",
            "code": "\nbool is_concatenation_successful_08001028(void)\n\n{\n  char concat_result;\n  \n  concatenate_parameters();\n  return concat_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_concatenation_successful_08001028",
                "in_CY": "concat_result",
                "concatenate_params_08001004": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_and_concatenate_08001050",
            "code": "\nbool check_and_concatenate_08001050(void)\n\n{\n  undefined is_previous_operation_zero;\n  undefined is_current_operation_zero;\n  \n  concatenate_parameters_08000ffc();\n  return !(bool)is_current_operation_zero || (bool)is_previous_operation_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_and_concatenate_08001050",
                "in_ZR": "is_previous_operation_zero",
                "in_CY": "is_current_operation_zero"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_parameters_concatenated_null_08001064",
            "code": "\nbool check_if_parameters_concatenated_null_08001064(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_parameters_concatenated_null_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_signed_integer_08001078",
            "code": "\nuint convertToSignedInteger_08001078(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_valid_number_080010c4",
            "code": "\nuint checkValidNumber_080010c4(uint number)\n\n{\n  uint shiftCount;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (number << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_valid_number_080010c4",
                "param_1": "number",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_settings_08001104",
            "code": "\nundefined4 initializeSettings_08001104(undefined4 inputValue)\n\n{\n  uint datValue;\n  \n  datValue = retrieveDatValue();\n  updateSettings(datValue / 1000);\n  setBitPattern(0xffffffff,inputValue,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_settings_08001104",
                "param_1": "inputValue",
                "uVar1": "datValue",
                "get_dat_value_08002214": "retrieveDatValue",
                "update_settings_08001214": "updateSettings",
                "set_bit_pattern_08001194": "setBitPattern"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_registers(3);\n  initialize_settings(0);\n  configure_bit_patterns();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "configure_register_08001170": "configure_registers",
                "initialize_settings_08001104": "initialize_settings",
                "configure_bit_patterns_08004ccc": "configure_bit_patterns"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_0800114c",
            "code": "\nvoid incrementData_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_register_08001170",
            "code": "\n\n\nvoid configureRegister_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_register_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_bit_pattern_08001194",
            "code": "\n\n\nvoid setBitPattern_08001194(uint input,uint mask1,uint mask2)\n\n{\n  undefined result;\n  uint shiftAmount;\n  uint shiftedBits;\n  uint totalBits;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftedBits;\n  totalBits = shiftedBits + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (totalBits < 7) {\n    shiftedBits = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < totalBits) {\n    shiftedBits = shiftedBits - 3;\n  }\n  result = (undefined)\n          ((mask2 & (1 << (shiftedBits & 0xff)) - 1U | (mask1 & shiftAmount) << (shiftedBits & 0xff)) << 4);\n  if (-1 < (int)input) {\n    shiftedBits = input + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    shiftedBits = input & 0xf;\n  }\n  if (-1 < (int)input) {\n    *(undefined *)(shiftedBits + 0x300) = result;\n  }\n  else {\n    *(undefined *)(shiftAmount + shiftedBits) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_bit_pattern_08001194",
                "param_1": "input",
                "param_2": "mask1",
                "param_3": "mask2",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "uVar3": "shiftedBits",
                "uVar4": "totalBits"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "update_settings_08001214",
            "code": "\n\n\nundefined4 updateSettings_08001214(int newValue)\n\n{\n  if (newValue - 1U < 0x1000000) {\n    _DAT_e000e014 = newValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "update_settings_08001214",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_e000e010_flag_08001240",
            "code": "\n\n\nvoid set_e000e010_flag_08001240(int flag_value)\n\n{\n  if (flag_value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_e000e010_flag_08001240",
                "param_1": "flag_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "process_data_08001264",
            "code": "\n\n\nvoid process_data_08001264(uint *input_array,uint *flags)\n\n{\n  uint flag_value;\n  uint current_flag;\n  uint flag_code;\n  int index;\n  uint i;\n  uint bit_mask;\n  uint check_flag;\n  uint *output_array;\n  int shift_amount;\n  \n  flag_value = 0;\n  i = 0;\n  do {\n    bit_mask = 1 << (i & 0xff);\n    current_flag = bit_mask & *flags;\n    if (bit_mask == current_flag) {\n      flag_code = flags[1];\n      if (flag_code == 0x12) {\n        flag_value = flags[3] + 0xc;\n      }\n      else if (flag_code < 0x13) {\n        if (flag_code == 2) {\n          flag_value = flags[3] + 8;\n        }\n        else if (flag_code < 3) {\n          if (flag_code == 0) goto LAB_080013be;\n          if (flag_code == 1) {\n            flag_value = flags[3];\n          }\n        }\n        else if (flag_code == 3) {\n          flag_value = 0;\n        }\n        else if (flag_code == 0x11) {\n          flag_value = flags[3] + 4;\n        }\n      }\n      else {\n        if (flag_code != 0x10210000) {\n          if (flag_code < 0x10210001) {\n            if (flag_code != 0x10110000) {\n              check_flag = 0x10120000;\nLAB_080013b8:\n              if (flag_code != check_flag) goto LAB_080012a8;\n            }\n          }\n          else if ((flag_code != 0x10310000) && (flag_code != 0x10320000)) {\n            check_flag = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flag_value = flags[2];\n        if (flag_value == 0) {\n          flag_value = 4;\n        }\n        else {\n          if (flag_value == 1) {\n            input_array[4] = bit_mask;\n          }\n          if (flag_value != 1) {\n            input_array[5] = bit_mask;\n          }\n          flag_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (current_flag < 0x100) {\n        bit_mask = *input_array;\n        flag_code = i << 2;\n        output_array = input_array;\n      }\n      else {\n        bit_mask = input_array[1];\n        flag_code = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < current_flag) {\n        output_array = input_array + 1;\n      }\n      *output_array = bit_mask & ~(0xf << (flag_code & 0xff)) | flag_value << (flag_code & 0xff);\n      output_array = (uint *)flags[1];\n      if (((uint)output_array & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift_amount = (i & 3) << 2;\n        if (input_array == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (input_array == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (input_array == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (input_array == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shift_amount | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shift_amount);\n        if (((uint)output_array & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~current_flag;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | current_flag;\n        }\n        if (((uint)output_array & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~current_flag;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | current_flag;\n        }\n        if (((uint)output_array & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~current_flag;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | current_flag;\n        }\n        if (((uint)output_array & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~current_flag;\n        }\n        else {\n          _DAT_4001040c = current_flag | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "process_data_08001264",
                "param_1": "input_array",
                "param_2": "flags",
                "uVar1": "flag_value",
                "uVar2": "current_flag",
                "uVar3": "flag_code",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "bit_mask",
                "uVar7": "check_flag",
                "unaff_r10": "output_array",
                "iVar8": "shift_amount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid setParamValue_08001424(int objectAddress,int paramValue,int isZero)\n\n{\n  if (isZero == 0) {\n    paramValue = paramValue << 0x10;\n  }\n  *(int *)(objectAddress + 0x10) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "objectAddress",
                "param_2": "paramValue",
                "param_3": "isZero"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_store_0800142e",
            "code": "\nvoid xorAndStore_0800142e(int address,uint value)\n\n{\n  *(uint *)(address + 0xc) = value ^ *(uint *)(address + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_store_0800142e",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flag_08001436",
            "code": "\nundefined4 checkAndModifyFlag_08001436(int *array_ptr)\n\n{\n  int value;\n  \n  value = *array_ptr;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    result = 4;\n    *(undefined *)((int)array_ptr + 0x35) = 0x20;\n    *(undefined *)(array_ptr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flag_08001436",
                "param_1": "array_ptr",
                "iVar1": "value",
                "param_1[0xe]": "result"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_08001460",
            "code": "\nundefined4 checkData_08001460(uint **dataPointer,uint flag,uint limit)\n\n{\n  int dataIndex;\n  int newDataIndex;\n  uint value;\n  uint *currentData;\n  \n  dataIndex = get_data_0800115c();\n  do {\n    currentData = *dataPointer;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = currentData[5];\n    }\n    else {\n      value = currentData[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(currentData[5] << 0x15) < 0) {\n      *currentData = *currentData | 0x200;\n      currentData[5] = currentData[5] & 0xfffffbff;\n      dataPointer[0xe] = (uint *)0x4;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (newDataIndex = get_data_0800115c(), (uint)(newDataIndex - dataIndex) <= limit))));\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_08001460",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "limit",
                "iVar1": "dataIndex",
                "iVar2": "newDataIndex",
                "uVar3": "value",
                "puVar4": "currentData"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_update_data_080014e2",
            "code": "\nundefined4 checkAndUpdateData_080014e2(int *dataList,uint maxLength)\n\n{\n  int initialValue;\n  int result;\n  \n  initialValue = get_data_0800115c();\n  while( true ) {\n    if (*(int *)(*dataList + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result = check_and_modify_flag_08001436(dataList);\n    if (result != 0) break;\n    if ((maxLength != 0xffffffff) &&\n       ((maxLength == 0 || (result = get_data_0800115c(), maxLength < (uint)(result - initialValue))))) {\n      dataList[0xe] = dataList[0xe] | 0x20;\n      *(undefined *)((int)dataList + 0x35) = 0x20;\n      *(undefined *)(dataList + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_update_data_080014e2",
                "param_1": "dataList",
                "param_2": "maxLength",
                "iVar1": "initialValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_data_08001530",
            "code": "\nundefined4 processData_08001530(uint **dataPtr,uint value1,uint value2,int conditionFlag,uint flag)\n\n{\n  int startValue;\n  int endValue;\n  uint *ptr;\n  uint **dataPtrPtr;\n  uint value1Copy;\n  uint value2Copy;\n  \n  **dataPtr = **dataPtr | 0x100;\n  dataPtrPtr = dataPtr;\n  value1Copy = value1;\n  value2Copy = value2;\n  startValue = get_data_0800115c();\n  do {\n    ptr = *dataPtr;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        startValue = check_data_08001460(dataPtr,0x10002,flag,ptr,dataPtrPtr,value1Copy,value2Copy);\n        if (startValue == 0) {\n          startValue = check_and_update_data_080014e2(dataPtr,flag,(*dataPtr)[5],(*dataPtr)[6]);\n          if (startValue == 0) {\n            ptr = *dataPtr;\n            if (conditionFlag == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            startValue = check_and_update_data_080014e2(dataPtr,flag);\n            if (startValue == 0) {\n              ptr = *dataPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (dataPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **dataPtr = **dataPtr | 0x200;\n        }\n        else if (dataPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flag == 0xffffffff);\n    if ((flag == 0) || (endValue = get_data_0800115c(), flag < (uint)(endValue - startValue))) {\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_data_08001530",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "conditionFlag",
                "param_5": "flag",
                "iVar1": "startValue",
                "iVar2": "endValue",
                "puVar3": "ptr",
                "ppuVar4": "dataPtrPtr",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **dataPtr,uint value1,uint value2,int flag,uint limit)\n\n{\n  int result;\n  int updatedResult;\n  uint *ptr;\n  uint **ptrPtr;\n  uint temp1;\n  uint temp2;\n  \n  ptr = *dataPtr;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptrPtr = dataPtr;\n  temp1 = value1;\n  temp2 = value2;\n  result = get_data_0800115c();\nLAB_0800160e:\n  ptr = *dataPtr;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = value1 & 0xfe;\n  result = check_data_08001460(dataPtr,0x10002,limit,ptr,ptrPtr,temp1,temp2);\n  if (result != 0) goto LAB_080016ba;\n  result = check_and_update_data_080014e2(dataPtr,limit,(*dataPtr)[5],(*dataPtr)[6]);\n  if (result == 0) {\n    ptr = *dataPtr;\n    if (flag != 1) {\n      ptr[4] = value2 >> 8;\n      result = check_and_update_data_080014e2(dataPtr,limit);\n      if (result != 0) goto LAB_08001642;\n      ptr = *dataPtr;\n    }\n    ptr[4] = value2 & 0xff;\n    result = check_and_update_data_080014e2(dataPtr,limit);\n    if (result == 0) {\n      **dataPtr = **dataPtr | 0x100;\n      result = get_data_0800115c();\n      do {\n        do {\n          if ((int)((*dataPtr)[5] << 0x1f) < 0) {\n            (*dataPtr)[4] = value1 & 0xff | 1;\n            result = check_data_08001460(dataPtr,0x10002,limit);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPtr[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (updatedResult = get_data_0800115c(), (uint)(updatedResult - result) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPtr[0xe] == (uint *)0x4) {\n    **dataPtr = **dataPtr | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (updatedResult = get_data_0800115c(), limit < (uint)(updatedResult - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "result",
                "iVar2": "updatedResult",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "temp1",
                "uVar6": "temp2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "update_data_080016f4",
            "code": "\nundefined4 updateData_080016f4(int *dataArray,uint dataLength)\n\n{\n  int initialData;\n  int currentData;\n  \n  initialData = get_data_0800115c();\n  while( true ) {\n    currentData = *dataArray;\n    if ((*(uint *)(currentData + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentData + 0x14) << 0x1b < 0) break;\n    if ((dataLength == 0) || (currentData = get_data_0800115c(), dataLength < (uint)(currentData - initialData))) {\n      dataArray[0xe] = dataArray[0xe] | 0x20;\n      *(undefined *)((int)dataArray + 0x35) = 0x20;\n      *(undefined *)(dataArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentData + 0x14) = *(uint *)(currentData + 0x14) & 0xffffffef;\n  dataArray[0xe] = 0;\n  *(undefined *)(dataArray + 0xd) = 0;\n  *(undefined *)((int)dataArray + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "update_data_080016f4",
                "param_1": "dataArray",
                "param_2": "dataLength",
                "iVar1": "initialData",
                "iVar2": "currentData"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "process_data_08001754",
            "code": "\nundefined4 processData_08001754(uint **data)\n\n{\n  uint bit1;\n  uint bit2;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr3;\n  uint value1;\n  undefined8 bitData;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      process_data_if_value_matches_08004d48();\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    bitData = extract_bit_from_data_08002220();\n    bit2 = (uint)((ulonglong)bitData >> 0x20);\n    bit1 = (uint)bitData;\n    ptr2 = data[1];\n    value1 = bit1 / 1000000;\n    if ((uint *)0x186a0 < ptr2) {\n      bit2 = 300;\n    }\n    ptr1 = *data;\n    if ((uint *)0x186a0 < ptr2) {\n      bit2 = value1 * bit2;\n    }\n    ptr1[1] = value1;\n    if ((uint *)0x186a0 < ptr2) {\n      value1 = bit2 / 1000;\n    }\n    ptr1[8] = value1 + 1;\n    if (ptr2 < (uint *)0x186a1) {\n      bit1 = bit1 / (uint)((int)ptr2 << 1);\n      if ((bit1 & 0xfff) < 4) {\n        bit1 = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        bit1 = bit1 / (uint)((int)ptr2 * 3) | 0x8000;\n      }\n      else {\n        bit1 = bit1 / (uint)((int)ptr2 * 0x19) | 0xc000;\n      }\n      if ((bit1 & 0xfff) == 0) {\n        bit1 = 1;\n      }\n    }\n    ptr2 = data[8];\n    ptr3 = data[7];\n    ptr1[7] = bit1;\n    *ptr1 = (uint)ptr3 | (uint)ptr2;\n    ptr1[2] = (uint)data[4] | (uint)data[3];\n    ptr1[3] = (uint)data[5] | (uint)data[6];\n    *ptr1 = *ptr1 | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "process_data_08001754",
                "param_1": "data",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "bitData"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *bytes,\n            short size,undefined4 param7)\n\n{\n  int previousIndex;\n  int currentIndex;\n  uint *currentData;\n  uint tempVar;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (bytes == (byte *)0x0) {\n      return 1;\n    }\n    if (size == 0) {\n      return 1;\n    }\n    previousIndex = get_data_0800115c();\n    do {\n      currentData = *data;\n      if ((~currentData[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        tempVar = *currentData;\n        *(undefined *)(data + 0xd) = 1;\n        *currentData = tempVar & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        previousIndex = process_data_08001530(data,param2,param3,param4,param7);\n        if (previousIndex != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      currentIndex = get_data_0800115c();\n    } while ((uint)(currentIndex - previousIndex) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (size != 0) {\nLAB_080018e2:\n    previousIndex = check_and_update_data_080014e2(data,param7);\n    if (previousIndex != 0) goto LAB_080018ee;\n    currentData = *data;\n    currentData[4] = (uint)*bytes;\n    if ((int)(currentData[5] << 0x1d) < 0) {\n      if ((short)(size + -1) == 0) break;\n      size = size + -2;\n      currentData[4] = (uint)bytes[1];\n      bytes = bytes + 2;\n    }\n    else {\n      bytes = bytes + 1;\n      size = size + -1;\n    }\n  }\n  previousIndex = check_and_update_data_080014e2(data,param7);\n  if (previousIndex == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "bytes",
                "param_6": "size",
                "param_7": "param7",
                "iVar1": "previousIndex",
                "iVar2": "currentIndex",
                "puVar3": "currentData",
                "uVar4": "tempVar"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_and_validate_data_08001938",
            "code": "\nundefined4\nprocessAndValidateData_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort size,uint timeout)\n\n{\n  undefined *ptr1;\n  int prevTime;\n  int currTime;\n  uint *ptr2;\n  uint value;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  prevTime = get_data_0800115c();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    currTime = get_data_0800115c();\n    if (10000 < (uint)(currTime - prevTime)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  prevTime = process_data_080015e8(data,param2,param3,param4,timeout);\n  if (prevTime != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (size == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    prevTime = update_data_080016f4(data,timeout);\n    if (prevTime == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *ptr2 = value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < size) {\n      prevTime = update_data_080016f4(data,timeout);\n      if (prevTime != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = output + 2;\n        size = size - 2;\n      }\n      else {\n        ptr3 = output + 1;\n        size = size - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (size != 2) {\n      prevTime = get_data_0800115c();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*data)[4];\n            prevTime = get_data_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currTime = get_data_0800115c(), (uint)(currTime - prevTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  prevTime = get_data_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currTime = get_data_0800115c(), (uint)(currTime - prevTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currTime = get_data_0800115c(), (uint)(currTime - prevTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_and_validate_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "prevTime",
                "iVar3": "currTime",
                "puVar4": "ptr2",
                "uVar5": "value",
                "puVar6": "ptr3",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_and_update_config_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_and_update_config_08001b58(int *config)\n\n{\n  int data;\n  int next_data;\n  \n  if (*config << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (config[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      data = config[1];\n      if (data == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (data == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          data = get_next_data();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            next_data = get_next_data();\n            if (100 < (uint)(next_data - data)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (data == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      data = get_next_data();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        next_data = get_next_data();\n        if (100 < (uint)(next_data - data)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*config << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (config[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag_1 = config[4];\n      if (flag_1 == 0) {\n        data = get_next_data();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          next_data = get_next_data();\n          if (2 < (uint)(next_data - data)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag_1 = 1;\n      data = get_next_data();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        next_data = get_next_data();\n        if (2 < (uint)(next_data - data)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = config[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*config << 0x1c < 0) {\n    flag_2 = config[6];\n    if (flag_2 == 0) {\n      data = get_next_data();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        next_data = get_next_data();\n        if (2 < (uint)(next_data - data)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag_2 = 1;\n      data = get_next_data();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        next_data = get_next_data();\n        if (2 < (uint)(next_data - data)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *config << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  data = get_next_data();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    next_data = get_next_data();\n    if (100 < (uint)(next_data - data)) {\n      return 3;\n    }\n  }\n  data = value;\n  if (data == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (data == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      data = get_next_data();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        next_data = get_next_data();\n        if (5000 < (uint)(next_data - data)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (data == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  data = get_next_data();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    next_data = get_next_data();\n    if (5000 < (uint)(next_data - data)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (flag_3 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (flag_3 != 2) {\n      flag_4 = 0;\n      data = get_next_data();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        next_data = get_next_data();\n      } while ((uint)(next_data - data) < 3);\n      return 3;\n    }\n    flag_4 = 0;\n    data = get_next_data();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (flag_5 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | config_value;\n        }\n        _DAT_40021004 = flag_5 | config[9] | _DAT_40021004 & 0xffc2ffff;\n        flag_4 = 1;\n        data = get_next_data();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          next_data = get_next_data();\n        } while ((uint)(next_data - data) < 3);\n        return 3;\n      }\n      next_data = get_next_data();\n    } while ((uint)(next_data - data) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_and_update_config_08001b58",
                "param_1": "config",
                "iVar1": "data",
                "iVar2": "next_data",
                "get_data_0800115c": "get_next_data",
                "iRam42420000": "flag_1",
                "iRam42420480": "flag_2",
                "param_1[3]": "value",
                "param_1[7]": "flag_3",
                "uRam42420060": "flag_4",
                "param_1[8]": "flag_5",
                "param_1[2]": "config_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_speed_08002008",
            "code": "\n\n\nint calculateClockSpeed_08002008(void)\n\n{\n  undefined4 value1;\n  int result;\n  undefined4 value2;\n  undefined4 *sourcePointer;\n  uint clockSpeed;\n  undefined4 *destinationPointer;\n  byte byteArray [4];\n  undefined4 dataArray [5];\n  \n  sourcePointer = &DAT_080072f0;\n  destinationPointer = dataArray;\n  do {\n    value1 = *sourcePointer;\n    value2 = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = value1;\n    destinationPointer[1] = value2;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockSpeed = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockSpeed = 4000000;\n    }\n    result = clockSpeed * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_speed_08002008",
                "puVar4": "sourcePointer",
                "puVar6": "destinationPointer",
                "uVar1": "value1",
                "uVar3": "value2",
                "local_24": "byteArray",
                "local_20": "dataArray",
                "uVar5": "clockSpeed",
                "iVar2": "result"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "verify_and_initialize_0800209c",
            "code": "\n\n\nundefined4 verify_and_initialize_0800209c(uint *settings,uint size)\n\n{\n  char flag1;\n  char flag2;\n  int result1;\n  uint result2;\n  int compare_result;\n  uint shifted_value;\n  \n  if ((size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size == (size & 7))) {\n    if ((int)(*settings << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | settings[2];\n    }\n    result1 = *settings << 0x1f;\n    if (-1 < result1) {\nLAB_080020ba:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size != (size & 7))) {\n        return 1;\n      }\n      if ((*settings & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | settings[3];\n      }\n      if ((int)(*settings << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | settings[4] << 3;\n      }\n      result2 = calculate_clock_speed_08002008();\n      DAT_200001bc = result2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_settings_08001104(0);\n      return 0;\n    }\n    result2 = settings[1];\n    if (result2 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (result2 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | result2;\n      result1 = get_data_0800115c(result1,shifted_value);\n      if (settings[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          compare_result = get_data_0800115c();\n        } while ((uint)(compare_result - result1) < 0x1389);\n      }\n      else if (settings[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          compare_result = get_data_0800115c();\n        } while ((uint)(compare_result - result1) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          compare_result = get_data_0800115c();\n        } while ((uint)(compare_result - result1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "verify_and_initialize_0800209c",
                "param_1": "settings",
                "param_2": "size",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "result1",
                "uVar4": "result2",
                "iVar5": "compare_result",
                "uVar6": "shifted_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_dat_value_08002214",
            "code": "\nundefined4 get_dat_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_dat_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "extract_bit_from_data_08002220",
            "code": "\n\n\nuint extractBitFromData_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "extract_bit_from_data_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extract_data_from_binary_08002250",
            "code": "\n\n\nuint extractDataFromBinary_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extract_data_from_binary_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_flags_and_values_08002280",
            "code": "\nvoid updateFlagsAndValues_08002280(int address,uint *values)\n\n{\n  uint flag1;\n  uint flag2;\n  uint value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  flag2 = *(uint *)(address + 4);\n  value = *values;\n  flag1 = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    flag1 = (flag1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    flag2 = flag2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = flag2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | value;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = flag1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_flags_and_values_08002280",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "uVar3": "value"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid updateParameters_080022d0(int baseAddress,uint *parameters)\n\n{\n  uint modifiedFlags;\n  uint modifiedValue;\n  uint newValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  modifiedValue = *(uint *)(baseAddress + 4);\n  newValue = *parameters;\n  modifiedFlags = *(uint *)(baseAddress + 0x20) & 0xfffffdff | parameters[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    modifiedFlags = (modifiedFlags & 0xfffff7ff | parameters[3] << 8) & 0xfffffbff;\n    modifiedValue = modifiedValue & 0xffffcfff | (parameters[5] | parameters[6]) << 4;\n  }\n  *(uint *)(baseAddress + 4) = modifiedValue;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | newValue;\n  *(uint *)(baseAddress + 0x3c) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = modifiedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "modifiedFlags",
                "uVar2": "modifiedValue",
                "uVar3": "newValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_param_08002324",
            "code": "\nvoid updateParam_08002324(int baseAddress,int *paramArray)\n\n{\n  uint flags;\n  int firstParam;\n  int secondParam;\n  int defaultBase;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  flags = *(uint *)(baseAddress + 4);\n  firstParam = *paramArray;\n  secondParam = paramArray[2];\n  defaultBase = 0x40012c00;\n  if (baseAddress == 0x40012c00) {\n    defaultBase = defaultBaseValue;\n    flags = flags & 0xffffbfff;\n  }\n  if (baseAddress == 0x40012c00) {\n    flags = flags | defaultBase << 6;\n  }\n  *(uint *)(baseAddress + 4) = flags;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | firstParam << 8;\n  *(int *)(baseAddress + 0x40) = paramArray[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | secondParam << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_param_08002324",
                "param_1": "baseAddress",
                "param_2": "paramArray",
                "uVar1": "flags",
                "iVar2": "firstParam",
                "iVar3": "secondParam",
                "iVar4": "defaultBase",
                "param_2[5]": "defaultBaseValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryAddress,uint *data)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryAddress;\n  if (((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n       (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | data[1], memoryAddress == (uint *)0x40012c00 ||\n       (memoryAddress == (uint *)0x40000000)) ||\n      ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | data[3];\n  }\n  *memoryAddress = updatedValue;\n  memoryAddress[0xb] = data[2];\n  memoryAddress[10] = *data;\n  updatedValue = 0x40012c00;\n  if (memoryAddress == (uint *)0x40012c00) {\n    updatedValue = data[4];\n  }\n  if (memoryAddress == (uint *)0x40012c00) {\n    memoryAddress[0xc] = updatedValue;\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_flags_080023d0",
            "code": "\nundefined4 update_flags_080023d0(undefined4 *data_ptr)\n\n{\n  if (data_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)data_ptr + 0x39) == '\\0') {\n      *(undefined *)(data_ptr + 0xe) = 0;\n      update_data_flags;\n    }\n    *(undefined *)((int)data_ptr + 0x39) = 2;\n    update_memory_08002368(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_flags_080023d0",
                "param_1": "data_ptr",
                "update_data_flags_08004d8c()": "update_data_flags"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid updateParams_08002404(int address,int *params)\n\n{\n  uint modifiedFlags;\n  uint modifiedValue;\n  int paramValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  modifiedValue = *(uint *)(address + 4);\n  paramValue = *params;\n  modifiedFlags = *(uint *)(address + 0x20) & 0xffffffdf | params[2] << 4;\n  if (address == 0x40012c00) {\n    modifiedFlags = (modifiedFlags & 0xffffff7f | params[3] << 4) & 0xffffffbf;\n    modifiedValue = modifiedValue & 0xfffff3ff | (params[5] | params[6]) << 2;\n  }\n  *(uint *)(address + 4) = modifiedValue;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(address + 0x38) = params[1];\n  *(uint *)(address + 0x20) = modifiedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "address",
                "param_2": "params",
                "uVar1": "modifiedFlags",
                "uVar2": "modifiedValue",
                "iVar3": "paramValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_params_and_flags_0800245c",
            "code": "\nvoid updateParamsAndFlags_0800245c(int *paramArray,undefined4 param2,undefined4 param3)\n\n{\n  int extraout1;\n  int extraout100;\n  int extraout101;\n  int extraout102;\n  int index1;\n  uint updatedVar;\n  int index2;\n  \n  if (*(char *)(paramArray + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)paramArray + 0x39) = 2;\n  *(undefined *)(paramArray + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    update_flags_and_values_08002280(*paramArray);\n    index2 = *paramArray;\n    updatedVar = *(uint *)(extraout1 + 0x10);\n    *(uint *)(index2 + 0x18) = *(uint *)(index2 + 0x18) | 8;\n    *(uint *)(index2 + 0x18) = *(uint *)(index2 + 0x18) & 0xfffffffb;\n    updatedVar = *(uint *)(index2 + 0x18) | updatedVar;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_params_08002404(*paramArray);\n    index2 = *paramArray;\n    index1 = *(int *)(extraout100 + 0x10);\n    *(uint *)(index2 + 0x18) = *(uint *)(index2 + 0x18) | 0x800;\n    *(uint *)(index2 + 0x18) = *(uint *)(index2 + 0x18) & 0xfffffbff;\n    updatedVar = *(uint *)(index2 + 0x18) | index1 << 8;\n    break;\n  case 8:\n    update_parameters_080022d0(*paramArray);\n    index2 = *paramArray;\n    updatedVar = *(uint *)(extraout101 + 0x10);\n    *(uint *)(index2 + 0x1c) = *(uint *)(index2 + 0x1c) | 8;\n    *(uint *)(index2 + 0x1c) = *(uint *)(index2 + 0x1c) & 0xfffffffb;\n    updatedVar = *(uint *)(index2 + 0x1c) | updatedVar;\n    goto LAB_080024fa;\n  case 0xc:\n    update_param_08002324(*paramArray);\n    index2 = *paramArray;\n    index1 = *(int *)(extraout102 + 0x10);\n    *(uint *)(index2 + 0x1c) = *(uint *)(index2 + 0x1c) | 0x800;\n    *(uint *)(index2 + 0x1c) = *(uint *)(index2 + 0x1c) & 0xfffffbff;\n    updatedVar = *(uint *)(index2 + 0x1c) | index1 << 8;\nLAB_080024fa:\n    *(uint *)(index2 + 0x1c) = updatedVar;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(index2 + 0x18) = updatedVar;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)paramArray + 0x39) = 1;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_params_and_flags_0800245c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extraout1",
                "extraout_r1_00": "extraout100",
                "extraout_r1_01": "extraout101",
                "extraout_r1_02": "extraout102",
                "iVar1": "index1",
                "uVar2": "updatedVar",
                "iVar3": "index2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_in_integer_08002520",
            "code": "\nvoid updateBitInInteger_08002520(int data,uint bitPosition,int newValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(data + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_in_integer_08002520",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "set_bit_in_integer_08002538",
            "code": "\nundefined4 setBitInInteger_08002538(uint **integerPointer,undefined4 bitPosition)\n\n{\n  uint flagValue;\n  uint *integer;\n  \n  update_bit_in_integer_08002520(*integerPointer,bitPosition,1);\n  integer = *integerPointer;\n  flagValue = 0x40012c00;\n  if (integer == (uint *)0x40012c00) {\n    flagValue = flagMask | 0x8000;\n  }\n  if (integer == (uint *)0x40012c00) {\n    integer[0x11] = flagValue;\n  }\n  *integer = *integer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "set_bit_in_integer_08002538",
                "param_1": "integerPointer",
                "param_2": "bitPosition",
                "uVar1": "flagValue",
                "puVar2": "integer",
                "uRam40012c44": "flagMask"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_flag_08002564",
            "code": "\nundefined4 checkAndUpdateFlag_08002564(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(array + 0xe) != '\\x01') {\n    *(undefined *)((int)array + 0x39) = 2;\n    *(uint *)(*array + 0x44) =\n         *values | values[1] | values[2] | values[3] | values[4] | values[5] | values[6];\n    *(undefined *)((int)array + 0x39) = 1;\n    result = 0;\n    *(undefined *)(array + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_flag_08002564",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_return_status_080025a4",
            "code": "\nundefined4 updateFlagsAndReturnStatus_080025a4(int *array,uint *values)\n\n{\n  uint value1;\n  undefined4 status;\n  int firstElement;\n  uint value2;\n  \n  status = 2;\n  if (*(char *)(array + 0xe) != '\\x01') {\n    *(undefined *)((int)array + 0x39) = 2;\n    firstElement = *array;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(firstElement + 4) = *(uint *)(firstElement + 4) & 0xffffff8f;\n    *(uint *)(firstElement + 4) = *(uint *)(firstElement + 4) | value2;\n    *(uint *)(firstElement + 8) = *(uint *)(firstElement + 8) & 0xffffff7f;\n    *(uint *)(firstElement + 8) = *(uint *)(firstElement + 8) | value1;\n    *(undefined *)((int)array + 0x39) = 1;\n    status = 0;\n    *(undefined *)(array + 0xe) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_return_status_080025a4",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "status",
                "iVar3": "firstElement",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *input)\n\n{\n  int data1;\n  int data2;\n  uint data3;\n  int result1;\n  int input1;\n  int baseAddress;\n  \n  baseAddress = *input;\n  data3 = input[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | input[3];\n  *(uint *)(baseAddress + 0xc) = input[2] | data3 | input[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | input[6];\n  if (baseAddress == 0x40013800) {\n    data1 = extract_data_from_binary_08002250();\n    result1 = (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100);\n    data1 = extract_data_from_binary_08002250();\n    input1 = input[1];\n    data2 = extract_data_from_binary_08002250();\n    data2 = (uint)(data1 * 0x19) / (uint)(input1 << 2) +\n            (int)(((ulonglong)(uint)(data2 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) *\n            -100;\n    data1 = extract_data_from_binary_08002250();\n    data3 = (uint)(data1 * 0x19) / (uint)(input[1] << 2);\n    data1 = extract_data_from_binary_08002250();\n  }\n  else {\n    data1 = extract_bit_from_data_08002220();\n    result1 = (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100);\n    data1 = extract_bit_from_data_08002220();\n    input1 = input[1];\n    data2 = extract_bit_from_data_08002220();\n    data2 = (uint)(data1 * 0x19) / (uint)(input1 << 2) +\n            (int)(((ulonglong)(uint)(data2 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) *\n            -100;\n    data1 = extract_bit_from_data_08002220();\n    data3 = (uint)(data1 * 0x19) / (uint)(input[1] << 2);\n    data1 = extract_bit_from_data_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((data3 + (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (data2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       result1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "input",
                "iVar1": "data1",
                "iVar2": "data2",
                "uVar3": "data3",
                "iVar4": "result1",
                "iVar5": "input1",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_data_08002724",
            "code": "\nundefined4 initializeData_08002724(int *dataPointer)\n\n{\n  int tempVar;\n  \n  if (dataPointer != (int *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      updateData();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    updateValues(dataPointer);\n    tempVar = *dataPointer;\n    *(uint *)(tempVar + 0x10) = *(uint *)(tempVar + 0x10) & 0xffffb7ff;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) & 0xffffffd5;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x2000;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_data_08002724",
                "param_1": "dataPointer",
                "iVar1": "tempVar",
                "update_data_08004e7c": "updateData",
                "update_values_080025e8": "updateValues"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte byteVar;\n  int dataStart;\n  uint tempVar;\n  undefined4 tempVar2;\n  short counter;\n  ushort *shortArrayPtr;\n  ushort *updatedShortArrayPtr;\n  bool isConditionMet;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  dataStart = *data;\n  shortArrayPtr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      updatedShortArrayPtr = shortArrayPtr + 1;\n      *shortArrayPtr = (ushort)((uint)(*(int *)(dataStart + 4) << 0x17) >> 0x17);\n    }\n    else {\n      updatedShortArrayPtr = (ushort *)((int)shortArrayPtr + 1);\n      *shortArrayPtr = (ushort)*(int *)(dataStart + 4) & 0xff;\n    }\n    data[10] = (int)updatedShortArrayPtr;\n  }\n  else {\n    if (data[4] == 0) {\n      byteVar = (byte)*(undefined4 *)(dataStart + 4);\n      data[10] = (int)shortArrayPtr + 1;\n    }\n    else {\n      tempVar2 = *(undefined4 *)(dataStart + 4);\n      data[10] = (int)shortArrayPtr + 1;\n      byteVar = (byte)tempVar2 & 0x7f;\n    }\n    *(byte *)shortArrayPtr = byteVar;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    dataStart = *data;\n    *(uint *)(dataStart + 0xc) = *(uint *)(dataStart + 0xc) & 0xffffffdf;\n    isConditionMet = *(char *)((int)data + 0x39) != '2';\n    if (isConditionMet) {\n      tempVar = *(uint *)(dataStart + 0xc) & 0xfffffeff;\n    }\n    else {\n      dataStart = 0x12;\n      tempVar = 0x32;\n    }\n    if (isConditionMet) {\n      *(uint *)(dataStart + 0xc) = tempVar;\n      tempVar = *(uint *)(dataStart + 0x14) & 0xfffffffe;\n    }\n    if (isConditionMet) {\n      *(uint *)(dataStart + 0x14) = tempVar;\n      dataStart = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)dataStart;\n    update_data_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "byteVar",
                "iVar2": "dataStart",
                "uVar3": "tempVar",
                "uVar4": "tempVar2",
                "sVar5": "counter",
                "puVar6": "shortArrayPtr",
                "puVar7": "updatedShortArrayPtr",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid process_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *ptrVar;\n  undefined flag;\n  uint *ptrData;\n  uint flag2;\n  bool condition;\n  \n  ptrData = *data;\n  value2 = *ptrData;\n  value1 = ptrData[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      process_data_0800299a_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = ptrData[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      ptrData = (uint *)(value2 << 0x1f);\n      if ((int)ptrData < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          ptrData = (uint *)((uint)data[0xf] | 1);\n        }\n        if (condition) {\n          data[0xf] = ptrData;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        process_data_0800299a_0800290c(data);\n      }\n      ptrData = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptrData[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptrData[3] = ptrData[3] & 0xfffffedf;\n      ptrData[5] = ptrData[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      ptrVar = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptrData[1] = *(ushort *)ptrVar & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          ptrVar = (uint *)((int)ptrVar + 2);\n        }\n        else {\n          ptrVar = (uint *)((int)ptrVar + 1);\n        }\n        data[8] = ptrVar;\n      }\n      else {\n        data[8] = (uint *)((int)ptrVar + 1);\n        ptrData[1] = (uint)*(byte *)ptrVar;\n      }\n      count = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = count;\n      if (count == 0) {\n        ptrData[3] = ptrData[3] & 0xffffff7f;\n        ptrData[3] = ptrData[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptrData[3] = ptrData[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "ptrVar",
                "uVar5": "flag",
                "puVar6": "ptrData",
                "uVar7": "flag2",
                "bVar8": "condition"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  processAndValidateDataAndHandleError(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  processAndHandleI2CData(0xd0,0x6b,0x80,1);\n  processAndHandleI2CData(0xd0,0x6b,1);\n  processAndHandleI2CData(0xd0,0x6c,0,1);\n  processAndHandleI2CData(0xd0,0x19,0,1);\n  processAndHandleI2CData(0xd0,0x1d,3,1);\n  processAndHandleI2CData(0xd0,0x1a,3,1);\n  processAndHandleI2CData(0xd0,0x1b,0x10,1);\n  processAndHandleI2CData(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_validate_data_and_handle_error_0800407c": "processAndValidateDataAndHandleError",
                "process_and_handle_i2c_data_0800403c": "processAndHandleI2CData"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputData;\n  int intValue2;\n  int intValue1;\n  undefined4 processedValue1;\n  undefined4 processedValue2;\n  \n  processedValue1 = 0;\n  processedValue2 = inputData & 0xffff0000;\n  processAndValidateData(0xd0,0x3b,&processedValue1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(processedValue1._2_1_,processedValue1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)processedValue1,processedValue1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)processedValue2,processedValue2._1_1_);\n  intValue1 = (int)DAT_200002f6;\n  intValue2 = (int)DAT_200002f8;\n  uVar1 = calculateUnsignedInteger();\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d0 = calculateFloatingPoint(uVar1,0x38000000);\n  uVar1 = calculateUnsignedInteger(intValue1);\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d4 = calculateFloatingPoint(uVar1,0x38000000);\n  uVar1 = calculateUnsignedInteger(intValue2);\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d8 = calculateFloatingPoint(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputData",
                "local_18": "processedValue1",
                "local_14": "processedValue2",
                "process_and_validate_data_080040e8": "processAndValidateData",
                "iVar3": "intValue1",
                "iVar2": "intValue2",
                "calculate_unsigned_integer_08000c44": "calculateUnsignedInteger",
                "calculate_floating_point_08000cec": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 value1;\n  undefined2 value2;\n  \n  value1 = 0;\n  value2 = 0;\n  processAndValidateData(0xd0,0x43,&value1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(value1._2_1_,value1._3_1_);\n  DAT_200002be = CONCAT11((undefined)value1,value1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)value2,value2._1_1_);\n  iVar3 = (int)DAT_200002c0;\n  iVar2 = (int)DAT_200002c2;\n  uVar1 = calculateUnsignedInteger();\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c4 = calculateFinalValue(uVar1,DAT_20000000);\n  uVar1 = calculateUnsignedInteger(iVar3);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c8 = calculateFinalValue(uVar1,DAT_20000004);\n  uVar1 = calculateUnsignedInteger(iVar2);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002cc = calculateFinalValue(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "value1",
                "local_1c": "value2",
                "process_and_validate_data_080040e8": "processAndValidateData",
                "calculate_unsigned_integer_08000c44": "calculateUnsignedInteger",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_floating_point_08000ad8": "calculateFinalValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 unsignedVar;\n  uint localParam;\n  \n  localParam = param4;\n  processAndHandleI2CData(0xd0,0x37,0x22,1,param1,param2,param3);\n  processAndHandleI2CData(0xd0,0x6a,1);\n  processAndValidateDataAndHandleError(0x18,0,\"../Src/MPU9250.c\",0xad);\n  processAndHandleI2CData(0x18,0xb,1);\n  processAndHandleI2CData(0x18,10,0,1);\n  processAndHandleI2CData(0x18,10,0xf,1);\n  processAndValidateData(0x18,0x10,&localParam,3,\"../Src/MPU9250.c\",0xb6);\n  unsignedVar = calculateUnsignedInteger((localParam & 0xff) - 0x80);\n  unsignedVar = calculateFloatingPoint(unsignedVar,0x3b800000);\n  DAT_200002e8 = floatOperation(unsignedVar,0x3f800000);\n  unsignedVar = calculateUnsignedInteger((localParam >> 8 & 0xff) - 0x80);\n  unsignedVar = calculateFloatingPoint(unsignedVar,0x3b800000);\n  DAT_200002ec = floatOperation(unsignedVar,0x3f800000);\n  unsignedVar = calculateUnsignedInteger((localParam >> 0x10 & 0xff) - 0x80);\n  unsignedVar = calculateFloatingPoint(unsignedVar,0x3b800000);\n  DAT_200002f0 = floatOperation(unsignedVar,0x3f800000);\n  processAndHandleI2CData(0x18,10,0,1);\n  processAndHandleI2CData(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "unsignedVar",
                "local_c": "localParam",
                "process_and_handle_i2c_data_0800403c": "processAndHandleI2CData",
                "process_and_validate_data_and_handle_error_0800407c": "processAndValidateDataAndHandleError",
                "process_and_validate_data_080040e8": "processAndValidateData",
                "calculate_unsigned_integer_08000c44": "calculateUnsignedInteger",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "float_operation_08000adc": "floatOperation"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_and_handle_data_08002d88",
            "code": "\nvoid process_and_handle_data_08002d88(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  int result;\n  undefined4 unsigned_int_result;\n  undefined4 floating_point_result;\n  int integer_var;\n  undefined2 counter;\n  undefined temp_stack_u26;\n  undefined temp_stack_u25;\n  undefined temp_local_24;\n  undefined temp_local_23;\n  byte byte_var;\n  undefined temp_stack_u21;\n  \n  temp_stack_u21 = (undefined)((uint)input_param_4 >> 0x18);\n  counter = 0;\n  temp_stack_u26 = 0;\n  temp_stack_u25 = 0;\n  temp_local_24 = 0;\n  temp_local_23 = 0;\n  byte_var = 0;\n  result = process_and_validate_data_and_handle_error_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,input_param_1,input_param_2);\n  if (result << 0x1f < 0) {\n    process_and_validate_data_080040e8(0x18,3,&counter,7,\"../Src/MPU9250.c\",0xda);\n    floating_point_result = DAT_2000001c;\n    if ((int)((uint)byte_var << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(temp_stack_u25,temp_stack_u26);\n      DAT_200002bc = CONCAT11(temp_local_23,temp_local_24);\n      integer_var = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = counter;\n      unsigned_int_result = calculate_unsigned_integer_08000c44();\n      unsigned_int_result = calculate_floating_point_08000cec(unsigned_int_result,floating_point_result);\n      unsigned_int_result = calculate_floating_point_08000cec(unsigned_int_result,DAT_200002e8);\n      unsigned_int_result = calculate_floating_point_08000ad8(unsigned_int_result,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(unsigned_int_result,DAT_2000002c);\n      unsigned_int_result = calculate_unsigned_integer_08000c44(integer_var);\n      unsigned_int_result = calculate_floating_point_08000cec(unsigned_int_result,floating_point_result);\n      unsigned_int_result = calculate_floating_point_08000cec(unsigned_int_result,DAT_200002ec);\n      unsigned_int_result = calculate_floating_point_08000ad8(unsigned_int_result,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(unsigned_int_result,DAT_20000030);\n      unsigned_int_result = calculate_unsigned_integer_08000c44(result);\n      floating_point_result = calculate_floating_point_08000cec(unsigned_int_result,floating_point_result);\n      floating_point_result = calculate_floating_point_08000cec(floating_point_result,DAT_200002f0);\n      floating_point_result = calculate_floating_point_08000ad8(floating_point_result,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(floating_point_result,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_and_handle_data_08002d88",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "result",
                "uVar2": "unsigned_int_result",
                "uVar3": "floating_point_result",
                "iVar4": "integer_var",
                "local_28": "counter",
                "uStack_26": "temp_stack_u26",
                "uStack_25": "temp_stack_u25",
                "local_24": "temp_local_24",
                "local_23": "temp_local_23",
                "local_22": "byte_var",
                "uStack_21": "temp_stack_u21"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_mpu9250_and_data_08002ea0",
            "code": "\nvoid initialize_mpu9250_and_data_08002ea0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraout_r1;\n  \n  initialize_mpu9250_08002ad0();\n  initialize_mpu9250_08002cb0();\n  set_global_data_08003314(0x3f19999a);\n  initialize_data_08003320(0,extraout_r1,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_mpu9250_and_data_08002ea0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_and_store_result_08002ec0",
            "code": "\nvoid calculateAndStoreResult_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 input1;\n  undefined4 input2;\n  \n  input1 = DAT_2000024c;\n  input2 = DAT_20000010;\n  result1 = calculate_floating_point_08000ad8(0x3f800000,DAT_20000010);\n  input1 = calculate_floating_point_08000cec(result1,input1);\n  input2 = calculate_floating_point_08000cec(input2,DAT_2000000c);\n  DAT_2000000c = float_operation_08000adc(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_and_store_result_08002ec0",
                "uVar1": "result1",
                "uVar2": "input1",
                "uVar3": "input2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_assign_value_08002ed4",
            "code": "\nvoid calculateAndAssignValue_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 initialValue;\n  undefined4 inputValue;\n  \n  initialValue = DAT_20000248;\n  inputValue = currentValue;\n  result1 = FUN_08000ad8(0x3f800000,currentValue);\n  initialValue = FUN_08000cec(result1,initialValue);\n  inputValue = FUN_08000cec(inputValue,outputValue);\n  outputValue = FUN_08000adc(inputValue,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_assign_value_08002ed4",
                "uVar1": "result1",
                "uVar2": "initialValue",
                "uVar3": "inputValue",
                "uRam20000018": "currentValue",
                "uRam20000014": "outputValue"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "perform_floating_point_operation_08002ee8",
            "code": "\nvoid performFloatingPointOperation_08002ee8(void)\n\n{\n  undefined4 dataValue;\n  int concatenationResult;\n  \n  dataValue = DAT_20000250;\n  concatenationResult = check_and_concatenate_08001050(DAT_20000250,0xc3340000);\n  if ((concatenationResult != 0) && (concatenationResult = is_concatenation_successful_08001028(dataValue,0x42b40000), concatenationResult != 0)) {\n    float_operation_08000adc(dataValue,0x42b40000);\n    return;\n  }\n  calculate_floating_point_08000ad8(dataValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "perform_floating_point_operation_08002ee8",
                "uVar1": "dataValue",
                "iVar2": "concatenationResult"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_data_08002f28(void)\n\n{\n  undefined4 modified_value;\n  \n  initialize_mpu9250();\n  configure_mpu9250();\n  process_and_handle_data();\n  DAT_20000258 = get_data();\n  modified_value = calculate_modified_value(DAT_20000258 - DAT_20000254);\n  float_conversion(modified_value,0x447a0000);\n  initialize_data();\n  DAT_20000254 = DAT_20000258;\n  calculate_results(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  modified_value = calculate_and_assign_value();\n  calculate_floating_point(modified_value,0x41200000);\n  DAT_20001395._0_2_ = convert_to_signed_integer();\n  modified_value = calculate_and_store_result();\n  calculate_floating_point(modified_value,0x41200000);\n  DAT_20001395._2_2_ = convert_to_signed_integer();\n  perform_floating_point_operation();\n  DAT_20001399 = convert_to_signed_integer();\n  end;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_data_08002f28",
                "uVar1": "modified_value",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "configure_mpu9250",
                "process_and_handle_data_08002d88": "process_and_handle_data",
                "thunk_get_data_0800115c": "get_data",
                "calculate_modified_value_08000c3c": "calculate_modified_value",
                "float_conversion_08000e54": "float_conversion",
                "initialize_data_08003320": "initialize_data",
                "calculate_results_08003330": "calculate_results",
                "calculate_and_assign_value_08002ed4": "calculate_and_assign_value",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "convert_to_signed_integer_08001078": "convert_to_signed_integer",
                "calculate_and_store_result_08002ec0": "calculate_and_store_result",
                "perform_floating_point_operation_08002ee8": "perform_floating_point_operation",
                "return": "end"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "concatenate_three_bytes_08003034",
            "code": "\nuint concatenateThreeBytes_08003034(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 concatenated_bytes;\n  \n  concatenated_bytes = arg4;\n  validateDataAndHandleErrors(0xee,0,&concatenated_bytes,3,\"../Src/MS5611.c\",0x8c,arg3);\n  return (uint)CONCAT12((undefined)concatenated_bytes,CONCAT11(concatenated_bytes._1_1_,concatenated_bytes._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "concatenate_three_bytes_08003034",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_c": "concatenated_bytes",
                "validate_data_and_handle_errors_080040b8": "validateDataAndHandleErrors"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_global_variable_08003068",
            "code": "\nundefined4 get_global_variable_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_global_variable_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int index;\n  undefined byte1;\n  undefined byte2;\n  \n  index = 0;\n  processAndHandleI2CData(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    processAndValidateData(0xee,index + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(byte1,byte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "iVar1": "index",
                "process_and_handle_i2c_data_0800403c": "processAndHandleI2CData",
                "process_and_validate_data_080040e8": "processAndValidateData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_data_08003314",
            "code": "\nvoid set_global_data_08003314(undefined4 input_value)\n\n{\n  DAT_2000035c = input_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_data_08003314",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_results_08003330",
            "code": "\nvoid calculate_results_08003330(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4,\n                 undefined4 input_param_5,undefined4 input_param_6,undefined4 input_param_7,undefined4 input_param_8,\n                 undefined4 input_param_9,undefined4 *output_params)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  int result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  undefined4 result_18;\n  int result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_24;\n  undefined4 result_25;\n  int result_26;\n  undefined4 result_27;\n  undefined4 result_28;\n  undefined4 result_29;\n  int result_30;\n  undefined8 result_31;\n  undefined8 result_32;\n  \n  result_29 = DAT_20000048;\n  result_28 = DAT_20000044;\n  result_30 = DAT_20000040;\n  result_27 = DAT_2000003c;\n  result_1 = calculate_floating_point_08000cec(input_param_1,input_param_1);\n  result_2 = calculate_floating_point_08000cec(input_param_2);\n  result_1 = float_operation_08000adc(result_1,result_2);\n  result_2 = calculate_floating_point_08000cec(input_param_3);\n  float_operation_08000adc(result_1,result_2);\n  reverse_binary_operations_08000428();\n  perform_calculation_08005bc8();\n  result_1 = calculate_float_bits_08000a30();\n  result_3 = check_concatenated_parameters_08001014(result_1,0);\n  if (result_3 == 0) {\n    result_2 = calculate_floating_point_08000cec(input_param_7);\n    result_4 = calculate_floating_point_08000cec(input_param_8);\n    result_2 = float_operation_08000adc(result_2,result_4);\n    result_4 = calculate_floating_point_08000cec(input_param_9);\n    float_operation_08000adc(result_2,result_4);\n    reverse_binary_operations_08000428();\n    perform_calculation_08005bc8();\n    result_2 = calculate_float_bits_08000a30();\n    result_3 = check_concatenated_parameters_08001014(result_2,0);\n    if (result_3 == 0) {\n      result_31 = reverse_binary_operations_08000428(input_param_4);\n      calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = calculate_float_bits_08000a30();\n      result_31 = reverse_binary_operations_08000428(input_param_5);\n      calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = calculate_float_bits_08000a30();\n      result_31 = reverse_binary_operations_08000428(input_param_6);\n      calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0xa2529d39,0x3f91df46);\n      result_6 = calculate_float_bits_08000a30();\n      result_3 = float_operation_08000adc(result_27);\n      result_7 = float_operation_08000adc(result_30);\n      result_8 = float_operation_08000adc(result_28,result_28);\n      result_9 = float_operation_08000adc(result_29,result_29);\n      result_10 = calculate_floating_point_08000cec(result_27);\n      result_11 = calculate_floating_point_08000cec(result_27,result_30);\n      result_12 = calculate_floating_point_08000cec(result_27,result_28);\n      result_13 = calculate_floating_point_08000cec(result_30);\n      result_14 = calculate_floating_point_08000cec(result_30,result_29);\n      result_15 = calculate_floating_point_08000cec(result_28,result_28);\n      result_16 = calculate_floating_point_08000cec(result_29,result_29);\n      result_1 = float_conversion_08000e54(0x3f800000,result_1);\n      result_2 = float_conversion_08000e54(0x3f800000,result_2);\n      result_17 = calculate_floating_point_08000cec(input_param_7,result_2);\n      result_18 = calculate_floating_point_08000cec(input_param_8,result_2);\n      result_2 = calculate_floating_point_08000cec(input_param_9,result_2);\n      result_19 = calculate_floating_point_08000cec(result_3,result_17);\n      result_20 = calculate_floating_point_08000cec(result_3,result_18);\n      result_21 = calculate_floating_point_08000cec(result_3,result_2);\n      result_22 = calculate_floating_point_08000cec(result_7,result_17);\n      result_23 = calculate_floating_point_08000cec(result_10,result_17);\n      result_24 = calculate_floating_point_08000cec(result_29,result_20);\n      result_23 = calculate_floating_point_08000ad8(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_28,result_21);\n      result_23 = float_operation_08000adc(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_13,result_17);\n      result_23 = float_operation_08000adc(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_7,result_18);\n      result_24 = calculate_floating_point_08000cec(result_24,result_28);\n      result_23 = float_operation_08000adc(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_7,result_2);\n      result_24 = calculate_floating_point_08000cec(result_24,result_29);\n      result_23 = float_operation_08000adc(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_15,result_17);\n      result_23 = calculate_floating_point_08000ad8(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_16,result_17);\n      result_23 = calculate_floating_point_08000ad8(result_23,result_24);\n      result_24 = calculate_floating_point_08000cec(result_29,result_19);\n      result_25 = calculate_floating_point_08000cec(result_10,result_18);\n      result_24 = float_operation_08000adc(result_24,result_25);\n      result_21 = calculate_floating_point_08000cec(result_30,result_21);\n      result_21 = calculate_floating_point_08000ad8(result_24,result_21);\n      result_24 = calculate_floating_point_08000cec(result_28,result_22);\n      result_21 = float_operation_08000adc(result_21,result_24);\n      result_24 = calculate_floating_point_08000cec(result_13,result_18);\n      result_21 = calculate_floating_point_08000ad8(result_21,result_24);\n      result_24 = calculate_floating_point_08000cec(result_15,result_18);\n      result_21 = float_operation_08000adc(result_21,result_24);\n      result_24 = calculate_floating_point_08000cec(result_8,result_2);\n      result_24 = calculate_floating_point_08000cec(result_24,result_29);\n      result_21 = float_operation_08000adc(result_21,result_24);\n      result_24 = calculate_floating_point_08000cec(result_16,result_18);\n      result_21 = calculate_floating_point_08000ad8(result_21,result_24);\n      result_23 = calculate_floating_point_08000cec(result_23,result_23);\n      result_21 = calculate_floating_point_08000cec(result_21,result_21);\n      float_operation_08000adc(result_23,result_21);\n      reverse_binary_operations_08000428();\n      perform_calculation_08005bc8();\n      result_26 = calculate_float_bits_08000a30();\n      result_21 = calculate_floating_point_08000cec(result_19 + -0x80000000,result_28);\n      result_20 = calculate_floating_point_08000cec(result_30,result_20);\n      result_20 = float_operation_08000adc(result_21,result_20);\n      result_10 = calculate_floating_point_08000cec(result_10,result_2);\n      result_10 = float_operation_08000adc(result_20,result_10);\n      result_20 = calculate_floating_point_08000cec(result_29,result_22);\n      result_10 = float_operation_08000adc(result_10,result_20);\n      result_20 = calculate_floating_point_08000cec(result_13,result_2);\n      result_10 = calculate_floating_point_08000ad8(result_10,result_20);\n      result_20 = calculate_floating_point_08000cec(result_8,result_18);\n      result_20 = calculate_floating_point_08000cec(result_20,result_29);\n      result_10 = float_operation_08000adc(result_10,result_20);\n      result_20 = calculate_floating_point_08000cec(result_15,result_2);\n      result_10 = calculate_floating_point_08000ad8(result_10,result_20);\n      result_20 = calculate_floating_point_08000cec(result_16,result_2);\n      result_10 = float_operation_08000adc(result_10,result_20);\n      result_20 = float_operation_08000adc(result_10,result_10);\n      result_21 = float_operation_08000adc(result_14);\n      result_22 = calculate_floating_point_08000cec(result_28,result_3);\n      result_21 = calculate_floating_point_08000ad8(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(input_param_1,result_1);\n      result_21 = calculate_floating_point_08000ad8(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(result_29,result_8);\n      result_23 = float_operation_08000adc(result_11);\n      result_22 = float_operation_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(input_param_2,result_1);\n      result_22 = calculate_floating_point_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_28,result_10);\n      result_24 = calculate_floating_point_08000ad8(0x3f000000,result_15);\n      result_16 = calculate_floating_point_08000ad8(result_24,result_16);\n      result_16 = calculate_floating_point_08000cec(result_16,result_26);\n      result_24 = calculate_floating_point_08000ad8(result_14,result_12);\n      result_24 = calculate_floating_point_08000cec(result_24,result_10);\n      result_16 = float_operation_08000adc(result_16,result_24);\n      result_16 = calculate_floating_point_08000ad8(result_16,result_17);\n      result_17 = calculate_floating_point_08000cec(result_30,result_10);\n      result_24 = calculate_floating_point_08000cec(result_30,result_28);\n      result_25 = calculate_floating_point_08000cec(result_27,result_29);\n      result_24 = calculate_floating_point_08000ad8(result_24,result_25);\n      result_24 = calculate_floating_point_08000cec(result_24,result_26);\n      result_25 = calculate_floating_point_08000cec(result_28,result_29);\n      result_11 = float_operation_08000adc(result_25,result_11);\n      result_11 = calculate_floating_point_08000cec(result_11,result_10);\n      result_11 = float_operation_08000adc(result_24,result_11);\n      result_11 = calculate_floating_point_08000ad8(result_11,result_18);\n      result_18 = calculate_floating_point_08000cec(result_28,result_26);\n      result_24 = calculate_floating_point_08000ad8(0x3f000000,result_13);\n      result_24 = calculate_floating_point_08000ad8(result_24,result_15);\n      result_24 = calculate_floating_point_08000cec(result_24,result_10);\n      result_12 = float_operation_08000adc(result_12,result_14);\n      result_12 = calculate_floating_point_08000cec(result_12,result_26);\n      result_12 = float_operation_08000adc(result_24,result_12);\n      result_2 = calculate_floating_point_08000ad8(result_12,result_2);\n      result_12 = calculate_floating_point_08000cec(result_8 + -0x80000000,result_21);\n      result_14 = calculate_floating_point_08000cec(result_7,result_22);\n      result_12 = float_operation_08000adc(result_12,result_14);\n      result_14 = calculate_floating_point_08000cec(result_23,result_16);\n      result_12 = calculate_floating_point_08000ad8(result_12,result_14);\n      result_14 = calculate_floating_point_08000cec(result_29,result_26 + -0x80000000);\n      result_14 = float_operation_08000adc(result_14,result_17);\n      result_14 = calculate_floating_point_08000cec(result_14,result_11);\n      result_12 = float_operation_08000adc(result_12,result_14);\n      result_14 = calculate_floating_point_08000cec(result_18,result_2);\n      result_12 = float_operation_08000adc(result_12,result_14);\n      result_13 = float_operation_08000adc(result_13);\n      result_13 = calculate_floating_point_08000ad8(0x3f800000,result_13);\n      result_14 = float_operation_08000adc(result_15);\n      result_13 = calculate_floating_point_08000ad8(result_13,result_14);\n      result_1 = calculate_floating_point_08000cec(input_param_3,result_1);\n      result_1 = calculate_floating_point_08000ad8(result_13,result_1);\n      result_13 = calculate_floating_point_08000cec(result_29,result_10);\n      result_10 = calculate_floating_point_08000cec(result_27,result_10);\n      result_14 = calculate_floating_point_08000cec(result_9,result_21);\n      result_15 = calculate_floating_point_08000cec(result_3,result_22);\n      result_14 = float_operation_08000adc(result_14,result_15);\n      result_15 = calculate_floating_point_08000cec(result_30,0x40800000);\n      result_15 = calculate_floating_point_08000cec(result_15,result_1);\n      result_14 = calculate_floating_point_08000ad8(result_14,result_15);\n      result_15 = calculate_floating_point_08000cec(result_16,result_13);\n      result_14 = float_operation_08000adc(result_14,result_15);\n      result_15 = float_operation_08000adc(result_18,result_10);\n      result_15 = calculate_floating_point_08000cec(result_15,result_11);\n      result_14 = float_operation_08000adc(result_14,result_15);\n      result_15 = calculate_floating_point_08000cec(result_29,result_26);\n      result_18 = calculate_floating_point_08000cec(result_30,result_20);\n      result_15 = calculate_floating_point_08000ad8(result_15,result_18);\n      result_15 = calculate_floating_point_08000cec(result_15,result_2);\n      result_14 = float_operation_08000adc(result_14,result_15);\n      result_19 = float_operation_08000adc(result_26,result_26);\n      result_15 = calculate_floating_point_08000cec(result_30,result_26);\n      result_18 = calculate_floating_point_08000cec(result_3 + -0x80000000,result_21);\n      result_9 = calculate_floating_point_08000cec(result_9,result_22);\n      result_9 = float_operation_08000adc(result_18,result_9);\n      result_18 = calculate_floating_point_08000cec(result_28,0x40800000);\n      result_1 = calculate_floating_point_08000cec(result_18,result_1);\n      result_1 = calculate_floating_point_08000ad8(result_9,result_1);\n      result_9 = calculate_floating_point_08000cec(result_28,result_19 + -0x80000000);\n      result_9 = calculate_floating_point_08000ad8(result_9,result_10);\n      result_9 = calculate_floating_point_08000cec(result_9,result_16);\n      result_1 = float_operation_08000adc(result_1,result_9);\n      result_9 = float_operation_08000adc(result_13,result_15);\n      result_9 = calculate_floating_point_08000cec(result_9,result_11);\n      result_1 = float_operation_08000adc(result_1,result_9);\n      result_9 = calculate_floating_point_08000cec(result_27,result_26);\n      result_10 = calculate_floating_point_08000cec(result_28,result_20);\n      result_9 = calculate_floating_point_08000ad8(result_9,result_10);\n      result_9 = calculate_floating_point_08000cec(result_9,result_2);\n      result_9 = float_operation_08000adc(result_1,result_9);\n      result_1 = calculate_floating_point_08000cec(result_7,result_21);\n      result_7 = calculate_floating_point_08000cec(result_8,result_22);\n      result_1 = float_operation_08000adc(result_1,result_7);\n      result_7 = calculate_floating_point_08000cec(result_29,result_19 + -0x80000000);\n      result_7 = float_operation_08000adc(result_7,result_17);\n      result_7 = calculate_floating_point_08000cec(result_7,result_16);\n      result_1 = float_operation_08000adc(result_1,result_7);\n      result_7 = calculate_floating_point_08000cec(result_27,result_26 + -0x80000000);\n      result_7 = float_operation_08000adc(result_7,result_23);\n      result_7 = calculate_floating_point_08000cec(result_7,result_11);\n      result_1 = float_operation_08000adc(result_1,result_7);\n      result_2 = calculate_floating_point_08000cec(result_2,result_15);\n      result_7 = float_operation_08000adc(result_1,result_2);\n      result_1 = calculate_floating_point_08000cec(result_12);\n      result_2 = calculate_floating_point_08000cec(result_14);\n      result_1 = float_operation_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_9,result_9);\n      result_1 = float_operation_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_7,result_7);\n      float_operation_08000adc(result_1,result_2);\n      reverse_binary_operations_08000428();\n      perform_calculation_08005bc8();\n      result_1 = calculate_float_bits_08000a30();\n      result_10 = float_conversion_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_floating_point_08000cec(result_30 + -0x80000000,result_4);\n      result_11 = calculate_floating_point_08000cec(result_28,result_5);\n      result_2 = calculate_floating_point_08000ad8(result_2,result_11);\n      result_11 = calculate_floating_point_08000cec(result_29,result_6);\n      result_2 = calculate_floating_point_08000ad8(result_2,result_11);\n      result_11 = calculate_floating_point_08000cec(result_2,0x3f000000);\n      result_12 = calculate_floating_point_08000cec(result_12,result_10);\n      result_2 = DAT_20000360;\n      result_12 = calculate_floating_point_08000cec(result_12,result_1);\n      result_11 = calculate_floating_point_08000ad8(result_11,result_12);\n      result_2 = calculate_floating_point_08000cec(result_11,result_2);\n      result_11 = float_operation_08000adc(result_2,result_27);\n      result_12 = calculate_floating_point_08000cec(result_27,result_4);\n      result_13 = calculate_floating_point_08000cec(result_28,result_6);\n      result_2 = DAT_20000360;\n      result_12 = float_operation_08000adc(result_12,result_13);\n      result_13 = calculate_floating_point_08000cec(result_29,result_5);\n      result_12 = calculate_floating_point_08000ad8(result_12,result_13);\n      result_12 = calculate_floating_point_08000cec(result_12,0x3f000000);\n      result_13 = calculate_floating_point_08000cec(result_14,result_10);\n      result_13 = calculate_floating_point_08000cec(result_13,result_1);\n      result_12 = calculate_floating_point_08000ad8(result_12,result_13);\n      result_2 = calculate_floating_point_08000cec(result_12,result_2);\n      result_12 = float_operation_08000adc(result_2,result_30);\n      result_2 = DAT_20000360;\n      result_13 = calculate_floating_point_08000cec(result_27,result_5);\n      result_14 = calculate_floating_point_08000cec(result_30,result_6);\n      result_13 = calculate_floating_point_08000ad8(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_29,result_4);\n      result_13 = float_operation_08000adc(result_13,result_14);\n      result_13 = calculate_floating_point_08000cec(result_13,0x3f000000);\n      result_9 = calculate_floating_point_08000cec(result_9,result_10);\n      result_9 = calculate_floating_point_08000cec(result_9,result_1);\n      result_9 = calculate_floating_point_08000ad8(result_13,result_9);\n      result_2 = calculate_floating_point_08000cec(result_9,result_2);\n      result_2 = float_operation_08000adc(result_2,result_28);\n      result_27 = calculate_floating_point_08000cec(result_27,result_6);\n      result_5 = calculate_floating_point_08000cec(result_30,result_5);\n      result_27 = float_operation_08000adc(result_27,result_5);\n      result_28 = calculate_floating_point_08000cec(result_28,result_4);\n      result_27 = calculate_floating_point_08000ad8(result_27,result_28);\n      result_28 = calculate_floating_point_08000cec(result_27,0x3f000000);\n      result_27 = calculate_floating_point_08000cec(result_7,result_10);\n      result_1 = calculate_floating_point_08000cec(result_27,result_1);\n      result_27 = DAT_20000360;\n      result_28 = calculate_floating_point_08000ad8(result_28,result_1);\n      result_27 = calculate_floating_point_08000cec(result_28,result_27);\n      result_27 = float_operation_08000adc(result_27,result_29);\n      result_28 = calculate_floating_point_08000cec(result_11,result_11);\n      result_29 = calculate_floating_point_08000cec(result_12,result_12);\n      result_28 = float_operation_08000adc(result_28,result_29);\n      result_29 = calculate_floating_point_08000cec(result_2,result_2);\n      result_28 = float_operation_08000adc(result_28,result_29);\n      result_29 = calculate_floating_point_08000cec(result_27,result_27);\n      float_operation_08000adc(result_28,result_29);\n      reverse_binary_operations_08000428();\n      perform_calculation_08005bc8();\n      result_28 = calculate_float_bits_08000a30();\n      result_28 = float_conversion_08000e54(0x3f800000,result_28);\n      result_29 = calculate_floating_point_08000cec(result_11,result_28);\n      DAT_2000003c = result_29;\n      result_30 = calculate_floating_point_08000cec(result_12,result_28);\n      DAT_20000040 = result_30;\n      result_1 = calculate_floating_point_08000cec(result_2,result_28);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_floating_point_08000cec(result_27,result_28);\n      result_27 = calculate_floating_point_08000cec(result_30,DAT_20000048);\n      result_28 = calculate_floating_point_08000cec(result_29,result_1);\n      result_27 = calculate_floating_point_08000ad8(result_27,result_28);\n      float_operation_08000adc(result_27,result_27);\n      reverse_binary_operations_08000428();\n      result_31 = process_parameters_08005854();\n      result_31 = calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = calculate_float_bits_08000a30();\n      *output_params = result_27;\n      result_30 = DAT_20000040;\n      result_27 = DAT_2000003c;\n      result_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_29 = calculate_floating_point_08000cec(result_30,result_30);\n      result_29 = calculate_floating_point_08000ad8(result_28,result_29);\n      result_28 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_08000ad8(result_29,result_1);\n      result_29 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      float_operation_08000adc(result_1,result_2);\n      result_31 = reverse_binary_operations_08000428();\n      result_27 = calculate_floating_point_08000cec(result_27,result_30);\n      result_28 = calculate_floating_point_08000cec(result_28,result_29);\n      result_27 = float_operation_08000adc(result_27,result_28);\n      float_operation_08000adc(result_27,result_27);\n      result_32 = reverse_binary_operations_08000428();\n      result_31 = thunk_calculate_value_08006070((int)result_32,(int)((ulonglong)result_32 >> 0x20),(int)result_31,\n                                  (int)((ulonglong)result_31 >> 0x20));\n      result_31 = calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = calculate_float_bits_08000a30();\n      output_params[1] = result_27;\n      result_30 = DAT_20000040;\n      result_27 = DAT_2000003c;\n      result_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_29 = calculate_floating_point_08000cec(result_30,result_30);\n      result_29 = float_operation_08000adc(result_28,result_29);\n      result_28 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_08000ad8(result_29,result_1);\n      result_29 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000ad8(result_1,result_2);\n      result_31 = reverse_binary_operations_08000428();\n      result_28 = calculate_floating_point_08000cec(result_30,result_28);\n      result_27 = calculate_floating_point_08000cec(result_27,result_29);\n      result_27 = float_operation_08000adc(result_28,result_27);\n      float_operation_08000adc(result_27,result_27);\n      result_32 = reverse_binary_operations_08000428();\n      result_31 = thunk_calculate_value_08006070((int)result_32,(int)((ulonglong)result_32 >> 0x20),(int)result_31,\n                                  (int)((ulonglong)result_31 >> 0x20));\n      result_31 = calculate_value_080004d0((int)result_31,(int)((ulonglong)result_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_31,(int)((ulonglong)result_31 >> 0x20),0x54442d18,0x400921fb);\n      result_27 = calculate_float_bits_08000a30();\n      output_params[2] = result_27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_results_08003330",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9",
                "param_10": "output_params",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "result_3",
                "uVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "result_6",
                "uVar7": "result_7",
                "iVar8": "result_8",
                "uVar9": "result_9",
                "uVar10": "result_10",
                "uVar11": "result_11",
                "uVar12": "result_12",
                "uVar13": "result_13",
                "uVar14": "result_14",
                "uVar15": "result_15",
                "uVar16": "result_16",
                "uVar17": "result_17",
                "uVar18": "result_18",
                "iVar19": "result_19",
                "uVar20": "result_20",
                "uVar21": "result_21",
                "uVar22": "result_22",
                "uVar23": "result_23",
                "uVar24": "result_24",
                "uVar25": "result_25",
                "iVar26": "result_26",
                "uVar27": "result_27",
                "uVar28": "result_28",
                "uVar29": "result_29",
                "iVar30": "result_30",
                "uVar31": "result_31",
                "uVar32": "result_32"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left64_bits_08003eb0",
            "code": "\nlonglong shiftLeft64Bits_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left64_bits_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_update_08003ec8",
            "code": "\nundefined4 incrementAndUpdate_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_update_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid set_param_values_08003f3c(int value1,int value2,int value3)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,value1 == 0);\n  set_param_value_08001424(0x40011000,0x4000,value2 == 0);\n  set_param_value_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param1_in_memory_08003fc4",
            "code": "\nvoid set_param1_in_memory_08003fc4(undefined4 input_param)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = input_param;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param1_in_memory_08003fc4",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid setParam_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid setParamValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "set_bits_08003ff4",
            "code": "\nvoid setBits_08003ff4(void)\n\n{\n  set_bit_in_integer_08002538(&DAT_200015f8,4);\n  set_bit_in_integer_08002538(&DAT_20001540,8);\n  set_bit_in_integer_08002538(&DAT_200014c8,8);\n  set_bit_in_integer_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "set_bits_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_process_data_08004028",
            "code": "\nvoid initializeAndProcessData_08004028(void)\n\n{\n  int iterationCount;\n  \n  initializeAndProcessData_08004028Helper();\n  setBits();\n  iterationCount = 3;\n  do {\n    setParamValues(1,0);\n    thunk_FUNC_08001168(100);\n    setParamValues(0,1);\n    thunk_FUNC_08001168(100);\n    setParamValues(0,0,1);\n    thunk_FUNC_08001168(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  setParamValues(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_process_data_08004028",
                "iVar1": "iterationCount",
                "initialize_and_process_data_0800458c": "initializeAndProcessDataHelper",
                "set_bits_08003ff4": "setBits",
                "set_param_values_08003f3c": "setParamValues"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_and_handle_i2c_data_0800403c",
            "code": "\nvoid process_and_handle_i2c_data_0800403c(undefined4 param_1_address,undefined4 param_2_address,undefined i2c_data,int error_handling_enabled)\n\n{\n  int result;\n  undefined local_buffer [8];\n  \n  local_buffer[0] = i2c_data;\n  result = process_data_08001828(&DAT_20001504,param_1_address,param_2_address,1,local_buffer,1,200);\n  if (result != 0) {\n    continuous_error_handling_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (error_handling_enabled != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_and_handle_i2c_data_0800403c",
                "param_1": "param_1_address",
                "param_2": "param_2_address",
                "param_3": "i2c_data",
                "param_4": "error_handling_enabled",
                "iVar1": "result",
                "local_14": "local_buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_validate_data_and_handle_error_0800407c",
            "code": "\nundefined process_and_validate_data_and_handle_error_0800407c(undefined4 input_param1,undefined4 input_param2,undefined4 error_param1,undefined4 error_param2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = process_and_validate_data_08001938(&DAT_20001504,input_param1,input_param2,1,result,1,200);\n  if (iVar1 != 0) {\n    continuous_error_handling_08004490(error_param1,error_param2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_validate_data_and_handle_error_0800407c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "error_param1",
                "param_4": "error_param2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "validate_data_and_handle_errors_080040b8",
            "code": "\nvoid validate_data_and_handle_errors_080040b8(undefined4 data_ptr,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 error_ptr,undefined4 error_func)\n\n{\n  int result;\n  \n  result = process_and_validate_data_08001938(&DAT_20001504,data_ptr,param2,1,param3,param4,200,param4);\n  if (result != 0) {\n    continuous_error_handling_08004490(error_ptr,error_func);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "validate_data_and_handle_errors_080040b8",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "error_ptr",
                "param_6": "error_func",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_and_validate_data_080040e8",
            "code": "\nvoid processAndValidateData_080040e8(undefined4 data,int index,int arraySize,int numIterations)\n\n{\n  undefined result;\n  int iteration;\n  undefined *arrayPtr;\n  int fileOffset;\n  \n  arrayPtr = (undefined *)(arraySize + -1);\n  fileOffset = numIterations;\n  for (iteration = 0; iteration < numIterations; iteration = iteration + 1) {\n    result = process_and_validate_data_and_handle_error_0800407c(data,index + iteration & 0xffff,\"../Src/i2c.c\",0x4c,fileOffset);\n    arrayPtr = arrayPtr + 1;\n    *arrayPtr = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_and_validate_data_080040e8",
                "param_1": "data",
                "param_2": "index",
                "param_3": "arraySize",
                "param_4": "numIterations",
                "uVar1": "result",
                "iVar2": "iteration",
                "puVar3": "arrayPtr",
                "iVar4": "fileOffset"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_data_0800411c",
            "code": "\nvoid processData_0800411c(void)\n\n{\n  undefined4 *puVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  undefined4 *puVar13;\n  undefined4 unaff_r4;\n  int iVar14;\n  int iVar15;\n  bool bVar16;\n  undefined8 uVar17;\n  \n  iVar8 = thunk_get_data_0800115c();\n  if (1 < (uint)(iVar8 - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_0800115c();\n    initialize_and_process_data_08002f28();\n  }\n  iVar8 = thunk_get_data_0800115c();\n  if (2 < (uint)(iVar8 - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_0800115c();\n    perform_data_processing_08004a84();\n  }\n  iVar8 = thunk_get_data_0800115c();\n  if (3 < (uint)(iVar8 - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_0800115c();\n    initialize_data_parsing_08004348();\n    process_and_parse_data_08004384();\n    parse_and_process_data_080043f0();\n    parse_and_process_data_08004410();\n    parse_and_process_data_08004434();\n    initialize_data_and_process_080043bc();\n    process_and_parse_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    iVar15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    uVar9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)iVar15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)iVar15) >> 0x20) << 9;\n    uVar10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)iVar15 >> 7);\n    uVar11 = uVar10 + (uint)DAT_20000260 * 0x10000;\n    uVar4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)iVar15) >> 8);\n    iVar8 = uVar9 + 2000;\n    uVar5 = uVar4 + (uint)DAT_2000025e * 0x8000;\n    bVar16 = (int)uVar9 < 0;\n    if (1999 < iVar8) {\n      uVar9 = 0;\n    }\n    uVar3 = uVar9;\n    if (bVar16 != SBORROW4(iVar8,2000)) {\n      iVar14 = uVar9 * uVar9 * 5;\n      uVar9 = iVar14 >> 2;\n      uVar3 = iVar14 >> 1;\n    }\n    uVar12 = uVar11 - uVar3;\n    lVar2 = (ulonglong)(uVar5 - uVar9) * (ulonglong)DAT_2000026c;\n    iVar14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)iVar15 >> 0x28) +\n               (uint)CARRY4(uVar4,(uint)DAT_2000025e * 0x8000)) - ((int)uVar9 >> 0x1f)) -\n             (uint)(uVar5 < uVar9)) + (int)((ulonglong)lVar2 >> 0x20);\n    uVar4 = (uint)lVar2 >> 0x15 | iVar14 * 0x800;\n    uVar6 = calculate_unsigned_integer_08000c44(uVar4 - uVar12 >> 0xf |\n                         (((iVar14 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)iVar15 >> 0x27) +\n                            (uint)CARRY4(uVar10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)uVar3 >> 0x1f)) - (uint)(uVar11 < uVar3))) - (uint)(uVar4 < uVar12)\n                         ) * 0x20000);\n    uVar6 = float_conversion_08000e54(uVar6,0x42c80000);\n    DAT_20000354 = uVar6;\n    uVar7 = calculate_unsigned_integer_08000c44(iVar8);\n    DAT_20000358 = float_conversion_08000e54(uVar7,0x42c80000);\n    float_conversion_08000e54(uVar6,0x447d5000);\n    uVar17 = reverse_binary_operations_08000428();\n    uVar17 = calculate_result_08005900((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),0x60000000,0x3fc85b95);\n    uVar17 = calculate_product_08000168(0,0x3ff00000,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n    calculate_value_080004d0((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),0,0x40e5a540);\n    uVar6 = calculate_float_bits_08000a30();\n    uVar7 = 0;\n    puVar13 = &DAT_20000300;\n    DAT_20000350 = uVar6;\n    do {\n      puVar1 = puVar13 + 1;\n      *puVar13 = *puVar1;\n      uVar7 = float_operation_08000adc(uVar7);\n      puVar13 = puVar1;\n    } while (puVar1 != &DAT_2000034c);\n    DAT_2000034c = uVar6;\n    uVar6 = float_operation_08000adc(uVar7,uVar6);\n    DAT_200002fc = float_conversion_08000e54(uVar6,0x41a00000);\n    iVar8 = convert_to_signed_integer_08001078();\n    DAT_200014ab = iVar8 * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_and_handle_i2c_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_0800115c();\n  }\n  iVar8 = thunk_get_data_0800115c();\n  if (((10 < (uint)(iVar8 - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = concatenate_three_bytes_08003034();\n    DAT_20000275 = '\\x01';\n    process_and_handle_i2c_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaff_r4);\n    DAT_20000278 = thunk_get_data_0800115c();\n  }\n  iVar8 = thunk_get_data_0800115c();\n  if (((10 < (uint)(iVar8 - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = concatenate_three_bytes_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_data_0800411c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_08004194",
            "code": "\nvoid initialize_08004194(void)\n\n{\n  initialize_08004194_and_process_data_08004028();\n  initialize_08004194_data_and_check_08004c70();\n  initialize_08004194_mpu9250_and_data_08002ea0();\n  initialize_08004194_sensor_data_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "process_data_continuously_080041ae",
            "code": "\nvoid process_data_continuously_080041ae(void)\n\n{\n  shiftLeft64Bits(0);\n  initializeData();\n  do {\n    incrementData();\n    processData();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "process_data_continuously_080041ae",
                "shift_left64_bits_08003eb0": "shiftLeft64Bits",
                "initialize_08004194": "initializeData",
                "increment_data_0800114c": "incrementData",
                "process_data_0800411c": "processData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initializeParameters_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraReturnValue;\n  \n  setParam1InMemory(0);\n  setParam(0);\n  setParamValue(0);\n  setParamValueWithExtra(0,extraReturnValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraReturnValue",
                "set_param1_in_memory_08003fc4": "setParam1InMemory",
                "set_param_08003fd0": "setParam",
                "set_param_value_08003fdc": "setParamValue",
                "set_param_value_08003fe8": "setParamValueWithExtra"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_set_params_0800426c",
            "code": "\n\n\nvoid calculate_and_set_params_0800426c(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = calculate_floating_point_08000ad8();\n  result2 = float_operation_08000adc(value1,value2);\n  result3 = calculate_floating_point_08000ad8(result1,value3);\n  result3 = float_operation_08000adc(result3,value4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  result4 = convert_to_signed_integer_08001078();\n  result3 = calculate_floating_point_08000ad8(result2,value3);\n  result3 = calculate_floating_point_08000ad8(result3,value4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  result5 = convert_to_signed_integer_08001078();\n  result1 = float_operation_08000adc(result1,value3);\n  result1 = calculate_floating_point_08000ad8(result1,value4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  result6 = convert_to_signed_integer_08001078();\n  result1 = float_operation_08000adc(value3,result2);\n  result1 = float_operation_08000adc(result1,value4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  result7 = convert_to_signed_integer_08001078();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  set_param1_in_memory_08003fc4();\n  set_param_08003fd0(DAT_2000029c);\n  set_param_value_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_set_params_0800426c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_parse_data_08004300",
            "code": "\nvoid processAndParseData_08004300(uint param1,byte *param2,uint param3)\n\n{\n  uint result;\n  byte *currentByte;\n  \n  parse_and_process_strings_08004c8c(&DAT_0800732e);\n  parse_data_08004c18(param3 & 0xff);\n  result = param3 & 0xff ^ param1;\n  parse_data_08004c18(param1);\n  for (currentByte = param2; (int)currentByte - (int)param2 < (int)param3; currentByte = currentByte + 1) {\n    parse_data_08004c18(*currentByte);\n    result = result ^ *currentByte;\n  }\n  parse_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_parse_data_08004300",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_parsing_08004348",
            "code": "\n\n\nvoid initializeDataParsing_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 dataAddress;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataAddress = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  process_and_parse_data_08004300(100,&dataAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_parsing_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataAddress",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "process_and_parse_data_08004384",
            "code": "\n\n\nvoid processAndParseData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  uint maskedParam4;\n  \n  _DAT_200013bd = 0x2a0007;\n  data1 = _DAT_200013b9;\n  data2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedParam4 = inputParam4 & 0xff000000;\n  process_and_parse_data_08004300(0x65,&data1,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "process_and_parse_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "data1",
                "uStack_10": "data2",
                "local_c": "maskedParam4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "initialize_data_and_process_080043bc",
            "code": "\nvoid initializeDataAndProcess_080043bc(void)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 *ptr_local;\n  undefined4 *ptr_data;\n  undefined4 data [2];\n  undefined2 parsed_data [6];\n  \n  ptr_data = (undefined4 *)&DAT_2000142a;\n  ptr_local = data;\n  do {\n    temp1 = *ptr_data;\n    temp2 = ptr_data[1];\n    ptr_data = ptr_data + 2;\n    *ptr_local = temp1;\n    ptr_local[1] = temp2;\n    ptr_local = ptr_local + 2;\n  } while (ptr_data != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptr_local = DAT_2000143a;\n  process_and_parse_data_08004300(0x66,data,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "initialize_data_and_process_080043bc",
                "puVar4": "ptr_data",
                "puVar3": "ptr_local",
                "local_24": "data",
                "local_1c": "parsed_data",
                "uVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "parse_and_process_data_080043f0",
            "code": "\n\n\nvoid parse_and_process_data_080043f0(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  undefined4 data_ptr_1;\n  undefined4 data_ptr_2;\n  undefined4 data_array [2];\n  \n  data_ptr_1 = _DAT_200013dd;\n  data_ptr_2 = _DAT_200013e1;\n  data_array[0] = input_param_3;\n  process_and_parse_data_08004300(0x68,&data_ptr_1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "parse_and_process_data_080043f0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "local_10": "data_ptr_1",
                "uStack_c": "data_ptr_2",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "parse_and_process_data_08004410",
            "code": "\nvoid parseAndProcessData_08004410(undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined4 constant;\n  undefined4 concatenatedData;\n  undefined4 stackData;\n  \n  constant = DAT_20001395;\n  concatenatedData = CONCAT22((short)((uint)data2 >> 0x10),DAT_20001399);\n  stackData = data3;\n  process_and_parse_data_08004300(0x6c,&constant,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "parse_and_process_data_08004410",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "local_10": "constant",
                "local_c": "concatenatedData",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "parse_and_process_data_08004434",
            "code": "\nvoid parseAndProcessData_08004434(undefined4 dataPointer,undefined4 flag,undefined4 inputData)\n\n{\n  undefined4 configData;\n  undefined4 concatenatedData;\n  undefined4 stackData;\n  \n  configData = DAT_200014ab;\n  concatenatedData = CONCAT22((short)((uint)flag >> 0x10),DAT_200014af);\n  stackData = inputData;\n  process_and_parse_data_08004300(0x6d,&configData,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "parse_and_process_data_08004434",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "inputData",
                "local_10": "configData",
                "local_c": "concatenatedData",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "process_and_parse_data_08004458",
            "code": "\nvoid processAndParseData_08004458(void)\n\n{\n  undefined4 *localArray;\n  undefined4 *inputArray;\n  undefined4 tempValue;\n  undefined4 *newArray;\n  undefined4 *currentElement;\n  undefined4 dataArray [3];\n  undefined2 tempArray [10];\n  \n  localArray = dataArray;\n  inputArray = &DAT_2000139b;\n  do {\n    currentElement = inputArray;\n    newArray = localArray;\n    tempValue = currentElement[1];\n    *newArray = *currentElement;\n    newArray[1] = tempValue;\n    localArray = newArray + 2;\n    inputArray = currentElement + 2;\n  } while (currentElement + 2 != (undefined4 *)0x200013b3);\n  newArray[2] = uRam200013b3;\n  *(undefined2 *)(newArray + 3) = *(undefined2 *)(currentElement + 3);\n  process_and_parse_data_08004300(0x70,dataArray,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "process_and_parse_data_08004458",
                "puVar1": "localArray",
                "puVar2": "inputArray",
                "uVar3": "tempValue",
                "puVar4": "newArray",
                "puVar5": "currentElement",
                "local_30": "dataArray",
                "local_24": "tempArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_error_handling_08004490",
            "code": "\nvoid continuousErrorHandling_08004490(undefined4 errorMessage,undefined4 lineNumber)\n\n{\n  setParamValue(0x40011000,0x4000,1);\n  setParamValue(0x40011000,0x8000,0);\n  setParamValue(0x40011000,0x2000,0);\n  do {\n    storeAsXor(0x40011000,0x4000);\n    storeAsXor(0x40011000,0x8000);\n    storeAsXor(0x40011000,0x2000);\n    processString(\"Error with \");\n    processString(errorMessage);\n    processString(\" at line: \");\n    initializeAndParseData(lineNumber);\n    parseData(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_error_handling_08004490",
                "param_1": "errorMessage",
                "param_2": "lineNumber",
                "set_param_value_08001424": "setParamValue",
                "xor_and_store_0800142e": "storeAsXor",
                "parse_and_process_strings_08004c8c": "processString",
                "initialize_and_parse_data_08004cac": "initializeAndParseData",
                "parse_data_08004c18": "parseData"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripheral_08004514",
            "code": "\nvoid initializePeripheral_08004514(void)\n\n{\n  int configCheckResult;\n  uint datValue;\n  undefined4 errorHandlingIndex;\n  int initializeResult;\n  undefined4 errorHandlingThreshold;\n  int initializeParameter1;\n  int initializeParameter2;\n  undefined4 initializeParameter3;\n  int initializeParameter4;\n  undefined4 initializeParameters [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  flag1 = 1;\n  flag2 = 0x10;\n  initializeResult = 2;\n  flag4 = 0;\n  initializeParameters[0] = 2;\n  flag3 = 2;\n  flag5 = 0x380000;\n  configCheckResult = check_and_update_config_08001b58(initializeParameters);\n  if (configCheckResult == 0) goto LAB_08004540;\n  errorHandlingIndex = 0x3c;\n  while( true ) {\n    configCheckResult = continuous_error_handling_08004490(\"../Src/peripherals.c\",errorHandlingIndex);\nLAB_08004540:\n    errorHandlingThreshold = 0xf;\n    initializeParameter3 = 0x400;\n    initializeParameter1 = initializeResult;\n    initializeParameter2 = configCheckResult;\n    initializeParameter4 = configCheckResult;\n    initializeResult = verify_and_initialize_0800209c(&errorHandlingThreshold,initializeResult);\n    if (initializeResult == 0) break;\n    errorHandlingIndex = 0x49;\n  }\n  datValue = get_dat_value_08002214();\n  update_settings_08001214(datValue / 1000);\n  set_e000e010_flag_08001240(4);\n  set_bit_pattern_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripheral_08004514",
                "iVar1": "configCheckResult",
                "uVar2": "datValue",
                "uVar3": "errorHandlingIndex",
                "iVar4": "initializeResult",
                "local_44": "errorHandlingThreshold",
                "local_40": "initializeParameter1",
                "local_3c": "initializeParameter2",
                "local_38": "initializeParameter3",
                "local_34": "initializeParameter4",
                "local_30": "initializeParameters",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_process_data_0800458c",
            "code": "\n\n\nvoid initialize_and_process_data_0800458c(void)\n\n{\n  int status;\n  undefined4 flag;\n  int value;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int param1;\n  int param2;\n  int param3;\n  int param4;\n  int param5;\n  undefined4 param6;\n  int param7;\n  \n  initialize_system_08001128();\n  initialize_peripheral_08004514();\n  value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value_08001424(0x40010800,0x20,0);\n  param1 = 0xe000;\n  param2 = 1;\n  param4 = 2;\n  process_data_08001264(0x40011000,&param1);\n  param1 = 0x20;\n  param2 = 1;\n  param4 = 2;\n  process_data_08001264(0x40010800,&param1);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  status = process_data_08001754();\n  if (status == 0) goto LAB_0800463a;\n  flag = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  status = continuous_error_handling_08004490(\"../Src/peripherals.c\",flag);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = status;\n                                  DAT_20001588 = status;\n                                  DAT_2000158c = status;\n                                  DAT_20001594 = status;\n                                  DAT_20001598 = status;\n                                  status = initialize_data_08002724(&DAT_2000157c);\n                                  if (status == 0) break;\n                                  flag = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = value;\n                                DAT_200015c4 = status;\n                                DAT_200015cc = status;\n                                DAT_200015d0 = status;\n                                status = update_flags_080023d0(&DAT_200015bc);\n                                if (status == 0) break;\n                                flag = 0x88;\n                              }\n                              var1 = status;\n                              var2 = status;\n                              status = update_flags_and_return_status_080025a4(&DAT_200015bc,&var1);\n                              if (status == 0) break;\n                              flag = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = status;\n                            var5 = status;\n                            var6 = status;\n                            var7 = status;\n                            var8 = status;\n                            status = update_params_and_flags_0800245c(&DAT_200015bc,&var3,0xc);\n                            if (status == 0) break;\n                            flag = 0x9a;\n                          }\n                          param6 = 0x2000;\n                          param1 = status;\n                          param2 = status;\n                          param3 = status;\n                          param4 = status;\n                          param5 = status;\n                          param7 = status;\n                          status = check_and_update_flag_08002564(&DAT_200015bc,&param1);\n                          if (status == 0) break;\n                          flag = 0xa6;\n                        }\n                        process_data_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = value;\n                        DAT_20001600 = status;\n                        DAT_20001608 = status;\n                        status = update_flags_080023d0(&DAT_200015f8);\n                        if (status == 0) break;\n                        flag = 0xc3;\n                      }\n                      var3 = status;\n                      var4 = status;\n                      status = update_flags_and_return_status_080025a4(&DAT_200015f8,&var3);\n                      if (status == 0) break;\n                      flag = 0xca;\n                    }\n                    param1 = 0x60;\n                    param2 = status;\n                    param3 = status;\n                    param5 = status;\n                    status = update_params_and_flags_0800245c(&DAT_200015f8,&param1,4);\n                    if (status == 0) break;\n                    flag = 0xd3;\n                  }\n                  process_data_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = value;\n                  DAT_20001548 = status;\n                  DAT_20001550 = status;\n                  status = update_flags_080023d0();\n                  if (status == 0) break;\n                  flag = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                status = update_flags_and_return_status_080025a4(&DAT_20001540,&var3);\n                if (status == 0) break;\n                flag = 0xf7;\n              }\n              param1 = 0x60;\n              param2 = status;\n              param3 = status;\n              param5 = status;\n              status = update_params_and_flags_0800245c(&DAT_20001540,&param1,8);\n              if (status == 0) break;\n              flag = 0x100;\n            }\n            value = update_params_and_flags_0800245c(&DAT_20001540,&param1,0xc);\n            if (value == 0) break;\n            flag = 0x105;\n          }\n          process_data_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = value;\n          DAT_200014d8 = value;\n          status = update_flags_080023d0(&DAT_200014c8);\n          if (status == 0) break;\n          flag = 0x122;\n        }\n        var3 = status;\n        var4 = status;\n        status = update_flags_and_return_status_080025a4(&DAT_200014c8,&var3);\n        if (status == 0) break;\n        flag = 0x129;\n      }\n      param1 = 0x60;\n      param2 = status;\n      param3 = status;\n      param5 = status;\n      status = update_params_and_flags_0800245c(&DAT_200014c8,&param1,8);\n      if (status == 0) break;\n      flag = 0x132;\n    }\n    status = update_params_and_flags_0800245c(&DAT_200014c8,&param1,0xc);\n    if (status == 0) break;\n    flag = 0x137;\n  }\n  process_data_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_process_data_0800458c",
                "iVar1": "status",
                "uVar2": "flag",
                "iVar3": "value",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "param1",
                "local_30": "param2",
                "local_2c": "param3",
                "local_28": "param4",
                "local_24": "param5",
                "local_20": "param6",
                "local_1c": "param7"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "process_data_0800483c",
            "code": "\nvoid processData_0800483c(int *data)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = data[0xc];\n  result1 = float_operation_08000adc(data[7],data[9]);\n  value2 = calculate_floating_point_08000ad8(result1,value2);\n  data[10] = value2;\n  if (*data == 3) {\n    value2 = check_if_parameters_concatenated_null_08001064(data[10],0);\n    if (value2 == 0) {\n      value2 = is_concatenation_successful_08001028(data[10],0xc3340000);\n    }\n    else {\n      value2 = check_if_parameters_concatenated_null_08001064(data[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = data[10];\n      result1 = calculate_floating_point_08000cec(data[10],0x43b40000);\n      value2 = check_if_parameters_concatenated_null_08001064(data[10],0);\n      value1 = data[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = float_conversion_08000e54(result1,value1);\n      value2 = calculate_floating_point_08000ad8(value3,result1);\n      data[10] = value2;\n    }\n  }\n  value3 = data[2];\n  value1 = data[3];\n  value2 = calculate_floating_point_08000cec(data[1],data[10]);\n  data[0xe] = value2;\n  value2 = float_operation_08000adc(data[10],data[0xf]);\n  data[0xf] = value2;\n  value2 = is_concatenation_successful_08001028(data[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = check_if_parameters_concatenated_null_08001064(data[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = data[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  data[0xf] = value2;\n  value2 = calculate_floating_point_08000ad8(data[0xc],data[0xd]);\n  data[0x10] = value2;\n  value2 = data[0xe];\n  result1 = calculate_floating_point_08000cec(value3,data[0xf]);\n  result1 = float_operation_08000adc(result1,value2);\n  result2 = calculate_floating_point_08000cec(value1,data[0x10]);\n  value2 = calculate_floating_point_08000ad8(result1,result2);\n  data[0x12] = value2;\n  result1 = calculate_unsigned_integer_08000c44(data[0x13]);\n  value2 = is_concatenation_successful_08001028(data[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = check_if_parameters_concatenated_null_08001064(data[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = data[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = calculate_floating_point_08000cec(value2,result1);\n  data[0x12] = value2;\n  data[0xd] = data[0xc];\n  data[0xb] = data[10];\n  data[0x15] = data[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "process_data_0800483c",
                "param_1": "data",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initializeData_08004a30(void)\n\n{\n  undefined4 globalVariable;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      globalVariable = get_global_variable_08003068();\n      DAT_20000068 = calculateFloatingPoint(globalVariable,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      globalVariable = get_global_variable_08003068();\n      DAT_2000007c = calculateFloatingPoint(globalVariable,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "uVar1": "globalVariable",
                "calculate_floating_point_08000cec": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "perform_data_processing_08004a84",
            "code": "\nvoid perform_data_processing_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculate_and_store_result_08002ec0();\n  DAT_20000134 = calculate_and_assign_value_08002ed4();\n  DAT_20000190 = perform_floating_point_operation_08002ee8();\n  initialize_data();\n  iVar1 = check_if_concatenated_parameters_null(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = is_concatenation_successful(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = check_if_concatenated_parameters_null(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = check_if_concatenated_parameters_null(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = is_concatenation_successful(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = check_if_concatenated_parameters_null(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      set_parameter_values(1,1);\n      process_data(&DAT_200000a8);\n      process_data(&DAT_20000104);\n      process_data(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        process_data(&DAT_2000004c);\n        perform_float_operation(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_parameters();\n      }\n      else {\n        calculate_and_set_parameters(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = check_valid_number();\n      calculate_floating_point(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = check_valid_number();\n      calculate_floating_point(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = check_valid_number();\n      calculate_floating_point(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = check_valid_number();\n      calculate_floating_point(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = check_valid_number();\n      return;\n    }\n  }\n  initialize_parameters();\n  set_parameter_values(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "perform_data_processing_08004a84",
                "initialize_data_08004a30": "initialize_data",
                "check_if_parameters_concatenated_null_08001064": "check_if_concatenated_parameters_null",
                "is_concatenation_successful_08001028": "is_concatenation_successful",
                "set_param_values_08003f3c": "set_parameter_values",
                "process_data_0800483c": "process_data",
                "float_operation_08000adc": "perform_float_operation",
                "initialize_parameters_080041c4": "initialize_parameters",
                "calculate_and_set_params_0800426c": "calculate_and_set_parameters",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "check_valid_number_080010c4": "check_valid_number"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "parse_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 parseData_08004c18(undefined input)\n\n{\n  int *ptr1;\n  int var1;\n  int var2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var1 = get_data_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var2 = get_data_0800115c();\n      } while ((uint)(var2 - var1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = get_data_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = get_data_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "parse_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "iVar3": "var2",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "update_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * updateData_08004c30(int *dataPointer)\n\n{\n  int tempVar;\n  \n  if (*dataPointer != 0x40013800) {\n    return dataPointer;\n  }\n  increment_and_update_08003ec8(&DAT_20000364,DAT_20001634);\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "update_data_08004c30",
                "param_1": "dataPointer",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_and_check_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_data_and_check_08004c70(void)\n\n{\n  int value;\n  \n  initialize_data_08004c64();\n  value = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) | 1;\n    *(uint *)(value + 0xc) = *(uint *)(value + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_and_check_08004c70",
                "iVar1": "value"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "parse_and_process_strings_08004c8c",
            "code": "\nvoid parse_and_process_strings_08004c8c(undefined *string_array)\n\n{\n  uint string_length;\n  undefined *current_string_ptr;\n  \n  current_string_ptr = string_array;\n  while( true ) {\n    string_length = get_string_length_08000150(string_array);\n    if (string_length <= (uint)((int)current_string_ptr - (int)string_array)) break;\n    parse_data_08004c18(*current_string_ptr);\n    current_string_ptr = current_string_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "parse_and_process_strings_08004c8c",
                "param_1": "string_array",
                "uVar1": "string_length",
                "puVar2": "current_string_ptr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_parse_data_08004cac",
            "code": "\nvoid initializeAndParseData_08004cac(undefined4 param)\n\n{\n  initializeData(&DAT_20001636,&DAT_0800735e,param);\n  parseAndProcessStrings(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_parse_data_08004cac",
                "param_1": "param",
                "initialize_data_08004ffc": "initializeData",
                "parse_and_process_strings_08004c8c": "parseAndProcessStrings"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_bit_patterns_08004ccc",
            "code": "\n\n\nvoid configure_bit_patterns_08004ccc(undefined4 register_1,undefined4 register_2,undefined4 register_3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configure_register(3,register_2,_DAT_40021018,1,register_1,1,register_3);\n  set_bit_pattern(0xfffffff4,0);\n  set_bit_pattern(0xfffffff5,0);\n  set_bit_pattern(0xfffffff6,0);\n  set_bit_pattern(0xfffffffb,0);\n  set_bit_pattern(0xfffffffc,0);\n  set_bit_pattern(0xfffffffe,0);\n  set_bit_pattern(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_bit_patterns_08004ccc",
                "param_1": "register_1",
                "param_2": "register_2",
                "param_3": "register_3",
                "configure_register_08001170": "configure_register",
                "set_bit_pattern_08001194": "set_bit_pattern"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "process_data_if_value_matches_08004d48",
            "code": "\n\n\nvoid process_data_if_value_matches_08004d48(int *input_ptr,undefined4 input_val)\n\n{\n  undefined4 constant_1;\n  undefined4 constant_2;\n  \n  if (*input_ptr == 0x40005400) {\n    constant_1 = 0xc0;\n    constant_2 = 0x12;\n    process_data(0x40010c00,&constant_1,0x40005400,3,input_ptr,input_val);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "process_data_if_value_matches_08004d48",
                "param_1": "input_ptr",
                "param_2": "input_val",
                "local_18": "constant_1",
                "local_14": "constant_2",
                "process_data_08001264": "process_data"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataFlags)\n\n{\n  int flagValue;\n  \n  flagValue = *dataFlags;\n  if (flagValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (flagValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (flagValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (flagValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataFlags",
                "iVar1": "flagValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "process_data_08004e14",
            "code": "\nvoid process_data_08004e14(int *data,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 constant2;\n  int value;\n  undefined4 option1;\n  undefined4 option2;\n  undefined4 option3;\n  undefined4 constant;\n  \n  value = *data;\n  if (value == 0x40012c00) {\n    option1 = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        option1 = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        option1 = 0x300;\n      }\n      constant2 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    option1 = 2;\n  }\n  constant2 = 0x40010800;\nLAB_08004e2e:\n  constant = 2;\n  option2 = 2;\n  option3 = arg2;\n  process_data_08004e14_08001264(constant2,&option1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "process_data_08004e14",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "iVar2": "value",
                "local_18": "option1",
                "local_14": "option2",
                "uStack_10": "option3",
                "local_c": "constant",
                "uVar1": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_data_08004e7c",
            "code": "\n\n\nvoid updateData_08004e7c(int *data)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  if (*data == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    value1 = 0x200;\n    value2 = 2;\n    value4 = 3;\n    process_data_08001264(0x40010800,&value1);\n    value1 = 0x400;\n    value2 = 0;\n    value3 = 0;\n    process_data_08001264(0x40010800,&value1);\n    set_bit_pattern_08001194(0x25,0,0);\n    set_bit_in_array_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_data_08004e7c",
                "param_1": "data",
                "local_18": "value1",
                "local_14": "value2",
                "local_10": "value3",
                "local_c": "value4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  process_data_continuously_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initializeData_08004ffc(undefined *dataPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *pointerArray [2];\n  undefined4 maxValue;\n  undefined2 bufferSize;\n  undefined2 defaultValue;\n  undefined *currentPointer;\n  undefined4 maxValueCopy;\n  undefined4 copyValue1;\n  undefined4 copyValue2;\n  undefined4 copyValue3;\n  \n  bufferSize = 0x208;\n  maxValue = 0x7fffffff;\n  maxValueCopy = 0x7fffffff;\n  defaultValue = 0xffff;\n  pointerArray[0] = dataPointer;\n  currentPointer = dataPointer;\n  copyValue1 = value1;\n  copyValue2 = value2;\n  copyValue3 = value3;\n  process_data_080050fc(DAT_200001c0,pointerArray,value1);\n  *pointerArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "pointerArray",
                "local_70": "maxValue",
                "local_6c": "bufferSize",
                "local_6a": "defaultValue",
                "local_68": "currentPointer",
                "local_64": "maxValueCopy",
                "uStack_c": "copyValue1",
                "uStack_8": "copyValue2",
                "uStack_4": "copyValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "process_data_08005044",
            "code": "\nundefined4 processData_08005044(undefined4 *destPtr,int *dataPtr,undefined4 sourcePtr,uint size)\n\n{\n  int status;\n  uint newSize;\n  uint dataSize;\n  int offset;\n  \n  dataSize = dataPtr[2];\n  if ((dataSize <= size) && ((*(ushort *)(dataPtr + 3) & 0x480) != 0)) {\n    offset = *dataPtr - dataPtr[4];\n    dataSize = (uint)(dataPtr[5] * 3) / 2;\n    newSize = size + 1 + offset;\n    if (dataSize < newSize) {\n      dataSize = newSize;\n    }\n    if ((int)((uint)*(ushort *)(dataPtr + 3) << 0x15) < 0) {\n      status = allocate_memory_08005714(destPtr,dataSize);\n      if (status == 0) {\nLAB_0800508a:\n        *destPtr = 0xc;\n        *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data_to_dest_08005630(status,dataPtr[4],offset);\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      status = allocate_and_process_data_080057d0(destPtr,dataPtr[4],dataSize);\n      if (status == 0) {\n        process_data_0800567c(destPtr,dataPtr[4]);\n        goto LAB_0800508a;\n      }\n    }\n    dataPtr[4] = status;\n    *dataPtr = status + offset;\n    dataPtr[5] = dataSize;\n    dataPtr[2] = dataSize - offset;\n    dataSize = size;\n  }\n  if (size <= dataSize) {\n    dataSize = size;\n  }\n  copy_memory_08005646(*dataPtr,sourcePtr,dataSize);\n  dataPtr[2] = dataPtr[2] - dataSize;\n  *dataPtr = dataSize + *dataPtr;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "process_data_08005044",
                "param_1": "destPtr",
                "param_2": "dataPtr",
                "param_3": "sourcePtr",
                "param_4": "size",
                "iVar1": "status",
                "uVar2": "newSize",
                "uVar3": "dataSize",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *pOut,int *pIn,byte *data,int *pMem)\n\n{\n  int numAllocated;\n  int result;\n  int *pTemp;\n  bool isNumber;\n  byte *pDataPtr;\n  byte *pbTemp;\n  int unaff_r9;\n  int *pLocalMem;\n  uint flags;\n  int numParam;\n  undefined4 paramType;\n  int numValue;\n  int totalLength;\n  byte currentChar;\n  undefined const1;\n  undefined const2;\n  undefined symbol;\n  undefined4 unused;\n  \n  pLocalMem = pMem;\n  if (((int)((uint)*(ushort *)(pIn + 3) << 0x18) < 0) && (pIn[4] == 0)) {\n    numAllocated = allocate_memory_08005714(pOut,0x40);\n    *pIn = numAllocated;\n    pIn[4] = numAllocated;\n    if (numAllocated == 0) {\n      *pOut = 0xc;\n      return -1;\n    }\n    pIn[5] = 0x40;\n  }\n  totalLength = 0;\n  const1 = 0x20;\n  const2 = 0x30;\n  pDataPtr = data;\nLAB_08005146:\n  pbTemp = pDataPtr;\n  if (*pbTemp != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  pDataPtr = pbTemp + 1;\n  if (*pbTemp != 0x25) goto LAB_08005146;\nLAB_08005150:\n  numAllocated = (int)pbTemp - (int)data;\n  if (numAllocated != 0) {\n    result = process_data_08005044(pOut,pIn,data,numAllocated);\n    if (result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(pIn + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + numAllocated;\n  }\n  if (*pbTemp == 0) goto LAB_080052ac;\n  flags = 0;\n  numValue = 0;\n  numParam = -1;\n  paramType = 0;\n  symbol = 0;\n  unused = 0;\n  pDataPtr = pbTemp + 1;\n  while( true ) {\n    numAllocated = find_character_in_string_08005614(&DAT_08007379,*pDataPtr);\n    data = pDataPtr + 1;\n    if (numAllocated == 0) break;\n    flags = 1 << (numAllocated + 0xf7ff8c87U & 0xff) | flags;\n    pDataPtr = data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    symbol = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    symbol = 0x2b;\n  }\n  if (*pDataPtr == 0x2a) {\n    pTemp = pLocalMem + 1;\n    numAllocated = *pLocalMem;\n    pLocalMem = pTemp;\n    if (numAllocated < 0) {\n      numValue = -numAllocated;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumber = false;\n    numAllocated = numValue;\n    data = pDataPtr;\n    while( true ) {\n      if (9 < *data - 0x30) break;\n      numAllocated = numAllocated * 10 + (*data - 0x30);\n      isNumber = true;\n      data = data + 1;\n    }\n    if (!isNumber) goto LAB_080051fc;\n  }\n  numValue = numAllocated;\nLAB_080051fc:\n  if (*data == 0x2e) {\n    if (data[1] == 0x2a) {\n      data = data + 2;\n      pTemp = pLocalMem + 1;\n      numParam = *pLocalMem;\n      pLocalMem = pTemp;\n      if (numParam < 0) {\n        numParam = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      numAllocated = 0;\n      numParam = 0;\n      while( true ) {\n        data = data + 1;\n        if (9 < *data - 0x30) break;\n        numAllocated = numAllocated * 10 + (*data - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        numParam = numAllocated;\n      }\n    }\n  }\n  numAllocated = find_character_in_string_08005614(&DAT_0800737f,*data,3);\n  if (numAllocated != 0) {\n    data = data + 1;\n    flags = flags | 0x40 << (numAllocated + 0xf7ff8c81U & 0xff);\n  }\n  currentChar = *data;\n  data = data + 1;\n  numAllocated = find_character_in_string_08005614(\"efgEFG\",currentChar,6);\n  if (numAllocated == 0) {\n    unaff_r9 = decode_and_process_data_080053d4(pOut,&flags,pIn,0x8005045,&pLocalMem);\n    if (unaff_r9 == -1) goto LAB_080052ac;\n  }\n  else {\n    pLocalMem = (int *)(((int)pLocalMem + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + unaff_r9;\n  pDataPtr = data;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "pOut",
                "param_2": "pIn",
                "param_3": "data",
                "param_4": "pMem",
                "iVar1": "numAllocated",
                "iVar2": "result",
                "piVar3": "pTemp",
                "bVar4": "isNumber",
                "pbVar5": "pDataPtr",
                "pbVar6": "pbTemp",
                "local_8c": "pLocalMem",
                "local_88": "flags",
                "local_84": "numParam",
                "local_80": "paramType",
                "local_7c": "numValue",
                "local_74": "totalLength",
                "local_70": "currentChar",
                "local_6f": "const1",
                "local_6e": "const2",
                "local_45": "symbol",
                "local_30": "unused"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *data,uint *output,undefined4 flag,code *callback)\n\n{\n  int index1;\n  int result;\n  uint maxLength;\n  uint offset;\n  bool isFlagSet;\n  \n  maxLength = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxLength = data[2];\n  }\n  *output = maxLength;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxLength + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index1 = 0; index1 < (int)(data[3] - *output); index1 = index1 + 1) {\n      result = (*callback)(input,flag,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxLength = (uint)*(byte *)((int)data + 0x43);\n  if (maxLength != 0) {\n    maxLength = 1;\n  }\n  offset = maxLength;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxLength + 0x43) = 0x30;\n    offset = maxLength + 2;\n    *(undefined *)((int)data + maxLength + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index1 = (*callback)(input,flag,(int)data + 0x43,offset);\n  if (index1 != -1) {\n    maxLength = data[3];\n    isFlagSet = (*data & 6) != 4;\n    if (isFlagSet) {\n      maxLength = 0;\n    }\n    offset = 0;\n    if (!isFlagSet) {\n      maxLength = maxLength - *output;\n    }\n    if (!isFlagSet) {\n      maxLength = maxLength & ~((int)maxLength >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxLength = maxLength + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxLength == offset) {\n        return 0;\n      }\n      index1 = (*callback)(input,flag,(int)data + 0x1a,1);\n      if (index1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "flag",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "result",
                "uVar3": "maxLength",
                "uVar4": "offset",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "decode_and_process_data_080053d4",
            "code": "\nuint decode_and_process_data_080053d4(undefined4 input_value,uint *data_array,undefined4 param_3,code *callback_function,uint **pointer_to_data_array)\n\n{\n  byte byte_val;\n  int index;\n  uint *ptr;\n  int another_index;\n  char *char_ptr;\n  uint temp_val;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint another_result;\n  char *result_ptr;\n  char *char_result_ptr;\n  uint temp_array [2];\n  \n  byte_val = *(byte *)(data_array + 6);\n  char_result_ptr = (char *)((int)data_array + 0x43);\n  if (byte_val != 0x6e) {\n    if (byte_val < 0x6f) {\n      if (byte_val != 99) {\n        if (byte_val < 100) {\n          if (byte_val == 0) goto LAB_0800558e;\n          if (byte_val != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          temp_val = *data_array;\n          ptr = *pointer_to_data_array;\n          *pointer_to_data_array = ptr + 1;\n          if (((temp_val & 0x80) == 0) && ((int)(temp_val << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr;\n          }\n          else {\n            result = *ptr;\n          }\n          if ((int)(temp_val << 0x1f) < 0) {\n            *data_array = temp_val | 0x20;\n          }\n          if (result == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          temp_val = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_val != 100) && (byte_val != 0x69)) goto LAB_08005404;\n          result = *data_array;\n          ptr = *pointer_to_data_array;\n          if ((result & 0x80) == 0) {\n            *pointer_to_data_array = ptr + 1;\n            if ((result & 0x40) == 0) goto LAB_08005424;\n            result = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *pointer_to_data_array = ptr + 1;\nLAB_08005424:\n            result = *ptr;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          temp_val = 10;\n        }\n        another_result = data_array[1];\n        data_array[2] = another_result;\n        result_ptr = char_result_ptr;\n        if ((int)another_result < 0) {\n          if (result != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data_array + 0x42) = *char_ptr;\n          result_ptr = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (result == 0) {\n            if (another_result != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              another_result = result / temp_val;\n              result_ptr = result_ptr + -1;\n              *result_ptr = char_ptr[result - temp_val * another_result];\n              result = another_result;\n            } while (another_result != 0);\n          }\n        }\n        if (((temp_val == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          result_ptr[-1] = '0';\n          result_ptr = result_ptr + -1;\n        }\n        data_array[4] = (int)char_result_ptr - (int)result_ptr;\n        char_result_ptr = result_ptr;\n        goto LAB_080054fa;\n      }\n      ptr = *pointer_to_data_array;\n      *pointer_to_data_array = ptr + 1;\n      *(char *)((int)data_array + 0x42) = (char)*ptr;\nLAB_08005464:\n      char_result_ptr = (char *)((int)data_array + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_val != 0x73) {\n        if (byte_val < 0x74) {\n          if (byte_val == 0x6f) {\nLAB_0800548a:\n            result = *data_array;\n            ptr = *pointer_to_data_array;\n            if ((result & 0x80) == 0) {\n              *pointer_to_data_array = ptr + 1;\n              if ((result & 0x40) == 0) goto LAB_08005498;\n              result = (uint)*(ushort *)ptr;\n            }\n            else {\n              *pointer_to_data_array = ptr + 1;\nLAB_08005498:\n              result = *ptr;\n            }\n            if (byte_val == 0x6f) {\n              temp_val = 8;\n            }\n            else {\n              temp_val = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_val == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800544a:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_val == 0x75) goto LAB_0800548a;\n          if (byte_val == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data_array + 0x42) = byte_val;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*pointer_to_data_array;\n      *pointer_to_data_array = (uint *)(ppcVar8 + 1);\n      char_result_ptr = *ppcVar8;\n      index = find_character_in_string_08005614(char_result_ptr,0,data_array[1]);\n      if (index != 0) {\n        data_array[1] = index - (int)char_result_ptr;\n      }\n      result = data_array[1];\n    }\n    data_array[4] = result;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  result = *data_array;\n  ppuVar7 = (uint **)*pointer_to_data_array;\n  temp_val = data_array[5];\n  if ((result & 0x80) == 0) {\n    *pointer_to_data_array = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)temp_val;\n  }\n  else {\n    *pointer_to_data_array = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = temp_val;\n  }\nLAB_0800558e:\n  data_array[4] = 0;\nLAB_080054fa:\n  index = process_data_080052e4(input_value,data_array,temp_array,param_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(input_value,param_3,char_result_ptr,data_array[4]), index == -1)) {\nLAB_0800550e:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(data_array[3] - temp_array[0]); index = index + 1) {\n        another_index = (*callback_function)(input_value,param_3,(int)data_array + 0x19,1);\n        if (another_index == -1) goto LAB_0800550e;\n      }\n    }\n    result = data_array[3];\n    if ((int)data_array[3] < (int)temp_array[0]) {\n      result = temp_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "decode_and_process_data_080053d4",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_4": "callback_function",
                "param_5": "pointer_to_data_array",
                "bVar1": "byte_val",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "another_index",
                "pcVar5": "char_ptr",
                "uVar6": "temp_val",
                "uVar9": "result",
                "uVar10": "another_result",
                "pcVar11": "result_ptr",
                "pcVar12": "char_result_ptr",
                "local_24": "temp_array"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_in_string_08005614",
            "code": "\nchar * find_character_in_string_08005614(char *string,char character,int length)\n\n{\n  char *current;\n  char *next;\n  \n  current = string;\n  do {\n    next = current;\n    if (next == string + length) {\n      return (char *)0x0;\n    }\n    current = next + 1;\n  } while (*next != character);\n  return next;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current",
                "pcVar2": "next"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_to_dest_08005630",
            "code": "\nvoid copy_data_to_dest_08005630(int dest_size,undefined *source_data,int data_size)\n\n{\n  undefined *source_end;\n  undefined *dest_end;\n  \n  dest_end = (undefined *)(dest_size + -1);\n  source_end = source_data + data_size;\n  for (; source_data != source_end; source_data = source_data + 1) {\n    dest_end = dest_end + 1;\n    *dest_end = *source_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_to_dest_08005630",
                "param_1": "dest_size",
                "param_2": "source_data",
                "param_3": "data_size",
                "puVar1": "source_end",
                "puVar2": "dest_end"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_memory_08005646",
            "code": "\nvoid copy_memory_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *end_address;\n  \n  end_address = source + length;\n  if ((source < destination) && (destination < end_address)) {\n    destination = destination + length;\n    length = length - (int)end_address;\n    while (end_address + length != (undefined *)0x0) {\n      end_address = end_address + -1;\n      destination = destination + -1;\n      *destination = *end_address;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != end_address; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_memory_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "process_data_0800567c",
            "code": "\nvoid processData_0800567c(undefined4 *result,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **temp;\n  int **currentPtr;\n  int **nextPtr;\n  int *increment;\n  int **previousPtr;\n  int **updatedPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  updatedPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    updatedPtr = (int **)((int)updatedPtr + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  nextPtr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    updatedPtr[1] = (int *)0x0;\n    currentPtr = temp;\n    DAT_200002ac = updatedPtr;\n  }\n  else {\n    nextPtr = DAT_200002ac;\n    if (updatedPtr < DAT_200002ac) {\n      currentPtr = (int **)*updatedPtr;\n      nextPtr = (int **)((int)updatedPtr + (int)currentPtr);\n      if (DAT_200002ac == nextPtr) {\n        increment = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        nextPtr = (int **)((int)increment + (int)currentPtr);\n        *updatedPtr = (int *)nextPtr;\n      }\n      updatedPtr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = updatedPtr;\n    }\n    else {\n      do {\n        previousPtr = nextPtr;\n        nextPtr = (int **)previousPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= updatedPtr);\n      currentPtr = (int **)*previousPtr;\n      if ((int **)((int)previousPtr + (int)currentPtr) == updatedPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*updatedPtr);\n        *previousPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)previousPtr + (int)currentPtr)) {\n          increment = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)increment);\n          *previousPtr = (int *)currentPtr;\n          previousPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (updatedPtr < (int **)((int)previousPtr + (int)currentPtr)) {\n        *result = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)updatedPtr + (int)*updatedPtr);\n        if (nextPtr == currentPtr) {\n          increment = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)increment + (int)*updatedPtr);\n          *updatedPtr = (int *)currentPtr;\n        }\n        updatedPtr[1] = (int *)nextPtr;\n        previousPtr[1] = (int *)updatedPtr;\n      }\n    }\n  }\n  FUNC_0800583e(result,currentPtr,nextPtr,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "process_data_0800567c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "temp",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "increment",
                "ppiVar4": "previousPtr",
                "ppiVar5": "updatedPtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *output,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *current_node;\n  uint diff;\n  uint *previous_node;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_node = DAT_200002ac;\n    while (current_node = current_block, current_node != (uint *)0x0) {\n      diff = *current_node - allocated_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (previous_node == current_node) {\n            current_block = (uint *)previous_node[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)current_node[1];\n          }\n          if (previous_node != current_node) {\n            previous_node[1] = (uint)current_block;\n            previous_node = current_node;\n          }\n        }\n        else {\n          *current_node = diff;\n          *(uint *)((int)current_node + diff) = allocated_size;\n          previous_node = (uint *)((int)current_node + diff);\n        }\n        goto LAB_08005778;\n      }\n      previous_node = current_node;\n      current_block = (uint *)current_node[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_pointer_if_negative_0800581c(output);\n    }\n    current_block = (uint *)update_pointer_if_negative_0800581c(output,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_node = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_node ||\n        (offset = update_pointer_if_negative_0800581c(output,(int)previous_node - (int)current_block), offset != -1)))) {\n      *previous_node = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output);\n      allocated_size = (int)previous_node + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_node + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_node + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output = 0xc;\n    FUNC_0800583e(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "output",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "current_node",
                "uVar4": "diff",
                "puVar5": "previous_node",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_process_data_080057d0",
            "code": "\nint allocateAndProcessData_080057d0(undefined4 param,int size,uint limit,undefined4 param_4)\n\n{\n  int result;\n  uint modifiedValue;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      process_data_0800567c();\n      result = 0;\n    }\n    else {\n      modifiedValue = calculate_modified_value_08005840();\n      result = size;\n      if ((modifiedValue < limit) && (result = allocate_memory_08005714(param,limit), result != 0)) {\n        copy_data_to_dest_08005630(result,size,limit);\n        process_data_0800567c(param,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_08005714(param,limit,limit,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_process_data_080057d0",
                "param_1": "param",
                "param_2": "size",
                "param_3": "limit",
                "iVar1": "result",
                "uVar2": "modifiedValue"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_pointer_if_negative_0800581c",
            "code": "\nvoid updatePointerIfNegative_0800581c(int *pointerToUpdate,undefined4 valueToAdd)\n\n{\n  int result;\n  \n  DAT_2000169c = 0;\n  result = add_value_to_pointer_080072b8(valueToAdd);\n  if ((result == -1) && (DAT_2000169c != 0)) {\n    *pointerToUpdate = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_pointer_if_negative_0800581c",
                "param_1": "pointerToUpdate",
                "param_2": "valueToAdd",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_modified_value_08005840",
            "code": "\nint calculateModifiedValue_08005840(undefined4 originalValue,int arrayIndex)\n\n{\n  int previousValue;\n  \n  previousValue = *(int *)(arrayIndex + -4) + -4;\n  if (*(int *)(arrayIndex + -4) < 0) {\n    previousValue = previousValue + *(int *)(arrayIndex + previousValue);\n  }\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_modified_value_08005840",
                "param_1": "originalValue",
                "param_2": "arrayIndex",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_parameters_08005854",
            "code": "\nundefined8 processParameters_08005854(undefined4 input_param,undefined4 output_param)\n\n{\n  int is_valid;\n  undefined4 *data_ptr;\n  int *data_val_ptr;\n  undefined8 improved_value;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *data_buffer;\n  undefined4 input_param_copy;\n  undefined4 output_param_copy;\n  undefined4 input_param_copy;\n  undefined4 output_param_copy;\n  undefined8 infinity_value;\n  int valid_param_check;\n  \n  improved_value = calculate_improved_value_08005c70();\n  if (DAT_20000224 == -1) {\n    return improved_value;\n  }\n  valid_param_check = check_parameters_08000a04(input_param,output_param,input_param,output_param);\n  if (valid_param_check != 0) {\n    return improved_value;\n  }\n  func_result = FUNC_0800708c(input_param,output_param);\n  is_valid = check_if_params_valid_080009f0((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (is_valid == 0) {\n    return improved_value;\n  }\n  flag = 1;\n  data_buffer = &DAT_080073ac;\n  input_param_copy = input_param;\n  output_param_copy = output_param;\n  input_param_copy = input_param;\n  output_param_copy = output_param;\n  infinity_value = get_positive_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    is_valid = initialize_program_0800709e(&flag);\n    if (is_valid != 0) goto LAB_080058d0;\n  }\n  data_ptr = (undefined4 *)get_data_from_memory_080072ac();\n  *data_ptr = 0x21;\nLAB_080058d0:\n  if (valid_param_check != 0) {\n    data_val_ptr = (int *)get_data_from_memory_080072ac();\n    *data_val_ptr = valid_param_check;\n  }\n  return infinity_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_parameters_08005854",
                "param_1": "input_param",
                "param_2": "output_param",
                "iVar1": "is_valid",
                "puVar2": "data_ptr",
                "piVar3": "data_val_ptr",
                "uVar4": "improved_value",
                "uVar5": "func_result",
                "local_48": "flag",
                "local_44": "data_buffer",
                "local_40": "input_param_copy",
                "uStack_3c": "output_param_copy",
                "local_38": "input_param_copy",
                "uStack_34": "output_param_copy",
                "local_30": "infinity_value",
                "local_28": "valid_param_check"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculate_result_thunk_08006070(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  int result_4;\n  uint result_5;\n  undefined8 final_result_1;\n  undefined8 final_result_2;\n  \n  result_5 = input_param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input_param_3 | input_param_3) >> 0x1f)) ||\n     (result_3 = input_param_2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input_param_1 | input_param_1) >> 0x1f))) {\n    final_result_1 = calculate_sum_0800016c(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n    return final_result_1;\n  }\n  if ((input_param_4 + 0xc0100000 | input_param_3) == 0) {\n    final_result_1 = calculate_final_value_08006d68();\n    return final_result_1;\n  }\n  result_2 = (int)input_param_4 >> 0x1e & 2U | input_param_2 >> 0x1f;\n  if ((input_param_1 | result_3) == 0) {\n    if (result_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_2 != 3) {\n      return CONCAT44(input_param_2,input_param_1);\n    }\nLAB_0800613e:\n    final_result_1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_param_3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (result_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_2 != 3) {\n          if (result_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        result_4 = (int)(result_3 - result_5) >> 0x14;\n        if (result_4 < 0x3d) {\n          if (((int)input_param_4 < 0) && (result_4 + 0x3c < 0 != SCARRY4(result_4,0x3c))) {\n            final_result_1 = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input_param_1,input_param_2);\n            FUNC_0800708c();\n            final_result_1 = calculate_final_value_08006d68();\n          }\n        }\n        else {\n          final_result_1 = 0x3ff921fb54442d18;\n        }\n        result_4 = (int)((ulonglong)final_result_1 >> 0x20);\n        result_1 = (undefined4)final_result_1;\n        if (result_2 == 1) {\n          return CONCAT44(result_4 + -0x80000000,result_1);\n        }\n        if (result_2 == 2) {\n          final_result_2 = calculate_product_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result_1 = 0x400921fb54442d18;\n        }\n        else {\n          if (result_2 == 0) {\n            return final_result_1;\n          }\n          final_result_1 = calculate_product_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result_2 = 0x400921fb54442d18;\n        }\n        final_result_1 = calculate_product_08000168((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                             (int)((ulonglong)final_result_2 >> 0x20));\n        return final_result_1;\n      }\n    }\n    if ((int)input_param_2 < 0) {\n      final_result_1 = 0xbff921fb54442d18;\n    }\n    else {\n      final_result_1 = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "iVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "final_result_1",
                "uVar7": "final_result_2"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char flag;\n  int result;\n  int *ptr_result;\n  undefined4 *ptr_output;\n  int validation_result;\n  undefined4 upper_bits;\n  undefined4 input_type;\n  undefined8 output_value;\n  undefined8 temp_value;\n  undefined4 initialize_data_type;\n  undefined *initialize_error_message;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined8 output_variable;\n  int initialize_result;\n  \n  output_value = calculate_float_08006228();\n  flag = DAT_20000224;\n  upper_bits = (undefined4)((ulonglong)output_value >> 0x20);\n  input_type = (undefined4)output_value;\n  if (DAT_20000224 == -1) {\n    return output_value;\n  }\n  result = check_parameters_08000a04(input_3,input_4,input_3,input_4);\n  if (result != 0) {\n    return output_value;\n  }\n  result = check_parameters_08000a04(input_1,input_2,input_1,input_2);\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_3_copy = input_3;\n  input_4_copy = input_4;\n  if (result == 0) {\n    result = validate_and_check_input_080009a0(input_1,input_2,0,0);\n    if (result != 0) {\n      result = validate_and_check_input_080009a0(input_3,input_4,0,0);\n      if (result != 0) {\n        initialize_data_type = 1;\n        initialize_error_message = &DAT_080073b1;\n        output_variable = 0;\n        initialize_result = 0;\n        if (flag != '\\0') {\n          output_variable = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = binary_check_08007092(input_3,input_4);\n      if (result == 0) {\n        return output_value;\n      }\n      result = is_cy_null_080009b4(input_3,input_4,0,0);\n      if (result == 0) {\n        return output_value;\n      }\n      initialize_data_type = 1;\n      initialize_error_message = &DAT_080073b1;\n      initialize_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      output_variable = 0xfff0000000000000;\n      initialize_result = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = binary_check_08007092(input_type,upper_bits);\n    if (((result != 0) || (validation_result = binary_check_08007092(input_1,input_2), validation_result == 0)) ||\n       (validation_result = binary_check_08007092(input_3,input_4), validation_result == 0)) {\n      result = validate_and_check_input_080009a0(input_type,upper_bits,0,0);\n      if (result == 0) {\n        return output_value;\n      }\n      result = binary_check_08007092(input_1,input_2);\n      if (result == 0) {\n        return output_value;\n      }\n      result = binary_check_08007092(input_3,input_4);\n      if (result == 0) {\n        return output_value;\n      }\n      initialize_data_type = 4;\n      initialize_error_message = &DAT_080073b1;\n      initialize_result = 0;\n      output_variable._0_4_ = 0;\n      output_variable._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    initialize_result = check_parameters_08000a04(input_type,upper_bits);\n    flag = DAT_20000224;\n    if (initialize_result != 0) {\n      initialize_error_message = &DAT_080073b1;\n      initialize_data_type = 1;\n      initialize_result = result;\n      if (DAT_20000224 != '\\0') {\n        output_variable = calculate_floating_point_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      initialize_error_message = &DAT_080073b1;\n      initialize_data_type = 1;\n      output_variable = 0;\n      goto LAB_08005978;\n    }\n    initialize_error_message = &DAT_080073b1;\n    initialize_data_type = 3;\n    if (DAT_20000224 == '\\0') {\n      output_variable._0_4_ = 0xe0000000;\n      output_variable._4_4_ = 0x47efffff;\n      result = is_cy_null_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        output_value = calculate_value_080004d0(input_3,input_4,0,0x3fe00000);\n        temp_value = calculate_result_08005900_080070b0();\n        result = validate_and_check_input_080009a0((int)output_value,(int)((ulonglong)output_value >> 0x20),(int)temp_value,\n                             (int)((ulonglong)temp_value >> 0x20));\n        if (result == 0) {\n          output_variable._0_4_ = 0xe0000000;\n          output_variable._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_program_0800709e(&initialize_data_type);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      output_variable._0_4_ = 0;\n      output_variable._4_4_ = 0x7ff00000;\n      result = is_cy_null_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        output_value = calculate_value_080004d0(input_3,input_4,0,0x3fe00000);\n        temp_value = calculate_result_08005900_080070b0();\n        result = validate_and_check_input_080009a0((int)output_value,(int)((ulonglong)output_value >> 0x20),(int)temp_value,\n                             (int)((ulonglong)temp_value >> 0x20));\n        if (result == 0) {\n          output_variable._0_4_ = 0;\n          output_variable._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptr_output = (undefined4 *)get_data_from_memory_080072ac();\n    input_type = 0x22;\n  }\n  else {\n    result = validate_and_check_input_080009a0(input_3,input_4,0,0);\n    if (result == 0) {\n      return output_value;\n    }\n    initialize_data_type = 1;\n    initialize_error_message = &DAT_080073b1;\n    output_variable = 0x3ff0000000000000;\n    initialize_result = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_program_0800709e(&initialize_data_type);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptr_output = (undefined4 *)get_data_from_memory_080072ac();\n    input_type = 0x21;\n  }\n  *ptr_output = input_type;\nLAB_080059d0:\n  if (initialize_result != 0) {\n    ptr_result = (int *)get_data_from_memory_080072ac();\n    *ptr_result = initialize_result;\n  }\n  return output_variable;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptr_result",
                "puVar4": "ptr_output",
                "iVar5": "validation_result",
                "uVar6": "upper_bits",
                "uVar7": "input_type",
                "uVar8": "output_value",
                "uVar9": "temp_value",
                "local_50": "initialize_data_type",
                "local_4c": "initialize_error_message",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_3_copy",
                "uStack_3c": "input_4_copy",
                "local_38": "output_variable",
                "local_30": "initialize_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "perform_calculation_08005bc8",
            "code": "\nundefined8 performCalculation_08005bc8(undefined4 inputParameter1,undefined4 inputParameter2)\n\n{\n  char conditionVariable;\n  int resultVariable;\n  int *initializedDataPointer;\n  undefined4 *initializedFloatPointer;\n  undefined8 finalResult;\n  undefined4 flag;\n  undefined *dataPointer;\n  undefined4 tempParameter1;\n  undefined4 tempParameter2;\n  undefined4 tempParameter1_2;\n  undefined4 tempParameter2_2;\n  undefined8 floatingPointResult;\n  int checkResult;\n  \n  finalResult = calculate_float_08006c0c();\n  conditionVariable = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return finalResult;\n  }\n  checkResult = check_parameters_08000a04(inputParameter1,inputParameter2,inputParameter1,inputParameter2);\n  if (checkResult != 0) {\n    return finalResult;\n  }\n  resultVariable = is_cy_null_080009b4(inputParameter1,inputParameter2,0,0);\n  if (resultVariable == 0) {\n    return finalResult;\n  }\n  flag = 1;\n  dataPointer = &DAT_080073b5;\n  tempParameter1 = inputParameter1;\n  tempParameter2 = inputParameter2;\n  tempParameter1_2 = inputParameter1;\n  tempParameter2_2 = inputParameter2;\n  if (conditionVariable == '\\0') {\n    floatingPointResult = 0;\nLAB_08005c26:\n    resultVariable = initialize_program_0800709e(&flag);\n    if (resultVariable != 0) goto LAB_08005c2e;\n  }\n  else {\n    floatingPointResult = calculate_floating_point_08000724(0,0,0,0);\n    if (conditionVariable != '\\x02') goto LAB_08005c26;\n  }\n  initializedFloatPointer = (undefined4 *)get_data_from_memory_080072ac();\n  *initializedFloatPointer = 0x21;\nLAB_08005c2e:\n  if (checkResult != 0) {\n    initializedDataPointer = (int *)get_data_from_memory_080072ac();\n    *initializedDataPointer = checkResult;\n  }\n  return floatingPointResult;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "perform_calculation_08005bc8",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "cVar1": "conditionVariable",
                "iVar2": "resultVariable",
                "piVar3": "initializedDataPointer",
                "puVar4": "initializedFloatPointer",
                "uVar5": "finalResult",
                "local_50": "flag",
                "local_4c": "dataPointer",
                "local_48": "tempParameter1",
                "uStack_44": "tempParameter2",
                "local_40": "tempParameter1_2",
                "uStack_3c": "tempParameter2_2",
                "local_38": "floatingPointResult",
                "local_30": "checkResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_improved_value_08005c70",
            "code": "\nundefined8 calculate_improved_value_08005c70(uint operand1,uint operand2)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp_var;\n  undefined8 result_value;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  \n  result_value = CONCAT44(operand2,operand1);\n  temp_var = operand2 & 0x7fffffff;\n  if (temp_var < 0x3ff00000) {\n    if (temp_var < 0x3fe00000) {\n      if (0x3e3fffff < temp_var) {\n        temp_result1 = calculate_value_080004d0(operand1,operand2,operand1,operand2);\n        temp6 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n        temp5 = (undefined4)temp_result1;\n        temp_result1 = calculate_value_080004d0(temp5,temp6,0xdfdf709,0x3f023de1);\n        temp_result1 = calculate_sum_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_product_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_sum_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_product_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_sum_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_value_080004d0(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        temp_result2 = calculate_product_08000168((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result2 = calculate_value_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_sum_0800016c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result2 = calculate_value_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_product_08000168((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result2 = calculate_value_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_sum_0800016c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        temp_result1 = calculate_floating_point_08000724((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                              (int)((ulonglong)temp_result2 >> 0x20));\n        temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),operand1,operand2);\n        goto LAB_08005cba;\n      }\n      temp_result1 = calculate_sum_0800016c(operand1,operand2,0x8800759c,0x7e37e43c);\n      result = check_if_params_valid_080009f0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n      if (result != 0) {\n        return result_value;\n      }\n    }\n    result_value = FUNC_0800708c(operand1,operand2);\n    result_value = calculate_product_08000168(0,0x3ff00000,(int)result_value,(int)((ulonglong)result_value >> 0x20));\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp5 = (undefined4)result_value;\n    result_value = calculate_value_080004d0(temp5,temp1,0xdfdf709,0x3f023de1);\n    result_value = calculate_sum_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x7501b288,0x3f49efe0);\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp1);\n    result_value = calculate_product_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),0xb5688f3b,0x3fa48228);\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp1);\n    result_value = calculate_sum_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0xe884455,0x3fc9c155);\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp1);\n    result_value = calculate_product_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp1);\n    result_value = calculate_sum_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),0x55555555,0x3fc55555);\n    result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)result_value >> 0x20);\n    temp_result1 = calculate_value_080004d0(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    temp_result1 = calculate_product_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_sum_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_product_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result1 = calculate_value_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_sum_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    temp_result2 = calculate_float_08006c0c(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    temp6 = (undefined4)temp_result2;\n    if (temp_var < 0x3fef3333) {\n      result_value = calculate_floating_point_08000724((int)result_value,temp2,(int)temp_result1,temp3);\n      temp_result1 = calculate_sum_0800016c(temp6,temp4,temp6,temp4);\n      result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = calculate_value_080004d0(0,temp4,0,temp4);\n      temp_result1 = calculate_product_08000168(temp5,temp1,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      temp_result2 = calculate_sum_0800016c(temp6,temp4,0,temp4);\n      temp_result1 = calculate_floating_point_08000724((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                            (int)((ulonglong)temp_result2 >> 0x20));\n      temp5 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n      temp_result1 = calculate_sum_0800016c((int)temp_result1,temp5,(int)temp_result1,temp5);\n      temp_result1 = calculate_product_08000168(0x33145c07,0x3c91a626,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result_value = calculate_product_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = calculate_sum_0800016c(0,temp4,0,temp4);\n      temp_result1 = calculate_product_08000168(0x54442d18,0x3fe921fb,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result_value = calculate_product_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      result_value = calculate_floating_point_08000724((int)result_value,temp2,(int)temp_result1,temp3);\n      result_value = calculate_value_080004d0((int)result_value,(int)((ulonglong)result_value >> 0x20),temp6,temp4);\n      result_value = calculate_sum_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)result_value >> 0x20);\n      result_value = calculate_sum_0800016c((int)result_value,temp5,(int)result_value,temp5);\n      result_value = calculate_product_08000168((int)result_value,(int)((ulonglong)result_value >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    result_value = calculate_product_08000168(0x54442d18,temp5,(int)result_value,(int)((ulonglong)result_value >> 0x20));\n    if ((int)operand2 < 1) {\n      result_value = CONCAT44((int)((ulonglong)result_value >> 0x20) + -0x80000000,(int)result_value);\n    }\n  }\n  else {\n    if ((temp_var + 0xc0100000 | operand1) != 0) {\n      result_value = calculate_product_08000168(operand1,operand2,operand1,operand2);\n      temp5 = (undefined4)((ulonglong)result_value >> 0x20);\n      result_value = calculate_floating_point_08000724((int)result_value,temp5,(int)result_value,temp5);\n      return result_value;\n    }\n    result_value = calculate_value_080004d0(operand1,operand2,0x54442d18,0x3ff921fb);\n    temp_result1 = calculate_value_080004d0(operand1,operand2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result_value = calculate_sum_0800016c((int)result_value,(int)((ulonglong)result_value >> 0x20),(int)temp_result1,\n                         (int)((ulonglong)temp_result1 >> 0x20));\n  }\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_improved_value_08005c70",
                "param_1": "operand1",
                "param_2": "operand2",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp_var",
                "uVar9": "result_value",
                "uVar10": "temp_result1",
                "uVar11": "temp_result2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_value_08006070",
            "code": "\nundefined8 calculate_value_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 final_result;\n  undefined8 product_result;\n  \n  result5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result3 = input_2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result = calculate_sum_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result = calculate_final_value_08006d68();\n    return final_result;\n  }\n  result2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input_4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result = calculate_final_value_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)final_result >> 0x20);\n        result1 = (undefined4)final_result;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          product_result = calculate_product_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return final_result;\n          }\n          final_result = calculate_product_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          product_result = 0x400921fb54442d18;\n        }\n        final_result = calculate_product_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)product_result,\n                             (int)((ulonglong)product_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_value_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "final_result",
                "uVar7": "product_result"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_float_08006228",
            "code": "\nuint calculate_float_08006228(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  uint result_8;\n  undefined4 result_9;\n  int temp_var_1;\n  int temp_var_2;\n  undefined4 temp_var_3;\n  uint temp_var_4;\n  undefined4 temp_var_5;\n  int temp_var_6;\n  uint temp_var_7;\n  undefined4 temp_var_8;\n  undefined4 temp_var_9;\n  undefined8 temp_var_10;\n  undefined8 temp_var_11;\n  undefined8 temp_var_12;\n  undefined8 temp_var_13;\n  longlong temp_var_14;\n  ulonglong temp_var_15;\n  undefined8 temp_var_16;\n  uint flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  int flag_4;\n  \n  temp_var_11 = CONCAT44(input_2,input_1);\n  temp_var_7 = input_4 & 0x7fffffff;\n  if ((temp_var_7 | input_3) == 0) {\n    return 0;\n  }\n  temp_var_4 = input_2 & 0x7fffffff;\n  if (temp_var_4 < 0x7ff00001) {\n    if (temp_var_4 == 0x7ff00000) {\n      if (input_1 == 0) {\n        if (0x7ff00000 < temp_var_7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp_var_7 != 0x7ff00000) || (input_3 == 0)) {\n          if (-1 < (int)input_2) goto LAB_0800632a;\n          if (temp_var_7 < 0x43400000) {\n            if (temp_var_7 < 0x3ff00000) {\nLAB_0800632a:\n              flag_1 = 0;\n              goto LAB_080062ba;\n            }\n            temp_var_1 = ((int)temp_var_7 >> 0x14) + -0x3ff;\n            if (0x14 < temp_var_1) {\n              result_2 = input_3 >> (0x34U - temp_var_1 & 0xff);\n              if (input_3 == result_2 << (0x34U - temp_var_1 & 0xff)) {\n                flag_1 = 2 - (result_2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input_3 == 0) {\n              result_2 = (int)temp_var_7 >> (0x14U - temp_var_1 & 0xff);\n              if (temp_var_7 == result_2 << (0x14U - temp_var_1 & 0xff)) {\n                flag_1 = 2 - (result_2 & 1);\n              }\n              else {\n                flag_1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            flag_1 = 0;\n          }\n          else {\n            flag_1 = 2;\nLAB_080062ba:\n            if (input_3 == 0) {\n              if (temp_var_7 == 0x7ff00000) {\n                if ((temp_var_4 + 0xc0100000 | input_1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp_var_4) {\n                  if ((int)input_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp_var_7 == 0x3ff00000) {\n                if (-1 < (int)input_4) {\n                  return input_1;\n                }\n                temp_var_10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input_4 == 0x40000000) goto LAB_0800634a;\n              if ((input_4 == 0x3fe00000) && (-1 < (int)input_2)) {\n                temp_var_7 = calculate_float_08006228_08006c0c(input_1,input_2);\n                return temp_var_7;\n              }\n            }\n          }\n          temp_var_10 = FUNC_0800708c(input_1,input_2);\n          temp_var_8 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n          result_1 = (undefined4)temp_var_10;\n          temp_var_15 = CONCAT44(input_2,result_1) & 0x7fffffffffffffff;\n          if ((input_1 == 0) && ((temp_var_4 == 0 || ((input_2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input_4 < 0) {\n              temp_var_10 = calculate_float_08006228ing_point_08000724(0,0x3ff00000,result_1,temp_var_8);\n            }\n            if (-1 < (int)input_2) {\n              return (uint)temp_var_10;\n            }\n            if ((flag_1 | temp_var_4 + 0xc0100000) != 0) {\n              return (uint)temp_var_10;\n            }\n          }\n          else {\n            result_2 = 0xffffffff - ((int)input_2 >> 0x1f);\n            temp_var_10 = temp_var_11;\n            if ((flag_1 | result_2) != 0) {\n              if (temp_var_7 < 0x41e00001) {\n                flag_4 = 0;\n                if (temp_var_4 < 0x100000) {\n                  temp_var_15 = calculate_value_080004d0();\n                  flag_4 = -0x35;\n                }\n                temp_var_7 = (uint)(temp_var_15 >> 0x20);\n                result_1 = (undefined4)temp_var_15;\n                flag_4 = ((int)temp_var_7 >> 0x14) + -0x3ff + flag_4;\n                temp_var_7 = temp_var_7 & 0xfffff;\n                temp_var_4 = temp_var_7 | 0x3ff00000;\n                if (temp_var_7 < 0x3988f) {\nLAB_08006628:\n                  temp_var_1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp_var_7) {\n                    temp_var_4 = temp_var_4 - 0x100000;\n                    flag_4 = flag_4 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp_var_1 = 1;\n                }\n                temp_var_2 = temp_var_1 * 8;\n                temp_var_3 = (&DAT_080073c0)[temp_var_1 * 2];\n                temp_var_5 = (&DAT_080073c4)[temp_var_1 * 2];\n                temp_var_11 = calculate_product_08000168(result_1,temp_var_4,temp_var_3,temp_var_5);\n                temp_var_9 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                temp_var_10 = calculate_sum_0800016c(result_1,temp_var_4,temp_var_3,temp_var_5);\n                temp_var_10 = calculate_float_08006228ing_point_08000724(0,0x3ff00000,(int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20));\n                result_4 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_12 = calculate_value_080004d0((int)temp_var_11,temp_var_9,(int)temp_var_10,result_4);\n                result_5 = (undefined4)((ulonglong)temp_var_12 >> 0x20);\n                temp_var_8 = (undefined4)temp_var_12;\n                temp_var_12 = calculate_value_080004d0(0,result_5);\n                temp_var_11 = calculate_product_08000168((int)temp_var_11,temp_var_9,(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_12 = calculate_product_08000168(0,((int)temp_var_4 >> 1 | 0x20000000U) + 0x80000 + temp_var_1 * 0x40000,\n                                      temp_var_3,temp_var_5);\n                temp_var_12 = calculate_product_08000168(result_1,temp_var_4,(int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_12 = calculate_value_080004d0((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),0,result_5);\n                temp_var_11 = calculate_product_08000168((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_11 = calculate_value_080004d0((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),(int)temp_var_10,result_4\n                                     );\n                temp_var_9 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                temp_var_10 = calculate_value_080004d0(temp_var_8,result_5);\n                result_4 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                result_1 = (undefined4)temp_var_10;\n                temp_var_10 = calculate_value_080004d0(result_1,result_4,0x4a454eef,0x3fca7e28);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),result_1,result_4);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),result_1,result_4);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),result_1,result_4);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),result_1,result_4);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp_var_12 = calculate_value_080004d0(result_1,result_4,result_1,result_4);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_12 = calculate_sum_0800016c(temp_var_8,result_5,0,result_5);\n                temp_var_12 = calculate_value_080004d0((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),(int)temp_var_11,\n                                      temp_var_9);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),(int)temp_var_10,\n                                      (int)((ulonglong)temp_var_10 >> 0x20));\n                result_1 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_12 = calculate_value_080004d0(0,result_5,0,result_5);\n                result_4 = (undefined4)((ulonglong)temp_var_12 >> 0x20);\n                temp_var_13 = calculate_sum_0800016c((int)temp_var_12,result_4,0,0x40080000);\n                calculate_sum_0800016c((int)temp_var_13,(int)((ulonglong)temp_var_13 >> 0x20),(int)temp_var_10,result_1);\n                temp_var_13 = calculate_value_080004d0(0,result_5,0,result_6);\n                temp_var_3 = (undefined4)((ulonglong)temp_var_13 >> 0x20);\n                temp_var_16 = calculate_product_08000168(0,result_6,0,0x40080000);\n                temp_var_12 = calculate_product_08000168((int)temp_var_16,(int)((ulonglong)temp_var_16 >> 0x20),(int)temp_var_12,result_4\n                                     );\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,result_1,(int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20)\n                                     );\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),temp_var_8,result_5);\n                temp_var_11 = calculate_value_080004d0((int)temp_var_11,temp_var_9,0,result_6);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_11,\n                                      (int)((ulonglong)temp_var_11 >> 0x20));\n                result_1 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                calculate_sum_0800016c((int)temp_var_13,temp_var_3,(int)temp_var_10,result_1);\n                temp_var_11 = calculate_value_080004d0(0,result_7,0xe0000000,0x3feec709);\n                temp_var_12 = calculate_product_08000168(0,result_7,(int)temp_var_13,temp_var_3);\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,result_1,(int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20)\n                                     );\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp_var_12 = calculate_value_080004d0(0,result_7,0x145b01f5,0xbe3e2fe0);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp_var_2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp_var_2));\n                temp_var_12 = shift_and_merge_08000404(flag_4);\n                result_1 = (undefined4)((ulonglong)temp_var_12 >> 0x20);\n                temp_var_8 = *(undefined4 *)(&DAT_080073d0 + temp_var_2);\n                temp_var_9 = *(undefined4 *)(&DAT_080073d4 + temp_var_2);\n                temp_var_13 = calculate_sum_0800016c((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),(int)temp_var_10,\n                                      (int)((ulonglong)temp_var_10 >> 0x20));\n                temp_var_13 = calculate_sum_0800016c((int)temp_var_13,(int)((ulonglong)temp_var_13 >> 0x20),temp_var_8,temp_var_9);\n                calculate_sum_0800016c((int)temp_var_13,(int)((ulonglong)temp_var_13 >> 0x20),(int)temp_var_12,result_1);\n                temp_var_12 = calculate_product_08000168(0,result_8,(int)temp_var_12,result_1);\n                temp_var_14 = calculate_product_08000168((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),temp_var_8,temp_var_9);\n                temp_var_7 = result_8;\n              }\n              else {\n                if (0x43f00000 < temp_var_7) {\n                  if (temp_var_4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input_4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input_1 = 0x8800759c;\n                  input_2 = 0x7e37e43c;\n                  temp_var_11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp_var_4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input_4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp_var_4) goto LAB_08006418;\n                temp_var_11 = calculate_product_08000168(result_1,temp_var_8,0,0x3ff00000);\n                temp_var_8 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                result_1 = (undefined4)temp_var_11;\n                temp_var_11 = calculate_value_080004d0(result_1,temp_var_8,0x60000000,0x3ff71547);\n                temp_var_10 = calculate_value_080004d0(result_1,temp_var_8,0xf85ddf44,0x3e54ae0b);\n                temp_var_12 = calculate_value_080004d0(result_1,temp_var_8,0,0x3fd00000);\n                temp_var_12 = calculate_product_08000168(0x55555555,0x3fd55555,(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_12 = calculate_value_080004d0((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),result_1,temp_var_8);\n                temp_var_12 = calculate_product_08000168(0,0x3fe00000,(int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_13 = calculate_value_080004d0(result_1,temp_var_8,result_1,temp_var_8);\n                temp_var_12 = calculate_value_080004d0((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),(int)temp_var_13,\n                                      (int)((ulonglong)temp_var_13 >> 0x20));\n                temp_var_12 = calculate_value_080004d0((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                calculate_sum_0800016c((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),(int)temp_var_10,\n                             (int)((ulonglong)temp_var_10 >> 0x20));\n                temp_var_14 = (ulonglong)result_3 << 0x20;\n                temp_var_7 = result_3;\n              }\n              temp_var_11 = calculate_product_08000168((int)temp_var_14,(int)((ulonglong)temp_var_14 >> 0x20),(int)temp_var_11,\n                                    (int)((ulonglong)temp_var_11 >> 0x20));\n              temp_var_11 = calculate_product_08000168((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_11,\n                                    (int)((ulonglong)temp_var_11 >> 0x20));\n              if ((flag_1 - 1 | result_2) == 0) {\n                input_2 = 0xbff00000;\n              }\n              else {\n                input_2 = 0x3ff00000;\n              }\n              flag_1 = 0;\n              temp_var_10 = calculate_product_08000168(input_3,input_4,0,input_4);\n              temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0,temp_var_7);\n              temp_var_11 = calculate_value_080004d0((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),input_3,input_4);\n              temp_var_11 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_11,\n                                    (int)((ulonglong)temp_var_11 >> 0x20));\n              temp_var_9 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n              result_1 = (undefined4)temp_var_11;\n              temp_var_11 = calculate_value_080004d0(0,temp_var_7,0,input_4);\n              result_4 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n              temp_var_8 = (undefined4)temp_var_11;\n              temp_var_14 = calculate_sum_0800016c(result_1,temp_var_9,temp_var_8,result_4);\n              temp_var_4 = (uint)((ulonglong)temp_var_14 >> 0x20);\n              temp_var_7 = (uint)temp_var_14;\n              if (0x408fffffffffffff < temp_var_14) {\n                if ((temp_var_4 + 0xbf700000 | temp_var_7) == 0) {\n                  temp_var_10 = calculate_sum_0800016c(result_1,temp_var_9,0x652b82fe,0x3c971547);\n                  temp_var_12 = calculate_product_08000168(temp_var_7,temp_var_4,temp_var_8,result_4);\n                  temp_var_1 = check_if_params_valid_080009f0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_12,\n                                       (int)((ulonglong)temp_var_12 >> 0x20));\n                  if (temp_var_1 == 0) goto LAB_08006968;\n                }\n                temp_var_11 = calculate_value_080004d0(0,input_2,0x8800759c,0x7e37e43c);\n                input_1 = 0x8800759c;\n                input_2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp_var_4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp_var_4 & 0x7fffffff) < 0x3fe00001) {\n                  temp_var_1 = 0;\n                }\n                else {\n                  temp_var_4 = (0x100000 >> (((int)(temp_var_4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp_var_4;\n                  temp_var_7 = (temp_var_4 * 2 >> 0x15) - 0x3ff;\n                  temp_var_1 = (int)(temp_var_4 & 0xfffff | 0x100000) >> (0x14 - temp_var_7 & 0xff);\n                  if (temp_var_14 < 0) {\n                    temp_var_1 = -temp_var_1;\n                  }\n                  temp_var_11 = calculate_product_08000168(temp_var_8,result_4,0,temp_var_4 & ~(0xfffff >> (temp_var_7 & 0xff)));\n                }\n                flag_3 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                flag_2 = (undefined4)temp_var_11;\n                calculate_sum_0800016c(flag_2,flag_3,result_1,temp_var_9);\n                temp_var_11 = calculate_value_080004d0(0,result_9,0,0x3fe62e43);\n                temp_var_8 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                temp_var_10 = calculate_product_08000168(0,result_9,flag_2,flag_3);\n                temp_var_10 = calculate_product_08000168(result_1,temp_var_9,(int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20));\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp_var_12 = calculate_value_080004d0(0,result_9,0xca86c39,0xbe205c61);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_12,\n                                      (int)((ulonglong)temp_var_12 >> 0x20));\n                temp_var_9 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_12 = calculate_sum_0800016c((int)temp_var_11,temp_var_8,(int)temp_var_10,temp_var_9);\n                result_4 = (undefined4)((ulonglong)temp_var_12 >> 0x20);\n                result_1 = (undefined4)temp_var_12;\n                temp_var_11 = calculate_product_08000168(result_1,result_4,(int)temp_var_11,temp_var_8);\n                temp_var_11 = calculate_product_08000168((int)temp_var_10,temp_var_9,(int)temp_var_11,\n                                      (int)((ulonglong)temp_var_11 >> 0x20));\n                temp_var_9 = (undefined4)((ulonglong)temp_var_11 >> 0x20);\n                temp_var_10 = calculate_value_080004d0(result_1,result_4,result_1,result_4);\n                result_5 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_8 = (undefined4)temp_var_10;\n                temp_var_10 = calculate_value_080004d0(temp_var_8,result_5,0x72bea4d0,0x3e663769);\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),temp_var_8,result_5);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),temp_var_8,result_5);\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),temp_var_8,result_5);\n                temp_var_10 = calculate_sum_0800016c((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp_var_10 = calculate_value_080004d0((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),temp_var_8,result_5);\n                temp_var_10 = calculate_product_08000168(result_1,result_4,(int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20));\n                temp_var_8 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_12 = calculate_value_080004d0(result_1,result_4,(int)temp_var_10,temp_var_8);\n                temp_var_10 = calculate_product_08000168((int)temp_var_10,temp_var_8,0,0x40000000);\n                temp_var_10 = calculate_float_08006228ing_point_08000724((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),(int)temp_var_10,\n                                      (int)((ulonglong)temp_var_10 >> 0x20));\n                temp_var_12 = calculate_value_080004d0(result_1,result_4,(int)temp_var_11,temp_var_9);\n                temp_var_11 = calculate_sum_0800016c((int)temp_var_12,(int)((ulonglong)temp_var_12 >> 0x20),(int)temp_var_11,\n                                      temp_var_9);\n                temp_var_11 = calculate_product_08000168((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_11,\n                                      (int)((ulonglong)temp_var_11 >> 0x20));\n                temp_var_11 = calculate_product_08000168((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),result_1,result_4);\n                temp_var_10 = calculate_product_08000168(0,0x3ff00000,(int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20));\n                temp_var_2 = (int)((ulonglong)temp_var_10 >> 0x20);\n                temp_var_6 = temp_var_2 + temp_var_1 * 0x100000;\n                temp_var_11 = CONCAT44(temp_var_6,(int)temp_var_10);\n                input_1 = flag_1;\n                if (temp_var_6 < 0x100000) {\n                  temp_var_11 = calculate_result_080071c0((int)temp_var_10,temp_var_2,temp_var_1);\n                }\n              }\n              else {\n                if ((temp_var_4 + 0x3f6f3400 | temp_var_7) == 0) {\n                  temp_var_10 = calculate_product_08000168(temp_var_7,temp_var_4,temp_var_8,result_4);\n                  temp_var_1 = validate_and_combine_flags_080009c8(result_1,temp_var_9,(int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20));\n                  if (temp_var_1 == 0) goto LAB_08006968;\n                }\n                temp_var_11 = calculate_value_080004d0(0,input_2,0xc2f8f359,0x1a56e1f);\n                input_1 = 0xc2f8f359;\n                input_2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp_var_7 = calculate_value_080004d0((int)temp_var_11,(int)((ulonglong)temp_var_11 >> 0x20),input_1,input_2);\n              return temp_var_7;\n            }\n          }\n          result_1 = (undefined4)((ulonglong)temp_var_10 >> 0x20);\n          temp_var_10 = calculate_product_08000168((int)temp_var_10,result_1,(int)temp_var_10,result_1);\n          temp_var_11 = temp_var_10;\nLAB_08006320:\n          temp_var_7 = calculate_float_08006228ing_point_08000724((int)temp_var_10,(int)((ulonglong)temp_var_10 >> 0x20),(int)temp_var_11,\n                                (int)((ulonglong)temp_var_11 >> 0x20));\n          return temp_var_7;\n        }\n      }\n    }\n    else if (temp_var_7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp_var_4 + 0xc0100000 | input_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp_var_7 = get_positive_infinity_080070a4(&DAT_0800737e);\n  return temp_var_7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_float_08006228",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "extraout_r1": "result_3",
                "uVar3": "result_4",
                "uVar4": "result_5",
                "extraout_r1_00": "result_6",
                "extraout_r1_01": "result_7",
                "extraout_r1_02": "result_8",
                "extraout_r1_03": "result_9",
                "iVar5": "temp_var_1",
                "iVar6": "temp_var_2",
                "uVar7": "temp_var_3",
                "uVar8": "temp_var_4",
                "uVar9": "temp_var_5",
                "iVar10": "temp_var_6",
                "uVar11": "temp_var_7",
                "uVar12": "temp_var_8",
                "uVar13": "temp_var_9",
                "uVar14": "temp_var_10",
                "uVar15": "temp_var_11",
                "uVar16": "temp_var_12",
                "uVar17": "temp_var_13",
                "lVar18": "temp_var_14",
                "uVar19": "temp_var_15",
                "uVar20": "temp_var_16",
                "local_70": "flag_1",
                "local_68": "flag_2",
                "local_64": "flag_3",
                "local_54": "flag_4"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculate_float_08006c0c(uint input_1,uint input_2)\n\n{\n  undefined4 value_1;\n  uint value_2;\n  int shift_val_1;\n  int shift_val_2;\n  uint temp_val_1;\n  uint temp_val_2;\n  int sum_val_1;\n  uint sum_val_2;\n  uint temp_val_3;\n  int temp_val_4;\n  uint temp_val_5;\n  undefined8 result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    result = calculate_value_080004d0(input_1,input_2,input_1,input_2);\n    result = calculate_sum_0800016c(input_1,input_2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != 0) {\n      result = calculate_product_08000168(input_1,input_2,input_1,input_2);\n      value_1 = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_float_08006c0cing_point_08000724((int)result,value_1,(int)result,value_1);\n      return result;\n    }\n  }\n  shift_val_1 = (int)input_2 >> 0x14;\n  if (shift_val_1 == 0) {\n    while (input_2 == 0) {\n      shift_val_1 = shift_val_1 + -0x15;\n      input_2 = input_1 >> 0xb;\n      input_1 = input_1 << 0x15;\n    }\n    value_2 = 0;\n    for (; -1 < (int)(input_2 << 0xb); input_2 = input_2 << 1) {\n      value_2 = value_2 + 1;\n    }\n    shift_val_1 = shift_val_1 - (value_2 - 1);\n    input_2 = input_2 | input_1 >> (0x20 - value_2 & 0xff);\n    input_1 = input_1 << (value_2 & 0xff);\n  }\n  sum_val_1 = 0;\n  value_2 = input_2 & 0xfffff | 0x100000;\n  if ((shift_val_1 + -0x3ff) * -0x80000000 < 0) {\n    value_2 = value_2 * 2 - ((int)input_1 >> 0x1f);\n    input_1 = input_1 << 1;\n  }\n  value_2 = value_2 * 2 - ((int)input_1 >> 0x1f);\n  shift_val_2 = 0x16;\n  temp_val_1 = 0;\n  sum_val_2 = 0x200000;\n  input_1 = input_1 << 1;\n  do {\n    temp_val_4 = temp_val_1 + sum_val_2;\n    if (temp_val_4 <= (int)value_2) {\n      value_2 = value_2 - temp_val_4;\n      temp_val_1 = temp_val_4 + sum_val_2;\n      sum_val_1 = sum_val_1 + sum_val_2;\n    }\n    shift_val_2 = shift_val_2 + -1;\n    value_2 = value_2 * 2 - ((int)input_1 >> 0x1f);\n    sum_val_2 = sum_val_2 >> 1;\n    input_1 = input_1 << 1;\n  } while (shift_val_2 != 0);\n  temp_val_4 = 0x20;\n  temp_val_3 = 0x80000000;\n  sum_val_2 = 0;\n  shift_val_2 = 0;\n  do {\n    temp_val_5 = temp_val_3 + shift_val_2;\n    temp_val_2 = temp_val_1;\n    if (((int)temp_val_1 < (int)value_2) || ((value_2 == temp_val_1 && (temp_val_5 <= input_1)))) {\n      shift_val_2 = temp_val_5 + temp_val_3;\n      if (((int)temp_val_5 < 0) && (-1 < shift_val_2)) {\n        temp_val_2 = temp_val_1 + 1;\n      }\n      value_2 = value_2 - temp_val_1;\n      if (input_1 < temp_val_5) {\n        value_2 = value_2 - 1;\n      }\n      input_1 = input_1 - temp_val_5;\n      sum_val_2 = sum_val_2 + temp_val_3;\n    }\n    value_2 = value_2 * 2 - ((int)input_1 >> 0x1f);\n    temp_val_4 = temp_val_4 + -1;\n    input_1 = input_1 << 1;\n    temp_val_3 = temp_val_3 >> 1;\n    temp_val_1 = temp_val_2;\n  } while (temp_val_4 != 0);\n  if ((input_1 | value_2) != 0) {\n    if (sum_val_2 == 0xffffffff) {\n      sum_val_1 = sum_val_1 + 1;\n      sum_val_2 = 0;\n    }\n    else {\n      sum_val_2 = sum_val_2 + 1 & 0xfffffffe;\n    }\n  }\n  sum_val_2 = sum_val_2 >> 1;\n  if (sum_val_1 << 0x1f < 0) {\n    sum_val_2 = sum_val_2 | 0x80000000;\n  }\n  return CONCAT44((sum_val_1 >> 1) + 0x3fe00000 + (shift_val_1 + -0x3ff >> 1) * 0x100000,sum_val_2);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "value_1",
                "uVar2": "value_2",
                "iVar3": "shift_val_1",
                "iVar4": "shift_val_2",
                "uVar5": "temp_val_1",
                "uVar6": "temp_val_2",
                "iVar7": "sum_val_1",
                "uVar8": "sum_val_2",
                "uVar9": "temp_val_3",
                "iVar10": "temp_val_4",
                "uVar11": "temp_val_5",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_final_value_08006d68",
            "code": "\nundefined8 calculateFinalValue_08006d68(int inputParam1,uint inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int result;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  uint modifiedParam2;\n  undefined8 finalValue;\n  undefined8 tempVar7;\n  \n  finalValue = CONCAT44(inputParam2,inputParam1);\n  modifiedParam2 = inputParam2 & 0x7fffffff;\n  if (modifiedParam2 < 0x44100000) {\n    if (modifiedParam2 < 0x3fdc0000) {\n      if (modifiedParam2 < 0x3e200000) {\n        tempVar7 = calculate_sum_0800016c(inputParam1,inputParam2,0x8800759c,0x7e37e43c,inputParam4);\n        result = check_if_params_valid_080009f0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return finalValue;\n        }\n      }\n      result = -1;\n    }\n    else {\n      finalValue = FUNC_0800708c();\n      tempVar2 = (undefined4)((ulonglong)finalValue >> 0x20);\n      tempVar1 = (undefined4)finalValue;\n      if (modifiedParam2 < 0x3ff30000) {\n        if (modifiedParam2 < 0x3fe60000) {\n          finalValue = calculate_sum_0800016c(tempVar1,tempVar2,tempVar1,tempVar2);\n          finalValue = calculate_product_08000168((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0,0x3ff00000);\n          tempVar7 = calculate_sum_0800016c(tempVar1,tempVar2,0,0x40000000);\n          finalValue = calculate_floating_point_08000724((int)finalValue,(int)((ulonglong)finalValue >> 0x20),(int)tempVar7,\n                               (int)((ulonglong)tempVar7 >> 0x20));\n          result = 0;\n        }\n        else {\n          finalValue = calculate_product_08000168(tempVar1,tempVar2,0,0x3ff00000);\n          tempVar7 = calculate_sum_0800016c(tempVar1,tempVar2,0,0x3ff00000);\n          finalValue = calculate_floating_point_08000724((int)finalValue,(int)((ulonglong)finalValue >> 0x20),(int)tempVar7,\n                               (int)((ulonglong)tempVar7 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (modifiedParam2 < 0x40038000) {\n        finalValue = calculate_product_08000168(tempVar1,tempVar2,0,0x3ff80000);\n        tempVar7 = calculate_value_080004d0(tempVar1,tempVar2,0,0x3ff80000);\n        tempVar7 = calculate_sum_0800016c((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0,0x3ff00000);\n        finalValue = calculate_floating_point_08000724((int)finalValue,(int)((ulonglong)finalValue >> 0x20),(int)tempVar7,\n                             (int)((ulonglong)tempVar7 >> 0x20));\n        result = 2;\n      }\n      else {\n        finalValue = calculate_floating_point_08000724(0,0xbff00000,tempVar1,tempVar2);\n        result = 3;\n      }\n    }\n    tempVar6 = (undefined4)((ulonglong)finalValue >> 0x20);\n    tempVar5 = (undefined4)finalValue;\n    finalValue = calculate_value_080004d0(tempVar5,tempVar6,tempVar5,tempVar6);\n    tempVar3 = (undefined4)((ulonglong)finalValue >> 0x20);\n    tempVar1 = (undefined4)finalValue;\n    finalValue = calculate_value_080004d0(tempVar1,tempVar3,tempVar1,tempVar3);\n    tempVar4 = (undefined4)((ulonglong)finalValue >> 0x20);\n    tempVar2 = (undefined4)finalValue;\n    finalValue = calculate_value_080004d0(tempVar2,tempVar4,0xe322da11,0x3f90ad3a);\n    finalValue = calculate_sum_0800016c((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0x24760deb,0x3fa97b4b);\n    finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar2,tempVar4);\n    finalValue = calculate_sum_0800016c((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar2,tempVar4);\n    finalValue = calculate_sum_0800016c((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0xc54c206e,0x3fb745cd);\n    finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar2,tempVar4);\n    finalValue = calculate_sum_0800016c((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0x920083ff,0x3fc24924);\n    finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar2,tempVar4);\n    finalValue = calculate_sum_0800016c((int)finalValue,(int)((ulonglong)finalValue >> 0x20),0x5555550d,0x3fd55555);\n    finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar1,tempVar3);\n    tempVar1 = (undefined4)((ulonglong)finalValue >> 0x20);\n    tempVar7 = calculate_value_080004d0(tempVar2,tempVar4,0x2c6a6c2f,0xbfa2b444);\n    tempVar7 = calculate_product_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0x52defd9a,0x3fadde2d);\n    tempVar7 = calculate_value_080004d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar2,tempVar4);\n    tempVar7 = calculate_product_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempVar7 = calculate_value_080004d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar2,tempVar4);\n    tempVar7 = calculate_product_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0xfe231671,0x3fbc71c6);\n    tempVar7 = calculate_value_080004d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar2,tempVar4);\n    tempVar7 = calculate_product_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),0x9998ebc4,0x3fc99999);\n    tempVar7 = calculate_value_080004d0((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar2,tempVar4);\n    tempVar2 = (undefined4)((ulonglong)tempVar7 >> 0x20);\n    if (result == -1) {\n      finalValue = calculate_sum_0800016c((int)finalValue,tempVar1,(int)tempVar7,tempVar2);\n      finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar5,tempVar6);\n      finalValue = calculate_product_08000168(tempVar5,tempVar6,(int)finalValue,(int)((ulonglong)finalValue >> 0x20));\n    }\n    else {\n      finalValue = calculate_sum_0800016c((int)finalValue,tempVar1,(int)tempVar7,tempVar2);\n      finalValue = calculate_value_080004d0((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar5,tempVar6);\n      result = result * 8;\n      finalValue = calculate_product_08000168((int)finalValue,(int)((ulonglong)finalValue >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      finalValue = calculate_product_08000168((int)finalValue,(int)((ulonglong)finalValue >> 0x20),tempVar5,tempVar6);\n      finalValue = calculate_product_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)finalValue,\n                           (int)((ulonglong)finalValue >> 0x20));\n      if ((int)inputParam2 < 0) {\n        finalValue = CONCAT44((int)((ulonglong)finalValue >> 0x20) + -0x80000000,(int)finalValue);\n      }\n    }\n  }\n  else if ((modifiedParam2 < 0x7ff00001) && ((modifiedParam2 != 0x7ff00000 || (inputParam1 == 0)))) {\n    if ((int)inputParam2 < 1) {\n      finalValue = 0xbff921fb54442d18;\n    }\n    else {\n      finalValue = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    finalValue = calculate_sum_0800016c(inputParam1,inputParam2,inputParam1,inputParam2,inputParam4);\n  }\n  return finalValue;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_final_value_08006d68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "uVar6": "tempVar5",
                "uVar7": "tempVar6",
                "uVar8": "modifiedParam2",
                "uVar9": "finalValue",
                "uVar10": "tempVar7"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "binary_check_08007092",
            "code": "\nuint binaryCheck_08007092(undefined4 status,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "binary_check_08007092",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nvoid initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nundefined8 getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculate_result_080070b0(uint input_1,uint input_2,undefined4 param_3)\n\n{\n  int iVar1;\n  undefined4 var_1;\n  uint updated_input_2;\n  undefined4 var_2;\n  uint var_3;\n  uint difference;\n  uint shifted_input_2;\n  undefined8 result;\n  \n  shifted_input_2 = (input_2 << 1) >> 0x15;\n  difference = shifted_input_2 - 0x3ff;\n  updated_input_2 = input_2;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if ((input_2 & 0x7fffffff | input_1) == 0) {\n        return CONCAT44(input_2,input_1);\n      }\n      updated_input_2 = input_2 & 0xfffff | input_1;\n      iVar1 = ((int)input_2 >> 0x1f) * -8;\n      var_1 = *(undefined4 *)(&DAT_08007430 + iVar1);\n      var_2 = *(undefined4 *)(&DAT_08007434 + iVar1);\n      result = calculate_sum_0800016c(input_1,(-updated_input_2 | updated_input_2) >> 0xc & 0x80000 | input_2 & 0xfffe0000,var_1,\n                           var_2,input_1,input_2,param_3);\n      result = calculate_product_08000168((int)result,(int)((ulonglong)result >> 0x20),var_1,var_2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_input_2 = 0xfffff >> (difference & 0xff);\n    if ((input_2 & shifted_input_2 | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_input_2 = shifted_input_2 >> 1;\n    var_3 = input_2 & shifted_input_2 | input_1;\n    if (var_3 != 0) {\n      if (difference == 0x13) {\n        var_3 = 0x80000000;\n      }\n      else {\n        var_3 = 0;\n      }\n      updated_input_2 = 0x40000 >> (difference & 0xff) | input_2 & ~shifted_input_2;\n    }\n  }\n  else {\n    if (0x33 < (int)difference) {\n      if (difference != 0x400) {\n        return CONCAT44(input_2,input_1);\n      }\n      result = calculate_sum_0800016c();\n      return result;\n    }\n    shifted_input_2 = shifted_input_2 - 0x413;\n    difference = 0xffffffff >> (shifted_input_2 & 0xff);\n    if ((input_1 & difference) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    difference = difference >> 1;\n    var_3 = input_1;\n    if ((input_1 & difference) != 0) {\n      var_3 = 0x40000000 >> (shifted_input_2 & 0xff) | input_1 & ~difference;\n    }\n  }\n  iVar1 = ((int)input_2 >> 0x1f) * -8;\n  var_1 = *(undefined4 *)(&DAT_08007430 + iVar1);\n  var_2 = *(undefined4 *)(&DAT_08007434 + iVar1);\n  result = calculate_sum_0800016c(var_3,updated_input_2,var_1,var_2,input_1,input_2,param_3);\n  result = calculate_product_08000168((int)result,(int)((ulonglong)result >> 0x20),var_1,var_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar7": "shifted_input_2",
                "uVar6": "difference",
                "uVar3": "updated_input_2",
                "uVar2": "var_1",
                "uVar4": "var_2",
                "uVar5": "var_3",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_result_080071c0",
            "code": "\nundefined8 calculate_result_080071c0(uint input_param_1,uint input_param_2,int input_param_3,undefined4 input_param_4)\n\n{\n  uint shifted_value;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  undefined4 temp_var_3;\n  uint upper_bits;\n  undefined8 result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  shifted_value = (input_param_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_param_2 & 0x7fffffff | input_param_1) == 0) {\n      return result;\n    }\n    result = calculate_value_080004d0(input_param_1,input_param_2,0,0x43500000);\n    if (-0xc351 < input_param_3) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    temp_var_1 = 0xc2f8f359;\n    temp_var_3 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = calculate_sum_0800016c(input_param_1,input_param_2,input_param_1,input_param_2,input_param_4);\n      return result;\n    }\nLAB_08007210:\n    upper_bits = (uint)((ulonglong)result >> 0x20);\n    temp_var_1 = (undefined4)result;\n    temp_var_2 = shifted_value + input_param_3;\n    if (temp_var_2 < 0x7ff) {\n      if (0 < temp_var_2) {\n        return CONCAT44(upper_bits & 0x800fffff | temp_var_2 * 0x100000,temp_var_1);\n      }\n      if (temp_var_2 + 0x35 < 0 == SCARRY4(temp_var_2,0x35)) {\n        result = CONCAT44(upper_bits & 0x800fffff | (temp_var_2 + 0x36) * 0x100000,temp_var_1);\n        temp_var_1 = 0;\n        temp_var_3 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (input_param_3 < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,temp_var_1,upper_bits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,temp_var_1,upper_bits);\n    temp_var_1 = 0x8800759c;\n    temp_var_3 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = calculate_value_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp_var_1,temp_var_3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "shifted_value",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "upper_bits",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_from_memory_080072ac",
            "code": "\nundefined4 get_data_from_memory_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_from_memory_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "add_value_to_pointer_080072b8",
            "code": "\nvoid addValueToPointer_080072b8(int value)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "add_value_to_pointer_080072b8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 160512,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}