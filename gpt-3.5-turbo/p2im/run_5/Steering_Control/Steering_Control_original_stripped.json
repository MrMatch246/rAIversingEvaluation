{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_completed_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeCompletedFlag_000800f4(undefined4 inputParam)\n\n{\n  if ((char)completionFlag == '\\0') {\n    completionFlag._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_completed_flag_000800f4",
                "param_1": "inputParam",
                "completed_7857": "completionFlag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080148": {
            "entrypoint": "0x00080148",
            "current_name": "execute_software_interrupt_00080148",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_software_interrupt_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_00080148": "execute_software_interrupt_00080148"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008014c": {
            "entrypoint": "0x0008014c",
            "current_name": "calculate_afl_call_result_0008014c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint calculateAflCallResult_0008014c(int ticks)\n\n{\n  uint32_t aflCallResult;\n  \n  if (noHyperCall == 0) {\n    aflCallResult = aflCall(1,ticks,0);\n    return aflCallResult;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008014c": "calculate_afl_call_result_0008014c",
                "uVar1": "aflCallResult"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "set_throttle_and_steering_00080164",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setThrottleAndSteering_00080164(void)\n\n{\n  void *buffer;\n  size_t bufferSize;\n  \n  Servo::write(&throttle,0x5a,buffer,bufferSize);\n  Servo::write(&steering,0x5a,buffer,bufferSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "set_throttle_and_steering_00080164",
                "in_r2": "buffer",
                "in_r3": "bufferSize"
            },
            "calling": [
                "loop",
                "setup"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080184": {
            "entrypoint": "0x00080184",
            "current_name": "initialize_servos_00080184",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServos_00080184(void)\n\n{\n  undefined4 unusedArg;\n  \n  Servo::Servo(&steeringServo);\n  Servo::Servo(&throttleServo);\n  String::String(&emptyCommand,\"\");\n  __aeabi_atexit(&emptyCommand,0x81473,&__dso_handle);\n  String::String(&emptyValue,\"\");\n  __aeabi_atexit(&emptyValue,0x81473,&__dso_handle,unusedArg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080184": "initialize_servos_00080184",
                "in_r3": "unusedArg",
                "steering": "steeringServo",
                "throttle": "throttleServo",
                "command": "emptyCommand",
                "value": "emptyValue"
            },
            "calling": [],
            "called": [
                "Servo",
                "String",
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_robot_000801e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeRobot_000801e0(void)\n\n{\n  UARTClass::begin(serialPort,0xe100);\n  configurePinMode(0xd,1);\n  configurePinMode(6,1);\n  configurePinMode(0x39,0);\n  configurePinMode(4,0);\n  configurePinMode(3,0);\n  configurePinMode(2,0);\n  Servo::attach(steeringServo,5);\n  Servo::attach(throttleServo,6);\n  resetSteeringAndThrottle();\n  wait(1000);\n  startForkServer(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_robot_000801e0",
                "&Serial": "serialPort",
                "&steering": "steeringServo",
                "&throttle": "throttleServo",
                "straightAndStop": "resetSteeringAndThrottle",
                "startForkserver": "startForkServer",
                "pinMode": "configurePinMode",
                "delay": "wait"
            },
            "calling": [
                "main"
            ],
            "called": [
                "straightAndStop",
                "delay",
                "attach",
                "begin",
                "startForkserver",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_and_process_input_00080250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid controlAndProcessInput_00080250(void)\n\n{\n  uchar isEqual;\n  uint32_t pwmValue;\n  int rawMotorValue;\n  int numBytesAvailable;\n  long parsedValue;\n  Servo *servoObj;\n  uint currentLEDstatus;\n  int bufferSize;\n  int ignoreFlag1;\n  int ignoreFlag2;\n  int secondBufferSize;\n  void *newValuePtr;\n  size_t newValueSize;\n  String tempString;\n  \n  rpwmValueMode = pulseIn(4,1,20000);\n  delay(10);\n  currentLEDstatus = (uint)LEDstatus;\n  LEDstatus = SUB41(currentLEDstatus ^ 1,0);\n  digitalWrite(0pwmValued,currentLEDstatus ^ 1);\n  if (rpwmValueMode < 0pwmValue641) {\n    if (rpwmValueMode - 0pwmValue385U < 299) {\n      if (controlMode != false) {\n        straightAndStop();\n        Print::println((Print *)&Serial,\"Entered manual control controlMode.\");\n        controlMode = false;\n      }\n      delay(10);\n      pwmValue = pulseIn(3,1,20000);\n      rpwmValueSteer = map(0,1000,2000,0pwmValue28,0pwmValue96);\n      newValuePtr = (void *)0pwmValue7d0;\n      newValueSize = 0pwmValue28;\n      rpwmValueMotor = map(pwmValue,1000,2000,0pwmValue28,0pwmValue96);\n      while (numBytesAvailable = UARTClass::available(&Serial), 0 < numBytesAvailable) {\n        UARTClass::read(&Serial,bufferSize,newValuePtr,newValueSize);\n        Print::print((Print *)&Serial,rpwmValueSteer,10);\n        Print::print((Print *)&Serial,\",\");\n        newValuePtr = (void *)0pwmValuea;\n        Print::println((Print *)&Serial,rpwmValueMotor,10);\n      }\n      Servo::write(&motorServo,rpwmValueMotor,newValuePtr,newValueSize);\n      Servo::write(&steeringServo,rpwmValueSteer,newValuePtr,newValueSize);\n    }\n    else {\n      if (controlMode == false) {\n        straightAndStop();\n        Print::println((Print *)&Serial,\"Entered autonomous control controlMode.\");\n      }\n      newValueSize = 1;\n      controlMode = true;\nLAB_00080346:\n      numBytesAvailable = UARTClass::available(&Serial);\n      if (0 < numBytesAvailable) {\n        Stream::readStringUntil((Stream *)&Serial,',');\n        String::operator=(&command,&tempString);\n        String::~String(&tempString,ignoreFlag1);\n        newValuePtr = (void *)0pwmValuea;\n        Stream::readStringUntil((Stream *)&Serial,'\\n');\n        String::operator=(&value,&tempString);\n        String::~String(&tempString,ignoreFlag2);\n        UARTClass::read(&Serial,secondBufferSize,newValuePtr,newValueSize);\n        isEqual = String::equals(&command,\"steer\");\n        if (isEqual == '\\0') goto LAB_0008039c;\n        parsedValue = String::toInt(&value);\n        servoObj = &steeringServo;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    straightAndStop();\n    Print::println((Print *)&Serial,\"error\");\n  }\n  return;\nLAB_0008039c:\n  isEqual = String::equals(&command,\"motor\");\n  if (isEqual != '\\0') {\n    parsedValue = String::toInt(&value);\n    servoObj = &motorServo;\nLAB_000803b2:\n    Servo::write(servoObj,parsedValue,newValuePtr,newValueSize);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_and_process_input_00080250",
                "uVar1": "isEqual",
                "x": "pwmValue",
                "rxMotorRaw": "rawMotorValue",
                "iVar2": "numBytesAvailable",
                "__fd": "parsedValue",
                "this": "servoObj",
                "uVar3": "currentLEDstatus",
                "__fd_00": "bufferSize",
                "__in_chrg": "ignoreFlag1",
                "__in_chrg_00": "ignoreFlag2",
                "__fd_01": "secondBufferSize",
                "pvVar4": "newValuePtr",
                "sVar5": "newValueSize",
                "SStack_1c": "tempString",
                "mode": "controlMode",
                "steering": "steeringServo",
                "throttle": "motorServo"
            },
            "calling": [
                "main"
            ],
            "called": [
                "println",
                "print",
                "write",
                "pulseIn",
                "available",
                "equals",
                "~String",
                "straightAndStop",
                "readStringUntil",
                "operator=",
                "println",
                "delay",
                "toInt",
                "digitalWrite",
                "map",
                "read",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_timer_000803fc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoperipheralID initializeTimer_000803fc(Tc *timer,uint32_t channel,uint32_t peripheralID,IRQn_Type interruptNumber)\n\n{\n  pmc_enable_periph_clk(peripheralID);\n  TC_Configure(timer,channel,0xc002);\n  TC_SetRA(timer,channel,0xa41);\n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << ((int)interruptNumber & 0x1fU);\n  timer->TC_CHANNEL[channel].TC_IER = 4;\n  TC_Start(timer,channel);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_timer_000803fc",
                "tc": "timer",
                "id": "peripheralID",
                "irqn": "interruptNumber"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TC_SetRA",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_servo_state_0008044c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoState_0008044c(sequence16_Sequence_t sequence,Tc *timerCounter,uint8_t channel)\n\n{\n  uint timerIndex;\n  uint servoCount;\n  RwReg clockCycles;\n  int index;\n  \n  timerIndex = (uint)sequence;\n  if ((Channel[timerIndex] & 0x80U) == 0) {\n    index = timerIndex * 0xc;\n    if ((Channel[timerIndex] + index < (int)(uint)ServoCount) &&\n       ((int)((uint)(byte)servos[Channel[timerIndex] + index].Pin << 0x19) < 0)) {\n      digitalWrite((byte)servos[index + Channel[timerIndex]].Pin & 0x3f,0);\n    }\n  }\n  else {\n    timerCounter->TC_CHANNEL[channel].TC_CCR = timerCounter->TC_CHANNEL[channel].TC_CCR | 4;\n  }\n  servoCount = (uint)ServoCount;\n  Channel[timerIndex] = Channel[timerIndex] + '\\x01';\n  index = timerIndex * 0xc;\n  if ((Channel[timerIndex] + index < (int)servoCount) && (Channel[timerIndex] < '\\f')) {\n    timerCounter->TC_CHANNEL[channel].TC_RA =\n         timerCounter->TC_CHANNEL[channel].TC_CV + servos[Channel[timerIndex] + index].ticks;\n    if (-1 < (int)((uint)(byte)servos[Channel[timerIndex] + index].Pin << 0x19)) {\n      return;\n    }\n    digitalWrite((byte)servos[index + Channel[timerIndex]].Pin & 0x3f,1);\n    return;\n  }\n  clockCycles = (SystemCoreClock / 1000000) * 20000 >> 5;\n  if (clockCycles <= timerCounter->TC_CHANNEL[channel].TC_CV + 4) {\n    clockCycles = timerCounter->TC_CHANNEL[channel].TC_CV + 4;\n  }\n  timerCounter->TC_CHANNEL[channel].TC_RA = clockCycles;\n  Channel[timerIndex] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_servo_state_0008044c",
                "timer": "sequence",
                "tc": "timerCounter",
                "uVar1": "timerIndex",
                "uVar2": "servoCount",
                "RVar3": "clockCycles",
                "iVar4": "index"
            },
            "calling": [
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler",
                "TC3_Handler",
                "TC5_Handler"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080558": {
            "entrypoint": "0x00080558",
            "current_name": "servo_initialization_00080558",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid servoInitialization_00080558(void)\n\n{\n  handleServo(timerInstance,(Tc *)0x40084000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080558": "servo_initialization_00080558",
                "_timer1": "timerInstance",
                "Servo_Handler": "handleServo"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080568": {
            "entrypoint": "0x00080568",
            "current_name": "initialize_servo_00080568",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_00080568(void)\n\n{\n  Servo_Handler(timer,(Tc *)0x40084000,'\\x01');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080568": "initialize_servo_00080568",
                "_timer2": "timer"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080578": {
            "entrypoint": "0x00080578",
            "current_name": "initialize_timer3_servo_00080578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer3Servo_00080578(void)\n\n{\n  Servo_Handler(timerInstance,(TimerConfiguration *)0x40084000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080578": "initialize_timer3_servo_00080578",
                "_timer3": "timerInstance",
                "Tc": "TimerConfiguration"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080588": {
            "entrypoint": "0x00080588",
            "current_name": "initialize_servo_handler_00080588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080588(void)\n\n{\n  Servo_Handler(_timer4,(Tc *)0x40080000,'\\x02');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080588": "initialize_servo_handler_00080588"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080598": {
            "entrypoint": "0x00080598",
            "current_name": "initialize_servo_handler_00080598",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServoHandler_00080598(void)\n\n{\n  Servo_Handler(timer,(timerController *)0x40080000,'\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080598": "initialize_servo_handler_00080598",
                "_timer5": "timer",
                "Tc": "timerController"
            },
            "calling": [],
            "called": [
                "Servo_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "initialize_servo_000805a8",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servo) */\n\nServo * __servocall Servo::initializeServo_000805a8(Servo *servo)\n\n{\n  uint8_t newServoCount;\n  uint servoCountCpy;\n  \n  servoCountCpy = (uint)servoCount;\n  if (servoCountCpy < 0x3c) {\n    newServoCount = servoCount + '\\x01';\n    servo->servoIndex = servoCount;\n    servoCount = newServoCount;\n    servoArray[servoCountCpy].servoTicks = (coreClock / 1000000) * 0x5dc >> 5;\n    return servo;\n  }\n  servo->servoIndex = 0xff;\n  return servo;\n}\n\n",
            "renaming": {
                "this": "servo",
                "uVar1": "newServoCount",
                "uVar2": "servoCountCpy",
                "ServoCount": "servoCount",
                "servos": "servoArray",
                "ticks": "servoTicks",
                "SystemCoreClock": "coreClock",
                "FUN_000805a8": "initialize_servo_000805a8"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805e8": {
            "entrypoint": "0x000805e8",
            "current_name": "attach_servo_000805e8",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo, int servoPin, int minimum, int maximum) */\n\nuint8_t __servocall Servo::attachServo_000805e8(Servo *servo,int servoPin,int minimum,int maximum)\n\n{\n  ServoPin_t servoPin;\n  timer16_Sequence_t timer;\n  Tc *timerCounter;\n  uint32_t timerChannel;\n  uint32_t timerID;\n  int iterationVariable;\n  uint unsignedVar3;\n  \n  if (0x3b < servo->servoIndex) goto LAB_00080660;\n  configurePinMode(servoPin,1);\n  unsignedVar3 = (uint)servo->servoIndex;\n  servoPin = servoArray[unsignedVar3].Pin;\n  servo->maximum = (int8_t)((0x960U - maximum) / 4);\n  timerChannel = unsignedVar3 / 0xc;\n  servoArray[unsignedVar3].Pin = (ServoPin_t)((byte)servoPin & 0xc0 | (byte)servoPin & 0x3f);\n  servo->minimum = (int8_t)((0x220U - minimum) / 4);\n  iterationVariable = 0;\n  do {\n    if ((int)((uint)(byte)servoArray[iterationVariable + timerChannel * 0xc].Pin << 0x19) < 0) goto LAB_00080652;\n    iterationVariable = iterationVariable + 1;\n  } while (iterationVariable != 0xc);\n  if (timerChannel == 0) {\n    timerCounter = (Tc *)0x40084000;\n    timerID = 0x1e;\nLAB_0008064c:\n    initializeISR(timerCounter,timerChannel,timerID,(IRQn_Type)timerID);\n  }\n  else {\n    if (timerChannel == 1) {\n      timerCounter = (Tc *)0x40084000;\n      timerID = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 2) {\n      timerCounter = (Tc *)0x40084000;\n      timerID = 0x20;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 3) {\n      timerCounter = (Tc *)0x40080000;\n      timerChannel = 2;\n      timerID = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (timerChannel == 4) {\n      timerCounter = (Tc *)0x40080000;\n      timerChannel = 0;\n      timerID = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  servoArray[servo->servoIndex].Pin = (ServoPin_t)((byte)servoArray[servo->servoIndex].Pin | 0x40);\nLAB_00080660:\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "this": "servo",
                "pin": "servoPin",
                "min": "minimum",
                "max": "maximum",
                "SVar1": "servoPin",
                "tc": "timerCounter",
                "channel": "timerChannel",
                "id": "timerID",
                "iVar2": "iterationVariable",
                "uVar3": "unsignedVar3",
                "servos": "servoArray",
                "pinMode": "configurePinMode",
                "_initISR": "initializeISR",
                "FUN_000805e8": "attach_servo_000805e8"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "_initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "attach_servo_000806a0",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servoInstance, int pinNumber) */\n\nuint8_t __servoInstancecall Servo::attachServo_000806a0(Servo *servoInstance,int pinNumber)\n\n{\n  uint8_t result;\n  \n  result = attach(servoInstance,pinNumber,0x220,0x960);\n  return result;\n}\n\n",
            "renaming": {
                "this": "servoInstance",
                "pin": "pinNumber",
                "uVar1": "result",
                "FUN_000806a0": "attach_servo_000806a0"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806ac": {
            "entrypoint": "0x000806ac",
            "current_name": "update_servo_ticks_000806ac",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds(Servo * servo, int microseconds) */\n\nvoid __servocall Servo::updateServoTicks_000806ac(Servo *servo,int microseconds)\n\n{\n  byte *bytePointer;\n  int differenceFromMin;\n  int scaledDifference;\n  \n  if (servo->servoIndex < 0x3c) {\n    differenceFromMin = 0x88 - servo->min;\n    scaledDifference = differenceFromMin * 4;\n    if ((microseconds + differenceFromMin * -4 < 0 == SBORROW4(microseconds,scaledDifference)) &&\n       (scaledDifference = (600 - servo->max) * 4, microseconds <= scaledDifference)) {\n      scaledDifference = microseconds;\n    }\n    servoArray[servo->servoIndex].ticks = (SystemCoreClock / 1000000) * (scaledDifference + -2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servo",
                "value": "microseconds",
                "channel": "bytePointer",
                "iVar1": "differenceFromMin",
                "iVar2": "scaledDifference",
                "servos": "servoArray",
                "FUN_000806ac": "update_servo_ticks_000806ac"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "adjust_servo_position_000806f8",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t __servocall Servo::adjustServoPosition_000806f8(Servo *servo,int fileDescriptor,void *buffer,size_t size)\n\n{\n  if (fileDescriptor < 0x220) {\n    if (0xb3 < fileDescriptor) {\n      fileDescriptor = 0xb4;\n    }\n    fileDescriptor = calculateMappedValue(fileDescriptor & ~(fileDescriptor >> 0x1f),0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  sendMicroseconds(servo,fileDescriptor);\n  return (ssize_t)servo;\n}\n\n",
            "renaming": {
                "this": "servo",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "map": "calculateMappedValue",
                "writeMicroseconds": "sendMicroseconds",
                "FUN_000806f8": "adjust_servo_position_000806f8"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008073c": {
            "entrypoint": "0x0008073c",
            "current_name": "uart_irq_handler_0008073c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid uart_irq_handler_0008073c(void)\n\n{\n  UARTClass::IrqHandler(serial_object);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073c": "uart_irq_handler_0008073c",
                "&Serial": "serial_object"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080750": {
            "entrypoint": "0x00080750",
            "current_name": "handle_uart_interrupt_00080750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleUARTInterrupt_00080750(void)\n\n{\n  UARTClass::IrqHandler(&Serial1.super_UARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080750": "handle_uart_interrupt_00080750"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008075c": {
            "entrypoint": "0x0008075c",
            "current_name": "handle_serial2_irq_0008075c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial2IRQ_0008075c(void)\n\n{\n  UARTClass::IrqHandler(serial2Object);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008075c": "handle_serial2_irq_0008075c",
                "&Serial2.super_UARTClass": "serial2Object"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080768": {
            "entrypoint": "0x00080768",
            "current_name": "handle_uart_interrupt_00080768",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleUartInterrupt_00080768(void)\n\n{\n  UARTClass::IrqHandler(uartInstance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080768": "handle_uart_interrupt_00080768",
                "&Serial3.super_UARTClass": "uartInstance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nint initializeSystem_00080774(EVP_PKEY_CTX *context)\n\n{\n  int iVar1;\n  uint32_t pinIndex;\n  uint32_t nextPinIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = SystemCoreClock / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  pinIndex = 0;\n  do {\n    nextPinIndex = pinIndex + 1;\n    digitalWrite(pinIndex,0);\n    pinIndex = nextPinIndex;\n  } while (nextPinIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(&DAT_400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(&DAT_400e0e00,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,0x3000,0);\n  PIO_Configure(&DAT_400e1400,2,0x30,0);\n  PIO_Configure(&DAT_400e1000,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,3,0);\n  PIO_Configure(&DAT_400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,SystemCoreClock,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  iVar1 = adc_disable_all_channel(0x400c0000);\n  analogOutputInit();\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "ctx": "context",
                "ulPin": "pinIndex",
                "uVar2": "nextPinIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_disable_all_channel",
                "SystemInit",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_configure_trigger",
                "adc_disable_interrupt",
                "analogOutputInit",
                "__libc_init_array",
                "adc_configure_timing",
                "adc_init",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_serial_communication_0008089c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_0008089c(void)\n\n{\n  RingBuffer::RingBuffer(&receiveBuffer1);\n  RingBuffer::RingBuffer(&transmitBuffer1);\n  UARTClass::UARTClass(&SerialPort,(UartPeripheral *)0x400e0800,UART_IRQn,8,&receiveBuffer1,&transmitBuffer1);\n  RingBuffer::RingBuffer(&receiveBuffer2);\n  RingBuffer::RingBuffer(&receiveBuffer3);\n  RingBuffer::RingBuffer(&receiveBuffer4);\n  RingBuffer::RingBuffer(&transmitBuffer2);\n  RingBuffer::RingBuffer(&transmitBuffer3);\n  RingBuffer::RingBuffer(&transmitBuffer4);\n  USARTClass::USARTClass(&SerialPort1,(UsartPeripheral *)0x40098000,USART0Interrupt,0x11,&receiveBuffer2,&transmitBuffer2);\n  USARTClass::USARTClass(&SerialPort2,(UsartPeripheral *)0x4009c000,USART1Interrupt,0x12,&receiveBuffer3,&transmitBuffer3);\n  USARTClass::USARTClass(&SerialPort3,(UsartPeripheral *)0x400a4000,USART3Interrupt,0x14,&receiveBuffer4,&transmitBuffer4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_serial_communication_0008089c",
                "rx_buffer1": "receiveBuffer1",
                "tx_buffer1": "transmitBuffer1",
                "Serial": "SerialPort",
                "rx_buffer2": "receiveBuffer2",
                "rx_buffer3": "receiveBuffer3",
                "rx_buffer4": "receiveBuffer4",
                "tx_buffer2": "transmitBuffer2",
                "tx_buffer3": "transmitBuffer3",
                "tx_buffer4": "transmitBuffer4",
                "Serial1": "SerialPort1",
                "Serial2": "SerialPort2",
                "Serial3": "SerialPort3",
                "Uart": "UartPeripheral",
                "Usart": "UsartPeripheral",
                "USART0_IRQn": "USART0Interrupt",
                "USART1_IRQn": "USART1Interrupt",
                "USART3_IRQn": "USART3Interrupt"
            },
            "calling": [],
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_available_serial_events_00080970",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAvailableSerialEvents_00080970(void)\n\n{\n  int numSerialEvents;\n  \n  numSerialEvents = isSerialAvailable(Serial);\n  if (numSerialEvents != 0) {\n    handleSerialEvent();\n  }\n  numSerialEvents = isSerialAvailable(Serial1);\n  if (numSerialEvents != 0) {\n    handleSerialEvent1();\n  }\n  numSerialEvents = isSerialAvailable(Serial2);\n  if (numSerialEvents != 0) {\n    handleSerialEvent2();\n  }\n  numSerialEvents = isSerialAvailable(Serial3);\n  if (numSerialEvents != 0) {\n    handleSerialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_available_serial_events_00080970",
                "iVar1": "numSerialEvents",
                "UARTClass::available(&Serial)": "isSerialAvailable(Serial)",
                "UARTClass::available(&Serial1.super_UARTClass)": "isSerialAvailable(Serial1)",
                "UARTClass::available(&Serial2.super_UARTClass)": "isSerialAvailable(Serial2)",
                "UARTClass::available(&Serial3.super_UARTClass)": "isSerialAvailable(Serial3)",
                "serialEvent()": "handleSerialEvent()",
                "serialEvent1()": "handleSerialEvent1()",
                "serialEvent2()": "handleSerialEvent2()",
                "serialEvent3()": "handleSerialEvent3()"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent",
                "serialEvent1",
                "serialEvent2",
                "available",
                "serialEvent3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809b4": {
            "entrypoint": "0x000809b4",
            "current_name": "update_memory_location_000809b4",
            "code": "\nvoid updateMemoryLocation_000809b4(int baseAddress,undefined4 value,int flag)\n\n{\n  if (flag != 0) {\n    *(undefined4 *)(baseAddress + 100) = value;\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x60) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809b4": "update_memory_location_000809b4",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_memory_value_000809be",
            "code": "\nvoid updateMemoryValue_000809be(int memoryAddress,undefined4 updateType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(memoryAddress + 0x44) = newValue;\n  switch(updateType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(memoryAddress + 0x70) & *(uint *)(memoryAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(memoryAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(memoryAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(memoryAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_memory_value_000809be",
                "param_1": "memoryAddress",
                "param_2": "updateType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *ptrArray,undefined4 value,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  isNegativeFlag = (int)(flags << 0x1f) < 0;\n  ptrArray[17] = value;\n  if (isNegativeFlag) {\n    ptrArray[25] = value;\n  }\n  if (!isNegativeFlag) {\n    ptrArray[24] = value;\n  }\n  isNegativeFlag = (flags & 10) != 0;\n  if (isNegativeFlag) {\n    ptrArray[8] = value;\n  }\n  if (!isNegativeFlag) {\n    ptrArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    ptrArray[32] = value;\n  }\n  ptrArray[5] = value;\n  *ptrArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "ptrArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegativeFlag",
                "param_1[0x11]": "ptrArray[17]",
                "param_1[0x19]": "ptrArray[25]",
                "param_1[0x18]": "ptrArray[24]",
                "param_1[8]": "ptrArray[8]",
                "param_1[9]": "ptrArray[9]",
                "param_1[0x20]": "ptrArray[32]",
                "param_1[5]": "ptrArray[5]"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_param_values_00080a0a",
            "code": "\nvoid updateParamValues_00080a0a(undefined4 *paramArray,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  paramArray[0x11] = newValue;\n  if (condition3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_param_values_00080a0a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "configure_peripheral_00080a30",
            "code": "\nundefined4 configurePeripheral_00080a30(int peripheralAddress,int peripheralType,undefined4 peripheralSetting,uint option)\n\n{\n  bool isNegativeOption;\n  \n  switch(peripheralType) {\n  case 1:\n  case 2:\n    PIO_SetPeripheral(peripheralAddress,peripheralType,peripheralSetting);\n    isNegativeOption = (int)(option << 0x1f) < 0;\n    *(undefined4 *)(peripheralAddress + 0x44) = peripheralSetting;\n    if (isNegativeOption) {\n      *(undefined4 *)(peripheralAddress + 100) = peripheralSetting;\n    }\n    if (!isNegativeOption) {\n      *(undefined4 *)(peripheralAddress + 0x60) = peripheralSetting;\n    }\n    break;\n  case 3:\n    PIO_SetInput(peripheralAddress,peripheralSetting,option,0x809e5,peripheralAddress);\n    break;\n  case 4:\n  case 5:\n    PIO_SetOutput(peripheralAddress,peripheralSetting,peripheralType == 5,(option << 0x1d) >> 0x1f,option & 1,peripheralType,peripheralSetting\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "configure_peripheral_00080a30",
                "param_1": "peripheralAddress",
                "param_2": "peripheralType",
                "param_3": "peripheralSetting",
                "param_4": "option",
                "bVar1": "isNegativeOption"
            },
            "calling": [
                "init",
                "pinMode"
            ],
            "called": [
                "PIO_SetInput",
                "PIO_SetOutput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_operation_00080a94",
            "code": "\nuint checkBitwiseOperation_00080a94(int baseAddress,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(baseAddress + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(baseAddress + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_operation_00080a94",
                "param_1": "baseAddress",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "init",
                "_initISR",
                "init",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aec": {
            "entrypoint": "0x00080aec",
            "current_name": "check_and_set_bit_00080aec",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aec(uint input)\n\n{\n  uint bitPosition;\n  uint bitValue;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitPosition = 1 << (input & 0xff);\n      bitValue = _DAT_400e0618 & bitPosition;\n      if (bitValue == bitPosition) {\n        _DAT_400e0614 = bitValue;\n      }\n    }\n    else {\n      bitPosition = 1 << (input - 0x20 & 0xff);\n      bitValue = _DAT_400e0708 & bitPosition;\n      if (bitValue == bitPosition) {\n        _DAT_400e0704 = bitValue;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aec": "check_and_set_bit_00080aec",
                "param_1": "input",
                "uVar1": "bitPosition",
                "uVar2": "bitValue"
            },
            "calling": [
                "pinMode",
                "end"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int address;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = assertFunction(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  address = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "address",
                "__assert_func": "assertFunction"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b64": {
            "entrypoint": "0x00080b64",
            "current_name": "initialize_channel_00080b64",
            "code": "\nvoid initializeChannel_00080b64(undefined4 channel_ptr,uint dwChannel)\n\n{\n  undefined8 combinedValue;\n  \n  combinedValue = CONCAT44(dwChannel,channel_ptr);\n  if (2 < dwChannel) {\n    combinedValue = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  *(undefined4 *)((int)combinedValue + (int)((ulonglong)combinedValue >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b64": "initialize_channel_00080b64",
                "param_1": "channel_ptr",
                "param_2": "dwChannel",
                "uVar1": "combinedValue"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_value_in_memory_00080b90",
            "code": "\nvoid storeValueInMemory_00080b90(int memoryBaseAddress,int arrayIndex,undefined4 valueToStore)\n\n{\n  *(undefined4 *)(memoryBaseAddress + arrayIndex * 0x40 + 0x14) = valueToStore;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_value_in_memory_00080b90",
                "param_1": "memoryBaseAddress",
                "param_2": "arrayIndex",
                "param_3": "valueToStore"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_system_00080b98",
            "code": "\n\n\nvoid initializeSystem_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  systemClock = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "copy_and_clear_memory_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid copyAndClearMemory_00080c20(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  \n  for (index = 0; banzai + index < &destination; index = index + 4) {\n    *(undefined4 *)(banzai + index) = *(undefined4 *)(&source + index);\n  }\n  for (pointer = &destination; pointer < &endOfMemory; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "copy_and_clear_memory_00080c20",
                "iVar1": "index",
                "puVar2": "pointer",
                "completed_7857": "destination",
                "&completed_7857": "&destination",
                "&_etext": "&source",
                "_ebss": "endOfMemory"
            },
            "calling": [],
            "called": [
                "banzai",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *output,uint input_size,int factor,int multiplier)\n\n{\n  uint dividend;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  dividend = input_size / (uint)(factor * 2);\n  if (input_size == factor * 2 * dividend) {\n    dividend = dividend - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((dividend + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (dividend & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "factor",
                "param_4": "multiplier",
                "local_58": "thresholds",
                "uVar1": "dividend",
                "uVar2": "index"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "set_bits_in_memory_00080d30",
            "code": "\nvoid setBitsInMemory_00080d30(int destAddress,uint source,uint bitValue)\n\n{\n  *(uint *)(destAddress + 4) = source | *(uint *)(destAddress + 4) | (bitValue & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "set_bits_in_memory_00080d30",
                "param_1": "destAddress",
                "param_2": "source",
                "param_3": "bitValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_bitmask_00080d3e",
            "code": "\nvoid updateBitmask_00080d3e(int baseAddress,uint bitValue1,uint bitValue2,uint bitValue3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       bitValue2 | *(uint *)(baseAddress + 4) | (bitValue1 & 0xf) << 0x18 | (bitValue3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_bitmask_00080d3e",
                "param_1": "baseAddress",
                "param_2": "bitValue1",
                "param_3": "bitValue2",
                "param_4": "bitValue3"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int pointer,uint bitPosition)\n\n{\n  *(int *)(pointer + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "pointer",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "set_error_message_00080d62",
            "code": "\nvoid setErrorMessage_00080d62(int inputAddress)\n\n{\n  *(undefined4 *)(inputAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "set_error_message_00080d62",
                "param_1": "inputAddress"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_parameter_value_00080d6a",
            "code": "\nvoid setParameterValue_00080d6a(int baseAddress,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_parameter_value_00080d6a",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d70": {
            "entrypoint": "0x00080d70",
            "current_name": "execute_isr_00080d70",
            "code": "\nvoid execute_isr_00080d70(void)\n\n{\n  if (isr_function != (code *)0x0) {\n    (*isr_function)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d70": "execute_isr_00080d70",
                "gpf_isr": "isr_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d80": {
            "entrypoint": "0x00080d80",
            "current_name": "handle_interrupts_00080d80",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_00080d80(void)\n\n{\n  uint8_t numLeadingZeros;\n  uint32_t interruptStatus;\n  uint shiftAmount;\n  \n  for (interruptStatus = _DAT_400e0e4c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << shiftAmount)) {\n    shiftAmount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioA[shiftAmount] != (interruptCB)0x0) {\n      (*callbacksPioA[shiftAmount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d80": "handle_interrupts_00080d80",
                "leading_zeros": "numLeadingZeros",
                "isr": "interruptStatus",
                "uVar1": "shiftAmount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080db8": {
            "entrypoint": "0x00080db8",
            "current_name": "process_interrupts_00080db8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080db8(void)\n\n{\n  uint8_t leadingZeros;\n  uint32_t interruptStatus;\n  uint bitPosition;\n  \n  for (interruptStatus = _DAT_400e104c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << bitPosition)) {\n    bitPosition = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (callbacksPioB[bitPosition] != (interruptCB)0x0) {\n      (*callbacksPioB[bitPosition])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080db8": "process_interrupts_00080db8",
                "isr": "interruptStatus",
                "uVar1": "bitPosition",
                "leading_zeros": "leadingZeros"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080df0": {
            "entrypoint": "0x00080df0",
            "current_name": "process_interrupts_00080df0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00080df0(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingZeroCount;\n  \n  for (interruptStatus = _DAT_400e124c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingZeroCount)) {\n    leadingZeroCount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (interruptCallbacks[leadingZeroCount] != (interruptCB)0x0) {\n      (*interruptCallbacks[leadingZeroCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080df0": "process_interrupts_00080df0",
                "isr": "interruptStatus",
                "uVar1": "leadingZeroCount",
                "callbacksPioC": "interruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e28": {
            "entrypoint": "0x00080e28",
            "current_name": "execute_callbacks_00080e28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid executeCallbacks_00080e28(void)\n\n{\n  uint8_t leadingZeros;\n  uint32_t interruptFlags;\n  uint remainingBits;\n  \n  for (interruptFlags = _DAT_400e144c; (uint)LZCOUNT(interruptFlags) < 0x20; interruptFlags = interruptFlags & ~(1 << remainingBits)) {\n    remainingBits = 0x1fU - LZCOUNT(interruptFlags) & 0xff;\n    if (pioDCallbacks[remainingBits] != (callbackFunction)0x0) {\n      (*pioDCallbacks[remainingBits])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e28": "execute_callbacks_00080e28",
                "isr": "interruptFlags",
                "leading_zeros": "leadingZeros",
                "uVar1": "remainingBits",
                "callbacksPioD": "pioDCallbacks",
                "interruptCB": "callbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e60": {
            "entrypoint": "0x00080e60",
            "current_name": "infinite_loop_00080e60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e60(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e60": "infinite_loop_00080e60"
            },
            "calling": [
                "__halt"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e62": {
            "entrypoint": "0x00080e62",
            "current_name": "infinite_loop_00080e62",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e62(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e62": "infinite_loop_00080e62"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e66": {
            "entrypoint": "0x00080e66",
            "current_name": "infinite_loop_00080e66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00080e66(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e66": "infinite_loop_00080e66"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e6a": {
            "entrypoint": "0x00080e6a",
            "current_name": "handle_faulty_condition_00080e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleFaultyCondition_00080e6a(void)\n\n{\n  int isConditionMet;\n  \n  isConditionMet = __false();\n  if (isConditionMet == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e6a": "handle_faulty_condition_00080e6a",
                "iVar1": "isConditionMet"
            },
            "calling": [],
            "called": [
                "tickReset",
                "TimeTick_Increment",
                "__false"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_00080e80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initialize_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_00080e80"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e84": {
            "entrypoint": "0x00080e84",
            "current_name": "run_infinite_loop_00080e84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid run_infinite_loop_00080e84(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080e84": "run_infinite_loop_00080e84"
            },
            "calling": [
                "PendSV_Handler",
                "__halt",
                "SVC_Handler"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "allocate_memory_00080e88",
            "code": "\nvoid * allocate_memory_00080e88(intptr_t memory_increase)\n\n{\n  uchar *old_heap;\n  uchar *previous_heap;\n  \n  if (_sbrk::heap == (uchar *)0x0) {\n    _sbrk::heap = &_ebss;\n  }\n  old_heap = _sbrk::heap;\n  _sbrk::heap = _sbrk::heap + memory_increase;\n  return old_heap;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "__delta": "memory_increase",
                "puVar1": "old_heap",
                "prev_heap": "previous_heap"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ea4": {
            "entrypoint": "0x00080ea4",
            "current_name": "copy_string_00080ea4",
            "code": "\nint copyString_00080ea4(char *source,char *destination)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080ea4": "copy_string_00080ea4",
                "__from": "source",
                "__to": "destination"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "determine_error_status_00080eaa",
            "code": "\nint determineErrorStatus_00080eaa(int fileDescriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "determine_error_status_00080eaa",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_special_attribute_00080eb0",
            "code": "\nint setSpecialAttribute_00080eb0(int fileDescriptor,stat *fileStat)\n\n{\n  *(undefined4 *)((int)&fileStat->st_dev + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_special_attribute_00080eb0",
                "__fd": "fileDescriptor",
                "__buf": "fileStat"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "check_file_existence_00080eba",
            "code": "\nint checkFileExistence_00080eba(int fileDescriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "check_file_existence_00080eba",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "calculate_file_offset_00080ebe",
            "code": "\n__off_t calculateFileOffset_00080ebe(int fileDescriptor,__off_t offset,int whence)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "calculate_file_offset_00080ebe",
                "__fd": "fileDescriptor",
                "__offset": "offset",
                "__whence": "whence"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "cleanup_unused_data_00080ec2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint cleanupUnusedData_00080ec2(int file,char *ptr,int len)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "cleanup_unused_data_00080ec2",
                "file_UNUSED": "file",
                "ptr_UNUSED": "ptr",
                "len_UNUSED": "len"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint copyBytes_00080ec8(int fileDescriptor,char *sourceArray,int length)\n\n{\n  int index;\n  \n  for (index = 0; index < length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)(byte)sourceArray[index];\n  }\n  return length & ~(length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "file_UNUSED": "fileDescriptor",
                "ptr": "sourceArray",
                "len": "length",
                "iVar1": "index"
            },
            "calling": [
                "_write_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "print_exit_status_00080eec",
            "code": "\nvoid printExitStatus_00080eec(int status)\n\n{\n  printFormatted(\"Exiting with status %d.\\n\",status);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "print_exit_status_00080eec",
                "__status": "status",
                "iprintf": "printFormatted"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_process_id_00080efe",
            "code": "\n\n\n__pid_t getProcessID_00080efe(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "get_tick_count_00080f04",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTickCount_00080f04(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00080f04": "get_tick_count_00080f04",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "loop",
                "setup",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0a": {
            "entrypoint": "0x00080f0a",
            "current_name": "FUNC_00080f0a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0a": "FUNC_00080f0a"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_pin_00080f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00080f0c(uint32_t pinNumber,uint32_t mode)\n\n{\n  undefined4 configurationMode;\n  byte pinStatus;\n  byte pinStatusMask;\n  Pio *pinPort;\n  \n  if (g_APinDescription[pinNumber].pinType != PIO_NOT_A_PIN) {\n    if ((g_pinStatus[pinNumber] & 0xf) == 4) {\n      adc_disable_channel(0x400c0000,g_APinDescription[pinNumber].adcChannelNumber);\n    }\n    pinStatusMask = g_pinStatus[pinNumber];\n    pinStatus = pinStatusMask & 0xf;\n    if ((pinStatus < 3) && (pinStatusMask != 0)) {\n      if (pinStatus == 2) {\n        if (mode == 0) {\n          return;\n        }\n      }\n      else if (pinStatus == 1) {\n        if (mode == 2) {\n          return;\n        }\n      }\n      else if (pinStatus == 3) {\n        if (mode == 1) {\n          return;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        pmc_enable_periph_clk(g_APinDescription[pinNumber].peripheralId);\n        PIO_Configure(g_APinDescription[pinNumber].pPort,3,g_APinDescription[pinNumber].pinNumber,0);\n        pinStatusMask = g_pinStatus[pinNumber] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return;\n        }\n        pmc_enable_periph_clk(g_APinDescription[pinNumber].peripheralId);\n        PIO_Configure(g_APinDescription[pinNumber].pPort,3,g_APinDescription[pinNumber].pinNumber,1);\n        pinStatusMask = g_pinStatus[pinNumber] & 0xf0 | 1;\n      }\n      g_pinStatus[pinNumber] = pinStatusMask;\n      return;\n    }\n    pinPort = g_APinDescription[pinNumber].pPort;\n    if (pinStatusMask >> 4 == 0) {\n      configurationMode = 4;\n    }\n    else {\n      configurationMode = 5;\n    }\n    PIO_Configure(pinPort,configurationMode,g_APinDescription[pinNumber].pinNumber,\n                  g_APinDescription[pinNumber].pinConfiguration);\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf0 | 3;\n    if (pinPort->PIO_OSR == 0xffffffff) {\n      pmc_disable_periph_clk(g_APinDescription[pinNumber].peripheralId);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "uVar1": "configurationMode",
                "bVar2": "pinStatus",
                "bVar3": "pinStatusMask",
                "pPVar4": "pinPort",
                "ulPinType": "pinType",
                "ulADCChannelNumber": "adcChannelNumber",
                "ulPeripheralId": "peripheralId",
                "ulPinConfiguration": "pinConfiguration"
            },
            "calling": [
                "digitalWrite",
                "setup",
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel",
                "PIO_Configure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "set_pin_value_00081014",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinValue_00081014(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  int dataStatus;\n  uint32_t pin;\n  Pio *port;\n  uint32_t tempValue;\n  \n  if (pinDescriptionArray[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    tempValue = pinValue;\n    if ((pinStatusArray[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1);\n    }\n    pinStatusArray[pinNumber] = pinStatusArray[pinNumber] & 0xf | (byte)(pinValue << 4);\n    port = pinDescriptionArray[pinNumber].pPort;\n    pin = pinDescriptionArray[pinNumber].pinNumber;\n    dataStatus = PIO_GetOutputDataStatus(port,pin);\n    if (dataStatus == 0) {\n      PIO_PullUp(port,pin,pinValue);\n      return;\n    }\n    PIO_SetOutput(port,pin,pinValue,0,1,tempValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "set_pin_value_00081014",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "iVar1": "dataStatus",
                "uVar2": "pin",
                "uVar4": "tempValue",
                "pPVar3": "port",
                "g_APinDescription": "pinDescriptionArray",
                "g_pinStatus": "pinStatusArray"
            },
            "calling": [
                "init",
                "loop",
                "Servo_Handler"
            ],
            "called": [
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput",
                "pinMode",
                "PIO_PullUp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081084": {
            "entrypoint": "0x00081084",
            "current_name": "print_write_00081084",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0008109a */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * printObject, uint8_t * buffer, size_t size) */\n\nssize_t __printObjectcall Print::Print_write_00081084(Print *printObject,int fileDescriptor,void *buffer,size_t size)\n\n{\n  Print *currentPrintObject;\n  void *currentPosition;\n  \n  currentPosition = (void *)0x0;\n  currentPrintObject = printObject;\n  while ((currentPosition != buffer &&\n         (currentPrintObject = (Print *)(**printObject->_vptr_Print)(currentPrintObject,(uint)*(byte *)(fileDescriptor + (int)currentPosition)),\n         currentPrintObject != (Print *)0x0))) {\n    currentPosition = (void *)((int)currentPosition + 1);\n  }\n  return (ssize_t)currentPosition;\n}\n\n",
            "renaming": {
                "this": "printObject",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "pvVar2": "currentPosition",
                "pPVar1": "currentPrintObject",
                "FUN_00081084": "print_write_00081084"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "write_to_file_000810a6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810be */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * this, char * str) */\n\nssize_t Print Print::write_to_file_000810a6(Print *this,int file_descriptor,void *buffer,size_t buffer_size)\n\n{\n  size_t string_length;\n  int result;\n  \n  if (file_descriptor != 0) {\n    string_length = strlen((char *)file_descriptor);\n    result = (*this->_vptr_Print[1])(string_length,file_descriptor,string_length,this->_vptr_Print[1],buffer_size);\n    return result;\n  }\n  return file_descriptor;\n}\n\n",
            "renaming": {
                "__thiscall": "Print",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "buffer_size",
                "sVar1": "string_length",
                "iVar2": "result",
                "FUN_000810a6": "write_to_file_000810a6"
            },
            "calling": [
                "println",
                "println",
                "print",
                "printNumber"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "write_string_to_print_000810c4",
            "code": "\n/* DWARF original prototype: size_t  print(Print * print_instance, char * string_to_print) */\n\nsize_t __print_instancecall Print::write_string_to_print_000810c4(Print *print_instance,char *string_to_print)\n\n{\n  size_t bytes_written;\n  void *data_buffer;\n  size_t data_length;\n  \n  bytes_written = write(print_instance,(int)string_to_print,data_buffer,data_length);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "write_string_to_print_000810c4",
                "this": "print_instance",
                "str": "string_to_print",
                "in_r2": "data_buffer",
                "in_r3": "data_length",
                "sVar1": "bytes_written"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "print_character_000810cc",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000810d2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_000810cc(Print *printObject,char c)\n\n{\n  size_t returnValue;\n  \n  returnValue = (**printObject->_vptr_Print)(printObject,(int)c);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "print_character_000810cc",
                "this": "printObject",
                "sVar1": "returnValue"
            },
            "calling": [
                "print"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "print_message_000810d8",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject) */\n\nsize_t __printObjectcall Print::printMessage_000810d8(Print *printObject)\n\n{\n  size_t bytesWritten;\n  void *buffer;\n  size_t size;\n  \n  bytesWritten = write(printObject,(int)&DAT_00085635,buffer,size);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "print_message_000810d8",
                "this": "printObject",
                "in_r2": "buffer",
                "in_r3": "size",
                "sVar1": "bytesWritten"
            },
            "calling": [
                "println",
                "println"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "print_and_return_size_000810e8",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject, char * c) */\n\nsize_t __printObjectcall Print::printAndReturnSize_000810e8(Print *printObject,char *c)\n\n{\n  ssize_t writeResult;\n  size_t printlnResult;\n  void *dataPointer;\n  size_t dataSize;\n  \n  writeResult = write(printObject,(int)c,dataPointer,dataSize);\n  printlnResult = println(printObject);\n  return printlnResult + writeResult;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "print_and_return_size_000810e8",
                "this": "printObject",
                "sVar1": "writeResult",
                "sVar2": "printlnResult",
                "in_r2": "dataPointer",
                "in_r3": "dataSize"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "print_number_000810fc",
            "code": "\n/* DWARF originumberal prototype: size_t  prinumbertNumber(Prinumbert * printer, ulonumberg number, uinumbert8_t numberBase) */\n\nsize_t __printercall Prinumbert::printNumber_000810fc(Prinumbert *printer,ulonumberg number,uinumbert8_t numberBase)\n\n{\n  char *currentChar;\n  size_t bytesWritten;\n  void *basePointer;\n  char c;\n  uinumbert quotient;\n  char *currentPos;\n  char convertedChar;\n  uinumbert remainder;\n  char buffer [33];\n  \n  basePointer = (void *)(uinumbert)numberBase;\n  buffer[32] = '\\0';\n  if (basePointer < (void *)0x2) {\n    basePointer = (void *)0xa;\n  }\n  currentChar = buffer + 0x1f;\n  do {\n    currentPos = currentChar;\n    quotient = number / (uinumbert)basePointer;\n    remainder = number - (inumbert)basePointer * quotient & 0xff;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *currentPos = convertedChar;\n    number = quotient;\n    currentChar = currentPos + -1;\n  } while (quotient != 0);\n  bytesWritten = write(printer,(inumbert)currentPos,basePointer,0);\n  returnumber bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "print_number_000810fc",
                "this": "printer",
                "n": "number",
                "base": "numberBase",
                "__buf": "basePointer",
                "pcVar1": "currentChar",
                "sVar2": "bytesWritten",
                "__fd": "currentPos",
                "cVar4": "convertedChar",
                "uVar3": "quotient",
                "uVar5": "remainder",
                "buf": "buffer"
            },
            "calling": [
                "print"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_number_with_base_0008113a",
            "code": "\n/* WARNING: Heritempage AFTER dead removal. Example locatempionumber: r0 : 0x0008114a */\n/* WARNING: Restempartemped tempo delay deadcode eliminumberatempionumber for space: registemper */\n/* WARNING: Exceeded maximum restempartemps witemph more penumberdinumberg */\n/* DWARF originumberal protempotempype: size_temp  prinumbertemp(Prinumbertemp * printInstance, lonumberg number, inumbertemp numberBase) */\n\nsize_temp __printInstancecall Prinumbertemp::printNumberWithBase_0008113a(Prinumbertemp *printInstance,lonumberg number,inumbertemp numberBase)\n\n{\n  size_temp size;\n  inumbertemp temp;\n  size_temp size2;\n  uinumbertemp8_temp baseByte;\n  \n  if (numberBase == 0) {\n    size = (**printInstance->_vptempr_Prinumbertemp)(printInstance,number & 0xff);\n    retempurnumber size;\n  }\n  baseByte = (uinumbertemp8_temp)numberBase;\n  if ((numberBase == 10) && (baseByte = '\\number', number < 0)) {\n    size = prinumbertemp(printInstance,'-');\n    size2 = prinumbertempNumber(printInstance,-number,(uinumbertemp8_temp)numberBase);\n    retempurnumber size2 + size;\n  }\n  size = prinumbertempNumber(printInstance,number,baseByte);\n  retempurnumber size;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_number_with_base_0008113a",
                "this": "printInstance",
                "n": "number",
                "base": "numberBase",
                "sVar1": "size",
                "t": "temp",
                "sVar2": "size2",
                "base_00": "baseByte"
            },
            "calling": [
                "println",
                "print"
            ],
            "called": [
                "print",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "print_number_with_base_00081176",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locationumber: r0 : 0x0008114a */\n/* WARNING: Restarted to delay deadcode eliminumberationumber for space: register */\n/* WARNING: Exceeded maximum restarts with more penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbert(Prinumbert * printObject, inumbert number, inumbert base) */\n\nsize_t __printObjectcall Prinumbert::printNumberWithBase_00081176(Prinumbert *printObject,inumbert number,inumbert base)\n\n{\n  size_t result1;\n  size_t result2;\n  uinumbert8_t baseByte;\n  \n  if (base == 0) {\n    result1 = (**printObject->_vptr_Prinumbert)(printObject,number & 0xff);\n    returnumber result1;\n  }\n  baseByte = (uinumbert8_t)base;\n  if ((base == 10) && (baseByte = '\\number', number < 0)) {\n    result1 = prinumbert(printObject,'-');\n    result2 = prinumbertNumber(printObject,-number,(uinumbert8_t)base);\n    returnumber result2 + result1;\n  }\n  result1 = prinumbertNumber(printObject,number,baseByte);\n  returnumber result1;\n}\n\n",
            "renaming": {
                "this": "printObject",
                "n": "number",
                "sVar1": "result1",
                "sVar2": "result2",
                "base_00": "baseByte",
                "FUN_00081176": "print_number_with_base_00081176"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_print_length_0008117a",
            "code": "\n/* DWARF original prototype: size_t  println(Print * printObject, int number, int numberBase) */\n\nsize_t __printObjectcall Print::calculatePrintLength_0008117a(Print *printObject,int number,int numberBase)\n\n{\n  size_t printLength;\n  size_t printlnLength;\n  \n  printLength = print(printObject,number,numberBase);\n  printlnLength = println(printObject);\n  return printlnLength + printLength;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_print_length_0008117a",
                "this": "printObject",
                "num": "number",
                "base": "numberBase",
                "sVar1": "printLength",
                "sVar2": "printlnLength"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "println",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "check_and_call_banzai_00081190",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndCallBanzai_00081190(void)\n\n{\n  if ((ticks != -1) && (ticks = ticks + -1, ticks == 0)) {\n    callBanzai();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "check_and_call_banzai_00081190",
                "banzai": "callBanzai"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "banzai"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_ring_buffer_000811b0",
            "code": "\n/* DWARF original prototype: RingBuffer *  RingBuffer(RingBuffer * ringBuffer) */\n\nRingBuffer * __ringBuffercall RingBuffer::initializeRingBuffer_000811b0(RingBuffer *ringBuffer)\n\n{\n  memset(ringBuffer,0,0x80);\n  ringBuffer->_iHead = 0;\n  ringBuffer->_iTail = 0;\n  return ringBuffer;\n}\n\n",
            "renaming": {
                "this": "ringBuffer",
                "FUN_000811b0": "initialize_ring_buffer_000811b0"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "store_char_000811ca",
            "code": "\n/* DWARF orhead_indexghead_indexnal prototype: vohead_indexd  store_char_000811ca(Rhead_indexngBuffer * ring_buffer, uhead_indexnt8_t c) */\n\nvohead_indexd __ring_buffercall Rhead_indexngBuffer::store_char_000811ca(Rhead_indexngBuffer *ring_buffer,uhead_indexnt8_t c)\n\n{\n  head_indexnt head_index;\n  uhead_indexnt next_head_index;\n  \n  head_index = ring_buffer->_head_indexHead;\n  next_head_index = head_index + 1U & 0x7f;\n  head_indexf (next_head_index != ring_buffer->_head_indexTahead_indexl) {\n    ring_buffer->_aucBuffer[ring_buffer->_head_indexHead] = c;\n    ring_buffer->_head_indexHead = next_head_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "ring_buffer",
                "i": "head_index",
                "uVar1": "next_head_index",
                "FUN_000811ca": "store_char_000811ca"
            },
            "calling": [
                "IrqHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "timed_read_000811e8",
            "code": "\n/* DWARF original prototype: int  timedRead_000811e8(Stream * stream) */\n\nint __streamcall Stream::timedRead_000811e8(Stream *stream)\n\n{\n  uint32_t currentTime;\n  int readValue;\n  int c;\n  \n  currentTime = millis();\n  stream->startMillis = currentTime;\n  do {\n    readValue = (*(stream->super_Print)._vptr_Print[3])();\n    if (-1 < readValue) {\n      return readValue;\n    }\n    currentTime = millis();\n  } while (currentTime - stream->startMillis < stream->timeout);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "timed_read_000811e8",
                "this": "stream",
                "uVar1": "currentTime",
                "iVar2": "readValue",
                "_startMillis": "startMillis",
                "_timeout": "timeout"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_string_until_00081214",
            "code": "\n/* DWARF original prototype: String  readStringUntil_00081214(Stream * stream, char terminator) */\n\nString * __streamcall Stream::readStringUntil_00081214(Stream *stream,char terminator)\n\n{\n  String *result;\n  String *returnVal;\n  int readChar;\n  int c;\n  \n  String::String(result,\"\");\n  while( true ) {\n    readChar = timedRead(stream);\n    if ((readChar < 0) || (readChar == terminator)) break;\n    String::concat(result,(char)readChar);\n  }\n  returnValurn result;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_string_until_00081214",
                "this": "stream",
                "in_r0": "result",
                "ret": "returnVal",
                "iVar1": "readChar"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "timedRead",
                "String",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081244": {
            "entrypoint": "0x00081244",
            "current_name": "is_uart_enabled_00081244",
            "code": "\n/* DWARF original name: operator bool\n   DWARF original prototype: bool  operator_bool(UARTClass * uartClass) */\n\nbool __uartClasscall UARTClass::isUARTEnabled_00081244(UARTClass *uartClass)\n\n{\n  return true;\n}\n\n",
            "renaming": {
                "FUN_00081244": "is_uart_enabled_00081244",
                "this": "uartClass"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_available_bytes_00081248",
            "code": "\n/* DWARF original prototype: int  available(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::calculateAvailableBytes_00081248(UARTClass *uartInstance)\n\n{\n  return uartInstance->receiveBuffer->headIndex - uartInstance->receiveBuffer->tailIndex & 0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_available_bytes_00081248",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex"
            },
            "calling": [
                "loop",
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008125a": {
            "entrypoint": "0x0008125a",
            "current_name": "peek_0008125a",
            "code": "\n/* DWARF original prototype: int  peek_0008125a(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::peek_0008125a(UARTClass *uartInstance)\n\n{\n  uint data;\n  RingBuffer *rxBuffer;\n  \n  rxBuffer = uartInstance->rxBuffer;\n  if (rxBuffer->headIndex == rxBuffer->tailIndex) {\n    data = 0xffffffff;\n  }\n  else {\n    data = (uint)rxBuffer->buffer[rxBuffer->tailIndex];\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0008125a": "peek_0008125a",
                "this": "uartInstance",
                "pRVar2": "rxBuffer",
                "uVar1": "data",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "buffer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "read_byte_00081276",
            "code": "\n/* DWARF original prototype: int  read(UARTClass * uart) */\n\nssize_t __uartcall UARTClass::read_byte_00081276(UARTClass *uart,int file_descriptor,void *buffer,size_t num_bytes)\n\n{\n  uint8_t bVar1;\n  uint8_t uint8_t;\n  CircularBuffer *buffer;\n  \n  buffer = uart->input_buffer;\n  if (buffer->head_index != buffer->tail_index) {\n    bVar1 = buffer->buffer_data[buffer->tail_index];\n    buffer->tail_index = buffer->tail_index + 1U & 0x7f;\n    return (uint)bVar1;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081276": "read_byte_00081276",
                "this": "uart",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "byte": "uint8_t",
                "uc": "uint8_t",
                "RingBuffer": "CircularBuffer",
                "pRVar2": "buffer",
                "_rx_buffer": "input_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer_data"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812a0": {
            "entrypoint": "0x000812a0",
            "current_name": "flush_uart_000812a0",
            "code": "\n/* DWARF original prototype: void  flush(UARTClass * uart) */\n\nvoid __uartcall UARTClass::flush_uart_000812a0(UARTClass *uart)\n\n{\n  do {\n  } while (uart->buffer->head != uart->buffer->tail);\n  do {\n  } while (-1 < (int)(uart->uart_pointer->status_register << 0x16));\n  return;\n}\n\n",
            "renaming": {
                "FUN_000812a0": "flush_uart_000812a0",
                "this": "uart",
                "_tx_buffer": "buffer",
                "_iHead": "head",
                "_iTail": "tail",
                "_pUart": "uart_pointer",
                "UART_SR": "status_register"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "write_to_uart_000812b8",
            "code": "\n/* DWARF original prototype: size_t  write(UARTClass * uart_instance, uint8_t uc_data) */\n\nssize_t __uart_instancecall UARTClass::write_to_uart_000812b8(UARTClass *uart_instance,int data,void *buffer,size_t length)\n\n{\n  RingBuffer *ring_buffer;\n  uint new_head;\n  \n  ring_buffer = uart_instance->_tx_buffer;\n  if (((int)(uart_instance->_pUart->UART_SR << 0x1e) < 0) && (ring_buffer->_iTail == ring_buffer->_iHead)) {\n    uart_instance->_pUart->UART_THR = data;\n  }\n  else {\n    new_head = ring_buffer->_iHead + 1U & 0x8000007f;\n    if ((int)new_head < 0) {\n      new_head = (new_head - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ring_buffer->_iTail == new_head);\n    ring_buffer->_aucBuffer[ring_buffer->_iHead] = (uchar)data;\n    uart_instance->_tx_buffer->_iHead = new_head;\n    uart_instance->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "write_to_uart_000812b8",
                "this": "uart_instance",
                "__fd": "data",
                "__buf": "buffer",
                "__n": "length",
                "pRVar1": "ring_buffer",
                "uVar2": "new_head"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008130c": {
            "entrypoint": "0x0008130c",
            "current_name": "end_uart_class_0008130c",
            "code": "\n/* DWARF original prototype: void  end(UARTClass * uart) */\n\nvoid __uartcall UARTClass::endUARTClass_0008130c(UARTClass *uart)\n\n{\n  uart->rxBuffer->head = uart->rxBuffer->tail;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)((((uint)(int)uart->irq >> 5) + 0x20) * 4 + -0x1fff1f00) =\n       1 << (uint)(byte)(uart->irq & 0x1f);\n  pmc_disable_periph_clk(uart->id);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008130c": "end_uart_class_0008130c",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "head",
                "_iTail": "tail",
                "_dwIrq": "irq",
                "_dwId": "id"
            },
            "calling": [],
            "called": [
                "pmc_disable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_uart_class_00081348",
            "code": "\n/* DWARF original prototype: UARTClass *  UARTClass(UARTClass * uart, Uart * uartObject, IRQn_Type irqType,\n   uint32_t id, RingBuffer * rxBuffer, RingBuffer * txBuffer) */\n\nUARTClass * __uartcall\nUARTClass::initializeUARTClass_00081348(UARTClass *uart,Uart *uartObject,IRQn_Type irqType,uint32_t id,RingBuffer *rxBuffer,\n          RingBuffer *txBuffer)\n\n{\n  *(undefined4 *)&uart->firstField = 0;\n  *(undefined4 *)&uart->secondField = 1000;\n  uart->uartPointer = uartObject;\n  *(undefined ***)uart = &PTR_write_1_00085650;\n  uart->interruptType = irqType;\n  uart->receiveBuffer = rxBuffer;\n  uart->deviceId = id;\n  uart->transmitBuffer = txBuffer;\n  return uart;\n}\n\n",
            "renaming": {
                "this": "uart",
                "pUart": "uartObject",
                "dwIrq": "irqType",
                "dwId": "id",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "field_0x4": "firstField",
                "field_0x8": "secondField",
                "_pUart": "uartPointer",
                "_dwIrq": "interruptType",
                "_rx_buffer": "receiveBuffer",
                "_dwId": "deviceId",
                "_tx_buffer": "transmitBuffer",
                "FUN_00081348": "initialize_uart_class_00081348"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008136c": {
            "entrypoint": "0x0008136c",
            "current_name": "initialize_uart_0008136c",
            "code": "\n/* DWARF original prototype: void  init(UARTClass * uartInstance, uint32_t dwBaudRate, uint32_t modeReg) */\n\nint __uartInstancecall UARTClass::initializeUART_0008136c(UARTClass *uartInstance,EVP_PKEY_CTX *evpPkeyCtx)\n\n{\n  uint irqOffset;\n  RingBuffer *rxBuffer;\n  RwReg modeReg;\n  Uart *uartRegister;\n  \n  pmc_enable_periph_clk(uartInstance->peripheralId);\n  uartRegister = uartInstance->uartPeripheral;\n  uartRegister->UART_PTCR = 0x202;\n  uartRegister->UART_CR = 0xac;\n  uartRegister->UART_MR = modeReg;\n  uartRegister->UART_BRGR = clockSpeed / (uint)evpPkeyCtx >> 4;\n  uartRegister->UART_IDR = 0xffffffff;\n  uartRegister->UART_IER = 0x61;\n  irqOffset = (uint)(int)uartInstance->irqNumber >> 5;\n  *(int *)(irqOffset * 4 + -0x1fff1f00) = 1 << (uint)(byte)(uartInstance->irqNumber & 0x1f);\n  rxBuffer = uartInstance->_rx_buffer;\n  rxBuffer->_iTail = 0;\n  rxBuffer->_iHead = 0;\n  rxBuffer = uartInstance->_tx_buffer;\n  rxBuffer->_iTail = 0;\n  rxBuffer->_iHead = 0;\n  uartRegister->UART_CR = 0x50;\n  return irqOffset;\n}\n\n",
            "renaming": {
                "FUN_0008136c": "initialize_uart_0008136c",
                "this": "uartInstance",
                "ctx": "evpPkeyCtx",
                "uVar1": "irqOffset",
                "pRVar2": "rxBuffer",
                "in_r2": "modeReg",
                "pUVar3": "uartRegister",
                "_dwId": "peripheralId",
                "_pUart": "uartPeripheral",
                "_dwIrq": "irqNumber",
                "SystemCoreClock": "clockSpeed"
            },
            "calling": [
                "begin",
                "begin"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_uart_000813dc",
            "code": "\n/* DWARF original prototype: void  begin(UARTClass * uartInstance, uint32_t baudRate) */\n\nvoid __uartInstancecall UARTClass::initializeUART_000813dc(UARTClass *uartInstance,uint32_t baudRate)\n\n{\n  init(uartInstance,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_uart_000813dc",
                "this": "uartInstance",
                "dwBaudRate": "baudRate"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "handle_interrupt_000813e4",
            "code": "\n/* DWARF original prototype: void  IrqHandler(UARTClass * uartObj) */\n\nvoid __uartObjcall UARTClass::handleInterrupt_000813e4(UARTClass *uartObj)\n\n{\n  RingBuffer *txBuffer;\n  uint32_t uartStatus;\n  RoReg uartSR;\n  \n  uartSR = uartObj->_pUart->UART_SR;\n  if ((int)(uartSR << 0x1f) < 0) {\n    RingBuffer::store_char(uartObj->_rx_buffer,(uint8_t)uartObj->_pUart->UART_RHR);\n  }\n  if ((int)(uartSR << 0x1e) < 0) {\n    txBuffer = uartObj->_tx_buffer;\n    if (txBuffer->_iTail != txBuffer->_iHead) {\n      uartObj->_pUart->UART_THR = (uint)txBuffer->_aucBuffer[txBuffer->_iTail];\n      txBuffer->_iTail = txBuffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    uartObj->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "uartObj",
                "pRVar1": "txBuffer",
                "status": "uartStatus",
                "RVar2": "uartSR",
                "FUN_000813e4": "handle_interrupt_000813e4"
            },
            "calling": [
                "USART3_Handler",
                "USART0_Handler",
                "USART1_Handler",
                "UART_Handler"
            ],
            "called": [
                "store_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008142e": {
            "entrypoint": "0x0008142e",
            "current_name": "initialize_usart_0008142e",
            "code": "\n/* DWARF original prototype: void  begin(USARTClass * usartInstance, uint32_t baudRate) */\n\nvoid __usartInstancecall USARTClass::initializeUSART_0008142e(USARTClass *usartInstance,uint32_t baudRate)\n\n{\n  UARTClass::init(&usartInstance->super_UARTClass,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008142e": "initialize_usart_0008142e",
                "this": "usartInstance",
                "dwBaudRate": "baudRate"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_usart_class_00081438",
            "code": "\n/* DWARF original prototype: USARTClass *  USARTClass(USARTClass * usartObj, Usart * usartPointer, IRQn_Type\n   interruptType, uint32_t id, RingBuffer * rxBuffer, RingBuffer * txBuffer) */\n\nUSARTClass * __usartObjcall\nUSARTClass::initializeUSARTClass_00081438(USARTClass *usartObj,Usart *usartPointer,IRQn_Type interruptType,uint32_t id,RingBuffer *rxBuffer,\n          RingBuffer *txBuffer)\n\n{\n  initializeUARTClass::initializeUARTClass(&usartObj->uartObj,(uartInstance *)usartPointer,interruptType,id,rxBuffer,txBuffer);\n  *(undefined ***)&usartObj->uartObj = &PTR_write_1_00085680;\n  usartObj->privateUsart = usartPointer;\n  return usartObj;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_usart_class_00081438",
                "this": "usartObj",
                "pUsart": "usartPointer",
                "dwIrq": "interruptType",
                "dwId": "id",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "super_UARTClass": "uartObj",
                "UARTClass": "initializeUARTClass",
                "Uart": "uartInstance",
                "_pUsart": "privateUsart"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "map_value_0008145c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong mapValue_0008145c(long input,long input_min,long input_max,long output_min,long output_max)\n\n{\n  return (uint)((input - input_min) * (output_max - output_min)) / (uint)(input_max - input_min) + output_min;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "map_value_0008145c",
                "x": "input",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max"
            },
            "calling": [
                "write",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081470": {
            "entrypoint": "0x00081470",
            "current_name": "FUNC_00081470",
            "code": "\n/* DWARF original prototype: void  StringIfHelper(String * this) */\n\nvoid __thiscall String::FUNC_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081470": "FUNC_00081470"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "deallocate_string_buffer_00081472",
            "code": "\n/* DWARF original prototype: void *  ~String(String * stringObject, int chargeFlag) */\n\nvoid * __stringObjectcall String::deallocateStringBuffer_00081472(String *stringObject,int chargeFlag)\n\n{\n  free(stringObject->buffer);\n  return stringObject;\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "__in_chrg": "chargeFlag",
                "FUN_00081472": "deallocate_string_buffer_00081472"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "invalidate_string_00081480",
            "code": "\n/* DWARF original prototype: void  invalidate(String * str) */\n\nvoid __strcall String::invalidateString_00081480(String *str)\n\n{\n  if (str->buffer != (char *)0x0) {\n    deallocateMemory(str->buffer);\n  }\n  str->buffer = (char *)0x0;\n  str->len = 0;\n  str->capacity = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "str",
                "free": "deallocateMemory",
                "FUN_00081480": "invalidate_string_00081480"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_buffer_00081496",
            "code": "\n/* DWARF original prototype: uchar  changeBuffer(String * str, uint newSize) */\n\nuchar __strcall String::resizeBuffer_00081496(String *str,uint newSize)\n\n{\n  char *newBuffer;\n  char *newbuffer;\n  \n  newBuffer = (char *)realloc(str->buffer,newSize + 1);\n  if (newBuffer != (char *)0x0) {\n    str->buffer = newBuffer;\n    str->capacity = newSize;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}\n\n",
            "renaming": {
                "this": "str",
                "maxStrLen": "newSize",
                "pcVar1": "newBuffer",
                "FUN_00081496": "resize_buffer_00081496"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "reserve_buffer_000814ae",
            "code": "\n/* DWARF original prototype: uchar  reserve(String * stringObject, uint newSize) */\n\nuchar __stringObjectcall String::reserveBuffer_000814ae(String *stringObject,uint newSize)\n\n{\n  uchar result;\n  \n  if ((stringObject->buffer == (char *)0x0) || (stringObject->capacity < newSize)) {\n    result = changeBuffer(stringObject,newSize);\n    if (result == '\\0') {\n      return '\\0';\n    }\n    if (stringObject->len == 0) {\n      *stringObject->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_000814ae": "reserve_buffer_000814ae",
                "this": "stringObject",
                "size": "newSize",
                "uVar1": "result"
            },
            "calling": [
                "copy",
                "concat"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "copy_string_000814d0",
            "code": "\n/* DWARF original prototype: String *  copy(String * strObj, char * cstr, uint lengthgth) */\n\nint __strObjcall String::copyString_000814d0(String *strObj,EVP_PKEY_CTX *destination,EVP_PKEY_CTX *source)\n\n{\n  uchar reserveSuccess;\n  \n  reserveSuccess = reserve(strObj,(uint)source);\n  if (reserveSuccess == '\\0') {\n    invalidate(strObj);\n  }\n  else {\n    strObj->length = (uint)source;\n    strcpy(strObj->buffer,(char *)destination);\n  }\n  return (int)strObj;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "dst": "destination",
                "src": "source",
                "uVar1": "reserveSuccess",
                "len": "length",
                "FUN_000814d0": "copy_string_000814d0"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_string_000814f6",
            "code": "\n/* DWARF original prototype: String *  String(String * stringObj, char * inputString) */\n\nString * __stringObjcall String::initializeString_000814f6(String *stringObj,char *inputString)\n\n{\n  EVP_PKEY_CTX *stringLength;\n  \n  stringObj->buffer = (char *)0x0;\n  stringObj->capacity = 0;\n  stringObj->len = 0;\n  if (inputString != (char *)0x0) {\n    stringLength = (EVP_PKEY_CTX *)strlen(inputString);\n    copy(stringObj,(EVP_PKEY_CTX *)inputString,stringLength);\n  }\n  return stringObj;\n}\n\n",
            "renaming": {
                "this": "stringObj",
                "cstr": "inputString",
                "src": "stringLength",
                "FUN_000814f6": "initialize_string_000814f6"
            },
            "calling": [
                "readStringUntil",
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "copy",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "string_move_0008151c",
            "code": "\n/* DWARF original prototype: void  move(String * destination, String * source) */\n\nvoid thisCall String::stringMove_0008151c(String *destination,String *source)\n\n{\n  char *dest;\n  \n  dest = destination->buffer;\n  if (dest != (char *)0x0) {\n    if ((source->buffer != (char *)0x0) && (source->length <= destination->capacity)) {\n      copyString(dest,source->buffer);\n      destination->length = source->length;\n      goto LAB_00081558;\n    }\n    freeMemory(dest);\n  }\n  destination->buffer = source->buffer;\n  destination->capacity = source->capacity;\n  destination->length = source->length;\n  source->buffer = (char *)0x0;\n  source->capacity = 0;\nLAB_00081558:\n  source->length = 0;\n  return;\n}\n\n",
            "renaming": {
                "__thiscall": "thisCall",
                "this": "destination",
                "rhs": "source",
                "__dest": "dest",
                "strcpy": "copyString",
                "len": "length",
                "free": "freeMemory",
                "FUN_0008151c": "string_move_0008151c"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "assign_string_00081560",
            "code": "\n/* DWARF original prototype: String *  operator=(String * destination, String * source) */\n\nString * __destinationcall String::assignString_00081560(String *destination,String *source)\n\n{\n  if (destination != source) {\n    move(destination,source);\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "this": "destination",
                "rval": "source",
                "FUN_00081560": "assign_string_00081560"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "append_string_00081570",
            "code": "\n/* DWARF original prototype: uchar  concat(String * strObj, char * sourceStr, uint sourceLength) */\n\nuchar __strObjcall String::appendString_00081570(String *strObj,char *sourceStr,uint sourceLength)\n\n{\n  uchar success;\n  uint finalSize;\n  \n  if (sourceStr == (char *)0x0) {\n    return '\\0';\n  }\n  if (sourceLength != 0) {\n    finalSize = strObj->len + sourceLength;\n    success = reserve(strObj,finalSize);\n    if (success == '\\0') {\n      return '\\0';\n    }\n    strcpy(strObj->buffer + strObj->len,sourceStr);\n    strObj->len = finalSize;\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "this": "strObj",
                "cstr": "sourceStr",
                "length": "sourceLength",
                "uVar1": "success",
                "size": "finalSize",
                "FUN_00081570": "append_string_00081570"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "strcpy",
                "reserve"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "append_char_to_string_0008159e",
            "code": "\n/* DWARF original prototype: uchar  concat(String * string, char c) */\n\nuchar __stringcall String::appendCharToString_0008159e(String *string,char c)\n\n{\n  uchar result;\n  char buffer [2];\n  short tempVariable;\n  \n  result = concat(string,buffer,1);\n  return result;\n}\n\n",
            "renaming": {
                "this": "string",
                "uVar1": "result",
                "buf": "buffer",
                "sStack_a": "tempVariable",
                "FUN_0008159e": "append_char_to_string_0008159e"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "string_equals_000815b8",
            "code": "\n/* DWARF original prototype: uchar  equals(String * str, char * otherStr) */\n\nuchar __strcall String::stringEquals_000815b8(String *str,char *otherStr)\n\n{\n  uchar result;\n  uint comparisonResult;\n  \n  if (str->len == 0) {\n    if (otherStr == (char *)0x0) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (otherStr != (char *)0x0) {\n      comparisonResult = strcmp(str->buffer,otherStr);\n      goto LAB_000815d4;\n    }\n    otherStr = str->buffer;\n  }\n  comparisonResult = (uint)(byte)*otherStr;\nLAB_000815d4:\n  result = '\\x01' - (char)comparisonResult;\n  if (1 < comparisonResult) {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "this": "str",
                "cstr": "otherStr",
                "uVar1": "result",
                "uVar2": "comparisonResult",
                "FUN_000815b8": "string_equals_000815b8"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "convert_string_to_int_000815de",
            "code": "\n/* DWARF original prototype: long  toInt(String * strObj) */\n\nlong __strObjcall String::convertStringToInt_000815de(String *strObj)\n\n{\n  long convertedValue;\n  \n  if (strObj->strBuffer != (char *)0x0) {\n    convertedValue = atol(strObj->strBuffer);\n    return convertedValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000815de": "convert_string_to_int_000815de",
                "this": "strObj",
                "buffer": "strBuffer",
                "lVar1": "convertedValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "atol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "initialize_device_000815ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeDevice_000815ec(void)\n\n{\n  EVP_PKEY_CTX *pkeyContext;\n  \n  setupWatchdog();\n  initializeComponents(pkeyContext);\n  initializeVariant();\n  shortDelay(1);\n  setupDevice();\n  doLoop {\n    executeLoop();\n    processSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "initialize_device_000815ec",
                "in_r0": "pkeyContext",
                "_watchdogDefaultSetup": "setupWatchdog",
                "init": "initializeComponents",
                "initVariant": "initializeVariant",
                "delay": "shortDelay",
                "setup": "setupDevice",
                "do": "doLoop",
                "loop": "executeLoop",
                "serialEventRun": "processSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "delay",
                "init",
                "loop",
                "_watchdogDefaultSetup",
                "setup",
                "serialEventRun",
                "initVariant"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "disable_watchdog_timer_00081618",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableWatchdogTimer_00081618(void)\n\n{\n  disableWatchdog(0x400e1a50);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "WDT_Disable": "disableWatchdog"
            },
            "calling": [
                "main"
            ],
            "called": [
                "WDT_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "measure_pulse_width_00081624",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t measurePulseWidth_00081624(uint32_t pinNumber,uint32_t desiredState,uint32_t pulseTimeout)\n\n{\n  uint32_t pulseWidth;\n  uint32_t pulseWidthCount;\n  uint32_t pinMask;\n  uint32_t pulseBit;\n  \n  pinMask = g_APinDescription[pinNumber].ulPin;\n  if (desiredState == 0) {\n    pinMask = 0;\n  }\n  pulseWidth = countPulseASM(&(g_APinDescription[pinNumber].pPort)->PIO_PDSR,g_APinDescription[pinNumber].ulPin,\n                        pinMask,((SystemCoreClock / 1000000) * pulseTimeout) / 0x12);\n  if (pulseWidth != 0) {\n    pulseWidth = (uint32_t)((ulonglong)(pulseWidth * 18000 + 16000) / ((ulonglong)SystemCoreClock / 1000));\n  }\n  return pulseWidth;\n}\n\n",
            "renaming": {
                "FUN_00081624": "measure_pulse_width_00081624",
                "pin": "pinNumber",
                "state": "desiredState",
                "timeout": "pulseTimeout",
                "uVar1": "pulseWidth",
                "width": "pulseWidthCount",
                "stateMask": "pinMask",
                "bit": "pulseBit"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_parameter_00081684",
            "code": "\nint check_parameter_00081684(uint *ptr_array,uint bit_mask,uint expected_value,int max_iterations)\n\n{\n  int iteration_count;\n  \n  do {\n    if ((*ptr_array & bit_mask) != expected_value) {\n      do {\n        if ((*ptr_array & bit_mask) == expected_value) {\n          iteration_count = 0;\n          do {\n            if ((*ptr_array & bit_mask) != expected_value) {\n              return iteration_count;\n            }\n            iteration_count = iteration_count + 1;\n          } while (max_iterations != iteration_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_parameter_00081684",
                "param_1": "ptr_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "iVar1": "iteration_count"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816c8": {
            "entrypoint": "0x000816c8",
            "current_name": "increment_tick_count_000816c8",
            "code": "\nvoid incrementTickCount_000816c8(void)\n\n{\n  tickCount = tickCount + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816c8": "increment_tick_count_000816c8",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_tick_count_000816d8",
            "code": "\nundefined4 getTickCount_000816d8(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_tick_count_000816d8",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816e4": {
            "entrypoint": "0x000816e4",
            "current_name": "set_default_value_000816e4",
            "code": "\nvoid setDefaultValue_000816e4(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 4) = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816e4": "set_default_value_000816e4",
                "param_1": "baseAddress"
            },
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "register_at_exit_function_000816ec",
            "code": "\nvoid registerAtExitFunction_000816ec(undefined4 exitFunction,undefined4 userData)\n\n{\n  __cxa_atexit(userData,exitFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "register_at_exit_function_000816ec",
                "param_1": "exitFunction",
                "param_2": "userData"
            },
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid printAssertionFailedMessage_000816f8(undefined4 assertion,undefined4 lineNumber,char *function,undefined4 fileName)\n\n{\n  char *extraInfo;\n  \n  if (function == (char *)0x0) {\n    function = \"\";\n    extraInfo = function;\n  }\n  else {\n    extraInfo = \", function: \";\n  }\n  fiprintf(*(undefined4 *)(_impure_ptr + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           fileName,assertion,lineNumber,extraInfo,function);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "assertion",
                "param_2": "lineNumber",
                "param_3": "function",
                "param_4": "fileName",
                "pcVar1": "extraInfo"
            },
            "calling": [
                "TC_Configure",
                "TC_Start"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "convert_string_to_long_00081734",
            "code": "\nlong convertStringToLong_00081734(char *stringToConvert)\n\n{\n  long convertedValue;\n  \n  convertedValue = strtol(stringToConvert,(char **)0x0,10);\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00081734": "convert_string_to_long_00081734",
                "__nptr": "stringToConvert",
                "lVar1": "convertedValue"
            },
            "calling": [
                "toInt"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008173c": {
            "entrypoint": "0x0008173c",
            "current_name": "register_exit_proc_0008173c",
            "code": "\nvoid register_exit_proc_0008173c(undefined4 exit_proc_type,undefined4 param_2,undefined4 param_3)\n\n{\n  __register_exitproc(2,exit_proc_type,param_2,param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008173c": "register_exit_proc_0008173c",
                "param_1": "exit_proc_type"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_stack_values_00081750",
            "code": "\nvoid printStackValues_00081750(undefined4 formatString,undefined4 stream,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 value3;\n  undefined4 value4;\n  \n  value3 = value1;\n  value4 = value2;\n  _vfiprintf_r(_impure_ptr,formatString,stream,&value3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_stack_values_00081750",
                "param_1": "formatString",
                "param_2": "stream",
                "param_3": "value1",
                "param_4": "value2",
                "uStack_8": "value3",
                "uStack_4": "value4"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "initialize_and_execute_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid initialize_and_execute_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  _init();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "initialize_and_execute_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "calling": [
                "init"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_formatted_value_000817c8",
            "code": "\nvoid printFormattedValue_000817c8(undefined4 formatString,undefined4 param2Value,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined4 formattedParam2;\n  undefined4 formattedParam3;\n  undefined4 formattedParam4;\n  \n  formattedParam2 = param2Value;\n  formattedParam3 = param3Value;\n  formattedParam4 = param4Value;\n  _vfiprintf_r(_impure_ptr,*(undefined4 *)(_impure_ptr + 8),formatString,&formattedParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_formatted_value_000817c8",
                "param_1": "formatString",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "uStack_c": "formattedParam2",
                "uStack_8": "formattedParam3",
                "uStack_4": "formattedParam4"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid * allocate_memory_000817f0(size_t size)\n\n{\n  void *allocated_memory;\n  \n  allocated_memory = (void *)_malloc_r(_impure_ptr,size);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "free_memory_00081800",
            "code": "\nvoid freeMemory_00081800(void *memoryPointer)\n\n{\n  _free_r(_impure_ptr,memoryPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "free_memory_00081800",
                "__ptr": "memoryPointer"
            },
            "calling": [
                "move",
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_block_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemoryBlock_00081810(undefined4 *param_arr,uint size)\n\n{\n  undefined1 *ptr1;\n  int var1;\n  uint var2;\n  uint var3;\n  int var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  undefined4 *ptr2;\n  undefined1 *ptr3;\n  undefined1 *ptr4;\n  undefined1 *ptr5;\n  uint var8;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  undefined1 *ptr8;\n  \n  if (size + 0xb < 0x17) {\n    var8 = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    var8 = size + 0xb & 0xfffffff8;\n    if (((int)var8 < 0) || (var8 < size)) {\nLAB_00081876:\n      *param_arr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_arr);\n  ptr6 = DAT_20070474;\n  if (var8 < 0x1f8) {\n    ptr5 = *(undefined1 **)((int)&DAT_20070470 + var8);\n    if ((ptr5 != &__malloc_av_ + var8) ||\n       (ptr4 = ptr5 + 8, ptr5 = *(undefined1 **)(ptr5 + 0x14), ptr4 != ptr5)) {\n      var7 = *(uint *)(ptr5 + 4);\n      var4 = *(int *)(ptr5 + 0xc);\n      var8 = *(uint *)(ptr5 + (var7 & 0xfffffffc) + 4);\n      var1 = *(int *)(ptr5 + 8);\n      *(int *)(var1 + 0xc) = var4;\n      *(int *)(var4 + 8) = var1;\n      *(uint *)(ptr5 + (var7 & 0xfffffffc) + 4) = var8 | 1;\n      __malloc_unlock(param_arr);\n      return (int *)(ptr5 + 8);\n    }\n    var7 = (var8 >> 3) + 2;\n  }\n  else {\n    var7 = var8 >> 9;\n    if (var7 == 0) {\n      var4 = 0x7e;\n      var1 = 0x3f;\n    }\n    else if (var7 < 5) {\n      var1 = (var8 >> 6) + 0x38;\n      var4 = var1 * 2;\n    }\n    else if (var7 < 0x15) {\n      var1 = var7 + 0x5b;\n      var4 = var1 * 2;\n    }\n    else if (var7 < 0x55) {\n      var1 = (var8 >> 0xc) + 0x6e;\n      var4 = var1 * 2;\n    }\n    else if (var7 < 0x155) {\n      var1 = (var8 >> 0xf) + 0x77;\n      var4 = var1 * 2;\n    }\n    else if (var7 < 0x555) {\n      var1 = (var8 >> 0x12) + 0x7c;\n      var4 = var1 * 2;\n    }\n    else {\n      var4 = 0xfc;\n      var1 = 0x7e;\n    }\n    for (ptr5 = (undefined1 *)(&DAT_20070470)[var4]; &__malloc_av_ + var4 * 4 != ptr5;\n        ptr5 = *(undefined1 **)(ptr5 + 0xc)) {\n      var7 = *(uint *)(ptr5 + 4) & 0xfffffffc;\n      if (0xf < (int)(var7 - var8)) {\n        var1 = var1 + -1;\n        break;\n      }\n      if (-1 < (int)(var7 - var8)) {\n        var8 = *(uint *)(ptr5 + var7 + 4);\n        var4 = *(int *)(ptr5 + 0xc);\n        var1 = *(int *)(ptr5 + 8);\n        *(int *)(var1 + 0xc) = var4;\n        *(int *)(var4 + 8) = var1;\n        *(uint *)(ptr5 + var7 + 4) = var8 | 1;\n        __malloc_unlock(param_arr);\n        return (int *)(ptr5 + 8);\n      }\n    }\n    var7 = var1 + 1;\n  }\n  var2 = DAT_20070468;\n  if ((undefined1 **)DAT_20070474 != &DAT_2007046c) {\n    var2 = DAT_20070474[1];\n    var3 = var2 & 0xfffffffc;\n    var5 = var3 - var8;\n    if (0xf < (int)var5) {\n      ptr7 = (undefined4 *)(var8 + (int)DAT_20070474);\n      DAT_20070474[1] = var8 | 1;\n      DAT_20070474 = ptr7;\n      DAT_20070478 = ptr7;\n      ptr7[3] = &DAT_2007046c;\n      ptr7[2] = &DAT_2007046c;\n      ptr7[1] = var5 | 1;\n      *(uint *)((int)ptr7 + var5) = var5;\n      __malloc_unlock(param_arr);\n      return ptr6 + 2;\n    }\n    DAT_20070478 = &DAT_2007046c;\n    DAT_20070474 = &DAT_2007046c;\n    if (-1 < (int)var5) {\n      *(uint *)((int)ptr6 + var3 + 4) = *(uint *)((int)ptr6 + var3 + 4) | 1;\n      __malloc_unlock(param_arr);\n      return ptr6 + 2;\n    }\n    if (var3 < 0x200) {\n      var3 = var2 & 0xfffffff8;\n      var1 = *(int *)((int)&DAT_2007046c + var3);\n      var2 = 1 << ((int)(var2 >> 3) >> 2 & 0xffU) | DAT_20070468;\n      ptr6[2] = var1;\n      ptr6[3] = &__malloc_av_ + var3;\n      DAT_20070468 = var2;\n      *(undefined4 **)((int)&DAT_2007046c + var3) = ptr6;\n      *(undefined4 **)(var1 + 0xc) = ptr6;\n    }\n    else {\n      var5 = var2 >> 9;\n      if (var5 < 5) {\n        var4 = (var2 >> 6) + 0x38;\n        var1 = var4 * 2;\n      }\n      else if (var5 < 0x15) {\n        var4 = var5 + 0x5b;\n        var1 = var4 * 2;\n      }\n      else if (var5 < 0x55) {\n        var4 = (var2 >> 0xc) + 0x6e;\n        var1 = var4 * 2;\n      }\n      else if (var5 < 0x155) {\n        var4 = (var2 >> 0xf) + 0x77;\n        var1 = var4 * 2;\n      }\n      else if (var5 < 0x555) {\n        var4 = (var2 >> 0x12) + 0x7c;\n        var1 = var4 * 2;\n      }\n      else {\n        var1 = 0xfc;\n        var4 = 0x7e;\n      }\n      ptr5 = (&DAT_2007046c)[var1];\n      if (ptr5 == &__malloc_av_ + var1 * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (var4 >> 2 & 0xffU);\n        ptr4 = ptr5;\n      }\n      else {\n        do {\n          ptr4 = ptr5;\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var3) break;\n          ptr5 = *(undefined1 **)(ptr5 + 8);\n          ptr4 = ptr5;\n        } while (&__malloc_av_ + var1 * 4 != ptr5);\n        ptr5 = *(undefined1 **)(ptr4 + 0xc);\n      }\n      var2 = DAT_20070468;\n      ptr6[3] = ptr5;\n      ptr6[2] = ptr4;\n      *(undefined4 **)(ptr5 + 8) = ptr6;\n      *(undefined4 **)(ptr4 + 0xc) = ptr6;\n    }\n  }\n  ptr5 = DAT_2007046c;\n  var3 = 1 << ((int)var7 >> 2 & 0xffU);\n  if (var3 <= var2) {\n    if ((var2 & var3) == 0) {\n      var7 = var7 & 0xfffffffc;\n      do {\n        var3 = var3 << 1;\n        var7 = var7 + 4;\n      } while ((var2 & var3) == 0);\n    }\n    do {\n      ptr7 = (undefined4 *)(&__malloc_av_ + var7 * 8);\n      ptr6 = ptr7;\n      var2 = var7;\n      do {\n        for (ptr2 = (undefined4 *)ptr6[3]; ptr6 != ptr2; ptr2 = (undefined4 *)ptr2[3])\n        {\n          var5 = ptr2[1] & 0xfffffffc;\n          var6 = var5 - var8;\n          if (0xf < (int)var6) {\n            var4 = ptr2[2];\n            var1 = ptr2[3];\n            ptr6 = (undefined4 *)(var8 + (int)ptr2);\n            ptr2[1] = var8 | 1;\n            *(int *)(var4 + 0xc) = var1;\n            *(int *)(var1 + 8) = var4;\n            DAT_20070474 = ptr6;\n            DAT_20070478 = ptr6;\n            ptr6[3] = &DAT_2007046c;\n            ptr6[2] = &DAT_2007046c;\n            ptr6[1] = var6 | 1;\n            *(uint *)((int)ptr6 + var6) = var6;\n            __malloc_unlock(param_arr);\n            return ptr2 + 2;\n          }\n          if (-1 < (int)var6) {\n            var1 = ptr2[2];\n            var4 = ptr2[3];\n            *(uint *)((int)ptr2 + var5 + 4) = *(uint *)((int)ptr2 + var5 + 4) | 1;\n            *(int *)(var1 + 0xc) = var4;\n            *(int *)(var4 + 8) = var1;\n            __malloc_unlock(param_arr);\n            return ptr2 + 2;\n          }\n        }\n        var2 = var2 + 1;\n        ptr6 = ptr6 + 2;\n      } while ((var2 & 3) != 0);\n      do {\n        var5 = var7 & 3;\n        ptr6 = ptr7 + -2;\n        var7 = var7 - 1;\n        if (var5 == 0) {\n          DAT_20070468 = DAT_20070468 & ~var3;\n          break;\n        }\n        ptr7 = (undefined4 *)*ptr7;\n      } while (ptr7 == ptr6);\n      var3 = var3 * 2;\n      if ((DAT_20070468 <= var3 && var3 - DAT_20070468 != 0) || (var7 = var2, var3 == 0))\n      break;\n      for (; (DAT_20070468 & var3) == 0; var3 = var3 << 1) {\n        var7 = var7 + 4;\n      }\n    } while( true );\n  }\n  var7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  if ((var8 <= var7) && (var2 = var7 - var8, ptr4 = DAT_2007046c, 0xf < (int)var2))\n  goto LAB_00081b1a;\n  ptr8 = DAT_2007046c + var7;\n  if (__malloc_sbrk_base == (undefined1 *)0xffffffff) {\n    var2 = var8 + __malloc_top_pad + 0x10;\n  }\n  else {\n    var2 = var8 + __malloc_top_pad + 0x100f & 0xfffff000;\n  }\n  ptr4 = (undefined1 *)_sbrk_r(param_arr,var2);\n  if ((ptr4 == (undefined1 *)0xffffffff) || ((ptr4 < ptr8 && (ptr5 != &__malloc_av_))))\n  {\n    var7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\n  else {\n    ptr3 = __malloc_current_mallinfo + var2;\n    __malloc_current_mallinfo = ptr3;\n    if ((ptr8 == ptr4) && (((uint)ptr8 & 0xfff) == 0)) {\n      *(uint *)(DAT_2007046c + 4) = var2 + var7 | 1;\n    }\n    else {\n      ptr1 = ptr4;\n      if (__malloc_sbrk_base != (undefined1 *)0xffffffff) {\n        ptr1 = __malloc_sbrk_base;\n        __malloc_current_mallinfo = ptr3 + ((int)ptr4 - (int)ptr8);\n      }\n      __malloc_sbrk_base = ptr1;\n      var3 = (uint)ptr4 & 7;\n      if (var3 == 0) {\n        var1 = 0x1000;\n      }\n      else {\n        ptr4 = ptr4 + (8 - var3);\n        var1 = 0x1008 - var3;\n      }\n      var1 = var1 - ((uint)(ptr4 + var2) & 0xfff);\n      var4 = _sbrk_r(param_arr,var1);\n      if (var4 == -1) {\n        var2 = 1;\n        var1 = 0;\n      }\n      else {\n        var2 = (var4 - (int)ptr4) + var1 | 1;\n      }\n      ptr3 = __malloc_current_mallinfo + var1;\n      DAT_2007046c = ptr4;\n      __malloc_current_mallinfo = ptr3;\n      *(uint *)(ptr4 + 4) = var2;\n      if (ptr5 != &__malloc_av_) {\n        if (var7 < 0x10) {\n          *(undefined4 *)(ptr4 + 4) = 1;\n          var7 = 0;\n          goto LAB_00081b04;\n        }\n        var7 = var7 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = var7 | *(uint *)(ptr5 + 4) & 1;\n        *(undefined4 *)(ptr5 + var7 + 4) = 5;\n        *(undefined4 *)(ptr5 + var7 + 8) = 5;\n        if (0xf < var7) {\n          _free_r(param_arr,ptr5 + 8);\n          ptr3 = __malloc_current_mallinfo;\n        }\n      }\n    }\n    if (__malloc_max_sbrked_mem < ptr3) {\n      __malloc_max_sbrked_mem = ptr3;\n    }\n    if (__malloc_max_total_mem < ptr3) {\n      __malloc_max_total_mem = ptr3;\n    }\n    var7 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    ptr4 = DAT_2007046c;\n  }\nLAB_00081b04:\n  var2 = var7 - var8;\n  if ((var7 < var8) || ((int)var2 < 0x10)) {\n    __malloc_unlock(param_arr);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  DAT_2007046c = ptr4 + var8;\n  *(uint *)(ptr4 + 4) = var8 | 1;\n  *(uint *)(DAT_2007046c + 4) = var2 | 1;\n  __malloc_unlock(param_arr);\n  return (int *)(ptr4 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "param_1": "param_arr",
                "param_2": "size",
                "puVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "iVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "var7",
                "puVar9": "ptr2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar12": "ptr5",
                "uVar13": "var8",
                "puVar14": "ptr6",
                "puVar15": "ptr7",
                "puVar16": "ptr8"
            },
            "calling": [
                "malloc",
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "memcpy_custom_00081d48",
            "code": "\nvoid * memcpy_custom_00081d48(void *dest,void *src,size_t size)\n\n{\n  undefined *dest_ptr;\n  undefined4 *dest_ptr_aligned;\n  undefined4 *dest_ptr_aligned_backup;\n  undefined *src_ptr;\n  undefined4 *src_ptr_aligned;\n  undefined *src_ptr_backup;\n  uint remaining_size;\n  uint alignment_offset;\n  bool is_remaining_size_larger;\n  \n  dest_ptr_aligned_backup = (undefined4 *)dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      alignment_offset = size - 4;\n      dest_ptr = (undefined *)dest;\n      if (3 < size) {\n        do {\n          src_ptr_backup = (undefined *)src;\n          src_ptr = dest_ptr;\n          is_remaining_size_larger = alignment_offset != 0;\n          alignment_offset = alignment_offset - 1;\n          *src_ptr = *src_ptr_backup;\n          dest_ptr = src_ptr + 1;\n          src = src_ptr_backup + 1;\n        } while (is_remaining_size_larger);\n        src_ptr[1] = src_ptr_backup[1];\n        src_ptr[2] = src_ptr_backup[2];\n        src_ptr[3] = src_ptr_backup[3];\n        return dest;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      alignment_offset = 4 - ((uint)dest & 3);\n      size = size - alignment_offset;\n      dest_ptr_aligned = (undefined4 *)dest;\n      src_ptr_aligned = (undefined4 *)src;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)dest & 1) != 0) {\n        src_ptr_aligned = (undefined4 *)((int)src + 1);\n        dest_ptr_aligned = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *src;\n      }\n      dest_ptr_aligned_backup = dest_ptr_aligned;\n      src = src_ptr_aligned;\n      if ((alignment_offset & 2) != 0) {\n        src = (void *)((int)src_ptr_aligned + 2);\n        dest_ptr_aligned_backup = (undefined4 *)((int)dest_ptr_aligned + 2);\n        *(undefined2 *)dest_ptr_aligned = *(undefined2 *)src_ptr_aligned;\n      }\n    }\n  }\n  while (0x3f < size) {\n                    /* WARNING: Load size is inaccurate */\n    *dest_ptr_aligned_backup = *src;\n    dest_ptr_aligned_backup[1] = *(undefined4 *)((int)src + 4);\n    dest_ptr_aligned_backup[2] = *(undefined4 *)((int)src + 8);\n    dest_ptr_aligned_backup[3] = *(undefined4 *)((int)src + 0xc);\n    dest_ptr_aligned_backup[4] = *(undefined4 *)((int)src + 0x10);\n    dest_ptr_aligned_backup[5] = *(undefined4 *)((int)src + 0x14);\n    dest_ptr_aligned_backup[6] = *(undefined4 *)((int)src + 0x18);\n    dest_ptr_aligned_backup[7] = *(undefined4 *)((int)src + 0x1c);\n    dest_ptr_aligned_backup[8] = *(undefined4 *)((int)src + 0x20);\n    dest_ptr_aligned_backup[9] = *(undefined4 *)((int)src + 0x24);\n    dest_ptr_aligned_backup[10] = *(undefined4 *)((int)src + 0x28);\n    dest_ptr_aligned_backup[0xb] = *(undefined4 *)((int)src + 0x2c);\n    dest_ptr_aligned_backup[0xc] = *(undefined4 *)((int)src + 0x30);\n    dest_ptr_aligned_backup[0xd] = *(undefined4 *)((int)src + 0x34);\n    dest_ptr_aligned_backup[0xe] = *(undefined4 *)((int)src + 0x38);\n    dest_ptr_aligned_backup[0xf] = *(undefined4 *)((int)src + 0x3c);\n    dest_ptr_aligned_backup = dest_ptr_aligned_backup + 0x10;\n    src = (undefined4 *)((int)src + 0x40);\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *dest_ptr_aligned_backup = *src;\n      dest_ptr_aligned_backup[1] = *(undefined4 *)((int)src + 4);\n      dest_ptr_aligned_backup[2] = *(undefined4 *)((int)src + 8);\n      dest_ptr_aligned_backup[3] = *(undefined4 *)((int)src + 0xc);\n      dest_ptr_aligned_backup = dest_ptr_aligned_backup + 4;\n      src = (void *)((int)src + 0x10);\n      is_remaining_size_larger = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining_size_larger);\n  }\n  alignment_offset = remaining_size + 0xc;\n  src_ptr_aligned = dest_ptr_aligned_backup;\n  dest_ptr_aligned = (undefined4 *)src;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      src = dest_ptr_aligned + 1;\n      *src_ptr_aligned = *dest_ptr_aligned;\n      is_remaining_size_larger = 3 < alignment_offset;\n      alignment_offset = alignment_offset - 4;\n      dest_ptr_aligned_backup = src_ptr_aligned + 1;\n      src_ptr_aligned = src_ptr_aligned + 1;\n      dest_ptr_aligned = (undefined4 *)src;\n    } while (is_remaining_size_larger);\n  }\nLAB_00081dcc:\n  if (alignment_offset + 4 != 0) {\n    dest_ptr_aligned = dest_ptr_aligned_backup;\n    src_ptr_aligned = (undefined4 *)src;\n                    /* WARNING: Load size is inaccurate */\n    if ((alignment_offset & 1) != 0) {\n      src_ptr_aligned = (undefined4 *)((int)src + 1);\n      dest_ptr_aligned = (undefined4 *)((int)dest_ptr_aligned_backup + 1);\n      *(undefined *)dest_ptr_aligned_backup = *src;\n    }\n    if ((alignment_offset + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr_aligned = *(undefined2 *)src_ptr_aligned;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "memcpy_custom_00081d48",
                "__dest": "dest",
                "__src": "src",
                "__n": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_aligned",
                "puVar3": "dest_ptr_aligned_backup",
                "puVar4": "src_ptr",
                "puVar5": "src_ptr_aligned",
                "puVar6": "src_ptr_backup",
                "uVar7": "remaining_size",
                "uVar8": "alignment_offset",
                "bVar9": "is_remaining_size_larger"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "reverse_mem_cpy_00081e34",
            "code": "\nvoid * reverseMemCpy_00081e34(void *destination,void *source,size_t remainingLength)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *tempDestPtr;\n  undefined4 *tempSrcPtr;\n  undefined *tempSrcPtr;\n  uint remainingLength;\n  undefined *tempDestEndPtr;\n  uint remainingBytes;\n  \n  if ((source < destination) && (tempSrcPtr = (undefined *)((int)source + remainingLength), destination < tempSrcPtr)) {\n    tempDestEndPtr = (undefined *)((int)destination + remainingLength);\n    index = remainingLength - 1;\n    if (remainingLength != 0) {\n      do {\n        tempSrcPtr = tempSrcPtr + -1;\n        index = index + -1;\n        tempDestEndPtr = tempDestEndPtr + -1;\n        *tempDestEndPtr = *tempSrcPtr;\n      } while (index != -1);\n    }\n    return destination;\n  }\n  destPtr = (undefined4 *)destination;\n  if (remainingLength < 0x10) {\n    if (remainingLength == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    tempDestPtr = (undefined4 *)source;\n    do {\n      tempSrcPtr = destPtr + 4;\n      *destPtr = *tempDestPtr;\n      destPtr[1] = tempDestPtr[1];\n      destPtr[2] = tempDestPtr[2];\n      destPtr[3] = tempDestPtr[3];\n      destPtr = tempSrcPtr;\n      tempDestPtr = tempDestPtr + 4;\n    } while (tempSrcPtr != (undefined4 *)((int)destination + (remainingLength - 0x10 & 0xfffffff0) + 0x10));\n    remainingBytes = remainingLength & 0xf;\n    index = ((remainingLength - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + index);\n    destPtr = (undefined4 *)(index + (int)destination);\n    remainingLength = remainingBytes;\n    tempDestPtr = destPtr;\n    tempSrcPtr = (undefined4 *)source;\n    if (3 < remainingBytes) {\n      do {\n        remainingLength = remainingLength - 4;\n        *tempDestPtr = *tempSrcPtr;\n        tempDestPtr = tempDestPtr + 1;\n        tempSrcPtr = tempSrcPtr + 1;\n      } while (3 < remainingLength);\n      index = (remainingBytes - 4 & 0xfffffffc) + 4;\n      destPtr = (undefined4 *)((int)destPtr + index);\n      source = (void *)((int)source + index);\n      remainingBytes = remainingLength & 3;\n    }\n    remainingLength = remainingBytes;\n    if (remainingLength == 0) {\n      return destination;\n    }\n  }\n  tempDestPtr = destPtr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    tempSrcPtr = (undefined4 *)((int)tempDestPtr + 1);\n    *(undefined *)tempDestPtr = *source;\n    source = (undefined4 *)((int)source + 1);\n    tempDestPtr = tempSrcPtr;\n  } while (tempSrcPtr != (undefined4 *)(remainingLength + (int)destPtr));\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "reverse_mem_cpy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "remainingLength",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "tempDestPtr",
                "puVar4": "tempSrcPtr",
                "puVar5": "tempSrcPtr",
                "puVar7": "tempDestEndPtr",
                "uVar6": "remainingLength",
                "uVar8": "remainingBytes"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_memory_00081f00",
            "code": "\nvoid * fillMemory_00081f00(void *dst,int value,size_t size)\n\n{\n  uint *dstPtr;\n  uint *srcPtr;\n  uint *tempPtr;\n  uint wordValue;\n  uint remainingSize;\n  bool isZero;\n  \n  srcPtr = (uint *)dst;\n  if (((uint)dst & 3) != 0) {\n    isZero = size == 0;\n    dstPtr = (uint *)dst;\n    size = size - 1;\n    if (isZero) {\n      return dst;\n    }\n    while( true ) {\n      srcPtr = (uint *)((int)dstPtr + 1);\n      *(char *)dstPtr = (char)value;\n      if (((uint)srcPtr & 3) == 0) break;\n      isZero = size == 0;\n      dstPtr = srcPtr;\n      size = size - 1;\n      if (isZero) {\n        return dst;\n      }\n    }\n  }\n  if (3 < size) {\n    wordValue = value & 0xffU | (value & 0xffU) << 8;\n    wordValue = wordValue | wordValue << 0x10;\n    remainingSize = size;\n    dstPtr = srcPtr;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *dstPtr = wordValue;\n        dstPtr[1] = wordValue;\n        dstPtr[2] = wordValue;\n        dstPtr[3] = wordValue;\n        dstPtr = dstPtr + 4;\n      } while (dstPtr != (uint *)((int)srcPtr + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      srcPtr = srcPtr + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      dstPtr = srcPtr;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *srcPtr = wordValue;\n      srcPtr = srcPtr + 1;\n    } while (3 < size);\n    srcPtr = (uint *)((int)dstPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dstPtr = srcPtr;\n    do {\n      tempPtr = (uint *)((int)dstPtr + 1);\n      *(char *)dstPtr = (char)value;\n      dstPtr = tempPtr;\n    } while (tempPtr != (uint *)(size + (int)srcPtr));\n  }\n  return dst;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_memory_00081f00",
                "__s": "dst",
                "__c": "value",
                "__n": "size",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempPtr",
                "uVar4": "wordValue",
                "uVar5": "remainingSize",
                "bVar6": "isZero"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r",
                "_realloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_memory_00081f9c",
            "code": "\nvoid * reallocateMemory_00081f9c(void *inputPointer,size_t size)\n\n{\n  void *newPointer;\n  \n  newPointer = (void *)_realloc_r(_impure_ptr,inputPointer,size);\n  return newPointer;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "__ptr": "inputPointer",
                "__size": "size",
                "pvVar1": "newPointer"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *allocator,int *ptr,uint size)\n\n{\n  int tempVar1;\n  int *newPtr;\n  uint tempVar2;\n  size_t tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  int *tempPtr1;\n  uint tempVar6;\n  uint tempVar7;\n  int *tempPtr2;\n  \n  if (ptr == (int *)0x0) {\n    newPtr = (int *)_malloc_r(allocator,size);\n    return newPtr;\n  }\n  __malloc_lock();\n  tempVar4 = ptr[-1];\n  tempVar6 = tempVar4 & 0xfffffffc;\n  newPtr = ptr + -2;\n  if (size + 0xb < 0x17) {\n    tempVar7 = 0x10;\n  }\n  else {\n    tempVar7 = size + 0xb & 0xfffffff8;\n    if ((int)tempVar7 < 0) goto LAB_00082078;\n  }\n  if (tempVar7 < size) {\nLAB_00082078:\n    *allocator = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)tempVar6 < (int)tempVar7) {\n    tempVar1 = (int)newPtr + tempVar6;\n    if (DAT_2007046c == tempVar1) {\n      tempVar2 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n      tempVar1 = DAT_2007046c;\n      if ((int)(tempVar7 + 0x10) <= (int)(tempVar2 + tempVar6)) {\n        DAT_2007046c = (int)newPtr + tempVar7;\n        *(uint *)(DAT_2007046c + 4) = (tempVar2 + tempVar6) - tempVar7 | 1;\n        ptr[-1] = tempVar7 | ptr[-1] & 1U;\n        __malloc_unlock(allocator);\n        return ptr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(tempVar1 + 4) & 0xfffffffe) + tempVar1 + 4) & 1) == 0) {\n      tempVar2 = *(uint *)(tempVar1 + 4) & 0xfffffffc;\n      if ((int)tempVar7 <= (int)(tempVar2 + tempVar6)) {\n        tempVar5 = *(int *)(tempVar1 + 0xc);\n        tempVar1 = *(int *)(tempVar1 + 8);\n        *(int *)(tempVar1 + 0xc) = tempVar5;\n        *(int *)(tempVar5 + 8) = tempVar1;\n        tempVar6 = tempVar2 + tempVar6;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      tempVar2 = 0;\n      tempVar1 = 0;\n    }\n    if (-1 < (int)(tempVar4 << 0x1f)) {\n      tempPtr2 = (int *)((int)newPtr - ptr[-2]);\n      tempVar4 = (tempPtr2[1] & 0xfffffffcU) + tempVar6;\n      if (tempVar1 != 0) {\n        if (tempVar1 == DAT_2007046c) {\n          if ((int)(tempVar7 + 0x10) <= (int)(tempVar2 + tempVar4)) {\n            newPtr = tempPtr2 + 2;\n            tempVar1 = *newPtr;\n            tempVar5 = tempPtr2[3];\n            tempVar3 = tempVar6 - 4;\n            *(int *)(tempVar1 + 0xc) = tempVar5;\n            *(int *)(tempVar5 + 8) = tempVar1;\n            if (tempVar3 < 0x25) {\n              tempPtr1 = newPtr;\n              if (0x13 < tempVar3) {\n                tempPtr2[2] = *ptr;\n                tempPtr2[3] = ptr[1];\n                if (tempVar3 < 0x1c) {\n                  ptr = ptr + 2;\n                  tempPtr1 = tempPtr2 + 4;\n                }\n                else {\n                  tempPtr2[4] = ptr[2];\n                  tempPtr2[5] = ptr[3];\n                  if (tempVar3 == 0x24) {\n                    tempPtr2[6] = ptr[4];\n                    tempPtr1 = ptr + 5;\n                    ptr = ptr + 6;\n                    tempPtr2[7] = *tempPtr1;\n                    tempPtr1 = tempPtr2 + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    tempPtr1 = tempPtr2 + 6;\n                  }\n                }\n              }\n              *tempPtr1 = *ptr;\n              tempPtr1[1] = ptr[1];\n              tempPtr1[2] = ptr[2];\n            }\n            else {\n              memmove(newPtr,ptr,tempVar3);\n            }\n            DAT_2007046c = (int)tempPtr2 + tempVar7;\n            *(uint *)(DAT_2007046c + 4) = (tempVar2 + tempVar4) - tempVar7 | 1;\n            tempPtr2[1] = tempVar7 | tempPtr2[1] & 1U;\n            __malloc_unlock(allocator);\n            return newPtr;\n          }\n        }\n        else {\n          tempVar2 = tempVar2 + tempVar4;\n          if ((int)tempVar7 <= (int)tempVar2) {\n            tempVar5 = *(int *)(tempVar1 + 0xc);\n            tempVar1 = *(int *)(tempVar1 + 8);\n            *(int *)(tempVar1 + 0xc) = tempVar5;\n            *(int *)(tempVar5 + 8) = tempVar1;\n            tempPtr1 = tempPtr2 + 2;\n            tempVar1 = *tempPtr1;\n            tempVar5 = tempPtr2[3];\n            tempVar3 = tempVar6 - 4;\n            *(int *)(tempVar1 + 0xc) = tempVar5;\n            *(int *)(tempVar5 + 8) = tempVar1;\n            tempVar6 = tempVar2;\n            if (tempVar3 < 0x25) {\n              newPtr = tempPtr1;\n              if (0x13 < tempVar3) {\n                tempPtr2[2] = *ptr;\n                tempPtr2[3] = ptr[1];\n                if (tempVar3 < 0x1c) {\n                  ptr = ptr + 2;\n                  newPtr = tempPtr2 + 4;\n                }\n                else {\n                  tempPtr2[4] = ptr[2];\n                  tempPtr2[5] = ptr[3];\n                  if (tempVar3 == 0x24) {\n                    tempPtr2[6] = ptr[4];\n                    newPtr = ptr + 5;\n                    ptr = ptr + 6;\n                    tempPtr2[7] = *newPtr;\n                    newPtr = tempPtr2 + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    newPtr = tempPtr2 + 6;\n                  }\n                }\n              }\n              *newPtr = *ptr;\n              newPtr[1] = ptr[1];\n              newPtr[2] = ptr[2];\n              tempVar4 = tempPtr2[1];\n              newPtr = tempPtr2;\n              ptr = tempPtr1;\n            }\n            else {\n              memmove(tempPtr1,ptr,tempVar3);\n              tempVar4 = tempPtr2[1];\n              newPtr = tempPtr2;\n              ptr = tempPtr1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)tempVar7 <= (int)tempVar4) {\n        tempPtr1 = tempPtr2 + 2;\n        tempVar1 = *tempPtr1;\n        tempVar5 = tempPtr2[3];\n        tempVar3 = tempVar6 - 4;\n        *(int *)(tempVar1 + 0xc) = tempVar5;\n        *(int *)(tempVar5 + 8) = tempVar1;\n        tempVar6 = tempVar4;\n        if (tempVar3 < 0x25) {\n          newPtr = tempPtr1;\n          if (0x13 < tempVar3) {\n            tempPtr2[2] = *ptr;\n            tempPtr2[3] = ptr[1];\n            if (tempVar3 < 0x1c) {\n              ptr = ptr + 2;\n              newPtr = tempPtr2 + 4;\n            }\n            else {\n              tempPtr2[4] = ptr[2];\n              tempPtr2[5] = ptr[3];\n              if (tempVar3 == 0x24) {\n                tempPtr2[6] = ptr[4];\n                newPtr = ptr + 5;\n                ptr = ptr + 6;\n                tempPtr2[7] = *newPtr;\n                newPtr = tempPtr2 + 8;\n              }\n              else {\n                ptr = ptr + 4;\n                newPtr = tempPtr2 + 6;\n              }\n            }\n          }\n          *newPtr = *ptr;\n          newPtr[1] = ptr[1];\n          newPtr[2] = ptr[2];\n          tempVar4 = tempPtr2[1];\n          newPtr = tempPtr2;\n          ptr = tempPtr1;\n        }\n        else {\n          memmove(tempPtr1,ptr,tempVar3);\n          tempVar4 = tempPtr2[1];\n          newPtr = tempPtr2;\n          ptr = tempPtr1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    tempPtr2 = (int *)_malloc_r(allocator,size);\n    if (tempPtr2 == (int *)0x0) goto LAB_000820a0;\n    tempVar4 = ptr[-1];\n    if (tempPtr2 + -2 != (int *)((tempVar4 & 0xfffffffe) + (int)newPtr)) {\n      tempVar3 = tempVar6 - 4;\n      if (tempVar3 < 0x25) {\n        newPtr = ptr;\n        tempPtr1 = tempPtr2;\n        if (0x13 < tempVar3) {\n          *tempPtr2 = *ptr;\n          tempPtr2[1] = ptr[1];\n          if (tempVar3 < 0x1c) {\n            newPtr = ptr + 2;\n            tempPtr1 = tempPtr2 + 2;\n          }\n          else {\n            tempPtr2[2] = ptr[2];\n            tempPtr2[3] = ptr[3];\n            if (tempVar3 == 0x24) {\n              tempPtr2[4] = ptr[4];\n              tempPtr2[5] = ptr[5];\n              newPtr = ptr + 6;\n              tempPtr1 = tempPtr2 + 6;\n            }\n            else {\n              newPtr = ptr + 4;\n              tempPtr1 = tempPtr2 + 4;\n            }\n          }\n        }\n        *tempPtr1 = *newPtr;\n        tempPtr1[1] = newPtr[1];\n        tempPtr1[2] = newPtr[2];\n      }\n      else {\n        memmove(tempPtr2,ptr,tempVar3);\n      }\n      _free_r(allocator,ptr);\n      goto LAB_000820a0;\n    }\n    tempVar6 = tempVar6 + (tempPtr2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  tempVar2 = tempVar6 - tempVar7;\n  tempPtr2 = ptr;\n  if (tempVar2 < 0x10) {\n    newPtr[1] = tempVar4 & 1 | tempVar6;\n    *(uint *)((int)newPtr + tempVar6 + 4) = *(uint *)((int)newPtr + tempVar6 + 4) | 1;\n  }\n  else {\n    newPtr[1] = tempVar4 & 1 | tempVar7;\n    *(uint *)((int)newPtr + tempVar7 + 4) = tempVar2 | 1;\n    *(uint *)((int)newPtr + tempVar2 + tempVar7 + 4) = *(uint *)((int)newPtr + tempVar2 + tempVar7 + 4) | 1;\n    _free_r(allocator,(int)newPtr + tempVar7 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(allocator);\n  return tempPtr2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "allocator",
                "param_2": "ptr",
                "param_3": "size",
                "iVar1": "tempVar1",
                "piVar2": "newPtr",
                "uVar3": "tempVar2",
                "sVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "tempVar5",
                "piVar7": "tempPtr1",
                "uVar8": "tempVar6",
                "uVar9": "tempVar7",
                "piVar10": "tempPtr2"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "_malloc_r",
                "__malloc_unlock",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "allocate_memory_0008236c",
            "code": "\nvoid allocateMemory_0008236c(int *errorStatus,intptr_t memorySize)\n\n{\n  void *allocatedMemory;\n  \n  errno = 0;\n  allocatedMemory = _sbrk(memorySize);\n  if ((allocatedMemory == (void *)0xffffffff) && (errno != 0)) {\n    *errorStatus = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "errorStatus",
                "param_2": "memorySize",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_strings_00082390",
            "code": "\nint compareStrings_00082390(char *str1,char *str2)\n\n{\n  uint *ptr1;\n  int result;\n  byte *byte1;\n  byte *byte2;\n  uint *ptr2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)str1 | (uint)str2) & 7) != 0) {\n    ptr1 = (uint *)str1;\n    if (((uint)str1 & 3) != 0) {\n      ptr1 = (uint *)((uint)str1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)str1 & 0xfffffffc);\n      byte1 = (byte *)str2;\n      if (((uint)str1 & 1) == 0) {\nLAB_00082410:\n        byte2 = byte1 + 1;\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *byte1;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        byte2 = (byte *)str2;\n        if (((uint)str1 & 2) == 0) {\n          byte1 = (byte *)(str2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - (byte)*str2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      str2 = (char *)(byte2 + 1);\n      result = (temp1 >> 0x18) - (uint)*byte2;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)str2 & 3;\n    if (temp1 != 0) {\n      ptr2 = (uint *)((uint)str2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *ptr2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *ptr2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *ptr2;\n        do {\n          ptr2 = ptr2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto LAB_0008258e;\n          temp1 = *ptr2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    str1 = (char *)ptr1;\n    ptr2 = (uint *)str2;\n    if (((uint)ptr1 & 4) != 0) {\n      str1 = (char *)(ptr1 + 1);\n      temp1 = *ptr1;\n      ptr2 = (uint *)((int)str2 + 4);\n      temp3 = *(uint *)str2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\nLAB_0008259a:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    str2 = (char *)ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *(uint *)str1;\n        temp3 = *(uint *)((int)str1 + 4);\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto LAB_0008258e;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        str1 = (char *)((int)str1 + 8);\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    temp1 = *(uint *)str1;\n    temp2 = *(uint *)((int)str1 + 4);\n    temp3 = *(uint *)str2;\n    temp4 = *(uint *)((int)str2 + 4);\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto LAB_0008259a;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    str1 = (char *)((int)str1 + 8);\n    str2 = (char *)((int)str2 + 8);\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\nLAB_0008259e:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 |\n          temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - LZCOUNT(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nLAB_0008258e:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_strings_00082390",
                "__s1": "str1",
                "__s2": "str2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "pbVar3": "byte1",
                "pbVar4": "byte2",
                "puVar5": "ptr2",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "uVar10": "temp5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_000825cc",
            "code": "\nchar * copyStringWithAlignment_000825cc(char *destination,char *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *pointer1;\n  uint *pointer2;\n  uint current;\n  uint current2;\n  uint *destinationPointer;\n  uint *sourcePointer;\n  char *destinationChar;\n  bool isZero;\n  \n  destinationChar = destination;\n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *source;\n      *destinationChar = currentChar;\n      source = source + 1;\n      destinationChar = destinationChar + 1;\n    } while (currentChar != '\\0');\n    return destination;\n  }\n  sourcePointer = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    pointer2 = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      pointer2 = (uint *)(source + 1);\n      currentChar = *source;\n      sourcePointer = (uint *)(destination + 1);\n      *destination = currentChar;\n      if (currentChar == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)pointer2;\n    if (((uint)pointer2 & 2) != 0) {\n      source = (char *)((int)pointer2 + 2);\n      currentShort = *(ushort *)pointer2;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)sourcePointer = (char)currentShort;\n      }\n      else {\n        *(ushort *)sourcePointer = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        sourcePointer = (uint *)((int)sourcePointer + 2);\n      }\n      if (isZero) {\n        return destination;\n      }\n    }\n  }\n  current = *(uint *)source;\n  pointer2 = (uint *)((int)source + 4);\n  destinationPointer = sourcePointer;\n  if (((uint)source & 4) != 0) {\n    if ((current + 0xfefefeff & ~current & 0x80808080) != 0) goto LAB_00082630;\n    destinationPointer = sourcePointer + 1;\n    *sourcePointer = current;\n    pointer2 = (uint *)((int)source + 8);\n    current = *(uint *)((int)source + 4);\n  }\n  while( true ) {\n    pointer1 = pointer2 + 1;\n    current2 = *pointer2;\n    sourcePointer = destinationPointer;\n    if ((current + 0xfefefeff & ~current & 0x80808080) != 0) break;\n    sourcePointer = destinationPointer + 1;\n    *destinationPointer = current;\n    current = current2;\n    if ((current2 + 0xfefefeff & ~current2 & 0x80808080) != 0) break;\n    pointer2 = pointer2 + 2;\n    current = *pointer1;\n    destinationPointer = destinationPointer + 2;\n    *sourcePointer = current2;\n  }\nLAB_00082630:\n  do {\n    *(char *)sourcePointer = (char)current;\n    current2 = current & 0xff;\n    current = current >> 8 | current << 0x18;\n    sourcePointer = (uint *)((int)sourcePointer + 1);\n  } while (current2 != 0);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "uVar5": "current",
                "uVar6": "current2",
                "puVar7": "destinationPointer",
                "puVar8": "sourcePointer",
                "pcVar9": "destinationChar",
                "bVar10": "isZero"
            },
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "calculate_string_length_00082688",
            "code": "\nsize_t calculateStringLength_00082688(char *str)\n\n{\n  size_t length;\n  uint *ptr;\n  uint value;\n  bool isEndOfString;\n  \n  ptr = (uint *)((uint)str & 0xfffffffc);\n  length = -((uint)str & 3);\n  value = *ptr;\n  if (((uint)str & 3) != 0) {\n    value = value | 0xffffffffU >> ((length + 4 & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    length = length + 4;\n    value = *ptr;\n  }\n  isEndOfString = (value & 0xff) == 0;\n  if (!isEndOfString) {\n    length = length + 1;\n    isEndOfString = (value & 0xff00) == 0;\n  }\n  if (!isEndOfString) {\n    length = length + 1;\n    isEndOfString = (value & 0xff0000) == 0;\n  }\n  if (!isEndOfString) {\n    length = length + 1;\n  }\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00082688": "calculate_string_length_00082688",
                "__s": "str",
                "sVar1": "length",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isEndOfString"
            },
            "calling": [
                "String",
                "_vfiprintf_r",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000826e8": {
            "entrypoint": "0x000826e8",
            "current_name": "convert_string_to_number_000826e8",
            "code": "\nuint convertStringToNumber_000826e8(undefined4 *result,byte *inputStr,byte **remainder,uint base)\n\n{\n  byte characterProperties;\n  byte isNegative;\n  uint number;\n  byte *p;\n  uint ch;\n  byte *q;\n  int delta;\n  int resultStatus;\n  uint maxValue;\n  uint minValue;\n  \n  p = inputStr;\n  do {\n    q = p;\n    p = q + 1;\n    ch = (uint)*q;\n    characterProperties = *(byte *)(__ctype_ptr__ + ch + 1);\n    isNegative = characterProperties & 8;\n  } while ((characterProperties & 8) != 0);\n  if (ch == 0x2d) {\n    p = q + 2;\n    ch = (uint)q[1];\n    isNegative = 1;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)q[1];\n    p = q + 2;\n  }\n  if ((base & 0xffffffef) == 0) {\n    if (ch == 0x30) {\n      if ((*p & 0xdf) == 0x58) {\n        ch = (uint)p[1];\n        base = 0x10;\n        p = p + 2;\n      }\n      else if (base == 0) {\n        base = 8;\n      }\n    }\n    else if (base == 0) {\n      base = 10;\n    }\n  }\n  if (isNegative == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / base;\n  resultStatus = 0;\n  number = 0;\n  do {\n    characterProperties = *(byte *)(__ctype_ptr__ + ch + 1);\n    if ((characterProperties & 4) == 0) {\n      if ((characterProperties & 3) == 0) break;\n      if ((characterProperties & 3) == 1) {\n        delta = 0x37;\n      }\n      else {\n        delta = 0x57;\n      }\n      delta = ch - delta;\n    }\n    else {\n      delta = ch - 0x30;\n    }\n    if ((int)base <= delta) break;\n    if (resultStatus != -1) {\n      if ((maxValue <= number && number != maxValue) ||\n         ((number == maxValue && ((int)(minValue - base * maxValue) < delta)))) {\n        resultStatus = -1;\n      }\n      else {\n        number = base * number + delta;\n        resultStatus = 1;\n      }\n    }\n    ch = (uint)*p;\n    p = p + 1;\n  } while( true );\n  if (resultStatus == -1) {\n    if (isNegative == 0) {\n      number = 0x7fffffff;\n    }\n    else {\n      number = 0x80000000;\n    }\n    *result = 0x22;\n    if (remainder == (byte **)0x0) {\n      return number;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      number = -number;\n    }\n    if (remainder == (byte **)0x0) {\n      return number;\n    }\n    if (resultStatus == 0) goto LAB_0008278c;\n  }\n  inputStr = p + -1;\nLAB_0008278c:\n  *remainder = inputStr;\n  return number;\n}\n\n",
            "renaming": {
                "FUN_000826e8": "convert_string_to_number_000826e8",
                "param_1": "result",
                "param_2": "inputStr",
                "param_3": "remainder",
                "param_4": "base",
                "uVar3": "number",
                "pbVar4": "p",
                "uVar5": "ch",
                "pbVar6": "q",
                "iVar7": "delta",
                "iVar8": "resultStatus",
                "uVar9": "maxValue",
                "uVar10": "minValue",
                "bVar1": "characterProperties",
                "bVar2": "isNegative"
            },
            "calling": [
                "strtol"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000827fc": {
            "entrypoint": "0x000827fc",
            "current_name": "parse_integer_000827fc",
            "code": "\nlong parse_integer_000827fc(char *input_string,char **end_pointer,int base)\n\n{\n  long parsed_integer;\n  \n  parsed_integer = _strtol_r(_impure_ptr,input_string,end_pointer,base);\n  return parsed_integer;\n}\n\n",
            "renaming": {
                "FUN_000827fc": "parse_integer_000827fc",
                "__nptr": "input_string",
                "__endptr": "end_pointer",
                "__base": "base",
                "lVar1": "parsed_integer"
            },
            "calling": [
                "atol"
            ],
            "called": [
                "_strtol_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082814": {
            "entrypoint": "0x00082814",
            "current_name": "kill_process_00082814",
            "code": "\nint killProcess_00082814(processID_t processID,int signal)\n\n{\n  int result;\n  \n  result = _kill_r(_impure_ptr,processID,signal);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082814": "kill_process_00082814",
                "__pid": "processID",
                "__sig": "signal",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_kill_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_to_file_00082824",
            "code": "\nint writeToFile_00082824(undefined4 fileDescriptor,int bufferSize,int **dataPointer)\n\n{\n  int *currentData;\n  int status;\n  int *remainingData;\n  uint successCount;\n  undefined4 *currentValue;\n  uint currentDataSize;\n  uint loopCount;\n  \n  if (-1 < *(int *)(bufferSize + 100) << 0x12) {\n    status = __sfvwrite_r();\n    dataPointer[2] = (int *)0x0;\n    dataPointer[1] = (int *)0x0;\n    return status;\n  }\n  remainingData = dataPointer[2];\n  currentData = *dataPointer;\n  while (remainingData != (int *)0x0) {\n    currentDataSize = currentData[1];\n    loopCount = currentDataSize >> 2;\n    if (loopCount != 0) {\n      currentValue = (undefined4 *)(*currentData + -4);\n      successCount = 0;\n      do {\n        currentValue = currentValue + 1;\n        status = _fputwc_r(fileDescriptor,*currentValue,bufferSize);\n        successCount = successCount + 1;\n        if (status == -1) goto LAB_00082864;\n      } while (loopCount != successCount);\n      remainingData = dataPointer[2];\n    }\n    remainingData = (int *)((int)remainingData - (currentDataSize & 0xfffffffc));\n    dataPointer[2] = remainingData;\n    currentData = currentData + 2;\n  }\n  status = 0;\nLAB_00082864:\n  dataPointer[2] = (int *)0x0;\n  dataPointer[1] = (int *)0x0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_to_file_00082824",
                "param_1": "fileDescriptor",
                "param_2": "bufferSize",
                "param_3": "dataPointer",
                "piVar1": "currentData",
                "iVar2": "status",
                "piVar3": "remainingData",
                "uVar4": "successCount",
                "puVar5": "currentValue",
                "uVar6": "currentDataSize",
                "uVar7": "loopCount"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_0008289c(int formatBuffer,int formatBufferSize,int *******format,int **args)\n\n{\n  bool isLeftJustified;\n  bool isBlankFlag;\n  bool isAlternateFlag;\n  char signPrefix;\n  bool isZeroPadded;\n  void *ptr;\n  int ********argBuffer;\n  int *arg;\n  int result;\n  char temp;\n  int *******currentSpecifier;\n  uint tempValue;\n  int **argPtr;\n  uint flags;\n  uint ch;\n  int iVar16;\n  int ********ppppppppiVar17;\n  int iVar18;\n  int *******pppppppiVar19;\n  int *piVar20;\n  int *******pppppppiVar21;\n  uint divisor;\n  int *leadingOne;\n  int *******remainingSpecifiers;\n  undefined4 tempValue2;\n  int ********stringPtr;\n  bool isNegative;\n  longlong value;\n  int *******maxWidth;\n  int *******formatSpecifierLength;\n  int **currentArgPtr;\n  int formattedLength;\n  char *hexCharacters;\n  char signCharacter;\n  undefined paddingCharacter;\n  undefined xFormatSpecifier;\n  int ********argBufferPtr;\n  int numSpecifiers;\n  int *******formattedBuffer;\n  undefined decimalCharacters;\n  char digit;\n  undefined character;\n  undefined tempBuffer [4];\n  int *******specifierBuffer [16];\n  \n  if ((formatBuffer != 0) && (*(int *)(formatBuffer + 0x38) == 0)) {\n    stringPtrinit();\n  }\n  flags = (uint)*(ushort *)(formatBufferSize + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatBufferSize + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(formatBufferSize + 0xc) = (short)flags;\n    *(uint *)(formatBufferSize + 100) = *(uint *)(formatBufferSize + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(formatBufferSize + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = stringPtrwsetup_r(formatBuffer,formatBufferSize);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatBufferSize + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(formatBufferSize + 0xe)) {\n    result = stringPtrbprintf(formatBuffer,formatBufferSize,format,args);\n    return result;\n  }\nLAB_000828ee:\n  hexCharacters = (char *)0x0;\n  formattedBuffer = (int *******)0x0;\n  numSpecifiers = 0;\n  formattedLength = 0;\n  argBuffer = (int ********)tempBuffer;\n  currentArgPtr = args;\n  argBufferPtr = (int ********)tempBuffer;\nLAB_00082902:\n  currentSpecifier = format;\n  if ((*(char *)format != '\\0') && (*(char *)format != '%')) {\n    do {\n      currentSpecifier = (int *******)((int)currentSpecifier + 1);\n      if (*(char *)currentSpecifier == '\\0') break;\n    } while (*(char *)currentSpecifier != '%');\n    pppppppiVar21 = (int *******)((int)currentSpecifier - (int)format);\n    if (pppppppiVar21 != (int *******)0x0) {\n      numSpecifiers = numSpecifiers + 1;\n      formattedBuffer = (int *******)((int)formattedBuffer + (int)pppppppiVar21);\n      *argBuffer = format;\n      argBuffer[1] = pppppppiVar21;\n      if (numSpecifiers < 8) {\n        argBuffer = argBuffer + 2;\n      }\n      else {\n        if (formattedBuffer == (int *******)0x0) {\n          formattedLength = formattedLength + (int)pppppppiVar21;\n          numSpecifiers = 0;\n          argBuffer = (int ********)tempBuffer;\n          goto LAB_00082952;\n        }\n        result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n        argBuffer = (int ********)tempBuffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      formattedLength = formattedLength + (int)pppppppiVar21;\n    }\n  }\nLAB_00082952:\n  if (*(char *)currentSpecifier != '\\0') {\n    signCharacter = '\\0';\n    ch = (uint)*(byte *)((int)currentSpecifier + 1);\n    flags = 0;\n    isZeroPadded = false;\n    isBlankFlag = false;\n    isLeftJustified = false;\n    isAlternateFlag = false;\n    isNegative = false;\n    pppppppiVar21 = (int *******)0x0;\n    formatSpecifierLength = (int *******)0xffffffff;\n    format = (int *******)((int)currentSpecifier + 1);\nLAB_00082976:\n    format = (int *******)((int)format + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        maxWidth = (int *******)0x1;\n        formatSpecifierLength = (int *******)0x1;\n        stringPtr = (int ********)&decimalCharacters;\n        decimalCharacters = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isAlternateFlag = true;\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar21 = (int *******)*currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      if ((int)pppppppiVar21 < 0) {\n        pppppppiVar21 = (int *******)-(int)pppppppiVar21;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)format;\n      signCharacter = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)format;\n      currentSpecifier = (int *******)((int)format + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)format + 1);\n        formatSpecifierLength = (int *******)*currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        format = currentSpecifier;\n        if ((int)formatSpecifierLength < 0) {\n          formatSpecifierLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      tempValue = ch - 0x30;\n      if (tempValue < 10) {\n        divisor = 0;\n        do {\n          format = (int *******)((int)currentSpecifier + 1);\n          ch = (uint)*(byte *)currentSpecifier;\n          divisor = tempValue + divisor * 10;\n          tempValue = ch - 0x30;\n          currentSpecifier = format;\n        } while (tempValue < 10);\n        formatSpecifierLength = (int *******)(divisor | (int)divisor >> 0x1f);\n      }\n      else {\n        formatSpecifierLength = (int *******)0x0;\n        format = currentSpecifier;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isBlankFlag = true;\n      if (isLeftJustified == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      currentArgPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      piVar20 = *currentArgPtr;\n      leadingOne = currentArgPtr[1];\n      currentArgPtr = currentArgPtr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isBlankFlag = true;\n      if (isLeftJustified != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isBlankFlag << 4;\n      iVar16 = (uint)isLeftJustified << 5;\n      if ((isBlankFlag == 0) && (iVar16 = (uint)isNegative << 6, isNegative != 0)) {\n        piVar20 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)0x0;\n      }\n      else {\n        result = iVar16;\n        piVar20 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isBlankFlag = true;\n      if (isLeftJustified != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isBlankFlag) || (isNegative == false)) {\n        result = 1;\n        piVar20 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)0x0;\n      }\n      else {\n        leadingOne = (int *)0x0;\n        piVar20 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexCharacters = \"0123456789ABCDEF\";\n      if (isLeftJustified == false) goto LAB_00082efa;\nLAB_00082d1a:\n      argPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = argPtr + 2;\n      piVar20 = *argPtr;\n      leadingOne = argPtr[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar20 = *currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      maxWidth = (int *******)0x1;\n      decimalCharacters = SUB41(piVar20,0);\n      formatSpecifierLength = (int *******)0x1;\n      stringPtr = (int ********)&decimalCharacters;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isLeftJustified != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isBlankFlag == false) && (isNegative != false)) {\n        piVar20 = (int *)(int)*(short *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)((int)piVar20 >> 0x1f);\n      }\n      else {\n        piVar20 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)((int)piVar20 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)leadingOne < 0) {\n        isNegative = piVar20 != (int *)0x0;\n        piVar20 = (int *)-(int)piVar20;\n        leadingOne = (int *)(-(int)leadingOne - (uint)isNegative);\n        signCharacter = '-';\n        signPrefix = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)formatSpecifierLength) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      ch = (uint)piVar20 | (uint)leadingOne;\n      result = 1;\n      signPrefix = signCharacter;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative = true;\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)format;\n      if (ch == 0x6c) {\n        isLeftJustified = true;\n        ch = (uint)*(byte *)((int)format + 1);\n        format = (int *******)((int)format + 1);\n      }\n      else {\n        isBlankFlag = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isLeftJustified == false) {\n        if (isBlankFlag == false) {\n          if (isNegative) {\n            piVar20 = *currentArgPtr;\n            currentArgPtr = currentArgPtr + 1;\n            *(short *)piVar20 = (short)formattedLength;\n          }\n          else {\n            piVar20 = *currentArgPtr;\n            currentArgPtr = currentArgPtr + 1;\n            *piVar20 = formattedLength;\n          }\n        }\n        else {\n          piVar20 = *currentArgPtr;\n          currentArgPtr = currentArgPtr + 1;\n          *piVar20 = formattedLength;\n        }\n      }\n      else {\n        piVar20 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        *piVar20 = formattedLength;\n        piVar20[1] = formattedLength >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isLeftJustified == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      argPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = argPtr + 2;\n      piVar20 = *argPtr;\n      leadingOne = argPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar20 = *currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      xFormatSpecifier = 0x78;\n      isZeroPadded = true;\n      leadingOne = (int *)0x0;\n      paddingCharacter = 0x30;\n      hexCharacters = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeftJustified = true;\n      ch = (uint)*(byte *)format;\n      goto LAB_00082976;\n    case 0x73:\n      stringPtr = (int ********)*currentArgPtr;\n      signCharacter = '\\0';\n      currentArgPtr = currentArgPtr + 1;\n      if (stringPtr != (int ********)0x0) {\n        if ((int)formatSpecifierLength < 0) {\n          formatSpecifierLength = (int *******)strlen((char *)stringPtr);\n          currentSpecifier = (int *******)0x0;\n          signPrefix = signCharacter;\n        }\n        else {\n          ptr = memchr(stringPtr,0,(size_t)formatSpecifierLength);\n          signPrefix = signCharacter;\n          if (ptr == (void *)0x0) {\n            currentSpecifier = (int *******)0x0;\n          }\n          else {\n            pppppppiVar19 = (int *******)((int)ptr - (int)stringPtr);\n            if ((int)formatSpecifierLength <= (int)(int *******)((int)ptr - (int)stringPtr)) {\n              pppppppiVar19 = formatSpecifierLength;\n            }\n            currentSpecifier = (int *******)0x0;\n            formatSpecifierLength = pppppppiVar19;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < formatSpecifierLength) {\n        formatSpecifierLength = (int *******)0x6;\n      }\n      maxWidth = (int *******)((uint)formatSpecifierLength & ~((int)formatSpecifierLength >> 0x1f));\n      stringPtr = (int ********)&UNK_00085728;\nLAB_00082d76:\n      signCharacter = '\\0';\n      currentSpecifier = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isLeftJustified) goto LAB_00082ce0;\nLAB_00082bc6:\n      argPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = argPtr + 2;\n      piVar20 = *argPtr;\n      leadingOne = argPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexCharacters = \"0123456789abcdef\";\n      if (isLeftJustified != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isBlankFlag == false) && (isNegative != false)) {\n        leadingOne = (int *)0x0;\n        piVar20 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n      }\n      else {\n        piVar20 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        leadingOne = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isAlternateFlag) && (((uint)piVar20 | (uint)leadingOne) != 0)) {\n        isZeroPadded = true;\n        paddingCharacter = 0x30;\n        result = 2;\n        xFormatSpecifier = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    signCharacter = '\\0';\n    signPrefix = '\\0';\nLAB_00082ace:\n    if (-1 < (int)formatSpecifierLength) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)piVar20 | (uint)leadingOne;\njoined_r0x00082adc:\n    value = CONCAT44(leadingOne,piVar20);\n    currentSpecifier = formatSpecifierLength;\n    if ((ch == 0) && (formatSpecifierLength == (int *******)0x0)) {\n      stringPtr = (int ********)tempBuffer;\n      if ((result != 0) || (!isAlternateFlag)) goto LAB_00082b04;\n      stringPtr = (int ********)(&digit + 1);\n      character = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (leadingOne != (int *)0x0 || (int *)0x9 < piVar20) {\n        ppppppppiVar17 = (int ********)(&digit + 1);\n        do {\n          stringPtr = ppppppppiVar17;\n          tempValue2 = (undefined4)((ulonglong)value >> 0x20);\n          temp = '\\n';\n          __aeabi_uldivmod((int)value,tempValue2,10,0);\n          *(char *)stringPtr = temp + '0';\n          value = __aeabi_uldivmod((int)value,tempValue2,10,0);\n          ppppppppiVar17 = (int ********)((int)stringPtr + -1);\n        } while (value != 0);\n        formatSpecifierLength = (int *******)((int)tempBuffer - (int)stringPtr);\n        goto LAB_00082b04;\n      }\n      character = (char)piVar20 + '0';\n      stringPtr = (int ********)(&digit + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar17 = (int ********)(&digit + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      stringPtr = ppppppppiVar17;\n      ch = (uint)piVar20 & 0xf;\n      piVar20 = (int *)((uint)piVar20 >> 4 | (int)leadingOne << 0x1c);\n      leadingOne = (int *)((uint)leadingOne >> 4);\n      *(char *)stringPtr = hexCharacters[ch];\n      ppppppppiVar17 = (int ********)((int)stringPtr + -1);\n    } while (((uint)piVar20 | (uint)leadingOne) != 0);\n    formatSpecifierLength = (int *******)((int)tempBuffer - (int)stringPtr);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (formattedBuffer != (int *******)0x0) {\n    stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(formatBufferSize + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return formattedLength;\nLAB_000830e2:\n  do {\n    stringPtr = ppppppppiVar17;\n    arg = (int *)((uint)piVar20 >> 3 | (int)leadingOne << 0x1d);\n    leadingOne = (int *)((uint)leadingOne >> 3);\n    result = ((uint)piVar20 & 7) + 0x30;\n    *(char *)stringPtr = (char)result;\n    ppppppppiVar17 = (int ********)((int)stringPtr + -1);\n    piVar20 = arg;\n  } while (((uint)arg | (uint)leadingOne) != 0);\n  if (isAlternateFlag) {\n    if (result == 0x30) {\nLAB_00082afe:\n      formatSpecifierLength = (int *******)((int)tempBuffer - (int)stringPtr);\n    }\n    else {\n      *(undefined *)((int)stringPtr + -1) = 0x30;\n      stringPtr = ppppppppiVar17;\n      formatSpecifierLength = (int *******)((int)tempBuffer - (int)ppppppppiVar17);\n    }\n  }\n  else {\nLAB_00083282:\n    formatSpecifierLength = (int *******)((int)tempBuffer - (int)stringPtr);\n  }\nLAB_00082b04:\n  maxWidth = formatSpecifierLength;\n  if ((int)formatSpecifierLength < (int)currentSpecifier) {\n    maxWidth = currentSpecifier;\n  }\n  if (signPrefix != '\\0') {\n    maxWidth = (int *******)((int)maxWidth + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    maxWidth = (int *******)((int)maxWidth + 2);\n  }\n  if ((flags == 0) &&\n     (pppppppiVar19 = (int *******)((int)pppppppiVar21 - (int)maxWidth), 0 < (int)pppppppiVar19)) {\n    if ((int)pppppppiVar19 < 0x11) {\n      numSpecifiers = numSpecifiers + 1;\n    }\n    else {\n      do {\n        remainingSpecifiers = pppppppiVar19;\n        result = numSpecifiers + 1;\n        formattedBuffer = formattedBuffer + 4;\n        *argBuffer = (int *******)0x856f0;\n        argBuffer[1] = (int *******)0x10;\n        if (result < 8) {\n          iVar16 = numSpecifiers + 2;\n          argBuffer = argBuffer + 2;\n          numSpecifiers = result;\n        }\n        else if (formattedBuffer == (int *******)0x0) {\n          iVar16 = 1;\n          argBuffer = (int ********)tempBuffer;\n          numSpecifiers = 0;\n        }\n        else {\n          numSpecifiers = result;\n          result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n          if (result != 0) goto LAB_00083142;\n          iVar16 = numSpecifiers + 1;\n          argBuffer = (int ********)tempBuffer;\n        }\n        pppppppiVar19 = remainingSpecifiers + -4;\n      } while (0x10 < (int)pppppppiVar19);\n      pppppppiVar19 = remainingSpecifiers + -4;\n      numSpecifiers = iVar16;\n    }\n    formattedBuffer = (int *******)((int)formattedBuffer + (int)pppppppiVar19);\n    *argBuffer = (int *******)0x856f0;\n    argBuffer[1] = pppppppiVar19;\n    if (numSpecifiers < 8) {\n      result = numSpecifiers + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (formattedBuffer == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      argBuffer = (int ********)tempBuffer;\n    }\n    else {\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)tempBuffer;\n    }\n  }\n  else {\n    result = numSpecifiers + 1;\n  }\n  iVar16 = result;\n  if (signCharacter != '\\0') {\n    formattedBuffer = (int *******)((int)formattedBuffer + 1);\n    iVar16 = 1;\n    *argBuffer = (int *******)&signCharacter;\n    argBuffer[1] = (int *******)0x1;\n    numSpecifiers = result;\n    if (result < 8) {\n      iVar16 = result + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (formattedBuffer == (int *******)0x0) {\n      numSpecifiers = 0;\n      argBuffer = (int ********)tempBuffer;\n    }\n    else {\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      iVar16 = numSpecifiers + 1;\n      argBuffer = (int ********)tempBuffer;\n    }\n  }\n  result = iVar16;\n  iVar18 = numSpecifiers;\n  if (isZeroPadded) {\n    formattedBuffer = (int *******)((int)formattedBuffer + 2);\n    *argBuffer = (int *******)&paddingCharacter;\n    argBuffer[1] = (int *******)0x2;\n    if (iVar16 < 8) {\n      result = iVar16 + 1;\n      iVar18 = iVar16;\n      argBuffer = argBuffer + 2;\n    }\n    else if (formattedBuffer == (int *******)0x0) {\n      result = 1;\n      iVar18 = 0;\n      argBuffer = (int ********)tempBuffer;\n    }\n    else {\n      numSpecifiers = iVar16;\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      iVar18 = numSpecifiers;\n      argBuffer = (int ********)tempBuffer;\n    }\n  }\n  numSpecifiers = iVar18;\n  if ((flags == 0x80) &&\n     (pppppppiVar19 = (int *******)((int)pppppppiVar21 - (int)maxWidth), 0 < (int)pppppppiVar19)) {\n    if (0x10 < (int)pppppppiVar19) {\n      do {\n        while( true ) {\n          remainingSpecifiers = pppppppiVar19;\n          numSpecifiers = iVar18 + 1;\n          formattedBuffer = formattedBuffer + 4;\n          *argBuffer = (int *******)\"0000000000000000\";\n          argBuffer[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = iVar18 + 2;\n          argBuffer = argBuffer + 2;\nLAB_000831f2:\n          iVar18 = numSpecifiers;\n          pppppppiVar19 = remainingSpecifiers + -4;\n          if ((int)(remainingSpecifiers + -4) < 0x11) goto LAB_00083218;\n        }\n        if (formattedBuffer != (int *******)0x0) {\n          result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            argBuffer = (int ********)tempBuffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        iVar18 = 0;\n        pppppppiVar19 = remainingSpecifiers + -4;\n        argBuffer = (int ********)tempBuffer;\n      } while (0x10 < (int)(remainingSpecifiers + -4));\nLAB_00083218:\n      pppppppiVar19 = remainingSpecifiers + -4;\n    }\n    formattedBuffer = (int *******)((int)formattedBuffer + (int)pppppppiVar19);\n    *argBuffer = (int *******)\"0000000000000000\";\n    argBuffer[1] = pppppppiVar19;\n    numSpecifiers = result;\n    if (result < 8) {\n      result = result + 1;\n      argBuffer = argBuffer + 2;\n    }\n    else if (formattedBuffer == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      argBuffer = (int ********)tempBuffer;\n    }\n    else {\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)tempBuffer;\n    }\n  }\n  currentSpecifier = (int *******)((int)currentSpecifier - (int)formatSpecifierLength);\n  ppppppppiVar17 = (int ********)tempBuffer;\n  if ((int)currentSpecifier < 1) {\nLAB_0008302a:\n    formattedBuffer = (int *******)((int)formattedBuffer + (int)formatSpecifierLength);\n    *argBuffer = (int *******)stringPtr;\n    argBuffer[1] = formatSpecifierLength;\n    formatSpecifierLength = formattedBuffer;\n    numSpecifiers = result;\n    if (result < 8) goto LAB_000831be;\n    if (formattedBuffer == (int *******)0x0) {\n      numSpecifiers = 0;\n    }\n    else {\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iVar16 = numSpecifiers;\n    if (0x10 < (int)currentSpecifier) {\n      do {\n        while( true ) {\n          pppppppiVar19 = currentSpecifier;\n          numSpecifiers = iVar16 + 1;\n          formattedBuffer = formattedBuffer + 4;\n          *argBuffer = (int *******)\"0000000000000000\";\n          argBuffer[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = iVar16 + 2;\n          argBuffer = argBuffer + 2;\nLAB_00082fe6:\n          iVar16 = numSpecifiers;\n          currentSpecifier = pppppppiVar19 + -4;\n          if ((int)(pppppppiVar19 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (formattedBuffer != (int *******)0x0) {\n          result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            argBuffer = (int ********)tempBuffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        argBuffer = (int ********)tempBuffer;\n        iVar16 = 0;\n        currentSpecifier = pppppppiVar19 + -4;\n      } while (0x10 < (int)(pppppppiVar19 + -4));\nLAB_0008300e:\n      currentSpecifier = pppppppiVar19 + -4;\n    }\n    formattedBuffer = (int *******)((int)formattedBuffer + (int)currentSpecifier);\n    *argBuffer = (int *******)\"0000000000000000\";\n    argBuffer[1] = currentSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      argBuffer = argBuffer + 2;\n      goto LAB_0008302a;\n    }\n    if (formattedBuffer != (int *******)0x0) {\n      numSpecifiers = result;\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      argBuffer = (int ********)tempBuffer;\n      goto LAB_0008302a;\n    }\n    specifierBuffer[0] = formatSpecifierLength;\n    numSpecifiers = 1;\n    argBuffer = (int ********)tempBuffer;\n    tempBuffer = (undefined  [4])stringPtr;\nLAB_000831be:\n    ppppppppiVar17 = argBuffer + 2;\n    formattedBuffer = formatSpecifierLength;\n  }\n  if (((flags & 4) != 0) &&\n     (currentSpecifier = (int *******)((int)pppppppiVar21 - (int)maxWidth), 0 < (int)currentSpecifier)) {\n    result = numSpecifiers;\n    if ((int)currentSpecifier < 0x11) {\n      iVar16 = numSpecifiers + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numSpecifiers = result + 1;\n          formattedBuffer = formattedBuffer + 4;\n          *ppppppppiVar17 = (int *******)0x856f0;\n          ppppppppiVar17[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          iVar16 = result + 2;\n          ppppppppiVar17 = ppppppppiVar17 + 2;\nLAB_0008307a:\n          currentSpecifier = currentSpecifier + -4;\n          result = numSpecifiers;\n          if ((int)currentSpecifier < 0x11) goto LAB_000830a2;\n        }\n        if (formattedBuffer != (int *******)0x0) {\n          result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n          if (result == 0) {\n            iVar16 = numSpecifiers + 1;\n            ppppppppiVar17 = (int ********)tempBuffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        currentSpecifier = currentSpecifier + -4;\n        iVar16 = 1;\n        result = 0;\n        ppppppppiVar17 = (int ********)tempBuffer;\n      } while (0x10 < (int)currentSpecifier);\n    }\nLAB_000830a2:\n    formattedBuffer = (int *******)((int)formattedBuffer + (int)currentSpecifier);\n    *ppppppppiVar17 = (int *******)0x856f0;\n    ppppppppiVar17[1] = currentSpecifier;\n    numSpecifiers = iVar16;\n    if (7 < iVar16) {\n      if (formattedBuffer == (int *******)0x0) {\n        if ((int)maxWidth < (int)pppppppiVar21) {\n          maxWidth = pppppppiVar21;\n        }\n        formattedLength = formattedLength + (int)maxWidth;\n        goto LAB_00083186;\n      }\n      result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)maxWidth < (int)pppppppiVar21) {\n    maxWidth = pppppppiVar21;\n  }\n  formattedLength = formattedLength + (int)maxWidth;\n  if ((formattedBuffer != (int *******)0x0) &&\n     (result = stringPtrprint_r_part_0(formatBuffer,formatBufferSize,&argBufferPtr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  numSpecifiers = 0;\n  argBuffer = (int ********)tempBuffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  tempValue = ch - 0x30;\n  pppppppiVar21 = (int *******)0x0;\n  currentSpecifier = format;\n  do {\n    format = (int *******)((int)currentSpecifier + 1);\n    ch = (uint)*(byte *)currentSpecifier;\n    pppppppiVar21 = (int *******)(tempValue + (int)pppppppiVar21 * 10);\n    tempValue = ch - 0x30;\n    currentSpecifier = format;\n  } while (tempValue < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)format;\n  if (signCharacter == '\\0') {\n    signCharacter = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "param_1": "formatBuffer",
                "param_2": "formatBufferSize",
                "param_3": "format",
                "param_4": "args",
                "bVar1": "isLeftJustified",
                "bVar2": "isBlankFlag",
                "bVar3": "isAlternateFlag",
                "cVar4": "signPrefix",
                "bVar5": "isZeroPadded",
                "pvVar6": "ptr",
                "ppppppppiVar7": "argBuffer",
                "piVar8": "arg",
                "iVar9": "result",
                "cVar10": "temp",
                "pppppppiVar11": "currentSpecifier",
                "uVar12": "tempValue",
                "ppiVar13": "argPtr",
                "uVar14": "flags",
                "uVar15": "ch",
                "uVar22": "divisor",
                "piVar23": "leadingOne",
                "pppppppiVar24": "remainingSpecifiers",
                "uVar25": "tempValue2",
                "__s": "stringPtr",
                "bVar26": "isNegative",
                "lVar27": "value",
                "local_dc": "maxWidth",
                "local_d4": "formatSpecifierLength",
                "local_c8": "currentArgPtr",
                "local_c4": "formattedLength",
                "local_c0": "hexCharacters",
                "local_a1": "signCharacter",
                "local_a0": "paddingCharacter",
                "local_9f": "xFormatSpecifier",
                "local_9c": "argBufferPtr",
                "local_98": "numSpecifiers",
                "local_94": "formattedBuffer",
                "local_90": "decimalCharacters",
                "cStack_6a": "digit",
                "local_69": "character",
                "local_68": "tempBuffer",
                "local_64": "specifierBuffer"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "memchr",
                "__sbprintf",
                "__sinit",
                "__swsetup_r",
                "strlen",
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_output_000834f0",
            "code": "\nint print_formatted_output_000834f0(undefined4 output_stream,int input_data)\n\n{\n  int printf_return_value;\n  int fflush_return_value;\n  undefined *string_buffer [2];\n  undefined4 buffer_size_1;\n  ushort input_flag;\n  undefined2 input_value;\n  undefined *buffer_pointer;\n  undefined4 buffer_size_2;\n  undefined4 value_zero;\n  undefined4 value_one;\n  undefined4 value_two;\n  undefined4 value_three;\n  undefined stack_buffer [1024];\n  \n  value_three = *(undefined4 *)(input_data + 100);\n  value_one = *(undefined4 *)(input_data + 0x1c);\n  input_value = *(undefined2 *)(input_data + 0xe);\n  value_two = *(undefined4 *)(input_data + 0x24);\n  string_buffer[0] = stack_buffer;\n  input_flag = *(ushort *)(input_data + 0xc) & 0xfffd;\n  buffer_size_1 = 0x400;\n  buffer_size_2 = 0x400;\n  value_zero = 0;\n  buffer_pointer = string_buffer[0];\n  printf_return_value = _vfiprintf_r(output_stream,string_buffer);\n  if ((-1 < printf_return_value) && (fflush_return_value = _fflush_r(output_stream,string_buffer), fflush_return_value != 0)) {\n    printf_return_value = -1;\n  }\n  if ((int)((uint)input_flag << 0x19) < 0) {\n    *(ushort *)(input_data + 0xc) = *(ushort *)(input_data + 0xc) | 0x40;\n  }\n  return printf_return_value;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_output_000834f0",
                "param_1": "output_stream",
                "param_2": "input_data",
                "iVar1": "printf_return_value",
                "iVar2": "fflush_return_value",
                "local_488": "string_buffer",
                "local_480": "buffer_size_1",
                "local_47c": "input_flag",
                "local_47a": "input_value",
                "local_478": "buffer_pointer",
                "local_474": "buffer_size_2",
                "local_470": "value_zero",
                "local_46c": "value_one",
                "local_464": "value_two",
                "local_424": "value_three",
                "auStack_420": "stack_buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_input_0008356c",
            "code": "\nundefined4 processInput_0008356c(undefined4 *outputStatus,int *inputData)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint mask;\n  ushort value;\n  \n  if ((_ptr != 0) && (*(int *)(_ptr + 0x38) == 0)) {\n    initialize();\n  }\n  value = *(ushort *)(inputData + 3);\n  mask = (uint)value;\n  if ((int)(mask << 0x1c) < 0) {\n    tempVar2 = inputData[4];\n  }\n  else {\n    if (-1 < (int)(mask << 0x1b)) {\n      *outputStatus = 9;\n      *(ushort *)(inputData + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(mask << 0x1d) < 0) {\n      if ((int *)inputData[0xc] != (int *)0x0) {\n        if ((int *)inputData[0xc] != inputData + 0x10) {\n          freeMemory(outputStatus);\n          value = *(ushort *)(inputData + 3);\n        }\n        inputData[0xc] = 0;\n      }\n      tempVar2 = inputData[4];\n      value = value & 0xffdb;\n      *inputData = tempVar2;\n      inputData[1] = 0;\n    }\n    else {\n      tempVar2 = inputData[4];\n    }\n    *(ushort *)(inputData + 3) = value | 8;\n    mask = (uint)(value | 8);\n  }\n  if ((tempVar2 == 0) && ((mask & 0x280) != 0x200)) {\n    createBuffer(outputStatus,inputData);\n    mask = (uint)*(ushort *)(inputData + 3);\n    tempVar2 = inputData[4];\n  }\n  if ((mask & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(mask << 0x1e)) {\n      tempVar1 = inputData[5];\n    }\n    inputData[2] = tempVar1;\n  }\n  else {\n    inputData[6] = -inputData[5];\n    inputData[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(inputData + 3) << 0x18) < 0)) {\n    *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_input_0008356c",
                "param_1": "outputStatus",
                "param_2": "inputData",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "mask",
                "uVar4": "value",
                "__sinit": "initialize",
                "_impure_ptr": "_ptr",
                "_free_r": "freeMemory",
                "__smakebuf_r": "createBuffer"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "called": [
                "__smakebuf_r",
                "__sinit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083630": {
            "entrypoint": "0x00083630",
            "current_name": "update_data_00083630",
            "code": "\nundefined4 updateData_00083630(int status,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *dataPtr;\n  uint index;\n  uint bitMask;\n  \n  if (DAT_20070180 == (undefined4 *)0x0) {\n    DAT_20070180 = (undefined4 *)&DAT_20070184;\n  }\n  index = DAT_20070180[1];\n  dataPtr = DAT_20070180;\n  if (0x1f < (int)index) {\n    dataPtr = (undefined4 *)malloc(400);\n    if (dataPtr == (undefined4 *)0x0) {\n      return 0xffffffff;\n    }\n    *dataPtr = DAT_20070180;\n    dataPtr[1] = 0;\n    index = 0;\n    DAT_20070180 = dataPtr;\n    dataPtr[0x62] = 0;\n    dataPtr[99] = 0;\n  }\n  if (status != 0) {\n    bitMask = 1 << (index & 0xff);\n    dataPtr[index + 0x22] = data1;\n    dataPtr[0x62] = dataPtr[0x62] | bitMask;\n    dataPtr[index + 0x42] = data2;\n    if (status == 2) {\n      dataPtr[99] = bitMask | dataPtr[99];\n    }\n  }\n  dataPtr[1] = index + 1;\n  dataPtr[index + 2] = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083630": "update_data_00083630",
                "param_1": "status",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataPtr",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "atexit",
                "__cxa_atexit"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000836dc) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "terminate_process_000836ec",
            "code": "\n\n\nvoid terminateProcess_000836ec(void)\n\n{\n  raise(6);\n                    \n  _exit(1);\n}\n\n",
            "renaming": {
                "FUN_000836ec": "terminate_process_000836ec"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836fc": {
            "entrypoint": "0x000836fc",
            "current_name": "register_exit_process_000836fc",
            "code": "\nint registerExitProcess_000836fc(function *function)\n\n{\n  int result;\n  \n  result = __register_exitproc(0,function,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000836fc": "register_exit_process_000836fc",
                "__func": "function",
                "iVar1": "result"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083708": {
            "entrypoint": "0x00083708",
            "current_name": "process_data_00083708",
            "code": "\nundefined4 processData_00083708(int *inputArray,int *outputArray)\n\n{\n  int *ptrVar1;\n  int tempVar1;\n  ushort flag1;\n  uint flag2;\n  int tempVar2;\n  code *functionPtr;\n  int tempVar3;\n  \n  flag1 = *(ushort *)(outputArray + 3);\n  if ((int)((uint)flag1 << 0x1c) < 0) {\n    tempVar3 = outputArray[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    tempVar1 = *outputArray;\n    if ((flag1 & 3) == 0) {\n      tempVar2 = outputArray[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *outputArray = tempVar3;\n    tempVar1 = tempVar1 - tempVar3;\n    outputArray[2] = tempVar2;\n    do {\n      if (tempVar1 < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)outputArray[9])(inputArray,outputArray[7],tempVar3,tempVar1);\n      tempVar1 = tempVar1 - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_000837c8:\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputArray + 3) = flag1 | 0x800;\n  if ((outputArray[1] < 1) && (outputArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)outputArray[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag1 | 0x800);\n  tempVar3 = *inputArray;\n  *inputArray = 0;\n  if ((flag1 & 0x1000) == 0) {\n    tempVar1 = (*functionPtr)(inputArray,outputArray[7],flag2 & 0x1000,1);\n    if ((tempVar1 == -1) && (tempVar2 = *inputArray, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *inputArray = tempVar3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flag2 = (uint)*(ushort *)(outputArray + 3);\n    functionPtr = (code *)outputArray[10];\n  }\n  else {\n    tempVar1 = outputArray[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (tempVar1 = tempVar1 - outputArray[1], outputArray[0xc] != 0)) {\n    tempVar1 = tempVar1 - outputArray[0xf];\n  }\n  tempVar1 = (*functionPtr)(inputArray,outputArray[7],tempVar1,0);\n  if (tempVar1 == -1) {\n    tempVar2 = *inputArray;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xf7ff;\n      *outputArray = outputArray[4];\n      outputArray[1] = 0;\n      goto LAB_00083774;\n    }\n    flag1 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    outputArray[1] = 0;\n    *(ushort *)(outputArray + 3) = flag1;\n    *outputArray = outputArray[4];\n  }\n  else {\n    flag1 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    *outputArray = outputArray[4];\n    *(ushort *)(outputArray + 3) = flag1;\n    outputArray[1] = 0;\n  }\n  if ((int)((uint)flag1 << 0x13) < 0) {\n    outputArray[0x14] = tempVar1;\n  }\nLAB_00083774:\n  ptrVar1 = (int *)outputArray[0xc];\n  *inputArray = tempVar3;\n  if (ptrVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptrVar1 != outputArray + 0x10) {\n    _free_r(inputArray);\n  }\n  outputArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083708": "process_data_00083708",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "piVar1": "ptrVar1",
                "iVar2": "tempVar1",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "iVar5": "tempVar2",
                "pcVar6": "functionPtr",
                "iVar7": "tempVar3"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "flush_if_not_initialized_00083850",
            "code": "\nvoid flushIfNotInitialized_00083850(int input_1,int input_2)\n\n{\n  if ((input_1 != 0) && (*(int *)(input_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  if (*(short *)(input_2 + 0xc) == 0) {\n    return;\n  }\n  __sflush_r(input_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083850": "flush_if_not_initialized_00083850",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "__sbprintf",
                "__sfvwrite_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008387c": {
            "entrypoint": "0x0008387c",
            "current_name": "initialize_buffer_0008387c",
            "code": "\nvoid initializeBuffer_0008387c(undefined4 buffer)\n\n{\n  walkThroughBuffer(buffer,0x84485);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008387c": "initialize_buffer_0008387c",
                "param_1": "buffer",
                "_fwalk": "walkThroughBuffer"
            },
            "calling": [],
            "called": [
                "_fwalk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructuresPtr)\n\n{\n  undefined4 *struct1Ptr;\n  undefined4 *struct2Ptr;\n  \n  if (*(int *)(dataStructuresPtr + 0x38) == 0) {\n    struct1Ptr = *(undefined4 **)(dataStructuresPtr + 4);\n    *(undefined4 *)(dataStructuresPtr + 0x3c) = 0x8387d;\n    *(undefined4 *)(dataStructuresPtr + 0x2e4) = 3;\n    *(int *)(dataStructuresPtr + 0x2e8) = dataStructuresPtr + 0x2ec;\n    *(undefined4 *)(dataStructuresPtr + 0x2e0) = 0;\n    *(undefined2 *)(struct1Ptr + 3) = 4;\n    *struct1Ptr = 0;\n    struct1Ptr[1] = 0;\n    struct1Ptr[2] = 0;\n    struct1Ptr[0x19] = 0;\n    *(undefined2 *)((int)struct1Ptr + 0xe) = 0;\n    struct1Ptr[4] = 0;\n    struct1Ptr[5] = 0;\n    struct1Ptr[6] = 0;\n    memset(struct1Ptr + 0x17,0,8);\n    struct2Ptr = *(undefined4 **)(dataStructuresPtr + 8);\n    struct1Ptr[7] = struct1Ptr;\n    struct1Ptr[8] = 0x84221;\n    struct1Ptr[9] = 0x84245;\n    struct1Ptr[10] = 0x8427d;\n    struct1Ptr[0xb] = 0x8429d;\n    *(undefined2 *)((int)struct2Ptr + 0xe) = 1;\n    *(undefined2 *)(struct2Ptr + 3) = 9;\n    *struct2Ptr = 0;\n    struct2Ptr[1] = 0;\n    struct2Ptr[2] = 0;\n    struct2Ptr[0x19] = 0;\n    struct2Ptr[4] = 0;\n    struct2Ptr[5] = 0;\n    struct2Ptr[6] = 0;\n    memset(struct2Ptr + 0x17,0,8);\n    struct1Ptr = *(undefined4 **)(dataStructuresPtr + 0xc);\n    struct2Ptr[7] = struct2Ptr;\n    struct2Ptr[8] = 0x84221;\n    struct2Ptr[9] = 0x84245;\n    struct2Ptr[10] = 0x8427d;\n    struct2Ptr[0xb] = 0x8429d;\n    *(undefined2 *)(struct1Ptr + 3) = 0x12;\n    *(undefined2 *)((int)struct1Ptr + 0xe) = 2;\n    *struct1Ptr = 0;\n    struct1Ptr[1] = 0;\n    struct1Ptr[2] = 0;\n    struct1Ptr[0x19] = 0;\n    struct1Ptr[4] = 0;\n    struct1Ptr[5] = 0;\n    struct1Ptr[6] = 0;\n    memset(struct1Ptr + 0x17,0,8);\n    struct1Ptr[7] = struct1Ptr;\n    struct1Ptr[8] = 0x84221;\n    struct1Ptr[9] = 0x84245;\n    struct1Ptr[10] = 0x8427d;\n    struct1Ptr[0xb] = 0x8429d;\n    *(undefined4 *)(dataStructuresPtr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructuresPtr",
                "puVar1": "struct1Ptr",
                "puVar2": "struct2Ptr"
            },
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fflush_r",
                "__swbuf_r",
                "_fclose_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083984": {
            "entrypoint": "0x00083984",
            "current_name": "deinitialize_functions_00083984",
            "code": "\nvoid deinitialize_functions_00083984(void)\n\n{\n  int iteration_count;\n  code **function_pointer_array;\n  \n  iteration_count = 1;\n  function_pointer_array = (code **)&__fini_array_end;\n  do {\n    iteration_count = iteration_count + -1;\n    function_pointer_array = function_pointer_array + -1;\n    (**function_pointer_array)();\n  } while (iteration_count != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083984": "deinitialize_functions_00083984",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer_array"
            },
            "calling": [],
            "called": [
                "__do_global_dtors_aux",
                "_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_character_to_byte_000839b4",
            "code": "\nuint convertCharacterToByte_000839b4(undefined4 characterSet,uint character,byte **stringArray)\n\n{\n  int maxBytes;\n  uint conversionResult;\n  uint convertedByte;\n  byte *bytePointer;\n  uint index;\n  byte byteValue;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(stringArray + 3) << 0x12)) {\n    *(ushort *)(stringArray + 3) = *(ushort *)(stringArray + 3) | 0x2000;\n    stringArray[0x19] = (byte *)((uint)stringArray[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (character - 1 < 0xff)) {\n    convertedByte = character & 0xff;\n    byteValue = (byte)convertedByte;\n    conversionResult = 1;\n  }\n  else {\n    conversionResult = _wcrtomb_r(characterSet,&byteValue,character,stringArray + 0x17);\n    if (conversionResult == 0xffffffff) {\n      *(ushort *)(stringArray + 3) = *(ushort *)(stringArray + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversionResult == 0) {\n      return character;\n    }\n    convertedByte = (uint)byteValue;\n  }\n  index = 0;\n  do {\n    bytePointer = stringArray[2] + -1;\n    stringArray[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)stringArray[6] <= (int)bytePointer) {\n        **stringArray = (byte)convertedByte;\n        bytePointer = *stringArray;\n        convertedByte = (uint)*bytePointer;\n        if (convertedByte != 10) goto LAB_00083a04;\n      }\n      maxBytes = __swbuf_r(characterSet,convertedByte,stringArray);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **stringArray = (byte)convertedByte;\n      bytePointer = *stringArray;\nLAB_00083a04:\n      *stringArray = bytePointer + 1;\n    }\n    if (conversionResult <= index + 1) {\n      return character;\n    }\n    convertedByte = (uint)byteArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_character_to_byte_000839b4",
                "param_1": "characterSet",
                "param_2": "character",
                "param_3": "stringArray",
                "iVar1": "maxBytes",
                "uVar2": "conversionResult",
                "uVar3": "convertedByte",
                "pbVar4": "bytePointer",
                "uVar5": "index",
                "local_1c": "byteValue",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__locale_mb_cur_max",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_00083a74",
            "code": "\nundefined4 allocateMemory_00083a74(undefined4 lock,int size)\n\n{\n  int result;\n  uint mallocPointer;\n  int adjustedSize;\n  \n  __malloc_lock();\n  mallocPointer = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  adjustedSize = ((mallocPointer - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedSize) {\n    result = _sbrk_r(lock,0);\n    if (result == DAT_2007046c + mallocPointer) {\n      result = _sbrk_r(lock,-adjustedSize);\n      if (result != -1) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo - adjustedSize;\n        *(uint *)(DAT_2007046c + 4) = mallocPointer - adjustedSize | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      adjustedSize = _sbrk_r(lock,0);\n      if (0xf < adjustedSize - DAT_2007046c) {\n        __malloc_current_mallinfo = adjustedSize - __malloc_sbrk_base;\n        *(uint *)(DAT_2007046c + 4) = adjustedSize - DAT_2007046c | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "mallocPointer",
                "iVar3": "adjustedSize"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "deallocate_memory_00083b10",
            "code": "\nvoid deallocateMemory_00083b10(undefined4 allocation_lock,int memory_address)\n\n{\n  undefined4 *previousBlock;\n  bool isHeadBlock;\n  uint blockSize;\n  int temporaryVariable1;\n  int temporaryVariable2;\n  undefined1 *currentBlock;\n  uint tempBlockSize;\n  undefined1 *nextBlock;\n  int blockAddress;\n  uint trimmedSize;\n  \n  if (memory_address == 0) {\n    return;\n  }\n  __malloc_lock();\n  blockSize = *(uint *)(memory_address + -4);\n  blockAddress = memory_address + -8;\n  tempBlockSize = blockSize & 0xfffffffe;\n  temporaryVariable2 = blockAddress + tempBlockSize;\n  trimmedSize = *(uint *)(temporaryVariable2 + 4) & 0xfffffffc;\n  if (DAT_2007046c == temporaryVariable2) {\n    trimmedSize = trimmedSize + tempBlockSize;\n    if (-1 < (int)(blockSize << 0x1f)) {\n      blockAddress = blockAddress - *(int *)(memory_address + -8);\n      temporaryVariable1 = *(int *)(blockAddress + 0xc);\n      temporaryVariable2 = *(int *)(blockAddress + 8);\n      trimmedSize = trimmedSize + *(int *)(memory_address + -8);\n      *(int *)(temporaryVariable2 + 0xc) = temporaryVariable1;\n      *(int *)(temporaryVariable1 + 8) = temporaryVariable2;\n    }\n    blockSize = __malloc_trim_threshold;\n    *(uint *)(blockAddress + 4) = trimmedSize | 1;\n    DAT_2007046c = blockAddress;\n    if (blockSize <= trimmedSize) {\n      _malloc_trim_r(allocation_lock,__malloc_top_pad);\n    }\n  }\n  else {\n    *(uint *)(temporaryVariable2 + 4) = trimmedSize;\n    if ((blockSize & 1) == 0) {\n      blockAddress = blockAddress - *(int *)(memory_address + -8);\n      previousBlock = *(undefined4 **)(blockAddress + 8);\n      tempBlockSize = tempBlockSize + *(int *)(memory_address + -8);\n      if (previousBlock == &DAT_2007046c) {\n        isHeadBlock = true;\n      }\n      else {\n        temporaryVariable1 = *(int *)(blockAddress + 0xc);\n        previousBlock[3] = temporaryVariable1;\n        *(undefined4 **)(temporaryVariable1 + 8) = previousBlock;\n        isHeadBlock = false;\n      }\n    }\n    else {\n      isHeadBlock = false;\n    }\n    if (-1 < *(int *)(temporaryVariable2 + trimmedSize + 4) << 0x1f) {\n      tempBlockSize = tempBlockSize + trimmedSize;\n      previousBlock = *(undefined4 **)(temporaryVariable2 + 8);\n      if ((!isHeadBlock) && (previousBlock == &DAT_2007046c)) {\n        DAT_20070474 = blockAddress;\n        DAT_20070478 = blockAddress;\n        *(int **)(blockAddress + 0xc) = &DAT_2007046c;\n        *(int **)(blockAddress + 8) = &DAT_2007046c;\n        *(uint *)(blockAddress + 4) = tempBlockSize | 1;\n        *(uint *)(blockAddress + tempBlockSize) = tempBlockSize;\n        goto LAB_00083ba4;\n      }\n      temporaryVariable2 = *(int *)(temporaryVariable2 + 0xc);\n      previousBlock[3] = temporaryVariable2;\n      *(undefined4 **)(temporaryVariable2 + 8) = previousBlock;\n    }\n    *(uint *)(blockAddress + 4) = tempBlockSize | 1;\n    *(uint *)(blockAddress + tempBlockSize) = tempBlockSize;\n    if (!isHeadBlock) {\n      if (tempBlockSize < 0x200) {\n        blockSize = tempBlockSize & 0xfffffff8;\n        temporaryVariable2 = *(int *)((int)&DAT_2007046c + blockSize);\n        DAT_20070468 = DAT_20070468 | 1 << ((int)(tempBlockSize >> 3) >> 2 & 0xffU);\n        *(int *)(blockAddress + 8) = temporaryVariable2;\n        *(undefined1 **)(blockAddress + 0xc) = &__malloc_av_ + blockSize;\n        *(int *)((int)&DAT_2007046c + blockSize) = blockAddress;\n        *(int *)(temporaryVariable2 + 0xc) = blockAddress;\n        __malloc_unlock(allocation_lock);\n        return;\n      }\n      blockSize = tempBlockSize >> 9;\n      if (blockSize < 5) {\n        temporaryVariable2 = (tempBlockSize >> 6) + 0x38;\n        temporaryVariable1 = temporaryVariable2 * 2;\n      }\n      else if (blockSize < 0x15) {\n        temporaryVariable2 = blockSize + 0x5b;\n        temporaryVariable1 = temporaryVariable2 * 2;\n      }\n      else if (blockSize < 0x55) {\n        temporaryVariable2 = (tempBlockSize >> 0xc) + 0x6e;\n        temporaryVariable1 = temporaryVariable2 * 2;\n      }\n      else if (blockSize < 0x155) {\n        temporaryVariable2 = (tempBlockSize >> 0xf) + 0x77;\n        temporaryVariable1 = temporaryVariable2 * 2;\n      }\n      else if (blockSize < 0x555) {\n        temporaryVariable2 = (tempBlockSize >> 0x12) + 0x7c;\n        temporaryVariable1 = temporaryVariable2 * 2;\n      }\n      else {\n        temporaryVariable1 = 0xfc;\n        temporaryVariable2 = 0x7e;\n      }\n      currentBlock = (undefined1 *)(&DAT_2007046c)[temporaryVariable1];\n      if (currentBlock == &__malloc_av_ + temporaryVariable1 * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (temporaryVariable2 >> 2 & 0xffU);\n        nextBlock = currentBlock;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentBlock + 4) & 0xfffffffc) <= tempBlockSize) break;\n          currentBlock = *(undefined1 **)(currentBlock + 8);\n        } while (&__malloc_av_ + temporaryVariable1 * 4 != currentBlock);\n        nextBlock = *(undefined1 **)(currentBlock + 0xc);\n      }\n      *(undefined1 **)(blockAddress + 0xc) = nextBlock;\n      *(undefined1 **)(blockAddress + 8) = currentBlock;\n      *(int *)(nextBlock + 8) = blockAddress;\n      *(int *)(currentBlock + 0xc) = blockAddress;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(allocation_lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "deallocate_memory_00083b10",
                "param_1": "allocation_lock",
                "param_2": "memory_address",
                "puVar1": "previousBlock",
                "bVar2": "isHeadBlock",
                "uVar3": "blockSize",
                "iVar4": "temporaryVariable1",
                "iVar5": "temporaryVariable2",
                "puVar6": "currentBlock",
                "uVar7": "tempBlockSize",
                "puVar8": "nextBlock",
                "iVar9": "blockAddress",
                "uVar10": "trimmedSize"
            },
            "calling": [
                "_malloc_r",
                "free",
                "__sflush_r",
                "__swsetup_r",
                "__sfvwrite_r",
                "_realloc_r",
                "_fclose_r"
            ],
            "called": [
                "_malloc_trim_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *errorFlag,void **dataBuffer,undefined4 *dataInfo)\n\n{\n  void **tempPtr1;\n  int returnValue;\n  void *tempPtr3;\n  void *tempPtr4;\n  void *ptr1;\n  void *ptr2;\n  ushort flag;\n  uint uintVar;\n  int tempVar1;\n  void **tempPtr2;\n  void *ptr3;\n  void *ptr4;\n  void *tempVar2;\n  size_t tempVar3;\n  void *localVar;\n  \n  if (dataInfo[2] != 0) {\n    flag = *(ushort *)(dataBuffer + 3);\n    uintVar = (uint)flag;\n    if (((int)(uintVar << 0x1c) < 0) && (dataBuffer[4] != (void *)0x0)) {\n      tempPtr2 = (void **)*dataInfo;\n    }\n    else {\n      returnValue = __swsetup_r(errorFlag,dataBuffer);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(dataBuffer + 3);\n      uintVar = (uint)flag;\n      tempPtr2 = (void **)*dataInfo;\n    }\n    if ((flag & 2) == 0) {\n      ptr1 = (void *)(uintVar & 2);\n      ptr4 = ptr1;\n      ptr3 = ptr1;\n      localVar = ptr1;\n      if ((uintVar & 1) == 0) {\n        ptr1 = (void *)0x0;\n        ptr4 = (void *)0x0;\n        while( true ) {\n          while (ptr1 == (void *)0x0) {\n            ptr4 = *tempPtr2;\n            tempPtr1 = tempPtr2 + 1;\n            tempPtr2 = tempPtr2 + 2;\n            ptr1 = *tempPtr1;\n          }\n          ptr3 = dataBuffer[2];\n          if ((int)(uintVar << 0x16) < 0) {\n            if (ptr1 < ptr3) {\n              tempPtr3 = *dataBuffer;\n              ptr3 = ptr1;\n            }\n            else if ((uintVar & 0x480) == 0) {\n              tempPtr3 = *dataBuffer;\n            }\n            else {\n              tempVar3 = (int)*dataBuffer - (int)dataBuffer[4];\n              ptr3 = (void *)(tempVar3 + 1 + (int)ptr1);\n              tempPtr3 = (void *)(((int)dataBuffer[5] * 3) / 2);\n              if (ptr3 <= tempPtr3) {\n                ptr3 = tempPtr3;\n              }\n              if ((int)(uintVar << 0x15) < 0) {\n                tempPtr4 = (void *)_malloc_r(errorFlag,ptr3);\n                if (tempPtr4 == (void *)0x0) {\n                  *errorFlag = 0xc;\n                  flag = *(ushort *)(dataBuffer + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(tempPtr4,dataBuffer[4],tempVar3);\n                *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempPtr4 = (void *)_realloc_r(errorFlag);\n                if (tempPtr4 == (void *)0x0) {\n                  _free_r(errorFlag,dataBuffer[4]);\n                  flag = *(ushort *)(dataBuffer + 3) & 0xff7f;\n                  *errorFlag = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              tempPtr3 = (void *)((int)tempPtr4 + tempVar3);\n              dataBuffer[4] = tempPtr4;\n              dataBuffer[5] = ptr3;\n              *dataBuffer = tempPtr3;\n              dataBuffer[2] = (void *)((int)ptr3 - tempVar3);\n              ptr3 = ptr1;\n            }\n            memmove(tempPtr3,ptr4,(size_t)ptr3);\n            dataBuffer[2] = (void *)((int)dataBuffer[2] - (int)ptr3);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)ptr3);\n            ptr3 = ptr1;\n          }\n          else if ((dataBuffer[4] < *dataBuffer) || (tempPtr3 = dataBuffer[5], ptr1 < tempPtr3)) {\n            if (ptr1 < ptr3) {\n              ptr3 = ptr1;\n            }\n            memmove(*dataBuffer,ptr4,(size_t)ptr3);\n            tempPtr3 = dataBuffer[2];\n            dataBuffer[2] = (void *)((int)tempPtr3 - (int)ptr3);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)ptr3);\n            if (((void *)((int)tempPtr3 - (int)ptr3) == (void *)0x0) &&\n               (returnValue = _fflush_r(errorFlag,dataBuffer), returnValue != 0)) goto LAB_00083da2;\n          }\n          else {\n            ptr3 = (void *)0x7fffffff;\n            if (ptr1 < (void *)0x7fffffff) {\n              ptr3 = ptr1;\n            }\n            ptr3 = (void *)(*(code *)dataBuffer[9])\n                                        (errorFlag,dataBuffer[7],ptr4,\n                                         ((uint)ptr3 / (uint)tempPtr3) * (int)tempPtr3);\n            if ((int)ptr3 < 1) goto LAB_00083da2;\n          }\n          returnValue = dataInfo[2];\n          ptr4 = (void *)((int)ptr4 + (int)ptr3);\n          ptr1 = (void *)((int)ptr1 - (int)ptr3);\n          dataInfo[2] = returnValue - (int)ptr3;\n          if (returnValue - (int)ptr3 == 0) break;\n          uintVar = (uint)*(ushort *)(dataBuffer + 3);\n        }\n      }\n      else {\n        do {\n          while (ptr1 == (void *)0x0) {\n            ptr3 = *tempPtr2;\n            ptr1 = tempPtr2[1];\n            localVar = (void *)0x0;\n            tempPtr2 = tempPtr2 + 2;\n          }\n          if (localVar == (void *)0x0) {\n            ptr4 = memchr(ptr3,10,(size_t)ptr1);\n            if (ptr4 == (void *)0x0) {\n              ptr4 = (void *)((int)ptr1 + 1);\n              localVar = (void *)0x1;\n            }\n            else {\n              ptr4 = (void *)((int)ptr4 + (1 - (int)ptr3));\n              localVar = (void *)0x1;\n            }\n          }\n          tempPtr4 = *dataBuffer;\n          tempPtr3 = ptr4;\n          if (ptr1 <= ptr4) {\n            tempPtr3 = ptr1;\n          }\n          ptr2 = dataBuffer[5];\n          if ((dataBuffer[4] < tempPtr4) &&\n             (tempVar2 = (void *)((int)dataBuffer[2] + (int)ptr2), (int)tempVar2 < (int)tempPtr3)) {\n            memmove(tempPtr4,ptr3,(size_t)tempVar2);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)tempVar2);\n            returnValue = _fflush_r(errorFlag,dataBuffer);\n            if (returnValue != 0) goto LAB_00083da2;\n          }\n          else if ((int)tempPtr3 < (int)ptr2) {\n            memmove(tempPtr4,ptr3,(size_t)tempPtr3);\n            dataBuffer[2] = (void *)((int)dataBuffer[2] - (int)tempPtr3);\n            *dataBuffer = (void *)((int)tempPtr3 + (int)*dataBuffer);\n            tempVar2 = tempPtr3;\n          }\n          else {\n            tempVar2 = (void *)(*(code *)dataBuffer[9])(errorFlag,dataBuffer[7],ptr3,ptr2);\n            if ((int)tempVar2 < 1) goto LAB_00083da2;\n          }\n          ptr4 = (void *)((int)ptr4 - (int)tempVar2);\n          if (ptr4 == (void *)0x0) {\n            returnValue = _fflush_r(errorFlag,dataBuffer);\n            if (returnValue != 0) goto LAB_00083da2;\n            localVar = (void *)0x0;\n          }\n          returnValue = dataInfo[2];\n          ptr3 = (void *)((int)ptr3 + (int)tempVar2);\n          ptr1 = (void *)((int)ptr1 - (int)tempVar2);\n          dataInfo[2] = returnValue - (int)tempVar2;\n        } while (returnValue - (int)tempVar2 != 0);\n      }\n    }\n    else {\n      ptr4 = (void *)0x0;\n      ptr1 = (void *)0x0;\n      do {\n        while( true ) {\n          ptr3 = ptr1;\n          if ((void *)0x7ffffbff < ptr1) {\n            ptr3 = (void *)0x7ffffc00;\n          }\n          if (ptr1 != (void *)0x0) break;\n          ptr4 = *tempPtr2;\n          ptr1 = tempPtr2[1];\n          tempPtr2 = tempPtr2 + 2;\n        }\n        returnValue = (*(code *)dataBuffer[9])(errorFlag,dataBuffer[7],ptr4,ptr3);\n        if (returnValue < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(dataBuffer + 3);\nLAB_00083da4:\n          *(ushort *)(dataBuffer + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        tempVar1 = dataInfo[2];\n        ptr4 = (void *)((int)ptr4 + returnValue);\n        ptr1 = (void *)((int)ptr1 - returnValue);\n        dataInfo[2] = tempVar1 - returnValue;\n      } while (tempVar1 - returnValue != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "errorFlag",
                "param_2": "dataBuffer",
                "param_3": "dataInfo",
                "ppvVar1": "tempPtr1",
                "iVar2": "returnValue",
                "pvVar3": "tempPtr3",
                "pvVar4": "tempPtr4",
                "pvVar5": "ptr1",
                "pvVar6": "ptr2",
                "uVar7": "flag",
                "uVar8": "uintVar",
                "iVar9": "tempVar1",
                "ppvVar10": "tempPtr2",
                "pvVar11": "ptr3",
                "pvVar12": "ptr4",
                "__n": "tempVar2",
                "__n_00": "tempVar3",
                "local_2c": "localVar"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memchr",
                "memmove",
                "_malloc_r",
                "__swsetup_r",
                "_fflush_r",
                "_realloc_r",
                "memcpy",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083fbc": {
            "entrypoint": "0x00083fbc",
            "current_name": "find_and_perform_action_00083fbc",
            "code": "\nuint find_and_perform_action_00083fbc(int base_address,code *action_callback)\n\n{\n  uint result;\n  int current_entry;\n  int remaining_entries;\n  uint combined_results;\n  int *entry_ptr;\n  \n  entry_ptr = (int *)(base_address + 0x2e0);\n  if (entry_ptr != (int *)0x0) {\n    combined_results = 0;\n    do {\n      current_entry = entry_ptr[2];\n      remaining_entries = entry_ptr[1] + -1;\n      if (-1 < remaining_entries) {\n        do {\n          remaining_entries = remaining_entries + -1;\n          if ((1 < *(ushort *)(current_entry + 0xc)) && (*(short *)(current_entry + 0xe) != -1)) {\n            result = (*action_callback)(current_entry);\n            combined_results = combined_results | result;\n          }\n          current_entry = current_entry + 0x68;\n        } while (remaining_entries != -1);\n      }\n      entry_ptr = (int *)*entry_ptr;\n    } while (entry_ptr != (int *)0x0);\n    return combined_results;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083fbc": "find_and_perform_action_00083fbc",
                "param_1": "base_address",
                "param_2": "action_callback",
                "uVar1": "result",
                "iVar2": "current_entry",
                "iVar3": "remaining_entries",
                "uVar4": "combined_results",
                "piVar5": "entry_ptr"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_charset_00084004",
            "code": "\nchar * getCharset_00084004(void)\n\n{\n  return charset;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "lc_ctype_charset": "charset"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_max_multibyte_character_size_0008400c",
            "code": "\nundefined4 getMaxMultibyteCharacterSize_0008400c(void)\n\n{\n  return maxMultibyteCharacterSize;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_max_multibyte_character_size_0008400c",
                "__mb_cur_max": "maxMultibyteCharacterSize"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "reverse_and_allocate_00084018",
            "code": "\nvoid reverse_and_allocate_00084018(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int status;\n  int allocationStatus;\n  uint uintValue;\n  bool isFlagSet;\n  undefined stackBuffer [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    status = _fstat_r(param1,(int)*(short *)((int)param2 + 0xe),stackBuffer);\n    if (-1 < status) {\n      isFlagSet = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        status = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  isFlagSet = false;\nLAB_00084074:\n  allocationStatus = _malloc_r(param1,status);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (allocationStatus == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(param1 + 0x3c) = 0x8387d;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = allocationStatus;\n    param2[4] = allocationStatus;\n    param2[5] = status;\n    if ((isFlagSet) && (status = _isatty_r(param1,(int)*(short *)((int)param2 + 0xe)), status != 0)) {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "reverse_and_allocate_00084018",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "status",
                "iVar3": "allocationStatus",
                "uVar4": "uintValue",
                "bVar5": "isFlagSet",
                "auStack_54": "stackBuffer",
                "local_50": "localValue"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_fstat_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_first_occurrence_000840f8",
            "code": "\nvoid * find_first_occurrence_000840f8(void *buffer,int character,size_t length)\n\n{\n  uint char_mask;\n  uint xor_result;\n  int counter;\n  uint *buffer_ptr;\n  uint combined_char_mask;\n  bool found;\n  \n  char_mask = character & 0xff;\n  if (((uint)buffer & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      combined_char_mask = char_mask | char_mask << 8;\n      buffer_ptr = (uint *)buffer;\n      do {\n        xor_result = *buffer_ptr ^ (combined_char_mask | combined_char_mask << 0x10);\n        buffer = buffer_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        buffer = buffer_ptr + 1;\n        buffer_ptr = buffer_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      buffer = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*buffer != char_mask) {\n        counter = 0;\n        do {\n          buffer = (void *)((int)buffer + 1);\n          found = counter == length - 1;\n          counter = counter + 1;\n          if (found) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        } while (*buffer != char_mask);\n      }\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    buffer = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*buffer != char_mask) {\n      buffer_ptr = (uint *)((int)buffer + 1);\n      length = length - 1;\n      do {\n        buffer = buffer_ptr;\n        if (((uint)buffer & 3) == 0) goto LAB_00084128;\n        if (length == 0) goto LAB_00084150;\n                    /* WARNING: Load size is inaccurate */\n        buffer_ptr = (uint *)((int)buffer + 1);\n        length = length - 1;\n      } while (*buffer != char_mask);\n    }\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "__s": "buffer",
                "__c": "character",
                "__n": "length",
                "uVar1": "char_mask",
                "uVar2": "xor_result",
                "iVar3": "counter",
                "puVar4": "buffer_ptr",
                "uVar5": "combined_char_mask",
                "bVar6": "found"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008418c": {
            "entrypoint": "0x0008418c",
            "current_name": "process_signal_0008418c",
            "code": "\nundefined4 process_signal_0008418c(undefined4 *signals,uint signal_num,undefined4 param3,undefined4 param4)\n\n{\n  __pid_t pid;\n  undefined4 result;\n  int signal_handler;\n  code *handler_function;\n  \n  if (0x1f < signal_num) {\n    *signals = 0x16;\n    return 0xffffffff;\n  }\n  signal_handler = signals[0xb7];\n  if ((signal_handler == 0) || (handler_function = *(code **)(signal_handler + signal_num * 4), handler_function == (code *)0x0)) {\n    pid = _getpid_r();\n    result = _kill_r(signals,pid,signal_num,param4);\n    return result;\n  }\n  if (handler_function == (code *)0x1) {\n    return 0;\n  }\n  if (handler_function != (code *)0xffffffff) {\n    *(undefined4 *)(signal_handler + signal_num * 4) = 0;\n    (*handler_function)(signal_num);\n    return 0;\n  }\n  *signals = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008418c": "process_signal_0008418c",
                "param_1": "signals",
                "param_2": "signal_num",
                "param_3": "param3",
                "param_4": "param4",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "signal_handler",
                "pcVar4": "handler_function"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "signal_handler_000841e4",
            "code": "\nint signal_handler_000841e4(int signal_number)\n\n{\n  int result;\n  \n  result = _raise_r(_impure_ptr,signal_number);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "signal_handler_000841e4",
                "__sig": "signal_number",
                "iVar1": "result"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841f4": {
            "entrypoint": "0x000841f4",
            "current_name": "handle_process_termination_000841f4",
            "code": "\nvoid handleProcessTermination_000841f4(int *errorFlag,int processID,int terminationSignal)\n\n{\n  errno = 0;\n  _kill(processID,terminationSignal);\n  if ((processID == -1) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000841f4": "handle_process_termination_000841f4",
                "param_1": "errorFlag",
                "param_2": "processID",
                "param_3": "terminationSignal"
            },
            "calling": [
                "kill",
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_data_00084220",
            "code": "\nvoid updateData_00084220(undefined4 dataBuffer,int dataOffset)\n\n{\n  int readResult;\n  \n  readResult = _read_r(dataBuffer,(int)*(short *)(dataOffset + 0xe));\n  if (-1 < readResult) {\n    *(int *)(dataOffset + 0x50) = *(int *)(dataOffset + 0x50) + readResult;\n    return;\n  }\n  *(ushort *)(dataOffset + 0xc) = *(ushort *)(dataOffset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_data_00084220",
                "param_1": "dataBuffer",
                "param_2": "dataOffset",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "update_and_write_data_00084244",
            "code": "\nvoid updateAndWriteData_00084244(undefined4 fileDescriptor,int dataPointer,undefined4 buffer,undefined4 bufferSize)\n\n{\n  ushort dataValue;\n  \n  dataValue = *(ushort *)(dataPointer + 0xc);\n  if ((int)((uint)dataValue << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe),0,2);\n    dataValue = *(ushort *)(dataPointer + 0xc);\n  }\n  *(ushort *)(dataPointer + 0xc) = dataValue & 0xefff;\n  _write_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe),buffer,bufferSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "update_and_write_data_00084244",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "uVar1": "dataValue"
            },
            "calling": [],
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_status_0008427c",
            "code": "\nvoid updateFileStatus_0008427c(undefined4 fileHandle,int buffer)\n\n{\n  int seekResult;\n  ushort fileStatus;\n  \n  seekResult = _lseek_r(fileHandle,(int)*(short *)(buffer + 0xe));\n  if (seekResult == -1) {\n    fileStatus = *(ushort *)(buffer + 0xc) & 0xefff;\n  }\n  else {\n    fileStatus = *(ushort *)(buffer + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(buffer + 0x50) = seekResult;\n  }\n  *(ushort *)(buffer + 0xc) = fileStatus;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_status_0008427c",
                "param_1": "fileHandle",
                "param_2": "buffer",
                "iVar1": "seekResult",
                "uVar2": "fileStatus"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008429c": {
            "entrypoint": "0x0008429c",
            "current_name": "close_file_descriptor_0008429c",
            "code": "\nvoid closeFileDescriptor_0008429c(undefined4 fileDescriptor,int additionalData)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(additionalData + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "fileDescriptor",
                "param_2": "additionalData"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int input_buffer,uint character,undefined4 *state,undefined4 size)\n\n{\n  ushort flags;\n  uint temp;\n  undefined *ptr;\n  int index;\n  \n  if ((input_buffer != 0) && (*(int *)(input_buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = *(ushort *)(state + 3);\n  temp = (uint)flags;\n  state[2] = state[6];\n  if ((-1 < (int)(temp << 0x1c)) || (index = state[4], index == 0)) {\n    index = __swsetup_r(input_buffer,state,flags,temp,size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(state + 3);\n    index = state[4];\n    temp = (uint)flags;\n  }\n  character = character & 0xff;\n  if ((int)(temp << 0x12) < 0) {\n    ptr = (undefined *)*state;\n    index = (int)ptr - index;\n    if (index < (int)state[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    state[0x19] = state[0x19] & 0xffffdfff;\n    ptr = (undefined *)*state;\n    *(ushort *)(state + 3) = flags | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)state[5]) goto LAB_000842d6;\n  }\n  index = _fflush_r(input_buffer,state);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*state;\n  index = 1;\nLAB_000842d8:\n  state[2] = state[2] + -1;\n  *state = ptr + 1;\n  *ptr = (char)character;\n  if (((state[5] == index) ||\n      (((int)((uint)*(ushort *)(state + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = _fflush_r(input_buffer,state), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input_buffer",
                "param_2": "character",
                "param_3": "state",
                "param_4": "size",
                "uVar1": "flags",
                "uVar2": "temp",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__sinit",
                "__swsetup_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "convert_to_locale_encoding_0008434c",
            "code": "\nvoid convertToLocaleEncoding_0008434c(undefined4 *outputBuffer,int inputLength,undefined4 inputChar,undefined4 *errorCode)\n\n{\n  code *wideCharToMultiByte;\n  undefined4 charset;\n  int result;\n  undefined conversionBuffer [12];\n  \n  wideCharToMultiByte = __wctomb;\n  if (inputLength == 0) {\n    charset = __locale_charset();\n    result = (*wideCharToMultiByte)(outputBuffer,conversionBuffer,0,charset,errorCode);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*wideCharToMultiByte)(outputBuffer,inputLength,inputChar,charset,errorCode);\n  }\n  if (result == -1) {\n    *errorCode = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "convert_to_locale_encoding_0008434c",
                "param_1": "outputBuffer",
                "param_2": "inputLength",
                "param_3": "inputChar",
                "param_4": "errorCode",
                "pcVar1": "wideCharToMultiByte",
                "uVar2": "charset",
                "iVar3": "result",
                "auStack_24": "conversionBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "initialize_param_0008439c",
            "code": "\nundefined4 initializeParam_0008439c(undefined4 *param1,undefined *param2,uint param3)\n\n{\n  if (param2 == (undefined *)0x0) {\n    return 0;\n  }\n  if (param3 < 0x100) {\n    *param2 = (char)param3;\n    return 1;\n  }\n  *param1 = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "initialize_param_0008439c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843b8": {
            "entrypoint": "0x000843b8",
            "current_name": "write_and_handle_error_000843b8",
            "code": "\nvoid write_and_handle_error_000843b8(int *error_ptr,int file_descriptor,char *buffer,int count)\n\n{\n  int write_result;\n  \n  errno = 0;\n  write_result = _write(file_descriptor,buffer,count);\n  if ((write_result == -1) && (errno != 0)) {\n    *error_ptr = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843b8": "write_and_handle_error_000843b8",
                "param_1": "error_ptr",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "write_result"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000843e0": {
            "entrypoint": "0x000843e0",
            "current_name": "close_file_and_update_error_000843e0",
            "code": "\nvoid closeFileAndUpdateError_000843e0(int *errorPointer,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorPointer = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000843e0": "close_file_and_update_error_000843e0",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084404": {
            "entrypoint": "0x00084404",
            "current_name": "perform_cleanup_operation_00084404",
            "code": "\nundefined4 performCleanupOperation_00084404(int fileDescriptor,int stream)\n\n{\n  undefined4 result;\n  int status;\n  \n  if (stream != 0) {\n    if ((fileDescriptor != 0) && (*(int *)(fileDescriptor + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n      result = _fflush_r(fileDescriptor,stream);\n      if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(stream + 0x2c))(fileDescriptor,*(undefined4 *)(stream + 0x1c)), status < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n        _free_r(fileDescriptor,*(undefined4 *)(stream + 0x10));\n      }\n      if (*(int *)(stream + 0x30) != 0) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n          _free_r(fileDescriptor);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n      }\n      if (*(int *)(stream + 0x44) != 0) {\n        _free_r(fileDescriptor);\n        *(undefined4 *)(stream + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084404": "perform_cleanup_operation_00084404",
                "param_1": "fileDescriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "status"
            },
            "calling": [
                "fclose"
            ],
            "called": [
                "__sfp_lock_acquire",
                "__sinit",
                "__sfp_lock_release",
                "_fflush_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "close_file_00084484",
            "code": "\nint closeFile_00084484(FILE *file)\n\n{\n  int result;\n  \n  result = _fclose_r(_impure_ptr,file);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084484": "close_file_00084484",
                "__stream": "file",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_fclose_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "get_file_info_00084494",
            "code": "\nvoid get_file_info_00084494(int *error_code,int file_descriptor,stat *file_status)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _fstat(file_descriptor,file_status);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "get_file_info_00084494",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_is_tty_000844bc",
            "code": "\nvoid checkIsTTY_000844bc(int *errorCode,int fileDescriptor)\n\n{\n  int isTTYResult;\n  \n  errno = 0;\n  isTTYResult = _isatty(fileDescriptor);\n  if ((isTTYResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_is_tty_000844bc",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "isTTYResult"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "lseek_and_set_errno_000844e0",
            "code": "\nvoid lseek_and_set_errno_000844e0(int *error_code,int file_descriptor,__off_t offset,int whence)\n\n{\n  __off_t result;\n  \n  errno = 0;\n  result = _lseek(file_descriptor,offset,whence);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "lseek_and_set_errno_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "result"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_data_from_stream_00084508",
            "code": "\nvoid readDataFromStream_00084508(int *errorCode,int streamDescriptor,char *buffer,int bufferSize)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(streamDescriptor,buffer,bufferSize);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_data_from_stream_00084508",
                "param_1": "errorCode",
                "param_2": "streamDescriptor",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "divide_or_modulo_00084530",
            "code": "\nvoid divideOrModulo_00084530(int dividend,int divisor,int remainder,int quotient)\n\n{\n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    divideByZeroError(dividend);\n    return;\n  }\n  divModHelper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084530": "divide_or_modulo_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "__aeabi_idiv0": "divideByZeroError",
                "__gnu_uldivmod_helper": "divModHelper"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int second_parameter,undefined4 constant1,undefined4 constant2,int *output_values)\n\n{\n  uint temporary_value;\n  longlong result;\n  \n  result = __divdi3();\n  result = result * CONCAT44(constant2,constant1);\n  temporary_value = (uint)result;\n  *output_values = input_value - temporary_value;\n  output_values[1] = (second_parameter - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < temporary_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_value",
                "param_2": "second_parameter",
                "param_3": "constant1",
                "param_4": "constant2",
                "param_5": "output_values",
                "uVar1": "temporary_value",
                "lVar2": "result"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_and_store_difference_0008458c",
            "code": "\nvoid calculateAndStoreDifference_0008458c(uint inputValue,int subtractedValue,undefined4 lowerHalfMultiplier,undefined4 upperHalfMultiplier,int *resultArray)\n\n{\n  uint calculationResult;\n  longlong multipliedValue;\n  \n  multipliedValue = __udivdi3();\n  multipliedValue = multipliedValue * CONCAT44(upperHalfMultiplier,lowerHalfMultiplier);\n  calculationResult = (uint)multipliedValue;\n  *resultArray = inputValue - calculationResult;\n  resultArray[1] = (subtractedValue - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(inputValue < calculationResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_and_store_difference_0008458c",
                "param_1": "inputValue",
                "param_2": "subtractedValue",
                "param_3": "lowerHalfMultiplier",
                "param_4": "upperHalfMultiplier",
                "param_5": "resultArray",
                "uVar1": "calculationResult",
                "lVar2": "multipliedValue"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "FUNC_000845bc",
            "code": "\nvoid FUNC_000845bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "FUNC_000845bc"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_and_round_000845c0",
            "code": "\nundefined8 divide_and_round_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong result;\n  uint quotient;\n  uint remainder;\n  uint shift;\n  uint temp;\n  int shift_count;\n  uint temp1;\n  uint temp2;\n  uint is_positive_dividend;\n  uint quotient_part1;\n  uint quotient_part2;\n  uint combined_divisor_high;\n  bool carry_bit;\n  \n  if ((int)dividend_high < 0) {\n    carry_bit = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_bit;\n    is_positive_dividend = 0xffffffff;\n  }\n  else {\n    is_positive_dividend = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_positive_dividend = ~is_positive_dividend;\n    carry_bit = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_bit;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        remainder = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_high = dividend_high << shift_count | remainder;\n      }\n      quotient = divisor >> 0x10;\n      shift = dividend_high / quotient;\n      temp1 = (divisor & 0xffff) * shift;\n      quotient_part1 = dividend >> 0x10 | (dividend_high - quotient * shift) * 0x10000;\n      remainder = shift;\n      if (quotient_part1 <= temp1 && temp1 - quotient_part1 != 0) {\n        carry_bit = CARRY4(quotient_part1,divisor);\n        quotient_part1 = quotient_part1 + divisor;\n        remainder = shift - 1;\n        if ((carry_bit == false) && (quotient_part1 <= temp1 && temp1 - quotient_part1 != 0)) {\n          remainder = shift - 2;\n          quotient_part1 = quotient_part1 + divisor;\n        }\n      }\n      temp2 = (quotient_part1 - temp1) / quotient;\n      shift = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((quotient_part1 - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= shift && shift - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= shift && shift - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        shift = divisor >> 0x10;\n        combined_divisor_high = divisor & 0xffff;\n        remainder = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        remainder = dividend_high >> (0x20U - shift_count & 0xff);\n        shift = divisor >> 0x10;\n        quotient_part1 = remainder / shift;\n        combined_divisor_high = divisor & 0xffff;\n        temp1 = combined_divisor_high * quotient_part1;\n        temp2 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        remainder = temp2 >> 0x10 | (remainder - shift * quotient_part1) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = quotient_part1;\n        if (remainder <= temp1 && temp1 - remainder != 0) {\n          carry_bit = CARRY4(remainder,divisor);\n          remainder = remainder + divisor;\n          quotient = quotient_part1 - 1;\n          if ((carry_bit == false) && (remainder <= temp1 && temp1 - remainder != 0)) {\n            quotient = quotient_part1 - 2;\n            remainder = remainder + divisor;\n          }\n        }\n        temp = (remainder - temp1) / shift;\n        quotient_part1 = combined_divisor_high * temp;\n        dividend_high = temp2 & 0xffff | ((remainder - temp1) - shift * temp) * 0x10000;\n        remainder = temp;\n        if (dividend_high <= quotient_part1 && quotient_part1 - dividend_high != 0) {\n          carry_bit = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          remainder = temp - 1;\n          if ((carry_bit == false) && (dividend_high <= quotient_part1 && quotient_part1 - dividend_high != 0)) {\n            remainder = temp - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - quotient_part1;\n        remainder = remainder | quotient << 0x10;\n      }\n      quotient = dividend_high / shift;\n      quotient_part1 = combined_divisor_high * quotient;\n      temp2 = dividend >> 0x10 | (dividend_high - shift * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= quotient_part1 && quotient_part1 - temp2 != 0) {\n        carry_bit = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((carry_bit == false) && (temp2 <= quotient_part1 && quotient_part1 - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp = (temp2 - quotient_part1) / shift;\n      combined_divisor_high = combined_divisor_high * temp;\n      shift = dividend & 0xffff | ((temp2 - quotient_part1) - shift * temp) * 0x10000;\n      quotient = temp;\n      if (shift <= combined_divisor_high && combined_divisor_high - shift != 0) {\n        quotient = temp - 1;\n        if ((CARRY4(shift,divisor) == false) &&\n           (shift + divisor <= combined_divisor_high && combined_divisor_high - (shift + divisor) != 0)) {\n          quotient = temp - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    remainder = 0;\n    quotient = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_high);\n    if (shift_count == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        remainder = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        remainder = 0;\n      }\n    }\n    else {\n      remainder = 0x20 - shift_count;\n      shift = dividend_high >> (remainder & 0xff);\n      combined_divisor_high = divisor >> (remainder & 0xff) | divisor_high << shift_count;\n      quotient_part1 = combined_divisor_high >> 0x10;\n      quotient = shift / quotient_part1;\n      temp2 = (combined_divisor_high & 0xffff) * quotient;\n      temp1 = dividend_high << shift_count | dividend >> (remainder & 0xff);\n      shift = temp1 >> 0x10 | (shift - quotient_part1 * quotient) * 0x10000;\n      remainder = quotient;\n      if (shift <= temp2 && temp2 - shift != 0) {\n        carry_bit = CARRY4(shift,combined_divisor_high);\n        shift = shift + combined_divisor_high;\n        remainder = quotient - 1;\n        if ((carry_bit == false) && (shift <= temp2 && temp2 - shift != 0)) {\n          remainder = quotient - 2;\n          shift = shift + combined_divisor_high;\n        }\n      }\n      temp = (shift - temp2) / quotient_part1;\n      quotient_part2 = (combined_divisor_high & 0xffff) * temp;\n      shift = temp1 & 0xffff | ((shift - temp2) - quotient_part1 * temp) * 0x10000;\n      quotient = temp;\n      if (shift <= quotient_part2 && quotient_part2 - shift != 0) {\n        carry_bit = CARRY4(shift,combined_divisor_high);\n        shift = shift + combined_divisor_high;\n        quotient = temp - 1;\n        if ((carry_bit == false) && (shift <= quotient_part2 && quotient_part2 - shift != 0)) {\n          quotient = temp - 2;\n          shift = shift + combined_divisor_high;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n      temp1 = (uint)((ulonglong)result >> 0x20);\n      remainder = 0;\n      if ((shift - quotient_part2 < temp1) ||\n         ((shift - quotient_part2 == temp1 && (dividend << shift_count < (uint)result)))) {\n        quotient = quotient - 1;\n        remainder = 0;\n      }\n    }\n  }\n  if (is_positive_dividend != 0) {\n    carry_bit = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carry_bit;\n  }\n  return CONCAT44(remainder,quotient);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_and_round_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "result",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "uVar4": "shift",
                "uVar5": "temp",
                "iVar6": "shift_count",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_positive_dividend",
                "uVar10": "quotient_part1",
                "uVar11": "quotient_part2",
                "uVar12": "combined_divisor_high",
                "bVar13": "carry_bit"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_with_remainder_00084860",
            "code": "\nulonglong divideWithRemainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint result;\n  uint quotientShifted;\n  uint temp1;\n  uint temp2;\n  uint divisorShifted;\n  uint remainder1;\n  uint dividendShifted;\n  uint remainder2;\n  int lzcount;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      lzcount = LZCOUNT(quotient);\n      if (lzcount == 0) {\n        divisor = divisor - quotient;\n        quotientShifted = quotient >> 0x10;\n        temp2 = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << lzcount;\n        dividendShifted = divisor >> (0x20U - lzcount & 0xff);\n        quotientShifted = quotient >> 0x10;\n        remainder2 = dividendShifted / quotientShifted;\n        temp2 = quotient & 0xffff;\n        result = temp2 * remainder2;\n        divisorShifted = dividend >> (0x20U - lzcount & 0xff) | divisor << lzcount;\n        temp1 = divisorShifted >> 0x10 | (dividendShifted - quotientShifted * remainder2) * 0x10000;\n        dividend = dividend << lzcount;\n        dividendShifted = remainder2;\n        if (temp1 <= result && result - temp1 != 0) {\n          carry = carry4(temp1,quotient);\n          temp1 = temp1 + quotient;\n          dividendShifted = remainder2 - 1;\n          if ((carry == false) && (temp1 <= result && result - temp1 != 0)) {\n            dividendShifted = remainder2 - 2;\n            temp1 = temp1 + quotient;\n          }\n        }\n        remainder1 = (temp1 - result) / quotientShifted;\n        remainder2 = temp2 * remainder1;\n        divisor = divisorShifted & 0xffff | ((temp1 - result) - quotientShifted * remainder1) * 0x10000;\n        result = remainder1;\n        if (divisor <= remainder2 && remainder2 - divisor != 0) {\n          carry = carry4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = remainder1 - 1;\n          if ((carry == false) && (divisor <= remainder2 && remainder2 - divisor != 0)) {\n            result = remainder1 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - remainder2;\n        result = result | dividendShifted << 0x10;\n      }\n      remainder2 = divisor / quotientShifted;\n      temp1 = temp2 * remainder2;\n      divisorShifted = dividend >> 0x10 | (divisor - quotientShifted * remainder2) * 0x10000;\n      dividendShifted = remainder2;\n      if (divisorShifted <= temp1 && temp1 - divisorShifted != 0) {\n        carry = carry4(divisorShifted,quotient);\n        divisorShifted = divisorShifted + quotient;\n        dividendShifted = remainder2 - 1;\n        if ((carry == false) && (divisorShifted <= temp1 && temp1 - divisorShifted != 0)) {\n          dividendShifted = remainder2 - 2;\n          divisorShifted = divisorShifted + quotient;\n        }\n      }\n      remainder2 = (divisorShifted - temp1) / quotientShifted;\n      temp2 = temp2 * remainder2;\n      divisorShifted = dividend & 0xffff | ((divisorShifted - temp1) - quotientShifted * remainder2) * 0x10000;\n      quotientShifted = remainder2;\n      if (divisorShifted <= temp2 && temp2 - divisorShifted != 0) {\n        quotientShifted = remainder2 - 1;\n        if ((carry4(divisorShifted,quotient) == false) &&\n           (divisorShifted + quotient <= temp2 && temp2 - (divisorShifted + quotient) != 0)) {\n          quotientShifted = remainder2 - 2;\n        }\n      }\n      return concat44(result,quotientShifted | dividendShifted << 0x10);\n    }\n    lzcount = LZCOUNT(quotient);\n    if (lzcount != 0) {\n      dividendShifted = dividend >> (0x20U - lzcount & 0xff);\n      quotient = quotient << lzcount;\n      dividend = dividend << lzcount;\n      divisor = dividendShifted | divisor << lzcount;\n    }\n    result = quotient >> 0x10;\n    quotientShifted = divisor / result;\n    temp2 = (quotient & 0xffff) * quotientShifted;\n    remainder2 = dividend >> 0x10 | (divisor - result * quotientShifted) * 0x10000;\n    dividendShifted = quotientShifted;\n    if (remainder2 <= temp2 && temp2 - remainder2 != 0) {\n      carry = carry4(remainder2,quotient);\n      remainder2 = remainder2 + quotient;\n      dividendShifted = quotientShifted - 1;\n      if ((carry == false) && (remainder2 <= temp2 && temp2 - remainder2 != 0)) {\n        dividendShifted = quotientShifted - 2;\n        remainder2 = remainder2 + quotient;\n      }\n    }\n    divisorShifted = (remainder2 - temp2) / result;\n    quotientShifted = (quotient & 0xffff) * divisorShifted;\n    temp2 = dividend & 0xffff | ((remainder2 - temp2) - result * divisorShifted) * 0x10000;\n    result = divisorShifted;\n    if (temp2 <= quotientShifted && quotientShifted - temp2 != 0) {\n      result = divisorShifted - 1;\n      if ((carry4(temp2,quotient) == false) &&\n         (temp2 + quotient <= quotientShifted && quotientShifted - (temp2 + quotient) != 0)) {\n        result = divisorShifted - 2;\n      }\n    }\n    result = result | dividendShifted << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    lzcount = LZCOUNT(remainder);\n    if (lzcount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - lzcount;\n      dividendShifted = divisor >> (result & 0xff);\n      quotientShifted = remainder << lzcount | quotient >> (result & 0xff);\n      temp2 = quotientShifted >> 0x10;\n      temp1 = dividendShifted / temp2;\n      remainder2 = (quotientShifted & 0xffff) * temp1;\n      divisorShifted = dividend >> (result & 0xff) | divisor << lzcount;\n      result = divisorShifted >> 0x10 | (dividendShifted - temp2 * temp1) * 0x10000;\n      dividendShifted = temp1;\n      if (result <= remainder2 && remainder2 - result != 0) {\n        carry = carry4(result,quotientShifted);\n        result = result + quotientShifted;\n        dividendShifted = temp1 - 1;\n        if ((carry == false) && (result <= remainder2 && remainder2 - result != 0)) {\n          dividendShifted = temp1 - 2;\n          result = result + quotientShifted;\n        }\n      }\n      temp1 = (result - remainder2) / temp2;\n      remainder1 = (quotientShifted & 0xffff) * temp1;\n      temp2 = divisorShifted & 0xffff | ((result - remainder2) - temp2 * temp1) * 0x10000;\n      result = temp1;\n      if (temp2 <= remainder1 && remainder1 - temp2 != 0) {\n        carry = carry4(temp2,quotientShifted);\n        temp2 = temp2 + quotientShifted;\n        result = temp1 - 1;\n        if ((carry == false) && (temp2 <= remainder1 && remainder1 - temp2 != 0)) {\n          result = temp1 - 2;\n          temp2 = temp2 + quotientShifted;\n        }\n      }\n      result = result | dividendShifted << 0x10;\n      temp = (ulonglong)result * (ulonglong)(quotient << lzcount);\n      dividendShifted = (uint)((ulonglong)temp >> 0x20);\n      if ((temp2 - remainder1 < dividendShifted) || ((temp2 - remainder1 == dividendShifted && (dividend << lzcount < (uint)temp)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_with_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "result",
                "uVar3": "quotientShifted",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "divisorShifted",
                "uVar7": "remainder1",
                "uVar8": "dividendShifted",
                "uVar9": "remainder2",
                "iVar10": "lzcount",
                "bVar11": "carry",
                "CARRY4": "carry4",
                "CONCAT44": "concat44"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00085860": {
            "entrypoint": "0x00085860",
            "current_name": "FUNC_00085860",
            "code": "\nvoid FUNC_00085860(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085860": "FUNC_00085860"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_20070000": {
            "entrypoint": "0x20070000",
            "current_name": "disable_ir_qinterrupts_and_wait_until_flag_set_20070000",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableIRQinterruptsAndWaitUntilFlagSet_20070000(void)\n\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_20070000": "disable_ir_qinterrupts_and_wait_until_flag_set_20070000"
            },
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 120472,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080148",
            "FUN_0008014c",
            "FUN_00080164",
            "FUN_00080184",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_00080558",
            "FUN_00080568",
            "FUN_00080578",
            "FUN_00080588",
            "FUN_00080598",
            "FUN_000805a8",
            "FUN_000805e8",
            "FUN_000806a0",
            "FUN_000806ac",
            "FUN_000806f8",
            "FUN_0008073c",
            "FUN_00080750",
            "FUN_0008075c",
            "FUN_00080768",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809b4",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080aec",
            "FUN_00080b2c",
            "FUN_00080b64",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080d70",
            "FUN_00080d80",
            "FUN_00080db8",
            "FUN_00080df0",
            "FUN_00080e28",
            "FUN_00080e60",
            "FUN_00080e62",
            "FUN_00080e66",
            "FUN_00080e6a",
            "FUN_00080e80",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_00080ea4",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f04",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_00081084",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_00081176",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081244",
            "FUN_00081248",
            "FUN_0008125a",
            "FUN_00081276",
            "FUN_000812a0",
            "FUN_000812b8",
            "FUN_0008130c",
            "FUN_00081348",
            "FUN_0008136c",
            "FUN_000813dc",
            "FUN_000813e4",
            "FUN_0008142e",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816c8",
            "FUN_000816d8",
            "FUN_000816e4",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081734",
            "FUN_0008173c",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_000826e8",
            "FUN_000827fc",
            "FUN_00082814",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_00083630",
            "FUN_000836ec",
            "FUN_000836fc",
            "FUN_00083708",
            "FUN_00083850",
            "FUN_0008387c",
            "FUN_00083888",
            "FUN_00083984",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00083fbc",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_0008418c",
            "FUN_000841e4",
            "FUN_000841f4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_0008429c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_000843b8",
            "FUN_000843e0",
            "FUN_00084404",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860",
            "FUN_20070000"
        ]
    ],
    "locked_functions": []
}