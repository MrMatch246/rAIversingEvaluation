{
    "functions": {
        "FUN_000809b4": {
            "renaming": {
                "FUN_000809b4": "set_value_at_offset_000809b4",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(base_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(base_address + 96)"
            },
            "code": "void set_value_at_offset_000809b4(int base_address, int value, int offset)\n{\n  if (offset != 0) {\n    *(int *)(base_address + 100) = value;\n    return;\n  }\n  *(int *)(base_address + 96) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809b4",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_000809b4"
        },
        "FUN_00081560": {
            "renaming": {
                "String::operator_": "copy",
                "this": "this_pointer",
                "rval": "other_string",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_00081560": "String::copy_00081560"
            },
            "code": "String* __thiscall String::copy_00081560(String* this_pointer, String* other_string) {\n  if (this_pointer != other_string) {\n    move(this_pointer, other_string);\n  }\n  return this_pointer;\n}",
            "called": [
                "move"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "String::copy_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00080e6a": {
            "renaming": {
                "FUN_00080e6a": "resetTimeTickIfFalse_00080e6a",
                "iVar1": "isFalse",
                "__false": "__isFalse",
                "tickReset": "resetTick",
                "TimeTick_Increment": "incrementTimeTick"
            },
            "code": "void resetTimeTickIfFalse_00080e6a(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "__false",
                "tickReset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e6a",
            "calling": [],
            "imported": false,
            "current_name": "resetTimeTickIfFalse_00080e6a"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "count_bits_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "max_count",
                "iVar1": "count"
            },
            "code": "int count_bits_00081684(uint *data, uint mask, uint value, int max_count) {\n  int count = 0;\n  while (max_count > 0) {\n    if ((*data & mask) != value) {\n      while (max_count > 0) {\n        if ((*data & mask) == value) {\n          return count;\n        }\n        max_count--;\n      }\n      return 0;\n    }\n    max_count--;\n    count++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "pulseIn"
            ],
            "imported": false,
            "current_name": "count_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr",
                "puVar4": "source_ptr",
                "uVar5": "current_int",
                "uVar6": "current_int",
                "puVar7": "destination_ptr",
                "puVar8": "destination_ptr",
                "pcVar9": "destination",
                "bVar10": "is_null"
            },
            "code": "char* copy_string_000825cc(char* destination, char* source)\n{\n  char current_char;\n  unsigned short current_short;\n  unsigned int* source_ptr;\n  unsigned int* destination_ptr;\n  unsigned int current_int;\n  bool is_null;\n  \n  destination_ptr = (unsigned int*)destination;\n  source_ptr = (unsigned int*)source;\n  \n  if ((((unsigned int)destination ^ (unsigned int)source) & 3) != 0)\n  {\n    do\n    {\n      current_char = *source;\n      *destination = current_char;\n      source++;\n      destination++;\n    } while (current_char != '\\0');\n    return destination;\n  }\n  \n  if (((unsigned int)source & 3) != 0)\n  {\n    source_ptr = (unsigned int*)(source + 1);\n    destination_ptr = (unsigned int*)(destination + 1);\n    current_char = *source;\n    *destination = current_char;\n    is_null = (current_char == '\\0');\n    if (is_null)\n    {\n      return destination;\n    }\n  }\n  \n  if (((unsigned int)source_ptr & 2) != 0)\n  {\n    source_ptr = (unsigned int*)((int)source_ptr + 2);\n    current_short = *(unsigned short*)source_ptr;\n    is_null = ((current_short & 0xff) == 0);\n    if (is_null)\n    {\n      *(char*)destination_ptr = (char)current_short;\n    }\n    else\n    {\n      *(unsigned short*)destination_ptr = current_short;\n      is_null = ((current_short & 0xff00) == 0);\n      destination_ptr = (unsigned int*)((int)destination_ptr + 2);\n    }\n    if (is_null)\n    {\n      return destination;\n    }\n  }\n  \n  current_int = *(unsigned int*)source_ptr;\n  source_ptr = (unsigned int*)((int)source_ptr + 4);\n  \n  if (((unsigned int)source & 4) != 0)\n  {\n    if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0)\n    {\n      goto LAB_00082630;\n    }\n    *destination_ptr = current_int;\n    source_ptr = (unsigned int*)((int)source + 8);\n    current_int = *(unsigned int*)((int)source + 4);\n    destination_ptr++;\n  }\n  \n  while (true)\n  {\n    if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0)\n    {\n      break;\n    }\n    *destination_ptr = current_int;\n    current_int = *source_ptr;\n    source_ptr++;\n    destination_ptr++;\n    if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0)\n    {\n      break;\n    }\n    *destination_ptr = current_int;\n    current_int = *source_ptr;\n    source_ptr++;\n    destination_ptr++;\n  }\n  \nLAB_00082630:\n  do\n  {\n    *(char*)destination_ptr = (char)current_int;\n    current_int = current_int >> 8 | current_int << 0x18;\n    destination_ptr = (unsigned int*)((int)destination_ptr + 1);\n  } while ((current_int & 0xff) != 0);\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "concat",
                "copy",
                "move"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00083984": {
            "renaming": {
                "FUN_00083984": "execute_global_destructors_00083984",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_array"
            },
            "code": "void execute_global_destructors_00083984(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_000839b0 - (int)PTR___do_global_dtors_aux_fini_array_entry_000839ac >> 2;\n  if (num_destructors != 0) {\n    code** destructor_array = (code**)(PTR___do_global_dtors_aux_fini_array_entry_000839ac + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_array--;\n      (**destructor_array)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083984",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083984"
        },
        "FUN_00080598": {
            "renaming": {
                "FUN_00080598": "move_servo_to_position_00080598",
                "_timer5": "timer",
                "DAT_000805a4": "desired_position"
            },
            "code": "void move_servo_to_position_00080598(void)\\n{\\n  Servo_Handler(timer=5, position=DAT_000805a4, stop=\"\\0\");\\n  return;\\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080598",
            "calling": [],
            "imported": false,
            "current_name": "move_servo_to_position_00080598"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "int set_bit_00080aa8(uint bit_position){\n                      uint bit_mask;\n                      if (bit_position < 45) {\n                        if (bit_position < 32) {\n                          bit_mask = 1 << (bit_position & 0xff);\n                          if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n                            *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n                          }\n                        }\n                        else {\n                          bit_mask = 1 << (bit_position - 0x20 & 0xff);\n                          if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n                            *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n                          }\n                        }\n                        return 0;\n                      }\n                      return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "_initISR",
                "init",
                "init",
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_1": "flag",
                "param_2": "object_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "DAT_00080134": "global_flag",
                "PTR_object_7862_0008013c": "global_object_ptr",
                "PTR__etext_00080140": "global_etext_ptr",
                "DAT_00080144": "function_ptr"
            },
            "code": "void execute_function_if_available_00080118(int flag, void* object_ptr, int arg1, int arg2)\n{\n  if (flag != 0) {\n    object_ptr = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, object_ptr, arg1, DAT_00080144, arg2);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "heap_start",
                "param_2": "allocation_size",
                "puVar1": "malloc_pointer",
                "puVar2": "malloc_info_pointer",
                "iVar3": "sbrk_result",
                "uVar4": "heap_limit",
                "iVar5": "space_needed"
            },
            "code": "int allocate_memory_00083a74(void* heap_start, int allocation_size) {\n  void* malloc_pointer = PTR___malloc_av__00083b04;\n  __malloc_lock();\n  uint32_t heap_limit = *(uint32_t*)(*(int*)(malloc_pointer + 8) + 4) & 0xfffffffc;\n  int32_t space_needed = ((heap_limit - allocation_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < space_needed) {\n    int32_t sbrk_result = _sbrk_r(heap_start,0);\n    if (sbrk_result == *(int*)(malloc_pointer + 8) + heap_limit) {\n      sbrk_result = _sbrk_r(heap_start,-space_needed);\n      void* malloc_info_pointer = PTR___malloc_current_mallinfo_00083b08;\n      if (sbrk_result != -1) {\n        int32_t malloc_info = *(int*)malloc_info_pointer;\n        *(uint32_t*)(*(int*)(malloc_pointer + 8) + 4) = heap_limit - space_needed | 1;\n        *(int*)malloc_info_pointer = malloc_info - space_needed;\n        __malloc_unlock(heap_start);\n        return 1;\n      }\n      sbrk_result = _sbrk_r(heap_start,0);\n      malloc_info_pointer = PTR___malloc_current_mallinfo_00083b08;\n      uint32_t new_heap_limit = sbrk_result - *(int*)(malloc_pointer + 8);\n      if (0xf < (int)new_heap_limit) {\n        int32_t sbrk_base = *(int*)PTR___malloc_sbrk_base_00083b0c;\n        *(uint32_t*)(*(int*)(malloc_pointer + 8) + 4) = new_heap_limit | 1;\n        *(int*)malloc_info_pointer = sbrk_result - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(heap_start);\n  return 0;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "return_zero_00080e80"
            },
            "code": "int return_zero_00080e80(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "return_zero_00080e80"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_param_value_to_max_00080d62",
                "param_1": "param_value"
            },
            "code": "void set_param_value_to_max_00080d62(int param_value) {\n  *(undefined4 *)(param_value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_value_to_max_00080d62"
        },
        "FUN_00080e84": {
            "renaming": {
                "FUN_00080e84": "wait_forever_00080e84"
            },
            "code": "void wait_forever_00080e84(void)\n{\n  while(true){}\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e84",
            "calling": [
                "PendSV_Handler",
                "SVC_Handler",
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e84"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6::FUN_000814f6": "initialize_string",
                "cstr": "input_string",
                "length": "string_length",
                "len": "length",
                "FUN_000814f6": "initialize_string_000814f6"
            },
            "code": "initialize_string_000814f6 * __thiscall initialize_string_000814f6(initialize_string_000814f6 *this,char *input_string)\n{\n  size_t string_length;\n  this->buffer = (char *)0x0;\n  this->capacity = 0;\n  this->length = 0;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    copy(this,input_string,string_length);\n  }\n  return this;\n}",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "_GLOBAL__sub_I_steering",
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "initialize_string_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "incr": "size",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory"
            },
            "code": "caddr_t allocate_memory_00080e88(int size)\n{\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_00080e9c;\n  if (*(int *)PTR_heap_00080e9c == 0) {\n    *(undefined **)PTR_heap_00080e9c = PTR__ebss_00080ea0;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + size;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "register_exit_function_if_not_registered_000836d8",
                "DAT_000836e4": "exit_function_registered",
                "DAT_000836e8": "exit_function"
            },
            "code": "void register_exit_function_if_not_registered_000836d8(void)\n{\n  if (DAT_000836e4 != 0) {\n    atexit(DAT_000836e8);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "register_exit_function_if_not_registered_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "sendData_000812b8",
                "this": "uart",
                "uc_data": "data",
                "pRVar1": "tx_buffer",
                "uVar2": "status"
            },
            "code": "size_t __thiscall sendData_000812b8(UARTClass *uart, uint8_t data)\n{\n  RingBuffer *tx_buffer;\n  uint status;\n  tx_buffer = uart->_tx_buffer;\n  status = uart->_pUart->UART_SR << 30;\n  if ((int)status < 0 && tx_buffer->_iTail == tx_buffer->_iHead) {\n    uart->_pUart->UART_THR = (uint)data;\n  }\n  else {\n    uint next_head = (tx_buffer->_iHead + 1) & 0x7f;\n    while (tx_buffer->_iTail == next_head);\n    tx_buffer->_aucBuffer[tx_buffer->_iHead] = data;\n    tx_buffer->_iHead = next_head;\n    uart->_pUart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "sendData_000812b8"
        },
        "FUN_00081570": {
            "renaming": {
                "String::FUN_00081570": "reserve_and_append_string",
                "this": "string",
                "cstr": "new_string",
                "length": "new_string_length",
                "size": "new_length",
                "uVar1": "success",
                "FUN_00081570": "reserve_and_append_string_00081570"
            },
            "code": "uchar reserve_and_append_string_00081570(String *string, char *new_string, uint new_string_length)\n{\n  uchar success;\n  uint new_length;\n  \n  if (new_string == NULL) {\n    return 0;\n  }\n  if (new_string_length != 0) {\n    new_length = string->length + new_string_length;\n    success = reserve(string, new_length);\n    if (success == 0) {\n      return 0;\n    }\n    strcpy(string->buffer + string->length, new_string);\n    string->length = new_length;\n  }\n  return 1;\n}",
            "called": [
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "concat"
            ],
            "imported": false,
            "current_name": "reserve_and_append_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configureTimer_000803fc",
                "tc": "timer",
                "channel": "channel",
                "id": "peripheralId",
                "irqn": "interruptNumber",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "TC_Configure": "configureTimerMode",
                "TC_SetRA": "setTimerRAValue",
                "DAT_00080448": "interruptMaskAddress",
                "TC_IER": "interruptEnableRegister",
                "TC_Start": "startTimer"
            },
            "code": "void configureTimer_000803fc(Tc *timer, uint32_t channel, uint32_t peripheralId, IRQn_Type interruptNumber)\n{\n  pmc_enable_periph_clk(peripheralId);\n  TC_Configure(timer, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC | TC_CMR_TCCLKS_TIMER_CLOCK1);\n  TC_SetRA(timer, channel, 2621);\n  uint32_t interruptMask = 1 << (interruptNumber % 32);\n  *(int *)(DAT_00080448 + ((uint)(int)interruptNumber >> 5) * 4) = interruptMask;\n  timer->TC_CHANNEL[channel].TC_IER = TC_IER_CPCS;\n  TC_Start(timer, channel);\n  return;\n}",
            "called": [
                "pmc_enable_periph_clk",
                "TC_SetRA",
                "TC_Configure",
                "TC_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "configureTimer_000803fc"
        },
        "FUN_00083630": {
            "renaming": {
                "FUN_00083630": "add_to_buffer_00083630",
                "param_1": "type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_size",
                "iVar3": "global_ptr",
                "uVar4": "bit_mask"
            },
            "code": "uint32_t add_to_buffer_00083630(int type, uint32_t data1, uint32_t data2, uint32_t data3)\n{\n  uint32_t *buffer_ptr;\n  uint32_t buffer_size;\n  uint32_t buffer_index;\n  uint32_t bit_mask;\n  int global_ptr = *(int *)PTR__global_impure_ptr_000836d0;\n  buffer_ptr = *(uint32_t **)(global_ptr + 0x148);\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(global_ptr + 0x14c);\n    *(uint32_t **)(global_ptr + 0x148) = buffer_ptr;\n  }\n  buffer_size = buffer_ptr[1];\n  if (buffer_size > 31) {\n    if (DAT_000836d4 != 0) {\n      buffer_ptr = (uint32_t *)malloc(400);\n      if (buffer_ptr != (uint32_t *)0x0) {\n        *buffer_ptr = *(uint32_t *)(global_ptr + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_size = 0;\n        *(uint32_t **)(global_ptr + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n        goto LAB_00083686;\n      }\n    }\n    return 0xffffffff;\n  }\nLAB_00083686:\n  if (type != 0) {\n    bit_mask = 1 << (buffer_size & 0xff);\n    buffer_ptr[buffer_size + 0x22] = data2;\n    buffer_ptr[0x62] = buffer_ptr[0x62] | bit_mask;\n    buffer_ptr[buffer_size + 0x42] = data3;\n    if (type == 2) {\n      buffer_ptr[99] = bit_mask | buffer_ptr[99];\n    }\n  }\n  buffer_ptr[1] = buffer_size + 1;\n  buffer_ptr[buffer_size + 2] = data1;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083630",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083630"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "readUntil_00081214",
                "this": "stream",
                "terminator": "terminator",
                "iVar1": "character",
                "__return_storage_ptr__": "__return_storage_ptr__"
            },
            "code": "String* __thiscall readUntil_00081214(String* __return_storage_ptr__, Stream* stream, char terminator)\n{\n  int character = 0;\n  String::String(__return_storage_ptr__, PTR_DAT_00081240);\n  while (true) {\n    character = timedRead(stream);\n    if ((character < 0) || (character == terminator)) {\n      break;\n    }\n    String::concat(__return_storage_ptr__, (char)character);\n  }\n  return __return_storage_ptr__;\n}",
            "called": [
                "timedRead",
                "String",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readUntil_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "memory",
                "param_2": "byte_value",
                "param_3": "memory_size",
                "*param_1": "*memory",
                "*param_2": "*byte_value"
            },
            "code": "int write_byte_to_memory_0008439c(uint8_t *memory, uint8_t byte_value, uint memory_size) {\n  if (memory == NULL) {\n    return 0;\n  }\n  if (memory_size < 256) {\n    *memory = byte_value;\n    return 1;\n  }\n  *memory = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "readjust_file_pointer_0008427c",
                "param_1": "file_descriptor",
                "param_2": "header_address",
                "iVar1": "file_offset",
                "uVar2": "flag"
            },
            "code": "void readjust_file_pointer_0008427c(int file_descriptor, int* header_address)\n{\n  int file_offset = _lseek_r(file_descriptor, (int)*(short *)(header_address + 0xe));\n  ushort flag;\n  if (file_offset == -1) {\n    flag = *(ushort *)(header_address + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(header_address + 0xc) | 0x1000;\n    *(int *)(header_address + 0x50) = file_offset;\n  }\n  *(ushort *)(header_address + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "readjust_file_pointer_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "device_address",
                "param_2": "operation_type",
                "param_3": "new_value",
                "uVar1": "current_value"
            },
            "code": "void update_parameter_000809be(uint32_t device_address, uint32_t operation_type, uint32_t new_value) {\n  uint32_t current_value = *(uint32_t *)(device_address + 0x70);\n  switch(operation_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      current_value = current_value & ~new_value;\n      break;\n    case 2:\n      current_value = current_value | new_value;\n      break;\n    default:\n      *(uint32_t *)(device_address + 4) = new_value;\n      return;\n  }\n  *(uint32_t *)(device_address + 0x70) = current_value;\n  *(uint32_t *)(device_address + 0x44) = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_parameter_000809be"
        },
        "FUN_00080d70": {
            "renaming": {
                "FUN_00080d70": "invoke_interrupt_handler_if_registered_00080d70",
                "PTR_gpf_isr_00080d7c": "interrupt_handler_ptr"
            },
            "code": "void invoke_interrupt_handler_if_registered_00080d70(void)\n{\n  code** PTR_gpf_isr_00080d7c = *(code**)(PTR_gpf_isr_00080d7c);\n  if (PTR_gpf_isr_00080d7c != (code*)0x0) {\n    (*PTR_gpf_isr_00080d7c)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d70",
            "calling": [],
            "imported": false,
            "current_name": "invoke_interrupt_handler_if_registered_00080d70"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_of_character_000840f8",
                "__s": "string",
                "__c": "character",
                "__n": "length",
                "puVar1": "end_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "current_byte",
                "pbVar5": "current_byte_ptr",
                "pbVar6": "end_byte_ptr",
                "uVar7": "byte_mask",
                "bVar8": "found"
            },
            "code": "void * find_first_occurrence_of_character_000840f8(void *string, int character, size_t length) {\n  uint *current_word;\n  uint *end_word;\n  uint current_byte;\n  uint character_mask;\n  byte *current_byte_ptr;\n  byte *end_byte_ptr;\n  uint byte_mask;\n  bool found;\n  \n  character_mask = character & 0xff;\n  if (((uint)string & 3) == 0) {\n    current_word = (uint *)string;\n    end_word = (uint *)(length & ~3) + current_word;\n    byte_mask = character_mask | (character_mask << 8) | (character_mask << 16) | (character_mask << 24);\n    while (current_word < end_word) {\n      current_byte = *current_word ^ byte_mask;\n      if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) {\n        break;\n      }\n      current_word++;\n    }\n    current_byte_ptr = (byte *)current_word;\n    end_byte_ptr = (byte *)end_word;\n    found = (current_byte_ptr != end_byte_ptr) && (*current_byte_ptr == character_mask);\n    if (!found) {\n      current_byte_ptr = NULL;\n    }\n  }\n  else if (length == 0) {\n    current_byte_ptr = NULL;\n  }\n  else {\n    current_byte_ptr = (byte *)string;\n    end_byte_ptr = current_byte_ptr + length;\n    if (*current_byte_ptr != character_mask) {\n      current_byte_ptr++;\n      while ((current_byte_ptr & 3) != 0) {\n        if (current_byte_ptr == end_byte_ptr) {\n          current_byte_ptr = NULL;\n          goto end;\n        }\n        if (*current_byte_ptr == character_mask) {\n          goto found;\n        }\n        current_byte_ptr++;\n      }\n      end_word = (uint *)(length & ~3) + (uint *)current_byte_ptr;\n      byte_mask = character_mask | (character_mask << 8) | (character_mask << 16) | (character_mask << 24);\n      while (current_word < end_word) {\n        current_byte = *current_word ^ byte_mask;\n        if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) {\n          break;\n        }\n        current_word++;\n      }\n      current_byte_ptr = (byte *)current_word;\n      found = (current_byte_ptr != end_byte_ptr) && (*current_byte_ptr == character_mask);\n      if (!found) {\n        current_byte_ptr = NULL;\n      }\n    }\n    else {\n      found:\n      // Do nothing\n    }\n  }\n  end:\n  return current_byte_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_character_000840f8"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "receive_and_transmit_data_000813e4",
                "this": "uart_instance",
                "pRVar1": "buffer_pointer",
                "RVar2": "status_register",
                "_pUart": "uart_module",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "_iTail": "tail_index",
                "_iHead": "head_index",
                "_aucBuffer": "buffer_array"
            },
            "code": "void __thiscall receive_and_transmit_data_000813e4(UARTClass *uart_instance) {\n  RingBuffer *rx_buffer = uart_instance->_rx_buffer;\n  RingBuffer *tx_buffer = uart_instance->_tx_buffer;\n  RoReg status_register = uart_instance->_pUart->UART_SR;\n\n  if ((int)(status_register << 0x1f) < 0) {\n    uint8_t received_char = (uint8_t)uart_instance->_pUart->UART_RHR;\n    RingBuffer::store_char(rx_buffer, received_char);\n  }\n\n  if ((int)(status_register << 0x1e) < 0) {\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uint8_t char_to_transmit = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      uart_instance->_pUart->UART_THR = char_to_transmit;\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n    }\n    else {\n      uart_instance->_pUart->UART_IDR = 2;\n    }\n  }\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "USART3_Handler",
                "USART0_Handler",
                "USART1_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_and_transmit_data_000813e4"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "memchr",
                "strlen",
                "__sbprintf",
                "__aeabi_uldivmod",
                "__sprint_r.part.0",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "fiprintf",
                "iprintf",
                "__sbprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "memcpy_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dst_byte",
                "puVar2": "dst_dword",
                "puVar3": "aligned_dst",
                "puVar4": "src_byte",
                "puVar5": "src_dword",
                "puVar6": "dst_byte_end",
                "uVar7": "num_dwords",
                "uVar8": "bytes_to_align",
                "bVar9": "loop_condition"
            },
            "code": "void* memcpy_00081d48(void* destination, const void* source, size_t num_bytes)\n{\n  uint8_t* dst = (uint8_t*)destination;\n  const uint8_t* src = (const uint8_t*)source;\n\n  if ((((uintptr_t)src | (uintptr_t)dst) & 3) != 0) {\n    if (num_bytes < 8) {\n      while (num_bytes--) {\n        *dst++ = *src++;\n      }\n      return destination;\n    }\n    if ((((uintptr_t)src & 3) != 0) && (((uintptr_t)dst & 3) != 0)) {\n      uint32_t uVar8 = 4 - ((uintptr_t)dst & 3);\n      num_bytes -= uVar8;\n      if (uVar8 & 1) {\n        *(uint8_t*)dst++ = *(const uint8_t*)src++;\n      }\n      if (uVar8 & 2) {\n        *(uint16_t*)dst = *(const uint16_t*)src;\n        dst += 2;\n        src += 2;\n      }\n      uint32_t* aligned_dst = (uint32_t*)dst;\n      const uint32_t* aligned_src = (const uint32_t*)src;\n      while (num_bytes >= 16) {\n        aligned_dst[0] = aligned_src[0];\n        aligned_dst[1] = aligned_src[1];\n        aligned_dst[2] = aligned_src[2];\n        aligned_dst[3] = aligned_src[3];\n        aligned_dst[4] = aligned_src[4];\n        aligned_dst[5] = aligned_src[5];\n        aligned_dst[6] = aligned_src[6];\n        aligned_dst[7] = aligned_src[7];\n        aligned_dst += 8;\n        aligned_src += 8;\n        num_bytes -= 16;\n      }\n      dst = (uint8_t*)aligned_dst;\n      src = (const uint8_t*)aligned_src;\n    }\n  }\n  while (num_bytes >= 16) {\n    *(uint32_t*)dst = *(const uint32_t*)src;\n    *(uint32_t*)(dst + 4) = *(const uint32_t*)(src + 4);\n    *(uint32_t*)(dst + 8) = *(const uint32_t*)(src + 8);\n    *(uint32_t*)(dst + 12) = *(const uint32_t*)(src + 12);\n    dst += 16;\n    src += 16;\n    num_bytes -= 16;\n  }\n  while (num_bytes--) {\n    *dst++ = *src++;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "memcpy_00081d48"
        },
        "FUN_00083fbc": {
            "renaming": {
                "FUN_00083fbc": "get_valid_items_count_00083fbc",
                "param_1": "item_count",
                "param_2": "item_validator",
                "uVar1": "is_valid",
                "iVar2": "item_data_ptr",
                "iVar3": "item_data_count",
                "uVar4": "valid_items_count",
                "piVar5": "item_ptr"
            },
            "code": "uint get_valid_items_count_00083fbc(int item_count, code* item_validator) {\n  uint valid_items_count = 0;\n  int* item_ptr = (int*)(item_count + 0x2e0);\n  if (item_ptr != (int*)0x0) {\n    do {\n      int item_data_ptr = item_ptr[2];\n      int item_data_count = item_ptr[1] - 1;\n      if (item_data_count >= 0) {\n        do {\n          item_data_count--;\n          ushort item_type = *(ushort*)(item_data_ptr + 0xc);\n          short item_value = *(short*)(item_data_ptr + 0xe);\n          if (item_type > 1 && item_value != -1) {\n            uint is_valid = (*item_validator)(item_data_ptr);\n            valid_items_count |= is_valid;\n          }\n          item_data_ptr += 0x68;\n        } while (item_data_count != -1);\n      }\n      item_ptr = (int*)*item_ptr;\n    } while (item_ptr != (int*)0x0);\n    return valid_items_count;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083fbc",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "get_valid_items_count_00083fbc"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "param_1": "status",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_return_code"
            },
            "code": "void get_file_status_00084494(int *status,int file_descriptor,stat *file_stats)\n{\n  undefined *errno_ptr;\n  int fstat_return_code;\n  errno_ptr = PTR_errno_000844b8;\n  *(undefined4 *)PTR_errno_000844b8 = 0;\n  fstat_return_code = _fstat(file_descriptor,file_stats);\n  if ((fstat_return_code == -1) && (*(int *)errno_ptr != 0)) {\n    *status = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_00084494"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "allocate_memory_00084018",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "file_mode",
                "iVar2": "file_status",
                "iVar3": "allocated_memory",
                "uVar4": "file_mode_uint",
                "bVar5": "is_executable",
                "auStack_54": "null_pointer",
                "local_50": "local_variable"
            },
            "code": "void allocate_memory_00084018(int file_descriptor, int *memory_block){\n  ushort file_mode = *(ushort *)(memory_block + 3);\n  uint file_mode_uint = (uint)file_mode;\n  if ((int)(file_mode_uint << 0x1e) < 0) {\n    *memory_block = (int)memory_block + 0x43;\n    memory_block[4] = (int)memory_block + 0x43;\n    memory_block[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_block + 0xe)) {\n    int file_status = _fstat_r(file_descriptor, *(short *)((int)memory_block + 0xe), NULL);\n    if (-1 < file_status) {\n      bool is_executable = (file_mode_uint & 0xf000) == 0x2000;\n      if (((file_mode_uint & 0xf000) == 0x8000) && (memory_block[10] == file_status)) {\n        int block_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x400;\n        memory_block[0x13] = 0x400;\n      }\n      else {\n        int block_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    file_mode = *(ushort *)(memory_block + 3);\n    file_mode_uint = (uint)file_mode;\n  }\n  *(ushort *)(memory_block + 3) = file_mode | 0x800;\n  int block_size = (file_mode_uint & 0x80) == 0 ? 0x400 : 0x40;\n  bool is_executable = false;\nLAB_00084074:\n  int *allocated_memory = _malloc_r(file_descriptor, block_size);\n  file_mode = *(ushort *)(memory_block + 3);\n  if (allocated_memory == 0) {\n    if (-1 < (int)((uint)file_mode << 0x16)) {\n      *(ushort *)(memory_block + 3) = file_mode | 2;\n      *memory_block = (int)memory_block + 0x43;\n      memory_block[4] = (int)memory_block + 0x43;\n      memory_block[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = memory_block[10];\n    *(ushort *)(memory_block + 3) = file_mode | 0x80;\n    *memory_block = allocated_memory;\n    memory_block[4] = allocated_memory;\n    memory_block[5] = block_size;\n    if ((is_executable) && (_isatty_r(file_descriptor, *(short *)((int)memory_block + 0xe)) != 0)) {\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "String::FUN_000815de": "parse_string_to_long",
                "this": "str",
                "lVar1": "result",
                "buffer": "buffer",
                "FUN_000815de": "parse_string_to_long_000815de"
            },
            "code": "long parse_string_to_long_000815de(String *str) {\n  long result = 0;\n  if (str->buffer != NULL) {\n    result = atol(str->buffer);\n  }\n  return result;\n}",
            "called": [
                "atol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "parse_string_to_long_000815de"
        },
        "FUN_00080578": {
            "renaming": {
                "FUN_00080578": "moveServoToPosition_00080578",
                "_timer3": "timer",
                "DAT_00080584": "servoPosition",
                "'\\x02'": "mode"
            },
            "code": "void moveServoToPosition_00080578(void)\n{\n  Servo_Handler(timer=3, DAT_00080584=DAT_00080584, mode=2);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080578",
            "calling": [],
            "imported": false,
            "current_name": "moveServoToPosition_00080578"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "get_signal_handler_000841e4",
                "__sig": "signal_number",
                "iVar1": "handler_result",
                "_FUN_000841e4_r": "_get_signal_handler_r"
            },
            "code": "int get_signal_handler_000841e4(int signal_number)\n{\n  int handler_result;\n  handler_result = _get_signal_handler_000841e4_r(*(undefined4 *)PTR__impure_ptr_000841f0, signal_number);\n  return handler_result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "get_signal_handler_000841e4"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_mb_cur_max_0008400c",
                "PTR___mb_cur_max_00084014": "mb_cur_max_ptr"
            },
            "code": "int get_mb_cur_max_0008400c(void)\n{\n  int* PTR___mb_cur_max_00084014 = (int*)PTR___mb_cur_max_00084014;\n  int mb_cur_max = *PTR___mb_cur_max_00084014;\n  return mb_cur_max;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_0008400c"
        },
        "FUN_00080e60": {
            "renaming": {
                "FUN_00080e60": "wait_forever_00080e60"
            },
            "code": "void wait_forever_00080e60(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e60",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e60"
        },
        "FUN_000814d0": {
            "renaming": {
                "String::FUN_000814d0": "createString",
                "this": "this",
                "cstr": "string",
                "length": "length",
                "uVar1": "reserved",
                "invalidate": "invalidateMemory",
                "len": "length",
                "buffer": "string",
                "FUN_000814d0": "createString_000814d0"
            },
            "code": "String* __thiscall createString_000814d0(String* this, char* string, uint length)\\n{\\n  uchar reserved = reserveMemory(this, length);\\n  if (reserved == \"\\0\") {\\n    invalidateMemory(this);\\n  }\\n  else {\\n    this->length = length;\\n    strcpy(this->string, string);\\n  }\\n  return this;\\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "createString_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_initialized_data_and_zero_bss_00080c20",
                "puVar1": "completed_data_destination",
                "puVar2": "initialized_data_source_or_bss_destination",
                "iVar3": "loop_counter",
                "puVar4": "completed_data_source",
                "PTR_banzai_00080c7c": "initialized_data_start",
                "PTR__etext_00080c78": "initialized_data_end",
                "PTR_completed_7857_00080c80": "completed_data_start",
                "PTR_completed_7857_00080c84": "completed_data_end",
                "DAT_00080c90": "global_data",
                "PTR__ebss_00080c88": "bss_start",
                "PTR_exception_table_00080c8c": "exception_table",
                "(*DAT_00080c94)()": "call_reset_vector"
            },
            "code": "void copy_initialized_data_and_zero_bss_00080c20() {\n  uint32_t* PTR_completed_7857_00080c80 = (uint32_t*)PTR_completed_7857_00080c80;\n  uint32_t* PTR_completed_7857_00080c84 = (uint32_t*)PTR_completed_7857_00080c84;\n  uint32_t* PTR__ebss_00080c88 = (uint32_t*)PTR__ebss_00080c88;\n  uint32_t* PTR_exception_table_00080c8c = (uint32_t*)(PTR_PTR_exception_table_00080c8c_00080c8c - 0x20000000);\n\n  if (PTR__etext_00080c78 != PTR_banzai_00080c7c) {\n    uint32_t* PTR_banzai_00080c7c = (uint32_t*)PTR_banzai_00080c7c;\n    for (; PTR_banzai_00080c7c < PTR_completed_7857_00080c84; PTR_banzai_00080c7c++, PTR_completed_7857_00080c80++) {\n      *PTR_completed_7857_00080c80 = *PTR_banzai_00080c7c;\n    }\n  }\n\n  for (; PTR_completed_7857_00080c80 < PTR__ebss_00080c88; PTR_completed_7857_00080c80++) {\n    *PTR_completed_7857_00080c80 = 0;\n  }\n\n  *(uint32_t*)(DAT_00080c90 + 8) = ((uint32_t)PTR_exception_table_00080c8c) & 0x1fffff80;\n  if (PTR_exception_table_00080c8c < (uint32_t*)0x100000) {\n    *(uint32_t*)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(true) {\n    // Do nothing loop\n  }\n}",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_initialized_data_and_zero_bss_00080c20"
        },
        "FUN_00080e62": {
            "renaming": {
                "FUN_00080e62": "wait_forever_00080e62"
            },
            "code": "void wait_forever_00080e62(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e62",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_00080e62"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "update_servo_position_0008044c",
                "timer": "timer_sequence",
                "tc": "timer_counter",
                "channel": "channel_number",
                "bVar1": "servo_count",
                "puVar2": "channel_array",
                "puVar3": "servo_count_array",
                "puVar4": "servo_pin_array",
                "uVar5": "index",
                "RVar6": "clock_speed",
                "iVar7": "index"
            },
            "code": "void update_servo_position_0008044c(timer16_Sequence_t timer, Tc *timer_counter, uint8_t channel) {\n  byte servo_count = servo_count_array[timer];\n  byte channel_number = channel_array[timer];\n  uint8_t index = channel_number * 0xc;\n\n  if ((channel_array[timer] & 0x80) == 0) {\n    if ((channel_number + index < servo_count) && ((int)((uint)(byte)servo_pin_array[((char)channel_array[timer] + index) * 8] << 0x19) < 0)) {\n      digitalWrite((byte)servo_pin_array[(index + (char)channel_array[timer]) * 8] & 0x3f, 0);\n    }\n  }\n  else {\n    timer_counter->TC_CHANNEL[channel].TC_CCR = timer_counter->TC_CHANNEL[channel].TC_CCR | 4;\n  }\n\n  channel_array[timer]++;\n\n  if ((channel_array[timer] + index < servo_count) && ((char)channel_array[timer] < '\f')) {\n    timer_counter->TC_CHANNEL[channel].TC_RA = timer_counter->TC_CHANNEL[channel].TC_CV + *(int *)(servo_pin_array + ((char)channel_array[timer] + index) * 8 + 4);\n    if (-1 < (int)((uint)(byte)servo_pin_array[((char)channel_array[timer] + index) * 8] << 0x19)) {\n      return;\n    }\n    digitalWrite((byte)servo_pin_array[(index + (char)channel_array[timer]) * 8] & 0x3f, 1);\n    return;\n  }\n\n  RwReg clock_speed = (*(uint *)system_clock_speed_array / timer_frequency_array) * 20000 >> 5;\n  if (clock_speed <= timer_counter->TC_CHANNEL[channel].TC_CV + 4) {\n    clock_speed = timer_counter->TC_CHANNEL[channel].TC_CV + 4;\n  }\n  timer_counter->TC_CHANNEL[channel].TC_RA = clock_speed;\n  channel_array[timer] = 0xff;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [
                "TC4_Handler",
                "TC5_Handler",
                "TC3_Handler",
                "TC2_Handler",
                "TC0_Handler"
            ],
            "imported": false,
            "current_name": "update_servo_position_0008044c"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe"
            },
            "code": "__pid_t get_process_id_00080efe(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "word",
                "puVar5": "dest_byte_ptr",
                "puVar7": "src_byte_ptr",
                "uVar6": "remaining_bytes",
                "uVar8": "remaining_words"
            },
            "code": "void * reverse_copy_00081e34(void *destination, const void *source, size_t num_bytes) {\n  int i;\n  uint remaining_bytes;\n  uint remaining_words;\n  uint *dest_ptr;\n  uint *src_ptr;\n  uint word;\n  uchar *dest_byte_ptr;\n  uchar *src_byte_ptr;\n\n  if ((source < destination) && ((uchar *)source + num_bytes > (uchar *)destination)) {\n    dest_byte_ptr = (uchar *)destination + num_bytes;\n    remaining_bytes = num_bytes % 4;\n    num_bytes -= remaining_bytes;\n    while (num_bytes > 0) {\n      dest_byte_ptr -= 4;\n      src_byte_ptr = (uchar *)source + num_bytes;\n      *(uint *)dest_byte_ptr = *(uint *)src_byte_ptr;\n      num_bytes -= 4;\n    }\n    while (remaining_bytes > 0) {\n      remaining_bytes--;\n      dest_byte_ptr--;\n      src_byte_ptr = (uchar *)source + remaining_bytes;\n      *dest_byte_ptr = *src_byte_ptr;\n    }\n    return destination;\n  }\n\n  dest_ptr = (uint *)destination;\n  src_ptr = (uint *)source;\n  remaining_words = num_bytes / 4;\n  for (i = 0; i < remaining_words; i++) {\n    word = *src_ptr++;\n    *dest_ptr++ = word;\n  }\n\n  remaining_bytes = num_bytes % 4;\n  if (remaining_bytes > 0) {\n    dest_byte_ptr = (uchar *)dest_ptr;\n    src_byte_ptr = (uchar *)src_ptr;\n    while (remaining_bytes > 0) {\n      remaining_bytes--;\n      *dest_byte_ptr++ = *src_byte_ptr++;\n    }\n  }\n\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_00080e66": {
            "renaming": {
                "FUN_00080e66": "wait_forever_00080e66"
            },
            "code": "void wait_forever_00080e66(void) \n{\n  while(true) { }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e66",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_00080e66"
        },
        "FUN_000826e8": {
            "renaming": {
                "FUN_000826e8": "parse_uint_from_string_000826e8",
                "param_1": "result",
                "param_2": "str",
                "param_3": "end_ptr",
                "param_4": "base",
                "pbVar4": "curr_ptr",
                "pbVar6": "curr_char_ptr",
                "bVar1": "char_properties",
                "bVar2": "is_negative",
                "uVar3": "val",
                "uVar5": "curr_digit",
                "iVar7": "char_value",
                "iVar8": "result_status",
                "uVar9": "max_quotient",
                "uVar10": "max_val"
            },
            "code": "uint parse_uint_from_string_000826e8(undefined4 *result, byte *str, byte **end_ptr, uint base) {\n  byte curr_char;\n  uint curr_digit;\n  byte *curr_ptr;\n  int is_negative;\n  uint max_val;\n  uint max_quotient;\n  uint val;\n  \n  curr_ptr = str;\n  while (1) {\n    curr_char = *curr_ptr;\n    curr_digit = (uint)curr_char;\n    if ((*(byte *)(*(int *)PTR___ctype_ptr___000827f8 + curr_digit + 1) & 8) == 0) {\n      break;\n    }\n    curr_ptr = curr_ptr + 1;\n  }\n  if (curr_digit == 0x2d) {\n    is_negative = 1;\n    curr_ptr = curr_ptr + 1;\n    curr_digit = (uint)*curr_ptr;\n  }\n  else {\n    is_negative = 0;\n    if (curr_digit == 0x2b) {\n      curr_ptr = curr_ptr + 1;\n      curr_digit = (uint)*curr_ptr;\n    }\n  }\n  if ((base & 0xffffffef) == 0) {\n    if (curr_digit == 0x30) {\n      if ((*curr_ptr & 0xdf) == 0x58) {\n        curr_digit = (uint)curr_ptr[1];\n        base = 0x10;\n        curr_ptr = curr_ptr + 2;\n      }\n      else if (base == 0) {\n        base = 8;\n      }\n    }\n    else if (base == 0) {\n      base = 10;\n    }\n  }\n  if (is_negative == 0) {\n    max_val = 0x7fffffff;\n  }\n  else {\n    max_val = 0x80000000;\n  }\n  max_quotient = max_val / base;\n  val = 0;\n  while (1) {\n    curr_digit = (uint)*curr_ptr;\n    curr_ptr = curr_ptr + 1;\n    curr_char = *(byte *)(*(int *)PTR___ctype_ptr___000827f8 + curr_digit + 1);\n    if ((curr_char & 4) == 0) {\n      if ((curr_char & 3) == 0) break;\n      if ((curr_char & 3) == 1) {\n        curr_digit = curr_digit - 0x37;\n      }\n      else {\n        curr_digit = curr_digit - 0x57;\n      }\n    }\n    else {\n      curr_digit = curr_digit - 0x30;\n    }\n    if ((int)base <= curr_digit) break;\n    if (val != -1) {\n      if ((max_quotient <= val && val != max_quotient) || ((val == max_quotient && ((int)(max_val - base * max_quotient) < curr_digit)))) {\n        val = -1;\n      }\n      else {\n        val = base * val + curr_digit;\n      }\n    }\n  }\n  if (val == -1) {\n    if (is_negative == 0) {\n      val = 0x7fffffff;\n    }\n    else {\n      val = 0x80000000;\n    }\n    *result = 0x22;\n    if (end_ptr == (byte **)0x0) {\n      return val;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      val = -val;\n    }\n    if (end_ptr == (byte **)0x0) {\n      return val;\n    }\n    if (val == 0) goto LAB_0008278c;\n  }\n  *end_ptr = curr_ptr - 1;\n  return val;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000826e8",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "parse_uint_from_string_000826e8"
        },
        "FUN_00080df0": {
            "renaming": {
                "FUN_00080df0": "execute_callbacks_on_pio_change_00080df0",
                "uVar1": "leading_zeroes",
                "uVar2": "pio_mask",
                "pio_state": "pio_state",
                "pio_mask": "pio_mask",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_callbacksPioC_00080e24": "PTR_callbacksPioC_00080e24",
                "pio_index": "pio_index"
            },
            "code": "void execute_callbacks_on_pio_change_00080df0(void)\n{\n  uint pio_state;\n  uint pio_mask;\n  pio_mask = *(uint *)(DAT_pio_callbacks_mask + 0x4c);\n  while(true)\n  {\n    uint leading_zeroes = count_leading_zeroes(pio_mask);\n    if(leading_zeroes > 0x1f) break;\n    uint pio_index = 0x1f - leading_zeroes;\n    if (*(code **)(PTR_callbacksPioC_00080e24 + pio_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00080e24 + pio_index * 4))();\n    }\n    pio_mask = pio_mask & ~(1 << pio_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080df0",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_pio_change_00080df0"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "initialize_stream_if_not_initialized_00083850",
                "param_1": "stream_address",
                "param_2": "stream_mode",
                "__sinit": "initialize_stream",
                "__sflush_r": "flush_stream"
            },
            "code": "void initialize_stream_if_not_initialized_00083850(int stream_address, int stream_mode) {\n  if ((stream_address != 0) && (*(int *)(stream_address + 0x38) == 0)) {\n    initialize_stream();\n  }\n  if (*(short *)(stream_mode + 0xc) == 0) {\n    return;\n  }\n  flush_stream(stream_address);\n  return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_stream_if_not_initialized_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_000815ec",
                "in_r0": "key_context",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "delayExecution",
                "setup": "setupEnvironment",
                "loop": "executeLoop",
                "DAT_00081614": "data_value",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int main_000815ec(void)\n{\n  EVP_PKEY_CTX *key_context;\n  _watchdogDefaultSetup();\n  initialize(key_context);\n  initializeVariant();\n  delayExecution(1);\n  setupEnvironment();\n  do {\n    do {\n      executeLoop();\n    } while (DAT_00081614 == 0);\n    runSerialEvent();\n  } while(true);\n}",
            "called": [
                "serialEventRun",
                "initVariant",
                "loop",
                "setup",
                "init",
                "delay",
                "_watchdogDefaultSetup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_000815ec"
        },
        "FUN_000827fc": {
            "renaming": {
                "FUN_000827fc": "convertStringToLong_000827fc",
                "__nptr": "stringToConvert",
                "__endptr": "endPointer",
                "__base": "base",
                "lVar1": "convertedValue",
                "_FUN_000827fc_r": "_convertStringToLong_r"
            },
            "code": "long convertStringToLong_000827fc(char *stringToConvert, char **endPointer, int base) {\n  long convertedValue;\n  convertedValue = _convertStringToLong_000827fc_r(*(undefined4 *)PTR__impure_ptr_00082810, stringToConvert, endPointer, base);\n  return convertedValue;\n}",
            "called": [
                "_strtol_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000827fc",
            "calling": [
                "atol"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000827fc"
        },
        "FUN_00080588": {
            "renaming": {
                "FUN_00080588": "move_servo_00080588",
                "PTR_timer_pin": "timer_pin",
                "DAT_00080594": "servo_angle",
                "PTR_speed": "speed"
            },
            "code": "void move_servo_00080588(void)\n{\n  Servo_Handler(PTR_timer_pin = _timer4, angle = DAT_00080594, PTR_speed = '\\x02');\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080588",
            "calling": [],
            "imported": false,
            "current_name": "move_servo_00080588"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "set_bits_in_register_00080d3e",
                "param_1": "register_ptr",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "shift",
                "*(uint *)(param_1 + 4)": "*register_ptr",
                "(param_2 & 0xf) << 0x18": "((value & mask) << shift)",
                "(param_4 & 3) << 0x1c": "shift",
                "uint": "uint32_t"
            },
            "code": "void set_bits_in_register_00080d3e(uint32_t *register_ptr, uint32_t mask, uint32_t value, uint32_t shift) {\n  *register_ptr = (*register_ptr & ~mask) | ((value & mask) << shift);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438::FUN_00081438": "FUN_00081438::init",
                "this": "this_ptr",
                "pUsart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081458": "&UARTClass::write",
                "_pUsart": "uart",
                "FUN_00081438": "UARTClass::UARTClass_00081438"
            },
            "code": "UARTClass::UARTClass_00081438(UARTClass* uart_class, Uart* uart, IRQn_Type irq, uint32_t id, RingBuffer* rx_buffer, RingBuffer* tx_buffer) {\n  uart_class->init(uart, irq, id, rx_buffer, tx_buffer);\n}\n\nUARTClass::UARTClass_00081438* __thiscall UARTClass::UARTClass_00081438::UARTClass::UARTClass_00081438(UARTClass::UARTClass_00081438* this_ptr, Uart* uart, IRQn_Type irq, uint32_t id, RingBuffer* rx_buffer, RingBuffer* tx_buffer) {\n  UARTClass::UARTClass_00081438(&this_ptr->super_UARTClass, uart, irq, id, rx_buffer, tx_buffer);\n  *(void**)&this_ptr->super_UARTClass = PTR_PTR_write_1_00081458;\n  this_ptr->uart = uart;\n  return this_ptr;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTClass::UARTClass_00081438"
        },
        "FUN_000841f4": {
            "renaming": {
                "FUN_000841f4": "kill_process_and_return_error_if_failed_000841f4",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_code",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_and_return_error_if_failed_000841f4(int *error_code, int process_id, int signal_code)\n{\n  int *errno_ptr;\n  errno_ptr = PTR_errno_00084218;\n  *(int *)PTR_errno_00084218 = 0;\n  _kill(process_id, signal_code);\n  if ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841f4",
            "calling": [
                "kill",
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_and_return_error_if_failed_000841f4"
        },
        "FUN_000812a0": {
            "renaming": {
                "FUN_000812a0": "wait_until_tx_buffer_empty_000812a0",
                "_tx_buffer->_iHead": "tx_buffer_head",
                "_tx_buffer->_iTail": "tx_buffer_tail",
                "_pUart->UART_SR": "pUart_status_register"
            },
            "code": "void __thiscall wait_until_tx_buffer_empty_000812a0(UARTClass *this)\n{\n  while (this->tx_buffer_head != this->tx_buffer_tail);\n  while (!(this->pUart->UART_SR & (1 << 22)));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812a0",
            "calling": [],
            "imported": false,
            "current_name": "wait_until_tx_buffer_empty_000812a0"
        },
        "FUN_0008130c": {
            "renaming": {
                "FUN_0008130c": "updateUARTBuffer_0008130c",
                "this": "uart",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "interruptNumber",
                "DAT_00081344": "interruptMaskAddress",
                "pmc_disable_periph_clk": "disableClock"
            },
            "code": "void __thiscall updateUARTBuffer_0008130c(UARTClass *uart) {\n  uart->receiveBuffer->headIndex = uart->receiveBuffer->tailIndex;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)(uart->_dwIrq / 32 + 0x20 + DAT_00081344) = 1 << (uart->_dwIrq & 0x1f);\n  pmc_disable_periph_clk(uart->_dwId);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008130c",
            "calling": [],
            "imported": false,
            "current_name": "updateUARTBuffer_0008130c"
        },
        "FUN_0008142e": {
            "renaming": {
                "FUN_0008142e": "initializeUSART_0008142e",
                "this": "USARTObject",
                "dwBaudRate": "baudRate"
            },
            "code": "void __thiscall initializeUSART_0008142e(USARTClass *USARTObject, uint32_t baudRate)\n{\n  UARTClass::init(&USARTObject->super_UARTClass, baudRate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008142e",
            "calling": [],
            "imported": false,
            "current_name": "initializeUSART_0008142e"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "array_index",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "array_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_00080d58(int array_index, uint bit_position) {\n  int* array_ptr = (int*)(array_index + 0x14);\n  int bit_mask = 1 << (bit_position & 0xff);\n  *array_ptr = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "printBuffer_00081084",
                "this": "printObject",
                "size": "bufferSize",
                "pPVar1": "currentPrintObject",
                "sVar2": "bytesPrinted",
                "PTR_Print": "printObject->_vptr_Print",
                "DAT_0008109a": "0x0008109a",
                "uint8_t": "uint"
            },
            "code": "size_t __thiscall printBuffer_00081084(Print *printObject, uint8_t *buffer, size_t bufferSize) {\n  Print *currentPrintObject;\n  size_t bytesPrinted = 0;\n\n  currentPrintObject = printObject;\n  while ((bytesPrinted != bufferSize && (currentPrintObject = (Print *)(**PTR_Print)(currentPrintObject, (uint)buffer[bytesPrinted])), currentPrintObject != (Print *)0x0)) {\n    bytesPrinted = bytesPrinted + 1;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_00081084"
        },
        "FUN_00080558": {
            "renaming": {
                "FUN_00080558": "servoHandlerTimer1_00080558",
                "DAT_00080564": "servoPosition"
            },
            "code": "void servoHandlerTimer1_00080558(char DAT_00080564) { \\n  Servo_Handler(_timer1, DAT_00080564, \"\\0\"); \\n  return; \\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080558",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerTimer1_00080558"
        },
        "FUN_00083708": {
            "renaming": {
                "FUN_00083708": "decompress_00083708",
                "param_1": "input",
                "param_2": "output",
                "piVar1": "scratch_space",
                "iVar2": "chunk_size",
                "uVar3": "flags",
                "uVar4": "size_left",
                "iVar5": "result",
                "pcVar6": "decompressor",
                "iVar7": "source_ptr"
            },
            "code": "uint32_t decompress_00083708(int32_t *input, int32_t *output) {\n  int32_t *source_ptr;\n  int32_t *dest_ptr;\n  uint16_t flags;\n  uint32_t size_left;\n  uint32_t chunk_size;\n  uint32_t result;\n  decompress_00083708ion_function_t *decompress_00083708or;\n  int32_t scratch_space;\n  if ((input == NULL) || (output == NULL)) {\n    return 0;\n  }\n  flags = *(uint16_t *)(input + 3);\n  if ((flags << 0x1c) < 0) {\n    if (input[4] == 0) {\n      return 0;\n    }\n    source_ptr = input;\n    dest_ptr = output;\n    chunk_size = input[0] - input[4];\n    scratch_space = (flags & 3) ? 0 : input[5];\n    input[0] = input[4];\n    input[2] = scratch_space;\n    decompress_00083708or = (decompress_00083708ion_function_t *)input[9];\n    do {\n      if (chunk_size < 1) {\n        return 0;\n      }\n      size_left = decompress_00083708or(input, input[7], input[4], chunk_size);\n      chunk_size -= size_left;\n      input[4] += size_left;\n    } while (size_left > 0);\n    *(uint16_t *)(input + 3) |= 0x40;\n    return 0xffffffff;\n  }\n  *(uint16_t *)(input + 3) |= 0x800;\n  if ((input[1] < 1) && (input[0xf] < 1)) {\n    return 0;\n  }\n  decompress_00083708or = (decompress_00083708ion_function_t *)input[10];\n  if (decompress_00083708or == NULL) {\n    return 0;\n  }\n  size_left = flags | 0x800;\n  source_ptr = input;\n  dest_ptr = output;\n  input[0] = 0;\n  if ((flags & 0x1000) == 0) {\n    chunk_size = decompress_00083708or(input, input[7], size_left & 0x1000, 1);\n    if ((chunk_size == -1) && (*input != 0)) {\n      if ((*input == 0x1d) || (*input == 0x16)) {\n        return 0;\n      }\n      *(uint16_t *)(source_ptr + 3) |= 0x40;\n      return 0xffffffff;\n    }\n    size_left = *(uint16_t *)(source_ptr + 3);\n    decompress_00083708or = (decompress_00083708ion_function_t *)source_ptr[10];\n  }\n  else {\n    chunk_size = input[0x14];\n  }\n  if (((size_left << 0x1d) < 0) && (chunk_size = chunk_size - input[1], input[0xc] != 0)) {\n    chunk_size -= input[0xf];\n  }\n  chunk_size = decompress_00083708or(input, input[7], chunk_size, 0);\n  if (chunk_size == -1) {\n    if (*input != 0) {\n      if ((*input != 0x1d) && (*input != 0x16)) {\n        *(uint16_t *)(source_ptr + 3) |= 0x40;\n        return 0xffffffff;\n      }\n      *(uint16_t *)(source_ptr + 3) &= 0xf7ff;\n      input[0] = input[4];\n      input[1] = 0;\n      goto LAB_00083774;\n    }\n    *(uint16_t *)(source_ptr + 3) &= 0xf7ff;\n    input[0] = input[4];\n    input[1] = 0;\n  }\n  else {\n    *(uint16_t *)(source_ptr + 3) &= 0xf7ff;\n    input[0] = input[4];\n    input[1] = 0;\n  }\n  if ((size_left << 0x13) < 0) {\n    input[0x14] = chunk_size;\n  }\nLAB_00083774:\n  scratch_space = input[0xc];\n  if (scratch_space != NULL) {\n    if (scratch_space != input + 0x10) {\n      free(scratch_space);\n    }\n    input[0xc] = NULL;\n  }\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083708",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decompress_00083708"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008458c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *difference)\n{\n  uint product_low = dividend * multiplier_low;\n  ulonglong product = (ulonglong)dividend * (ulonglong)multiplier_high + (ulonglong)(product_low >> 32);\n  difference[0] = (int)(dividend - (product & 0xffffffff));\n  difference[1] = (int)(divisor - (product >> 32)) - (uint)(difference[0] > dividend);\n  return;\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "convert_wchar_to_multibyte_string_0008434c",
                "param_1": "output_string",
                "param_2": "output_string_size",
                "param_3": "default_char",
                "param_4": "conversion_result",
                "uVar1": "locale_charset",
                "iVar2": "conversion_status",
                "pcVar3": "conversion_function",
                "auStack_24": "stack_buffer"
            },
            "code": "void convert_wchar_to_multibyte_string_0008434c(undefined4 *output_string, int output_string_size, undefined4 default_char, undefined4 *conversion_result)\n{\n  undefined4 locale_charset;\n  int conversion_status;\n  code *conversion_function = *(code **)PTR___wctomb_00084398;\n  undefined stack_buffer[12];\n  \n  if (output_string_size == 0) {\n    locale_charset = __locale_charset();\n    conversion_status = (*conversion_function)(output_string, stack_buffer, 0, locale_charset, conversion_result);\n  }\n  else {\n    locale_charset = __locale_charset();\n    conversion_status = (*conversion_function)(output_string, output_string_size, default_char, locale_charset, conversion_result);\n  }\n  if (conversion_status == -1) {\n    *conversion_result = 0;\n    *output_string = 0x8a;\n  }\n  return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_multibyte_string_0008434c"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyFrom_0008151c",
                "this": "destinationString",
                "rhs": "sourceString",
                "__dest": "destination",
                "DAT_0008155c": "isMemoryAllocated"
            },
            "code": "void __thiscall copyFrom_0008151c(String *this, String *source) {\n  char *destination = this->buffer;\n  if (destination != nullptr) {\n    if (source->buffer != nullptr && this->DAT_0008155c && source->len <= this->capacity) {\n      strcpy(destination, source->buffer);\n      this->len = source->len;\n      return;\n    }\n    free(destination);\n  }\n  this->buffer = source->buffer;\n  this->capacity = source->capacity;\n  this->len = source->len;\n  source->buffer = nullptr;\n  source->capacity = 0;\n  source->len = 0;\n}",
            "called": [
                "strcpy",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "operator="
            ],
            "imported": false,
            "current_name": "copyFrom_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_and_abort_execution_000816f8",
                "param_1": "line_number",
                "param_2": "column_number",
                "param_3": "message",
                "param_4": "message_length",
                "puVar1": "message_pointer_1",
                "puVar2": "message_pointer_2"
            },
            "code": "void print_assertion_failed_message_and_abort_execution_000816f8(undefined4 line_number, undefined4 column_number, undefined *message, undefined4 message_length)\n{\n  undefined *message_pointer_1;\n  undefined *message_pointer_2;\n\n  message_pointer_1 = PTR_s__00081730;\n  message_pointer_2 = PTR_s__00081730;\n  if (message != (undefined *)0x0) {\n    message_pointer_1 = message;\n    message_pointer_2 = PTR_s___function__00081728;\n  }\n  fiprintf(*(undefined4 *)(*(int *)PTR__impure_ptr_00081724 + 0xc), PTR_s_assertion___s__failed__file___s__0008172c, message_length, line_number, column_number, message_pointer_2, message_pointer_1);\n  abort();\n}\n",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "TC_Configure",
                "TC_Start"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_message_and_abort_execution_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "read_file_00084484",
                "__stream": "file_stream",
                "iVar1": "return_value",
                "_FUN_00084484_r": "read_file_recursive"
            },
            "code": "int read_file_00084484(FILE *file_stream) {\n  int return_value;\n  return_value = read_file_00084484_recursive(*(undefined4 *)PTR__impure_ptr_00084490, file_stream);\n  return return_value;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "read_file_00084484"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "write_data_to_file_00084244",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data_buffer",
                "param_4": "data_size",
                "uVar1": "data_length"
            },
            "code": "void write_data_to_file_00084244(int file_descriptor,int data_offset,void* data_buffer,size_t data_size)\n{\n  ushort data_length = *(ushort *)(data_offset + 0xc);\n  if ((int)((uint)data_length << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(data_offset + 0xe),0,2);\n    data_length = *(ushort *)(data_offset + 0xc);\n  }\n  *(ushort *)(data_offset + 0xc) = data_length & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(data_offset + 0xe),data_buffer,data_size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084244"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "PTR_lc_ctype_charset_00084008": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084004(void)\n{\n  return PTR_lc_ctype_charset_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084004"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "register_exit_function_000816ec",
                "param_1": "func_ptr",
                "param_2": "arg_ptr"
            },
            "code": "void register_exit_function_000816ec(void (*func_ptr)(void), void* arg_ptr)\n{\n  __cxa_atexit(func_ptr, arg_ptr);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "register_exit_function_000816ec"
        },
        "FUN_00080568": {
            "renaming": {
                "FUN_00080568": "move_servo_00080568",
                "_timer2": "timer",
                "DAT_00080574": "desired_angle",
                "'\\x01'": "mode=single"
            },
            "code": "void move_servo_00080568(void)\n{\n  Servo_Handler(timer=2, angle=DAT_00080574, mode=single);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080568",
            "calling": [],
            "imported": false,
            "current_name": "move_servo_00080568"
        },
        "FUN_000814ae": {
            "renaming": {
                "String::FUN_000814ae": "resizeString",
                "*this": "str",
                "size": "newSize",
                "uVar1": "success",
                "this->buffer": "str->buffer",
                "this->capacity": "str->capacity",
                "changeBuffer": "str->changeBuffer",
                "this->len": "str->len",
                "*this->buffer": "*str->buffer",
                "FUN_000814ae": "resizeString_000814ae"
            },
            "code": "bool __thiscall resizeString_000814ae(String *str, uint newSize)\n{\n  bool success = true;\n  \n  if ((str->buffer == nullptr) || (str->capacity < newSize)) {\n    success = str->changeBuffer(newSize);\n    if (!success) {\n      return false;\n    }\n    if (str->len == 0) {\n      *str->buffer = '\\0';\n    }\n  }\n  return true;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "concat",
                "copy"
            ],
            "imported": false,
            "current_name": "resizeString_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_preinit_array_functions_00081778",
                "puVar1": "fini_array_start",
                "puVar2": "fini_array_end",
                "iVar3": "i",
                "ppcVar4": "function_ptr",
                "iVar5": "num_functions"
            },
            "code": "void execute_preinit_array_functions_00081778(void)\n{\n    int num_functions = (int)PTR___preinit_array_end_000817b8 - (int)PTR___preinit_array_end_000817bc >> 2;\n    if (num_functions != 0) {\n        code **function_ptr = (code **)(PTR___preinit_array_end_000817bc + -4);\n        int i = 0;\n        do {\n            i++;\n            function_ptr++;\n            (**function_ptr)();\n        } while (num_functions != i);\n    }\n}\n\nvoid execute_fini_array_functions(void)\n{\n    undefined *fini_array_start = PTR___preinit_array_end_000817c4;\n    undefined *fini_array_end = PTR__fini_000817c0;\n    _init();\n    int num_functions = (int)fini_array_end - (int)fini_array_start >> 2;\n    if (num_functions != 0) {\n        code **function_ptr = (code **)(fini_array_start + -4);\n        int i = 0;\n        do {\n            i++;\n            function_ptr++;\n            (**function_ptr)();\n        } while (num_functions != i);\n    }\n}",
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_functions_00081778"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_flags_and_set_value_at_address_00080d30",
                "param_1": "address",
                "param_2": "value",
                "param_3": "flag",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void update_flags_and_set_value_at_address_00080d30(int address, uint value, uint flag) {\n  uint* PTR_address_value = (uint*)(address + 4);\n  *PTR_address_value = value | *PTR_address_value | (flag & 1) << 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flags_and_set_value_at_address_00080d30"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "status": "exit_status",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_status_message"
            },
            "code": "void exit_with_status_00080eec(int status)\n{\n  iprintf(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while(true) {\n    // do nothing, infinite loop\n  }\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "setAngle_000806f8",
                "value": "angleValue",
                "0x220": "546",
                "0xb3": "179",
                "0xb4": "180",
                "this->min": "this->minPulseWidth",
                "this->max": "this->maxPulseWidth",
                "FUN_000806f8Microseconds": "setAngleMicroseconds"
            },
            "code": "void __thiscall setAngle_000806f8(Servo *this,int angleValue)\n{\n  if (angleValue < 546) {\n    if (179 < angleValue) {\n      angleValue = 180;\n    }\n    angleValue = map(angleValue & ~(angleValue >> 31), 0, 180, (1360 - this->minPulseWidth) * 4, (8400 - this->maxPulseWidth) * 4);\n  }\n  setAngle_000806f8Microseconds(this,angleValue);\n  return;\n}",
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "loop",
                "straightAndStop"
            ],
            "imported": false,
            "current_name": "setAngle_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(char *__s1,char *__s2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  if ((((uint)__s1 | (uint)__s2) & 7) != 0) {\n    puVar1 = (uint *)__s1;\n    if (((uint)__s1 & 3) != 0) {\n      puVar1 = (uint *)((uint)__s1 & 0xfffffffc) + 1;\n      uVar6 = *(uint *)((uint)__s1 & 0xfffffffc);\n      pbVar3 = (byte *)__s2;\n      if (((uint)__s1 & 1) == 0) {\nLAB_00082410:\n        pbVar4 = pbVar3 + 1;\n        uVar7 = uVar6 >> 0x10 & 0xff;\n        iVar2 = uVar7 - *pbVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar7 == 0) {\n          return 0;\n        }\n      }\n      else {\n        pbVar4 = (byte *)__s2;\n        if (((uint)__s1 & 2) == 0) {\n          pbVar3 = (byte *)(__s2 + 1);\n          uVar7 = uVar6 >> 8 & 0xff;\n          iVar2 = uVar7 - (byte)*__s2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar7 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      __s2 = (char *)(pbVar4 + 1);\n      iVar2 = (uVar6 >> 0x18) - (uint)*pbVar4;\n      if ((iVar2 != 0) || (uVar6 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar6 = (uint)__s2 & 3;\n    if (uVar6 != 0) {\n      puVar5 = (uint *)((uint)__s2 & 0xfffffffc);\n      if (uVar6 == 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x10;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffff;\n          if ((uVar9 & 0x8080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else if (uVar6 < 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 8;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffffff;\n          if ((uVar9 & 0x808080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x18;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xff;\n          if ((uVar9 & 0x80) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar6 = (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n    __s1 = (char *)puVar1;\n    puVar5 = (uint *)__s2;\n    if (((uint)puVar1 & 4) != 0) {\n      __s1 = (char *)(puVar1 + 1);\n      uVar6 = *puVar1;\n      puVar5 = (uint *)((int)__s2 + 4);\n      uVar8 = *(uint *)__s2;\n      uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n      if (uVar6 != uVar8 || uVar10 != 0) {\nLAB_0008259a:\n        uVar7 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n                uVar6 >> 0x18;\n        uVar6 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n                uVar8 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    __s2 = (char *)puVar5;\n    if (((uint)puVar5 & 4) != 0) {\n      uVar6 = *puVar5;\n      puVar1 = puVar5 + 1;\n      do {\n        uVar7 = *(uint *)__s1;\n        uVar8 = *(uint *)((int)__s1 + 4);\n        uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        if (uVar7 != uVar6 || uVar10 != 0) goto LAB_0008258e;\n        uVar9 = *puVar1;\n        uVar6 = puVar1[1];\n        uVar10 = uVar8 + 0xfefefeff & ~uVar8 & 0x80808080;\n        __s1 = (char *)((int)__s1 + 8);\n        puVar1 = puVar1 + 2;\n      } while (uVar8 == uVar9 && uVar10 == 0);\n      uVar7 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 |\n              uVar9 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar6 = *(uint *)__s1;\n    uVar7 = *(uint *)((int)__s1 + 4);\n    uVar8 = *(uint *)__s2;\n    uVar9 = *(uint *)((int)__s2 + 4);\n    uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    if (uVar6 != uVar8 || uVar10 != 0) goto LAB_0008259a;\n    uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n    __s1 = (char *)((int)__s1 + 8);\n    __s2 = (char *)((int)__s2 + 8);\n  } while (uVar7 == uVar9 && uVar10 == 0);\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\nLAB_0008259e:\n  uVar8 = uVar10 << 0x18 | (uVar10 >> 8 & 0xff) << 0x10 | (uVar10 >> 0x10 & 0xff) << 8 |\n          uVar10 >> 0x18;\n  if (uVar8 != 0) {\n    iVar2 = count_leading_zeroes(uVar8);\n    uVar7 = uVar7 >> (0x18U - iVar2 & 0xff);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar7 <= uVar6) {\n    iVar2 = -(uint)(uVar7 < uVar6);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "equals"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000816c8": {
            "renaming": {
                "FUN_000816c8": "incrementTickCount_000816c8",
                "PTR__dwTickCount_000816d4": "tickCount"
            },
            "code": "void incrementTickCount_000816c8(void)\n{\n  int* PTR__dwTickCount_000816d4 = (int*)PTR__dwTickCount_000816d4;\n  *PTR__dwTickCount_000816d4 = *PTR__dwTickCount_000816d4 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_000816c8"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "printNumber_000810fc",
                "this": "printObject",
                "n": "number",
                "base": "base",
                "pcVar1": "bufferPointer",
                "sVar2": "writeSize",
                "uVar3": "baseValue",
                "uVar4": "quotient",
                "str": "buffer",
                "cVar5": "digitChar",
                "uVar6": "remainder",
                "buf": "reversedBuffer"
            },
            "code": "size_t __thiscall printNumber_000810fc(Print *printObject, ulong number, uint8_t base) {\n  char *bufferPointer;\n  size_t writeSize;\n  uint baseValue;\n  uint quotient;\n  uint remainder;\n  char *buffer;\n  char digitChar;\n  char reversedBuffer [33];\n  uint bufferIndex = 0;\n  baseValue = (uint)base;\n  reversedBuffer[32] = '\\0';\n  if (baseValue < 2) {\n    baseValue = 10;\n  }\n  bufferPointer = reversedBuffer + 0x1f;\n  do {\n    buffer = bufferPointer;\n    quotient = number / baseValue;\n    remainder = number - baseValue * quotient & 0xff;\n    digitChar = (char)remainder;\n    if (remainder < 10) {\n      digitChar = digitChar + '0';\n    }\n    else {\n      digitChar = digitChar + '7';\n    }\n    *buffer = digitChar;\n    number = quotient;\n    bufferPointer = buffer + -1;\n    bufferIndex++;\n  } while (quotient != 0);\n  writeSize = write(printObject, reversedBuffer + 32 - bufferIndex, bufferIndex);\n  return writeSize;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_000810fc"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "file_reader_00080ec2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_size"
            },
            "code": "int file_reader_00080ec2(int file_descriptor, char *buffer, int buffer_size)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "file_reader_00080ec2"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_adc_00080774",
                "context": "ctx",
                "puVar1": "clock_frequency",
                "puVar2": "unused_pointer",
                "iVar3": "var3",
                "iVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "ulPin": "pin",
                "uVar7": "next_pin"
            },
            "code": "int initialize_adc_00080774(EVP_PKEY_CTX *context)\n{\n  uint32_t clock_frequency = *(uint *)PTR_SystemCoreClock_00080878 / 1000 - 1;\n  SystemInit();\n  uint32_t pin = 0;\n  do {\n    digitalWrite(pin,0);\n    int var1 = DAT_00080890;\n    int var2 = DAT_0008088c;\n    int var3 = DAT_00080888;\n    int var4 = DAT_00080884;\n    pin++;\n  } while (pin != 0x4f);\n  *(uint32_t *)(DAT_00080884 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(var3 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(var1 + 0xa0) = 0xffffffff;\n  *(uint32_t *)(var2 + 0xa0) = 0xffffffff;\n  PIO_Configure(var4,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(var4,1,0xc00,0);\n  PIO_Configure(var4,1,0x3000,0);\n  PIO_Configure(var2,2,0x30,0);\n  PIO_Configure(var3,1,0xc00,0);\n  PIO_Configure(var4,1,3,0);\n  PIO_Configure(var3,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_initialize(DAT_00080898,clock_frequency,DAT_00080894,0xc);\n  adc_configure_timing(DAT_00080898,0,0x300000,1);\n  adc_configure_trigger(DAT_00080898,0,0);\n  adc_disable_interrupt(DAT_00080898,0xffffffff);\n  int var5 = adc_disable_all_channel(DAT_00080898);\n  analogOutputInit();\n  return var5;\n}",
            "called": [
                "__libc_init_array",
                "analogOutputInit",
                "pmc_enable_periph_clk",
                "adc_init",
                "adc_disable_all_channel",
                "adc_disable_interrupt",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "digitalWrite",
                "PIO_Configure"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080774"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "read_pulse_00081624",
                "pin": "pin_number",
                "state": "pin_state",
                "timeout": "pulse_timeout",
                "puVar1": "clock_speed_ptr",
                "uVar2": "pulse_count",
                "uVar3": "pin_desc_mode",
                "PTR_SystemCoreClock_0008167c": "clock_speed_ptr",
                "PTR_g_APinDescription_00081678": "pin_desc_ptr",
                "DAT_00081680": "pulse_length"
            },
            "code": "uint32_t read_pulse_00081624(uint32_t pin, uint32_t state, uint32_t timeout) {\n  uint32_t clock_speed = *(uint32_t *)PTR_SystemCoreClock_0008167c;\n  uint32_t pin_desc = *(uint32_t *)(PTR_g_APinDescription_00081678 + pin * 0x1c);\n  uint32_t pin_desc_mode = *(uint32_t *)(PTR_g_APinDescription_00081678 + pin * 0x1c + 4);\n  if (state == 0) {\n    pin_desc_mode = 0;\n  }\n  uint32_t pulse_count = countPulseASM(pin_desc + 0x3c, pin_desc_mode, *(uint32_t *)(PTR_g_APinDescription_00081678 + pin * 0x1c + 4), ((clock_speed / *(uint32_t *)DAT_00081680) * timeout) / 0x12);\n  if (pulse_count != 0) {\n    pulse_count = (uint32_t)((uint64_t)(pulse_count * 18000 + 16000) / ((uint64_t)clock_speed / 1000));\n  }\n  return pulse_count;\n}",
            "called": [
                "countPulseASM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_pulse_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "convert_bytes_to_uint32_t_00080ec8",
                "file_UNUSED": "file_unused",
                "ptr": "data",
                "len": "len",
                "iVar1": "i",
                "DAT_00080ee8": "DAT_00080ee8"
            },
            "code": "uint32_t convert_bytes_to_uint32_t_00080ec8(int file_unused, char *data, int len) {\n  int i = 0;\n  uint32_t result = 0;\n  for (i = 0; i < len; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)(byte)data[i];\n  }\n  return len & ~(len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "convert_bytes_to_uint32_t_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "Print::FUN_0008117a": "calculate_print_length",
                "this": "print_instance",
                "num": "num",
                "base": "base",
                "sVar1": "print_length",
                "sVar2": "total_length",
                "FUN_0008117a": "calculate_print_length_0008117a"
            },
            "code": "size_t calculate_print_length_0008117a(Print *print_instance, int num, int base) {\n  size_t print_length;\n  size_t total_length;\n  print_length = print(print_instance, num, base);\n  total_length = calculate_print_length_0008117a(print_instance);\n  return total_length + print_length;\n}",
            "called": [
                "println",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_print_length_0008117a"
        },
        "FUN_000843e0": {
            "renaming": {
                "FUN_000843e0": "close_file_000843e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_000843e0(int *error_code, int file_descriptor)\n{\n  int *errno_ptr = PTR_errno_00084400;\n  *(int *)PTR_errno_00084400 = 0;\n  int close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843e0",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_000843e0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "allocated_ptr"
            },
            "code": "void allocate_memory_000817f0(size_t size) {\n  void *allocated_ptr;\n  allocated_ptr = (void *)_allocate_memory_000817f0_r(*(undefined4 *)PTR__impure_ptr_000817fc, size);\n  return allocated_ptr;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_000817f0"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba"
            },
            "code": "int return_one_00080eba() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_0008173c": {
            "renaming": {
                "FUN_0008173c": "register_exit_proc_on_error_0008173c",
                "param_1": "exit_code",
                "param_2": "proc",
                "param_3": "arg"
            },
            "code": "void register_exit_proc_on_error_0008173c(int exit_code, void* proc, void* arg, void* reserved)\n{\n  __register_exitproc(exit_code, proc, arg, reserved);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008173c",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_proc_on_error_0008173c"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__00082368;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__00082368 + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__00082368 + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_unlock",
                "_malloc_r",
                "__malloc_lock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "check_ticks_and_execute_callback_00081190",
                "iVar1": "ticks_left"
            },
            "code": "void check_ticks_and_execute_callback_00081190(void)\n{\n  int ticks_left = *(int *)PTR_ticks_000811a8;\n  if (ticks_left != -1 && --ticks_left == 0) {\n    (*DAT_000811ac)();\n  }\n  *(int *)PTR_ticks_000811a8 = ticks_left;\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_execute_callback_00081190"
        },
        "FUN_000805e8": {
            "renaming": {
                "FUN_000805e8": "attach_000805e8",
                "pin": "pin",
                "min": "min_pulse_width",
                "max": "max_pulse_width",
                "bVar1": "servo_index",
                "puVar2": "servo_list",
                "pTVar3": "timer",
                "channel": "channel",
                "id": "irq_id",
                "iVar4": "i",
                "uVar5": "servo_index"
            },
            "code": "uint8_t __thiscall attach_000805e8(int pin, int min_pulse_width, int max_pulse_width) {\n  byte servo_index;\n  byte *servo_list;\n  Tc *timer;\n  uint32_t channel;\n  uint32_t irq_id;\n  int i;\n\n  if (this->servo_count > 59) {\n    return 0;\n  }\n\n  pinMode(pin, OUTPUT);\n\n  servo_list = PTR_servos_00080694;\n  servo_index = this->servo_count;\n  servo_list[servo_index * 8] = (servo_list[servo_index * 8] & 0xC0) | (byte)(pin & 0x3F);\n\n  this->min_pulse_width = (int8_t)((0x220U - min_pulse_width) / 4);\n  this->max_pulse_width = (int8_t)((0x960U - max_pulse_width) / 4);\n\n  channel = servo_index / 0xC;\n  i = 0;\n  while (i < 12) {\n    if ((int)((uint)servo_list[(i + channel * 0xC) * 8] << 0x19) < 0) {\n      return 0;\n    }\n    i++;\n  }\n\n  timer = DAT_00080698;\n  if (channel == 0) {\n    irq_id = 30;\n  }\n  else if (channel == 1) {\n    irq_id = 31;\n  }\n  else if (channel == 2) {\n    irq_id = 32;\n  }\n  else if (channel == 3) {\n    channel = 2;\n    irq_id = 29;\n  }\n  else if (channel == 4) {\n    channel = 0;\n    irq_id = 27;\n  }\n  else {\n    return 0;\n  }\n\n  _initISR(timer, channel, irq_id, (IRQn_Type)irq_id);\n\n  servo_list[servo_index * 8] |= 0x40;\n  this->servo_count++;\n  return servo_index;\n}",
            "called": [
                "_initISR",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805e8",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "attach_000805e8"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "calculate_file_size_00080ebe",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "file_pointer",
                "dir_UNUSED": "directory_pointer"
            },
            "code": "int calculate_file_size_00080ebe(int file_descriptor, int file_pointer, int directory_pointer) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_file_size_00080ebe"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getTickCount_000816d8",
                "PTR__dwTickCount_000816e0": "tickCountPtr"
            },
            "code": "getTickCount_000816d8() {\n  return *(undefined4 *)PTR__dwTickCount_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "compare_strings_000815b8",
                "this": "str1",
                "cstr": "str2",
                "uVar1": "result",
                "uVar2": "comparison_result",
                "len": "str1_len",
                "buffer": "str1_buffer"
            },
            "code": "uchar compare_strings_000815b8(String *str1, char *str2) {\\\n  uchar result;\\\n  uint str1_len = str1->len;\\\n  char *str1_buffer = str1->buffer;\\\n  if (str1_len == 0) {\\\n    if (str2 == NULL) {\\\n      result = 1;\\\n    }\\\n  }\\\n  else {\\\n    if (str2 != NULL) {\\\n      uint comparison_result = strcmp(str1_buffer, str2);\\\n      if (comparison_result < 2) {\\\n        result = 1 - (uchar)comparison_result;\\\n      }\\\n      else {\\\n        result = 0;\\\n      }\\\n    }\\\n    else {\\\n      result = compare_strings_000815b8(str1, str1_buffer);\\\n    }\\\n  }\\\n  return result;\\\n}",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compare_strings_000815b8"
        },
        "FUN_00080e28": {
            "renaming": {
                "FUN_00080e28": "process_callbacks_00080e28",
                "uVar1": "leading_zeroes",
                "uVar2": "bitmask",
                "callbacks_ptr": "PTR_callbacksPioD_00080e5c",
                "callback_index": "callback_index"
            },
            "code": "void process_callbacks_00080e28(void)\n{\n  uint bitmask;\n  uint callbacks_ptr;\n  \n  bitmask = *(uint *)(DAT_00080e58 + 0x4c);\n  while( true ) {\n    uint leading_zeroes = count_leading_zeroes(bitmask);\n    if (leading_zeroes > 0x1f) break;\n    uint callback_index = 0x1f - (leading_zeroes & 0xff) & 0xff;\n    if (*(code **)(PTR_callbacksPioD_00080e5c + callback_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioD_00080e5c + callback_index * 4))();\n    }\n    bitmask = bitmask & ~(1 << callback_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e28",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_00080e28"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "readAndUpdateData_00084220",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "iVar1": "bytesRead",
                "*(int *)(param_2 + 0x50)": "*data",
                "*(ushort *)(param_2 + 0xc)": "*status"
            },
            "code": "void readAndUpdateData_00084220(int fileDescriptor, int dataPointer){\n  int bytesRead = _read_r(fileDescriptor, (int)*(short *)(dataPointer + 0xe));\n  if (bytesRead >= 0) {\n    int *data = (int *)(dataPointer + 0x50);\n    *data += bytesRead;\n    return;\n  }\n  ushort *status = (ushort *)(dataPointer + 0xc);\n  *status &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "readAndUpdateData_00084220"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "reverse_and_call_function_00081750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uStack_8": "input_3",
                "uStack_4": "input_4",
                "PTR__impure_ptr_00081774": "function_ptr"
            },
            "code": "void reverse_and_call_function_00081750(void* PTR__impure_ptr_00081774, int param_1, int param_2, int* param_3_ptr, int* param_4_ptr)\n{\n  int param_3 = *param_3_ptr;\n  int param_4 = *param_4_ptr;\n  PTR__impure_ptr_00081774(param_1, param_2, &param_3);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "reverse_and_call_function_00081750"
        },
        "FUN_00080db8": {
            "renaming": {
                "FUN_00080db8": "execute_callbacks_on_bits_set_to_one_00080db8",
                "uVar1": "leading_zeroes",
                "uVar2": "bits_to_check",
                "PTR_callbacksPioB_00080dec": "PTR_callbacksPioB",
                "DAT_00080de8": "DAT_offset",
                "bit_position": "bit_position",
                "callback": "callback"
            },
            "code": "void execute_callbacks_on_bits_set_to_one_00080db8(void)\n{\n  uint bits_to_check = *(uint *)(DAT_00080de8 + 0x4c);\n  while( true ) {\n    uint leading_zeroes = count_leading_zeroes(bits_to_check);\n    if (leading_zeroes > 0x1f) break;\n    uint bit_position = 0x1f - leading_zeroes;\n    code* callback = *(code **)(PTR_callbacksPioB_00080dec_00080dec + bit_position * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bits_to_check = bits_to_check & ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080db8",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_bits_set_to_one_00080db8"
        },
        "FUN_0008421c": {
            "renaming": {
                "FUN_0008421c": "getProcessID_0008421c"
            },
            "code": "__pid_t getProcessID_0008421c(void)\n{\n  return -1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "getProcessID_0008421c"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initializeSerialBuffers_0008089c",
                "puVar1": "rx_buffer1",
                "puVar2": "tx_buffer1",
                "this": "rx_buffer3",
                "this_00": "tx_buffer4",
                "this_01": "rx_buffer2",
                "this_02": "tx_buffer2",
                "PTR_tx_buffer1_00080934": "tx_buffer1",
                "PTR_rx_buffer1_00080930": "rx_buffer1",
                "PTR_rx_buffer2_00080968": "rx_buffer2",
                "PTR_rx_buffer3_0008093c": "rx_buffer3",
                "PTR_rx_buffer4_00080944": "rx_buffer4",
                "PTR_tx_buffer2_0008096c": "tx_buffer2",
                "PTR_tx_buffer3_00080948": "tx_buffer3",
                "PTR_tx_buffer4_0008094c": "tx_buffer4",
                "PTR_Serial_00080940": "serial1",
                "PTR_Serial1_00080954": "serial2",
                "PTR_Serial2_0008095c": "serial3",
                "PTR_Serial3_00080964": "serial4",
                "DAT_00080938": "baud_rate1",
                "DAT_00080950": "baud_rate2",
                "DAT_00080958": "baud_rate3",
                "DAT_00080960": "baud_rate4"
            },
            "code": "void initializeSerialBuffers_0008089c(void)\n{\n  RingBuffer PTR_rx_buffer1_00080930;\n  RingBuffer PTR_tx_buffer1_00080934;\n  RingBuffer PTR_rx_buffer2_00080968;\n  RingBuffer PTR_rx_buffer3_0008093c;\n  RingBuffer PTR_rx_buffer4_00080944;\n  RingBuffer PTR_tx_buffer2_0008096c;\n  RingBuffer PTR_tx_buffer3_00080948;\n  RingBuffer PTR_tx_buffer4_0008094c;\n  UARTClass PTR_Serial_00080940(PTR_Serial_00080940, DAT_00080938, UART_IRQn, 8, &PTR_rx_buffer1_00080930, &PTR_tx_buffer1_00080934);\n  USARTClass PTR_Serial1_00080954(PTR_Serial1_00080954, DAT_00080950, USART0_IRQn, 0x11, &PTR_rx_buffer2_00080968, &PTR_tx_buffer2_0008096c);\n  USARTClass PTR_Serial2_0008095c(PTR_Serial2_0008095c, DAT_00080958, USART1_IRQn, 0x12, &PTR_rx_buffer3_0008093c, &PTR_tx_buffer3_00080948);\n  USARTClass PTR_Serial3_00080964(PTR_Serial3_00080964, DAT_00080960, USART3_IRQn, 0x14, &PTR_rx_buffer4_00080944, &PTR_tx_buffer4_0008094c);\n}\n",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initializeSerialBuffers_0008089c"
        },
        "FUN_000816e4": {
            "renaming": {
                "FUN_000816e4": "set_flag_000816e4",
                "param_1": "flag_address"
            },
            "code": "void set_flag_000816e4(int flag_address)\n{\n  *(int *)(flag_address + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e4",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_000816e4"
        },
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "processDataAndCallFunction_000817c8",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "temp2",
                "uStack_8": "temp3",
                "uStack_4": "temp4",
                "_vfFUN_000817c8_r": "callFunction"
            },
            "code": "void processDataAndCallFunction_000817c8(int data, int* param2, int* param3, int* param4)\n{\n  int temp2 = *param2;\n  int temp3 = *param3;\n  int temp4 = *param4;\n  callFunction(*(int *)PTR__impure_ptr_000817ec, *(int *)(*(int *)PTR__impure_ptr_000817ec + 8), data, &temp2);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "processDataAndCallFunction_000817c8"
        },
        "FUN_00080750": {
            "renaming": {
                "FUN_00080750": "handleSerial1Interrupt_00080750",
                "PTR_Serial1_00080758": "serial1"
            },
            "code": "void handleSerial1Interrupt_00080750(void)\n{\n  UARTClass* PTR_Serial1_00080758 = (UARTClass*)PTR_Serial1_00080758;\n  PTR_Serial1_00080758->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080750",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial1Interrupt_00080750"
        },
        "FUN_00080f0a": {
            "renaming": {
                "FUN_00080f0a": "do_nothing_00080f0a"
            },
            "code": "\nvoid do_nothing_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f0a"
        },
        "FUN_00080ea4": {
            "renaming": {
                "FUN_00080ea4": "check_strings_00080ea4",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int check_strings_00080ea4(char *old_string, char *new_string) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ea4",
            "calling": [],
            "imported": false,
            "current_name": "check_strings_00080ea4"
        },
        "FUN_00082814": {
            "renaming": {
                "FUN_00082814": "get_signal_return_value_00082814",
                "__pid": "pid",
                "__sig": "signal",
                "iVar1": "return_value"
            },
            "code": "int get_signal_return_value_00082814(__pid_t pid, int signal){\n  int return_value = _get_signal_return_value_00082814_r(*(undefined4 *)PTR__impure_ptr_00082820, pid, signal);\n  return return_value;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082814",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_return_value_00082814"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "configurePin_00080f0c",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "uVar3": "pinType",
                "bVar4": "pinState",
                "bVar5": "pinState",
                "iVar6": "pinConfig",
                "iVar7": "pinDescriptionIndex"
            },
            "code": "void configurePin_00080f0c(uint32_t pinNumber, uint32_t pinMode) {\\n  uint8_t* pinStatus = PTR_g_pinStatus_0008100c;\\n  uint8_t* pinDescription = PTR_g_APinDescription_00081008;\\n  if (pinDescription[pinNumber * 0x1c + 0xc] != \"\\0\") {\\n    if ((pinStatus[pinNumber] & 0xf) == 4) {\\n      adc_disable_channel(DAT_00081010,pinDescription[pinNumber * 0x1c + 0x19]);\\n    }\\n    uint8_t pinState = pinStatus[pinNumber] & 0xf;\\n    if ((pinState < 3) && (pinStatus[pinNumber] != 0)) {\\n      if (pinState == 2) {\\n        if (pinMode == 0) {\\n          return;\\n        }\\n      }\\n      else if (pinState == 1) {\\n        if (pinMode == 2) {\\n          return;\\n        }\\n      }\\n      else if (pinState == 3) {\\n        if (pinMode == 1) {\\n          return;\\n        }\\n        goto LAB_00080f68;\\n      }\\n    }\\n    if (pinMode != 1) {\\nLAB_00080f68:\\n      if (pinMode == 0) {\\n        int pinDescriptionIndex = pinNumber * 0x1c;\\n        pmc_enable_periph_clk(*(undefined4 *)(pinDescription + pinDescriptionIndex + 8));\\n        PIO_Configure(*(undefined4 *)(pinDescription + pinDescriptionIndex),3,*(undefined4 *)(pinDescription + pinDescriptionIndex + 4),0);\\n        pinState = pinStatus[pinNumber] & 0xf0 | 2;\\n      }\\n      else {\\n        if (pinMode != 2) {\\n          return;\\n        }\\n        int pinDescriptionIndex = pinNumber * 0x1c;\\n        pmc_enable_periph_clk(*(undefined4 *)(pinDescription + pinDescriptionIndex + 8));\\n        PIO_Configure(*(undefined4 *)(pinDescription + pinDescriptionIndex),3,*(undefined4 *)(pinDescription + pinDescriptionIndex + 4),1);\\n        pinState = pinStatus[pinNumber] & 0xf0 | 1;\\n      }\\n      pinStatus[pinNumber] = pinState;\\n      return;\\n    }\\n    int pinDescriptionIndex = pinNumber * 0x1c;\\n    int pinConfig = *(int *)(pinDescription + pinDescriptionIndex);\\n    uint32_t pinType = pinStatus[pinNumber] >> 4 == 0 ? 4 : 5;\\n    PIO_Configure(pinConfig, pinType, *(undefined4 *)(pinDescription + pinDescriptionIndex + 4), *(undefined4 *)(pinDescription + pinDescriptionIndex + 0x10));\\n    pinStatus[pinNumber] = pinStatus[pinNumber] & 0xf0 | 3;\\n    if (*(int *)(pinConfig + 0x18) == -1) {\\n      pmc_disable_periph_clk(*(undefined4 *)(pinDescription + pinDescriptionIndex + 8));\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "adc_disable_channel",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "PIO_Configure"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "attach",
                "setup",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "configurePin_00080f0c"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_000844e0(int *result, int file_descriptor, int offset, int whence) {\n    int error = errno;\n    errno = 0;\n    int seek_result = lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && errno != 0) {\n        *result = errno;\n        errno = error;\n        return;\n    }\n    errno = error;\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "FUNC_00083b10"
            },
            "code": "\nvoid FUNC_00083b10(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083c98;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083c98 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083ca0;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083ca4);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083c9c)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083ba4;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083c98 + 4) =\n             *(uint *)(PTR___malloc_av__00083c98 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083b10",
            "calling": [
                "__sfvwrite_r",
                "_fclose_r",
                "_realloc_r",
                "_malloc_r",
                "free",
                "__swsetup_r",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083b10"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_0008236c(int *error_code, int size) {\n  undefined *errno_ptr;\n  caddr_t memory_ptr;\n  errno_ptr = PTR_errno_0008238c;\n  *(undefined4 *)PTR_errno_0008238c = 0;\n  memory_ptr = _sbrk(size);\n  if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "write_to_buffer_000842a4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "buffer_start",
                "param_4": "buffer_size",
                "uVar1": "character_short",
                "uVar2": "character_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "buffer_position"
            },
            "code": "uint write_to_buffer_000842a4(int file_descriptor, uint character, undefined4 *buffer_start, undefined4 buffer_size)\n{\n  ushort character_short;\n  uint character_uint;\n  undefined *buffer_pointer;\n  int buffer_position;\n  \n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_short = *(ushort *)(buffer_start + 3);\n  character_uint = (uint)character_short;\n  buffer_start[2] = buffer_start[6];\n  if ((-1 < (int)(character_uint << 0x1c)) || (buffer_position = buffer_start[4], buffer_position == 0)) {\n    buffer_position = __swsetup_r(file_descriptor, buffer_start, character_short, character_uint, buffer_size);\n    if (buffer_position != 0) {\n      return 0xffffffff;\n    }\n    character_short = *(ushort *)(buffer_start + 3);\n    buffer_position = buffer_start[4];\n    character_uint = (uint)character_short;\n  }\n  character = character & 0xff;\n  if ((int)(character_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer_start;\n    buffer_position = (int)buffer_pointer - buffer_position;\n    if (buffer_position < (int)buffer_start[5]) {\nLAB_000842d6:\n      buffer_position = buffer_position + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer_start[0x19] = buffer_start[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer_start;\n    *(ushort *)(buffer_start + 3) = character_short | 0x2000;\n    buffer_position = (int)buffer_pointer - buffer_position;\n    if (buffer_position < (int)buffer_start[5]) goto LAB_000842d6;\n  }\n  buffer_position = _fflush_r(file_descriptor, buffer_start);\n  if (buffer_position != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer_start;\n  buffer_position = 1;\nLAB_000842d8:\n  buffer_start[2] = buffer_start[2] + -1;\n  *buffer_start = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((buffer_start[5] == buffer_position) ||\n      (((int)((uint)*(ushort *)(buffer_start + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (buffer_position = _fflush_r(file_descriptor, buffer_start), buffer_position != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_buffer_000842a4"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "convert_and_write_to_stream_000839b4",
                "param_1": "encoding",
                "param_2": "character",
                "param_3": "stream",
                "uVar1": "mb_max",
                "iVar2": "write_result",
                "uVar3": "converted_char",
                "pbVar4": "stream_pos",
                "uVar5": "buffer_index",
                "local_1c": "buffer[0]",
                "abStack_1b": "buffer"
            },
            "code": "uint convert_and_write_to_stream_000839b4(undefined4 encoding, uint character, byte **stream)\n{\n  uint mb_max;\n  int write_result;\n  uint converted_char;\n  byte *stream_pos;\n  byte buffer[3];\n  \n  if ((int)((uint)*(ushort *)(stream + 3) << 0x12) >= 0) {\n    *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 0x2000;\n    stream[0x19] = (byte *)((uint)stream[0x19] | 0x2000);\n  }\n  mb_max = __locale_mb_cur_max();\n  if ((mb_max == 1) && (character - 1 < 0xff)) {\n    converted_char = character & 0xff;\n    buffer[0] = (byte)converted_char;\n  }\n  else {\n    mb_max = _wcrtomb_r(encoding, &buffer[0], character, stream + 0x17);\n    if (mb_max == 0xffffffff) {\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (mb_max == 0) {\n      return character;\n    }\n    converted_char = (uint)buffer[0];\n  }\n  stream_pos = *stream + -1;\n  *stream = stream_pos + 1;\n  while (1) {\n    if ((int)stream_pos < 0) {\n      if ((int)stream[6] <= (int)stream_pos) {\n        **stream = (byte)converted_char;\n        stream_pos = *stream;\n        converted_char = (uint)*stream_pos;\n        if (converted_char != 10) {\n          goto LAB_00083a04;\n        }\n      }\n      write_result = __swbuf_r(encoding, converted_char, stream);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **stream = (byte)converted_char;\n      stream_pos = *stream;\nLAB_00083a04:\n      *stream = stream_pos + 1;\n    }\n    if (mb_max <= (uint)(stream_pos - *stream) + 1) {\n      return character;\n    }\n    converted_char = (uint)buffer[(uint)(stream_pos - *stream)];\n    stream_pos = stream_pos + 1;\n  }\n}",
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_and_write_to_stream_000839b4"
        },
        "FUN_00081176": {
            "renaming": {
                "FUN_00081176": "printNumber_00081176",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "unsignedLength"
            },
            "code": "size_t __thiscall printNumber_00081176(Print *printer, int number, int base) {\n  size_t length;\n  if (base == 0) {\n    length = (**printer->_vptr_Print)(printer, number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length = printNumber_00081176(printer, '-');\n      length += printUnsignedNumber(printer, -number, (uint8_t)base);\n      return length;\n    }\n  } else {\n    base &= 0xff;\n  }\n  length = printUnsignedNumber(printer, number, (uint8_t)base);\n  return length;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printNumber_00081176"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_file_mode_to_binary_00080eb0",
                "file_UNUSED": "unused_file",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_binary_00080eb0(stat *file_stat){\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_binary_00080eb0"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "convertStringToLong_00081734",
                "__nptr": "inputString",
                "lVar1": "result"
            },
            "code": "long convertStringToLong_00081734(char* inputString) {\n  long result = strtol(inputString, (char **)0x0, 10);\n  return result;\n}",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "toInt"
            ],
            "imported": false,
            "current_name": "convertStringToLong_00081734"
        },
        "FUN_00080768": {
            "renaming": {
                "FUN_00080768": "handle_uart_interrupt_00080768",
                "PTR_Serial3_00080770": "serial_instance"
            },
            "code": "void handle_uart_interrupt_00080768(void)\n{\n  UARTClass* PTR_Serial3_00080770 = (UARTClass*)PTR_Serial3_00080770;\n  PTR_Serial3_00080770->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080768",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080768"
        },
        "FUN_00082824": {
            "renaming": {
                "__sprint_r_part_0": "__sfvwrite_r_part_0",
                "param_1": "file_descriptor",
                "param_2": "buffer_pointer",
                "param_3": "stream_buffer",
                "piVar1": "current_buffer_ptr",
                "iVar2": "return_value",
                "piVar3": "current_stream_buffer_ptr",
                "uVar4": "element_index",
                "puVar5": "current_stream_buffer_element_ptr",
                "uVar6": "stream_buffer_size",
                "uVar7": "element_count",
                "FUN_00082824": "__sfvwrite_r_part_0_00082824"
            },
            "code": "int __sfvwrite_r_part_0_00082824(undefined4 file_descriptor, int buffer_pointer, int **stream_buffer) {\n  int *current_buffer_ptr;\n  int return_value;\n  int *current_stream_buffer_ptr;\n  uint stream_buffer_size;\n  undefined4 *current_stream_buffer_element_ptr;\n  uint element_count;\n  uint element_index;\n  \n  if (-1 < *(int *)(buffer_pointer + 100) << 0x12) {\n    return_value = __sfvwrite_r();\n    stream_buffer[2] = (int *)0x0;\n    stream_buffer[1] = (int *)0x0;\n    return return_value;\n  }\n  current_stream_buffer_ptr = stream_buffer[2];\n  current_buffer_ptr = *stream_buffer;\n  while (current_stream_buffer_ptr != (int *)0x0) {\n    stream_buffer_size = current_buffer_ptr[1];\n    element_count = stream_buffer_size >> 2;\n    if (element_count != 0) {\n      current_stream_buffer_element_ptr = (undefined4 *)(*current_buffer_ptr + -4);\n      element_index = 0;\n      do {\n        current_stream_buffer_element_ptr = current_stream_buffer_element_ptr + 1;\n        return_value = _fputwc_r(file_descriptor, *current_stream_buffer_element_ptr, buffer_pointer);\n        element_index = element_index + 1;\n        if (return_value == -1) goto LAB_00082864;\n      } while (element_count != element_index);\n      current_stream_buffer_ptr = stream_buffer[2];\n    }\n    current_stream_buffer_ptr = (int *)((int)current_stream_buffer_ptr - (stream_buffer_size & 0xfffffffc));\n    stream_buffer[2] = current_stream_buffer_ptr;\n    current_buffer_ptr = current_buffer_ptr + 2;\n  }\n  return_value = 0;\nLAB_00082864:\n  stream_buffer[2] = (int *)0x0;\n  stream_buffer[1] = (int *)0x0;\n  return return_value;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__sfvwrite_r_part_0_00082824"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_valid_bit_00080a94",
                "param_1": "data_ptr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "code": "uint check_valid_bit_00080a94(int data_ptr, uint mask) {\n  uint result = *(uint *)(data_ptr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(data_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_valid_bit_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "DAT_00081620": "watchdog_timer_address"
            },
            "code": "void disable_watchdog_timer_00081618(int DAT_00081620)\n{\n  WDT_Disable(DAT_00081620);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint dividend, int divisor, uint multiplicand_low, uint multiplicand_high, int *difference) {\n  uint quotient = dividend / divisor;\n  ulonglong product = (ulonglong)multiplicand_high << 32 | multiplicand_low;\n  product *= quotient;\n  difference[0] = dividend - (uint)product;\n  difference[1] = divisor - (int)(product >> 32) - (uint)(dividend < (uint)product);\n  return;\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "write_memory_00081f00",
                "__s": "address",
                "__c": "value",
                "__n": "size",
                "puVar1": "current_word",
                "puVar2": "aligned_address",
                "puVar3": "end_address",
                "uVar4": "repeated_value",
                "uVar5": "remaining_bytes",
                "bVar6": "is_aligned"
            },
            "code": "void * write_memory_00081f00(void *address, int value, size_t size)\n{\n  uint *current_word;\n  uint *aligned_address;\n  uint *end_address;\n  uint repeated_value;\n  uint remaining_bytes;\n  bool is_aligned;\n  \n  aligned_address = (uint *)address;\n  is_aligned = ((uint)address & 3) == 0;\n  \n  if (!is_aligned && size > 0) {\n    *(char *)aligned_address = (char)value;\n    aligned_address = (uint *)((int)aligned_address + 1);\n    size--;\n  }\n  \n  repeated_value = value & 0xffU | (value & 0xffU) << 8;\n  repeated_value = repeated_value | repeated_value << 0x10;\n  \n  end_address = (uint *)((int)aligned_address + (size & 0xfffffff0));\n  \n  while (aligned_address < end_address) {\n    *aligned_address = repeated_value;\n    aligned_address[1] = repeated_value;\n    aligned_address[2] = repeated_value;\n    aligned_address[3] = repeated_value;\n    aligned_address += 4;\n  }\n  \n  remaining_bytes = size & 3;\n  \n  if (remaining_bytes != 0) {\n    current_word = (uint *)((int)aligned_address + 1);\n    while (remaining_bytes > 0) {\n      *(char *)current_word = (char)value;\n      current_word = (uint *)((int)current_word + 1);\n      remaining_bytes--;\n    }\n  }\n  \n  return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "write_memory_00081f00"
        },
        "FUN_0008075c": {
            "renaming": {
                "FUN_0008075c": "handleSerial2Interrupt_0008075c",
                "PTR_Serial2_00080764": "serial2"
            },
            "code": "void handleSerial2Interrupt_0008075c(void)\n{\n  UARTClass::IrqHandler(PTR_Serial2_00080764);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008075c",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial2Interrupt_0008075c"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "returnErrorIfFileNotUsed_00080eaa",
                "file_UNUSED": "fileNotUsed"
            },
            "code": "int returnErrorIfFileNotUsed_00080eaa(int fileNotUsed) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "returnErrorIfFileNotUsed_00080eaa"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "divide_or_modulo_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ divide_or_modulo_00084530(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_qDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_qDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_qDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_modulo_00084530"
        },
        "FUN_00085860": {
            "renaming": {
                "FUN_00085860": "do_nothing_00085860"
            },
            "code": "\nvoid do_nothing_00085860(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085860",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085860"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "checkSerialEvents_00080970",
                "iVar1": "availableBytes",
                "UARTClass::available": "UARTClass::getAvailableBytes",
                "PTR_Serial_000809a4": "PTR_Serial_000809a4",
                "serialEvent": "serialEvent",
                "PTR_Serial1_000809a8": "PTR_Serial1_000809a8",
                "serialEvent1": "serialEvent1",
                "PTR_Serial2_000809ac": "PTR_Serial2_000809ac",
                "serialEvent2": "serialEvent2",
                "PTR_Serial3_000809b0": "PTR_Serial3_000809b0",
                "serialEvent3": "serialEvent3"
            },
            "code": "void checkSerialEvents_00080970(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_000809a4);\n  if (availableBytes != 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_000809a8);\n  if (availableBytes != 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_000809ac);\n  if (availableBytes != 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_000809b0);\n  if (availableBytes != 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent3",
                "available",
                "serialEvent2",
                "serialEvent1",
                "serialEvent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialEvents_00080970"
        },
        "FUN_000806ac": {
            "renaming": {
                "FUN_000806ac": "setAngle_000806ac",
                "value": "angle",
                "iVar1": "minOffset",
                "iVar2": "angleOffset",
                "PTR_servos_000806f4": "servoPointerBase",
                "PTR_SystemCoreClock_000806ec": "systemCoreClockPointer",
                "DAT_000806f0": "prescalerValue"
            },
            "code": "void __thiscall setAngle_000806ac(Servo *this, int angle) {\n  int minOffset = 0x88 - this->minAngle;\n  int angleOffset = minOffset * 4;\n  if ((angle + minOffset * -4 < 0 == SBORROW4(angle,angleOffset)) && (angle <= (600 - this->maxAngle) * 4)) {\n    angleOffset = angle;\n  }\n  *(uint *)(PTR_servos_000806f4 + (uint)this->servoIndex * 8 + 4) = (*(uint *)PTR_SystemCoreClock_000806ec / DAT_000806f0) * (angleOffset + -2) >> 5;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806ac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setAngle_000806ac"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "flag_memory_location",
                "DAT_20070020": "flag_value_1",
                "DAT_20070028": "flag_pointer",
                "DAT_20070024": "flag_value_2"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(PTR_2007001c + 8) << 0x1f);\n  *(undefined4 *)(PTR_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(PTR_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "print_formatted_string_000834f0",
                "param_1": "stream",
                "param_2": "format_string_ptr",
                "iVar1": "num_chars_written",
                "iVar2": "fflush_result",
                "local_488": "buffer_ptr",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "precision",
                "local_478": "buffer_ptr",
                "local_474": "buffer_capacity",
                "local_470": "num_bytes_written",
                "local_464": "width",
                "local_424": "string_length",
                "auStack_420": "buffer"
            },
            "code": "int print_formatted_string_000834f0(FILE* stream, int format_string_ptr){\n  int num_chars_written;\n  int fflush_result;\n  char* buffer_ptr;\n  char buffer[1024];\n  uint16_t flags;\n  uint32_t buffer_size = 1024;\n  uint32_t buffer_capacity = 1024;\n  uint32_t num_bytes_written = 0;\n  uint32_t string_length = *(uint32_t*)(format_string_ptr + 100);\n  uint32_t arg_list_ptr = *(uint32_t*)(format_string_ptr + 0x1c);\n  uint16_t precision = *(uint16_t*)(format_string_ptr + 0xe);\n  uint32_t width = *(uint32_t*)(format_string_ptr + 0x24);\n  flags = *(uint16_t*)(format_string_ptr + 0xc) & 0xfffd;\n  buffer_ptr = buffer;\n  num_chars_written = vsnprintf(buffer_ptr, buffer_size, (char*)arg_list_ptr, NULL);\n  if ((num_chars_written >= 0) && (fflush_result = fflush(stream), fflush_result != 0)) {\n    num_chars_written = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(uint16_t*)(format_string_ptr + 0xc) = *(uint16_t*)(format_string_ptr + 0xc) | 0x40;\n  }\n  return num_chars_written;\n}",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_000834f0"
        },
        "FUN_0008125a": {
            "renaming": {
                "FUN_0008125a": "read_byte_from_rx_buffer_0008125a",
                "this": "uart",
                "pRVar2": "rx_buffer",
                "uVar1": "byte"
            },
            "code": "uint32_t read_byte_from_rx_buffer_0008125a(UARTClass *uart) {\n  uint32_t byte;\n  RingBuffer *rx_buffer = uart->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    byte = 0xffffffff;\n  }\n  else {\n    byte = (uint32_t)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008125a",
            "calling": [],
            "imported": false,
            "current_name": "read_byte_from_rx_buffer_0008125a"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "printNumber_0008113a",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "size1",
                "sVar2": "size2"
            },
            "code": "size_t __thiscall printNumber_0008113a(Print *printer, long number, int base) {\n  size_t size1;\n  size_t size2;\n  if (base == 0) {\n    size1 = (**printer->_vptr_Print)(printer, number & 0xff);\n    return size1;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      size1 = printNumber_0008113a(printer, '-');\n      size2 = printNumber_0008113a(printer, -number, (uint8_t)base);\n      return size2 + size1;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  size1 = printNumber_0008113a(printer, number, (uint8_t)base);\n  return size1;\n}",
            "called": [
                "print",
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "println",
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_0008113a"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "printMessage_000810d8",
                "PTR_DAT_000810e4": "message",
                "sVar1": "bytes_written"
            },
            "code": "size_t printMessage_000810d8(Print *this, const char* PTR_DAT_000810e4)\n{\n  size_t bytes_written;\n  bytes_written = write(this, PTR_DAT_000810e4);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printMessage_000810d8"
        },
        "FUN_00080f04": {
            "renaming": {
                "FUN_00080f04": "getTickCount_00080f04",
                "PTR__dwTickCount_000816e0": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00080f04(void)\n{\n  uint32_t* PTR__dwTickCount_000816e0 = (uint32_t*)PTR__dwTickCount_000816e0;\n  return *PTR__dwTickCount_000816e0;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "timedRead"
            ],
            "imported": false,
            "current_name": "getTickCount_00080f04"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8::FUN_000805a8": "initialize_servo",
                "this": "servo_instance",
                "bVar1": "servo_count",
                "puVar2": "clock_speed_ptr",
                "PTR_FUN_000805a8Count_000805d8": "servo_count_ptr",
                "PTR_SystemCoreClock_000805dc": "system_core_clock_ptr",
                "this->servoIndex": "servo_instance->servo_index",
                "PTR_servos_000805e4": "servo_array_ptr",
                "DAT_000805e0": "servo_frequency",
                "FUN_000805a8": "initialize_servo_000805a8"
            },
            "code": "initialize_servo_000805a8 * __thiscall initialize_servo_000805a8(initialize_servo_000805a8 *servo_instance)\n{\n  byte servo_count = *PTR_initialize_servo_000805a8Count_000805d8;\n  if (servo_count < 0x3c) {\n    *PTR_initialize_servo_000805a8Count_000805d8 = servo_count + 1;\n    uint *clock_speed_ptr = PTR_SystemCoreClock_000805dc;\n    servo_instance->servo_index = servo_count;\n    *(uint *)(PTR_servos_000805e4 + (uint)servo_count * 8 + 4) = (*(uint *)clock_speed_ptr / DAT_000805e0) * 0x5dc >> 5;\n    return servo_instance;\n  }\n  servo_instance->servo_index = 0xff;\n  return servo_instance;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "initialize_servo_000805a8"
        },
        "FUN_00080184": {
            "renaming": {
                "FUN_00080184": "initialize_servos_and_strings_00080184",
                "this": "this_string",
                "cstr": "string_ptr",
                "uVar1": "exit_func_param",
                "puVar2": "exit_func_handle",
                "this_00": "exit_func_handle_2",
                "in_r3": "in_r3",
                "PTR_DAT_000801cc": "string_ptr",
                "PTR_command_000801c8": "this_string",
                "PTR_steering_000801c4": "servo_steering_ptr",
                "PTR_throttle_000801d0": "servo_throttle_ptr",
                "PTR___dso_handle_000801d8": "exit_func_handle",
                "DAT_000801d4": "exit_func_param",
                "PTR_value_000801dc": "exit_func_handle_2",
                "String::String": "String::String",
                "Servo::Servo": "Servo::Servo",
                "__aeabi_atexit": "__aeabi_atexit"
            },
            "code": "void initialize_servos_and_strings_00080184(void)\n{\n    undefined *PTR_DAT_000801cc;\n    undefined4 DAT_000801d4;\n    undefined *PTR___dso_handle_000801d8;\n    undefined *PTR_command_000801c8;\n    undefined *PTR_value_000801dc;\n    undefined *PTR_steering_000801c4;\n    undefined *PTR_throttle_000801d0;\n\n    PTR_DAT_000801cc = PTR_DAT_000801cc;\n    PTR_command_000801c8 = PTR_command_000801c8;\n    Servo::Servo((Servo *)PTR_steering_000801c4);\n    Servo::Servo((Servo *)PTR_throttle_000801d0);\n    PTR___dso_handle_000801d8 = PTR___dso_handle_000801d8;\n    DAT_000801d4 = DAT_000801d4;\n    String::String((String *)PTR_command_000801c8,PTR_DAT_000801cc);\n    PTR_value_000801dc = PTR_value_000801dc;\n    __aeabi_atexit(PTR_command_000801c8,DAT_000801d4,PTR___dso_handle_000801d8);\n    String::String((String *)PTR_value_000801dc,PTR_DAT_000801cc);\n    __aeabi_atexit(PTR_value_000801dc,DAT_000801d4,PTR___dso_handle_000801d8,in_r3);\n    return;\n}",
            "called": [
                "Servo",
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080184",
            "calling": [],
            "imported": false,
            "current_name": "initialize_servos_and_strings_00080184"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "main",
                "loop",
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "__thiscall Print::FUN_000810cc": "size_t Print::printChar",
                "this": "printInstance",
                "c": "character",
                "sVar1": "size",
                "FUN_000810cc": "Print::printChar_000810cc"
            },
            "code": "size_t Print::printChar_000810cc(Print *printInstance,char character) {\n  size_t size;\n  size = (**printInstance->_vptr_Print)(printInstance,(int)character);\n  return size;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "Print::printChar_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "read_00081276",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numberOfBytesToRead",
                "bVar1": "byteRead",
                "pRVar2": "ringBuffer"
            },
            "code": "ssize_t __thiscall read_00081276(UARTClass *this,int fileDescriptor,void *buffer,size_t numberOfBytesToRead)\n{\n  byte byteRead;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = this->_rx_buffer;\n  if (ringBuffer->_iHead != ringBuffer->_iTail) {\n    byteRead = ringBuffer->_aucBuffer[ringBuffer->_iTail];\n    ringBuffer->_iTail = (ringBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "check_if_terminal_000844bc",
                "param_1": "error_code",
                "param_2": "terminal_fd",
                "puVar1": "errno_address",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_000844bc(int *error_code, int terminal_fd)\n{\n  undefined *errno_address = PTR_errno_000844dc;\n  *(undefined4 *)errno_address = 0;\n  int is_terminal = _isatty(terminal_fd);\n  if ((is_terminal == -1) && (*(int *)errno_address != 0)) {\n    *error_code = *(int *)errno_address;\n    return;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_000844bc"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "new_value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int new_value) {\n  int offset = index * 0x40 + 0x14;\n  int address_to_set = base_address + offset;\n  *(int*)(address_to_set) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "initialize_buffer_0008356c",
                "param_1": "error_code",
                "param_2": "buffer",
                "uVar1": "flag_bit_0",
                "iVar2": "buffer_size",
                "uVar3": "flags_as_int",
                "uVar4": "flags",
                "PTR__impure_ptr_0008362c": "PTR_impure_ptr",
                "_free_r": "free_r",
                "__sinit": "sinit",
                "__smakebuf_r": "smakebuf_r"
            },
            "code": "int initialize_buffer_0008356c(int *error_code, int *buffer){\n  uint16_t flags = *(uint16_t *)(buffer + 3);\n  uint32_t flags_as_int = (uint32_t)flags;\n  int buffer_size = buffer[4];\n  \n  if (*(int *)PTR__impure_ptr_0008362c != 0 && *(int *)(*(int *)PTR__impure_ptr_0008362c + 0x38) == 0){\n    __sinit();\n  }\n  \n  if ((int)(flags_as_int << 0x1c) < 0){\n    buffer_size = buffer[5];\n  }\n  else{\n    if (-1 < (int)(flags_as_int << 0x1b)){\n      *error_code = 9;\n      *(uint16_t *)(buffer + 3) = flags | 0x40;\n      return -1;\n    }\n    \n    if ((int)(flags_as_int << 0x1d) < 0){\n      if ((int *)buffer[0xc] != (int *)0x0){\n        if ((int *)buffer[0xc] != buffer + 0x10){\n          _free_r(error_code);\n          flags = *(uint16_t *)(buffer + 3);\n        }\n        buffer[0xc] = 0;\n      }\n      buffer_size = buffer[4];\n      flags = flags & 0xffdb;\n      *buffer = buffer_size;\n      buffer[1] = 0;\n    }\n    else{\n      buffer_size = buffer[4];\n    }\n    *(uint16_t *)(buffer + 3) = flags | 8;\n    flags_as_int = (uint32_t)(flags | 8);\n  }\n  \n  if (buffer_size == 0 && ((flags_as_int & 0x280) != 0x200)){\n    __smakebuf_r(error_code, buffer);\n    flags_as_int = (uint32_t)*(uint16_t *)(buffer + 3);\n    buffer_size = buffer[4];\n  }\n  \n  uint32_t flag_bit_0 = flags_as_int & 1;\n  if (flag_bit_0 == 0){\n    if (-1 < (int)(flags_as_int << 0x1e)){\n      flag_bit_0 = buffer[5];\n    }\n    buffer[2] = flag_bit_0;\n  }\n  else{\n    buffer[6] = -buffer[5];\n    buffer[2] = 0;\n  }\n  \n  if (buffer_size == 0 && ((int)(flags_as_int << 0x18) < 0)){\n    *(uint16_t *)(buffer + 3) = *(uint16_t *)(buffer + 3) | 0x40;\n    return -1;\n  }\n  \n  return 0;\n}",
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_buffer_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initializeSystemClock_00080b98",
                "puVar1": "coreClockPtr",
                "iVar2": "delayCounter"
            },
            "code": "void initializeSystemClock_00080b98(void)\n{\n  uint32_t *coreClockPtr;\n  int32_t delayCounter;\n  coreClockPtr = PTR_SystemCoreClock_00080c1c;\n  *PTR_SystemCoreClock_00080c1c = 8000000;\n  coreClockPtr[0x80] = 8000000;\n  delayCounter = DAT_00080c08;\n  if (*(int32_t *)(DAT_00080c08 + 0x20) << 7 >= 0) {\n    *(uint32_t *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n    do {\n    } while (*(int32_t *)(delayCounter + 0x68) << 0x1f >= 0);\n  }\n  *(uint32_t *)(delayCounter + 0x20) = DAT_00080c0c;\n  do {\n  } while (*(int32_t *)(delayCounter + 0x68) << 0xf >= 0);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = *(uint32_t *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (*(int32_t *)(delayCounter + 0x68) << 0x1c >= 0);\n  *(uint32_t *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n  do {\n  } while (*(int32_t *)(delayCounter + 0x68) << 0x1e >= 0);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x11;\n  do {\n  } while (*(int32_t *)(delayCounter + 0x68) << 0x1c >= 0);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x12;\n  do {\n  } while (*(int32_t *)(delayCounter + 0x68) << 0x1c >= 0);\n  *coreClockPtr = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initializeSystemClock_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "printAndReturnSize_000810e8",
                "this": "instance",
                "c": "stringToPrint",
                "sVar1": "bytesWritten",
                "sVar2": "totalBytesWritten"
            },
            "code": "size_t __thiscall printAndReturnSize_000810e8(Print *instance,char *stringToPrint)\n{\n  size_t bytesWritten;\n  size_t totalBytesWritten;\n  bytesWritten = write(instance,stringToPrint);\n  totalBytesWritten = printAndReturnSize_000810e8(instance);\n  return totalBytesWritten + bytesWritten;\n}",
            "called": [
                "println",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printAndReturnSize_000810e8"
        },
        "FUN_000843b8": {
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data",
                "param_4": "data_length",
                "puVar1": "errno_ptr",
                "iVar2": "bytes_written"
            },
            "code": "void write_to_file_000843b8(int *error_code, int file_descriptor, char *data, int data_length)\n{\n  int *errno_ptr = PTR_errno_000843dc;\n  *(int *)PTR_errno_000843dc = 0;\n  int bytes_written = _write(file_descriptor, data, data_length);\n  if ((bytes_written == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843b8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000843b8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_0008073c": {
            "renaming": {
                "FUN_0008073c": "handle_UART_interrupt_0008073c",
                "PTR_Serial_00080744": "serial_ptr"
            },
            "code": "void handle_UART_interrupt_0008073c(void)\n{\n  UARTClass* PTR_Serial_00080744 = (UARTClass*)PTR_Serial_00080744;\n  PTR_Serial_00080744->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_0008073c"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clearString_00081480",
                "this": "str",
                "buffer": "str_buffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void __thiscall clearString_00081480(String *str)\n{\n  if (str->buffer != NULL) {\n    free(str->buffer);\n  }\n  str->buffer = NULL;\n  str->length = 0;\n  str->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "allocate_memory_00081f9c",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "allocated_ptr",
                "_FUN_00081f9c_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_00081f9c(void *ptr, size_t size) {\n  void *allocated_ptr;\n  allocated_ptr = (void *)_allocate_memory_00081f9c_r(*(undefined4 *)PTR__impure_ptr_00081fa8, ptr, size);\n  return allocated_ptr;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081f9c"
        },
        "FUN_00081244": {
            "renaming": {
                "operator bool": "isUARTEnabled",
                "this": "uart",
                "FUN_00081244": "isUARTEnabled_00081244"
            },
            "code": "bool isUARTEnabled_00081244(UARTClass *uart) {\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081244",
            "calling": [],
            "imported": false,
            "current_name": "isUARTEnabled_00081244"
        },
        "FUN_000836fc": {
            "renaming": {
                "FUN_000836fc": "register_exit_handler_000836fc",
                "__func": "function",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_handler_000836fc(__func *function) {\n  int exit_proc_id = __register_exitproc(0, function, 0, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836fc",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_handler_000836fc"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "getReceivedDataLength_00081248",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headPosition",
                "_iTail": "tailPosition",
                "dataLength": "dataLength"
            },
            "code": "int __thiscall getReceivedDataLength_00081248(UARTClass *this)\n{\n  int headPosition = this->_rx_buffer->_iHead;\n  int tailPosition = this->_rx_buffer->_iTail;\n  int dataLength = headPosition - tailPosition & 0x7f;\n  return dataLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "imported": false,
            "current_name": "getReceivedDataLength_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "call_r_function_with_ptr_00081800",
                "__ptr": "ptr",
                "_FUN_00081800_r": "r_function",
                "PTR__impure_ptr_0008180c": "PTR__impure_ptr_0008180c"
            },
            "code": "void call_r_function_with_ptr_00081800(void *ptr)\n{\n  r_function(*((undefined4 *)PTR__impure_ptr_0008180c), ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "invalidate",
                "move",
                "~String"
            ],
            "imported": false,
            "current_name": "call_r_function_with_ptr_00081800"
        },
        "FUN_0008418c": {
            "renaming": {
                "FUN_0008418c": "process_signal_0008418c",
                "param_1": "result",
                "param_2": "signal_number",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "_Var1": "process_id",
                "uVar2": "return_value",
                "iVar3": "signal_handler_index",
                "pcVar4": "signal_handler_function"
            },
            "code": "undefined4 process_signal_0008418c(undefined4 *result,uint signal_number,undefined4 unused_param1,undefined4 unused_param2)\n{\n  __pid_t process_id;\n  undefined4 return_value;\n  int signal_handler_index;\n  code *signal_handler_function;\n  \n  if (signal_number > 31) {\n    *result = 0x16;\n    return 0xffffffff;\n  }\n  signal_handler_index = result[0xb7];\n  if ((signal_handler_index == 0) || (signal_handler_function = *(code **)(signal_handler_index + signal_number * 4), signal_handler_function == (code *)0x0)) {\n    process_id = _getpid_r();\n    return_value = _kill_r(result, process_id, signal_number, unused_param2);\n    return return_value;\n  }\n  if (signal_handler_function == (code *)0x1) {\n    return 0;\n  }\n  if (signal_handler_function != (code *)0xffffffff) {\n    *(undefined4 *)(signal_handler_index + signal_number * 4) = 0;\n    (*signal_handler_function)(signal_number);\n    return 0;\n  }\n  *result = 0x16;\n  return 1;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008418c",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_signal_0008418c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_00080b64": {
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "value",
                "param_2": "channel_index",
                "uVar1": "combined_value"
            },
            "code": "void set_channel_value_00080b64(uint32_t value, uint32_t channel_index)\n{\n  uint64_t combined_value = ((uint64_t)value << 32) | channel_index;\n  if (channel_index > 2) {\n    combined_value = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80,0x5c,PTR_s_set_channel_value_00080b64_00080b84,PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88);\n  }\n  *(uint32_t *)((int)combined_value + (int)((uint64_t)combined_value >> 0x20) * 0x40) = 5;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b64",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_value_00080b64"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "get_afl_call_result_0008014c",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "aflCall"
            },
            "code": "int get_afl_call_result_0008014c(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "get_afl_call_result_0008014c"
        },
        "FUN_0008159e": {
            "renaming": {
                "String::FUN_0008159e": "calculateStringLength",
                "this": "str",
                "c": "character",
                "uVar1": "length",
                "buf": "buffer",
                "sStack_a": "stackVar",
                "FUN_0008159e": "calculateStringLength_0008159e"
            },
            "code": "uchar calculateStringLength_0008159e(String* str, char character){\n  uchar length;\n  char buffer[2];\n  short stackVar;\n  length = calculateStringLength_0008159e(str, buffer, 1);\n  return length;\n}",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "calculateStringLength_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "initializePin_000806a0",
                "this": "servo",
                "pin": "pin",
                "uVar1": "result"
            },
            "code": "uint8_t __thiscall initializePin_000806a0(Servo *servo, int pin){\n  uint8_t result = initializePin_000806a0(servo, pin, 0x220, 0x960);\n  return result;\n}",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializePin_000806a0"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "addData_000811ca",
                "this": "buffer",
                "c": "data",
                "uVar1": "nextIndex",
                "_iHead": "_head",
                "_iTail": "_tail",
                "_aucBuffer": "_buffer"
            },
            "code": "void __thiscall addData_000811ca(RingBuffer *buffer, uint8_t data) {\n  uint8_t nextIndex = (buffer->_head + 1U) & 0x7f;\n  if (nextIndex != buffer->_tail) {\n    buffer->_buffer[buffer->_head] = data;\n    buffer->_head = nextIndex;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addData_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initializeServos_00080164",
                "PTR_throttle_0008017c": "throttleServo",
                "PTR_steering_00080180": "steeringServo"
            },
            "code": "void initializeServos_00080164(void)\n{\n  Servo::write(PTR_throttle_0008017c, 90);\n  Servo::write(PTR_steering_00080180, 90);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "loop",
                "setup"
            ],
            "imported": false,
            "current_name": "initializeServos_00080164"
        },
        "FUN_00081496": {
            "renaming": {
                "String::FUN_00081496": "allocateStringBuffer",
                "this": "str",
                "maxStrLen": "maxStrLen",
                "pcVar1": "newBuffer",
                "FUN_00081496": "allocateStringBuffer_00081496"
            },
            "code": "uchar allocateStringBuffer_00081496(String *str, uint maxStrLen) {\n  char *newBuffer = (char *)realloc(str->buffer, maxStrLen + 1);\n  if (newBuffer != NULL) {\n    str->buffer = newBuffer;\n    str->capacity = maxStrLen;\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "allocateStringBuffer_00081496"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "setPinValue_00081014",
                "ulPin": "pin",
                "ulVal": "value",
                "puVar1": "pinDescriptionPtr",
                "puVar2": "pinStatusPtr",
                "iVar3": "outputDataStatus",
                "uVar4": "outputData1",
                "uVar5": "outputData2",
                "uVar6": "shiftValue"
            },
            "code": "void setPinValue_00081014(uint32_t pin, uint32_t value) {\n  undefined *pinDescriptionPtr;\n  undefined *pinStatusPtr;\n  int outputDataStatus;\n  undefined4 outputData1;\n  undefined4 outputData2;\n  uint32_t shiftValue;\n  \n  pinStatusPtr = PTR_g_pinStatus_00081080;\n  pinDescriptionPtr = PTR_g_APinDescription_0008107c;\n  \n  if (PTR_g_APinDescription_0008107c[pin * 0x1c + 0xc] != \"\\0\") {\n    shiftValue = value;\n    \n    if ((PTR_g_pinStatus_00081080[pin] & 0xf) == 5) {\n      pinMode(pin,1);\n    }\n    \n    pinStatusPtr[pin] = pinStatusPtr[pin] & 0xf | (byte)(value << 4);\n    \n    outputData2 = *(undefined4 *)(pinDescriptionPtr + pin * 0x1c);\n    outputData1 = *(undefined4 *)(pinDescriptionPtr + pin * 0x1c + 4);\n    \n    outputDataStatus = PIO_GetOutputDataStatus(outputData2, outputData1);\n    \n    if (outputDataStatus == 0) {\n      PIO_PullUp(outputData2, outputData1, value);\n      return;\n    }\n    \n    PIO_SetOutput(outputData2, outputData1, value, 0, 1, shiftValue);\n  }\n  return;\n}",
            "called": [
                "PIO_SetOutput",
                "PIO_GetOutputDataStatus",
                "PIO_PullUp",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "loop",
                "init",
                "Servo_Handler"
            ],
            "imported": false,
            "current_name": "setPinValue_00081014"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "do_nothing_000845bc"
            },
            "code": "\nvoid do_nothing_000845bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000845bc"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_00083da2;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_00083da2;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_00083da2;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_00083da2;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_00083da2;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_00083da2:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memchr",
                "memmove",
                "_free_r",
                "_fflush_r",
                "memcpy",
                "_realloc_r",
                "_malloc_r",
                "__swsetup_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00084404": {
            "renaming": {
                "FUN_00084404": "flush_and_free_00084404",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "status"
            },
            "code": "undefined4 flush_and_free_00084404(int file_descriptor,int stream)\n{\n  undefined4 result;\n  int status;\n\n  if (stream != 0) {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n      result = _fflush_r(file_descriptor,stream);\n      if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(stream + 0x2c))(file_descriptor,*(undefined4 *)(stream + 0x1c)), status < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n        _free_r(file_descriptor,*(undefined4 *)(stream + 0x10));\n      }\n      if (*(int *)(stream + 0x30) != 0) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n          _free_r(file_descriptor);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n      }\n      if (*(int *)(stream + 0x44) != 0) {\n        _free_r(file_descriptor);\n        *(undefined4 *)(stream + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084404",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084404"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00081b3c;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00081b3c + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00081b3c + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + 0x10);\n  puVar12 = PTR___malloc_av__00081b3c + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00081b3c + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00081b3c + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00081d44 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00081d44 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00081c5e;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00081c5e:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00081b44;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_00081b1a;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00081b44 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00081b50;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00081b50 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00081b50 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00081b44 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00081b50;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00081b04;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_00081b48 < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_00081b48 = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00081b4c < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00081b4c = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "malloc",
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_program_completed_000800f4",
                "param_1": "program_text",
                "PTR_completed_7857_0008010c": "program_completed",
                "DAT_00080110": "end_of_text"
            },
            "code": "char* check_if_program_completed_000800f4(char* program_text) {\\n  if (*PTR_completed_7857_0008010c == \"\\0\") {\\n    if (program_text != NULL) {\\n      program_text = DAT_00080110;\\n    }\\n    *PTR_completed_7857_0008010c = 1;\\n  }\\n  return program_text;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_program_completed_000800f4"
        },
        "FUN_00080aec": {
            "renaming": {
                "FUN_00080aec": "check_bit_00080aec",
                "param_1": "bit_position",
                "uVar1": "mask",
                "uVar2": "result",
                "DAT_00080b28": "PTR_DATA"
            },
            "code": "int check_bit_00080aec(uint bit_position) {\n  if (bit_position < 45) {\n    if (bit_position < 32) {\n      uint mask = 1 << bit_position;\n      uint* ptr1 = (uint*)(DAT_00080b28 + 0x18);\n      uint result = *ptr1 & mask;\n      if (result == mask) {\n        uint* ptr2 = (uint*)(DAT_00080b28 + 0x14);\n        *ptr2 = result;\n      }\n    }\n    else {\n      uint mask = 1 << (bit_position - 32);\n      uint* ptr1 = (uint*)(DAT_00080b28 + 0x108);\n      uint result = *ptr1 & mask;\n      if (result == mask) {\n        uint* ptr2 = (uint*)(DAT_00080b28 + 0x104);\n        *ptr2 = result;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aec",
            "calling": [
                "end",
                "pinMode"
            ],
            "imported": false,
            "current_name": "check_bit_00080aec"
        },
        "FUN_0008136c": {
            "renaming": {
                "FUN_0008136c": "initialize_0008136c",
                "this": "self",
                "dwBaudRate": "baud_rate",
                "modeReg": "mode_reg",
                "puVar1": "system_core_clock_ptr",
                "pRVar2": "rx_buffer_ptr",
                "pUVar3": "uart_ptr"
            },
            "code": "void __thiscall initialize_0008136c(UARTClass *this,uint32_t baud_rate,uint32_t mode_reg) {\n  uint32_t *system_core_clock_ptr;\n  RingBuffer *rx_buffer_ptr;\n  RingBuffer *tx_buffer_ptr;\n  Uart *uart_ptr;\n  pmc_enable_periph_clk(this->_dwId);\n  uart_ptr = this->_pUart;\n  uart_ptr->UART_PTCR = 0x202;\n  uart_ptr->UART_CR = 0xac;\n  system_core_clock_ptr = PTR_SystemCoreClock_000813d4;\n  uart_ptr->UART_MR = mode_reg;\n  uart_ptr->UART_BRGR = *(uint32_t *)system_core_clock_ptr / baud_rate >> 4;\n  uart_ptr->UART_IDR = 0xffffffff;\n  uart_ptr->UART_IER = 0x61;\n  *(int *)(DAT_000813d8 + ((uint32_t)(int32_t)this->_dwIrq >> 5) * 4) =\n       1 << (uint32_t)(byte)(this->_dwIrq & 0x1f);\n  rx_buffer_ptr = this->_rx_buffer;\n  rx_buffer_ptr->_iTail = 0;\n  rx_buffer_ptr->_iHead = 0;\n  tx_buffer_ptr = this->_tx_buffer;\n  tx_buffer_ptr->_iTail = 0;\n  tx_buffer_ptr->_iHead = 0;\n  uart_ptr->UART_CR = 0x50;\n  return;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008136c",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_0008136c"
        },
        "FUN_000810c4": {
            "renaming": {
                "__thiscall Print::FUN_000810c4": "write_string_to_output",
                "*this": "print_obj",
                "str": "string_to_print",
                "sVar1": "bytes_written",
                "FUN_000810c4": "write_string_to_output_000810c4"
            },
            "code": "size_t write_string_to_output_000810c4(Print *print_obj, char *string_to_print) {\n  size_t bytes_written;\n  bytes_written = write(print_obj, string_to_print);\n  return bytes_written;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "write_string_to_output_000810c4"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "calculate_value_and_index_00080c98",
                "*param_1": "*output",
                "param_2": "input_length",
                "param_3": "divisor",
                "param_4": "factor",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "lookup_table"
            },
            "code": "uint calculate_value_and_index_00080c98(uint *output, uint input_length, int divisor, int factor) {\n  uint index = 0;\n  uint lookup_table[16] = {\n    *(uint *)PTR_DAT_00080d28,\n    *(uint *)(PTR_DAT_00080d28 + 4),\n    *(uint *)(PTR_DAT_00080d28 + 8),\n    *(uint *)(PTR_DAT_00080d28 + 0xc),\n    *(uint *)(PTR_DAT_00080d28 + 0x10),\n    *(uint *)(PTR_DAT_00080d28 + 0x14),\n    *(uint *)(PTR_DAT_00080d28 + 0x18),\n    *(uint *)(PTR_DAT_00080d28 + 0x1c),\n    *(uint *)(PTR_DAT_00080d28 + 0x20),\n    *(uint *)(PTR_DAT_00080d28 + 0x24),\n    *(uint *)(PTR_DAT_00080d28 + 0x28),\n    *(uint *)(PTR_DAT_00080d28 + 0x2c),\n    *(uint *)(PTR_DAT_00080d28 + 0x30),\n    *(uint *)(PTR_DAT_00080d28 + 0x34),\n    *(uint *)(PTR_DAT_00080d28 + 0x38),\n    *(uint *)(PTR_DAT_00080d28 + 0x3c)\n  };\n  output[0] = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  uint quotient = input_length / (uint)(divisor * 2);\n  if (input_length == divisor * 2 * quotient) {\n    quotient--;\n  }\n  for (uint i = 0; i < 16; i++) {\n    if ((uint)(factor * (int)(((uint64_t)input_length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= lookup_table[i]) {\n      output[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "calculate_value_and_index_00080c98"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "readUntilTimeout_000811e8",
                "this": "stream",
                "uVar1": "currentMillis",
                "iVar2": "readResult"
            },
            "code": "int __thiscall readUntilTimeout_000811e8(Stream *stream) {\n  uint32_t currentMillis;\n  int readResult;\n  currentMillis = millis();\n  stream->_startMillis = currentMillis;\n  do {\n    readResult = (*(stream->super_Print)._vptr_Print[3])();\n    if (readResult >= 0) {\n      return readResult;\n    }\n    currentMillis = millis();\n  } while (currentMillis - stream->_startMillis < stream->_timeout);\n  return -1;\n}",
            "called": [
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "readUntilTimeout_000811e8"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "controlVehicle_00080250",
                "puVar2": "rxModePtr",
                "puVar3": "MODE_VAL_PTR",
                "uVar4": "isEqual",
                "uVar5": "pulseWidth",
                "lVar6": "value",
                "iVar7": "availableBytes",
                "__fd": "fileDescriptor",
                "__in_chrg": "inCharge",
                "__in_chrg_00": "inCharge_00",
                "__fd_00": "fileDescriptor_00",
                "pvVar8": "buffer",
                "sVar9": "bufferSize",
                "SStack_1c": "commandOrValue",
                "PTR_rxMode_000803bc": "MODE_PTR",
                "PTR_LEDstatus_000803c0": "LED_STATUS_PTR",
                "PTR_mode_000803cc": "MODE_VAL_PTR",
                "PTR_Serial_000803c8": "Serial",
                "PTR_rxSteer_000803d4": "STEER_PTR",
                "PTR_rxMotor_000803d8": "MOTOR_PTR",
                "PTR_throttle_000803e0": "THROTTLE",
                "PTR_steering_000803e4": "STEERING",
                "PTR_s_Entered_manual_control_mode__000803d0": "Entered manual control mode.",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "Entered autonomous control mode.",
                "PTR_s_steer_000803f4": "steer",
                "PTR_s_motor_000803f8": "motor",
                "PTR_DAT_000803dc": ",\\t",
                "PTR_s_error_000803c4": "Error: pulse width too high."
            },
            "code": "void controlVehicle_00080250(void)\n{\n  uint32_t pulseWidth = pulseIn(4,1,20000);\n  uint32_t* rxModePtr = PTR_rxMode_000803bc;\n  *rxModePtr = pulseWidth;\n  delay(10);\n  byte ledStatus = *PTR_LEDstatus_000803c0;\n  *PTR_LEDstatus_000803c0 = (char)(ledStatus ^ 1);\n  digitalWrite(LED_PIN,ledStatus ^ 1);\n  uint32_t mode = *PTR_rxMode_000803bc;\n  if (mode < 0x641)\n  {\n    if (mode - 0x385U < 299)\n    {\n      if (*PTR_mode_000803cc != 0)\n      {\n        straightAndStop();\n        PTR_Serial_000803c8.println(\"PTR_s_Entered_manual_control_mode__000803d0\");\n        *PTR_mode_000803cc = 0;\n      }\n      delay(10);\n      uint32_t PTR_s_steer_000803f4PulseWidth = pulseIn(3,1,20000);\n      long PTR_s_steer_000803f4ingAngle = map(0,1000,2000,0x28,0x96);\n      uint32_t* rxSteerPtr = PTR_rxSteer_000803d4;\n      *rxSteerPtr = PTR_s_steer_000803f4ingAngle;\n      void* buffer = (void*)0x7d0;\n      size_t bufferSize = 0x28;\n      long PTR_s_motor_000803f8Speed = map(PTR_s_steer_000803f4PulseWidth,1000,2000,0x28,0x96);\n      uint32_t* rxMotorPtr = PTR_rxMotor_000803d8;\n      *rxMotorPtr = PTR_s_motor_000803f8Speed;\n      while (UART.available() > 0)\n      {\n        UART.read(buffer, bufferSize);\n        PTR_Serial_000803c8.print(*rxSteerPtr);\n        PTR_Serial_000803c8.print(\",\");\n        PTR_Serial_000803c8.println(*rxMotorPtr);\n      }\n      Servo.write(PTR_throttle_000803e0, *rxMotorPtr);\n      Servo.write(PTR_PTR_s_steer_000803f4ing_000803e4, *rxSteerPtr);\n    }\n    else\n    {\n      if (*PTR_mode_000803cc == 0)\n      {\n        straightAndStop();\n        PTR_Serial_000803c8.println(\"PTR_s_Entered_autonomous_control_mode__000803e8\");\n      }\n      *PTR_mode_000803cc = 1;\n      while (UART.available() > 0)\n      {\n        String command = UART.readStringUntil(',');\n        String value = UART.readStringUntil('\\n');\n        if (command.equals(\"PTR_s_steer_000803f4\"))\n        {\n          long PTR_s_steer_000803f4ingAngle = value.toInt();\n          Servo.write(PTR_PTR_s_steer_000803f4ing_000803e4, PTR_s_steer_000803f4ingAngle);\n        }\n        else if (command.equals(\"PTR_s_motor_000803f8\"))\n        {\n          long PTR_s_motor_000803f8Speed = value.toInt();\n          Servo.write(PTR_throttle_000803e0, PTR_s_motor_000803f8Speed);\n        }\n      }\n    }\n  }\n  else\n  {\n    straightAndStop();\n    PTR_Serial_000803c8.println(\"PTR_s_error_000803c4\");\n  }\n}",
            "called": [
                "println",
                "readStringUntil",
                "pulseIn",
                "delay",
                "read",
                "print",
                "write",
                "~String",
                "equals",
                "print",
                "available",
                "toInt",
                "println",
                "operator=",
                "map",
                "digitalWrite",
                "straightAndStop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "controlVehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "update_parameter_00080d6a",
                "param_1": "object_address",
                "param_2": "new_param_value"
            },
            "code": "void update_parameter_00080d6a(int object_address, int new_param_value) {\n  *(int *)(object_address + 0x28) = new_param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initializeUART_000813dc",
                "this": "uartObject",
                "dwBaudRate": "baudRate"
            },
            "code": "void __thiscall initializeUART_000813dc(UARTClass *uartObject, uint32_t baudRate){\n  init(uartObject, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeUART_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "params",
                "param_2": "new_param",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3",
                "0x11": "17",
                "0x18": "24",
                "0x19": "25",
                "0x15": "21",
                "0x14": "20",
                "0xd": "13",
                "0xc": "12"
            },
            "code": "void update_parameters_00080a0a(int *params, int new_param, int flag1, int flag2, int flag3) {\n  params[17] = new_param;\n  if (flag3 == 0) {\n    params[24] = new_param;\n  }\n  else {\n    params[25] = new_param;\n  }\n  if (flag2 == 0) {\n    params[21] = new_param;\n  }\n  else {\n    params[20] = new_param;\n  }\n  if (flag1 == 0) {\n    params[13] = new_param;\n  }\n  else {\n    params[12] = new_param;\n  }\n  params[4] = new_param;\n  *params = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_parameters_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "add_channel_to_list_00080b2c",
                "param_1": "channel_id",
                "param_2": "list_size",
                "param_3": "source",
                "iVar1": "index",
                "iVar2": "channel_offset",
                "uVar3": "combined_values"
            },
            "code": "void add_channel_to_list_00080b2c(int channel_id, uint32_t list_size, char *source) {\n  int index = channel_id * 0x40;\n  int channel_offset = index + (int)list_size;\n  *(int *)(index + (int)list_size) = 2;\n  *(int *)(channel_offset + 0x28) = -1;\n  *(char **)(channel_offset + 4) = source;\n  return;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "add_channel_to_list_00080b2c"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure_address",
                "puVar5": "first_array",
                "puVar6": "second_array",
                "uVar1": "constant_1",
                "uVar2": "constant_2",
                "uVar3": "constant_3",
                "uVar4": "constant_4"
            },
            "code": "void initialize_data_structures_00083888(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    int* first_array = *(int **)(param_1 + 4);\n    int* second_array = *(int **)(param_1 + 8);\n    int* third_array = *(int **)(param_1 + 0xc);\n    first_array[0] = 0;\n    first_array[1] = 0;\n    first_array[2] = 0;\n    first_array[3] = 4;\n    first_array[4] = 0;\n    first_array[5] = 0;\n    first_array[6] = 0;\n    first_array[7] = first_array;\n    first_array[8] = DAT_0008396c;\n    first_array[9] = DAT_00083970;\n    first_array[10] = DAT_00083974;\n    first_array[11] = DAT_00083978;\n    first_array[24] = 0;\n    second_array[0] = 0;\n    second_array[1] = 0;\n    second_array[2] = 0;\n    second_array[3] = 9;\n    second_array[4] = 0;\n    second_array[5] = 0;\n    second_array[6] = 0;\n    second_array[7] = second_array;\n    second_array[8] = DAT_0008396c;\n    second_array[9] = DAT_00083970;\n    second_array[10] = DAT_00083974;\n    second_array[11] = DAT_00083978;\n    second_array[24] = 0;\n    third_array[0] = 0;\n    third_array[1] = 0;\n    third_array[2] = 0;\n    third_array[3] = 18;\n    third_array[4] = 0;\n    third_array[5] = 0;\n    third_array[6] = 0;\n    third_array[7] = third_array;\n    third_array[8] = DAT_0008396c;\n    third_array[9] = DAT_00083970;\n    third_array[10] = DAT_00083974;\n    third_array[11] = DAT_00083978;\n    third_array[24] = 0;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "_vfiprintf_r",
                "_fflush_r",
                "_fclose_r",
                "__swbuf_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "UART_Config::UART_Config_00081348",
                "this": "this",
                "Uart": "uart",
                "dwIrq": "irq_number",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "puVar1": "baud_rate"
            },
            "code": "uint32_t baud_rate = 1000;\n\nstruct UART_Config {\n  Uart *uart;\n  IRQn_Type irq_number;\n  uint32_t id;\n  RingBuffer *rx_buffer;\n  RingBuffer *tx_buffer;\n};\n\nUART_Config * __thiscall UART_Config::UART_Config_00081348(UART_Config *this, Uart *uart, IRQn_Type irq_number, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n  this->_pUart = uart;\n  this->_dwIrq = irq_number;\n  this->_dwId = id;\n  this->_rx_buffer = rx_buffer;\n  this->_tx_buffer = tx_buffer;\n  this->field_0x4 = 0;\n  this->field_0x8 = baud_rate;\n  this->PTR_PTR_write_1_00081368 = &this;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UART_Config::UART_Config_00081348"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initializeSystem_000801e0",
                "PTR_Serial_00080244": "serialPointer",
                "PTR_steering_00080248": "steeringPointer",
                "PTR_throttle_0008024c": "throttlePointer"
            },
            "code": "void initializeSystem_000801e0(void)\n{\n  initializeUART();\n  initializePins();\n  initializeServos();\n  straightAndStop();\n  delay(1000);\n  startForkserver(0);\n  return;\n}\n\nvoid initializeUART(void)\n{\n  UARTClass::begin((UARTClass *)PTR_Serial_00080244,0xe100);\n}\n\nvoid initializePins(void)\n{\n  pinMode(13, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(57, INPUT);\n  pinMode(4, INPUT);\n  pinMode(3, INPUT);\n  pinMode(2, INPUT);\n}\n\nvoid initializeServos(void)\n{\n  Servo::attach((Servo *)PTR_steering_00080248,5);\n  Servo::attach((Servo *)PTR_throttle_0008024c,6);\n}\n",
            "called": [
                "attach",
                "startForkserver",
                "begin",
                "delay",
                "pinMode",
                "straightAndStop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_000801e0"
        },
        "FUN_00080d80": {
            "renaming": {
                "FUN_00080d80": "process_PioA_callbacks_00080d80",
                "uVar1": "bit_position",
                "uVar2": "bit_mask",
                "DAT_00080db0": "DAT_PioA_callbacks",
                "PTR_callbacksPioA_00080db4": "PTR_callbacksPioA_00080db4"
            },
            "code": "void process_PioA_callbacks_00080d80(void)\n{\n  uint32_t bit_mask;\n  uint32_t bit_position;\n  \n  bit_mask = *(uint32_t *)(DAT_00080db0 + 0x4c);\n  while( true ) {\n    bit_position = count_leading_zeroes(bit_mask);\n    if (bit_position > 0x1f) break;\n    bit_position = 0x1f - bit_position;\n    if (*(code **)(PTR_callbacksPioA_00080db4 + bit_position * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioA_00080db4 + bit_position * 4))();\n    }\n    bit_mask = bit_mask & ~(1 << bit_position);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d80",
            "calling": [],
            "imported": false,
            "current_name": "process_PioA_callbacks_00080d80"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0::FUN_000811b0": "InitializeBuffer",
                "this": "buffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "FUN_000811b0": "InitializeBuffer_000811b0"
            },
            "code": "InitializeBuffer_000811b0 * __thiscall InitializeBuffer_000811b0(InitializeBuffer_000811b0 *buffer)\n{\n  memset(buffer, 0, 128);\n  buffer->headIndex = 0;\n  buffer->tailIndex = 0;\n  return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "InitializeBuffer_000811b0"
        },
        "FUN_0008387c": {
            "renaming": {
                "FUN_0008387c": "traverse_and_free_0008387c",
                "param_1": "ptr"
            },
            "code": "void traverse_and_free_0008387c(void* ptr) {\n  _fwalk(ptr, free);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008387c",
            "calling": [],
            "imported": false,
            "current_name": "traverse_and_free_0008387c"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "map_0008145c",
                "x": "value",
                "in_min": "input_start",
                "in_max": "input_end",
                "out_min": "output_start",
                "out_max": "output_end"
            },
            "code": "long map_0008145c(long value, long input_start, long input_end, long output_start, long output_end) {\n  long input_range = input_end - input_start;\n  long output_range = output_end - output_start;\n  long scaled_value = (value - input_start) * output_range / input_range + output_start;\n  return scaled_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "loop",
                "write"
            ],
            "imported": false,
            "current_name": "map_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "_free_r",
                "_realloc_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "_free_r",
                "_realloc_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_data_at_indexes_000809e4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "indexes",
                "bVar1": "is_negative",
                "bVar2": "bit_set"
            },
            "code": "void update_data_at_indexes_000809e4(uint32_t* data, uint32_t value, uint32_t indexes)\n{\n    bool is_negative = (int)(indexes << 0x1f) < 0;\n    data[0x11] = value;\n    if (is_negative) {\n        data[0x19] = value;\n    }\n    if (!is_negative) {\n        data[0x18] = value;\n    }\n    bool bit_set = (indexes & 10) != 0;\n    if (bit_set) {\n        data[8] = value;\n    }\n    if (!bit_set) {\n        data[9] = value;\n    }\n    if (((int)(indexes << 0x1e) < 0) || ((int)(indexes << 0x1c) < 0)) {\n        data[0x20] = value;\n    }\n    data[5] = value;\n    *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_data_at_indexes_000809e4"
        },
        "FUN_00081470": {
            "renaming": {
                "FUN_00081470": "do_nothing_00081470"
            },
            "code": "\nvoid __thiscall String::do_nothing_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081470",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_00081470"
        },
        "FUN_00081472": {
            "renaming": {
                "_String": "freeStringBuffer",
                "this": "str",
                "__in_chrg": "isOwner",
                "FUN_00081472": "freeStringBuffer_00081472"
            },
            "code": "void* freeStringBuffer_00081472(String* str, int isOwner)\n{\n  free(str->buffer);\n  return str;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "freeStringBuffer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "terminate_program_000836ec",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void terminate_program_000836ec(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "terminate_program_000836ec"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "software_interrupt_and_return_00080148",
                "a0": "value_to_return",
                "a1": "interrupt_code",
                "a2": "unused_parameter"
            },
            "code": "uint32_t software_interrupt_and_return_00080148(uint32_t value_to_return, uint32_t interrupt_code, int32_t unused_parameter)\n{\n  software_interrupt(interrupt_code);\n  return value_to_return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_and_return_00080148"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "get_string_length_00082688",
                "__s": "str",
                "sVar1": "offset",
                "puVar2": "ptr",
                "uVar3": "word",
                "bVar4": "is_end"
            },
            "code": "size_t get_string_length_00082688(char* str) {\n  size_t length = 0;\n  uint* ptr = (uint*)((uint)str & 0xfffffffc);\n  size_t offset = -((uint)str & 3);\n  uint word = *ptr;\n  if (((uint)str & 3) != 0) {\n    word |= 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (ptr++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n    word = *ptr;\n  }\n  bool is_end = (word & 0xff) == 0;\n  if (!is_end) {\n    offset += 1;\n    is_end = (word & 0xff00) == 0;\n  }\n  if (!is_end) {\n    offset += 1;\n    is_end = (word & 0xff0000) == 0;\n  }\n  if (!is_end) {\n    offset += 1;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "_vfiprintf_r",
                "String",
                "write"
            ],
            "imported": false,
            "current_name": "get_string_length_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "read_from_file_00084508",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_from_file_00084508(int* error_code, int file_descriptor, char* buffer, int buffer_size) {\n  int read_result;\n  int* errno_ptr = PTR_errno_0008452c;\n  *(int*)PTR_errno_0008452c = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if (read_result == -1 && *(int*)errno_ptr != 0) {\n    *error_code = *(int*)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_from_file_00084508"
        },
        "FUN_0008429c": {
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "stream",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_0008429c(void* stream, int file_descriptor_offset) {\n  int file_descriptor = *(short*)(file_descriptor_offset + 0xe);\n  _close_r(stream, file_descriptor);\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008429c",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0008429c"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080a30(int data, int type, int value, unsigned int flag) {\n  bool is_negative_flag = (int)(flag << 0x1f) < 0;\n  switch(type) {\n    case 1:\n    case 2:\n      (*PTR_FUNC_00080a88)(data, type, value);\n      *(int *)(data + 0x44) = value;\n      if (is_negative_flag) {\n        *(int *)(data + 100) = value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data + 0x60) = value;\n      }\n      break;\n    case 3:\n      (*PTR_FUNC_00080a8c)(data, value, flag, PTR_FUNC_00080a8c, data);\n      break;\n    case 4:\n    case 5:\n      (*PTR_FUNC_00080a90)(data, value, type == 5, (flag << 0x1d) >> 0x1f, flag & 1, type, value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "init",
                "pinMode"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "printString_000810a6",
                "this": "this",
                "str": "str",
                "sVar1": "strLength",
                "sVar2": "printResult"
            },
            "code": "size_t __thiscall printString_000810a6(Print *this, char *str) {\n  size_t strLength;\n  size_t printResult;\n  if (str != nullptr) {\n    strLength = strlen(str);\n    printResult = (*this->_vptr_Print[1])(strLength, str, strLength);\n    return printResult;\n  }\n  return (size_t)str;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "println",
                "print",
                "println",
                "printNumber"
            ],
            "imported": false,
            "current_name": "printString_000810a6"
        }
    },
    "used_tokens": 125528,
    "layers": [
        [
            "FUN_000809b4",
            "FUN_00080e6a",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00083984",
            "FUN_00080598",
            "FUN_00080aa8",
            "FUN_00080118",
            "FUN_00083a74",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e84",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00083630",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080d70",
            "FUN_000840f8",
            "FUN_000813e4",
            "FUN_00081d48",
            "FUN_00083fbc",
            "FUN_00084494",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_00080578",
            "FUN_0008400c",
            "FUN_00080e60",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_00080e62",
            "FUN_0008044c",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_00080e66",
            "FUN_000826e8",
            "FUN_00080df0",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080588",
            "FUN_00080d3e",
            "FUN_000841f4",
            "FUN_000812a0",
            "FUN_0008130c",
            "FUN_0008142e",
            "FUN_00080d58",
            "FUN_00081084",
            "FUN_00080558",
            "FUN_00083708",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084244",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00080568",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_00080d30",
            "FUN_00080eec",
            "FUN_000816c8",
            "FUN_000810fc",
            "FUN_00080ec2",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000843e0",
            "FUN_00080eba",
            "FUN_0008173c",
            "FUN_00081190",
            "FUN_000805e8",
            "FUN_00080ebe",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00080e28",
            "FUN_00084220",
            "FUN_00080db8",
            "FUN_0008421c",
            "FUN_0008089c",
            "FUN_000816e4",
            "FUN_00080750",
            "FUN_00080ea4",
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000842a4",
            "FUN_000839b4",
            "FUN_00080eb0",
            "FUN_00081734",
            "FUN_00080768",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_00081f00",
            "FUN_0008075c",
            "FUN_00080eaa",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000806ac",
            "FUN_20070000",
            "FUN_000834f0",
            "FUN_0008125a",
            "FUN_000810d8",
            "FUN_00080f04",
            "FUN_000805a8",
            "FUN_00080184",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000843b8",
            "FUN_0008073c",
            "FUN_00081480",
            "FUN_00081244",
            "FUN_000836fc",
            "FUN_00081248",
            "FUN_0008418c",
            "FUN_0008014c",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00081496",
            "FUN_00081014",
            "FUN_00084404",
            "FUN_000800f4",
            "FUN_00080aec",
            "FUN_0008136c",
            "FUN_000810c4",
            "FUN_00080c98",
            "FUN_000811e8",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_000801e0",
            "FUN_00080d80",
            "FUN_0008387c",
            "FUN_0008145c",
            "FUN_000809e4",
            "FUN_000836ec",
            "FUN_00080148",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_0008429c",
            "FUN_00080a30",
            "FUN_000810a6"
        ],
        [
            "FUN_00081560",
            "FUN_000814f6",
            "FUN_000841e4",
            "FUN_000827fc",
            "FUN_00081438",
            "FUN_00084484",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_000817f0",
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_00082814",
            "FUN_00081176",
            "FUN_00082824",
            "FUN_0008113a",
            "FUN_000810e8",
            "FUN_00081f9c",
            "FUN_00081800",
            "FUN_00080b64",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_000811b0",
            "FUN_00081472"
        ]
    ],
    "locked_functions": []
}