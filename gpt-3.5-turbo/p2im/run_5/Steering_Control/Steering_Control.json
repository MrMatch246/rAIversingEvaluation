{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 value)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "calculate_output_00080164",
            "code": "\nvoid calculate_output_00080164(undefined4 input_1,undefined4 input_2,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  calculate_output_00080164_000806f8(&DAT_200708e8,0x5a);\n  calculate_output_00080164_000806f8(&DAT_200708d4,0x5a,parameter_1,parameter_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "calculate_output_00080164",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "parameter_1",
                "param_4": "parameter_2"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_calculate_000801e0",
            "code": "\nundefined8 initialize_and_calculate_000801e0(undefined4 param_a,undefined4 param_b,undefined4 param_c,undefined4 param_d)\n\n{\n  initialize_data_000813dc(&DAT_20070be8,0xe100,param_c,param_d,param_d);\n  update_parameter_00080f0c(0xd,1);\n  update_parameter_00080f0c(6,1);\n  update_parameter_00080f0c(0x39,0);\n  update_parameter_00080f0c(4,0);\n  update_parameter_00080f0c(3,0);\n  update_parameter_00080f0c(2,0);\n  update_parameter_000806a0(&DAT_200708d4,5);\n  update_parameter_000806a0(&DAT_200708e8,6);\n  calculate_output_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_calculate_000801e0",
                "param_1": "param_a",
                "param_2": "param_b",
                "param_3": "param_c",
                "param_4": "param_d"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 value;\n  int difference;\n  undefined *pointer;\n  undefined tempArray [12];\n  \n  DAT_200708c0 = calculateValue(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  updateParameter(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculateOutput();\n        calculateSum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      value = calculateValue(3,1,20000);\n      DAT_200708d8 = calculateOutputA(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculateOutputA(value,1000,2000,0x28,0x96);\n      while (difference = calculateDifference(&DAT_20070be8), 0 < difference) {\n        getNextByte(&DAT_20070be8);\n        convertBase(&DAT_20070be8,DAT_200708d8,10);\n        executeDataProcessing(&DAT_20070be8,&DAT_00084b13);\n        addProcessedData(&DAT_20070be8,DAT_200708ec,10);\n      }\n      calculateOutputB(&DAT_200708e8,DAT_200708ec);\n      calculateOutputB(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculateOutput();\n        calculateSum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      difference = calculateDifference(&DAT_20070be8);\n      if (0 < difference) {\n        processParamValues(tempArray,&DAT_20070be8,0x2c);\n        checkAndCopy(&DAT_200708dc,tempArray);\n        relocateAndAssignSum(tempArray);\n        processParamValues(tempArray,&DAT_20070be8,10);\n        checkAndCopy(&DAT_200708c8,tempArray);\n        relocateAndAssignSum(tempArray);\n        getNextByte(&DAT_20070be8);\n        difference = checkArray(&DAT_200708dc,\"steer\");\n        if (difference == 0) goto LAB_0008039c;\n        value = parseInteger(&DAT_200708c8);\n        pointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculateOutput();\n    calculateSum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  difference = checkArray(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    value = parseInteger(&DAT_200708c8);\n    pointer = &DAT_200708e8;\nLAB_000803b2:\n    calculateOutputB(pointer,value);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "uVar1": "value",
                "iVar2": "difference",
                "puVar3": "pointer",
                "auStack_1c": "tempArray",
                "update_parameter_00081014": "updateParameter",
                "calculate_output_00080164": "calculateOutput",
                "calculate_sum_000810e8": "calculateSum",
                "calculate_value_00081624": "calculateValue",
                "calculate_output_0008145c": "calculateOutputA",
                "calculate_difference_00081248": "calculateDifference",
                "get_next_byte_00081276": "getNextByte",
                "convert_base_with_parameters_thunk_0008113a": "convertBase",
                "execute_data_processing_000810c4": "executeDataProcessing",
                "add_processed_data_0008117a": "addProcessedData",
                "calculate_output_000806f8": "calculateOutputB",
                "process_param_values_00081214": "processParamValues",
                "check_and_copy_if_different_00081560": "checkAndCopy",
                "relocate_and_assign_sum_00081472": "relocateAndAssignSum",
                "check_array_000815b8": "checkArray",
                "parse_integer_000815de": "parseInteger"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_and_start_channel_000803fc",
            "code": "\nvoid initialize_and_start_channel_000803fc(int channel_id,uint param_value,undefined4 bit_mask,uint bit_position)\n\n{\n  undefined4 unknown_variable;\n  undefined4 unknown_variable;\n  undefined8 concatenated_value;\n  \n  concatenated_value = CONCAT44(param_value,channel_id);\n  check_bit_and_set_00080aa8(bit_mask);\n  initialize_channel_00080b2c(channel_id,param_value,0xc002);\n  update_memory_value_00080b90(channel_id,param_value,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel_id + param_value * 0x40 + 0x24) = 4;\n  if (2 < param_value) {\n    concatenated_value = assertion_failure_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unknown_variable,unknown_variable);\n  }\n  *(undefined4 *)((int)concatenated_value + (int)((ulonglong)concatenated_value >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_and_start_channel_000803fc",
                "param_1": "channel_id",
                "param_2": "param_value",
                "param_3": "bit_mask",
                "param_4": "bit_position",
                "unaff_r4": "unknown_variable",
                "in_lr": "unknown_variable",
                "uVar1": "concatenated_value"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_parameter_value_0008044c",
            "code": "\nvoid updateParameterValue_0008044c(int index,int data,int offset)\n\n{\n  uint maxValue;\n  int tempVar;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempVar = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempVar < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19) < 0\n       )) {\n      update_parameter_00081014((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  maxValue = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempVar = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempVar < (int)maxValue) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempVar) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameter_00081014((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  maxValue = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (maxValue <= *(int *)(data + 0x10) + 4U) {\n    maxValue = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = maxValue;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_parameter_value_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "maxValue",
                "iVar2": "tempVar"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_000805a8",
            "code": "\nvoid updateParam_000805a8(byte *output)\n\n{\n  char nextValue;\n  uint currentValue;\n  \n  currentValue = (uint)DAT_200708f0;\n  if (currentValue < 0x3c) {\n    nextValue = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = nextValue;\n    *(uint *)(&DAT_200708fc + currentValue * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_000805a8",
                "param_1": "output",
                "cVar1": "nextValue",
                "uVar2": "currentValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "update_parameter_000806a0",
            "code": "\nbyte update_parameter_000806a0(byte *data,undefined4 value)\n\n{\n  byte temp_byte;\n  undefined4 channel_address;\n  uint index;\n  undefined4 start_value;\n  int counter;\n  uint value_temp;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  update_parameter_000806a0_with_limits(value,1,0x220,*data,0x960);\n  value_temp = (uint)*data;\n  temp_byte = (&DAT_200708f8)[value_temp * 8];\n  data[2] = 0;\n  index = value_temp / 0xc;\n  (&DAT_200708f8)[value_temp * 8] = temp_byte & 0xc0 | (byte)value & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    channel_address = 0x40084000;\n    start_value = 0x1e;\nLAB_0008064c:\n    initialize_and_start_channel_000803fc(channel_address,index,start_value,start_value);\n  }\n  else {\n    if (index == 1) {\n      channel_address = 0x40084000;\n      start_value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      channel_address = 0x40084000;\n      start_value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      channel_address = 0x40080000;\n      index = 2;\n      start_value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      channel_address = 0x40080000;\n      index = 0;\n      start_value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "update_parameter_000806a0",
                "param_1": "data",
                "param_2": "value",
                "bVar1": "temp_byte",
                "uVar2": "channel_address",
                "uVar3": "index",
                "uVar4": "start_value",
                "iVar5": "counter",
                "uVar6": "value_temp",
                "update_parameter_00080f0c": "update_parameter_with_limits"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_output_000806f8",
            "code": "\nvoid calculate_output_000806f8(byte *data,uint length)\n\n{\n  uint clamped_length;\n  \n  if ((int)length < 0x220) {\n    clamped_length = length;\n    if (0xb3 < (int)length) {\n      clamped_length = 0xb4;\n    }\n    length = perform_calculation(clamped_length & ~((int)clamped_length >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    clamped_length = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == is_subtraction_overflow(length,clamped_length)) &&\n       (clamped_length = (600 - (char)data[2]) * 4, (int)length <= (int)clamped_length)) {\n      clamped_length = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (some_array[6].r_offset / 1000000) * (clamped_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_output_000806f8",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "clamped_length",
                "calculate_output_0008145c": "perform_calculation",
                "SBORROW4": "is_subtraction_overflow",
                "Elf32_Rel_ARRAY_20070000": "some_array"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_and_update_parameters_00080774",
            "code": "\n\n\nvoid initialize_and_update_parameters_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set_00081778();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_parameter_00081014(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_00080a30(0x400e0e00,1,0x300,0);\n  update_parameter_00081014(0,1);\n  update_parameter_00080a30(0x400e0e00,1,0xc00,0);\n  update_parameter_00080a30(0x400e0e00,1,0x3000,0);\n  update_parameter_00080a30(0x400e1400,2,0x30,0);\n  update_parameter_00080a30(0x400e1000,1,0xc00,0);\n  update_parameter_00080a30(0x400e0e00,1,3,0);\n  update_parameter_00080a30(0x400e1000,1,0xc000,0);\n  check_bit_and_set_00080aa8(0x25);\n  calculate_output_value_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  set_parameter_00080d3e(0x400c0000,0,0x300000,1);\n  update_parameters_00080d30(0x400c0000,0,0);\n  set_param_value_00080d6a(0x400c0000,0xffffffff);\n  initialize_data_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_and_update_parameters_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_and_set_memory_0008089c",
            "code": "\nvoid initialize_and_set_memory_0008089c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory_000811b0(&DAT_20070c0c);\n  initialize_memory_000811b0(&DAT_20070b60);\n  initialize_param_array_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param_3);\n  initialize_memory_000811b0(&DAT_20070e6c);\n  initialize_memory_000811b0(&DAT_20070ef4);\n  initialize_memory_000811b0(&DAT_20070f7c);\n  initialize_memory_000811b0(&DAT_20070ad8);\n  initialize_memory_000811b0(&DAT_20070d0c);\n  initialize_memory_000811b0(&DAT_20070d94);\n  initialize_and_set_param_array_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_set_param_array_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_set_param_array_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_and_set_memory_0008089c"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculateDifference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculateDifference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculateDifference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result",
                "calculate_difference_00081248": "calculateDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_parameter_000809be",
            "code": "\nvoid updateParameter_000809be(int baseAddress,undefined4 actionType,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(actionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "baseAddress",
                "param_2": "actionType",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameter_values_000809e4",
            "code": "\nvoid updateParameterValues_000809e4(undefined4 *paramArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  paramArray[0x11] = newValue;\n  if (isNegative) {\n    paramArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramArray[0x20] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameter_values_000809e4",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *outputArray,undefined4 value,int check1,int check2,int check3)\n\n{\n  outputArray[0x11] = value;\n  if (check3 == 0) {\n    outputArray[0x18] = value;\n  }\n  else {\n    outputArray[0x19] = value;\n  }\n  if (check2 == 0) {\n    outputArray[0x15] = value;\n  }\n  else {\n    outputArray[0x14] = value;\n  }\n  if (check1 == 0) {\n    outputArray[0xd] = value;\n  }\n  else {\n    outputArray[0xc] = value;\n  }\n  outputArray[4] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "check1",
                "param_4": "check2",
                "param_5": "check3"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_00080a30",
            "code": "\nundefined4 updateParameter_00080a30(int functionPointer,int option,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    updateParameter_00080a30AsOption(functionPointer,option,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(functionPointer + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(functionPointer + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(functionPointer + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParameter_00080a30WithValues(functionPointer,newValue,flags,0x809e5,functionPointer);\n    break;\n  case 4:\n  case 5:\n    setParameterOption(functionPointer,newValue,option == 5,(flags << 0x1d) >> 0x1f,flags & 1,option,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "param_1": "functionPointer",
                "param_2": "option",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_parameter_000809be": "updateParameterAsOption",
                "update_parameter_values_000809e4": "updateParameterWithValues",
                "set_parameters_00080a0a": "setParameterOption"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_mask_00080a94",
            "code": "\nuint checkMask_00080a94(int dataOffset,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(dataOffset + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(dataOffset + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_mask_00080a94",
                "param_1": "dataOffset",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_bit_and_set_00080aa8",
            "code": "\n\n\nundefined4 checkBitAndSet_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "initialize_channel_00080b2c",
            "code": "\nvoid initializeChannel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int baseOffset;\n  int channelPtr;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = assertion_failure_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  baseOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelPtr = (int)combinedParams + baseOffset;\n  *(undefined4 *)((int)combinedParams + baseOffset) = 2;\n  *(undefined4 *)(channelPtr + 0x28) = 0xffffffff;\n  *(char **)(channelPtr + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "initialize_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "baseOffset",
                "iVar2": "channelPtr",
                "uVar3": "combinedParams"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "update_memory_value_00080b90",
            "code": "\nvoid updateMemoryValue_00080b90(int baseAddress,int offsetIndex,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + offsetIndex * 0x40 + 0x14) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "update_memory_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "offsetIndex",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_entries[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_control_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_output_value_00080c98",
            "code": "\nundefined4 calculateOutputValue_00080c98(undefined4 *outputValue,uint inputValue,int divisor,int multiplier)\n\n{\n  uint divResult;\n  uint index;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *outputValue = 1;\n  outputValue[1] = 0;\n  outputValue[0x48] = 0x202;\n  outputValue[0x41] = 0;\n  outputValue[0x45] = 0;\n  divResult = inputValue / (uint)(divisor * 2);\n  if (inputValue == divisor * 2 * divResult) {\n    divResult = divResult - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)inputValue / (ulonglong)((divResult + 1) * 2)) / 1000000)) <=\n        thresholdValues[index]) {\n      outputValue[1] = (index & 0xf) << 0x10 | (divResult & 0xff) << 8 | outputValue[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_output_value_00080c98",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "divResult",
                "uVar2": "index",
                "local_58": "thresholdValues"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_parameters_00080d30",
            "code": "\nvoid updateParameters_00080d30(int data,uint value1,uint value2)\n\n{\n  *(uint *)(data + 4) = value1 | *(uint *)(data + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_parameters_00080d30",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "set_parameter_00080d3e",
            "code": "\nvoid setParameter_00080d3e(int ptr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(ptr + 4) =\n       value2 | *(uint *)(ptr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "set_parameter_00080d3e",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_data_00080d62",
            "code": "\nvoid initializeData_00080d62(int dataPointer)\n\n{\n  *(undefined4 *)(dataPointer + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_data_00080d62",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid set_param_value_00080d6a(int param_address,undefined4 param_value)\n\n{\n  *(undefined4 *)(param_address + 0x28) = param_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "param_address",
                "param_2": "param_value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_system_00080e80",
            "code": "\nundefined4 initialize_system_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_system_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_sum_00080e88",
            "code": "\nint calculateSum_00080e88(int number)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = number + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "number",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "FUNC_00080eaa",
            "code": "\nundefined4 FUNC_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "FUNC_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int sourceAddress)\n\n{\n  *(undefined4 *)(sourceAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "sourceAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "check_status_00080eba",
            "code": "\nundefined4 check_status_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "check_status_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_00080ebe",
            "code": "\nvoid initialize_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe",
                "undefined4": "void"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nundefined4 initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_data_00080ec8",
            "code": "\n\n\nuint processData_00080ec8(undefined4 param1,int param2,uint param3)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)param3; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(param2 + index);\n  }\n  return param3 & ~((int)param3 >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_data_00080ec8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_message_00080eec",
            "code": "\nvoid exit_with_status_message_00080eec(undefined4 status,undefined4 unused_1,undefined4 unused_2,undefined4 unused_3)\n\n{\n  execute_function_000817c8(\"Exiting with status %d.\\n\",status,unused_2,unused_3,unused_3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_message_00080eec",
                "param_1": "status",
                "param_2": "unused_1",
                "param_3": "unused_2",
                "param_4": "unused_3"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_default_value_00080efe",
            "code": "\nuint32_t getDefaultValue_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_default_value_00080efe",
                "undefined4": "uint32_t"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_constant_value_thunk_000816d8",
            "code": "\nundefined4 getConstantValue_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_constant_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_parameter_00080f0c",
            "code": "\n\n\nint updateParameter_00080f0c(int index,int mode)\n\n{\n  int result;\n  uint bitMask;\n  undefined4 paramType;\n  uint checkResult;\n  byte bitCheck;\n  byte combinedBits;\n  int paramIndex;\n  int paramValue;\n  \n  result = index;\n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 4) {\n      result = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[index * 0x1c]);\n    }\n    combinedBits = (&DAT_20070e1c)[index];\n    bitCheck = combinedBits & 0xf;\n    if ((bitCheck < 3) && (combinedBits != 0)) {\n      if (bitCheck == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (bitCheck == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (bitCheck == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = index * 0x1c;\n        check_bit_and_set_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        combinedBits = (&DAT_20070e1c)[index] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        check_bit_and_set_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        combinedBits = (&DAT_20070e1c)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[index] = combinedBits;\n      return result;\n    }\n    paramIndex = index * 0x1c;\n    paramValue = *(int *)(&DAT_00084b44 + paramIndex);\n    if (combinedBits >> 4 == 0) {\n      paramType = 4;\n    }\n    else {\n      paramType = 5;\n    }\n    result = update_parameter_00080a30(paramValue,paramType,*(undefined4 *)(&DAT_00084b48 + paramIndex),\n                         *(undefined4 *)(&DAT_00084b54 + paramIndex));\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf0 | 3;\n    if (*(int *)(paramValue + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084b4c + paramIndex);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        checkResult = _DAT_400e0618 & bitMask;\n        if (checkResult == bitMask) {\n          _DAT_400e0614 = checkResult;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        checkResult = _DAT_400e0708 & bitMask;\n        if (checkResult == bitMask) {\n          _DAT_400e0704 = checkResult;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_parameter_00080f0c",
                "param_1": "index",
                "param_2": "mode",
                "iVar1": "result",
                "iVar7": "paramIndex",
                "iVar8": "paramValue",
                "uVar2": "bitMask",
                "uVar3": "paramType",
                "uVar4": "checkResult",
                "bVar5": "bitCheck",
                "bVar6": "combinedBits"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameter_00081014",
            "code": "\nvoid updateParameter_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 newValue;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    newValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = check_mask_00080a94(address,newValue);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = newValue;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = newValue;\n      return;\n    }\n    set_parameters_00080a0a(address,newValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameter_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "newValue",
                "iVar3": "address"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_param_000810a6",
            "code": "\nvoid processParam_000810a6(int *ptrArray,int param,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 leadingZerosCount;\n  \n  if (param != 0) {\n    leadingZerosCount = count_leading_zeros_00082688(param);\n    (**(code **)(*ptrArray + 4))(ptrArray,param,leadingZerosCount,*(code **)(*ptrArray + 4),var2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_param_000810a6",
                "param_1": "ptrArray",
                "param_2": "param",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_data_processing_000810c4",
            "code": "\nvoid execute_data_processing_000810c4(void)\n\n{\n  process_parameter_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_data_processing_000810c4",
                "process_param_000810a6": "process_parameter_data"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_and_handle_data_000810d8",
            "code": "\nvoid process_and_handle_data_000810d8(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_param_000810a6(input_1,&DAT_00085635,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_and_handle_data_000810d8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_param_000810a6();\n  result2 = process_and_handle_data_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 input,uint number,uint base)\n\n{\n  char *output;\n  uint quotient;\n  char *currentDigit;\n  char digitChar;\n  uint remainder;\n  char outputBuffer [5];\n  \n  outputBuffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  output = outputBuffer;\n  do {\n    currentDigit = output;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digitChar = (char)remainder;\n    if (remainder < 10) {\n      digitChar = digitChar + '0';\n    }\n    else {\n      digitChar = digitChar + '7';\n    }\n    *currentDigit = digitChar;\n    number = quotient;\n    output = currentDigit + -1;\n  } while (quotient != 0);\n  process_param_000810a6(input,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "input",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "output",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "digitChar",
                "uVar5": "remainder",
                "local_15": "outputBuffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_base_0008113a",
            "code": "\nint convertBase_0008113a(undefined4 *ptrFunc,uint num,uint base,undefined4 param)\n\n{\n  int result1;\n  int result2;\n  \n  if (base == 0) {\n    result1 = (**(code **)*ptrFunc)(ptrFunc,num & 0xff);\n    return result1;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)num < 0) {\n      result1 = execute_function_000810cc(ptrFunc,0x2d);\n      result2 = convert_to_base_000810fc(ptrFunc,-num,10);\n      return result2 + result1;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result1 = convert_to_base_000810fc(ptrFunc,num,base,param);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_base_0008113a",
                "param_1": "ptrFunc",
                "param_2": "num",
                "param_3": "base",
                "param_4": "param",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_base_with_parameters_thunk_0008113a",
            "code": "\nint convertBaseWithParameters_thunk_0008113a(undefined4 *paramArray,uint num,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeResult;\n  \n  if (base == 0) {\n    result = (**(code **)*paramArray)(paramArray,num & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)num < 0) {\n      result = execute_function_000810cc(paramArray,0x2d);\n      negativeResult = convert_to_base_000810fc(paramArray,-num,10);\n      return negativeResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_000810fc(paramArray,num,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_base_with_parameters_thunk_0008113a",
                "param_1": "paramArray",
                "param_2": "num",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeResult"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "add_processed_data_0008117a",
            "code": "\nint addProcessedData_0008117a(undefined4 data)\n\n{\n  int convertedValue;\n  int processedData;\n  \n  convertedValue = convert_base_0008113a();\n  processedData = process_and_handle_data_000810d8(data);\n  return processedData + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "add_processed_data_0008117a",
                "param_1": "data",
                "iVar1": "convertedValue",
                "iVar2": "processedData"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_rel_info_is_zero_00081190",
            "code": "\nvoid executeIfRelInfoIsZero_00081190(void)\n\n{\n  if ((relArray[6].info != 0xffffffff) &&\n     (relArray[6].info = relArray[6].info - 1,\n     relArray[6].info == 0)) {\n    (*(code *)((int)&relArray[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_rel_info_is_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initialize_memory_000811b0(int memory_address)\n\n{\n  fill_memory(memory_address,0,0x80);\n  *(four_byte_data *)(memory_address + 0x80) = 0;\n  *(four_byte_data *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memory_address",
                "fill_memory_00081f00": "fill_memory",
                "undefined4": "four_byte_data"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_and_store_value_000811ca",
            "code": "\nvoid updateAndStoreValue_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint nextIndex;\n  \n  nextIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (nextIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_and_store_value_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "calculate_and_check_value_000811e8",
            "code": "\nint calculate_and_check_value_000811e8(int *array)\n\n{\n  int constant_value;\n  \n  constant_value = get_constant_value();\n  array[3] = constant_value;\n  do {\n    constant_value = (**(code **)(*array + 0xc))(array);\n    if (-1 < constant_value) {\n      return constant_value;\n    }\n    constant_value = get_constant_value();\n  } while ((uint)(constant_value - array[3]) < (uint)array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "calculate_and_check_value_000811e8",
                "param_1": "array",
                "iVar1": "constant_value",
                "get_constant_value_thunk_000816d8": "get_constant_value"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_param_values_00081214",
            "code": "\nvoid process_param_values_00081214(undefined4 configuration_param,undefined4 calculation_param,uint desired_value)\n\n{\n  uint result;\n  \n  initialize_param_array(configuration_param,&DAT_00085637);\n  while ((result = calculate_and_check_value(calculation_param), -1 < (int)result && (result != desired_value))) {\n    update_memory_and_copy_string(configuration_param,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_param_values_00081214",
                "param_1": "configuration_param",
                "param_2": "calculation_param",
                "param_3": "desired_value",
                "uVar1": "result",
                "initialize_param_array_000814f6": "initialize_param_array",
                "calculate_and_check_value_000811e8": "calculate_and_check_value",
                "update_memory_and_copy_string_0008159e": "update_memory_and_copy_string"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "get_next_byte_00081276",
            "code": "\nuint get_next_byte_00081276(int buffer_address)\n\n{\n  byte next_byte;\n  int buffer_ptr;\n  \n  buffer_ptr = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_ptr + 0x80) != *(int *)(buffer_ptr + 0x84)) {\n    next_byte = *(byte *)(buffer_ptr + *(int *)(buffer_ptr + 0x84));\n    *(uint *)(buffer_ptr + 0x84) = *(int *)(buffer_ptr + 0x84) + 1U & 0x7f;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "get_next_byte_00081276",
                "param_1": "buffer_address",
                "bVar1": "next_byte",
                "iVar2": "buffer_ptr"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_parameter_value_000812b8",
            "code": "\nundefined4 updateParameterValue_000812b8(int dataPointer,undefined4 newValue)\n\n{\n  int data;\n  uint updatedValue;\n  \n  data = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data + 0x84) == *(int *)(data + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(data + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data + 0x84) == updatedValue);\n    *(char *)(data + *(int *)(data + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_parameter_value_000812b8",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "data",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_param_array_00081348",
            "code": "\nvoid initializeParamArray_00081348(undefined4 *paramArray,undefined4 param2Value,undefined param3Value,undefined4 param4Value,\n                 undefined4 param5Value,undefined4 param6Value)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  paramArray[6] = param2Value;\n  *paramArray = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(paramArray + 7) = param3Value;\n  paramArray[4] = param5Value;\n  paramArray[8] = param4Value;\n  paramArray[5] = param6Value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_param_array_00081348",
                "param_1": "paramArray",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "param_6": "param6Value"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_data_000813dc",
            "code": "\nvoid initializeData_000813dc(int dataPointer,uint offset)\n\n{\n  int tempVar1;\n  undefined4 *dataArray;\n  \n  check_bit_and_set_00080aa8(*(undefined4 *)(dataPointer + 0x20));\n  dataArray = *(undefined4 **)(dataPointer + 0x18);\n  dataArray[0x48] = 0x202;\n  *dataArray = 0xac;\n  dataArray[1] = 0x800;\n  dataArray[8] = relArray[6].relativeOffset / offset >> 4;\n  dataArray[3] = 0xffffffff;\n  dataArray[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataPointer + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataPointer + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(dataPointer + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(dataPointer + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *dataArray = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_data_000813dc",
                "param_1": "dataPointer",
                "param_2": "offset",
                "iVar1": "tempVar1",
                "puVar2": "dataArray",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "relativeOffset"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_set_param_array_00081438",
            "code": "\nundefined4 * initializeAndSetParamArray_00081438(undefined4 *arrayPointer,undefined4 paramValue)\n\n{\n  initializeParamArray();\n  *arrayPointer = &PTR_update_parameter_value_000812b8_1_00085680;\n  arrayPointer[9] = paramValue;\n  return arrayPointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_set_param_array_00081438",
                "param_1": "arrayPointer",
                "param_2": "paramValue",
                "initialize_param_array_00081348": "initializeParamArray"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_output_0008145c",
            "code": "\nint calculate_output_0008145c(int input_value1,int input_value2,int final_value,int initial_value2,int initial_value1)\n\n{\n  return (uint)((input_value1 - input_value2) * (initial_value1 - initial_value2)) / (uint)(final_value - input_value2) + initial_value2;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_output_0008145c",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "final_value",
                "param_4": "initial_value2",
                "param_5": "initial_value1"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "relocate_and_assign_sum_00081472",
            "code": "\nundefined4 * relocateAndAssignSum_00081472(undefined4 *dataPointer)\n\n{\n  relocate_and_assign_sum_00081800(*dataPointer);\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_00081472": "relocate_and_assign_sum_00081472",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_and_clear_variables_00081480",
            "code": "\nvoid resetAndClearVariables_00081480(int *inputArray)\n\n{\n  if (*inputArray != 0) {\n    relocate_and_assign_sum_00081800();\n  }\n  *inputArray = 0;\n  inputArray[2] = 0;\n  inputArray[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_and_clear_variables_00081480",
                "param_1": "inputArray",
                "param_1[1]": "inputArray[1]",
                "param_1[2]": "inputArray[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "allocate_and_link_memory_00081496",
            "code": "\nint allocateAndLinkMemory_00081496(int *memoryPointer,int size,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = allocate_and_link_memory_00081f9c(*memoryPointer,size + 1,param3,param4,param4);\n  if (result != 0) {\n    *memoryPointer = result;\n    memoryPointer[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "allocate_and_link_memory_00081496",
                "param_1": "memoryPointer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "allocate_and_link_memory_if_needed_000814ae",
            "code": "\nundefined4 allocate_and_link_memory_if_needed_000814ae(int *memory_block,uint required_size)\n\n{\n  int result;\n  \n  if ((*memory_block == 0) || ((uint)memory_block[1] < required_size)) {\n    result = allocate_and_link_memory_00081496(memory_block);\n    if (result == 0) {\n      return 0;\n    }\n    if (memory_block[2] == 0) {\n      *(undefined *)*memory_block = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "allocate_and_link_memory_if_needed_000814ae",
                "param_1": "memory_block",
                "param_2": "required_size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "allocate_and_copy_string_000814d0",
            "code": "\nundefined4 * allocateAndCopyString_000814d0(undefined4 *result,undefined4 sourceString,undefined4 targetLength)\n\n{\n  int allocationStatus;\n  \n  allocationStatus = allocate_and_link_memory_if_needed_000814ae(result,targetLength);\n  if (allocationStatus == 0) {\n    reset_and_clear_variables_00081480(result);\n  }\n  else {\n    result[2] = targetLength;\n    copy_string_000825cc(*result,sourceString);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "allocate_and_copy_string_000814d0",
                "param_1": "result",
                "param_2": "sourceString",
                "param_3": "targetLength",
                "iVar1": "allocationStatus"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_array_000814f6",
            "code": "\nundefined4 * initializeParamArray_000814f6(undefined4 *paramArray,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082688(inputValue);\n    allocate_and_copy_string_000814d0(paramArray,inputValue,leadingZerosCount);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "paramArray",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "copy_and_replace_0008151c",
            "code": "\nvoid copyAndReplace_0008151c(int *destination,int *source)\n\n{\n  if (*destination != 0) {\n    if ((*source != 0) && ((uint)source_offset <= (uint)destination_length)) {\n      copyString();\n      destination_offset = source_offset;\n      goto LAB_00081558;\n    }\n    relocateAndAssignSum();\n  }\n  *destination = *source;\n  destination_length = source_length;\n  destination_offset = source_offset;\n  *source = 0;\n  source_length = 0;\nLAB_00081558:\n  source_offset = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "copy_and_replace_0008151c",
                "param_1": "destination",
                "param_2": "source",
                "param_1[1]": "destination_length",
                "param_2[1]": "source_length",
                "param_1[2]": "destination_offset",
                "param_2[2]": "source_offset",
                "copy_string_000825cc": "copyString",
                "relocate_and_assign_sum_00081800": "relocateAndAssignSum"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_copy_if_different_00081560",
            "code": "\nint check_and_copy_if_different_00081560(int source_value,int destination_value)\n\n{\n  if (source_value != destination_value) {\n    copy_and_replace_0008151c();\n  }\n  return source_value;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_copy_if_different_00081560",
                "param_1": "source_value",
                "param_2": "destination_value"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_memory_and_copy_string_00081570",
            "code": "\nundefined4 updateMemoryAndCopyString_00081570(int *ptrArray,int stringLength,int additionalLength)\n\n{\n  int allocationResult;\n  int offset;\n  \n  offset = ptrArray[2];\n  if (stringLength == 0) {\n    return 0;\n  }\n  if (additionalLength != 0) {\n    allocationResult = allocate_and_link_memory_if_needed_000814ae(ptrArray,offset + additionalLength);\n    if (allocationResult == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*ptrArray + ptrArray[2],stringLength);\n    ptrArray[2] = offset + additionalLength;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_memory_and_copy_string_00081570",
                "param_1": "ptrArray",
                "param_2": "stringLength",
                "param_3": "additionalLength",
                "iVar1": "allocationResult",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "update_memory_and_copy_string_0008159e",
            "code": "\nvoid update_memory_and_copy_string_0008159e(undefined4 src_string,undefined4 dest_string,undefined4 length)\n\n{\n  undefined4 dest_length;\n  undefined4 source_length;\n  \n  source_length = length;\n  update_memory_and_copy_string_0008159e_00081570(src_string,&dest_length,1,0,src_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "update_memory_and_copy_string_0008159e",
                "param_1": "src_string",
                "param_2": "dest_string",
                "param_3": "length",
                "local_c": "dest_length",
                "uStack_8": "source_length"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_array_000815b8",
            "code": "\nint checkArray_000815b8(byte **inputArrayPtr,byte *elementPtr)\n\n{\n  uint arrayComparisonResult;\n  int returnValue;\n  \n  if (inputArrayPtr[2] == (byte *)0x0) {\n    if (elementPtr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (elementPtr != (byte *)0x0) {\n      arrayComparisonResult = compare_uint_arrays_00082390(*inputArrayPtr);\n      goto LAB_000815d4;\n    }\n    elementPtr = *inputArrayPtr;\n  }\n  arrayComparisonResult = (uint)*elementPtr;\nLAB_000815d4:\n  returnValue = 1 - arrayComparisonResult;\n  if (1 < arrayComparisonResult) {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_array_000815b8",
                "param_1": "inputArrayPtr",
                "param_2": "elementPtr",
                "uVar1": "arrayComparisonResult",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input)\n\n{\n  byte byte1;\n  byte byte2;\n  uint result;\n  byte *ptr;\n  uint current_byte;\n  byte *current_ptr;\n  int difference;\n  int flag;\n  uint divisor;\n  uint limit;\n  \n  ptr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    current_ptr = ptr;\n    ptr = current_ptr + 1;\n    current_byte = (uint)*current_ptr;\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_byte + 1);\n    byte2 = byte1 & 8;\n  } while ((byte1 & 8) != 0);\n  if (current_byte == 0x2d) {\n    ptr = current_ptr + 2;\n    current_byte = (uint)current_ptr[1];\n    byte2 = 1;\n  }\n  else if (current_byte == 0x2b) {\n    current_byte = (uint)current_ptr[1];\n    ptr = current_ptr + 2;\n  }\n  if (byte2 == 0) {\n    limit = 0x7fffffff;\n  }\n  else {\n    limit = 0x80000000;\n  }\n  divisor = limit / 10;\n  flag = 0;\n  result = 0;\n  do {\n    byte1 = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_byte + 1);\n    if ((byte1 & 4) == 0) {\n      if ((byte1 & 3) == 0) {\nLAB_0008277e:\n        if (flag == -1) {\n          if (byte2 == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (byte2 != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte1 & 3) == 1) {\n        difference = 0x37;\n      }\n      else {\n        difference = 0x57;\n      }\n      difference = current_byte - difference;\n    }\n    else {\n      difference = current_byte - 0x30;\n    }\n    if (9 < difference) goto LAB_0008277e;\n    if (flag != -1) {\n      if ((divisor <= result && result != divisor) || ((result == divisor && ((int)(limit % 10) < difference))))\n      {\n        flag = -1;\n      }\n      else {\n        result = result * 10 + difference;\n        flag = 1;\n      }\n    }\n    current_byte = (uint)*ptr;\n    ptr = ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "uVar3": "result",
                "pbVar4": "ptr",
                "uVar5": "current_byte",
                "pbVar6": "current_ptr",
                "iVar7": "difference",
                "iVar8": "flag",
                "uVar9": "divisor",
                "uVar10": "limit"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_control_system_000815ec",
            "code": "\nvoid runControlSystem_000815ec(void)\n\n{\n  initializeDataVariable();\n  initializeAndUpdateParameters();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeAndCalculate();\n  do {\n    runControlLogic();\n    checkAndExecuteFunctions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_control_system_000815ec",
                "initialize_data_variable_00081618": "initializeDataVariable",
                "initialize_and_update_parameters_00080774": "initializeAndUpdateParameters",
                "initialize_and_calculate_000801e0": "initializeAndCalculate",
                "control_system_00080250": "runControlLogic",
                "check_and_execute_functions_00080970": "checkAndExecuteFunctions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_variable_00081618",
            "code": "\n\n\nvoid initialize_data_variable_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_variable_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_value_00081624",
            "code": "\nint calculateValue_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = check_bit_pattern_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((elfRelArray[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)elfRelArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_value_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint checkBitPattern_00081684(uint *bits,uint mask,uint pattern,int maxIterations)\n\n{\n  int index;\n  \n  do {\n    if ((*bits & mask) != pattern) {\n      do {\n        if ((*bits & mask) == pattern) {\n          index = 0;\n          do {\n            if ((*bits & mask) != pattern) {\n              return index;\n            }\n            index = index + 1;\n          } while (maxIterations != index);\n          return 0;\n        }\n        maxIterations = maxIterations + -1;\n      } while (maxIterations != 0);\n      return 0;\n    }\n    maxIterations = maxIterations + -1;\n  } while (maxIterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "bits",
                "param_2": "mask",
                "param_3": "pattern",
                "param_4": "maxIterations",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_000816d8",
            "code": "\nundefined4 get_data_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword offset,dword newValue,dword flag)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitFlag;\n  code *handleError;\n  \n  if (relocationTable[48].r_offset == 0) {\n    relocationTable[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocationTable[48].r_offset + 4);\n  relocationEntry = (dword *)relocationTable[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)allocate_and_link_memory_000817f0(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*handleError)(0xffffffff);\n      return;\n    }\n    *relocationEntry = relocationTable[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    relocationTable[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitFlag = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = offset;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitFlag;\n  relocationEntry[index + 0x42] = flag;\n  relocationEntry[99] = bitFlag | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = newValue;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*handleError)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "offset",
                "param_2": "newValue",
                "param_3": "flag",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitFlag",
                "UNRECOVERED_JUMPTABLE_00": "handleError",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "assertion_failure_000816f8",
            "code": "\nvoid assertionFailure_000816f8(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 fileAssertPtr;\n  undefined4 functionPtr;\n  char *separator;\n  undefined8 memoryPtr;\n  \n  fileAssertPtr = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (message == (char *)0x0) goto LAB_0008171c;\n  functionPtr = function;\n  separator = \", function: \";\n  do {\n    function = file;\n    update_function_00081750(fileAssertPtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionPtr,file,line,\n                 separator,message);\n    memoryPtr = initialize_memory_000836ec();\n    line = (undefined4)((ulonglong)memoryPtr >> 0x20);\n    fileAssertPtr = (undefined4)memoryPtr;\nLAB_0008171c:\n    message = \"\";\n    functionPtr = function;\n    separator = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "assertion_failure_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "uVar1": "fileAssertPtr",
                "uVar2": "functionPtr",
                "pcVar3": "separator",
                "uVar4": "memoryPtr"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "update_function_00081750",
            "code": "\nvoid updateFunction_00081750(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 updatedParam3;\n  undefined4 updatedParam4;\n  \n  updatedParam3 = param3;\n  updatedParam4 = param4;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param1,param2,&updatedParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "update_function_00081750",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_8": "updatedParam3",
                "uStack_4": "updatedParam4"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  FUNC_00085844();\n  functionPointer = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_function_000817c8",
            "code": "\nvoid executeFunction_000817c8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  arg4_copy = arg4;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),arg1,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_function_000817c8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_c": "arg2_copy",
                "uStack_8": "arg3_copy",
                "uStack_4": "arg4_copy"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_and_link_memory_000817f0",
            "code": "\nvoid allocateAndLinkMemory_000817f0(undefined4 inputParam)\n\n{\n  allocate_and_link_memory_00081810(relArray[140].offset,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_and_link_memory_000817f0",
                "param_1": "inputParam",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "relocate_and_assign_sum_00081800",
            "code": "\nvoid relocateAndAssignSum_00081800(undefined4 input)\n\n{\n  relocate_and_assign_sum_00083b10(relocationTable[140].offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "relocate_and_assign_sum_00081800",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_and_link_memory_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateAndLinkMemory_00081810(undefined4 *result,uint size)\n\n{\n  dword relOffset;\n  int nextOffset;\n  uint alignment;\n  uint alignedSize;\n  int nextHeaderOffset;\n  uint diffSize;\n  dword currOffset;\n  uint currSize;\n  int nextSize;\n  undefined *header;\n  dword currHeaderOffset;\n  dword prevHeaderOffset;\n  int i;\n  dword *section;\n  uint headerSize;\n  undefined *newHeader;\n  dword *prelOffset7;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    headerSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    headerSize = size + 0xb & 0xfffffff8;\n    if (((int)headerSize < 0) || (headerSize < size)) {\nLAB_00081876:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(result);\n  relOffset = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (headerSize < 0x1f8) {\n    i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + headerSize);\n    if ((i != headerSize + 0x20070464) ||\n       (nextOffset = i + 8, i = *(int *)(i + 0x14), nextOffset != i)) {\n      nextHeaderOffset = *(int *)(i + 0xc);\n      nextSize = (*(uint *)(i + 4) & 0xfffffffc) + i;\n      headerSize = *(uint *)(nextSize + 4);\n      nextOffset = *(int *)(i + 8);\n      *(int *)(nextOffset + 0xc) = nextHeaderOffset;\n      *(int *)(nextHeaderOffset + 8) = nextOffset;\n      *(uint *)(nextSize + 4) = headerSize | 1;\n      FUNC_00081f98(result);\n      return (int *)(i + 8);\n    }\n    index = (headerSize >> 3) + 2;\n  }\n  else {\n    index = headerSize >> 9;\n    if (index == 0) {\n      nextOffset = 0x7e;\n      i = 0x3f;\n    }\n    else if (index < 5) {\n      i = (headerSize >> 6) + 0x38;\n      nextOffset = i * 2;\n    }\n    else if (index < 0x15) {\n      i = index + 0x5b;\n      nextOffset = i * 2;\n    }\n    else if (index < 0x55) {\n      i = (headerSize >> 0xc) + 0x6e;\n      nextOffset = i * 2;\n    }\n    else if (index < 0x155) {\n      i = (headerSize >> 0xf) + 0x77;\n      nextOffset = i * 2;\n    }\n    else if (index < 0x555) {\n      i = (headerSize >> 0x12) + 0x7c;\n      nextOffset = i * 2;\n    }\n    else {\n      nextOffset = 0xfc;\n      i = 0x7e;\n    }\n    for (currOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[nextOffset]; nextOffset * 4 + 0x20070464U != currOffset\n        ; currOffset = *(dword *)(currOffset + 0xc)) {\n      index = *(uint *)(currOffset + 4) & 0xfffffffc;\n      nextHeaderOffset = index - headerSize;\n      if (0xf < nextHeaderOffset) {\n        i = i + -1;\n        break;\n      }\n      if (-1 < nextHeaderOffset) {\n        nextOffset = index + currOffset;\n        headerSize = *(uint *)(nextOffset + 4);\n        nextHeaderOffset = *(int *)(currOffset + 0xc);\n        i = *(int *)(currOffset + 8);\n        *(int *)(i + 0xc) = nextHeaderOffset;\n        *(int *)(nextHeaderOffset + 8) = i;\n        *(uint *)(nextOffset + 4) = headerSize | 1;\n        FUNC_00081f98(result);\n        return (int *)(currOffset + 8);\n      }\n    }\n    index = i + 1;\n  }\n  currOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    alignment = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    alignedSize = alignment & 0xfffffffc;\n    diffSize = alignedSize - headerSize;\n    if (0xf < (int)diffSize) {\n      currOffset = headerSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = headerSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currOffset;\n      *(undefined4 *)(currOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(currOffset + 8) = 0x2007046c;\n      *(uint *)(currOffset + 4) = diffSize | 1;\n      *(uint *)(currOffset + diffSize) = diffSize;\n      FUNC_00081f98(result);\n      return (int *)(relOffset + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)diffSize) {\n      *(uint *)(alignedSize + relOffset + 4) = *(uint *)(alignedSize + relOffset + 4) | 1;\n      FUNC_00081f98(result);\n      return (int *)(relOffset + 8);\n    }\n    if (alignedSize < 0x200) {\n      alignedSize = alignment & 0xfffffff8;\n      i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedSize);\n      currOffset = 1 << ((int)(alignment >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relOffset + 8) = i;\n      *(uint *)(relOffset + 0xc) = alignedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedSize) = relOffset;\n      *(dword *)(i + 0xc) = relOffset;\n    }\n    else {\n      diffSize = alignment >> 9;\n      if (diffSize < 5) {\n        nextOffset = (alignment >> 6) + 0x38;\n        i = nextOffset * 2;\n      }\n      else if (diffSize < 0x15) {\n        nextOffset = diffSize + 0x5b;\n        i = nextOffset * 2;\n      }\n      else if (diffSize < 0x55) {\n        nextOffset = (alignment >> 0xc) + 0x6e;\n        i = nextOffset * 2;\n      }\n      else if (diffSize < 0x155) {\n        nextOffset = (alignment >> 0xf) + 0x77;\n        i = nextOffset * 2;\n      }\n      else if (diffSize < 0x555) {\n        nextOffset = (alignment >> 0x12) + 0x7c;\n        i = nextOffset * 2;\n      }\n      else {\n        i = 0xfc;\n        nextOffset = 0x7e;\n      }\n      currOffset = i * 4 + 0x20070464;\n      currHeaderOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[i];\n      if (currHeaderOffset == currOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (nextOffset >> 2 & 0xffU);\n        prevHeaderOffset = currHeaderOffset;\n      }\n      else {\n        do {\n          prevHeaderOffset = currHeaderOffset;\n          if ((*(uint *)(currHeaderOffset + 4) & 0xfffffffc) <= alignedSize) break;\n          currHeaderOffset = *(dword *)(currHeaderOffset + 8);\n          prevHeaderOffset = currHeaderOffset;\n        } while (currOffset != currHeaderOffset);\n        currHeaderOffset = *(dword *)(prevHeaderOffset + 0xc);\n      }\n      currOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relOffset + 0xc) = currHeaderOffset;\n      *(dword *)(relOffset + 8) = prevHeaderOffset;\n      *(dword *)(currHeaderOffset + 8) = relOffset;\n      *(dword *)(prevHeaderOffset + 0xc) = relOffset;\n    }\n  }\n  relOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  alignment = 1 << ((int)index >> 2 & 0xffU);\n  if (alignment <= currOffset) {\n    if ((currOffset & alignment) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        alignment = alignment << 1;\n        index = index + 4;\n      } while ((currOffset & alignment) == 0);\n    }\n    do {\n      prelOffset7 = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      section = prelOffset7;\n      alignedSize = index;\n      do {\n        for (header = (undefined *)section[3]; section != (dword *)header;\n            header = *(undefined **)(header + 0xc)) {\n          diffSize = *(uint *)(header + 4) & 0xfffffffc;\n          currSize = diffSize - headerSize;\n          if (0xf < (int)currSize) {\n            nextOffset = *(int *)(header + 8);\n            i = *(int *)(header + 0xc);\n            newHeader = header + headerSize;\n            *(uint *)(header + 4) = headerSize | 1;\n            *(int *)(nextOffset + 0xc) = i;\n            *(int *)(i + 8) = nextOffset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newHeader;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newHeader;\n            *(undefined4 *)(newHeader + 0xc) = 0x2007046c;\n            *(undefined4 *)(newHeader + 8) = 0x2007046c;\n            *(uint *)(newHeader + 4) = currSize | 1;\n            *(uint *)(newHeader + currSize) = currSize;\n            FUNC_00081f98(result);\n            return (int *)(header + 8);\n          }\n          if (-1 < (int)currSize) {\n            i = *(int *)(header + 8);\n            nextOffset = *(int *)(header + 0xc);\n            *(uint *)(header + diffSize + 4) = *(uint *)(header + diffSize + 4) | 1;\n            *(int *)(i + 0xc) = nextOffset;\n            *(int *)(nextOffset + 8) = i;\n            FUNC_00081f98(result);\n            return (int *)(header + 8);\n          }\n        }\n        alignedSize = alignedSize + 1;\n        section = section + 2;\n      } while ((alignedSize & 3) != 0);\n      do {\n        diffSize = index & 3;\n        header = (undefined *)(prelOffset7 + -2);\n        index = index - 1;\n        if (diffSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~alignment;\n          break;\n        }\n        prelOffset7 = (dword *)*prelOffset7;\n      } while (prelOffset7 == (dword *)header);\n      alignment = alignment * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= alignment &&\n           alignment - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = alignedSize, alignment == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & alignment) == 0; alignment = alignment << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((headerSize <= index) &&\n     (alignment = index - headerSize, currOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)alignment))\n  goto LAB_00081b1a;\n  alignment = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    alignedSize = headerSize + DAT_20071218 + 0x10;\n  }\n  else {\n    alignedSize = headerSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  currOffset = calculate_and_assign_sum_0008236c(result,alignedSize);\n  if ((currOffset == 0xffffffff) || ((currOffset < alignment && (relOffset != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    diffSize = DAT_2007121c + alignedSize;\n    DAT_2007121c = diffSize;\n    if ((alignment == currOffset) && ((alignment & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignedSize + index | 1;\n    }\n    else {\n      currHeaderOffset = currOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        currHeaderOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = diffSize + (currOffset - alignment);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = currHeaderOffset;\n      alignment = currOffset & 7;\n      if (alignment == 0) {\n        i = 0x1000;\n      }\n      else {\n        currOffset = currOffset + (8 - alignment);\n        i = 0x1008 - alignment;\n      }\n      i = i - (alignedSize + currOffset & 0xfff);\n      nextOffset = calculate_and_assign_sum_0008236c(result,i);\n      if (nextOffset == -1) {\n        alignment = 1;\n        i = 0;\n      }\n      else {\n        alignment = (nextOffset - currOffset) + i | 1;\n      }\n      diffSize = DAT_2007121c + i;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currOffset;\n      DAT_2007121c = diffSize;\n      *(uint *)(currOffset + 4) = alignment;\n      if (relOffset != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(currOffset + 4) = 1;\n          index = 0;\n          goto LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(relOffset + 4) = index | *(uint *)(relOffset + 4) & 1;\n        *(undefined4 *)(relOffset + index + 4) = 5;\n        *(undefined4 *)(relOffset + index + 8) = 5;\n        if (0xf < index) {\n          relocate_and_assign_sum_00083b10(result,relOffset + 8);\n          diffSize = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < diffSize) {\n      DAT_20071214 = diffSize;\n    }\n    if (DAT_20071210 < diffSize) {\n      DAT_20071210 = diffSize;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  alignment = index - headerSize;\n  if ((index < headerSize) || ((int)alignment < 0x10)) {\n    FUNC_00081f98(result);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = headerSize + currOffset;\n  *(uint *)(currOffset + 4) = headerSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignment | 1;\n  FUNC_00081f98(result);\n  return (int *)(currOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_and_link_memory_00081810",
                "param_1": "result",
                "param_2": "size",
                "dVar1": "relOffset",
                "iVar2": "nextOffset",
                "uVar3": "alignment",
                "uVar4": "alignedSize",
                "iVar5": "nextHeaderOffset",
                "uVar6": "diffSize",
                "dVar7": "currOffset",
                "uVar8": "currSize",
                "iVar9": "nextSize",
                "puVar10": "header",
                "dVar11": "currHeaderOffset",
                "dVar12": "prevHeaderOffset",
                "iVar13": "i",
                "pdVar14": "section",
                "uVar15": "headerSize",
                "puVar16": "newHeader",
                "uVar18": "index"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrIter;\n  undefined4 *srcPtr;\n  uint remainingLength;\n  uint tempLength;\n  bool condition;\n  \n  destPtrIter = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (length < 8) {\n      tempLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = src;\n          srcPtr = destPtrIter;\n          condition = tempLength != 0;\n          tempLength = tempLength - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrIter = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      tempLength = 4 - ((uint)dest & 3);\n      length = length - tempLength;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destPtrIter = destPtr;\n      src = srcPtr;\n      if ((tempLength & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        destPtrIter = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destPtrIter = *src;\n    destPtrIter[1] = src[1];\n    destPtrIter[2] = src[2];\n    destPtrIter[3] = src[3];\n    destPtrIter[4] = src[4];\n    destPtrIter[5] = src[5];\n    destPtrIter[6] = src[6];\n    destPtrIter[7] = src[7];\n    destPtrIter[8] = src[8];\n    destPtrIter[9] = src[9];\n    destPtrIter[10] = src[10];\n    destPtrIter[0xb] = src[0xb];\n    destPtrIter[0xc] = src[0xc];\n    destPtrIter[0xd] = src[0xd];\n    destPtrIter[0xe] = src[0xe];\n    destPtrIter[0xf] = src[0xf];\n    destPtrIter = destPtrIter + 0x10;\n    src = src + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destPtrIter = *src;\n      destPtrIter[1] = src[1];\n      destPtrIter[2] = src[2];\n      destPtrIter[3] = src[3];\n      destPtrIter = destPtrIter + 4;\n      src = src + 4;\n      condition = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (condition);\n  }\n  tempLength = remainingLength + 0xc;\n  srcPtr = destPtrIter;\n  destPtr = src;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      condition = 3 < tempLength;\n      tempLength = tempLength - 4;\n      destPtrIter = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (condition);\n  }\nLAB_00081dcc:\n  if (tempLength + 4 != 0) {\n    destPtr = destPtrIter;\n    srcPtr = src;\n    if ((tempLength & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destPtrIter + 1);\n      *(undefined *)destPtrIter = *(undefined *)src;\n    }\n    if ((tempLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destPtrIter",
                "puVar3": "srcPtr",
                "uVar4": "remainingLength",
                "uVar5": "tempLength",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "reverse_copy_00081e34",
            "code": "\nvoid reverseCopy_00081e34(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  int counter;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *endPtr;\n  uint tempLength;\n  undefined *tempPtr;\n  uint remainingBytes;\n  \n  if ((source < destination) && (endPtr = (undefined4 *)((int)source + length), destination < endPtr)) {\n    tempPtr = (undefined *)((int)destination + length);\n    counter = length - 1;\n    if (length != 0) {\n      do {\n        endPtr = (undefined4 *)((int)endPtr + -1);\n        counter = counter + -1;\n        tempPtr = tempPtr + -1;\n        *tempPtr = *(undefined *)endPtr;\n      } while (counter != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    endPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = endPtr + 4;\n      *endPtr = *srcPtr;\n      endPtr[1] = srcPtr[1];\n      endPtr[2] = srcPtr[2];\n      endPtr[3] = srcPtr[3];\n      endPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    counter = (length - 0x10 >> 4) + 1;\n    remainingBytes = length & 0xf;\n    source = source + counter * 4;\n    destination = destination + counter * 4;\n    tempLength = remainingBytes;\n    endPtr = destination;\n    srcPtr = source;\n    if (3 < remainingBytes) {\n      do {\n        tempLength = tempLength - 4;\n        *endPtr = *srcPtr;\n        endPtr = endPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempLength);\n      counter = (remainingBytes - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + counter);\n      source = (undefined4 *)((int)source + counter);\n      remainingBytes = length & 3;\n    }\n    length = remainingBytes;\n    if (length == 0) {\n      return;\n    }\n  }\n  endPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)endPtr + 1);\n    *(undefined *)endPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    endPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "counter",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "endPtr",
                "uVar5": "tempLength",
                "puVar6": "tempPtr",
                "uVar7": "remainingBytes"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_memory_00081f00",
            "code": "\nvoid fillMemory_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 valueRepeat;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)dest & 3) != 0) {\n    isSizeZero = size == 0;\n    destPtr = dest;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)dest & 3) == 0) break;\n      isSizeZero = size == 0;\n      destPtr = dest;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    valueRepeat = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = dest;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *destPtr = valueRepeat;\n        destPtr[1] = valueRepeat;\n        destPtr[2] = valueRepeat;\n        destPtr[3] = valueRepeat;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = dest;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *dest = valueRepeat;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    destPtr = dest;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_memory_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "valueRepeat",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "allocate_and_link_memory_00081f9c",
            "code": "\nvoid allocateAndLinkMemory_00081f9c(undefined4 pointer,undefined4 size)\n\n{\n  allocate_and_link_memory_00081fac(relocationArray[140].offset,pointer,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "allocate_and_link_memory_00081f9c",
                "param_1": "pointer",
                "param_2": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_and_link_memory_00081fac",
            "code": "\nint * allocateAndLinkMemory_00081fac(undefined4 *param_address,int *input_array,uint input_array_size)\n\n{\n  dword temp1;\n  int *output_array;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint temp7;\n  uint temp8;\n  int *temp9;\n  \n  if (input_array == (int *)0x0) {\n    output_array = (int *)allocate_and_link_memory_00081810(param_address,input_array_size);\n    return output_array;\n  }\n  FUNC_00081f94();\n  temp4 = input_array[-1];\n  temp7 = temp4 & 0xfffffffc;\n  output_array = input_array + -2;\n  if (input_array_size + 0xb < 0x17) {\n    temp8 = 0x10;\n  }\n  else {\n    temp8 = input_array_size + 0xb & 0xfffffff8;\n    if ((int)temp8 < 0) goto LAB_00082078;\n  }\n  if (temp8 < input_array_size) {\nLAB_00082078:\n    *param_address = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)temp8) {\n    temp1 = (int)output_array + temp7;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp8 + 0x10) <= (int)(temp2 + temp7)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)output_array + temp8;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp7) - temp8 | 1;\n        input_array[-1] = temp8 | input_array[-1] & 1U;\n        FUNC_00081f98(param_address);\n        return input_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)temp8 <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp9 = (int *)((int)output_array - input_array[-2]);\n      temp4 = (temp9[1] & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp8 + 0x10) <= (int)(temp2 + temp4)) {\n            output_array = temp9 + 2;\n            temp3 = *output_array;\n            temp5 = temp9[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp6 = output_array;\n              if (0x13 < temp7) {\n                temp9[2] = *input_array;\n                temp9[3] = input_array[1];\n                if (temp7 < 0x1c) {\n                  input_array = input_array + 2;\n                  temp6 = temp9 + 4;\n                }\n                else {\n                  temp9[4] = input_array[2];\n                  temp9[5] = input_array[3];\n                  if (temp7 == 0x24) {\n                    temp9[6] = input_array[4];\n                    temp6 = input_array + 5;\n                    input_array = input_array + 6;\n                    temp9[7] = *temp6;\n                    temp6 = temp9 + 8;\n                  }\n                  else {\n                    input_array = input_array + 4;\n                    temp6 = temp9 + 6;\n                  }\n                }\n              }\n              *temp6 = *input_array;\n              temp6[1] = input_array[1];\n              temp6[2] = input_array[2];\n            }\n            else {\n              reverse_copy_00081e34(output_array,input_array);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp9 + temp8;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp4) - temp8 | 1;\n            temp9[1] = temp8 | temp9[1] & 1U;\n            FUNC_00081f98(param_address);\n            return output_array;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)temp8 <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp9 + 2;\n            temp3 = *temp6;\n            temp5 = temp9[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              output_array = temp6;\n              if (0x13 < temp4) {\n                temp9[2] = *input_array;\n                temp9[3] = input_array[1];\n                if (temp4 < 0x1c) {\n                  input_array = input_array + 2;\n                  output_array = temp9 + 4;\n                }\n                else {\n                  temp9[4] = input_array[2];\n                  temp9[5] = input_array[3];\n                  if (temp4 == 0x24) {\n                    temp9[6] = input_array[4];\n                    output_array = input_array + 5;\n                    input_array = input_array + 6;\n                    temp9[7] = *output_array;\n                    output_array = temp9 + 8;\n                  }\n                  else {\n                    input_array = input_array + 4;\n                    output_array = temp9 + 6;\n                  }\n                }\n              }\n              *output_array = *input_array;\n              output_array[1] = input_array[1];\n              output_array[2] = input_array[2];\n              temp4 = temp9[1];\n              output_array = temp9;\n              input_array = temp6;\n            }\n            else {\n              reverse_copy_00081e34(temp6,input_array);\n              temp4 = temp9[1];\n              output_array = temp9;\n              input_array = temp6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)temp8 <= (int)temp4) {\n        temp6 = temp9 + 2;\n        temp3 = *temp6;\n        temp5 = temp9[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          output_array = temp6;\n          if (0x13 < temp2) {\n            temp9[2] = *input_array;\n            temp9[3] = input_array[1];\n            if (temp2 < 0x1c) {\n              input_array = input_array + 2;\n              output_array = temp9 + 4;\n            }\n            else {\n              temp9[4] = input_array[2];\n              temp9[5] = input_array[3];\n              if (temp2 == 0x24) {\n                temp9[6] = input_array[4];\n                output_array = input_array + 5;\n                input_array = input_array + 6;\n                temp9[7] = *output_array;\n                output_array = temp9 + 8;\n              }\n              else {\n                input_array = input_array + 4;\n                output_array = temp9 + 6;\n              }\n            }\n          }\n          *output_array = *input_array;\n          output_array[1] = input_array[1];\n          output_array[2] = input_array[2];\n          temp4 = temp9[1];\n          output_array = temp9;\n          input_array = temp6;\n        }\n        else {\n          reverse_copy_00081e34(temp6,input_array);\n          temp4 = temp9[1];\n          output_array = temp9;\n          input_array = temp6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp9 = (int *)allocate_and_link_memory_00081810(param_address,input_array_size);\n    if (temp9 == (int *)0x0) goto LAB_000820a0;\n    temp4 = input_array[-1];\n    if (temp9 + -2 != (int *)((temp4 & 0xfffffffe) + (int)output_array)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        output_array = input_array;\n        temp6 = temp9;\n        if (0x13 < temp7) {\n          *temp9 = *input_array;\n          temp9[1] = input_array[1];\n          if (temp7 < 0x1c) {\n            output_array = input_array + 2;\n            temp6 = temp9 + 2;\n          }\n          else {\n            temp9[2] = input_array[2];\n            temp9[3] = input_array[3];\n            if (temp7 == 0x24) {\n              temp9[4] = input_array[4];\n              temp9[5] = input_array[5];\n              output_array = input_array + 6;\n              temp6 = temp9 + 6;\n            }\n            else {\n              output_array = input_array + 4;\n              temp6 = temp9 + 4;\n            }\n          }\n        }\n        *temp6 = *output_array;\n        temp6[1] = output_array[1];\n        temp6[2] = output_array[2];\n      }\n      else {\n        reverse_copy_00081e34(temp9,input_array);\n      }\n      relocate_and_assign_sum_00083b10(param_address,input_array);\n      goto LAB_000820a0;\n    }\n    temp7 = temp7 + (temp9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = temp7 - temp8;\n  temp9 = input_array;\n  if (temp2 < 0x10) {\n    output_array[1] = temp4 & 1 | temp7;\n    *(uint *)((int)output_array + temp7 + 4) = *(uint *)((int)output_array + temp7 + 4) | 1;\n  }\n  else {\n    output_array[1] = temp4 & 1 | temp8;\n    *(uint *)((int)output_array + temp8 + 4) = temp2 | 1;\n    *(uint *)((int)output_array + temp2 + temp8 + 4) = *(uint *)((int)output_array + temp2 + temp8 + 4) | 1;\n    relocate_and_assign_sum_00083b10(param_address,(int)output_array + temp8 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_address);\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_and_link_memory_00081fac",
                "param_1": "param_address",
                "param_2": "input_array",
                "param_3": "input_array_size",
                "dVar1": "temp1",
                "piVar2": "output_array",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "piVar10": "temp9"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "calculate_and_assign_sum_0008236c",
            "code": "\nvoid calculateAndAssignSum_0008236c(int *resultPointer,undefined4 inputValue)\n\n{\n  int sum;\n  \n  DAT_20071244 = 0;\n  sum = calculate_sum_00080e88(inputValue);\n  if ((sum == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "calculate_and_assign_sum_0008236c",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_uint_arrays_00082390",
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)array2 & 3;\n    if (val1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto LAB_0008258e;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = array2 + 1;\n      val3 = *array2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\nLAB_0008259a:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *array1;\n        val3 = array1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto LAB_0008258e;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    val1 = *array1;\n    val2 = array1[1];\n    val3 = *array2;\n    val4 = array2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto LAB_0008259a;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\nLAB_0008259e:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - LZCOUNT(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\nLAB_0008258e:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copyString_000825cc(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *currentPointer;\n  uint currentWord;\n  uint currentByte;\n  uint *newPointer;\n  bool isZero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    currentPointer = src;\n    if (((uint)src & 1) != 0) {\n      currentPointer = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = currentPointer;\n    if (((uint)currentPointer & 2) != 0) {\n      src = (uint *)((int)currentPointer + 2);\n      currentShort = *(ushort *)currentPointer;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentWord = *src;\n  currentPointer = src + 1;\n  newPointer = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_00082630;\n    newPointer = dest + 1;\n    *dest = currentWord;\n    currentPointer = src + 2;\n    currentWord = src[1];\n  }\n  while( true ) {\n    nextPointer = currentPointer + 1;\n    currentByte = *currentPointer;\n    dest = newPointer;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    dest = newPointer + 1;\n    *newPointer = currentWord;\n    currentWord = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    currentPointer = currentPointer + 2;\n    currentWord = *nextPointer;\n    newPointer = newPointer + 2;\n    *dest = currentByte;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)currentWord;\n    currentByte = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "currentPointer",
                "uVar5": "currentWord",
                "uVar6": "currentByte",
                "puVar7": "newPointer",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool foundZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  foundZero = (value & 0xff) == 0;\n  if (!foundZero) {\n    leadingZeros = leadingZeros + 1;\n    foundZero = (value & 0xff00) == 0;\n  }\n  if (!foundZero) {\n    leadingZeros = leadingZeros + 1;\n    foundZero = (value & 0xff0000) == 0;\n  }\n  if (!foundZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "foundZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 inputParam,int size,int **data)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint count;\n  undefined4 *ptr3;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = process_data_00083ca8();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = data[2];\n  ptr1 = *data;\n  while (ptr2 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      count = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = process_data_000839b4(inputParam,*ptr3,size);\n        count = count + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (value2 != count);\n      ptr2 = data[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value1 & 0xfffffffc));\n    data[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "inputParam",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "count",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_formatted_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processFormattedString_0008289c(int str_buffer,int format_string,int *******param_array,int **arg_array)\n\n{\n  bool isNegative;\n  bool isLong;\n  bool isHash;\n  char cVar4;\n  bool isZeroPadded;\n  int ********localPointers;\n  int *currentParam1;\n  int paramCount;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool isLong6;\n  longlong paramLong;\n  int *******maxParamCount;\n  int *******paramArrayPos;\n  int **argArrayPos;\n  int returnVal;\n  char *conversionChars;\n  char formatChar;\n  undefined paddingChar;\n  undefined local_9f;\n  int ********localPointers;\n  int paramCount;\n  int *******paramArrayPos;\n  undefined zeroPaddedChar;\n  char currentChar;\n  undefined hashChar;\n  undefined local_68 [4];\n  int *******localPointersArray [16];\n  \n  if ((str_buffer != 0) && (*(int *)(str_buffer + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  uVar13 = (uint)*(ushort *)(format_string + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format_string + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(format_string + 0xc) = (short)uVar13;\n    *(uint *)(format_string + 100) = *(uint *)(format_string + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(format_string + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    paramCount = process_binary_function_0008356c(str_buffer,format_string);\n    if (paramCount != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format_string + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format_string + 0xe)) {\n    paramCount = process_and_verify_data_000834f0(str_buffer,format_string,param_array,arg_array);\n    return paramCount;\n  }\nLAB_000828ee:\n  conversionChars = (char *)0x0;\n  paramArrayPos = (int *******)0x0;\n  paramCount = 0;\n  returnVal = 0;\n  localPointers = (int ********)local_68;\n  argArrayPos = arg_array;\n  localPointers = (int ********)local_68;\nLAB_00082902:\n  pppppppiVar10 = param_array;\n  if ((*(char *)param_array != '\\0') && (*(char *)param_array != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_array);\n    if (pppppppiVar20 != (int *******)0x0) {\n      paramCount = paramCount + 1;\n      paramArrayPos = (int *******)((int)paramArrayPos + (int)pppppppiVar20);\n      *localPointers = param_array;\n      localPointers[1] = pppppppiVar20;\n      if (paramCount < 8) {\n        localPointers = localPointers + 2;\n      }\n      else {\n        if (paramArrayPos == (int *******)0x0) {\n          returnVal = returnVal + (int)pppppppiVar20;\n          paramCount = 0;\n          localPointers = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n        localPointers = (int ********)local_68;\n        if (paramCount != 0) goto LAB_00083142;\n      }\n      returnVal = returnVal + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    formatChar = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    isZeroPadded = false;\n    isLong = false;\n    isNegative = false;\n    isHash = false;\n    isLong6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    paramArrayPos = (int *******)0xffffffff;\n    param_array = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082976:\n    param_array = (int *******)((int)param_array + 1);\nLAB_0008297a:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        maxParamCount = (int *******)0x1;\n        paramArrayPos = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&zeroPaddedChar;\n        zeroPaddedChar = (char)uVar14;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isHash = true;\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argArrayPos;\n      argArrayPos = argArrayPos + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_array;\n      formatChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_array;\n      pppppppiVar10 = (int *******)((int)param_array + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_array + 1);\n        paramArrayPos = (int *******)*argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        param_array = pppppppiVar10;\n        if ((int)paramArrayPos < 0) {\n          paramArrayPos = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_array = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_array;\n        } while (uVar11 < 10);\n        paramArrayPos = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        paramArrayPos = (int *******)0x0;\n        param_array = pppppppiVar10;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isLong = true;\n      if (isNegative == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argArrayPos = (int **)((int)argArrayPos + 7U & 0xfffffff8);\n      piVar19 = *argArrayPos;\n      piVar22 = argArrayPos[1];\n      argArrayPos = argArrayPos + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isLong = true;\n      if (isNegative != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      paramCount = (uint)isLong << 4;\n      iVar15 = (uint)isNegative << 5;\n      if ((isLong == 0) && (iVar15 = (uint)isLong6 << 6, isLong6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        paramCount = iVar15;\n        piVar19 = *argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isLong = true;\n      if (isNegative != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isLong) || (isLong6 == false)) {\n        paramCount = 1;\n        piVar19 = *argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        paramCount = 1;\n      }\n      break;\n    case 0x58:\n      conversionChars = \"0123456789ABCDEF\";\n      if (isNegative == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar12 = (int **)((int)argArrayPos + 7U & 0xfffffff8);\n      argArrayPos = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *argArrayPos;\n      argArrayPos = argArrayPos + 1;\n      maxParamCount = (int *******)0x1;\n      zeroPaddedChar = SUB41(piVar19,0);\n      paramArrayPos = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&zeroPaddedChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isNegative != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isLong == false) && (isLong6 != false)) {\n        piVar19 = (int *)(int)*(short *)argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        isLong6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isLong6);\n        formatChar = '-';\n        cVar4 = '-';\n        paramCount = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)paramArrayPos) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      paramCount = 1;\n      cVar4 = formatChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isLong6 = true;\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_array;\n      if (uVar14 == 0x6c) {\n        isNegative = true;\n        uVar14 = (uint)*(byte *)((int)param_array + 1);\n        param_array = (int *******)((int)param_array + 1);\n      }\n      else {\n        isLong = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isNegative == false) {\n        if (isLong == false) {\n          if (isLong6) {\n            piVar19 = *argArrayPos;\n            argArrayPos = argArrayPos + 1;\n            *(short *)piVar19 = (short)returnVal;\n          }\n          else {\n            piVar19 = *argArrayPos;\n            argArrayPos = argArrayPos + 1;\n            *piVar19 = returnVal;\n          }\n        }\n        else {\n          piVar19 = *argArrayPos;\n          argArrayPos = argArrayPos + 1;\n          *piVar19 = returnVal;\n        }\n      }\n      else {\n        piVar19 = *argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        *piVar19 = returnVal;\n        piVar19[1] = returnVal >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isNegative == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar12 = (int **)((int)argArrayPos + 7U & 0xfffffff8);\n      argArrayPos = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      paramCount = 0;\n      break;\n    case 0x70:\n      piVar19 = *argArrayPos;\n      argArrayPos = argArrayPos + 1;\n      local_9f = 0x78;\n      isZeroPadded = true;\n      piVar22 = (int *)0x0;\n      paddingChar = 0x30;\n      conversionChars = \"0123456789abcdef\";\n      paramCount = 2;\n      break;\n    case 0x71:\n      isNegative = true;\n      uVar14 = (uint)*(byte *)param_array;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*argArrayPos;\n      formatChar = '\\0';\n      argArrayPos = argArrayPos + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)paramArrayPos < 0) {\n          paramArrayPos = (int *******)count_leading_zeros_00082688(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = formatChar;\n        }\n        else {\n          paramCount = find_occurrence_000840f8(ppppppppiVar25,0,paramArrayPos);\n          cVar4 = formatChar;\n          if (paramCount == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(paramCount - (int)ppppppppiVar25);\n            if ((int)paramArrayPos <= (int)(int *******)(paramCount - (int)ppppppppiVar25)) {\n              pppppppiVar18 = paramArrayPos;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            paramArrayPos = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < paramArrayPos) {\n        paramArrayPos = (int *******)0x6;\n      }\n      maxParamCount = (int *******)((uint)paramArrayPos & ~((int)paramArrayPos >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      formatChar = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isNegative) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar12 = (int **)((int)argArrayPos + 7U & 0xfffffff8);\n      argArrayPos = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      paramCount = 1;\n      break;\n    case 0x78:\n      conversionChars = \"0123456789abcdef\";\n      if (isNegative != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isLong == false) && (isLong6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)argArrayPos;\n        argArrayPos = argArrayPos + 1;\n      }\n      else {\n        piVar19 = *argArrayPos;\n        argArrayPos = argArrayPos + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isHash) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        paramCount = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        paramCount = 2;\n      }\n    }\n    formatChar = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)paramArrayPos) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    paramLong = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = paramArrayPos;\n    if ((uVar14 == 0) && (paramArrayPos == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((paramCount != 0) || (!isHash)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&currentChar + 1);\n      hashChar = '0';\n      goto LAB_00082afe;\n    }\n    if (paramCount == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&currentChar + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)paramLong >> 0x20);\n          cVar9 = '\\n';\n          check_params_00084530((int)paramLong,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          paramLong = check_params_00084530((int)paramLong,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (paramLong != 0);\n        paramArrayPos = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      hashChar = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&currentChar + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar16 = (int ********)(&currentChar + 1);\n    if (paramCount != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = conversionChars[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    paramArrayPos = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (paramArrayPos != (int *******)0x0) {\n    process_data_00082824(str_buffer,format_string,&localPointers);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format_string + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return returnVal;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    currentParam1 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    paramCount = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)paramCount;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = currentParam1;\n  } while (((uint)currentParam1 | (uint)piVar22) != 0);\n  if (isHash) {\n    if (paramCount == 0x30) {\nLAB_00082afe:\n      paramArrayPos = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      paramArrayPos = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_00083282:\n    paramArrayPos = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  maxParamCount = paramArrayPos;\n  if ((int)paramArrayPos < (int)pppppppiVar10) {\n    maxParamCount = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    maxParamCount = (int *******)((int)maxParamCount + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    maxParamCount = (int *******)((int)maxParamCount + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxParamCount), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      paramCount = paramCount + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        paramCount = paramCount + 1;\n        paramArrayPos = paramArrayPos + 4;\n        *localPointers = (int *******)0x856f0;\n        localPointers[1] = (int *******)0x10;\n        if (paramCount < 8) {\n          iVar15 = paramCount + 2;\n          localPointers = localPointers + 2;\n          paramCount = paramCount;\n        }\n        else if (paramArrayPos == (int *******)0x0) {\n          iVar15 = 1;\n          localPointers = (int ********)local_68;\n          paramCount = 0;\n        }\n        else {\n          paramCount = paramCount;\n          paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n          if (paramCount != 0) goto LAB_00083142;\n          iVar15 = paramCount + 1;\n          localPointers = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      paramCount = iVar15;\n    }\n    paramArrayPos = (int *******)((int)paramArrayPos + (int)pppppppiVar18);\n    *localPointers = (int *******)0x856f0;\n    localPointers[1] = pppppppiVar18;\n    if (paramCount < 8) {\n      paramCount = paramCount + 1;\n      localPointers = localPointers + 2;\n    }\n    else if (paramArrayPos == (int *******)0x0) {\n      paramCount = 1;\n      paramCount = 0;\n      localPointers = (int ********)local_68;\n    }\n    else {\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n      paramCount = paramCount + 1;\n      localPointers = (int ********)local_68;\n    }\n  }\n  else {\n    paramCount = paramCount + 1;\n  }\n  iVar15 = paramCount;\n  if (formatChar != '\\0') {\n    paramArrayPos = (int *******)((int)paramArrayPos + 1);\n    iVar15 = 1;\n    *localPointers = (int *******)&formatChar;\n    localPointers[1] = (int *******)0x1;\n    paramCount = paramCount;\n    if (paramCount < 8) {\n      iVar15 = paramCount + 1;\n      localPointers = localPointers + 2;\n    }\n    else if (paramArrayPos == (int *******)0x0) {\n      paramCount = 0;\n      localPointers = (int ********)local_68;\n    }\n    else {\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n      iVar15 = paramCount + 1;\n      localPointers = (int ********)local_68;\n    }\n  }\n  paramCount = iVar15;\n  iVar17 = paramCount;\n  if (isZeroPadded) {\n    paramArrayPos = (int *******)((int)paramArrayPos + 2);\n    *localPointers = (int *******)&paddingChar;\n    localPointers[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      paramCount = iVar15 + 1;\n      iVar17 = iVar15;\n      localPointers = localPointers + 2;\n    }\n    else if (paramArrayPos == (int *******)0x0) {\n      paramCount = 1;\n      iVar17 = 0;\n      localPointers = (int ********)local_68;\n    }\n    else {\n      paramCount = iVar15;\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n      paramCount = paramCount + 1;\n      iVar17 = paramCount;\n      localPointers = (int ********)local_68;\n    }\n  }\n  paramCount = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxParamCount), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          paramCount = iVar17 + 1;\n          paramArrayPos = paramArrayPos + 4;\n          *localPointers = (int *******)\"0000000000000000\";\n          localPointers[1] = (int *******)0x10;\n          if (7 < paramCount) break;\n          paramCount = iVar17 + 2;\n          localPointers = localPointers + 2;\nLAB_000831f2:\n          iVar17 = paramCount;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (paramArrayPos != (int *******)0x0) {\n          paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n          if (paramCount == 0) {\n            paramCount = paramCount + 1;\n            localPointers = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        paramCount = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        localPointers = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    paramArrayPos = (int *******)((int)paramArrayPos + (int)pppppppiVar18);\n    *localPointers = (int *******)\"0000000000000000\";\n    localPointers[1] = pppppppiVar18;\n    paramCount = paramCount;\n    if (paramCount < 8) {\n      paramCount = paramCount + 1;\n      localPointers = localPointers + 2;\n    }\n    else if (paramArrayPos == (int *******)0x0) {\n      paramCount = 1;\n      paramCount = 0;\n      localPointers = (int ********)local_68;\n    }\n    else {\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n      paramCount = paramCount + 1;\n      localPointers = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)paramArrayPos);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_0008302a:\n    paramArrayPos = (int *******)((int)paramArrayPos + (int)paramArrayPos);\n    *localPointers = (int *******)ppppppppiVar25;\n    localPointers[1] = paramArrayPos;\n    paramArrayPos = paramArrayPos;\n    paramCount = paramCount;\n    if (paramCount < 8) goto LAB_000831be;\n    if (paramArrayPos == (int *******)0x0) {\n      paramCount = 0;\n    }\n    else {\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iVar15 = paramCount;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          paramCount = iVar15 + 1;\n          paramArrayPos = paramArrayPos + 4;\n          *localPointers = (int *******)\"0000000000000000\";\n          localPointers[1] = (int *******)0x10;\n          if (7 < paramCount) break;\n          paramCount = iVar15 + 2;\n          localPointers = localPointers + 2;\nLAB_00082fe6:\n          iVar15 = paramCount;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (paramArrayPos != (int *******)0x0) {\n          paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n          if (paramCount == 0) {\n            paramCount = paramCount + 1;\n            localPointers = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        paramCount = 1;\n        localPointers = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    paramArrayPos = (int *******)((int)paramArrayPos + (int)pppppppiVar10);\n    *localPointers = (int *******)\"0000000000000000\";\n    localPointers[1] = pppppppiVar10;\n    if (paramCount < 8) {\n      paramCount = paramCount + 1;\n      localPointers = localPointers + 2;\n      goto LAB_0008302a;\n    }\n    if (paramArrayPos != (int *******)0x0) {\n      paramCount = paramCount;\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n      paramCount = paramCount + 1;\n      localPointers = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    localPointersArray[0] = paramArrayPos;\n    paramCount = 1;\n    localPointers = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ppppppppiVar16 = localPointers + 2;\n    paramArrayPos = paramArrayPos;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)maxParamCount), 0 < (int)pppppppiVar10)) {\n    paramCount = paramCount;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = paramCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          paramCount = paramCount + 1;\n          paramArrayPos = paramArrayPos + 4;\n          *ppppppppiVar16 = (int *******)0x856f0;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < paramCount) break;\n          iVar15 = paramCount + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_0008307a:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          paramCount = paramCount;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_000830a2;\n        }\n        if (paramArrayPos != (int *******)0x0) {\n          paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n          if (paramCount == 0) {\n            iVar15 = paramCount + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        paramCount = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_000830a2:\n    paramArrayPos = (int *******)((int)paramArrayPos + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x856f0;\n    ppppppppiVar16[1] = pppppppiVar10;\n    paramCount = iVar15;\n    if (7 < iVar15) {\n      if (paramArrayPos == (int *******)0x0) {\n        if ((int)maxParamCount < (int)pppppppiVar20) {\n          maxParamCount = pppppppiVar20;\n        }\n        returnVal = returnVal + (int)maxParamCount;\n        goto LAB_00083186;\n      }\n      paramCount = process_data_00082824(str_buffer,format_string,&localPointers);\n      if (paramCount != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)maxParamCount < (int)pppppppiVar20) {\n    maxParamCount = pppppppiVar20;\n  }\n  returnVal = returnVal + (int)maxParamCount;\n  if ((paramArrayPos != (int *******)0x0) &&\n     (paramCount = process_data_00082824(str_buffer,format_string,&localPointers), paramCount != 0)) goto LAB_00083142;\nLAB_00083186:\n  paramCount = 0;\n  localPointers = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_array;\n  do {\n    param_array = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_array;\n  } while (uVar11 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar14 = (uint)*(byte *)param_array;\n  if (formatChar == '\\0') {\n    formatChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_formatted_string_0008289c",
                "param_1": "str_buffer",
                "param_2": "format_string",
                "param_3": "param_array",
                "param_4": "arg_array",
                "bVar1": "isNegative",
                "bVar2": "isLong",
                "bVar3": "isHash",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "localPointers",
                "piVar7": "currentParam1",
                "iVar8": "paramCount",
                "lVar27": "paramLong",
                "local_dc": "maxParamCount",
                "local_d4": "paramArrayPos",
                "local_c8": "argArrayPos",
                "local_c4": "returnVal",
                "local_c0": "conversionChars",
                "local_a1": "formatChar",
                "local_9c": "localPointers",
                "local_98": "paramCount",
                "local_94": "paramArrayPos",
                "local_90": "zeroPaddedChar",
                "local_69": "hashChar",
                "local_a0": "paddingChar",
                "cStack_6a": "currentChar",
                "local_64": "localPointersArray"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_and_verify_data_000834f0",
            "code": "\nint processAndVerifyData_000834f0(undefined4 inputValue,int dataStruct)\n\n{\n  int result;\n  int processResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize1;\n  ushort ushortValue1;\n  undefined2 ushortValue2;\n  undefined *bufferPtr;\n  undefined4 bufferSize2;\n  undefined4 intZero;\n  undefined4 dataSize;\n  undefined4 otherValue1;\n  undefined4 otherValue2;\n  undefined stackBuffer [1024];\n  \n  otherValue2 = *(undefined4 *)(dataStruct + 100);\n  dataSize = *(undefined4 *)(dataStruct + 0x1c);\n  ushortValue2 = *(undefined2 *)(dataStruct + 0xe);\n  otherValue1 = *(undefined4 *)(dataStruct + 0x24);\n  bufferArray[0] = stackBuffer;\n  ushortValue1 = *(ushort *)(dataStruct + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  intZero = 0;\n  bufferPtr = bufferArray[0];\n  result = process_formatted_string_0008289c(inputValue,bufferArray);\n  if ((-1 < result) && (processResult = process_function_00083850(inputValue,bufferArray), processResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)ushortValue1 << 0x19) < 0) {\n    *(ushort *)(dataStruct + 0xc) = *(ushort *)(dataStruct + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_and_verify_data_000834f0",
                "param_1": "inputValue",
                "param_2": "dataStruct",
                "iVar1": "result",
                "iVar2": "processResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize1",
                "local_47c": "ushortValue1",
                "local_47a": "ushortValue2",
                "local_478": "bufferPtr",
                "local_474": "bufferSize2",
                "local_470": "intZero",
                "local_46c": "dataSize",
                "local_464": "otherValue1",
                "local_424": "otherValue2",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_function_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_binary_function_0008356c",
            "code": "\nundefined4 processBinaryFunction_0008356c(undefined4 *outputPointer,int *inputArray)\n\n{\n  int conditionVariable1;\n  int conditionVariable2;\n  uint valueVariable1;\n  ushort valueVariable2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  valueVariable2 = *(ushort *)(inputArray + 3);\n  valueVariable1 = (uint)valueVariable2;\n  if ((int)(valueVariable1 << 0x1c) < 0) {\n    conditionVariable2 = inputArray[4];\n  }\n  else {\n    if (-1 < (int)(valueVariable1 << 0x1b)) {\n      *outputPointer = 9;\n      *(ushort *)(inputArray + 3) = valueVariable2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(valueVariable1 << 0x1d) < 0) {\n      if ((int *)inputArray[0xc] != (int *)0x0) {\n        if ((int *)inputArray[0xc] != inputArray + 0x10) {\n          relocate_and_assign_sum_00083b10(outputPointer);\n          valueVariable2 = *(ushort *)(inputArray + 3);\n        }\n        inputArray[0xc] = 0;\n      }\n      conditionVariable2 = inputArray[4];\n      valueVariable2 = valueVariable2 & 0xffdb;\n      *inputArray = conditionVariable2;\n      inputArray[1] = 0;\n    }\n    else {\n      conditionVariable2 = inputArray[4];\n    }\n    *(ushort *)(inputArray + 3) = valueVariable2 | 8;\n    valueVariable1 = (uint)(valueVariable2 | 8);\n  }\n  if ((conditionVariable2 == 0) && ((valueVariable1 & 0x280) != 0x200)) {\n    initialize_memory_and_check_value_00084018(outputPointer,inputArray);\n    valueVariable1 = (uint)*(ushort *)(inputArray + 3);\n    conditionVariable2 = inputArray[4];\n  }\n  if ((valueVariable1 & 1) == 0) {\n    conditionVariable1 = 0;\n    if (-1 < (int)(valueVariable1 << 0x1e)) {\n      conditionVariable1 = inputArray[5];\n    }\n    inputArray[2] = conditionVariable1;\n  }\n  else {\n    inputArray[6] = -inputArray[5];\n    inputArray[2] = 0;\n  }\n  if ((conditionVariable2 == 0) && ((int)((uint)*(ushort *)(inputArray + 3) << 0x18) < 0)) {\n    *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_binary_function_0008356c",
                "param_1": "outputPointer",
                "param_2": "inputArray",
                "iVar1": "conditionVariable1",
                "iVar2": "conditionVariable2",
                "uVar3": "valueVariable1",
                "uVar4": "valueVariable2"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_memory_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeMemory_000836ec(void)\n\n{\n  dword *memoryPointer;\n  dword statusMessage;\n  int counter;\n  code *exitFunction;\n  \n  processParameter(6);\n  exitFunction = (code *)0x836fb;\n  statusMessage = exitWithStatusMessage(1);\n  if (relocationArray[48].r_offset == 0) {\n    relocationArray[48].r_offset = 0x20070184;\n  }\n  counter = *(int *)(relocationArray[48].r_offset + 4);\n  memoryPointer = (dword *)relocationArray[48].r_offset;\n  if (0x1f < counter) {\n    memoryPointer = (dword *)allocateAndLinkMemory(400);\n    if (memoryPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*exitFunction)(0xffffffff);\n      return;\n    }\n    *memoryPointer = relocationArray[48].r_offset;\n    memoryPointer[1] = 0;\n    counter = 0;\n    relocationArray[48].r_offset = (dword)memoryPointer;\n    memoryPointer[0x62] = 0;\n    memoryPointer[99] = 0;\n  }\n  memoryPointer[1] = counter + 1;\n  memoryPointer[counter + 2] = statusMessage;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*exitFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_memory_000836ec",
                "pdVar1": "memoryPointer",
                "dVar2": "statusMessage",
                "iVar3": "counter",
                "UNRECOVERED_JUMPTABLE_00": "exitFunction",
                "process_parameter_000841e4": "processParameter",
                "exit_with_status_message_00080eec": "exitWithStatusMessage",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "allocate_and_link_memory_000817f0": "allocateAndLinkMemory"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_function_00083850",
            "code": "\nundefined4 processFunction_00083850(int *inputArray,int *outputArray)\n\n{\n  int *tempPointer;\n  int tempVar1;\n  ushort tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  code *functionPointer;\n  undefined4 status;\n  int tempVar5;\n  \n  if ((inputArray != (int *)0x0) && (inputArray[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(outputArray + 3) == 0) {\n    return 0;\n  }\n  tempVar2 = *(ushort *)(outputArray + 3);\n  if ((int)((uint)tempVar2 << 0x1c) < 0) {\n    tempVar5 = outputArray[4];\n    if (tempVar5 == 0) {\n      return 0;\n    }\n    tempVar1 = *outputArray;\n    if ((tempVar2 & 3) == 0) {\n      tempVar4 = outputArray[5];\n    }\n    else {\n      tempVar4 = 0;\n    }\n    *outputArray = tempVar5;\n    tempVar1 = tempVar1 - tempVar5;\n    outputArray[2] = tempVar4;\n    do {\n      if (tempVar1 < 1) {\n        return 0;\n      }\n      tempVar4 = (*(code *)outputArray[9])(inputArray,outputArray[7],tempVar5,tempVar1,status);\n      tempVar1 = tempVar1 - tempVar4;\n      tempVar5 = tempVar5 + tempVar4;\n    } while (0 < tempVar4);\nLAB_000837c8:\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputArray + 3) = tempVar2 | 0x800;\n  if ((outputArray[1] < 1) && (outputArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPointer = (code *)outputArray[10];\n  if (functionPointer == (code *)0x0) {\n    return 0;\n  }\n  tempVar3 = (uint)(tempVar2 | 0x800);\n  tempVar5 = *inputArray;\n  *inputArray = 0;\n  if ((tempVar2 & 0x1000) == 0) {\n    tempVar1 = (*functionPointer)(inputArray,outputArray[7],tempVar3 & 0x1000,1);\n    if ((tempVar1 == -1) && (tempVar4 = *inputArray, tempVar4 != 0)) {\n      if ((tempVar4 == 0x1d) || (tempVar4 == 0x16)) {\n        *inputArray = tempVar5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempVar3 = (uint)*(ushort *)(outputArray + 3);\n    functionPointer = (code *)outputArray[10];\n  }\n  else {\n    tempVar1 = outputArray[0x14];\n  }\n  if (((int)(tempVar3 << 0x1d) < 0) && (tempVar1 = tempVar1 - outputArray[1], outputArray[0xc] != 0)) {\n    tempVar1 = tempVar1 - outputArray[0xf];\n  }\n  tempVar1 = (*functionPointer)(inputArray,outputArray[7],tempVar1,0);\n  if (tempVar1 == -1) {\n    tempVar4 = *inputArray;\n    if (tempVar4 != 0) {\n      if ((tempVar4 != 0x1d) && (tempVar4 != 0x16)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xf7ff;\n      *outputArray = outputArray[4];\n      outputArray[1] = 0;\n      goto LAB_00083774;\n    }\n    tempVar2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    outputArray[1] = 0;\n    *(ushort *)(outputArray + 3) = tempVar2;\n    *outputArray = outputArray[4];\n  }\n  else {\n    tempVar2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    *outputArray = outputArray[4];\n    *(ushort *)(outputArray + 3) = tempVar2;\n    outputArray[1] = 0;\n  }\n  if ((int)((uint)tempVar2 << 0x13) < 0) {\n    outputArray[0x14] = tempVar1;\n  }\nLAB_00083774:\n  tempPointer = (int *)outputArray[0xc];\n  *inputArray = tempVar5;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != outputArray + 0x10) {\n    relocate_and_assign_sum_00083b10(inputArray);\n  }\n  outputArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_function_00083850",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "piVar1": "tempPointer",
                "iVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "pcVar6": "functionPointer",
                "unaff_r4": "status",
                "iVar7": "tempVar5"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStruct)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStruct + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStruct + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStruct",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocationOffset;\n  uint executionResult;\n  uint byteValue;\n  byte *bytePointer;\n  uint iterationCounter;\n  byte localByte;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocationOffset = get_relocation_offset_0008400c();\n  if ((relocationOffset == 1) && (param2 - 1 < 0xff)) {\n    byteValue = param2 & 0xff;\n    localByte = (byte)byteValue;\n    executionResult = 1;\n  }\n  else {\n    executionResult = execute_relocation_0008434c(param1,&localByte,param2,param3 + 0x17);\n    if (executionResult == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (executionResult == 0) {\n      return param2;\n    }\n    byteValue = (uint)localByte;\n  }\n  iterationCounter = 0;\n  do {\n    bytePointer = param3[2] + -1;\n    param3[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)param3[6] <= (int)bytePointer) {\n        **param3 = (byte)byteValue;\n        bytePointer = *param3;\n        byteValue = (uint)*bytePointer;\n        if (byteValue != 10) goto LAB_00083a04;\n      }\n      relocationOffset = process_data_000842a4(param1,byteValue,param3);\n      if (relocationOffset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)byteValue;\n      bytePointer = *param3;\nLAB_00083a04:\n      *param3 = bytePointer + 1;\n    }\n    if (executionResult <= iterationCounter + 1) {\n      return param2;\n    }\n    byteValue = (uint)stackArray[iterationCounter];\n    iterationCounter = iterationCounter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocationOffset",
                "uVar2": "executionResult",
                "uVar3": "byteValue",
                "pbVar4": "bytePointer",
                "uVar5": "iterationCounter",
                "local_1c": "localByte",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "relocate_and_assign_sum_00083a74",
            "code": "\nundefined4 relocateAndAssignSum_00083a74(undefined4 input,int offset)\n\n{\n  int result;\n  uint rInfo;\n  int newOffset;\n  \n  FUNC_00081f94();\n  rInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((rInfo - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = calculate_and_assign_sum_0008236c(input,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + rInfo) {\n      result = calculate_and_assign_sum_0008236c(input,-newOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = rInfo - newOffset | 1;\n        FUNC_00081f98(input);\n        return 1;\n      }\n      newOffset = calculate_and_assign_sum_0008236c(input,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "relocate_and_assign_sum_00083a74",
                "param_1": "input",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "rInfo",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "relocate_and_assign_sum_00083b10",
            "code": "\nvoid relocate_and_assign_sum_00083b10(undefined4 param_1,int param_2)\n\n{\n  int prev_offset;\n  bool is_offset_2007046c;\n  uint offset;\n  dword curr_offset;\n  int next_offset;\n  uint sum_offset;\n  dword prev_offset_ptr;\n  uint next_offset_ptr;\n  dword curr_offset_ptr;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  offset = *(uint *)(param_2 + -4);\n  prev_offset_ptr = param_2 - 8;\n  sum_offset = offset & 0xfffffffe;\n  curr_offset = prev_offset_ptr + sum_offset;\n  next_offset_ptr = *(uint *)(curr_offset + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == curr_offset) {\n    next_offset_ptr = next_offset_ptr + sum_offset;\n    if (-1 < (int)(offset << 0x1f)) {\n      prev_offset_ptr = prev_offset_ptr - *(int *)(param_2 + -8);\n      next_offset = *(int *)(prev_offset_ptr + 0xc);\n      prev_offset = *(int *)(prev_offset_ptr + 8);\n      next_offset_ptr = next_offset_ptr + *(int *)(param_2 + -8);\n      *(int *)(prev_offset + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = prev_offset;\n    }\n    curr_offset = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(prev_offset_ptr + 4) = next_offset_ptr | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = prev_offset_ptr;\n    if (curr_offset <= next_offset_ptr) {\n      relocate_and_assign_sum_00083b10_00083a74(param_1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(curr_offset + 4) = next_offset_ptr;\n    if ((offset & 1) == 0) {\n      prev_offset_ptr = prev_offset_ptr - *(int *)(param_2 + -8);\n      prev_offset = *(int *)(prev_offset_ptr + 8);\n      sum_offset = sum_offset + *(int *)(param_2 + -8);\n      if (prev_offset == 0x2007046c) {\n        is_offset_2007046c = true;\n      }\n      else {\n        next_offset = *(int *)(prev_offset_ptr + 0xc);\n        *(int *)(prev_offset + 0xc) = next_offset;\n        *(int *)(next_offset + 8) = prev_offset;\n        is_offset_2007046c = false;\n      }\n    }\n    else {\n      is_offset_2007046c = false;\n    }\n    if (-1 < *(int *)(curr_offset + next_offset_ptr + 4) << 0x1f) {\n      sum_offset = sum_offset + next_offset_ptr;\n      prev_offset = *(int *)(curr_offset + 8);\n      if ((!is_offset_2007046c) && (prev_offset == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = prev_offset_ptr;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = prev_offset_ptr;\n        *(undefined4 *)(prev_offset_ptr + 0xc) = 0x2007046c;\n        *(undefined4 *)(prev_offset_ptr + 8) = 0x2007046c;\n        *(uint *)(prev_offset_ptr + 4) = sum_offset | 1;\n        *(uint *)(prev_offset_ptr + sum_offset) = sum_offset;\n        goto LAB_00083ba4;\n      }\n      next_offset = *(int *)(curr_offset + 0xc);\n      *(int *)(prev_offset + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = prev_offset;\n    }\n    *(uint *)(prev_offset_ptr + 4) = sum_offset | 1;\n    *(uint *)(prev_offset_ptr + sum_offset) = sum_offset;\n    if (!is_offset_2007046c) {\n      if (sum_offset < 0x200) {\n        offset = sum_offset & 0xfffffff8;\n        prev_offset = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + offset);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(sum_offset >> 3) >> 2 & 0xffU);\n        *(int *)(prev_offset_ptr + 8) = prev_offset;\n        *(uint *)(prev_offset_ptr + 0xc) = offset + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + offset) = prev_offset_ptr;\n        *(dword *)(prev_offset + 0xc) = prev_offset_ptr;\n        FUNC_00081f98(param_1);\n        return;\n      }\n      offset = sum_offset >> 9;\n      if (offset < 5) {\n        prev_offset = (sum_offset >> 6) + 0x38;\n        next_offset = prev_offset * 2;\n      }\n      else if (offset < 0x15) {\n        prev_offset = offset + 0x5b;\n        next_offset = prev_offset * 2;\n      }\n      else if (offset < 0x55) {\n        prev_offset = (sum_offset >> 0xc) + 0x6e;\n        next_offset = prev_offset * 2;\n      }\n      else if (offset < 0x155) {\n        prev_offset = (sum_offset >> 0xf) + 0x77;\n        next_offset = prev_offset * 2;\n      }\n      else if (offset < 0x555) {\n        prev_offset = (sum_offset >> 0x12) + 0x7c;\n        next_offset = prev_offset * 2;\n      }\n      else {\n        next_offset = 0xfc;\n        prev_offset = 0x7e;\n      }\n      curr_offset_ptr = next_offset * 4 + 0x20070464;\n      curr_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[next_offset];\n      if (curr_offset == curr_offset_ptr) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prev_offset >> 2 & 0xffU);\n        curr_offset_ptr = curr_offset;\n      }\n      else {\n        do {\n          if ((*(uint *)(curr_offset + 4) & 0xfffffffc) <= sum_offset) break;\n          curr_offset = *(dword *)(curr_offset + 8);\n        } while (curr_offset_ptr != curr_offset);\n        curr_offset_ptr = *(dword *)(curr_offset + 0xc);\n      }\n      *(dword *)(prev_offset_ptr + 0xc) = curr_offset_ptr;\n      *(dword *)(prev_offset_ptr + 8) = curr_offset;\n      *(dword *)(curr_offset_ptr + 8) = prev_offset_ptr;\n      *(dword *)(curr_offset + 0xc) = prev_offset_ptr;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "relocate_and_assign_sum_00083b10",
                "iVar1": "prev_offset",
                "bVar2": "is_offset_2007046c",
                "uVar3": "offset",
                "dVar4": "curr_offset",
                "iVar5": "next_offset",
                "uVar6": "sum_offset",
                "dVar7": "prev_offset_ptr",
                "uVar8": "next_offset_ptr",
                "dVar9": "curr_offset_ptr"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *output,uint *input,uint **memory)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag;\n  uint temp;\n  uint *ptr1;\n  uint *ptr2;\n  uint size;\n  uint size2;\n  uint count;\n  uint count2;\n  uint localVar;\n  \n  if (memory[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    temp = (uint)flag;\n    if (((int)(temp << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *memory;\n    }\n    else {\n      result = process_binary_function_0008356c(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      temp = (uint)flag;\n      ptr2 = *memory;\n    }\n    if ((flag & 2) == 0) {\n      value1 = temp & 2;\n      count = value1;\n      size = value1;\n      localVar = value1;\n      if ((temp & 1) == 0) {\n        value1 = 0;\n        count = 0;\n        while( true ) {\n          while (value1 == 0) {\n            count = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          size = input[2];\n          if ((int)(temp << 0x16) < 0) {\n            if (value1 < size) {\n              temp = *input;\n              size = value1;\n            }\n            else if ((temp & 0x480) == 0) {\n              temp = *input;\n            }\n            else {\n              result = *input - input[4];\n              size = result + 1 + value1;\n              size2 = (int)(input[5] * 3) / 2;\n              if (size <= size2) {\n                size = size2;\n              }\n              if ((int)(temp << 0x15) < 0) {\n                size2 = allocate_and_link_memory_00081810(output,size);\n                if (size2 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_00081d48(size2,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size2 = allocate_and_link_memory_00081fac(output);\n                if (size2 == 0) {\n                  relocate_and_assign_sum_00083b10(output,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp = size2 + result;\n              input[4] = size2;\n              input[5] = size;\n              *input = temp;\n              input[2] = size - result;\n              size = value1;\n            }\n            reverse_copy_00081e34(temp,count,size);\n            input[2] = input[2] - size;\n            *input = *input + size;\n            size = value1;\n          }\n          else if ((input[4] < *input) || (temp = input[5], value1 < temp)) {\n            if (value1 < size) {\n              size = value1;\n            }\n            reverse_copy_00081e34(*input,count,size);\n            temp = input[2];\n            input[2] = temp - size;\n            *input = *input + size;\n            if ((temp - size == 0) && (result = process_function_00083850(output,input), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            size = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size = value1;\n            }\n            size = (*(code *)input[9])(output,input[7],count,(size / temp) * temp);\n            if ((int)size < 1) goto LAB_00083da2;\n          }\n          ptr1 = memory[2];\n          count = count + size;\n          value1 = value1 - size;\n          memory[2] = (uint *)((int)ptr1 - size);\n          if ((uint *)((int)ptr1 - size) == (uint *)0x0) break;\n          temp = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size = *ptr2;\n            value1 = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = find_occurrence_000840f8(size,10,value1);\n            if (result == 0) {\n              count = value1 + 1;\n              localVar = 1;\n            }\n            else {\n              count = (result + 1) - size;\n              localVar = 1;\n            }\n          }\n          size2 = *input;\n          temp = count;\n          if (value1 <= count) {\n            temp = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < size2) && (count2 = input[2] + value2, (int)count2 < (int)temp)) {\n            reverse_copy_00081e34(size2,size,count2);\n            *input = *input + count2;\n            result = process_function_00083850(output,input);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp < (int)value2) {\n            reverse_copy_00081e34(size2,size,temp);\n            input[2] = input[2] - temp;\n            *input = temp + *input;\n            count2 = temp;\n          }\n          else {\n            count2 = (*(code *)input[9])(output,input[7],size,value2);\n            if ((int)count2 < 1) goto LAB_00083da2;\n          }\n          count = count - count2;\n          if (count == 0) {\n            result = process_function_00083850(output,input);\n            if (result != 0) goto LAB_00083da2;\n            localVar = 0;\n          }\n          ptr1 = memory[2];\n          size = size + count2;\n          value1 = value1 - count2;\n          memory[2] = (uint *)((int)ptr1 - count2);\n        } while ((uint *)((int)ptr1 - count2) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp = 0;\n      do {\n        while( true ) {\n          count = temp;\n          if (0x7ffffbff < temp) {\n            count = 0x7ffffc00;\n          }\n          if (temp != 0) break;\n          value1 = *ptr2;\n          temp = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,count);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(input + 3);\nLAB_00083da4:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = memory[2];\n        value1 = value1 + result;\n        temp = temp - result;\n        memory[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "output",
                "param_2": "input",
                "param_3": "memory",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag",
                "uVar5": "temp",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "size",
                "uVar9": "size2",
                "uVar10": "count",
                "uVar11": "count2",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return relocationTable[275].offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_memory_and_check_value_00084018",
            "code": "\nvoid initializeMemoryAndCheckValue_00084018(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int initializeResult;\n  int allocateResult;\n  uint uintValue;\n  bool boolValue;\n  undefined stackArray [4];\n  uint localVariable;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    initializeResult = initialize_memory_and_check_value_00084494(param1,(int)*(short *)((int)param2 + 0xe),stackArray);\n    if (-1 < initializeResult) {\n      boolValue = (localVariable & 0xf000) == 0x2000;\n      if (((localVariable & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    initializeResult = 0x400;\n  }\n  else {\n    initializeResult = 0x40;\n  }\n  boolValue = false;\nLAB_00084074:\n  allocateResult = allocate_and_link_memory_00081810(param1,initializeResult);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (allocateResult == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = allocateResult;\n    param2[4] = allocateResult;\n    param2[5] = initializeResult;\n    if ((boolValue) && (initializeResult = check_and_update_status_000844bc(param1,(int)*(short *)((int)param2 + 0xe)), initializeResult != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_memory_and_check_value_00084018",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "initializeResult",
                "iVar3": "allocateResult",
                "uVar4": "uintValue",
                "bVar5": "boolValue",
                "auStack_54": "stackArray",
                "local_50": "localVariable"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_occurrence_000840f8",
            "code": "\nuint * find_occurrence_000840f8(uint *data_ptr,char target_char,uint data_length)\n\n{\n  uint temp_result;\n  int idx;\n  uint *data_ptr_next;\n  bool is_last_char;\n  \n  if (((uint)data_ptr & 3) == 0) {\nstart_search:\n    if (3 < data_length) {\n      data_ptr_next = data_ptr;\n      do {\n        temp_result = *data_ptr_next ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        data_ptr = data_ptr_next;\n        if ((temp_result + 0xfefefeff & ~temp_result & 0x80808080) != 0) break;\n        data_length = data_length - 4;\n        data_ptr = data_ptr_next + 1;\n        data_ptr_next = data_ptr_next + 1;\n      } while (3 < data_length);\n    }\n    if (data_length == 0) {\n      data_ptr = (uint *)0x0;\n    }\n    else if (*(char *)data_ptr != target_char) {\n      idx = 0;\n      do {\n        data_ptr = (uint *)((int)data_ptr + 1);\n        is_last_char = idx == data_length - 1;\n        idx = idx + 1;\n        if (is_last_char) goto not_found;\n      } while (*(char *)data_ptr != target_char);\n    }\n  }\n  else if (data_length == 0) {\nnot_found:\n    data_ptr = (uint *)0x0;\n  }\n  else if (*(char *)data_ptr != target_char) {\n    data_ptr_next = (uint *)((int)data_ptr + 1);\n    data_length = data_length - 1;\n    do {\n      data_ptr = data_ptr_next;\n      if (((uint)data_ptr & 3) == 0) goto start_search;\n      if (data_length == 0) goto not_found;\n      data_ptr_next = (uint *)((int)data_ptr + 1);\n      data_length = data_length - 1;\n    } while (*(char *)data_ptr != target_char);\n  }\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_occurrence_000840f8",
                "param_1": "data_ptr",
                "param_2": "target_char",
                "param_3": "data_length",
                "uVar1": "temp_result",
                "iVar2": "idx",
                "puVar3": "data_ptr_next",
                "bVar4": "is_last_char",
                "LAB_00084128": "start_search",
                "LAB_00084150": "not_found"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_parameter_000841e4",
            "code": "\nint processParameter_000841e4(uint parameter)\n\n{\n  dword offset;\n  undefined4 defaultValue;\n  int value;\n  code *callbackFn;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  undefined4 address;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  address = 0x20070460;\n  if (0x1f < parameter) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  value = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((value == 0) || (callbackFn = *(code **)(value + parameter * 4), callbackFn == (code *)0x0)) {\n    defaultValue = thunk_get_default_value_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    value = FUNC_00080efc(defaultValue,parameter,parameter,0,address,register4,register5,linkRegister);\n    if ((value == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return value;\n  }\n  if (callbackFn == (code *)0x1) {\n    return 0;\n  }\n  if (callbackFn != (code *)0xffffffff) {\n    *(undefined4 *)(value + parameter * 4) = 0;\n    (*callbackFn)(parameter);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "param_1": "parameter",
                "dVar1": "offset",
                "uVar2": "defaultValue",
                "iVar3": "value",
                "pcVar4": "callbackFn",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister",
                "uVar5": "address"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_and_check_value_00084220",
            "code": "\nvoid updateAndCheckValue_00084220(undefined4 initialValue,int dataAddress)\n\n{\n  int result;\n  \n  result = initializeAndCheck(initialValue,(int)*(short *)(dataAddress + 0xe));\n  if (-1 < result) {\n    *(int *)(dataAddress + 0x50) = *(int *)(dataAddress + 0x50) + result;\n    return;\n  }\n  *(ushort *)(dataAddress + 0xc) = *(ushort *)(dataAddress + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_and_check_value_00084220",
                "param_1": "initialValue",
                "param_2": "dataAddress",
                "iVar1": "result",
                "initialize_and_check_00084508": "initializeAndCheck"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *result,int data,undefined4 paramA,undefined4 paramB)\n\n{\n  int returnValue;\n  ushort value;\n  undefined4 unaff_value4;\n  undefined4 unaff_value5;\n  undefined4 unaff_value6;\n  undefined4 in_lr_value;\n  \n  value = *(ushort *)(data + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check_result_000844e0(result,(int)*(short *)(data + 0xe),0,2);\n    value = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  returnValue = process_data_00080ec8((int)*(short *)(data + 0xe),paramA,paramB,paramB,unaff_value4,unaff_value5,\n                       unaff_value6,in_lr_value);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "result",
                "param_2": "data",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "returnValue",
                "uVar2": "value",
                "unaff_r4": "unaff_value4",
                "unaff_r5": "unaff_value5",
                "unaff_r6": "unaff_value6",
                "in_lr": "in_lr_value"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_update_flags_0008427c",
            "code": "\nvoid initializeAndUpdateFlags_0008427c(undefined4 param,int address)\n\n{\n  int result;\n  ushort flags;\n  \n  result = initialize_and_check_result_000844e0(param,(int)*(short *)(address + 0xe));\n  if (result == -1) {\n    flags = *(ushort *)(address + 0xc) & 0xefff;\n  }\n  else {\n    flags = *(ushort *)(address + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(address + 0x50) = result;\n  }\n  *(ushort *)(address + 0xc) = flags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_update_flags_0008427c",
                "param_1": "param",
                "param_2": "address",
                "iVar1": "result",
                "uVar2": "flags"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int data_ptr,uint input_value,undefined4 *data_array,undefined4 param_value)\n\n{\n  ushort temp_var1;\n  uint temp_var2;\n  undefined *pointer_var;\n  int index_var;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  temp_var1 = *(ushort *)(data_array + 3);\n  temp_var2 = (uint)temp_var1;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(temp_var2 << 0x1c)) || (index_var = data_array[4], index_var == 0)) {\n    index_var = process_binary_function_0008356c(data_ptr,data_array,temp_var1,temp_var2,param_value);\n    if (index_var != 0) {\n      return 0xffffffff;\n    }\n    temp_var1 = *(ushort *)(data_array + 3);\n    index_var = data_array[4];\n    temp_var2 = (uint)temp_var1;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(temp_var2 << 0x12) < 0) {\n    pointer_var = (undefined *)*data_array;\n    index_var = (int)pointer_var - index_var;\n    if (index_var < (int)data_array[5]) {\nLAB_000842d6:\n      index_var = index_var + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    pointer_var = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = temp_var1 | 0x2000;\n    index_var = (int)pointer_var - index_var;\n    if (index_var < (int)data_array[5]) goto LAB_000842d6;\n  }\n  index_var = process_function_00083850(data_ptr,data_array);\n  if (index_var != 0) {\n    return 0xffffffff;\n  }\n  pointer_var = (undefined *)*data_array;\n  index_var = 1;\nLAB_000842d8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = pointer_var + 1;\n  *pointer_var = (char)input_value;\n  if (((data_array[5] == index_var) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (input_value == 10)))) &&\n     (index_var = process_function_00083850(data_ptr,data_array), index_var != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data_ptr",
                "param_2": "input_value",
                "param_3": "data_array",
                "param_4": "param_value",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "puVar3": "pointer_var",
                "iVar4": "index_var"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_0008434c",
            "code": "\nvoid executeRelocation_0008434c(undefined4 *result,int size,undefined4 value,undefined4 *status)\n\n{\n  dword relocationInfo;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memoryAddress = get_memory_address_00084004();\n    returnValue = (*(code *)relocationInfo)(result,temporaryBuffer,0,memoryAddress,status);\n  }\n  else {\n    memoryAddress = get_memory_address_00084004();\n    returnValue = (*(code *)relocationInfo)(result,size,value,memoryAddress,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_0008434c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value",
                "param_4": "status",
                "dVar1": "relocationInfo",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "convert_character_to_byte_0008439c",
            "code": "\nundefined4 convertCharacterToByte_0008439c(undefined4 *output,undefined *character,uint input)\n\n{\n  if (character == (undefined *)0x0) {\n    return 0;\n  }\n  if (input < 0x100) {\n    *character = (char)input;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "convert_character_to_byte_0008439c",
                "param_1": "output",
                "param_2": "character",
                "param_3": "input"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_and_relocate_data_00084484",
            "code": "\nundefined4 processAndRelocateData_00084484(int inputVal)\n\n{\n  dword offsetVal;\n  undefined4 returnValue;\n  int result;\n  \n  offsetVal = elfRelArray[140].r_offset;\n  if (inputVal != 0) {\n    if ((elfRelArray[140].r_offset != 0) &&\n       (*(int *)(elfRelArray[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(inputVal + 0xc) != 0) {\n      returnValue = process_function_00083850(offsetVal,inputVal);\n      if ((*(code **)(inputVal + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(inputVal + 0x2c))(offsetVal,*(undefined4 *)(inputVal + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputVal + 0xc) << 0x18) < 0) {\n        relocate_and_assign_sum_00083b10(offsetVal,*(undefined4 *)(inputVal + 0x10));\n      }\n      if (*(int *)(inputVal + 0x30) != 0) {\n        if (*(int *)(inputVal + 0x30) != inputVal + 0x40) {\n          relocate_and_assign_sum_00083b10(offsetVal);\n        }\n        *(undefined4 *)(inputVal + 0x30) = 0;\n      }\n      if (*(int *)(inputVal + 0x44) != 0) {\n        relocate_and_assign_sum_00083b10(offsetVal);\n        *(undefined4 *)(inputVal + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(inputVal + 0xc) = 0;\n      FUNC_00083980();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_and_relocate_data_00084484",
                "param_1": "inputVal",
                "dVar1": "offsetVal",
                "uVar2": "returnValue",
                "iVar3": "result",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_memory_and_check_value_00084494",
            "code": "\nvoid initializeMemoryAndCheckValue_00084494(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_memory_00080eb0(inputValue1,inputValue2,inputValue2,0,inputValue3);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_memory_and_check_value_00084494",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_update_status_000844bc",
            "code": "\nvoid checkAndUpdateStatus_000844bc(int *result,undefined4 input)\n\n{\n  int statusCheckResult;\n  \n  DAT_20071244 = 0;\n  statusCheckResult = check_status_00080eba(input);\n  if ((statusCheckResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_update_status_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "statusCheckResult"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_result_000844e0",
            "code": "\nvoid initializeAndCheckResult_000844e0(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_00080ebe(arg1,arg2,arg3);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_result_000844e0",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "initialize_and_check_00084508",
            "code": "\nvoid initializeAndCheck_00084508(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_00080ec2(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "initialize_and_check_00084508",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_params_00084530",
            "code": "\nint checkParams_00084530(int value1,int value2,int value3,int value4)\n\n{\n  int result;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value1 = -1;\n    }\n    return value1;\n  }\n  result = subtract_and_adjust_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_params_00084530",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int offset,undefined4 upper_half,undefined4 lower_half,int *result_array)\n\n{\n  uint calculated_value;\n  longlong product;\n  \n  product = division_algorithm_000845c0();\n  product = product * CONCAT44(lower_half,upper_half);\n  calculated_value = (uint)product;\n  *result_array = input_value - calculated_value;\n  result_array[1] = (offset - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < calculated_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_value",
                "param_2": "offset",
                "param_3": "upper_half",
                "param_4": "lower_half",
                "param_5": "result_array",
                "uVar1": "calculated_value",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int param_2,undefined4 param_3,undefined4 param_4,int *result_array)\n\n{\n  uint converted_value;\n  longlong product;\n  \n  product = division_with_carry_00084860();\n  product = product * CONCAT44(param_4,param_3);\n  converted_value = (uint)product;\n  *result_array = input_value - converted_value;\n  result_array[1] = (param_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < converted_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value",
                "param_5": "result_array",
                "uVar1": "converted_value",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "division_algorithm_000845c0",
            "code": "\nundefined8 division_algorithm_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong quotient_remainder;\n  uint quotient_low;\n  uint quotient_high;\n  uint quotient_temp;\n  uint remainder_low;\n  int iVar6;\n  uint uVar7;\n  uint temp;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint num_leading_zeros;\n  uint temp2;\n  bool is_carry;\n  \n  if ((int)dividend_high < 0) {\n    is_carry = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)is_carry;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    is_carry = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)is_carry;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      iVar6 = LZCOUNT(divisor);\n      if (iVar6 != 0) {\n        quotient_high = dividend >> (0x20U - iVar6 & 0xff);\n        divisor = divisor << iVar6;\n        dividend = dividend << iVar6;\n        dividend_high = dividend_high << iVar6 | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      quotient_temp = dividend_high / quotient_low;\n      uVar7 = (divisor & 0xffff) * quotient_temp;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient_low * quotient_temp) * 0x10000;\n      quotient_high = quotient_temp;\n      if (is_divisor_negative <= uVar7 && uVar7 - is_divisor_negative != 0) {\n        is_carry = CARRY4(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = quotient_temp - 1;\n        if ((is_carry == false) && (is_divisor_negative <= uVar7 && uVar7 - is_divisor_negative != 0)) {\n          quotient_high = quotient_temp - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp = (is_divisor_negative - uVar7) / quotient_low;\n      quotient_temp = (divisor & 0xffff) * temp;\n      uVar7 = dividend & 0xffff | ((is_divisor_negative - uVar7) - quotient_low * temp) * 0x10000;\n      quotient_low = temp;\n      if (uVar7 <= quotient_temp && quotient_temp - uVar7 != 0) {\n        quotient_low = temp - 1;\n        if ((CARRY4(uVar7,divisor) == false) &&\n           (uVar7 + divisor <= quotient_temp && quotient_temp - (uVar7 + divisor) != 0)) {\n          quotient_low = temp - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      iVar6 = LZCOUNT(divisor);\n      if (iVar6 == 0) {\n        dividend_high = dividend_high - divisor;\n        quotient_temp = divisor >> 0x10;\n        temp2 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << iVar6;\n        quotient_high = dividend_high >> (0x20U - iVar6 & 0xff);\n        quotient_temp = divisor >> 0x10;\n        is_divisor_negative = quotient_high / quotient_temp;\n        temp2 = divisor & 0xffff;\n        uVar7 = temp2 * is_divisor_negative;\n        temp = dividend >> (0x20U - iVar6 & 0xff) | dividend_high << iVar6;\n        quotient_high = temp >> 0x10 | (quotient_high - quotient_temp * is_divisor_negative) * 0x10000;\n        dividend = dividend << iVar6;\n        quotient_low = is_divisor_negative;\n        if (quotient_high <= uVar7 && uVar7 - quotient_high != 0) {\n          is_carry = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = is_divisor_negative - 1;\n          if ((is_carry == false) && (quotient_high <= uVar7 && uVar7 - quotient_high != 0)) {\n            quotient_low = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        remainder_low = (quotient_high - uVar7) / quotient_temp;\n        is_divisor_negative = temp2 * remainder_low;\n        dividend_high = temp & 0xffff | ((quotient_high - uVar7) - quotient_temp * remainder_low) * 0x10000;\n        quotient_high = remainder_low;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          is_carry = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = remainder_low - 1;\n          if ((is_carry == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = remainder_low - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / quotient_temp;\n      is_divisor_negative = temp2 * quotient_low;\n      temp = dividend >> 0x10 | (dividend_high - quotient_temp * quotient_low) * 0x10000;\n      uVar7 = quotient_low;\n      if (temp <= is_divisor_negative && is_divisor_negative - temp != 0) {\n        is_carry = CARRY4(temp,divisor);\n        temp = temp + divisor;\n        uVar7 = quotient_low - 1;\n        if ((is_carry == false) && (temp <= is_divisor_negative && is_divisor_negative - temp != 0)) {\n          uVar7 = quotient_low - 2;\n          temp = temp + divisor;\n        }\n      }\n      remainder_low = (temp - is_divisor_negative) / quotient_temp;\n      temp2 = temp2 * remainder_low;\n      quotient_temp = dividend & 0xffff | ((temp - is_divisor_negative) - quotient_temp * remainder_low) * 0x10000;\n      quotient_low = remainder_low;\n      if (quotient_temp <= temp2 && temp2 - quotient_temp != 0) {\n        quotient_low = remainder_low - 1;\n        if ((CARRY4(quotient_temp,divisor) == false) &&\n           (quotient_temp + divisor <= temp2 && temp2 - (quotient_temp + divisor) != 0)) {\n          quotient_low = remainder_low - 2;\n        }\n      }\n      quotient_low = quotient_low | uVar7 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    iVar6 = LZCOUNT(divisor_high);\n    if (iVar6 == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - iVar6;\n      quotient_temp = dividend_high >> (quotient_high & 0xff);\n      temp2 = divisor >> (quotient_high & 0xff) | divisor_high << iVar6;\n      is_divisor_negative = temp2 >> 0x10;\n      quotient_low = quotient_temp / is_divisor_negative;\n      temp = (temp2 & 0xffff) * quotient_low;\n      uVar7 = dividend_high << iVar6 | dividend >> (quotient_high & 0xff);\n      quotient_temp = uVar7 >> 0x10 | (quotient_temp - is_divisor_negative * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (quotient_temp <= temp && temp - quotient_temp != 0) {\n        is_carry = CARRY4(quotient_temp,temp2);\n        quotient_temp = quotient_temp + temp2;\n        quotient_high = quotient_low - 1;\n        if ((is_carry == false) && (quotient_temp <= temp && temp - quotient_temp != 0)) {\n          quotient_high = quotient_low - 2;\n          quotient_temp = quotient_temp + temp2;\n        }\n      }\n      remainder_low = (quotient_temp - temp) / is_divisor_negative;\n      num_leading_zeros = (temp2 & 0xffff) * remainder_low;\n      quotient_temp = uVar7 & 0xffff | ((quotient_temp - temp) - is_divisor_negative * remainder_low) * 0x10000;\n      quotient_low = remainder_low;\n      if (quotient_temp <= num_leading_zeros && num_leading_zeros - quotient_temp != 0) {\n        is_carry = CARRY4(quotient_temp,temp2);\n        quotient_temp = quotient_temp + temp2;\n        quotient_low = remainder_low - 1;\n        if ((is_carry == false) && (quotient_temp <= num_leading_zeros && num_leading_zeros - quotient_temp != 0)) {\n          quotient_low = remainder_low - 2;\n          quotient_temp = quotient_temp + temp2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_remainder = (ulonglong)quotient_low * (ulonglong)(divisor << iVar6);\n      uVar7 = (uint)((ulonglong)quotient_remainder >> 0x20);\n      quotient_high = 0;\n      if ((quotient_temp - num_leading_zeros < uVar7) ||\n         ((quotient_temp - num_leading_zeros == uVar7 && (dividend << iVar6 < (uint)quotient_remainder)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    is_carry = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)is_carry;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "division_algorithm_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "quotient_remainder",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "quotient_temp",
                "uVar5": "remainder_low",
                "uVar8": "temp",
                "uVar9": "is_dividend_negative",
                "uVar10": "is_divisor_negative",
                "uVar11": "num_leading_zeros",
                "uVar12": "temp2",
                "bVar13": "is_carry"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "division_with_carry_00084860",
            "code": "\nulonglong divisionWithCarry_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp1;\n  uint carry;\n  uint dividendHigh;\n  uint dividendLow;\n  uint quotientHigh;\n  uint quotientLow;\n  uint temp2;\n  uint currentDiv;\n  uint temp3;\n  int count;\n  bool isCarry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      count = LZCOUNT(quotient);\n      if (count == 0) {\n        divisor = divisor - quotient;\n        dividendHigh = quotient >> 0x10;\n        quotientHigh = quotient & 0xffff;\n        carry = 1;\n      }\n      else {\n        quotient = quotient << count;\n        currentDiv = divisor >> (0x20U - count & 0xff);\n        dividendHigh = quotient >> 0x10;\n        temp3 = currentDiv / dividendHigh;\n        quotientHigh = quotient & 0xffff;\n        carry = quotientHigh * temp3;\n        quotientLow = dividend >> (0x20U - count & 0xff) | divisor << count;\n        dividendLow = quotientLow >> 0x10 | (currentDiv - dividendHigh * temp3) * 0x10000;\n        dividend = dividend << count;\n        currentDiv = temp3;\n        if (dividendLow <= carry && carry - dividendLow != 0) {\n          isCarry = CARRY4(dividendLow,quotient);\n          dividendLow = dividendLow + quotient;\n          currentDiv = temp3 - 1;\n          if ((isCarry == false) && (dividendLow <= carry && carry - dividendLow != 0)) {\n            currentDiv = temp3 - 2;\n            dividendLow = dividendLow + quotient;\n          }\n        }\n        temp2 = (dividendLow - carry) / dividendHigh;\n        temp3 = quotientHigh * temp2;\n        divisor = quotientLow & 0xffff | ((dividendLow - carry) - dividendHigh * temp2) * 0x10000;\n        carry = temp2;\n        if (divisor <= temp3 && temp3 - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          carry = temp2 - 1;\n          if ((isCarry == false) && (divisor <= temp3 && temp3 - divisor != 0)) {\n            carry = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp3;\n        carry = carry | currentDiv << 0x10;\n      }\n      temp3 = divisor / dividendHigh;\n      dividendLow = quotientHigh * temp3;\n      quotientLow = dividend >> 0x10 | (divisor - dividendHigh * temp3) * 0x10000;\n      currentDiv = temp3;\n      if (quotientLow <= dividendLow && dividendLow - quotientLow != 0) {\n        isCarry = CARRY4(quotientLow,quotient);\n        quotientLow = quotientLow + quotient;\n        currentDiv = temp3 - 1;\n        if ((isCarry == false) && (quotientLow <= dividendLow && dividendLow - quotientLow != 0)) {\n          currentDiv = temp3 - 2;\n          quotientLow = quotientLow + quotient;\n        }\n      }\n      temp3 = (quotientLow - dividendLow) / dividendHigh;\n      quotientHigh = quotientHigh * temp3;\n      quotientLow = dividend & 0xffff | ((quotientLow - dividendLow) - dividendHigh * temp3) * 0x10000;\n      dividendHigh = temp3;\n      if (quotientLow <= quotientHigh && quotientHigh - quotientLow != 0) {\n        dividendHigh = temp3 - 1;\n        if ((CARRY4(quotientLow,quotient) == false) &&\n           (quotientLow + quotient <= quotientHigh && quotientHigh - (quotientLow + quotient) != 0)) {\n          dividendHigh = temp3 - 2;\n        }\n      }\n      return CONCAT44(carry,dividendHigh | currentDiv << 0x10);\n    }\n    count = LZCOUNT(quotient);\n    if (count != 0) {\n      currentDiv = dividend >> (0x20U - count & 0xff);\n      quotient = quotient << count;\n      dividend = dividend << count;\n      divisor = currentDiv | divisor << count;\n    }\n    carry = quotient >> 0x10;\n    dividendHigh = divisor / carry;\n    quotientHigh = (quotient & 0xffff) * dividendHigh;\n    temp3 = dividend >> 0x10 | (divisor - carry * dividendHigh) * 0x10000;\n    currentDiv = dividendHigh;\n    if (temp3 <= quotientHigh && quotientHigh - temp3 != 0) {\n      isCarry = CARRY4(temp3,quotient);\n      temp3 = temp3 + quotient;\n      currentDiv = dividendHigh - 1;\n      if ((isCarry == false) && (temp3 <= quotientHigh && quotientHigh - temp3 != 0)) {\n        currentDiv = dividendHigh - 2;\n        temp3 = temp3 + quotient;\n      }\n    }\n    quotientLow = (temp3 - quotientHigh) / carry;\n    dividendHigh = (quotient & 0xffff) * quotientLow;\n    quotientHigh = dividend & 0xffff | ((temp3 - quotientHigh) - carry * quotientLow) * 0x10000;\n    carry = quotientLow;\n    if (quotientHigh <= dividendHigh && dividendHigh - quotientHigh != 0) {\n      carry = quotientLow - 1;\n      if ((CARRY4(quotientHigh,quotient) == false) &&\n         (quotientHigh + quotient <= dividendHigh && dividendHigh - (quotientHigh + quotient) != 0)) {\n        carry = quotientLow - 2;\n      }\n    }\n    carry = carry | currentDiv << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    count = LZCOUNT(remainder);\n    if (count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      carry = 0;\n    }\n    else {\n      carry = 0x20 - count;\n      currentDiv = divisor >> (carry & 0xff);\n      dividendHigh = remainder << count | quotient >> (carry & 0xff);\n      quotientHigh = dividendHigh >> 0x10;\n      dividendLow = currentDiv / quotientHigh;\n      temp3 = (dividendHigh & 0xffff) * dividendLow;\n      quotientLow = dividend >> (carry & 0xff) | divisor << count;\n      carry = quotientLow >> 0x10 | (currentDiv - quotientHigh * dividendLow) * 0x10000;\n      currentDiv = dividendLow;\n      if (carry <= temp3 && temp3 - carry != 0) {\n        isCarry = CARRY4(carry,dividendHigh);\n        carry = carry + dividendHigh;\n        currentDiv = dividendLow - 1;\n        if ((isCarry == false) && (carry <= temp3 && temp3 - carry != 0)) {\n          currentDiv = dividendLow - 2;\n          carry = carry + dividendHigh;\n        }\n      }\n      dividendLow = (carry - temp3) / quotientHigh;\n      temp2 = (dividendHigh & 0xffff) * dividendLow;\n      quotientHigh = quotientLow & 0xffff | ((carry - temp3) - quotientHigh * dividendLow) * 0x10000;\n      carry = dividendLow;\n      if (quotientHigh <= temp2 && temp2 - quotientHigh != 0) {\n        isCarry = CARRY4(quotientHigh,dividendHigh);\n        quotientHigh = quotientHigh + dividendHigh;\n        carry = dividendLow - 1;\n        if ((isCarry == false) && (quotientHigh <= temp2 && temp2 - quotientHigh != 0)) {\n          carry = dividendLow - 2;\n          quotientHigh = quotientHigh + dividendHigh;\n        }\n      }\n      carry = carry | currentDiv << 0x10;\n      temp1 = (ulonglong)carry * (ulonglong)(quotient << count);\n      currentDiv = (uint)((ulonglong)temp1 >> 0x20);\n      if ((quotientHigh - temp2 < currentDiv) || ((quotientHigh - temp2 == currentDiv && (dividend << count < (uint)temp1)))\n         ) {\n        carry = carry - 1;\n      }\n    }\n  }\n  return (ulonglong)carry;\n}\n\n",
            "renaming": {
                "FUN_00084860": "division_with_carry_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp1",
                "uVar2": "carry",
                "uVar3": "dividendHigh",
                "uVar4": "dividendLow",
                "uVar5": "quotientHigh",
                "uVar6": "quotientLow",
                "uVar7": "temp2",
                "uVar8": "currentDiv",
                "uVar9": "temp3",
                "iVar10": "count",
                "bVar11": "isCarry"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 106803,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}