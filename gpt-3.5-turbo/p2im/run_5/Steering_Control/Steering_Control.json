{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_and_call_function_000817c8",
                "uStack_8": "value2",
                "param_1": "data",
                "uStack_4": "value3",
                "uStack_c": "value1",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3"
            },
            "code": "void process_data_and_call_function_000817c8(undefined4 data, undefined4* ptr1, undefined4* ptr2, undefined4* ptr3)\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  value1 = *ptr1;\n  value2 = *ptr2;\n  value3 = *ptr3;\n  call_function(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &value1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": true,
            "current_name": "process_data_and_call_function_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_and_copy_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "copy_data_0008151c": "copy_data"
            },
            "code": "int compare_and_copy_00081560(int value1, int value2)\n{\n  if (value1 != value2) {\n    copy_data();\n  }\n  return value1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "compare_and_copy_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": true,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "iVar1": "matched_count",
                "FUN_00081684": "check_bits_set_in_array_00081684",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "array_length"
            },
            "code": "int check_bits_set_in_array_00081684(uint *array, uint mask, uint expected_value, int array_length) {\n  int matched_count = 0;\n  for(int i = 0; i < array_length; i++) {\n    if((array[i] & mask) != expected_value) {\n      return matched_count;\n    }\n    matched_count++;\n    if(matched_count == array_length) {\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": true,
            "current_name": "check_bits_set_in_array_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "puVar3": "src_ptr",
                "FUN_000825cc": "copy_string_000825cc",
                "puVar4": "dest_ptr",
                "param_1": "dest",
                "puVar7": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "bVar8": "is_null"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src)\n{\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_uint;\n  uint next_uint;\n  bool is_null;\n  \n  if ((((uint)src ^ (uint)dest) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr;\n    if (((uint)src_ptr & 2) != 0) {\n      src = (uint *)((int)src_ptr + 2);\n      current_short = *(ushort *)src_ptr;\n      is_null = (current_short & 0xff) == 0;\n      if (is_null) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_null = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_null) {\n        return;\n      }\n    }\n  }\n  current_uint = *src;\n  src_ptr = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_00082630;\n    dest_ptr = dest + 1;\n    *dest = current_uint;\n    src_ptr = src + 2;\n    current_uint = src[1];\n  }\n  while( true ) {\n    next_uint = *src_ptr;\n    dest = dest_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    src_ptr = src_ptr + 2;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_uint;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (next_uint != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0",
                "FUN_0008151c"
            ],
            "imported": true,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "DAT_00080134": "is_data_pointer_available",
                "DAT_00080144": "function_to_execute",
                "PTR_DAT_0008013c": "data_pointer",
                "param_1": "is_data_available",
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "function_param",
                "DAT_00080140": "function_pointer"
            },
            "code": "void execute_function_if_available_00080118(bool is_data_available, void* data, int data_size, void* DAT_00080140, int function_param) {\n  if (is_data_available) {\n    data = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != NULL) && (DAT_00080144 != (code*)0x0)) {\n    (*DAT_00080144)(DAT_00080140, data, data_size, DAT_00080144, function_param);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "uVar1": "bit_position",
                "param_1": "character",
                "FUN_00080aa8": "check_char_00080aa8"
            },
            "code": "int check_char_00080aa8(uint character) {\n  uint bit_position;\n  if (character < 45) {\n    if (character < 32) {\n      bit_position = 1 << (character & 0xff);\n      if ((bit_position & *(uint *)(DAT_00080ae8 + 0x18)) != bit_position) {\n        *(uint *)(DAT_00080ae8 + 0x10) = bit_position;\n      }\n    }\n    else {\n      bit_position = 1 << (character - 32 & 0xff);\n      if ((bit_position & *(uint *)(DAT_00080ae8 + 0x108)) != bit_position) {\n        *(uint *)(DAT_00080ae8 + 0x100) = bit_position;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000803fc",
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "check_char_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "iVar3": "result",
                "puVar2": "status_array",
                "param_1": "index",
                "iVar9": "data_index",
                "iVar10": "data_value",
                "FUN_00080f0c": "update_data_00080f0c",
                "param_2": "size",
                "puVar1": "data_array",
                "uVar5": "size",
                "uVar4": "data_length",
                "uVar6": "status_value",
                "bVar8": "status",
                "bVar7": "status"
            },
            "code": "int update_data_00080f0c(int index, int size, int value1, int value2) {\\n  undefined *data_array = PTR_DAT_00081008;\\n  undefined *status_array = PTR_DAT_0008100c;\\n  int result = index;\\n  if (data_array[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((status_array[index] & 0xf) == 4) {\\n      result = set_bit_at_position(DAT_00081010, data_array[index * 0x1c + 0x19]);\\n    }\\n    byte status = status_array[index] & 0xf;\\n    if ((status < 3) && (status_array[index] != 0)) {\\n      if (status == 2) {\\n        if (value2 == 0) {\\n          return result;\\n        }\\n      }\\n      else if (status == 1) {\\n        if (value2 == 2) {\\n          return result;\\n        }\\n      }\\n      else if (status == 3) {\\n        if (value2 == 1) {\\n          return result;\\n        }\\n        goto LAB_00080f68;\\n      }\\n    }\\n    if (value2 != 1) {\\nLAB_00080f68:\\n      if (value2 == 0) {\\n        int data_index = index * 0x1c;\\n        check_char(*(undefined4 *)(data_array + data_index + 8));\\n        result = update_data_00080f0c_00080a30(*(undefined4 *)(data_array + data_index), 3, *(undefined4 *)(data_array + data_index + 4), 0);\\n        status = status_array[index] & 0xf0 | 2;\\n      }\\n      else {\\n        if (value2 != 2) {\\n          return result;\\n        }\\n        int data_index = index * 0x1c;\\n        check_char(*(undefined4 *)(data_array + data_index + 8));\\n        result = update_data_00080f0c_00080a30(*(undefined4 *)(data_array + data_index), 3, *(undefined4 *)(data_array + data_index + 4), 1);\\n        status = status_array[index] & 0xf0 | 1;\\n      }\\n      status_array[index] = status;\\n      return result;\\n    }\\n    int data_index = index * 0x1c;\\n    int data_value = *(int *)(data_array + data_index);\\n    if (status_array[index] >> 4 == 0) {\\n      size = 4;\\n    }\\n    else {\\n      size = 5;\\n    }\\n    result = update_data_00080f0c_00080a30(data_value, size, *(undefined4 *)(data_array + data_index + 4), *(undefined4 *)(data_array + data_index + 0x10));\\n    status_array[index] = status_array[index] & 0xf0 | 3;\\n    if (*(int *)(data_value + 0x18) == -1) {\\n      uint data_length = *(uint *)(data_array + data_index + 8);\\n      if (0x2c < data_length) {\\n        return 1;\\n      }\\n      if (data_length < 0x20) {\\n        uint bit_mask = 1 << (data_length & 0xff);\\n        uint status_value = *(uint *)(DAT_00080b28 + 0x18) & bit_mask;\\n        if (status_value == bit_mask) {\\n          *(uint *)(DAT_00080b28 + 0x14) = status_value;\\n        }\\n      }\\n      else {\\n        uint bit_mask = 1 << (data_length - 0x20 & 0xff);\\n        uint status_value = *(uint *)(DAT_00080b28 + 0x108) & bit_mask;\\n        if (status_value == bit_mask) {\\n          *(uint *)(DAT_00080b28 + 0x104) = status_value;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_00081014",
                "FUN_000801e0",
                "FUN_000806a0"
            ],
            "imported": true,
            "current_name": "update_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "iVar1": "base_address",
                "iVar3": "result",
                "iVar5": "new_address",
                "puVar2": "new_variable_address",
                "param_1": "initial_value",
                "FUN_00083a74": "calculate_new_value_of_variable_00083a74",
                "param_2": "size_of_variable",
                "uVar4": "alignment_mask"
            },
            "code": "int calculate_new_value_of_variable_00083a74(int initial_value, int size_of_variable)\n{\n  int base_address = DAT_00083b04;\n  do_nothing_00081f94();\n  uint32_t alignment_mask = *(uint *)(*(int *)(base_address + 8) + 4) & 0xfffffffc;\n  int new_address = ((alignment_mask - size_of_variable) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_address) {\n    int result = calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(initial_value,0);\n    if (result == *(int *)(base_address + 8) + alignment_mask) {\n      result = calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(initial_value,-new_address);\n      undefined *new_variable_address = PTR_DAT_00083b08;\n      if (result != -1) {\n        int base_variable_address = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(base_address + 8) + 4) = alignment_mask - new_address | 1;\n        *(int *)new_variable_address = base_variable_address - new_address;\n        do_nothing_00081f98(initial_value);\n        return 1;\n      }\n      new_address = calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(initial_value,0);\n      new_variable_address = PTR_DAT_00083b08;\n      alignment_mask = new_address - *(int *)(base_address + 8);\n      if (0xf < (int)alignment_mask) {\n        int base_variable_address = *DAT_00083b0c;\n        *(uint *)(*(int *)(base_address + 8) + 4) = alignment_mask | 1;\n        *(int *)new_variable_address = new_address - base_variable_address;\n      }\n    }\n  }\n  do_nothing_00081f98(initial_value);\n  return 0;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_0008236c",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": true,
            "current_name": "calculate_new_value_of_variable_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "iVar2": "errorCode",
                "param_1": "output",
                "FUN_000844e0": "returnIfError_000844e0",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "dataPointer"
            },
            "code": "void returnIfError_000844e0(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *dataPointer;\n  int errorCode;\n\n  dataPointer = PTR_DAT_00084504;\n  *(undefined4 *)dataPointer = 0;\n  errorCode = checkForError(input1, input2, input3);\n  if ((errorCode == -1) && (*(int *)dataPointer != 0)) {\n    *output = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": true,
            "current_name": "returnIfError_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "iVar1": "temp1",
                "iVar3": "temp3",
                "iVar5": "temp5",
                "iVar6": "temp6",
                "iVar8": "temp8",
                "param_1": "param_1",
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_2": "size",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar7": "temp7"
            },
            "code": "void allocate_memory_block_00083b10(uint32_t param_1,int32_t size){\n  int32_t temp1;\n  uint32_t temp2;\n  int32_t temp3;\n  uint32_t temp4;\n  int32_t temp5;\n  int32_t temp6;\n  uint32_t temp7;\n  int32_t temp8;\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  temp8 = DAT_00083c98;\n  temp2 = *(uint32_t *)(size + -4);\n  temp5 = size + -8;\n  temp4 = temp2 & 0xfffffffe;\n  temp3 = temp5 + temp4;\n  temp7 = *(uint32_t *)(temp3 + 4) & 0xfffffffc;\n  if (*(int32_t *)(DAT_00083c98 + 8) == temp3) {\n    temp7 = temp7 + temp4;\n    if (-1 < (int32_t)(temp2 << 0x1f)) {\n      temp5 = temp5 - *(int32_t *)(size + -8);\n      temp1 = *(int32_t *)(temp5 + 0xc);\n      temp3 = *(int32_t *)(temp5 + 8);\n      temp7 = temp7 + *(int32_t *)(size + -8);\n      *(int32_t *)(temp3 + 0xc) = temp1;\n      *(int32_t *)(temp1 + 8) = temp3;\n    }\n    temp2 = *DAT_00083ca0;\n    *(uint32_t *)(temp5 + 4) = temp7 | 1;\n    *(int32_t *)(temp8 + 8) = temp5;\n    if (temp2 <= temp7) {\n      calculate_new_value_of_variable(param_1,*(undefined4 *)PTR_DAT_00083ca4);\n    }\n  }\n  else {\n    temp2 = temp2 & 1;\n    *(uint32_t *)(temp3 + 4) = temp7;\n    if (temp2 == 0) {\n      temp5 = temp5 - *(int32_t *)(size + -8);\n      temp1 = *(int32_t *)(temp5 + 8);\n      temp4 = temp4 + *(int32_t *)(size + -8);\n      if (temp1 == temp8 + 8) {\n        temp2 = 1;\n      }\n      else {\n        temp6 = *(int32_t *)(temp5 + 0xc);\n        *(int32_t *)(temp1 + 0xc) = temp6;\n        *(int32_t *)(temp6 + 8) = temp1;\n      }\n    }\n    else {\n      temp2 = 0;\n    }\n    if (-1 < *(int32_t *)(temp3 + temp7 + 4) << 0x1f) {\n      temp4 = temp4 + temp7;\n      temp1 = *(int32_t *)(temp3 + 8);\n      if ((temp2 == 0) && (temp1 == DAT_00083c9c)) {\n        *(int32_t *)(temp8 + 0x14) = temp5;\n        *(int32_t *)(temp8 + 0x10) = temp5;\n        *(int32_t *)(temp5 + 0xc) = temp1;\n        *(int32_t *)(temp5 + 8) = temp1;\n        *(uint32_t *)(temp5 + 4) = temp4 | 1;\n        *(uint32_t *)(temp5 + temp4) = temp4;\n        goto LAB_00083ba4;\n      }\n      temp3 = *(int32_t *)(temp3 + 0xc);\n      *(int32_t *)(temp1 + 0xc) = temp3;\n      *(int32_t *)(temp3 + 8) = temp1;\n    }\n    *(uint32_t *)(temp5 + 4) = temp4 | 1;\n    *(uint32_t *)(temp5 + temp4) = temp4;\n    if (temp2 == 0) {\n      if (temp4 < 0x200) {\n        temp2 = *(uint32_t *)(temp8 + 4);\n        temp1 = temp8 + (temp4 & 0xfffffff8);\n        temp3 = *(int32_t *)(temp1 + 8);\n        *(int32_t *)(temp5 + 8) = temp3;\n        *(int32_t *)(temp5 + 0xc) = temp1;\n        *(uint32_t *)(temp8 + 4) = temp2 | 1 << ((int32_t)(temp4 >> 3) >> 2 & 0xffU);\n        *(int32_t *)(temp1 + 8) = temp5;\n        *(int32_t *)(temp3 + 0xc) = temp5;\n        do_nothing(param_1);\n        return;\n      }\n      temp2 = temp4 >> 9;\n      if (temp2 < 5) {\n        temp3 = (temp4 >> 6) + 0x38;\n        temp1 = temp3 * 2;\n      }\n      else if (temp2 < 0x15) {\n        temp3 = temp2 + 0x5b;\n        temp1 = temp3 * 2;\n      }\n      else if (temp2 < 0x55) {\n        temp3 = (temp4 >> 0xc) + 0x6e;\n        temp1 = temp3 * 2;\n      }\n      else if (temp2 < 0x155) {\n        temp3 = (temp4 >> 0xf) + 0x77;\n        temp1 = temp3 * 2;\n      }\n      else if (temp2 < 0x555) {\n        temp3 = (temp4 >> 0x12) + 0x7c;\n        temp1 = temp3 * 2;\n      }\n      else {\n        temp1 = 0xfc;\n        temp3 = 0x7e;\n      }\n      temp8 = temp8 + temp1 * 4;\n      temp1 = *(int32_t *)(temp8 + 8);\n      if (temp1 == temp8) {\n        *(uint32_t *)(DAT_00083c98 + 4) = *(uint32_t *)(DAT_00083c98 + 4) | 1 << (temp3 >> 2 & 0xffU);\n        temp8 = temp1;\n      }\n      else {\n        do {\n          if ((*(uint32_t *)(temp1 + 4) & 0xfffffffc) <= temp4) break;\n          temp1 = *(int32_t *)(temp1 + 8);\n        } while (temp8 != temp1);\n        temp8 = *(int32_t *)(temp1 + 0xc);\n      }\n      *(int32_t *)(temp5 + 0xc) = temp8;\n      *(int32_t *)(temp5 + 8) = temp1;\n      *(int32_t *)(temp8 + 8) = temp5;\n      *(int32_t *)(temp1 + 0xc) = temp5;\n    }\n  }\nLAB_00083ba4:\n  do_nothing(param_1);\n  return;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00083a74",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00081800",
                "FUN_0008356c",
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_00083850"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "returnZero_00080e80"
            },
            "code": "int32_t returnZero_00080e80() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": true,
            "current_name": "returnZero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative_data_result",
                "negative_sign": "negative_sign",
                "param_1": "function_pointer",
                "param_2": "data",
                "param_3": "base",
                "thunk_FUN_0008113a": "convert_data_base_thunk_0008113a",
                "param_4": "param_4",
                "convert_base_and_process_data_000810fc": "convert_base_and_process_data",
                "execute_function_pointer_000810cc": "execute_function_pointer"
            },
            "code": "int convert_data_base_thunk_0008113a(undefined4 *function_pointer,uint data, uint base, undefined4 param_4) {\n  int result;\n  int negative_sign = 0x2d;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,data & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)data < 0) {\n      int negative_data = -data;\n      int negative_sign_result = execute_function_pointer_000810cc(function_pointer,negative_sign);\n      int converted_data_result = convert_base_and_process_data_000810fc(function_pointer,negative_data,10);\n      return converted_data_result + negative_sign_result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_base_and_process_data_000810fc(function_pointer,data,base,param_4);\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "convert_data_base_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "iVar2": "sum",
                "param_1": "result",
                "param_2": "input",
                "FUN_0008236c": "calculate_sum_and_set_to_param_if_previous_result_exists_0008236c",
                "puVar1": "previous_result_ptr"
            },
            "code": "void calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(int *result, undefined4 input)\n{\n  undefined *previous_result_ptr;\n  int sum;\n  previous_result_ptr = PTR_DAT_0008238c;\n  *(undefined4 *)PTR_DAT_0008238c = 0;\n  sum = calculate_sum(input);\n  if ((sum == -1) && (*(int *)previous_result_ptr != 0)) {\n    *result = *(int *)previous_result_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "imported": true,
            "current_name": "calculate_sum_and_set_to_param_if_previous_result_exists_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "decode_data_00083850": "decode_data",
                "handle_data_0008356c": "handle_data",
                "uVar1": "data_size",
                "iVar4": "data_offset",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "puVar3": "data_start",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_info_ptr",
                "param_4": "data_info_size",
                "FUN_000842a4": "decode_and_process_data_000842a4",
                "uVar2": "data_length_uint"
            },
            "code": "uint decode_and_process_data_000842a4(int data_ptr, uint data_length, undefined4 *data_info_ptr, undefined4 data_info_size)\n{\n  ushort data_size = *(ushort *)(data_info_ptr + 3);\n  uint uVar2 = (uint)data_size;\n  data_info_ptr[2] = data_info_ptr[6];\n  if ((-1 < (int)(uVar2 << 0x1c)) || (int)data_info_ptr[4] == 0)\n  {\n    int handle_result = handle_data(data_ptr, data_info_ptr, data_size, uVar2, data_info_size);\n    if (handle_result != 0)\n    {\n      return 0xffffffff;\n    }\n    data_size = *(ushort *)(data_info_ptr + 3);\n    uVar2 = (uint)data_size;\n  }\n  data_length = data_length & 0xff;\n  if ((int)(uVar2 << 0x12) < 0)\n  {\n    undefined *data_start = (undefined *)*data_info_ptr;\n    int data_offset = (int)data_start - (int)data_info_ptr[4];\n    if (data_offset < (int)data_info_ptr[5])\n    {\n      data_offset++;\n      goto LAB_000842d8;\n    }\n  }\n  else\n  {\n    data_info_ptr[0x19] = data_info_ptr[0x19] & 0xffffdfff;\n    undefined *data_start = (undefined *)*data_info_ptr;\n    *(ushort *)(data_info_ptr + 3) = data_size | 0x2000;\n    int data_offset = (int)data_start - (int)data_info_ptr[4];\n    if (data_offset < (int)data_info_ptr[5])\n    {\n      data_offset++;\n      goto LAB_000842d8;\n    }\n  }\n  int decode_result = decode_data(data_ptr, data_info_ptr);\n  if (decode_result != 0)\n  {\n    return 0xffffffff;\n  }\n  undefined *data_start = (undefined *)*data_info_ptr;\n  int data_offset = 1;\nLAB_000842d8:\n  data_info_ptr[2] = data_info_ptr[2] + -1;\n  *data_info_ptr = data_start + data_offset;\n  *data_start = (char)data_length;\n  if (((int)data_info_ptr[5] == data_offset) || (((int)((uint)*(ushort *)(data_info_ptr + 3) << 0x1f) < 0) && (data_length == 10)))\n  {\n    int decode_result = decode_data(data_ptr, data_info_ptr);\n    if (decode_result != 0)\n    {\n      return 0xffffffff;\n    }\n  }\n  return data_length;\n}",
            "called": [
                "FUN_00083888",
                "FUN_0008356c",
                "FUN_00083850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "decode_and_process_data_000842a4"
        },
        "FUN_00080d62": {
            "renaming": {
                "param_1": "parameter_1",
                "FUN_00080d62": "set_param_1_value_to_max_00080d62"
            },
            "code": "void set_param_1_value_to_max_00080d62(int parameter_1)\n{\n  *(undefined4 *)(parameter_1 + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "set_param_1_value_to_max_00080d62"
        },
        "FUN_000814f6": {
            "renaming": {
                "uVar1": "bytesUntilNull",
                "checkAndUpdateMemoryIfZero_000814d0": "updateMemoryIfZero",
                "param_1": "memoryBlock",
                "param_2": "blockSize",
                "FUN_000814f6": "initializeMemoryWithZeros_000814f6",
                "count_bytes_until_null_00082688": "countBytesUntilNull"
            },
            "code": "undefined4 * initializeMemoryWithZeros_000814f6(undefined4 *memoryBlock, int blockSize)\n{\n  undefined4 bytesUntilNull;\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[2] = 0;\n  if (blockSize != 0) {\n    bytesUntilNull = countBytesUntilNull(blockSize);\n    updateMemoryIfZero(memoryBlock, blockSize, bytesUntilNull);\n  }\n  return memoryBlock;\n}",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "initializeMemoryWithZeros_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": true,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "iVar2": "current_sum",
                "param_1": "new_value",
                "puVar1": "current_pointer",
                "FUN_00080e88": "calculate_sum_00080e88"
            },
            "code": "int calculate_sum_00080e88(int new_value)\n{\n  undefined *current_pointer;\n  int current_sum;\n  current_pointer = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  current_sum = *(int *)current_pointer;\n  *(int *)current_pointer = new_value + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": true,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "iVar3": "buffer_index",
                "iVar4": "buffer_size",
                "puVar2": "buffer_ptr",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr",
                "puVar1": "data_ptr",
                "FUN_000836d8": "add_to_buffer_000836d8"
            },
            "code": "void add_to_buffer_000836d8(void)\n{\n  uint8_t *data_ptr;\n  uint32_t *buffer_ptr;\n  int buffer_size;\n  int buffer_index;\n  void (*jump_table_ptr)(uint32_t);\n  \n  data_ptr = BUFFER_DATA_PTR;\n  if (BUFFER_EMPTY_FLAG == 0) {\n    return;\n  }\n  buffer_ptr = *(uint32_t **)BUFFER_PTR_PTR;\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(*(int *)BUFFER_PTR_PTR + 0x14c);\n    *(uint32_t **)BUFFER_PTR_PTR = buffer_ptr;\n  }\n  buffer_index = buffer_ptr[1];\n  buffer_size = BUFFER_SIZE;\n  if (buffer_index > (buffer_size - 1)) {\n    if ((BUFFER_OVERFLOW_FLAG == 0) ||\n       (buffer_ptr = (uint32_t *)allocate_memory(400), buffer_ptr == (uint32_t *)0x0)) {\n      jump_table_ptr = (void (*)(uint32_t))UNRECOVERED_JUMPTABLE_00;\n      jump_table_ptr(0xffffffff);\n      return;\n    }\n    *buffer_ptr = *(uint32_t **)BUFFER_PTR_PTR;\n    buffer_ptr[1] = 0;\n    buffer_index = 0;\n    *(uint32_t **)BUFFER_PTR_PTR = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = buffer_index + 1;\n  buffer_ptr[buffer_index + 2] = (uint32_t)data_ptr;\n  jump_table_ptr = (void (*)(uint32_t))UNRECOVERED_JUMPTABLE_00;\n  jump_table_ptr(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "add_to_buffer_000836d8"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008074c"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "return_negative_one_thunk_00080efe"
            },
            "code": "int32_t return_negative_one_thunk_00080efe(void)\n{\n  return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": true,
            "current_name": "return_negative_one_thunk_00080efe"
        },
        "FUN_000812b8": {
            "renaming": {
                "iVar1": "buffer_info_address",
                "buffer_size": "buffer_data_size",
                "param_1": "buffer_address",
                "DAT_00081308": "BUFFER_DATA_MASK",
                "buffer_data_end": "buffer_data_end_index",
                "param_2": "data",
                "uVar2": "buffer_data_next_index",
                "buffer_data_length": "buffer_data_length",
                "buffer_data_start": "buffer_data_start_index",
                "FUN_000812b8": "write_to_buffer_000812b8"
            },
            "code": "int write_to_buffer_000812b8(int buffer_address, int data){\n  int buffer_info_address = *(int *)(buffer_address + 0x18);\n  int buffer_size = *(int *)(buffer_info_address + 0x14);\n  int buffer_data_start = *(int *)(buffer_info_address + 0x80);\n  int buffer_data_end = *(int *)(buffer_info_address + 0x84);\n  int buffer_data_length = buffer_data_end - buffer_data_start;\n\n  if ((*(int *)(*(int *)(buffer_address + 0x18) + 0x14) << 0x1e < 0) && (*(int *)(buffer_data_start + 0x84) == *(int *)(buffer_data_start + 0x80))) {\n    *(int *)(buffer_info_address + 0x1c) = data;\n  }\n  else {\n    uint buffer_data_next_index = (DAT_00081308 & buffer_data_length + 1U);\n    if ((int)buffer_data_next_index < 0) {\n      buffer_data_next_index = (buffer_data_next_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_data_start + 0x84) == buffer_data_next_index);\n    *(char *)(buffer_data_start + buffer_data_next_index) = (char)data;\n    *(int *)(buffer_data_start + 0x80) = buffer_data_next_index;\n    *(int *)(buffer_info_address + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": true,
            "current_name": "write_to_buffer_000812b8"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "iVar2": "index_value",
                "uVar1": "result_value",
                "param_1": "param_1",
                "abStack_1b": "previous_byte_values",
                "local_1c": "current_byte_value",
                "pbVar4": "current_byte",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "uVar3": "current_value",
                "uVar5": "current_index"
            },
            "code": "uint process_data_000839b4(uint32_t param_1, uint32_t data_length, byte **data_buffer)\n{\n  uint result_value;\n  int index_value;\n  uint current_value;\n  byte *current_byte;\n  uint current_index;\n  byte current_byte_value;\n  byte previous_byte_values[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data_buffer + 3) << 0x12)) {\n    *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x2000;\n    data_buffer[0x19] = (byte *)((uint)data_buffer[0x19] | 0x2000);\n  }\n  result_value = get_first_value();\n  if ((result_value == 1) && (data_length - 1 < 0xff)) {\n    current_value = data_length & 0xff;\n    current_byte_value = (byte)current_value;\n  }\n  else {\n    result_value = process_data_000839b4_0008434c(param_1,&current_byte_value,data_length,data_buffer + 0x17);\n    if (result_value == 0xffffffff) {\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result_value == 0) {\n      return data_length;\n    }\n    current_value = (uint)current_byte_value;\n  }\n  current_index = 0;\n  do {\n    current_byte = data_buffer[2] + -1;\n    data_buffer[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)data_buffer[6] <= (int)current_byte) {\n        **data_buffer = (byte)current_value;\n        current_byte = *data_buffer;\n        current_value = (uint)*current_byte;\n        if (current_value != 10) goto LAB_00083a04;\n      }\n      index_value = decode_and_process_data_000839b4(param_1,current_value,data_buffer);\n      if (index_value == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data_buffer = (byte)current_value;\n      current_byte = *data_buffer;\nLAB_00083a04:\n      *data_buffer = current_byte + 1;\n    }\n    if (result_value <= current_index + 1) {\n      return data_length;\n    }\n    current_value = (uint)previous_byte_values[current_index];\n    current_index = current_index + 1;\n  } while( true );\n}",
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": true,
            "current_name": "process_data_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "iVar1": "is_zero",
                "iVar2": "current_offset",
                "FUN_00081570": "update_string_00081570",
                "copy_string_000825cc": "copy_string",
                "param_1": "string_info",
                "param_2": "string_length",
                "param_3": "offset",
                "checkAndUpdateIfZero_000814ae": "checkAndUpdateIfZero"
            },
            "code": "int update_string_00081570(int *string_info, int string_length, int offset) {\n  int current_offset = string_info[2];\n  if (string_length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int is_zero = checkAndUpdateIfZero(string_info, current_offset + offset);\n    if (is_zero == 0) {\n      return 0;\n    }\n    copy_string(*string_info + current_offset, string_length);\n    string_info[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": true,
            "current_name": "update_string_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "uVar1": "channel_index_value",
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channel_index",
                "unaff_r4": "unaffected_r4",
                "param_2": "channel_value",
                "param_3": "bit_position",
                "param_4": "channel_offset",
                "in_lr": "input_lr"
            },
            "code": "void initialize_tc_channel_000803fc(int channel_index, uint32_t channel_value, uint32_t bit_position, uint32_t channel_offset) {\n  uint64_t channel_index_value = ((uint64_t)channel_value << 32) | channel_index;\n  check_character(channel_offset);\n  configure_tc_channel(channel_index, channel_value, 0xc002);\n  set_value_at_index(channel_index, channel_value, 0xa41);\n  *(int *)(channel_offset + (bit_position >> 5) * 4) = 1 << (bit_position & 0x1f);\n  *(uint32_t *)(channel_index + channel_value * 0x40 + 0x24) = 4;\n  if (channel_value > 2) {\n    channel_index_value = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80, 0x5c, PTR_s_TC_Start_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88, channel_index_value, unaff_r4);\n  }\n  *(uint32_t *)((int)channel_index_value + (int)((uint64_t)channel_index_value >> 0x20) * 0x40) = 5;\n  return;\n}",
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": true,
            "current_name": "initialize_tc_channel_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_flags_00080eb0",
                "param_1": "memory_address",
                "param_2": "flags"
            },
            "code": "void set_memory_flags_00080eb0(int memory_address, int flags) {\n  *(int *)(memory_address + 4) = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": true,
            "current_name": "set_memory_flags_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "update_string_with_mask_0008159e": "updateStringWithMask",
                "uVar1": "calculatedValue",
                "param_1": "memory",
                "FUN_00081214": "initializeMemoryAndReadString_00081214",
                "param_2": "mask",
                "initializeMemoryWithZeros_000814f6": "initializeMemoryWithZeros",
                "calculate_value_000811e8": "calculateValue",
                "param_3": "targetCharacter"
            },
            "code": "void initializeMemoryAndReadString_00081214(uint8_t* memory, uint8_t* mask, uint targetCharacter) {\n  uint calculatedValue;\n  initializeMemoryWithZeros(memory, mask);\n  while ((calculatedValue = calculateValue(mask), -1 < (int)calculatedValue && (calculatedValue != targetCharacter))) {\n    updateStringWithMask(memory, calculatedValue & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "initializeMemoryAndReadString_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "undefined4": "int",
                "param_1": "output_buffer",
                "uint": "uint32_t",
                "undefined": "uint8_t",
                "FUN_0008439c": "write_byte_or_error_0008439c",
                "*param_1": "*output_buffer",
                "*param_2": "*byte_to_write",
                "param_2": "byte_to_write",
                "param_3": "buffer_size"
            },
            "code": "int write_byte_or_error_0008439c(uint8_t *output_buffer, uint8_t byte_to_write, uint32_t buffer_size) {\n  if (output_buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *output_buffer = byte_to_write;\n    return 1;\n  }\n  *output_buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": true,
            "current_name": "write_byte_or_error_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "iVar2": "result",
                "param_1": "input1",
                "piVar3": "currentDataSizePointer",
                "puVar5": "currentWordPointer",
                "piVar1": "currentWordPointer",
                "FUN_00082824": "process_data_and_return_result_00082824",
                "param_2": "input2",
                "param_3": "input3",
                "uVar4": "currentWordIndex",
                "uVar7": "totalWordsInData",
                "uVar6": "dataSizeInWords"
            },
            "code": "int process_data_and_return_result_00082824(int input1, int input2, int **input3) {\n  int *currentDataPointer;\n  int result;\n  int *currentDataSizePointer;\n  uint dataSizeInWords;\n  undefined4 *currentWordPointer;\n  uint currentWordIndex;\n  uint totalWordsInData;\n  \n  if (-1 < *(int *)(input2 + 100) << 0x12) {\n    result = FUNC_00083ca8();\n    input3[2] = (int *)0x0;\n    input3[1] = (int *)0x0;\n    return result;\n  }\n  currentDataSizePointer = input3[2];\n  currentWordPointer = *input3;\n  while (currentDataSizePointer != (int *)0x0) {\n    dataSizeInWords = currentWordPointer[1] >> 2;\n    if (dataSizeInWords != 0) {\n      currentWordIndex = 0;\n      currentWordPointer = (undefined4 *)(*currentWordPointer + -4);\n      do {\n        currentWordPointer = currentWordPointer + 1;\n        result = process_data_000839b4(input1, *currentWordPointer, input2);\n        currentWordIndex = currentWordIndex + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (dataSizeInWords != currentWordIndex);\n      currentDataSizePointer = input3[2];\n    }\n    currentDataSizePointer = (int *)((int)currentDataSizePointer - (currentWordPointer[1] & 0xfffffffc));\n    input3[2] = currentDataSizePointer;\n    currentWordPointer = currentWordPointer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  input3[2] = (int *)0x0;\n  input3[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "process_data_and_return_result_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "iVar1": "errorCode",
                "param_1": "input1",
                "FUN_0008427c": "checkAndSetStatus_0008427c",
                "param_2": "input2",
                "uVar2": "statusBits"
            },
            "code": "void checkAndSetStatus_0008427c(int input1, int* input2)\n{\n  int errorCode;\n  ushort statusBits;\n\n  errorCode = returnIfError(input1, (int)*(short *)(input2 + 0xe));\n  if (errorCode == -1) {\n    statusBits = *(ushort *)(input2 + 0xc) & 0xefff;\n  }\n  else {\n    statusBits = *(ushort *)(input2 + 0xc) | 0x1000;\n  }\n  if (errorCode != -1) {\n    *(int *)(input2 + 0x50) = errorCode;\n  }\n  *(ushort *)(input2 + 0xc) = statusBits;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": true,
            "current_name": "checkAndSetStatus_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "uVar1": "new_flags",
                "param_1": "base_address",
                "FUN_000809be": "update_flags_000809be",
                "param_2": "flag_mask",
                "param_3": "flag_value"
            },
            "code": "void update_flags_000809be(int base_address, uint32_t flag_value, uint32_t flag_mask)\n{\n  *(uint32_t *)(base_address + 0x44) = flag_value;\n  switch(flag_mask) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    uint32_t new_flags = *(uint32_t *)(base_address + 0x70) & *(uint32_t *)(base_address + 0x70) & ~flag_value;\n    break;\n  case 2:\n    uint32_t new_flags = *(uint32_t *)(base_address + 0x70) | flag_value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint32_t *)(base_address + 0x70) = new_flags;\nswitchD_000809c4_caseD_6:\n  *(uint32_t *)(base_address + 4) = flag_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": true,
            "current_name": "update_flags_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "uVar1": "bits_set_in_both_params",
                "param_1": "ptr_param_1",
                "FUN_00080a94": "check_bits_set_in_two_params_00080a94"
            },
            "code": "uint check_bits_set_in_two_params_00080a94(int ptr_param_1, uint param_2)\n{\n  uint bits_set_in_both_params;\n  bits_set_in_both_params = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (bits_set_in_both_params != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      bits_set_in_both_params = 0;\n    }\n    else {\n      bits_set_in_both_params = 1;\n    }\n  }\n  return bits_set_in_both_params;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": true,
            "current_name": "check_bits_set_in_two_params_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "DAT_00081620": "data_address",
                "undefined4": "int",
                "*": "dereference",
                "int*": "pointer_to_int",
                "*(undefined4 *)": "dereference_and_cast_to_int_pointer",
                "FUN_00081618": "set_data_at_address_00081618",
                "PTR_": "pointer_",
                "data_value": "0x8000"
            },
            "code": "void set_data_at_address_00081618(void)\n{\n  int* DAT_00081620 = (int*)(DAT_00081620 + 4);\n  int data_value = 0x8000;\n  *DAT_00081620 = data_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "set_data_at_address_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "uVar1": "product_lower",
                "param_1": "minuend",
                "lVar2": "product",
                "param_2": "subtrahend",
                "param_3": "multiplier_upper",
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_4": "multiplier_lower",
                "param_5": "difference"
            },
            "code": "void calculate_difference_0008455c(uint minuend, int subtrahend, uint multiplier_upper, uint multiplier_lower, int *difference)\n{\n  uint product_upper;\n  ulonglong product;\n  product = FUNC_000845c0();\n  product *= CONCAT44(multiplier_upper, multiplier_lower);\n  product_upper = (uint)(product >> 0x20);\n  difference[0] = minuend - (uint)product;\n  difference[1] = subtrahend - product_upper - (uint)(minuend < (uint)product);\n  return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": true,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "pcVar3": "current_char_ptr",
                "param_1": "array",
                "param_2": "character",
                "param_3": "array_length",
                "FUN_000840f8": "find_character_in_array_000840f8",
                "puVar1": "current_element",
                "uVar2": "xor_result",
                "pcVar4": "last_char_ptr",
                "bVar5": "found"
            },
            "code": "uint* find_character_in_array_000840f8(uint* array, char character, uint* array_length) {\n  uint* current_element;\n  uint xor_result;\n  char* current_char_ptr;\n  char* last_char_ptr;\n  bool found;\n  if (((uint)array & 3) == 0) {\n    current_element = array;\n    if (array_length > (uint*)0x3) {\n      do {\n        xor_result = *array ^ ((character << 24) | (character << 16) | (character << 8) | character);\n        current_element = array;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) {\n          break;\n        }\n        array_length--;\n        current_element++;\n        array++;\n      } while (array_length > (uint*)0x3);\n    }\n    array = array_length;\n    last_char_ptr = (char*)((int)array - 1);\n    if ((array != (uint*)0x0) && (*(char*)current_element != character)) {\n      current_char_ptr = (char*)0x0;\n      do {\n        array = (uint*)((int)array + 1);\n        found = current_char_ptr == last_char_ptr;\n        current_char_ptr++;\n        if (found) {\n          goto exit_loop;\n        }\n      } while (*(char*)array != character);\n    }\n  }\n  else if (array_length == (uint*)0x0) {\n    current_element = (uint*)0x0;\n  }\n  else if (*(char*)array != character) {\n    current_element = (uint*)((int)array + 1);\n    array_length = (uint*)((int)array_length - 1);\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) {\n        current_element = array;\n        if (array_length > (uint*)0x3) {\n          do {\n            xor_result = *array ^ ((character << 24) | (character << 16) | (character << 8) | character);\n            current_element = array;\n            if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) {\n              goto exit_loop;\n            }\n            array_length--;\n            array++;\n          } while (array_length > (uint*)0x3);\n        }\n        array = array_length;\n        last_char_ptr = (char*)((int)array - 1);\n        if ((array != (uint*)0x0) && (*(char*)current_element != character)) {\n          current_char_ptr = (char*)0x0;\n          do {\n            array = (uint*)((int)array + 1);\n            found = current_char_ptr == last_char_ptr;\n            current_char_ptr++;\n            if (found) {\n              goto exit_loop;\n            }\n          } while (*(char*)array != character);\n        }\n        break;\n      }\n      if (array_length == (uint*)0x0) {\n        current_element = (uint*)0x0;\n        break;\n      }\n      current_element = (uint*)((int)array + 1);\n      array_length = (uint*)((int)array_length - 1);\n    } while (*(char*)array != character);\n  }\n  exit_loop:\n  return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "find_character_in_array_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = handle_data_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)decode_data_and_check_flag_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_character_in_array_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_result_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_result_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_and_return_result_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_00083888",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "imported": true,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "puVar2": "next_word",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "current_word",
                "uVar3": "value32",
                "uVar4": "remaining_length",
                "FUN_00081f00": "fill_memory_with_value_00081f00",
                "bVar5": "zero_length"
            },
            "code": "void fill_memory_with_value_00081f00(uint32_t *memory, uint8_t value, uint32_t length)\n{\n  uint32_t *current_word;\n  uint32_t remaining_length;\n  uint32_t value32;\n  \n  if (((uint32_t)memory & 3) != 0) {\n    bool zero_length = length == 0;\n    current_word = memory;\n    length = length - 1;\n    if (zero_length) {\n      return;\n    }\n    while (true) {\n      memory = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      if (((uint32_t)memory & 3) == 0) {\n        break;\n      }\n      zero_length = length == 0;\n      current_word = memory;\n      length = length - 1;\n      if (zero_length) {\n        return;\n      }\n    }\n  }\n  \n  if (3 < length) {\n    value32 = value;\n    value32 |= value << 8;\n    value32 |= value << 16;\n    value32 |= value << 24;\n    remaining_length = length;\n    current_word = memory;\n    if (0xf < length) {\n      remaining_length = length - 0x10;\n      do {\n        *current_word = value32;\n        current_word[1] = value32;\n        current_word[2] = value32;\n        current_word[3] = value32;\n        current_word += 4;\n      } while (current_word != (uint32_t *)((int)memory + (remaining_length & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      memory = memory + ((remaining_length >> 4) + 1) * 4;\n      remaining_length = length;\n      if (length < 4) {\n        goto LAB_00081f7c;\n      }\n    }\n    do {\n      length = length - 4;\n      *memory = value32;\n      memory += 1;\n    } while (3 < length);\n    memory = (uint32_t *)((int)current_word + (remaining_length - 4 & 0xfffffffc) + 4);\n    length = remaining_length & 3;\n  }\n  \n  LAB_00081f7c:\n  if (length != 0) {\n    current_word = memory;\n    do {\n      uint32_t *next_word = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      current_word = next_word;\n    } while (next_word != (uint32_t *)(length + (int)memory));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "imported": true,
            "current_name": "fill_memory_with_value_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "undefined4": "int32_t",
                "FUN_00080eaa": "return_error_code_00080eaa"
            },
            "code": "int32_t return_error_code_00080eaa(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": true,
            "current_name": "return_error_code_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "puVar2": "dest32",
                "puVar3": "src8",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest8",
                "uVar5": "remainder",
                "uVar4": "i",
                "bVar6": "bool",
                "FUN_00081d48": "copy_memory_00081d48"
            },
            "code": "undefined4 copy_memory_00081d48(undefined4 *dest, undefined4 *src, uint32_t size)\n{\n  uint32_t i;\n  uint32_t remainder = size % 16;\n  size -= remainder;\n  uint32_t *dest32 = (uint32_t *)dest;\n  uint32_t *src32 = (uint32_t *)src;\n  for (i = 0; i < size / 4; i += 4)\n  {\n    dest32[i] = src32[i];\n    dest32[i + 1] = src32[i + 1];\n    dest32[i + 2] = src32[i + 2];\n    dest32[i + 3] = src32[i + 3];\n  }\n  uint8_t *dest8 = (uint8_t *)&dest32[i];\n  uint8_t *src8 = (uint8_t *)&src32[i];\n  for (i = 0; i < remainder; i++)\n  {\n    dest8[i] = src8[i];\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "set_memory_flags_00084494",
                "iVar2": "set_memory_result",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "flags",
                "puVar1": "previous_result"
            },
            "code": "void set_memory_flags_00084494(int *result, int start_address, int end_address, int flags, int size)\n{\n  int *previous_result = PTR_DAT_000844b8;\n  *previous_result = 0;\n  int set_memory_result = set_memory_flags_00084494_00080eb0(start_address, end_address, size, flags, size);\n  if (set_memory_result == -1 && *previous_result != 0) {\n    *result = *previous_result;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": true,
            "current_name": "set_memory_flags_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "iVar1": "result",
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "x",
                "calculate_difference_0008458c": "calculate_difference",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w"
            },
            "code": "int calculate_result_00084530(int x, int y, int z, int w)\n{\n  int result;\n  if ((w == 0) && (z == 0)) {\n    if (y != 0 || x != 0) {\n      x = -1;\n    }\n    result = x;\n  }\n  else {\n    result = calculate_difference();\n  }\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "calculate_result_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "calculate_difference_00081248": "calculate_difference",
                "FUN_00080970": "check_differences_and_do_nothing_00080970",
                "do_nothing_0008074c": "do_nothing",
                "do_nothing_0008074a": "do_nothing",
                "do_nothing_0008073a": "do_nothing",
                "do_nothing_00080748": "do_nothing",
                "difference": "difference"
            },
            "code": "void check_differences_and_do_nothing_00080970(void)\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_000809a4);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809a8);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809ac);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_000809b0);\n  if (difference != 0) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_0008074a",
                "FUN_0008074c",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "check_differences_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "iVar2": "memoryFlags",
                "local_50": "localFlag",
                "iVar3": "checkResult",
                "uVar1": "flagValue",
                "FUN_00084018": "checkMemory_00084018",
                "param_1": "address",
                "auStack_54": "stackVar",
                "param_2": "flags",
                "uVar4": "uintFlagValue",
                "bVar5": "isExecutable"
            },
            "code": "void checkMemory_00084018(int address, int *flags) {\n  ushort flagValue;\n  int memoryFlags;\n  uint uintFlagValue;\n  bool isExecutable;\n  undefined stackVar[4];\n  uint localFlag;\n  \n  flagValue = *(ushort *)(flags + 3);\n  uintFlagValue = (uint)flagValue;\n  if ((int)(uintFlagValue << 0x1e) < 0) {\n    *flags = (int)flags + 0x43;\n    flags[4] = (int)flags + 0x43;\n    flags[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)flags + 0xe)) {\n    memoryFlags = setMemoryFlags(address,(int)*(short *)((int)flags + 0xe),stackVar);\n    if (-1 < memoryFlags) {\n      isExecutable = (localFlag & 0xf000) == 0x2000;\n      if (((localFlag & 0xf000) == 0x8000) &&\n         ((undefined *)flags[10] == PTR_FUN_0008427c_1_000840f4)) {\n        memoryFlags = 0x400;\n        *(ushort *)(flags + 3) = *(ushort *)(flags + 3) | 0x400;\n        flags[0x13] = 0x400;\n      }\n      else {\n        memoryFlags = 0x400;\n        *(ushort *)(flags + 3) = *(ushort *)(flags + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    flagValue = *(ushort *)(flags + 3);\n    uintFlagValue = (uint)flagValue;\n  }\n  *(ushort *)(flags + 3) = flagValue | 0x800;\n  if ((uintFlagValue & 0x80) == 0) {\n    memoryFlags = 0x400;\n  }\n  else {\n    memoryFlags = 0x40;\n  }\n  isExecutable = false;\nLAB_00084074:\n  memoryFlags = checkMemory_00084018Flags(address,memoryFlags);\n  flagValue = *(ushort *)(flags + 3);\n  if (memoryFlags == 0) {\n    if (-1 < (int)((uint)flagValue << 0x16)) {\n      *(ushort *)(flags + 3) = flagValue | 2;\n      *flags = (int)flags + 0x43;\n      flags[4] = (int)flags + 0x43;\n      flags[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(address + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(flags + 3) = flagValue | 0x80;\n    *flags = memoryFlags;\n    flags[4] = memoryFlags;\n    flags[5] = memoryFlags;\n    if ((isExecutable) && (memoryFlags = retrieveValue(address,(int)*(short *)((int)flags + 0xe)), memoryFlags != 0))\n    {\n      *(ushort *)(flags + 3) = *(ushort *)(flags + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00081810",
                "FUN_000844bc",
                "FUN_00084494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": true,
            "current_name": "checkMemory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "bVar2": "is_negative",
                "bVar1": "char_type",
                "uVar10": "max_value",
                "iVar7": "base_offset",
                "iVar8": "digit_count",
                "digit_value": "digit_value",
                "param_1": "input_str",
                "FUN_000815de": "parse_integer_000815de",
                "pbVar6": "current_char_ptr",
                "pbVar4": "str_ptr",
                "uVar3": "result",
                "uVar5": "current_char",
                "uVar9": "max_value_div_10"
            },
            "code": "uint parse_integer_000815de(byte **input_str) {\n  if (*input_str == NULL) {\n    return 0;\n  }\n  byte *str_ptr = *input_str;\n  byte current_char = *str_ptr;\n  bool is_negative = false;\n  if (current_char == '-') {\n    is_negative = true;\n    str_ptr++;\n    current_char = *str_ptr;\n  }\n  else if (current_char == '+') {\n    str_ptr++;\n    current_char = *str_ptr;\n  }\n  uint max_value = is_negative ? 0x80000000 : 0x7fffffff;\n  uint max_value_div_10 = max_value / 10;\n  int digit_count = 0;\n  uint result = 0;\n  while (true) {\n    byte char_type = *(byte *)(*DAT_000827f8 + current_char + 1);\n    if ((char_type & 4) == 0) {\n      if ((char_type & 3) == 0) {\n        if (digit_count == 0) {\n          *(undefined4 *)*DAT_00082810 = 0x22;\n          result = max_value;\n        }\n        else if (is_negative) {\n          result = -result;\n        }\n        return result;\n      }\n      int base_offset = (char_type & 3) == 1 ? 0x37 : 0x57;\n      int digit_value = current_char - base_offset;\n    }\n    else {\n      digit_value = current_char - 0x30;\n    }\n    if (digit_value > 9) {\n      if (digit_count == 0) {\n        *(undefined4 *)*DAT_00082810 = 0x22;\n        result = max_value;\n      }\n      else if (is_negative) {\n        result = -result;\n      }\n      return result;\n    }\n    if (digit_count != -1) {\n      if (max_value_div_10 <= result && result != max_value_div_10 || (result == max_value_div_10 && ((int)(max_value % 10) < digit_value))))\n      {\n        digit_count = -1;\n      }\n      else {\n        result = result * 10 + digit_value;\n        digit_count = 1;\n      }\n    }\n    str_ptr++;\n    current_char = *str_ptr;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "parse_integer_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "local_47c": "flag",
                "iVar1": "result",
                "local_46c": "ptr_6",
                "iVar2": "decode_result",
                "local_47a": "flag_masked",
                "param_1": "param_1",
                "auStack_420": "stack_buffer",
                "local_424": "stack_buffer",
                "local_488": "stack_ptrs",
                "local_478": "buffer_ptr",
                "local_464": "ptr_7",
                "FUN_000834f0": "decode_data_and_check_flag_000834f0",
                "local_474": "ptr_4",
                "param_2": "data_ptr",
                "local_480": "stack_size",
                "local_470": "ptr_5"
            },
            "code": "int decode_data_and_check_flag_000834f0(undefined4 param_1,int data_ptr)\n{\n  int result;\n  int decode_result;\n  undefined *stack_ptrs [2];\n  undefined4 stack_size;\n  ushort flag;\n  undefined2 flag_masked;\n  undefined *buffer_ptr;\n  undefined4 ptr_3;\n  undefined4 ptr_4;\n  undefined4 ptr_5;\n  undefined4 ptr_6;\n  undefined4 ptr_7;\n  undefined stack_buffer [1024];\n  \n  ptr_3 = *(undefined4 *)(data_ptr + 100);\n  ptr_6 = *(undefined4 *)(data_ptr + 0x1c);\n  flag_masked = *(undefined2 *)(data_ptr + 0xe);\n  ptr_7 = *(undefined4 *)(data_ptr + 0x24);\n  stack_ptrs[0] = stack_buffer;\n  flag = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  stack_size = 0x400;\n  ptr_4 = 0x400;\n  ptr_5 = 0;\n  buffer_ptr = stack_ptrs[0];\n  result = FUNC_0008289c(param_1,stack_ptrs);\n  if ((-1 < result) && (decode_result = decode_data_00083850(param_1,stack_ptrs), decode_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "decode_data_and_check_flag_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "iVar4": "data",
                "param_1": "param",
                "piVar3": "data_pointer",
                "unaff_r5": "unaff_r5",
                "ppiVar6": "pointer_to_data_pointer",
                "unaff_r4": "unaff_r4",
                "FUN_000841e4": "process_param_000841e4",
                "puVar1": "result",
                "uVar2": "return_value",
                "pcVar5": "function_pointer",
                "in_lr": "in_lr"
            },
            "code": "int process_param_000841e4(uint param)\n{\n  undefined *result;\n  undefined4 return_value;\n  int *data_pointer;\n  int data;\n  code *function_pointer;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  int **pointer_to_data_pointer;\n  \n  data_pointer = *global_data_pointer;\n  if (param > 0x1f) {\n    *data_pointer = 0x16;\n    return -1;\n  }\n  data = data_pointer[0xb7];\n  if ((data == 0) || (function_pointer = *(code **)(data + param * 4), function_pointer == (code *)0x0)) {\n    pointer_to_data_pointer = global_data_pointer;\n    return_value = return_negative_one_thunk(data_pointer);\n    result = PTR_global_result;\n    *(undefined4 *)PTR_global_result = 0;\n    data = do_nothing(return_value, param, param, 0, pointer_to_data_pointer, unaff_r4, unaff_r5, in_lr);\n    if ((data == -1) && (*(int *)result != 0)) {\n      *data_pointer = *(int *)result;\n      return -1;\n    }\n    return data;\n  }\n  if (function_pointer == (code *)0x1) {\n    return 0;\n  }\n  if (function_pointer != (code *)0xffffffff) {\n    *(undefined4 *)(data + param * 4) = 0;\n    (*function_pointer)(param);\n    return 0;\n  }\n  *data_pointer = 0x16;\n  return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "process_param_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "base",
                "FUN_0008113a": "convert_and_process_data_0008113a",
                "param_4": "flags"
            },
            "code": "int convert_and_process_data_0008113a(uint32_t *data_ptr, uint32_t data, uint32_t base, uint32_t flags) {\n  int result;\n  int negative = 0;\n  if (base == 0) {\n    result = (**(function_ptr **)*data_ptr)(data_ptr,data & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)data < 0) {\n      negative = 1;\n      result = execute_function_pointer(data_ptr,0x2d);\n      data = -data;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_base_and_process_data(data_ptr,data,base,flags);\n  if (negative) {\n    result = -result;\n  }\n  return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "imported": true,
            "current_name": "convert_and_process_data_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "*DAT_00084014": "first_value_pointer",
                "FUN_0008400c": "get_first_value_0008400c"
            },
            "code": "get_first_value_0008400c() {\n  return **DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "get_first_value_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "iVar1": "isMemoryZero",
                "copy_string_000825cc": "copyString",
                "param_1": "memory",
                "param_2": "newValue",
                "param_3": "memorySize",
                "clear_memory_if_not_null_00081480": "clearMemoryIfNotNull",
                "FUN_000814d0": "checkAndUpdateMemoryIfZero_000814d0",
                "checkAndUpdateIfZero_000814ae": "checkAndUpdateIfZero"
            },
            "code": "undefined4 * checkAndUpdateMemoryIfZero_000814d0(undefined4 *memory, undefined4 newValue, undefined4 memorySize)\n{\n  int isMemoryZero = checkAndUpdateIfZero(memory, memorySize);\n  if (isMemoryZero == 0) {\n    clearMemoryIfNotNull(memory);\n  }\n  else {\n    memory[2] = memorySize;\n    copyString(memory[0], newValue);\n  }\n  return memory;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": true,
            "current_name": "checkAndUpdateMemoryIfZero_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "iVar3": "i",
                "puVar2": "relPtrSrc",
                "puVar4": "ptr",
                "puVar1": "relPtrDst",
                "FUN_00080c20": "initializeElf32Relocations_00080c20"
            },
            "code": "void initializeElf32Relocations_00080c20(void)\n{\n  undefined *relPtrDst = PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined *relPtrSrc = DAT_00080c78;\n  int i = 0;\n  undefined4 *ptr = (undefined4 *)PTR_DAT_00080c80;\n  if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n    for (i = 0; ptr = (undefined4 *)PTR_DAT_00080c80, relPtrDst + i < PTR_DAT_00080c84; i += 4) {\n      *(undefined4 *)(relPtrDst + i) = *(undefined4 *)(relPtrSrc + i);\n    }\n  }\n  for (; ptr < DAT_00080c88; ptr++) {\n    *ptr = 0;\n  }\n  relPtrSrc = PTR_DAT_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n  if (relPtrSrc < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) = *(uint *)(DAT_00080c90 + 8) | 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": true,
            "current_name": "initializeElf32Relocations_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": true,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "bVar1": "currentByte",
                "puVar2": "dataPointer",
                "iVar6": "baseIndex",
                "puVar3": "byteCountPointer",
                "puVar4": "byteData",
                "param_1": "index",
                "param_2": "data",
                "param_3": "flag",
                "uVar5": "time",
                "FUN_0008044c": "updateData_0008044c"
            },
            "code": "void updateData_0008044c(int index, int flag) {\n  byte currentByte = *currentPointer;\n  undefined *dataPointer = dataPointers;\n  undefined *byteCountPointer = byteCounts;\n  int baseIndex = index * 0xc;\n  if ((dataPointers[index] & 0x80) == 0) {\n    if (((char)dataPointers[index] + baseIndex < (int)(uint)(byte)*byteCountPointer) && ((int)((uint)(byte)byteData[((char)dataPointers[index] + baseIndex) * 8] << 0x19) < 0)) {\n      updateData_0008044c(byteData[(baseIndex + (char)dataPointers[index]) * 8] & 0x3f, 0);\n    }\n  }\n  else {\n    *(uint *)(data + index * 0x40) = *(uint *)(data + index * 0x40) | 4;\n  }\n  byteCountPointer = byteData;\n  currentByte = currentByte + '\\x01';\n  dataPointer[index] = dataPointer[index] + '\\x01';\n  if (((char)dataPointer[index] + baseIndex < (int)(uint)currentByte) && ((char)dataPointers[index] < '\f')) {\n    *(int *)(data + index * 0x40 + 0x14) = *(int *)(data + index * 0x40 + 0x10) + *(int *)(byteData + ((char)dataPointers[index] + baseIndex) * 8 + 4);\n    if (-1 < (int)((uint)(byte)byteCountPointer[((char)dataPointers[index] + baseIndex) * 8] << 0x19)) {\n      return;\n    }\n    updateData_0008044c(byteData[(baseIndex + (char)dataPointers[index]) * 8] & 0x3f, 1);\n    return;\n  }\n  data = data + index * 0x40;\n  uint time = (*timePointer / timeConstant) * 20000 >> 5;\n  if (time <= *(int *)(data + 0x10) + 4U) {\n    time = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = time;\n  dataPointer[index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": true,
            "current_name": "updateData_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "process_data_000810a6": "processData",
                "param_1": "data",
                "param_2": "ptr",
                "PTR_": "",
                "param_3": "size1",
                "param_4": "size2",
                "DAT_": "",
                "PTR_DAT_000810e4": "ptr",
                "FUN_000810d8": "processDataAndReturnResult_000810d8"
            },
            "code": "PTR_DPTR_APTR_TPTR__PTR_vPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_ processDataAndReturnResult_000810d8(PTR_DPTR_APTR_TPTR__PTR_vPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_*PTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_vPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_*PTR_DPTR_APTR_TPTR__PTR_PPTR_DPTR_APTR_TPTR__PTR_TPTR_DPTR_APTR_TPTR__PTR_RPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_DPTR_DPTR_APTR_TPTR__PTR_APTR_DPTR_APTR_TPTR__PTR_TPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_8PTR_DPTR_APTR_TPTR__PTR_1PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_4PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_1PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_2PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_3PTR_DPTR_APTR_TPTR__PTR_)PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_{PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_pPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_cPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_DPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_(PTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_aPTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_PPTR_DPTR_APTR_TPTR__PTR_TPTR_DPTR_APTR_TPTR__PTR_RPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_DPTR_DPTR_APTR_TPTR__PTR_APTR_DPTR_APTR_TPTR__PTR_TPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_8PTR_DPTR_APTR_TPTR__PTR_1PTR_DPTR_APTR_TPTR__PTR_0PTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_4PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_1PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_2PTR_DPTR_APTR_TPTR__PTR_,PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_sPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_zPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_3PTR_DPTR_APTR_TPTR__PTR_)PTR_DPTR_APTR_TPTR__PTR_;PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_uPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_;PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_}PTR_DPTR_APTR_TPTR__PTR_",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": true,
            "current_name": "processDataAndReturnResult_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "return_error_code_00080efe"
            },
            "code": "int32_t return_error_code_00080efe(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": true,
            "current_name": "return_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "iVar1": "i",
                "puVar2": "dest_aligned",
                "puVar3": "src_aligned",
                "puVar4": "dest_end",
                "param_1": "dest",
                "puVar6": "remaining_bytes",
                "param_2": "src",
                "param_3": "size",
                "uVar5": "remaining_bytes",
                "FUN_00081e34": "copy_memory_00081e34",
                "uVar7": "remaining_bytes"
            },
            "code": "void copy_memory_00081e34(uint32_t *dest, uint32_t *src, uint32_t size) {\n  uint32_t *dest_end;\n  uint32_t *src_end;\n  uint32_t *dest_aligned;\n  uint32_t *src_aligned;\n  uint32_t remaining_bytes;\n  if ((src < dest) && ((uint32_t *)src + size > dest)) {\n    dest_end = (uint32_t *)((int)dest + size);\n    src_end = (uint32_t *)((int)src + size);\n    remaining_bytes = size;\n    while (remaining_bytes != 0) {\n      remaining_bytes--;\n      dest_end--;\n      src_end--;\n      *(uint8_t *)dest_end = *(uint8_t *)src_end;\n    }\n  } else if (size >= 16) {\n    dest_aligned = (uint32_t *)(((uint32_t)dest + 15) & -0x10);\n    src_aligned = (uint32_t *)(((uint32_t)src + 15) & -0x10);\n    remaining_bytes = size - ((uint32_t)dest_aligned - (uint32_t)dest);\n    for (uint32_t i = 0; i < remaining_bytes / 4; i++) {\n      dest_aligned[i] = src_aligned[i];\n    }\n    remaining_bytes &= 3;\n    dest_end = (uint32_t *)((int)dest + size);\n    src_end = (uint32_t *)((int)src + size);\n    while (remaining_bytes != 0) {\n      remaining_bytes--;\n      dest_end--;\n      src_end--;\n      *(uint8_t *)dest_end = *(uint8_t *)src_end;\n    }\n  } else if (size != 0) {\n    dest_end = dest;\n    src_end = src;\n    while (dest_end != dest + size) {\n      *(uint8_t *)dest_end = *(uint8_t *)src_end;\n      dest_end++;\n      src_end++;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "copy_memory_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "PTR_DAT_000805e4": "data_table",
                "bVar1": "index",
                "DAT_000805dc": "data_array",
                "FUN_000805a8": "process_data_000805a8",
                "puVar2": "data",
                "param_1": "output_data",
                "PTR_DAT_000805d8": "data_index",
                "DAT_000805e0": "data_divisor"
            },
            "code": "void process_data_000805a8(byte *output_data)\n{\n  byte index = *PTR_DAT_000805d8;\n  if (index < 0x3c) {\n    *PTR_DAT_000805d8 = index + 1;\n    uint *data = DAT_000805dc;\n    *output_data = index;\n    uint result = (*data / DAT_000805e0) * 1500 >> 5;\n    *(uint *)(PTR_DAT_000805e4 + (uint)index * 8 + 4) = result;\n    return;\n  }\n  *output_data = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": true,
            "current_name": "process_data_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_000815ec",
                "FUN_000801e0",
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "param_1": "function_ptr"
            },
            "code": "void execute_function_pointer_000810cc(void *function_ptr) {\n  (**(void (**)(void))function_ptr)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": true,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "*(int *)(iVar2 + 0x84)": "read_index",
                "bVar1": "byte_to_return",
                "iVar2": "buffer",
                "*(int *)(param_1 + 0x10)": "buffer",
                "*(int *)(iVar2 + 0x80)": "write_index",
                "FUN_00081276": "get_byte_from_buffer_00081276",
                "param_1": "buffer_address"
            },
            "code": "uint get_byte_from_buffer_00081276(int buffer_address)\n{\n  int buffer = *(int *)(buffer_address + 0x10);\n  int read_index = *(int *)(buffer + 0x84);\n  int write_index = *(int *)(buffer + 0x80);\n  if (read_index != write_index) {\n    byte byte_to_return = *(byte *)(buffer + read_index);\n    *(int *)(buffer + 0x84) = (read_index + 1) & 0x7f;\n    return (uint)byte_to_return;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "get_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "iVar2": "result",
                "FUN_000844bc": "retrieve_value_000844bc",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "data_pointer"
            },
            "code": "void retrieve_value_000844bc(int *output_value, undefined4 input_value)\n{\n  undefined *data_pointer;\n  int result;\n  data_pointer = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  result = calculate_value(input_value);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": true,
            "current_name": "retrieve_value_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "iVar2": "block_size",
                "iVar5": "data_size",
                "FUN_00083850": "decode_data_00083850",
                "iVar7": "data_offset",
                "param_1": "data_ptr",
                "piVar1": "block_ptr",
                "data_offset": "data_offset",
                "header_offset": "header_offset",
                "unaff_r4": "return_value",
                "param_2": "header_ptr",
                "uVar3": "header_flags",
                "pcVar6": "decoder_func",
                "uVar4": "header_size"
            },
            "code": "undefined4 decode_data_00083850(int *data_ptr, int *header_ptr)\n{\n  int *block_ptr;\n  int block_size;\n  ushort header_flags;\n  uint header_size;\n  int data_size;\n  code *decoder_func;\n  undefined4 return_value;\n  int data_offset;\n  int header_offset;\n  if ((data_ptr != (int *)0x0) && (data_ptr[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(header_ptr + 3) == 0) {\n    return 0;\n  }\n  header_flags = *(ushort *)(header_ptr + 3);\n  if ((int)((uint)header_flags << 0x1c) < 0) {\n    header_offset = header_ptr[4];\n    if (header_offset == 0) {\n      return 0;\n    }\n    data_offset = *header_ptr;\n    if ((header_flags & 3) == 0) {\n      block_size = header_ptr[5];\n    }\n    else {\n      block_size = 0;\n    }\n    *header_ptr = header_offset;\n    data_size = data_offset - header_offset;\n    header_ptr[2] = block_size;\n    do {\n      if (data_size < 1) {\n        return 0;\n      }\n      block_size = (*(code *)header_ptr[9])(data_ptr,header_ptr[7],header_offset,data_size,return_value);\n      data_size = data_size - block_size;\n      header_offset = header_offset + block_size;\n    } while (0 < block_size);\n    *(ushort *)(header_ptr + 3) = *(ushort *)(header_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(header_ptr + 3) = header_flags | 0x800;\n  if ((header_ptr[1] < 1) && (header_ptr[0xf] < 1)) {\n    return 0;\n  }\n  decoder_func = (code *)header_ptr[10];\n  if (decoder_func == (code *)0x0) {\n    return 0;\n  }\n  header_size = (uint)(header_flags | 0x800);\n  data_offset = *data_ptr;\n  *data_ptr = 0;\n  if ((header_flags & 0x1000) == 0) {\n    block_size = (*decoder_func)(data_ptr,header_ptr[7],header_size & 0x1000,1);\n    if ((block_size == -1) && (data_size = *data_ptr, data_size != 0)) {\n      if ((data_size == 0x1d) || (data_size == 0x16)) {\n        *data_ptr = data_offset;\n        return 0;\n      }\n      *(ushort *)(header_ptr + 3) = *(ushort *)(header_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    header_flags = *(ushort *)(header_ptr + 3);\n    decoder_func = (code *)header_ptr[10];\n  }\n  else {\n    block_size = header_ptr[0x14];\n  }\n  if (((int)(header_flags << 0x1d) < 0) && (block_size = block_size - header_ptr[1], header_ptr[0xc] != 0)) {\n    block_size = block_size - header_ptr[0xf];\n  }\n  block_size = (*decoder_func)(data_ptr,header_ptr[7],block_size,0);\n  if (block_size == -1) {\n    data_size = *data_ptr;\n    if (data_size != 0) {\n      if ((data_size != 0x1d) && (data_size != 0x16)) {\n        *(ushort *)(header_ptr + 3) = *(ushort *)(header_ptr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header_ptr + 3) = *(ushort *)(header_ptr + 3) & 0xf7ff;\n      *header_ptr = header_ptr[4];\n      header_ptr[1] = 0;\n      goto LAB_00083774;\n    }\n    header_flags = *(ushort *)(header_ptr + 3) & 0xf7ff;\n    header_ptr[1] = 0;\n    *(ushort *)(header_ptr + 3) = header_flags;\n    *header_ptr = header_ptr[4];\n  }\n  else {\n    header_flags = *(ushort *)(header_ptr + 3) & 0xf7ff;\n    *header_ptr = header_ptr[4];\n    *(ushort *)(header_ptr + 3) = header_flags;\n    header_ptr[1] = 0;\n  }\n  if ((int)((uint)header_flags << 0x13) < 0) {\n    header_ptr[0x14] = block_size;\n  }\n  block_ptr = (int *)header_ptr[0xc];\n  *data_ptr = data_offset;\n  if (block_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (block_ptr != header_ptr + 0x10) {\n    allocate_memory_block(data_ptr);\n  }\n  header_ptr[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000842a4",
                "FUN_00083ca8",
                "FUN_000834f0",
                "FUN_00084484"
            ],
            "imported": true,
            "current_name": "decode_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "do_nothing_00080f08": "enable_system_checks",
                "FUN_000815ec": "initialize_and_run_system_checks_000815ec",
                "do_nothing_000815e8": "do_nothing",
                "run_system_checks_000801e0": "system_check_enabled",
                "check_differences_and_do_nothing_00080970": "check_for_differences_and_do_nothing",
                "processControlMode_00080250": "process_control_mode"
            },
            "code": "void initialize_and_run_system_checks_000815ec(void)\n{\n  set_data_at_address();\n  initialize_and_update_data();\n  do_nothing();\n  enable_system_checks(true);\n  while( true ) {\n    while (system_check_enabled()) {\n      process_control_mode();\n    }\n    check_for_differences_and_do_nothing();\n  }\n}",
            "called": [
                "FUN_00080f08",
                "FUN_000815e8",
                "FUN_000801e0",
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_00080970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": true,
            "current_name": "initialize_and_run_system_checks_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "param_1": "flags",
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void update_flags_00080d3e(uint32_t *flags, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n    uint32_t mask1 = (param_2 & 0xf) << 0x18;\n    uint32_t mask2 = (param_4 & 3) << 0x1c;\n    *flags = *flags | param_3 | mask1 | mask2;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "update_flags_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "param_1": "buffer",
                "FUN_00081438": "write_to_buffer_with_param_00081438",
                "param_2": "param",
                "PTR_PTR_write_to_buffer_000812b8_1_00081458": "write_to_buffer_ptr",
                "initialize_params_00081348": "initialize_buffer_params"
            },
            "code": "undefined4 * write_to_buffer_with_param_00081438(undefined4 *buffer, undefined4 param)\n{\n  initialize_buffer_params();\n  *buffer = PTR_PTR_write_to_buffer_000812b8_1_00081458;\n  buffer[9] = param;\n  return buffer;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": true,
            "current_name": "write_to_buffer_with_param_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "param_1": "base_address",
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n  *(int *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "checkMemory_00084018": "check_memory",
                "iVar2": "temp2",
                "uVar1": "temp1",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "data_out",
                "allocate_memory_block_00083b10": "allocate_memory_block",
                "param_2": "data_in",
                "FUN_0008356c": "handle_data_0008356c",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "DAT_0008362c": "data_pointer"
            },
            "code": "int handle_data_0008356c(uint32_t* data_out, int* data_in) {\n  uint32_t uVar1;\n  int iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  if ((*DAT_0008362c != 0) && (*(int *)(*DAT_0008362c + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  uVar4 = *(uint16_t *)(data_in + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int32_t)(uVar3 << 0x1c) < 0) {\n    iVar2 = data_in[4];\n  }\n  else {\n    if (-1 < (int32_t)(uVar3 << 0x1b)) {\n      *data_out = 9;\n      *(uint16_t *)(data_in + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int32_t)(uVar3 << 0x1d) < 0) {\n      if ((int *)data_in[0xc] != (int *)0x0) {\n        if ((int *)data_in[0xc] != data_in + 0x10) {\n          allocate_memory_block(data_out);\n          uVar4 = *(uint16_t *)(data_in + 3);\n        }\n        data_in[0xc] = 0;\n      }\n      iVar2 = data_in[4];\n      uVar4 = uVar4 & 0xffdb;\n      *data_in = iVar2;\n      data_in[1] = 0;\n    }\n    else {\n      iVar2 = data_in[4];\n    }\n    *(uint16_t *)(data_in + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    check_memory(data_out, data_in);\n    uVar3 = (uint32_t)*(uint16_t *)(data_in + 3);\n    iVar2 = data_in[4];\n  }\n  uint32_t uVar5 = uVar3 & 1;\n  if (uVar5 == 0) {\n    if (-1 < (int32_t)(uVar3 << 0x1e)) {\n      uVar5 = data_in[5];\n    }\n    data_in[2] = uVar5;\n  }\n  else {\n    data_in[6] = -data_in[5];\n    data_in[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int32_t)((uint32_t)*(uint16_t *)(data_in + 3) << 0x18) < 0)) {\n    *(uint16_t *)(data_in + 3) = *(uint16_t *)(data_in + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00084018",
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_000842a4",
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "handle_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "iVar2": "control_ptr",
                "DAT_00080c1c": "control_flag_ptr",
                "DAT_00080c0c": "control_value_2",
                "DAT_00080c18": "control_flag_value",
                "DAT_00080c08": "control_array",
                "puVar1": "data_ptr",
                "FUN_00080b98": "initialize_data_00080b98",
                "DAT_00080c10": "control_value_1",
                "DAT_00080c14": "control_value_3",
                "DAT_00080c04": "data_array"
            },
            "code": "void initialize_data_00080b98(void)\n{\n  uint32_t *data_ptr = DAT_00080c04;\n  *data_ptr = 0x400;\n  data_ptr[0x80] = 0x400;\n  int32_t *control_ptr = DAT_00080c08;\n  if (-1 < *(int32_t *)(DAT_00080c08 + 0x20) << 7) {\n    *(uint32_t *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n    while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(DAT_00080c08 + 0x20) = DAT_00080c0c;\n  while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0xf);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = *(uint32_t *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n  while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0x1e);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x11;\n  while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x12;\n  while (-1 < *(int32_t *)(DAT_00080c08 + 0x68) << 0x1c);\n  *DAT_00080c1c = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "initialize_data_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "processDataAndReturnResult_000810d8": "processDataAndReturnResult",
                "iVar1": "dataProcessed1",
                "process_data_000810a6": "processInitialData",
                "iVar2": "dataProcessed2",
                "param_1": "inputData",
                "FUN_000810e8": "calculateResult_000810e8"
            },
            "code": "int calculateResult_000810e8(int inputData){\n  int dataProcessed1 = processInitialData();\n  int dataProcessed2 = processDataAndReturnResult(inputData);\n  return dataProcessed2 + dataProcessed1;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "calculateResult_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "param_1": "array_start_index",
                "param_2": "bit_position",
                "FUN_00080d58": "set_bit_at_position_00080d58"
            },
            "code": "void set_bit_at_position_00080d58(int array_start_index, uint8_t bit_position) {\n  uint8_t bit_mask = 1 << (bit_position & 0xff);\n  int* array_index = (int*)(array_start_index + 0x14);\n  *array_index = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": true,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clear_memory_if_not_null_00081480",
                "allocate_memory_00081800": "allocate_memory",
                "param_1": "ptr_param1",
                "*param_1": "*ptr_param1"
            },
            "code": "void clear_memory_if_not_null_00081480(int *ptr_param1)\n{\n  if (*ptr_param1 != 0) {\n    allocate_memory();\n  }\n  *ptr_param1 = 0;\n  ptr_param1[2] = 0;\n  ptr_param1[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": true,
            "current_name": "clear_memory_if_not_null_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "call_function_with_params_00081f9c",
                "param_1": "parameter_1",
                "FUNC_00081fac": "function_pointer",
                "*DAT_00081fa8": "function_pointer",
                "param_2": "parameter_2"
            },
            "code": "void call_function_with_params_00081f9c(void* *DAT_00081fa8, int parameter_1, int parameter_2)\n{\n  *DAT_00081fa8(parameter_1, parameter_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": true,
            "current_name": "call_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_2",
                "*(int *)(param_1 + 0x10)": "ptr_1",
                "param_1": "input_value",
                "FUN_00081248": "calculate_difference_00081248",
                "result": "result",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_3"
            },
            "code": "int calculate_difference_00081248(int input_value)\n{\n    int* ptr_1 = (int*)(input_value + 0x10);\n    int* ptr_2 = (int*)(*ptr_1 + 0x80);\n    int* ptr_3 = (int*)(*ptr_1 + 0x84);\n    int result = *ptr_2 - *ptr_3;\n    return result & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "*DAT_0008180c": "memory_block",
                "param_1": "size",
                "FUN_00081800": "allocate_memory_00081800",
                "allocate_memory_block_00083b10": "allocate_memory_block"
            },
            "code": "void allocate_memory_00081800(void **DAT_0008180c, int size)\n{\n  allocate_*DAT_0008180c(*DAT_0008180c, size);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": true,
            "current_name": "allocate_memory_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "uVar1": "product_low",
                "param_1": "minuend",
                "lVar2": "product",
                "param_2": "subtrahend",
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference"
            },
            "code": "void calculate_difference_0008458c(uint minuend, int subtrahend, uint32_t multiplicand_low, uint32_t multiplicand_high, int *difference)\n{\n  uint32_t product = (uint64_t)multiplicand_low * multiplicand_high;\n  uint32_t product_low = (uint32_t)product;\n  uint32_t product_high = (uint32_t)(product >> 32);\n  *difference = minuend - product_low;\n  difference[1] = subtrahend - product_high - (minuend < product_low);\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": true,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "iVar2": "result",
                "pcVar3": "function_pointer",
                "uVar1": "data",
                "param_1": "output",
                "param_2": "input_len",
                "param_3": "input_data",
                "param_4": "status",
                "FUN_0008434c": "process_data_0008434c",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *output, int input_len, undefined4 input_data, undefined4 *status) {\n  undefined4 data;\n  int result;\n  code *function_pointer;\n  undefined stack_buffer[12];\n  \n  if (input_len == 0) {\n    function_pointer = *DATA;\n    data = get_data();\n    result = (*function_pointer)(output, stack_buffer, 0, data, status);\n  }\n  else {\n    function_pointer = *DATA;\n    data = get_data();\n    result = (*function_pointer)(output, input_len, input_data, data, status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *output = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": true,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "local_c": "masked_mask",
                "uStack_8": "destination_pointer",
                "param_1": "string",
                "param_2": "mask",
                "param_3": "destination",
                "FUN_0008159e": "update_string_with_mask_0008159e",
                "update_string_00081570": "update_string"
            },
            "code": "void update_string_with_mask_0008159e(uint8_t* string, uint32_t mask, uint8_t length, uint8_t offset, uint8_t* destination){\n  uint32_t masked_mask = mask & 0xffff00ff;\n  uint8_t* destination_pointer = destination;\n  update_string(string, &masked_mask, length, offset, destination_pointer);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "update_string_with_mask_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "bVar1": "channel_value",
                "puVar2": "channel_data_ptr",
                "iVar6": "index",
                "*param_1": "*channel_id",
                "param_2": "param_2",
                "uVar3": "uVar3",
                "uVar5": "uVar5",
                "uVar4": "channel_index",
                "uVar7": "row_index",
                "FUN_000806a0": "update_channel_data_000806a0"
            },
            "code": "byte update_channel_data_000806a0(byte *channel_id, undefined4 param_2)\n{\n  byte channel_value;\n  undefined *channel_data_ptr;\n  undefined4 uVar3;\n  uint channel_index;\n  undefined4 uVar5;\n  int index;\n  uint row_index;\n  \n  if (*channel_id > 59) goto LAB_00080660;\n  update_data_00080f0c(param_2,1,544,*channel_id,2400);\n  channel_data_ptr = PTR_DAT_00080694;\n  row_index = (uint)*channel_id;\n  channel_value = PTR_DAT_00080694[row_index * 8];\n  channel_id[2] = 0;\n  channel_data_ptr[row_index * 8] = channel_value & 0xc0 | (byte)param_2 & 0x3f;\n  channel_id[1] = 0;\n  index = 0;\n  do {\n    if ((int)((uint)(byte)channel_data_ptr[(index + row_index / 12 * 12) * 8] << 0x19) < 0) goto LAB_00080652;\n    index = index + 1;\n  } while (index != 12);\n  uVar3 = DAT_00080698;\n  if (row_index / 12 == 0) {\n    uVar5 = 30;\nLAB_0008064c:\n    initialize_tc_channel_000803fc(uVar3,row_index / 12,uVar5,uVar5);\n  }\n  else {\n    if (row_index / 12 == 1) {\n      uVar5 = 31;\n      goto LAB_0008064c;\n    }\n    if (row_index / 12 == 2) {\n      uVar5 = 32;\n      goto LAB_0008064c;\n    }\n    uVar3 = DAT_0008069c;\n    if (row_index / 12 == 3) {\n      row_index = 2;\n      uVar5 = 29;\n      goto LAB_0008064c;\n    }\n    if (row_index / 12 == 4) {\n      row_index = 0;\n      uVar5 = 27;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  channel_data_ptr[(uint)*channel_id * 8] = channel_data_ptr[(uint)*channel_id * 8] | 0x40;\nLAB_00080660:\n  return *channel_id;\n}",
            "called": [
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "update_channel_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "allocate_memory_00081800": "allocate_memory",
                "PTR_DAT_0008155c": "PTR",
                "copy_string_000825cc": "copy_string",
                "param_1": "source",
                "param_2": "destination",
                "FUN_0008151c": "copy_data_0008151c"
            },
            "code": "void copy_data_0008151c(int *source, int *destination)\n{\n  if (*source != 0) {\n    if ((*destination != 0) && (PTR_DAT_0008155c_DAT_0008155c != (undefined *)0x0)) {\n      if ((uint)destination[2] <= (uint)source[1]) {\n        copy_string();\n        destination[2] = source[2];\n        return;\n      }\n    }\n    allocate_memory();\n  }\n  *destination = *source;\n  destination[1] = source[1];\n  destination[2] = source[2];\n  *source = 0;\n  source[1] = 0;\n  destination[2] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": true,
            "current_name": "copy_data_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "uVar1": "var1",
                "puVar3": "var3",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar2": "var2",
                "uVar4": "var4",
                "FUN_000816f8": "process_data_and_call_function_000816f8"
            },
            "code": "void process_data_and_call_function_000816f8(undefined4 arg1, undefined4 arg2, undefined *data, undefined4 arg4)\n{\n  undefined4 var1 = *(undefined4 *)(*DAT_00081724 + 0xc);\n  undefined4 var2 = arg4;\n  undefined *var3 = PTR_s___function__00081728;\n  if (data == (undefined *)0x0) goto LAB_0008171c;\n  do {\n    arg4 = arg1;\n    process_data_and_call_function_000816f8_00081750(var1, PTR_s_assertion___s__failed__file___s__0008172c, var2, arg1, arg2, var3, data);\n    undefined8 var4 = process_and_exit_on_error_000836ec();\n    arg2 = (undefined4)((ulonglong)var4 >> 0x20);\n    var1 = (undefined4)var4;\nLAB_0008171c:\n    data = PTR_s__00081730;\n    var2 = arg4;\n    var3 = PTR_s__00081730;\n  } while(true);\n}",
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "process_data_and_call_function_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "iVar2": "temp_var",
                "FUN_00084484": "decode_and_process_data_00084484",
                "iVar3": "data_struct_ptr",
                "uVar1": "result",
                "param_1": "input_data_ptr"
            },
            "code": "uint32_t decode_and_process_data_00084484(uint32_t input_data_ptr)\n{\n  uint32_t result = 0;\n  uint32_t data_struct_ptr = *PTR_DAT_00084490;\n  if (input_data_ptr != 0)\n  {\n    if ((data_struct_ptr != 0) && (*(uint32_t *)(data_struct_ptr + 0x38) == 0))\n    {\n      initialize_data_structures();\n    }\n    if (*(uint16_t *)(input_data_ptr + 0xc) != 0)\n    {\n      result = decode_data(data_struct_ptr, input_data_ptr);\n      if ((*(void (**)(void))(input_data_ptr + 0x2c) != (void (*)(void))0x0) &&\n         (iVar2 = (**(void (**)(void))(input_data_ptr + 0x2c))(data_struct_ptr, *(uint32_t *)(input_data_ptr + 0x1c)), iVar2 < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int32_t)((uint32_t)*(uint16_t *)(input_data_ptr + 0xc) << 0x18) < 0)\n      {\n        allocate_memory_block(data_struct_ptr, *(uint32_t *)(input_data_ptr + 0x10));\n      }\n      if (*(uint32_t *)(input_data_ptr + 0x30) != 0)\n      {\n        if (*(uint32_t *)(input_data_ptr + 0x30) != input_data_ptr + 0x40)\n        {\n          allocate_memory_block(data_struct_ptr);\n        }\n        *(uint32_t *)(input_data_ptr + 0x30) = 0;\n      }\n      if (*(uint32_t *)(input_data_ptr + 0x44) != 0)\n      {\n        allocate_memory_block(data_struct_ptr);\n        *(uint32_t *)(input_data_ptr + 0x44) = 0;\n      }\n      do_nothing();\n      *(uint16_t *)(input_data_ptr + 0xc) = 0;\n      do_nothing();\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00083888",
                "FUN_0008397c",
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": true,
            "current_name": "decode_and_process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "uVar1": "next_index",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_buffer_000811ca(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": true,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "calculate_new_values_and_update_data_00080164",
                "param_1": "value1",
                "PTR_DAT_00080180": "data_pointer2",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "PTR_DAT_0008017c": "data_pointer1",
                "calculate_new_value_000806f8": "calculate_new_value"
            },
            "code": "void calculate_new_values_and_update_data_00080164(int value1, int value2, int value3, int value4) {\n  calculate_new_value(PTR_DAT_0008017c, value1);\n  calculate_new_value(PTR_DAT_00080180, value2, value3, value4);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000801e0",
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "calculate_new_values_and_update_data_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "sVar1": "inputLength",
                "iVar3": "reversedStringResult",
                "FUN_00084244": "reverseAndReturnIfError_00084244",
                "puVar2": "stringToReverse",
                "param_1": "output",
                "unaff_r5": "unaff_r5",
                "unaff_r6": "unaff_r6",
                "unaff_r4": "unaff_r4",
                "param_2": "input",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar4": "firstTwoBytes",
                "in_lr": "in_lr"
            },
            "code": "void reverseAndReturnIfError_00084244(int *output, int input, undefined4 param_3, undefined4 param_4) {\n  short inputLength;\n  undefined *stringToReverse;\n  int reversedStringResult;\n  ushort firstTwoBytes;\n  ushort mask = 0xefff;\n\n  firstTwoBytes = *(ushort *)(input + 0xc);\n  if ((int)((uint)firstTwoBytes << 0x17) < 0) {\n    returnIfError_000844e0(output, (int)*(short *)(input + 0xe), 0, 2);\n    firstTwoBytes = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = firstTwoBytes & mask;\n  stringToReverse = PTR_DAT_000843dc;\n  inputLength = *(short *)(input + 0xe);\n  *(undefined4 *)PTR_DAT_000843dc = 0;\n  reversedStringResult = reverse_string_00080ec8((int)inputLength, param_3, param_4, param_4, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((reversedStringResult == -1) && (*(int *)stringToReverse != 0)) {\n    *output = *(int *)stringToReverse;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": true,
            "current_name": "reverseAndReturnIfError_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "iVar1": "result",
                "FUN_00081496": "check_and_update_00081496",
                "param_1": "array",
                "param_2": "size"
            },
            "code": "int check_and_update_00081496(int *array,int size,undefined4 param_3,undefined4 param_4)\n{\n  int result;\n  result = call_function_with_params(*array, size + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *array = result;\n    array[1] = size;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": true,
            "current_name": "check_and_update_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_data_00084004",
                "DAT_00084008": "data_value"
            },
            "code": "int get_data_00084004(void)\n{\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": true,
            "current_name": "get_data_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "iVar3": "bits_set",
                "iVar5": "data_ptr_index",
                "puVar2": "mask_ptr",
                "FUN_00081014": "updateData_00081014",
                "param_1": "data_index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr",
                "uVar4": "data_ptr_value"
            },
            "code": "void updateData_00081014(int data_index, int value, undefined4 param_3)\n{\n  undefined *data_ptr = PTR_DAT_0008107c;\n  undefined *mask_ptr = PTR_DAT_00081080;\n  if (data_ptr[data_index * 0x1c + 0xc] != '\\0') {\n    if ((mask_ptr[data_index] & 0xf) == 5) {\n      update_data_00080f0c(data_index, 1, param_3, 5, data_index, value, param_3);\n    }\n    mask_ptr[data_index] = mask_ptr[data_index] & 0xf | (byte)(value << 4);\n    int data_ptr_index = *(int *)(data_ptr + data_index * 0x1c);\n    undefined4 data_ptr_value = *(undefined4 *)(data_ptr + data_index * 0x1c + 4);\n    int bits_set = check_bits_set_in_two_params_00080a94(data_ptr_index, data_ptr_value);\n    if (bits_set == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data_ptr_index + 100) = data_ptr_value;\n        return;\n      }\n      *(undefined4 *)(data_ptr_index + 0x60) = data_ptr_value;\n      return;\n    }\n    set_values_at_indices_00080a0a(data_ptr_index, data_ptr_value, value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080f0c",
                "FUN_00080a0a",
                "FUN_00080a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "updateData_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "insert_data_into_table_000816ec",
                "param_1": "data",
                "param_2": "index",
                "param_3": "flag",
                "puVar1": "table_ptr",
                "uVar2": "table_size",
                "uVar4": "bit_mask"
            },
            "code": "void insert_data_into_table_000816ec(int data, int index, int flag) {\n  int *table_ptr = *(int **)table_data_ptr;\n  if (table_ptr == NULL) {\n    table_ptr = (int *)(*(int *)table_data_ptr + 0x14c);\n    *(int **)table_data_ptr = table_ptr;\n  }\n  uint32_t table_size = table_ptr[1];\n  if (table_size > 31) {\n    if ((DAT_000836d4 == 0) || ((table_ptr = (int *)allocate_memory(400)) == NULL)) {\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    *table_ptr = *(int **)table_data_ptr;\n    table_ptr[1] = 0;\n    table_size = 0;\n    *(int **)table_data_ptr = table_ptr;\n    table_ptr[0x62] = 0;\n    table_ptr[99] = 0;\n  }\n  uint32_t bit_mask = 1 << (table_size & 0xff);\n  table_ptr[table_size + 0x22] = data;\n  table_ptr[0x62] |= bit_mask;\n  table_ptr[table_size + 0x42] = flag;\n  table_ptr[99] |= bit_mask;\n  table_ptr[1] = table_size + 1;\n  table_ptr[table_size + 2] = index;\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": true,
            "current_name": "insert_data_into_table_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = handle_data_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            copy_memory_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            copy_memory_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = decode_data_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_character_in_array_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            copy_memory_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = decode_data_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            copy_memory_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = decode_data_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081e34",
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00081d48",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": true,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_sum_and_set_to_param_if_previous_result_exists_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "iVar1": "checkAndUpdateResult",
                "param_1": "ptr_param1",
                "FUN_000814ae": "checkAndUpdateIfZero_000814ae",
                "*param_1": "valueAtPtrParam1",
                "param_2": "param2",
                "(uint)param_1[1]": "valueAtPtrParam1PlusOne"
            },
            "code": "int checkAndUpdateIfZero_000814ae(int *ptr_param1, uint param2)\n{\n  int result = 1;\n  int valueAtPtrParam1 = *ptr_param1;\n  uint valueAtPtrParam1PlusOne = (uint) ptr_param1[1];\n\n  if (valueAtPtrParam1 == 0 || valueAtPtrParam1PlusOne < param2) {\n    int checkAndUpdateResult = checkAndUpdate_00081496(ptr_param1);\n    if (checkAndUpdateResult == 0) {\n      result = 0;\n    }\n    else if (ptr_param1[2] == 0) {\n      *(undefined *)*ptr_param1 = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": true,
            "current_name": "checkAndUpdateIfZero_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "ppcVar4": "function_pointer",
                "iVar3": "i",
                "iVar5": "num_functions",
                "puVar2": "end_pointer",
                "FUN_00081778": "execute_functions_in_range_00081778",
                "puVar1": "start_pointer"
            },
            "code": "void execute_functions_in_range_00081778(void)\n{\n  code **function_pointer;\n  int num_functions;\n  int i;\n\n  num_functions = (int)PTR_DAT_000817b8 - (int)PTR_DAT_000817bc >> 2;\n  if (num_functions != 0) {\n    function_pointer = (code **)(PTR_DAT_000817bc + -4);\n    i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n  undefined *end_pointer = PTR_DAT_000817c4;\n  undefined *start_pointer = PTR_LAB_000817c0;\n  do_nothing_00085844();\n  num_functions = (int)start_pointer - (int)end_pointer >> 2;\n  if (num_functions != 0) {\n    function_pointer = (code **)(end_pointer + -4);\n    i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "execute_functions_in_range_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "PTR_DAT_0008010c": "is_ptr_dat_null",
                "DAT_00080114": "value",
                "DAT_00080110": "is_dat_not_zero",
                "param_1": "value",
                "FUN_000800f4": "check_and_get_value_if_not_null_000800f4"
            },
            "code": "undefined4 check_and_get_value_if_not_null_000800f4(undefined4 DAT_00080114)\\n{\\n  bool PTR_DAT_0008010c = (*PTR_DAT_0008010c == \"\\0\");\\n  bool DAT_00080110 = (DAT_00080110 != 0);\\n  if (PTR_DAT_0008010c) {\\n    if (DAT_00080110) {\\n      DAT_00080114 = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return DAT_00080114;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": true,
            "current_name": "check_and_get_value_if_not_null_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "process_data_000810a6": "process_data",
                "FUN_000810c4": "process_data_and_return_000810c4"
            },
            "code": "void process_data_and_return_000810c4(void)\n{\n  process_data();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "process_data_and_return_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "param_1": "address",
                "param_2": "value",
                "*(uint *)(param_1 + 4)": "current_value",
                "param_3": "bit",
                "FUN_00080d30": "update_value_at_address_00080d30"
            },
            "code": "void update_value_at_address_00080d30(uint32_t* address, uint32_t value, uint32_t bit) {\n  uint32_t* current_value = address;\n  *current_value = value | *current_value | (bit & 1) << 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "update_value_at_address_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "uVar1": "dividend",
                "param_1": "result",
                "param_2": "input",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "index",
                "FUN_00080c98": "find_value_00080c98",
                "local_58": "local_values"
            },
            "code": "uint32_t find_value_00080c98(uint32_t *result, uint32_t input, int param_3, int param_4){\n    uint32_t local_values[16];\n    local_values[0] = *(uint32_t *)PTR_DAT_00080d28;\n    local_values[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n    local_values[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n    local_values[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n    local_values[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n    local_values[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n    local_values[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n    local_values[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n    local_values[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n    local_values[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n    local_values[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n    local_values[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n    local_values[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n    local_values[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n    local_values[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n    local_values[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n    *result = 1;\n    result[1] = 0;\n    result[0x48] = 0x202;\n    result[0x41] = 0;\n    result[0x45] = 0;\n    uint32_t uVar1 = input / (uint32_t)(param_3 * 2);\n    if (input == param_3 * 2 * uVar1) {\n        uVar1 = uVar1 - 1;\n    }\n    uint32_t uVar2 = 0;\n    do {\n        if ((uint32_t)(param_4 * (int)(((uint64_t)input / (uint64_t)((uVar1 + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_values[uVar2]) {\n            result[1] = (uVar2 & 0xf) << 0x10 | (uVar1 & 0xff) << 8 | result[1];\n            return 0;\n        }\n        uVar2 = uVar2 + 1;\n    } while (uVar2 != 0x10);\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "find_value_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_with_status_message",
                "FUN_00080eec": "exit_with_status_00080eec"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n  process_data_and_call_function_000817c8(PTR_s_Exiting_with_status__d__00080ef8, status_code, param_2, param_3, param_4);\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "iVar1": "current_value",
                "param_1": "input_array",
                "FUN_000811e8": "calculate_value_000811e8"
            },
            "code": "int calculate_value_000811e8(int *input_array)\n{\n  int current_value = get_current_value();\n  input_array[3] = current_value;\n  do {\n    current_value = (**(code **)(*input_array + 0xc))(input_array);\n    if (current_value >= 0) {\n      return current_value;\n    }\n    current_value = get_current_value();\n  } while ((uint)(current_value - input_array[3]) < (uint)input_array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "calculate_value_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_new_value_000806f8",
                "PTR_DAT_000806f4": "PTR_DAT",
                "DAT_000806ec": "DAT_1",
                "uVar1": "new_length",
                "calculate_new_value_0008145c": "calculate_new_value_helper",
                "param_1": "data",
                "param_2": "length",
                "DAT_000806f0": "DAT_2"
            },
            "code": "void calculate_new_value_000806f8(uint8_t *data, uint length) {\n  uint new_length;\n  if (length < 546) {\n    new_length = length;\n    if (179 < length) {\n      new_length = 180;\n    }\n    new_length = calculate_new_value_000806f8_helper(new_length & ~((int)new_length >> 0x1f), 0, 180, (0x88 - (char)data[1]) * 4, (600 - (char)data[2]) * 4, length);\n  }\n  if (*data < 60) {\n    uint temp = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(length,temp)) && (temp = (600 - (char)data[2]) * 4, (int)length <= (int)temp)) {\n      temp = length;\n    }\n    *(uint *)(PTR_DAT_000806f4_000806f4 + (uint)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (temp - 2) >> 5;\n  }\n}\n",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": true,
            "current_name": "calculate_new_value_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": true,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_base_and_process_data_000810fc",
                "pcVar3": "end_of_conversion",
                "pcVar1": "current_char",
                "param_1": "data",
                "cVar4": "converted_char",
                "local_15": "converted_string",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "code": "void convert_base_and_process_data_000810fc(void *data,uint number,uint base)\n{\n  char *current_char;\n  uint quotient;\n  char *end_of_conversion;\n  char converted_char;\n  uint remainder;\n  char converted_string [5];\n  \n  converted_string[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_string;\n  do {\n    end_of_conversion = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    converted_char = (char)remainder;\n    if (remainder < 10) {\n      converted_char = converted_char + '0';\n    }\n    else {\n      converted_char = converted_char + '7';\n    }\n    *end_of_conversion = converted_char;\n    number = quotient;\n    current_char = end_of_conversion + -1;\n  } while (quotient != 0);\n  process_data_000810a6(data,end_of_conversion);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": true,
            "current_name": "convert_base_and_process_data_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "PTR_DAT_000803d4": "value1_buffer",
                "do_nothing_00080f08": "wait",
                "FUN_00080250": "processControlMode_00080250",
                "iVar4": "difference",
                "calculate_new_value_0008145c": "calculateNewValue",
                "thunk_convert_and_process_data_0008113a": "convertAndProcessData",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "entered_autonomous_control_mode",
                "PTR_DAT_000803d8": "value2_buffer",
                "PTR_DAT_000803bc": "mode_time",
                "compare_and_copy_00081560": "compareAndCopy",
                "PTR_s_error_000803c4": "error",
                "allocate_and_return_memory_pointer_00081472": "allocateAndReturnMemoryPointer",
                "check_byte_000815b8": "checkByte",
                "initializeMemoryAndReadString_00081214": "initializeMemoryAndReadString",
                "PTR_DAT_000803dc": "data_output",
                "uVar3": "value1",
                "uVar2": "time_elapsed",
                "updateData_00081014": "updateData",
                "calculate_new_values_and_update_data_00080164": "calculateNewValuesAndUpdateData",
                "calculate_new_value_000806f8": "calculateNewValue",
                "PTR_DAT_000803c4": "result_buffer",
                "PTR_DAT_000803c0": "mode",
                "calculate_time_elapsed_in_milliseconds_00081624": "calculateTimeElapsed",
                "calculate_difference_00081248": "calculateDifference",
                "process_data_and_return_000810c4": "processAndReturnData",
                "PTR_DAT_000803e4": "steering_angle",
                "calculateResult_000810e8": "calculateResult",
                "parse_integer_000815de": "parseInteger",
                "auStack_1c": "buffer",
                "puVar5": "string2",
                "processDataAndConvert_0008117a_0008117a": "processDataAndConvert",
                "PTR_DAT_000803c8": "data_buffer",
                "get_byte_from_buffer_00081276": "getByteFromBuffer",
                "PTR_s_motor_000803f8": "motor",
                "PTR_s_steer_000803f4": "steer",
                "PTR_DAT_000803cc": "is_manual_mode",
                "PTR_s_Entered_manual_control_mode__000803d0": "entered_manual_control_mode",
                "puVar1": "string1",
                "PTR_DAT_000803e0": "motor_speed"
            },
            "code": "void processControlMode_00080250(void)\n{\n  int time_elapsed;\n  int difference;\n  int value1;\n  int value2;\n  int PTR_DAT_000803c0;\n  int is_manual;\n  char* string1;\n  char* string2;\n  char buffer[12];\n  time_elapsed = calculateTimeElapsed(4,1,20000);\n  *PTR_DAT_000803bc = time_elapsed;\n  wait(10);\n  *PTR_DAT_000803c0 ^= 1;\n  updateData(0xd);\n  is_manual = *PTR_DAT_000803cc;\n  if (*PTR_DAT_000803bc < 1601) {\n    difference = calculateDifference(PTR_PTR_DAT_000803c8);\n    if (difference - 901U < 299) {\n      if (is_manual != 0) {\n        calculateNewValuesAndUpdateData();\n        calculateResult(PTR_PTR_DAT_000803c4,PTR_s_Entered_manual_control_PTR_DAT_000803c0__000803d0);\n        *PTR_DAT_000803cc = 0;\n      }\n      wait(10);\n      time_elapsed = calculateTimeElapsed(3,1,20000);\n      value1 = calculateNewValue(time_elapsed,1000,2000,0x28,0x96);\n      *PTR_DAT_000803d4 = value1;\n      time_elapsed = calculateNewValue(time_elapsed,1000,2000,0x28,0x96);\n      *PTR_DAT_000803d8 = time_elapsed;\n      while (difference = calculateDifference(PTR_PTR_DAT_000803c8), difference > 0) {\n        getByteFromBuffer(PTR_PTR_DAT_000803c8);\n        convertAndProcessData(PTR_PTR_DAT_000803c8,*PTR_DAT_000803d4,10);\n        processAndReturnData(PTR_PTR_DAT_000803c8,PTR_PTR_DAT_000803dc);\n        processDataAndConvert(PTR_PTR_DAT_000803c8,*PTR_DAT_000803d8,10);\n      }\n      calculateNewValue(PTR_PTR_DAT_000803e0,PTR_DAT_000803d8);\n      calculateNewValue(PTR_PTR_DAT_000803e4,PTR_DAT_000803d4);\n    }\n    else {\n      if (is_manual == 0) {\n        calculateNewValuesAndUpdateData();\n        calculateResult(PTR_PTR_DAT_000803c4,PTR_s_Entered_autonomous_control_PTR_DAT_000803c0__000803e8);\n      }\n      *PTR_DAT_000803cc = 1;\n      while (difference = calculateDifference(PTR_PTR_DAT_000803c8), difference > 0) {\n        initializeMemoryAndReadString(buffer,PTR_PTR_DAT_000803c8,0x2c);\n        compareAndCopy(PTR_PTR_s_motor_000803f8_type,buffer);\n        allocateAndReturnMemoryPointer(buffer);\n        initializeMemoryAndReadString(buffer,PTR_PTR_DAT_000803c8,10);\n        compareAndCopy(PTR_PTR_s_motor_000803f8_serial,buffer);\n        allocateAndReturnMemoryPointer(buffer);\n        getByteFromBuffer(PTR_PTR_DAT_000803c8);\n        if (checkByte(PTR_PTR_s_motor_000803f8_type,PTR_s_PTR_s_steer_000803f4_000803f4) != 0) {\n          value2 = parseInteger(PTR_PTR_s_motor_000803f8_serial);\n          calculateNewValue(PTR_PTR_DAT_000803e0,value2);\n        }\n        else if (checkByte(PTR_PTR_s_motor_000803f8_type,PTR_s_PTR_s_motor_000803f8_000803f8) != 0) {\n          value1 = parseInteger(PTR_PTR_s_motor_000803f8_serial);\n          calculateNewValue(PTR_PTR_DAT_000803e4,value1);\n        }\n      }\n    }\n  }\n  else {\n    calculateNewValuesAndUpdateData();\n    calculateResult(PTR_PTR_DAT_000803c4,PTR_s_PTR_s_error_000803c4_000803c4);\n  }\n}",
            "called": [
                "FUN_00080f08",
                "FUN_0008117a",
                "FUN_000815de",
                "FUN_00081472",
                "FUN_0008145c",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081248",
                "FUN_000815b8",
                "FUN_00081560",
                "FUN_00081214",
                "FUN_000810e8",
                "FUN_00081014",
                "FUN_000810c4",
                "FUN_00081276",
                "FUN_00081624",
                "thunk_FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "processControlMode_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "object_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_00080d6a(int object_address, int parameter_value) {\n  *(int *)(object_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "set_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "iVar2": "integer_variable",
                "FUN_000813dc": "initialize_data_structures_000813dc",
                "puVar3": "undefined_pointer",
                "param_1": "data_structure_address",
                "param_2": "divisor",
                "puVar1": "data_structure_pointer"
            },
            "code": "void initialize_data_structures_000813dc(int data_structure_address, uint divisor) {\n  uint *data_structure_pointer;\n  int integer_variable;\n  undefined4 *undefined_pointer;\n\n  check_character(*(undefined4 *)(data_structure_address + 0x20));\n  undefined_pointer = *(undefined4 **)(data_structure_address + 0x18);\n  undefined_pointer[0x48] = 0x202;\n  *undefined_pointer = 0xac;\n  data_structure_pointer = PTR_DAT_000813d4;\n  undefined_pointer[1] = 0x800;\n  undefined_pointer[8] = *data_structure_pointer / divisor >> 4;\n  undefined_pointer[3] = 0xffffffff;\n  undefined_pointer[2] = 0x61;\n  *(int *)(PTR_DAT_000813d8 + ((uint)(int)(char)*(byte *)(data_structure_address + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(data_structure_address + 0x1c) & 0x1f);\n  integer_variable = *(int *)(data_structure_address + 0x10);\n  *(undefined4 *)(integer_variable + 0x84) = 0;\n  *(undefined4 *)(integer_variable + 0x80) = 0;\n  integer_variable = *(int *)(data_structure_address + 0x14);\n  *(undefined4 *)(integer_variable + 0x84) = 0;\n  *(undefined4 *)(integer_variable + 0x80) = 0;\n  *undefined_pointer = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_values_at_indices_00080a0a",
                "param_1": "array",
                "param_2": "value",
                "PTR_": "",
                "param_3": "index1",
                "param_4": "index2",
                "param_5": "index3",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_values_at_indices_00080a0a(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "imported": true,
            "current_name": "set_values_at_indices_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "iVar1": "offset",
                "iVar2": "channel_address",
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_number",
                "param_2": "channel_size",
                "param_3": "channel_config",
                "uVar3": "channel_info"
            },
            "code": "void configure_tc_channel_00080b2c(undefined4 channel_number, uint channel_size, undefined *channel_config)\n{\n  int offset;\n  int channel_address;\n  undefined8 channel_info;\n  \n  channel_info = CONCAT44(channel_size, channel_number);\n  if (channel_number > 2) {\n    channel_config = s_TC_Configure;\n    channel_info = (*s_source_tc_c)(s_TC_Configure,0x40,s_TC_Configure,sizeof(TC_CHANNEL));\n  }\n  offset = (int)((ulonglong)channel_info >> 0x20) * 0x40;\n  channel_address = (int)channel_info + offset;\n  *(undefined4 *)((int)channel_info + offset) = 2;\n  *(undefined4 *)(channel_address + 0x28) = 0xffffffff;\n  *(undefined **)(channel_address + 4) = channel_config;\n  return;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "iVar3": "counter_1",
                "iVar4": "counter_2",
                "iVar5": "counter_3",
                "puVar2": "data_pointer_2",
                "iVar6": "counter_4",
                "iVar7": "counter_5",
                "iVar8": "counter_6",
                "FUN_00080774": "initialize_and_update_data_00080774",
                "puVar1": "data_pointer"
            },
            "code": "void initialize_and_update_data_00080774() {\n  uint *data_pointer;\n  undefined4 *data_pointer_2;\n  int counter_1;\n  int counter_2;\n  int counter_3;\n  int counter_4;\n  int counter_5;\n  int counter_6;\n  data_pointer = DAT_00080878;\n  initialize_data_00080b98();\n  data_pointer_2 = DAT_0008087c;\n  DAT_0008087c[1] = *data_pointer / 1000 - 1;\n  *(undefined *)(DAT_00080880 + 0x23) = 0xf0;\n  data_pointer_2[2] = 0;\n  *data_pointer_2 = 7;\n  execute_functions_in_range_00081778();\n  counter_5 = 0;\n  do {\n    counter_6 = counter_5 + 1;\n    update_data_00081014(counter_5,0);\n    counter_4 = DAT_00080890;\n    counter_3 = DAT_0008088c;\n    counter_2 = DAT_00080888;\n    counter_1 = DAT_00080884;\n    counter_5 = counter_6;\n  } while (counter_6 != 0x4f);\n  *(undefined4 *)(DAT_00080884 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(counter_2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(counter_4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(counter_3 + 0xa0) = 0xffffffff;\n  update_data_00080a30(counter_1,1,0x300,0);\n  update_data_00081014(0,1);\n  update_data_00080a30(counter_1,1,0xc00,0);\n  update_data_00080a30(counter_1,1,0x3000,0);\n  update_data_00080a30(counter_3,2,0x30,0);\n  update_data_00080a30(counter_2,1,0xc00,0);\n  update_data_00080a30(counter_1,1,3,0);\n  update_data_00080a30(counter_2,1,0xc000,0);\n  check_char_00080aa8(0x25);\n  find_value_00080c98(DAT_00080898,*data_pointer,DAT_00080894,0xc);\n  update_flags_00080d3e(DAT_00080898,0,0x300000,1);\n  update_value_at_address_00080d30(DAT_00080898,0,0);\n  set_parameter_00080d6a(DAT_00080898,0xffffffff);\n  set_param_1_value_to_max_00080d62(DAT_00080898);\n  return;\n}",
            "called": [
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080d62",
                "FUN_00080a30",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080d30",
                "FUN_00080b98",
                "FUN_00080c98",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "initialize_and_update_data_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "returnZero_00080ec2"
            },
            "code": "int32_t returnZero_00080ec2(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": true,
            "current_name": "returnZero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "*puVar5": "data_structure3_value_1",
                "*puVar6": "data_structure2_value_1",
                "puVar5[2]": "data_structure3_value_3",
                "*(undefined2 *)((int)puVar5 + 0xe)": "data_structure1_value_5",
                "PTR_FUN_00084220_1_0008396c": "function_pointer_3",
                "puVar5[4]": "data_structure3_value_5",
                "param_1": "structure_pointer",
                "PTR_LAB_0008387c_1_00083968": "undefined_pointer_2",
                "puVar6[1]": "data_structure2_value_2",
                "FUN_00083888": "initialize_data_structures_00083888",
                "PTR_LAB_0008429c_1_00083978": "string_pointer_2",
                "puVar6[0x19]": "data_structure2_value_4",
                "fill_memory_with_value_00081f00": "fill_memory_with_value",
                "puVar6[5]": "data_structure2_value_6",
                "puVar5[6]": "data_structure3_value_7",
                "uVar2": "constant_value",
                "puVar5[1]": "data_structure3_value_2",
                "puVar5[5]": "data_structure3_value_6",
                "puVar5[0x19]": "data_structure3_value_4",
                "puVar6[4]": "data_structure2_value_5",
                "puVar3": "function_pointer_1",
                "puVar4": "string_pointer",
                "puVar6[2]": "data_structure2_value_3",
                "puVar5": "data_structure1",
                "puVar6": "data_structure2",
                "puVar6[6]": "data_structure2_value_7",
                "puVar1": "undefined_pointer_1",
                "DAT_00083970": "constant_value_2",
                "PTR_FUN_0008427c_1_00083974": "function_pointer_2"
            },
            "code": "void initialize_data_structures_00083888(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *data_structure1 = *(undefined4 **)(param_1 + 4);\n    undefined4 *data_structure2 = *(undefined4 **)(param_1 + 8);\n    undefined4 *data_structure3 = *(undefined4 **)(param_1 + 0xc);\n    *(undefined **)(param_1 + 0x3c) = PTR_LAB_0008387c_1_00083968;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(data_structure1 + 3) = 4;\n    *data_structure1 = 0;\n    data_structure1[1] = 0;\n    data_structure1[2] = 0;\n    data_structure1[0x19] = 0;\n    *(undefined2 *)((int)data_structure1 + 0xe) = 0;\n    data_structure1[4] = 0;\n    data_structure1[5] = 0;\n    data_structure1[6] = 0;\n    fill_memory_with_value(data_structure1 + 0x17,0,8);\n    undefined *string_pointer = PTR_LAB_0008429c_1_00083978;\n    undefined *function_pointer1 = PTR_checkAndSetStatus_0008427c_1_00083974;\n    undefined4 constant_value = DAT_00083970;\n    undefined *function_pointer2 = PTR_processReturnValueAndUpdateTotalCount_00084220_1_0008396c;\n    data_structure1[7] = data_structure1;\n    data_structure1[8] = function_pointer2;\n    data_structure1[9] = constant_value;\n    data_structure1[10] = function_pointer1;\n    data_structure1[0xb] = string_pointer;\n    *(undefined2 *)((int)data_structure2 + 0xe) = 1;\n    *(undefined2 *)(data_structure2 + 3) = 9;\n    *data_structure2 = 0;\n    data_structure2[1] = 0;\n    data_structure2[2] = 0;\n    data_structure2[0x19] = 0;\n    data_structure2[4] = 0;\n    data_structure2[5] = 0;\n    data_structure2[6] = 0;\n    fill_memory_with_value(data_structure2 + 0x17,0,8);\n    data_structure2[7] = data_structure2;\n    data_structure2[8] = function_pointer2;\n    data_structure2[9] = constant_value;\n    data_structure2[10] = function_pointer1;\n    data_structure2[0xb] = string_pointer;\n    *(undefined2 *)(data_structure3 + 3) = 0x12;\n    *(undefined2 *)((int)data_structure3 + 0xe) = 2;\n    *data_structure3 = 0;\n    data_structure3[1] = 0;\n    data_structure3[2] = 0;\n    data_structure3[0x19] = 0;\n    data_structure3[4] = 0;\n    data_structure3[5] = 0;\n    data_structure3[6] = 0;\n    fill_memory_with_value(data_structure3 + 0x17,0,8);\n    data_structure3[7] = data_structure3;\n    data_structure3[8] = function_pointer2;\n    data_structure3[9] = constant_value;\n    data_structure3[10] = function_pointer1;\n    data_structure3[0xb] = string_pointer;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "param_1": "params",
                "FUN_00081348": "initialize_params_00081348",
                "param_6": "param_6",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "puVar1": "function_ptr"
            },
            "code": "void initialize_params_00081348(undefined4 *params, undefined4 param_2, undefined param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6)\n{\n  undefined *function_ptr;\n  params[0] = PTR_PTR_FUN_000812b8_1_00081368;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param_5;\n  params[4] = param_4;\n  params[5] = param_6;\n  params[6] = param_2;\n  *(undefined *)(params + 7) = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "imported": true,
            "current_name": "initialize_params_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "iVar2": "bits_set",
                "param_1": "index",
                "FUN_00081624": "calculate_time_elapsed_in_milliseconds_00081624",
                "PTR_DAT_00081678": "num_bits_array",
                "param_2": "bit_flag",
                "param_3": "num_bits_set",
                "param_4": "divisor",
                "DAT_0008167c": "time_array",
                "puVar1": "time_array",
                "uVar3": "time_elapsed"
            },
            "code": "int calculate_time_elapsed_in_milliseconds_00081624(int index, int bit_flag, int num_bits_set, undefined4 divisor)\n{\n  uint *DAT_0008167c = DAT_0008167c;\n  undefined4 time_elapsed = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (bit_flag == 0) {\n    time_elapsed = 0;\n  }\n  int PTR_DAT_00081678 = *(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c;\n  int bits_set = check_bits_set_in_array_00081684(PTR_DAT_00081678, *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4), time_elapsed, ((*DAT_0008167c / DAT_00081680) * num_bits_set) / 0x12, divisor);\n  if (bits_set != 0) {\n    bits_set = (int)((ulonglong)(bits_set * 18000 + 16000) / ((ulonglong)*DAT_0008167c / 1000));\n  }\n  return bits_set;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "calculate_time_elapsed_in_milliseconds_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "iVar1": "i",
                "param_1": "len",
                "FUN_00080ec8": "reverse_string_00080ec8",
                "param_2": "string_ptr",
                "param_3": "max_len"
            },
            "code": "uint reverse_string_00080ec8(undefined4 len, int string_ptr, uint max_len) {\n  int i;\n  for (i = 0; i < (int)max_len; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(string_ptr + i);\n  }\n  return max_len & ~((int)max_len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": true,
            "current_name": "reverse_string_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "processDataAndReturnResult_000810d8": "processDataAndReturnResult_000810d8",
                "iVar1": "converted_data",
                "iVar2": "processed_data",
                "convert_and_process_data_0008113a": "convertAndProcessData_0008113a",
                "param_1": "input_data",
                "FUN_0008117a": "processDataAndConvert_0008117a_0008117a"
            },
            "code": "int processDataAndConvert_0008117a_0008117a(undefined4 input_data)\n{\n  int converted_data = convertAndProcessData_0008113a();\n  int processed_data = processDataAndReturnResult_000810d8(input_data);\n  return processed_data + converted_data;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "processDataAndConvert_0008117a_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "do_nothing_00080f08": "wait_for_system_checks_to_complete",
                "param_1": "arg1",
                "initialize_data_structures_000813dc": "initialize_data_structures",
                "update_data_00080f0c": "update_data",
                "FUN_000801e0": "run_system_checks_000801e0",
                "param_2": "arg2",
                "update_channel_data_000806a0": "update_channel_data",
                "param_3": "arg3",
                "param_4": "arg4",
                "calculate_new_values_and_update_data_00080164": "calculate_new_values_and_update_data"
            },
            "code": "int run_system_checks_000801e0(int arg1, int arg2, int arg3, int arg4)\n{\n  initialize_data_structures(PTR_DAT_00080244, 0xe100, arg3, arg4, arg4);\n  update_data(0xd, 1);\n  update_data(6, 1);\n  update_data(0x39, 0);\n  update_data(4, 0);\n  update_data(3, 0);\n  update_data(2, 0);\n  update_channel_data(PTR_DAT_00080248, 5);\n  update_channel_data(PTR_DAT_0008024c, 6);\n  calculate_new_values_and_update_data();\n  wait_for_system_checks_to_complete(1000);\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00080f08",
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_00080164",
                "FUN_000806a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "run_system_checks_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + 128)",
                "param_1": "buffer_address",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + 132)",
                "FUN_000811b0": "initialize_buffer_000811b0",
                "fill_memory_with_value_00081f00": "fill_memory_with_value"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    fill_memory_with_value(buffer_address, 0, 128);\n    *(int *)(buffer_address + 128) = 0;\n    *(int *)(buffer_address + 132) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "*DAT_000817fc": "data_ptr",
                "param_1": "data",
                "FUN_000817f0": "process_data_000817f0",
                "FUNC_00081810": "process_helper"
            },
            "code": "void process_data_000817f0(undefined4 data)\n{\n  process_helper(**DAT_000817fc, data);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "process_data_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "param_1": "current_value",
                "uint": "unsigned_integer",
                "param_2": "previous_value",
                "param_3": "max_value",
                "param_4": "min_value",
                "param_5": "new_max_value",
                "FUN_0008145c": "calculate_new_value_0008145c",
                "return": "result"
            },
            "code": "int calculate_new_value_0008145c(int current_value, int previous_value, int max_value, int min_value, int new_max_value) {\n    int numerator = (current_value - previous_value) * (new_max_value - min_value);\n    int denominator = max_value - previous_value;\n    int result = numerator / denominator + min_value;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": true,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00081fac",
                "FUN_00083a74",
                "FUN_00081810",
                "FUN_00083b10"
            ],
            "imported": true,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "undefined4": "int",
                "FUN_00080eba": "return_one_00080eba"
            },
            "code": "int return_one_00080eba(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": true,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081fac",
                "FUN_00083a74",
                "FUN_00081810",
                "FUN_00083b10"
            ],
            "imported": true,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              copy_memory_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              copy_memory_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          copy_memory_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        copy_memory_00081e34(piVar9,param_2);\n      }\n      allocate_memory_block_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00081810",
                "FUN_00081f94",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "iVar1": "count",
                "FUN_00081190": "decrement_and_call_if_zero_00081190"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": true,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1[5]": "param_array[5]",
                "bVar1": "is_negative",
                "param_1[0x18]": "param_array[24]",
                "param_1[9]": "param_array[9]",
                "param_1[8]": "param_array[8]",
                "param_1[0x19]": "param_array[25]",
                "param_1": "param_array",
                "param_1[0x20]": "param_array[32]",
                "param_1[0x11]": "param_array[17]",
                "*param_1": "*param_array",
                "param_2": "new_value",
                "param_3": "flags"
            },
            "code": "void update_parameters_000809e4(undefined4 *param_array, undefined4 new_value, uint32_t flags)\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  param_array[17] = new_value;\n  if (is_negative) {\n    param_array[25] = new_value;\n  }\n  if (!is_negative) {\n    param_array[24] = new_value;\n  }\n  bool has_bit_1_or_4 = (flags & 10) != 0;\n  if (has_bit_1_or_4) {\n    param_array[8] = new_value;\n  }\n  if (!has_bit_1_or_4) {\n    param_array[9] = new_value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    param_array[32] = new_value;\n  }\n  param_array[5] = new_value;\n  *param_array = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": true,
            "current_name": "update_parameters_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "return_zero_00080ebe"
            },
            "code": "int32_t return_zero_00080ebe(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": true,
            "current_name": "return_zero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "PTR_DAT_000816e0": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_thunk_000816d8() {\n  int* value_pointer = (int*)PTR_DAT_000816e0;\n  return *value_pointer;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "RetrieveValueFromPointer_000816d8",
                "PTR_DAT_000816e0": "pointer_to_value"
            },
            "code": "RetrieveValueFromPointer_000816d8() \n{\n  int* PTR_DAT_000816e0 = (int*)PTR_DAT_000816e0;\n  return *PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": true,
            "current_name": "RetrieveValueFromPointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_byte_000815b8",
                "iVar2": "result",
                "uVar1": "byte_count",
                "param_1": "ptr_param",
                "FUNC_00082390": "count_bytes",
                "param_2": "ptr_data"
            },
            "code": "int check_byte_000815b8(byte **ptr_param, byte *ptr_data) {\n  uint byte_count;\n  int result;\n  \n  if (ptr_param[2] == NULL) {\n    if (ptr_data == NULL) {\n      return 1;\n    }\n  }\n  else {\n    if (ptr_data != NULL) {\n      byte_count = count_bytes(*ptr_param);\n      goto LAB_000815d4;\n    }\n    ptr_data = *ptr_param;\n  }\n  byte_count = (uint)*ptr_data;\nLAB_000815d4:\n  result = 1 - byte_count;\n  if (byte_count > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "check_byte_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "iVar1": "returnValue",
                "FUN_00084220": "processReturnValueAndUpdateTotalCount_00084220",
                "param_1": "value",
                "param_2": "count"
            },
            "code": "void processReturnValueAndUpdateTotalCount_00084220(int value, int* count) {\n  int returnValue = processReturnValue(value, (int)*(short *)(count + 0xe));\n  if (returnValue >= 0) {\n    *count += returnValue;\n  }\n  else {\n    *(ushort *)(count + 0xc) &= 0xefff;\n  }\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": true,
            "current_name": "processReturnValueAndUpdateTotalCount_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "allocate_memory_00081800": "allocate_memory",
                "FUN_00081472": "allocate_and_return_memory_pointer_00081472",
                "param_1": "memory_pointer"
            },
            "code": "undefined4 * allocate_and_return_memory_pointer_00081472(undefined4 *memory_pointer){\n  allocate_memory(memory_pointer);\n  return memory_pointer;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "allocate_and_return_memory_pointer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": true,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "iVar3": "data_index",
                "process_param_000841e4": "process_param_000841e4",
                "uVar1": "error_code",
                "iVar4": "PTR_DAT_000836d0",
                "PTR_DAT_000836d0": "PTR_DAT_000836d0",
                "FUN_000836ec": "process_and_exit_on_error_000836ec",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "DAT_000836d4": "DAT_000836d4",
                "exit_with_status_00080eec": "exit_with_status_00080eec",
                "process_data_000817f0": "process_data_000817f0"
            },
            "code": "void process_and_exit_on_error_000836ec(void)\n{\n  int error_code = 1;\n  int *data_ptr = *(int **)PTR_DAT_000836d0 + 0x148;\n  int data_index = data_ptr[1];\n  if (data_index > 0x1f) {\n    if ((DAT_000836d4 == 0) || (process_data_000817f0(400) == 0)) {\n      exit_with_status_00080eec(error_code);\n      return;\n    }\n    data_ptr[0x62] = 0;\n    data_ptr[99] = 0;\n    data_ptr[data_index + 2] = exit_with_status_00080eec(error_code);\n    data_index = 0;\n  }\n  data_ptr[data_index + 2] = exit_with_status_00080eec(error_code);\n  UNRECOVERED_JUMPTABLE_00(0);\n  return;\n}",
            "called": [
                "FUN_000817f0",
                "FUN_000841e4",
                "FUN_00080eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": true,
            "current_name": "process_and_exit_on_error_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUNC_0008289c": "call_function",
                "FUN_00081750": "process_data_and_call_function_00081750",
                "uStack_8": "data",
                "param_1": "data_size",
                "uStack_4": "result",
                "param_2": "data_type",
                "param_3": "data_ptr",
                "param_4": "result_ptr"
            },
            "code": "void process_data_and_call_function_00081750(int data_size, int data_type, int* data_ptr, int* result_ptr)\n{\n  int data = *data_ptr;\n  int result = *result_ptr;\n  call_function(data_size, data_type, &data, &result);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": true,
            "current_name": "process_data_and_call_function_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "bVar4": "byte_found",
                "iVar1": "offset",
                "puVar2": "ptr",
                "param_1": "address",
                "FUN_00082688": "count_bytes_until_null_00082688",
                "uVar3": "value"
            },
            "code": "int count_bytes_until_null_00082688(uint address)\n{\n  int offset = -(address & 3);\n  uint *ptr = (uint *)(address & 0xfffffffc);\n  uint value = *ptr;\n  if ((address & 3) != 0) {\n    value |= 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (ptr++, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    offset += 4;\n    value = *ptr;\n  }\n  bool byte_found = (value & 0xff) == 0;\n  if (!byte_found) {\n    offset++;\n    byte_found = (value & 0xff00) == 0;\n  }\n  if (!byte_found) {\n    offset++;\n    byte_found = (value & 0xff0000) == 0;\n  }\n  if (!byte_found) {\n    offset++;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "iVar2": "returnValue",
                "param_1": "outputValue",
                "FUN_00084508": "processReturnValue_00084508",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "dataPointer"
            },
            "code": "void processReturnValue_00084508(int *outputValue, undefined4 input1, undefined4 input2, undefined4 input3) {\n  undefined *dataPointer;\n  int returnValue;\n  dataPointer = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  returnValue = returnZero_00080ec2(input1, input2, input3);\n  if ((returnValue == -1) && (*(int *)dataPointer != 0)) {\n    *outputValue = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": true,
            "current_name": "processReturnValue_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "DAT_00080a90": "PTR_update_data_func_3",
                "bVar1": "is_negative_flag",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(data_address + 100)",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(data_address + 0x44)",
                "param_1": "data_address",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(data_address + 0x60)",
                "param_2": "data_type",
                "DAT_00080a8c": "PTR_update_data_func_2",
                "param_3": "new_value",
                "FUN_00080a30": "update_data_00080a30",
                "param_4": "flags",
                "DAT_00080a88": "PTR_update_data_func"
            },
            "code": "int update_data_00080a30(int data_address,int data_type, int new_value,uint32_t flags)\n{\n  bool is_negative_flag;\n  switch(data_type) {\n  case 1:\n  case 2:\n    (*DAT_00080a88)(data_address,data_type,new_value);\n    is_negative_flag = (int)(flags << 0x1f) < 0;\n    *(int *)(data_address + 0x44) = new_value;\n    if (is_negative_flag) {\n      *(int *)(data_address + 100) = new_value;\n    }\n    if (!is_negative_flag) {\n      *(int *)(data_address + 0x60) = new_value;\n    }\n    break;\n  case 3:\n    (*DAT_00080a8c)(data_address,new_value,flags,DAT_00080a8c,data_address);\n    break;\n  case 4:\n  case 5:\n    (*DAT_00080a90)(data_address,new_value,data_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,data_type,new_value);\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "update_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "DAT_00080950": "0x11",
                "DAT_00080938": "param2_ptr",
                "param_1": "buffer1",
                "DAT_00080958": "0x12",
                "PTR_DAT_0008095c": "buffer4_ptr",
                "PTR_DAT_0008093c": "buffer4_ptr",
                "PTR_DAT_00080940": "param1_ptr",
                "PTR_DAT_00080968": "buffer3_ptr",
                "PTR_DAT_00080948": "buffer7_ptr",
                "PTR_DAT_00080964": "buffer5_ptr",
                "PTR_DAT_00080944": "buffer5_ptr",
                "PTR_DAT_0008096c": "buffer6_ptr",
                "DAT_00080960": "0x14",
                "puVar2": "buffer2_ptr",
                "puVar3": "buffer4_ptr",
                "puVar4": "buffer8_ptr",
                "puVar5": "buffer3_ptr",
                "puVar6": "buffer6_ptr",
                "PTR_DAT_0008094c": "buffer8_ptr",
                "PTR_DAT_00080930": "buffer1_ptr",
                "param_2": "buffer2",
                "param_3": "param_3",
                "puVar1": "buffer1_ptr",
                "FUN_0008089c": "initialize_and_write_buffers_0008089c",
                "PTR_DAT_00080954": "buffer3_ptr",
                "PTR_DAT_00080934": "buffer2_ptr"
            },
            "code": "void initialize_and_write_buffers_0008089c(undefined4 buffer1, undefined4 buffer2, undefined4 param_3)\n{\n  undefined *PTR_DAT_00080930 = PTR_DAT_00080930;\n  undefined *PTR_DAT_00080934 = PTR_DAT_00080934;\n  initialize_buffer_000811b0(PTR_DAT_00080930);\n  initialize_buffer_000811b0(PTR_DAT_00080934);\n  undefined *PTR_DAT_00080940 = PTR_DAT_00080940;\n  undefined *DAT_00080938 = DAT_00080938;\n  initialize_params_00081348(PTR_DAT_00080940, DAT_00080938, 8, 8, PTR_DAT_00080930, PTR_DAT_00080934, param_3);\n  undefined *PTR_DAT_00080968 = PTR_DAT_00080968;\n  undefined *PTR_DAT_0008093c = PTR_DAT_0008093c;\n  initialize_buffer_000811b0(PTR_DAT_00080968);\n  initialize_buffer_000811b0(PTR_DAT_0008093c);\n  undefined *PTR_DAT_00080944 = PTR_DAT_00080944;\n  undefined *PTR_DAT_0008096c = PTR_DAT_0008096c;\n  initialize_buffer_000811b0(PTR_DAT_00080944);\n  initialize_buffer_000811b0(PTR_DAT_0008096c);\n  undefined *PTR_DAT_00080948 = PTR_DAT_00080948;\n  undefined *PTR_DAT_0008094c = PTR_DAT_0008094c;\n  initialize_buffer_000811b0(PTR_DAT_00080948);\n  initialize_buffer_000811b0(PTR_DAT_0008094c);\n  write_to_buffer_with_param_00081438(PTR_DAT_00080954, DAT_00080950, DAT_00080950, DAT_00080950, PTR_DAT_00080968, PTR_DAT_0008096c);\n  write_to_buffer_with_param_00081438(PTR_DAT_0008095c, DAT_00080958, DAT_00080958, DAT_00080958, PTR_DAT_0008093c, PTR_DAT_00080948);\n  write_to_buffer_with_param_00081438(PTR_DAT_00080964, DAT_00080960, DAT_00080960, DAT_00080960, PTR_DAT_00080944, PTR_DAT_0008094c);\n  return;\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_and_write_buffers_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "uVar1": "bytes_until_null",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "*(code **)(*param_1 + 4)": "func_ptr",
                "FUN_000810a6": "process_data_000810a6"
            },
            "code": "void process_data_000810a6(int *data_ptr, int data_length, undefined4 param_3, undefined4 param_4) {\n  if (data_length != 0) {\n    int bytes_until_null = count_bytes_until_null_00082688(data_length);\n    void (*func_ptr)(int *, int, int, void *, undefined4) = *(void (**)(int *, int, int, void *, undefined4))(*data_ptr + 4);\n    func_ptr(data_ptr, data_length, bytes_until_null, func_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810d8",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc"
            ],
            "imported": true,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 112245,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_00080eb0",
            "FUN_0008439c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_000815de",
            "FUN_0008400c",
            "FUN_00080c20",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_00080d3e",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080d58",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_0008458c",
            "FUN_000811ca",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080d6a",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080ec2",
            "FUN_00081348",
            "FUN_00080ec8",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00080a30"
        ],
        [
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000803fc",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000841e4",
            "FUN_000844bc",
            "FUN_00081438",
            "FUN_0008434c",
            "FUN_00081496",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000813dc",
            "FUN_00083888",
            "FUN_00081624",
            "FUN_000811b0",
            "FUN_00084508",
            "FUN_000810a6"
        ],
        [
            "FUN_00083a74",
            "FUN_0008427c",
            "FUN_00084018",
            "FUN_000810d8",
            "FUN_000806a0",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081014",
            "FUN_000814ae",
            "FUN_000810c4",
            "FUN_000810fc",
            "FUN_00084220",
            "FUN_000836ec",
            "FUN_0008089c"
        ],
        [
            "FUN_00083b10",
            "thunk_FUN_0008113a",
            "FUN_00081570",
            "FUN_0008113a",
            "FUN_0008044c",
            "FUN_000810e8",
            "FUN_000816f8",
            "FUN_00080774",
            "FUN_000801e0"
        ],
        [
            "FUN_00083850",
            "FUN_0008356c",
            "FUN_00081800",
            "FUN_0008159e",
            "FUN_0008117a"
        ],
        [
            "FUN_000842a4",
            "FUN_000834f0",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_00084484",
            "FUN_00081472"
        ],
        [
            "FUN_00081560",
            "FUN_000839b4",
            "FUN_000814d0"
        ],
        [
            "FUN_000814f6",
            "FUN_00082824"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}