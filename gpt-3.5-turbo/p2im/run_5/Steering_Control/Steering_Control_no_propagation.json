{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_check_000801e0",
            "code": "\nundefined8 initialize_and_check_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_check_000801e0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_function_00080250",
            "code": "\nvoid controlFunction_00080250(void)\n\n{\n  undefined4 status;\n  int count;\n  undefined *pointer;\n  undefined dataBuffer [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      status = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(status,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(dataBuffer,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,dataBuffer);\n        FUN_00081472(dataBuffer);\n        FUN_00081214(dataBuffer,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,dataBuffer);\n        FUN_00081472(dataBuffer);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        status = FUN_000815de(&DAT_200708c8);\n        pointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    status = FUN_000815de(&DAT_200708c8);\n    pointer = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(pointer,status);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_function_00080250",
                "uVar1": "status",
                "iVar2": "count",
                "puVar3": "pointer",
                "auStack_1c": "dataBuffer"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_channel_000803fc",
            "code": "\nvoid initializeChannel_000803fc(int channelIndex,uint param2,undefined4 param3,uint param4)\n\n{\n  undefined4 unaffected_r4;\n  undefined4 input_lr;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,channelIndex);\n  FUN_00080aa8(param3);\n  FUN_00080b2c(channelIndex,param2,0xc002);\n  FUN_00080b90(channelIndex,param2,0xa41);\n  *(int *)((param4 >> 5) * 4 + -0x1fff1f00) = 1 << (param4 & 0x1f);\n  *(undefined4 *)(channelIndex + param2 * 0x40 + 0x24) = 4;\n  if (2 < param2) {\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaffected_r4,input_lr);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_channel_000803fc",
                "param_1": "channelIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "unaff_r4": "unaffected_r4",
                "in_lr": "input_lr",
                "uVar1": "combinedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_param_0008044c",
            "code": "\nvoid updateParam_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int tempVar;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempVar = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempVar < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempVar = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempVar < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempVar) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (relArray[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_param_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit",
                "iVar2": "tempVar",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "extract_relocation_offset_000805a8",
            "code": "\nvoid extractRelocationOffset_000805a8(byte *outputByte)\n\n{\n  char nextIndex;\n  uint index;\n  \n  index = (uint)DAT_200708f0;\n  if (index < 0x3c) {\n    nextIndex = DAT_200708f0 + 1;\n    *outputByte = DAT_200708f0;\n    DAT_200708f0 = nextIndex;\n    *(uint *)(&DAT_200708fc + index * 8) =\n         (relocationEntriesArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputByte = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "extract_relocation_offset_000805a8",
                "param_1": "outputByte",
                "cVar1": "nextIndex",
                "uVar2": "index",
                "Elf32_Rel_ARRAY_20070000": "relocationEntriesArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "process_data_000806a0",
            "code": "\nbyte processData_000806a0(byte *data,undefined4 flag)\n\n{\n  byte tempByte;\n  undefined4 register1;\n  uint register2;\n  undefined4 register3;\n  int counter;\n  uint dataValue;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  FUN_00080f0c(flag,1,0x220,*data,0x960);\n  dataValue = (uint)*data;\n  tempByte = (&DAT_200708f8)[dataValue * 8];\n  data[2] = 0;\n  register2 = dataValue / 0xc;\n  (&DAT_200708f8)[dataValue * 8] = tempByte & 0xc0 | (byte)flag & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + register2 * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (register2 == 0) {\n    register1 = 0x40084000;\n    register3 = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(register1,register2,register3,register3);\n  }\n  else {\n    if (register2 == 1) {\n      register1 = 0x40084000;\n      register3 = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (register2 == 2) {\n      register1 = 0x40084000;\n      register3 = 0x20;\n      goto LAB_0008064c;\n    }\n    if (register2 == 3) {\n      register1 = 0x40080000;\n      register2 = 2;\n      register3 = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (register2 == 4) {\n      register1 = 0x40080000;\n      register2 = 0;\n      register3 = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "param_1": "data",
                "param_2": "flag",
                "bVar1": "tempByte",
                "uVar2": "register1",
                "uVar3": "register2",
                "uVar4": "register3",
                "iVar5": "counter",
                "uVar6": "dataValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid processData_000806f8(byte *data,uint length)\n\n{\n  uint adjustedLength;\n  \n  if ((int)length < 0x220) {\n    adjustedLength = length;\n    if (0xb3 < (int)length) {\n      adjustedLength = 0xb4;\n    }\n    length = FUN_0008145c(adjustedLength & ~((int)adjustedLength >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    adjustedLength = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == isSubtractionOverflow(length,adjustedLength)) &&\n       (adjustedLength = (600 - (char)data[2]) * 4, (int)length <= (int)adjustedLength)) {\n      adjustedLength = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (relocationArray[6].r_offset / 1000000) * (adjustedLength - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "adjustedLength",
                "SBORROW4": "isSubtractionOverflow",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_device_components_00080774",
            "code": "\n\n\nvoid initializeDeviceComponents_00080774(void)\n\n{\n  int counter;\n  int nextCounter;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  counter = 0;\n  do {\n    nextCounter = counter + 1;\n    FUN_00081014(counter,0);\n    counter = nextCounter;\n  } while (nextCounter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_device_components_00080774",
                "iVar1": "counter",
                "iVar2": "nextCounter"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_devices_0008089c",
            "code": "\nvoid initializeDevices_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_devices_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_call_functions_00080970",
            "code": "\nvoid checkAndCallFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_call_functions_00080970",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_value_in_memory_000809be",
            "code": "\nvoid updateValueInMemory_000809be(int memoryAddress,undefined4 operationCode,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(memoryAddress + 0x44) = newValue;\n  switch(operationCode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(memoryAddress + 0x70) & *(uint *)(memoryAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(memoryAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(memoryAddress + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(memoryAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_value_in_memory_000809be",
                "param_1": "memoryAddress",
                "param_2": "operationCode",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameter_values_000809e4",
            "code": "\nvoid updateParameterValues_000809e4(undefined4 *paramArray,undefined4 newValue,uint flags)\n\n{\n  bool isFlagNegative;\n  \n  isFlagNegative = (int)(flags << 0x1f) < 0;\n  paramArray[0x11] = newValue;\n  if (isFlagNegative) {\n    paramArray[0x19] = newValue;\n  }\n  if (!isFlagNegative) {\n    paramArray[0x18] = newValue;\n  }\n  isFlagNegative = (flags & 10) != 0;\n  if (isFlagNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isFlagNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramArray[0x20] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameter_values_000809e4",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isFlagNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "assign_values_to_param1_00080a0a",
            "code": "\nvoid assignValuesToParam1_00080a0a(undefined4 *outputArray,undefined4 value,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  outputArray[0x11] = value;\n  if (isParam5Zero == 0) {\n    outputArray[0x18] = value;\n  }\n  else {\n    outputArray[0x19] = value;\n  }\n  if (isParam4Zero == 0) {\n    outputArray[0x15] = value;\n  }\n  else {\n    outputArray[0x14] = value;\n  }\n  if (isParam3Zero == 0) {\n    outputArray[0xd] = value;\n  }\n  else {\n    outputArray[0xc] = value;\n  }\n  outputArray[4] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "assign_values_to_param1_00080a0a",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_00080a30",
            "code": "\nundefined4 updateParameter_00080a30(int device,int mode,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    FUN_000809be(device,mode,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_000809e4(device,value,flag,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(device,value,mode == 5,(flag << 0x1d) >> 0x1f,flag & 1,mode,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_conditions_00080a94",
            "code": "\nuint check_bitwise_conditions_00080a94(int data_ptr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_ptr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(data_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_conditions_00080a94",
                "param_1": "data_ptr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndSetBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_channel_00080b2c",
            "code": "\nvoid configureChannel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int indexOffset;\n  int channelIndex;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  indexOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelIndex = (int)combinedParams + indexOffset;\n  *(undefined4 *)((int)combinedParams + indexOffset) = 2;\n  *(undefined4 *)(channelIndex + 0x28) = 0xffffffff;\n  *(char **)(channelIndex + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "indexOffset",
                "iVar2": "channelIndex",
                "uVar3": "combinedParams"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "update_param_at_offset_00080b90",
            "code": "\nvoid update_param_at_offset_00080b90(int base_address,int index,undefined4 new_value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "update_param_at_offset_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "elfArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *threshold,uint inputSize,int factor,int multiplier)\n\n{\n  uint divResult;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  divResult = inputSize / (uint)(factor * 2);\n  if (inputSize == factor * 2 * divResult) {\n    divResult = divResult - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)inputSize / (ulonglong)((divResult + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (divResult & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "threshold",
                "param_2": "inputSize",
                "param_3": "factor",
                "param_4": "multiplier",
                "uVar1": "divResult",
                "uVar2": "index",
                "local_58": "thresholds"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "set_bit_in_u_int_00080d30",
            "code": "\nvoid setBitInUInt_00080d30(int baseAddress,uint value,uint bitIndex)\n\n{\n  *(uint *)(baseAddress + 4) = value | *(uint *)(baseAddress + 4) | (bitIndex & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "set_bit_in_u_int_00080d30",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "bitIndex"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_flags_00080d3e",
            "code": "\nvoid updateFlags_00080d3e(int dataAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       value2 | *(uint *)(dataAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_in_integer_00080d58",
            "code": "\nvoid setBitInInteger_00080d58(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_in_integer_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_memory_value_00080d6a",
            "code": "\nvoid setMemoryValue_00080d6a(int memoryAddress,undefined4 value)\n\n{\n  *(undefined4 *)(memoryAddress + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_memory_value_00080d6a",
                "param_1": "memoryAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_return_value_00080e80",
            "code": "\nuint32_t getReturnValue_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_return_value_00080e80",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_and_get_previous_00080e88",
            "code": "\nint addAndGetPrevious_00080e88(int value)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = value + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_and_get_previous_00080e88",
                "param_1": "value",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_error_code_00080eaa",
            "code": "\nuint32_t getErrorCode_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_value_00080eb0",
            "code": "\nundefined4 SetMemoryValue_00080eb0(undefined4 result,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_value_00080eb0",
                "param_1": "result",
                "param_2": "memory_address"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_status_00080eba",
            "code": "\nundefined4 get_status_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_status_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_return_value_00080ebe",
            "code": "\nundefined4 getReturnValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_return_value_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "get_default_value_00080ec2",
            "code": "\nundefined4 getDefaultValue_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "get_default_value_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param_1,int sourcePtr,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(sourcePtr + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_2": "sourcePtr",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unusedParam1,undefined4 unusedParam2,undefined4 unusedParam3)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,unusedParam2,unusedParam3,unusedParam3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "unusedParam3"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nundefined4 getErrorCode_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_data_thunk_000816d8",
            "code": "\nundefined4 get_data_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_data_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "check_and_modify_value_00080f0c",
            "code": "\n\n\nint checkAndModifyValue_00080f0c(int valueIndex,int comparisonValue)\n\n{\n  int newValue;\n  uint bitMask;\n  undefined4 operationType;\n  uint tempMask;\n  byte lowerNibble;\n  byte fullByte;\n  int tempIndex;\n  int tempValue;\n  \n  newValue = valueIndex;\n  if ((&DAT_00084b50)[valueIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[valueIndex] & 0xf) == 4) {\n      newValue = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[valueIndex * 0x1c]);\n    }\n    fullByte = (&DAT_20070e1c)[valueIndex];\n    lowerNibble = fullByte & 0xf;\n    if ((lowerNibble < 3) && (fullByte != 0)) {\n      if (lowerNibble == 2) {\n        if (comparisonValue == 0) {\n          return newValue;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (comparisonValue == 2) {\n          return newValue;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (comparisonValue == 1) {\n          return newValue;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (comparisonValue != 1) {\nLAB_00080f68:\n      if (comparisonValue == 0) {\n        newValue = valueIndex * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + newValue));\n        newValue = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + newValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + newValue),0);\n        fullByte = (&DAT_20070e1c)[valueIndex] & 0xf0 | 2;\n      }\n      else {\n        if (comparisonValue != 2) {\n          return newValue;\n        }\n        newValue = valueIndex * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + newValue));\n        newValue = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + newValue),3,\n                             *(undefined4 *)(&DAT_00084b48 + newValue),1);\n        fullByte = (&DAT_20070e1c)[valueIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[valueIndex] = fullByte;\n      return newValue;\n    }\n    tempIndex = valueIndex * 0x1c;\n    tempValue = *(int *)(&DAT_00084b44 + tempIndex);\n    if (fullByte >> 4 == 0) {\n      operationType = 4;\n    }\n    else {\n      operationType = 5;\n    }\n    newValue = FUN_00080a30(tempValue,operationType,*(undefined4 *)(&DAT_00084b48 + tempIndex),\n                         *(undefined4 *)(&DAT_00084b54 + tempIndex));\n    (&DAT_20070e1c)[valueIndex] = (&DAT_20070e1c)[valueIndex] & 0xf0 | 3;\n    if (*(int *)(tempValue + 0x18) == -1) {\n      bitMask = *(uint *)(&DAT_00084b4c + tempIndex);\n      if (0x2c < bitMask) {\n        return 1;\n      }\n      if (bitMask < 0x20) {\n        bitMask = 1 << (bitMask & 0xff);\n        tempMask = _DAT_400e0618 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0614 = tempMask;\n        }\n      }\n      else {\n        bitMask = 1 << (bitMask - 0x20 & 0xff);\n        tempMask = _DAT_400e0708 & bitMask;\n        if (tempMask == bitMask) {\n          _DAT_400e0704 = tempMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return newValue;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "check_and_modify_value_00080f0c",
                "param_1": "valueIndex",
                "param_2": "comparisonValue",
                "iVar1": "newValue",
                "iVar7": "tempIndex",
                "iVar8": "tempValue",
                "uVar2": "bitMask",
                "uVar3": "operationType",
                "uVar4": "tempMask",
                "bVar5": "lowerNibble",
                "bVar6": "fullByte"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "process_data_00081014",
            "code": "\nvoid processData_00081014(int index,int value,undefined4 data)\n\n{\n  int result;\n  undefined4 valueToSet;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,data,5,index,value,data);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    valueToSet = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(address,valueToSet);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = valueToSet;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = valueToSet;\n      return;\n    }\n    FUN_00080a0a(address,valueToSet,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "process_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "valueToSet",
                "iVar3": "address"
            },
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_function_000810a6",
            "code": "\nvoid executeFunction_000810a6(int *functionArray,int functionIndex,undefined4 unknown1,undefined4 unknown2)\n\n{\n  undefined4 result;\n  \n  if (functionIndex != 0) {\n    result = FUN_00082688(functionIndex);\n    (**(code **)(*functionArray + 4))(functionArray,functionIndex,result,*(code **)(*functionArray + 4),unknown2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_function_000810a6",
                "param_1": "functionArray",
                "param_2": "functionIndex",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_initial_operations_000810c4",
            "code": "\nvoid executeInitialOperations_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_initial_operations_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_pointer_function_000810cc",
            "code": "\nvoid executePointerFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_pointer_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "initialize_data_000810d8",
            "code": "\nvoid initializeData_000810d8(undefined4 dataPointer,undefined4 unusedParam,undefined4 length,undefined4 size)\n\n{\n  FUN_000810a6(dataPointer,&DAT_00085635,length,size,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "initialize_data_000810d8",
                "param_1": "dataPointer",
                "param_2": "unusedParam",
                "param_3": "length",
                "param_4": "size"
            },
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 inputValue)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(inputValue);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "inputValue",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_number_to_base_000810fc",
            "code": "\nvoid convertNumberToBase_000810fc(undefined4 outputStr,uint inputNum,uint base)\n\n{\n  char *resultPtr;\n  uint quotient;\n  char *currentDigitPtr;\n  char currentDigit;\n  uint remainder;\n  char convertedNum [5];\n  \n  convertedNum[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  resultPtr = convertedNum;\n  do {\n    currentDigitPtr = resultPtr;\n    quotient = inputNum / base;\n    remainder = inputNum - base * quotient & 0xff;\n    currentDigit = (char)remainder;\n    if (remainder < 10) {\n      currentDigit = currentDigit + '0';\n    }\n    else {\n      currentDigit = currentDigit + '7';\n    }\n    *currentDigitPtr = currentDigit;\n    inputNum = quotient;\n    resultPtr = currentDigitPtr + -1;\n  } while (quotient != 0);\n  FUN_000810a6(outputStr,currentDigitPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_number_to_base_000810fc",
                "param_1": "outputStr",
                "param_2": "inputNum",
                "param_3": "base",
                "pcVar1": "resultPtr",
                "uVar2": "quotient",
                "pcVar3": "currentDigitPtr",
                "cVar4": "currentDigit",
                "uVar5": "remainder",
                "local_15": "convertedNum"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "format_integer_0008113a",
            "code": "\nint formatInteger_0008113a(undefined4 *formatFuncPtr,uint value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeFormatResult;\n  \n  if (base == 0) {\n    result = (**(code **)*formatFuncPtr)(formatFuncPtr,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = FUN_000810cc(formatFuncPtr,0x2d);\n      negativeFormatResult = FUN_000810fc(formatFuncPtr,-value,10);\n      return negativeFormatResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(formatFuncPtr,value,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "format_integer_0008113a",
                "param_1": "formatFuncPtr",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeFormatResult"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_and_format_number_thunk_0008113a",
            "code": "\nint convertAndFormatNumber_thunk_0008113a(undefined4 *outputPtr,uint inputValue,uint inputBase,undefined4 param_4)\n\n{\n  int result;\n  int signedOffset;\n  \n  if (inputBase == 0) {\n    result = (**(code **)*outputPtr)(outputPtr,inputValue & 0xff);\n    return result;\n  }\n  if (inputBase == 10) {\n    inputBase = 10;\n    if ((int)inputValue < 0) {\n      result = FUN_000810cc(outputPtr,0x2d);\n      signedOffset = FUN_000810fc(outputPtr,-inputValue,10);\n      return signedOffset + result;\n    }\n  }\n  else {\n    inputBase = inputBase & 0xff;\n  }\n  result = FUN_000810fc(outputPtr,inputValue,inputBase,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_and_format_number_thunk_0008113a",
                "param_1": "outputPtr",
                "param_2": "inputValue",
                "param_3": "inputBase",
                "iVar1": "result",
                "iVar2": "signedOffset"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 inputValue)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(inputValue);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "inputValue",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_index_is_zero_00081190",
            "code": "\nvoid execute_if_index_is_zero_00081190(void)\n\n{\n  if ((relocation_array[6].relocation_info != 0xffffffff) &&\n     (relocation_array[6].relocation_info = relocation_array[6].relocation_info - 1,\n     relocation_array[6].relocation_info == 0)) {\n    (*(code *)((int)&relocation_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_index_is_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  FUN_00081f00(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_buffer_000811ca",
            "code": "\nvoid updateBuffer_000811ca(int buffer,undefined data)\n\n{\n  uint nextIndex;\n  \n  nextIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (nextIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = data;\n    *(uint *)(buffer + 0x80) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "data",
                "uVar1": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "process_data_000811e8",
            "code": "\nint process_data_000811e8(int *array)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  array[3] = result;\n  do {\n    result = (**(code **)(*array + 0xc))(array);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - array[3]) < (uint)array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "param_1": "array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 input1,undefined4 input2,uint target)\n\n{\n  uint result;\n  \n  FUN_000814f6(input1,&DAT_00085637);\n  while ((result = FUN_000811e8(input2), -1 < (int)result && (result != target))) {\n    FUN_0008159e(input1,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "target",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "process_data_00081276",
            "code": "\nuint processData_00081276(int dataPtr)\n\n{\n  byte byteValue;\n  int structPtr;\n  \n  structPtr = *(int *)(dataPtr + 0x10);\n  if (*(int *)(structPtr + 0x80) != *(int *)(structPtr + 0x84)) {\n    byteValue = *(byte *)(structPtr + *(int *)(structPtr + 0x84));\n    *(uint *)(structPtr + 0x84) = *(int *)(structPtr + 0x84) + 1U & 0x7f;\n    return (uint)byteValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "process_data_00081276",
                "param_1": "dataPtr",
                "bVar1": "byteValue",
                "iVar2": "structPtr"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataStruct,undefined4 newValue)\n\n{\n  int ptrToData;\n  uint newIndex;\n  \n  ptrToData = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrToData + 0x84) == *(int *)(ptrToData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(ptrToData + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrToData + 0x84) == newIndex);\n    *(char *)(ptrToData + *(int *)(ptrToData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "iVar1": "ptrToData",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_00081348",
            "code": "\nvoid initializeFunction_00081348(undefined4 *output,undefined4 inputParameter,undefined flag,undefined4 parameterFour,\n                 undefined4 parameterFive,undefined4 parameterSix)\n\n{\n  output[1] = 0;\n  output[2] = 1000;\n  output[6] = inputParameter;\n  *output = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(output + 7) = flag;\n  output[4] = parameterFive;\n  output[8] = parameterFour;\n  output[5] = parameterSix;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_00081348",
                "param_1": "output",
                "param_2": "inputParameter",
                "param_3": "flag",
                "param_4": "parameterFour",
                "param_5": "parameterFive",
                "param_6": "parameterSix"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_module_000813dc",
            "code": "\nvoid initializeModule_000813dc(int moduleAddress,uint pageSize)\n\n{\n  int tempInt1;\n  undefined4 *pointer1;\n  \n  FUN_00080aa8(*(undefined4 *)(moduleAddress + 0x20));\n  pointer1 = *(undefined4 **)(moduleAddress + 0x18);\n  pointer1[0x48] = 0x202;\n  *pointer1 = 0xac;\n  pointer1[1] = 0x800;\n  pointer1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  pointer1[3] = 0xffffffff;\n  pointer1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(moduleAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(moduleAddress + 0x1c) & 0x1f);\n  tempInt1 = *(int *)(moduleAddress + 0x10);\n  *(undefined4 *)(tempInt1 + 0x84) = 0;\n  *(undefined4 *)(tempInt1 + 0x80) = 0;\n  tempInt1 = *(int *)(moduleAddress + 0x14);\n  *(undefined4 *)(tempInt1 + 0x84) = 0;\n  *(undefined4 *)(tempInt1 + 0x80) = 0;\n  *pointer1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_module_000813dc",
                "param_1": "moduleAddress",
                "param_2": "pageSize",
                "iVar1": "tempInt1",
                "puVar2": "pointer1"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_data_00081438",
            "code": "\nundefined4 * initializeData_00081438(undefined4 *outputPointer,undefined4 inputValue)\n\n{\n  FUN_00081348();\n  *outputPointer = &PTR_FUN_000812b8_1_00085680;\n  outputPointer[9] = inputValue;\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_data_00081438",
                "param_1": "outputPointer",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_linear_interpolation_0008145c",
            "code": "\nint calculateLinearInterpolation_0008145c(int startValue,int startPosition,int endPosition,int startPosition2,int endValue)\n\n{\n  interpolatedValue (unsigned_integer)((startValue - startPosition) * (endValue - startPosition2)) / (unsigned_integer)(endPosition - startPosition) + startPosition2;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "startValue",
                "param_2": "startPosition",
                "param_3": "endPosition",
                "param_4": "startPosition2",
                "param_5": "endValue",
                "uint": "unsigned_integer",
                "return": "interpolatedValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "execute_function_00081472",
            "code": "\nundefined4 * executeFunction_00081472(undefined4 *functionParameter)\n\n{\n  FUN_00081800(*functionParameter);\n  return functionParameter;\n}\n\n",
            "renaming": {
                "FUN_00081472": "execute_function_00081472",
                "param_1": "functionParameter"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_params_00081480",
            "code": "\nvoid resetParams_00081480(int *paramArray)\n\n{\n  if (*paramArray != 0) {\n    FUN_00081800();\n  }\n  *paramArray = 0;\n  paramArray[2] = 0;\n  paramArray[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_params_00081480",
                "param_1": "paramArray",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "update_array_and_check_status_00081496",
            "code": "\nint updateArrayAndCheckStatus_00081496(int *array,int size,undefined4 param1,undefined4 param2)\n\n{\n  int status;\n  \n  status = FUN_00081f9c(*array,size + 1,param1,param2,param2);\n  if (status != 0) {\n    *array = status;\n    array[1] = size;\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00081496": "update_array_and_check_status_00081496",
                "param_1": "array",
                "param_2": "size",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "status"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_parameters_000814ae",
            "code": "\nundefined4 checkAndUpdateParameters_000814ae(int *inputBuffer,uint desiredSize)\n\n{\n  int result;\n  \n  if ((*inputBuffer == 0) || ((uint)inputBuffer[1] < desiredSize)) {\n    result = FUN_00081496(inputBuffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (inputBuffer[2] == 0) {\n      *(undefined *)*inputBuffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_parameters_000814ae",
                "param_1": "inputBuffer",
                "param_2": "desiredSize",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "validate_and_process_data_000814d0",
            "code": "\nundefined4 * validate_and_process_data_000814d0(undefined4 *data_array,undefined4 param_value,undefined4 buffer)\n\n{\n  int validation_result;\n  \n  validation_result = FUN_000814ae(data_array,buffer);\n  if (validation_result == 0) {\n    FUN_00081480(data_array);\n  }\n  else {\n    data_array[2] = buffer;\n    FUN_000825cc(*data_array,param_value);\n  }\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "validate_and_process_data_000814d0",
                "param_1": "data_array",
                "param_2": "param_value",
                "param_3": "buffer",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_array_000814f6",
            "code": "\nundefined4 * initializeParamArray_000814f6(undefined4 *paramArray,int value)\n\n{\n  undefined4 result;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (value != 0) {\n    result = FUN_00082688(value);\n    FUN_000814d0(paramArray,value,result);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "paramArray",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_values_0008151c",
            "code": "\nvoid updateValues_0008151c(int *source,int *destination)\n\n{\n  if (*source != 0) {\n    if ((*destination != 0) && ((uint)destination[2] <= (uint)source[1])) {\n      FUN_000825cc();\n      source[2] = destination[2];\n      goto endOfUpdate;\n    }\n    FUN_00081800();\n  }\n  *source = *destination;\n  source[1] = destination[1];\n  source[2] = destination[2];\n  *destination = 0;\n  destination[1] = 0;\nendOfUpdate:\n  destination[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_values_0008151c",
                "param_1": "source",
                "param_2": "destination",
                "LAB_00081558": "endOfUpdate"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_execute_00081560",
            "code": "\nint check_and_execute_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    FUN_0008151c();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_execute_00081560",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_variable_00081570",
            "code": "\nundefined4 updateVariable_00081570(int *data,int length,int offset)\n\n{\n  int result;\n  int oldValue;\n  \n  oldValue = data[2];\n  if (length == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(data,oldValue + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*data + data[2],length);\n    data[2] = oldValue + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_variable_00081570",
                "param_1": "data",
                "param_2": "length",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "oldValue"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "extract_data_0008159e",
            "code": "\nvoid extractData_0008159e(undefined4 input,undefined4 output,undefined4 data)\n\n{\n  undefined4 result;\n  undefined4 stackData;\n  \n  stackData = data;\n  FUN_00081570(input,&result,1,0,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "extract_data_0008159e",
                "param_1": "input",
                "param_2": "output",
                "param_3": "data",
                "local_c": "result",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_byte_value_000815b8",
            "code": "\nint checkByteValue_000815b8(byte **byteArrayPointer,byte *bytePointer)\n\n{\n  uint byteValue;\n  int result;\n  \n  if (byteArrayPointer[2] == (byte *)0x0) {\n    if (bytePointer == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (bytePointer != (byte *)0x0) {\n      byteValue = FUN_00082390(*byteArrayPointer);\n      goto LAB_000815d4;\n    }\n    bytePointer = *byteArrayPointer;\n  }\n  byteValue = (uint)*bytePointer;\nLAB_000815d4:\n  result = 1 - byteValue;\n  if (1 < byteValue) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_byte_value_000815b8",
                "param_1": "byteArrayPointer",
                "param_2": "bytePointer",
                "uVar1": "byteValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input_string)\n\n{\n  byte byte_val;\n  byte is_negative;\n  uint parsed_integer;\n  byte *current_char;\n  uint char_value;\n  byte *next_char;\n  int char_difference;\n  int is_valid;\n  uint divisor;\n  uint range_limit;\n  \n  current_char = *input_string;\n  if (*input_string == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_char = current_char;\n    current_char = next_char + 1;\n    char_value = (uint)*next_char;\n    byte_val = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + char_value + 1);\n    is_negative = byte_val & 8;\n  } while ((byte_val & 8) != 0);\n  if (char_value == 0x2d) {\n    current_char = next_char + 2;\n    char_value = (uint)next_char[1];\n    is_negative = 1;\n  }\n  else if (char_value == 0x2b) {\n    char_value = (uint)next_char[1];\n    current_char = next_char + 2;\n  }\n  if (is_negative == 0) {\n    range_limit = 0x7fffffff;\n  }\n  else {\n    range_limit = 0x80000000;\n  }\n  divisor = range_limit / 10;\n  is_valid = 0;\n  parsed_integer = 0;\n  do {\n    byte_val = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + char_value + 1);\n    if ((byte_val & 4) == 0) {\n      if ((byte_val & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            parsed_integer = 0x7fffffff;\n          }\n          else {\n            parsed_integer = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          parsed_integer = -parsed_integer;\n        }\n        return parsed_integer;\n      }\n      if ((byte_val & 3) == 1) {\n        char_difference = 0x37;\n      }\n      else {\n        char_difference = 0x57;\n      }\n      char_difference = char_value - char_difference;\n    }\n    else {\n      char_difference = char_value - 0x30;\n    }\n    if (9 < char_difference) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((divisor <= parsed_integer && parsed_integer != divisor) || ((parsed_integer == divisor && ((int)(range_limit % 10) < char_difference))))\n      {\n        is_valid = -1;\n      }\n      else {\n        parsed_integer = parsed_integer * 10 + char_difference;\n        is_valid = 1;\n      }\n    }\n    char_value = (uint)*current_char;\n    current_char = current_char + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input_string",
                "bVar1": "byte_val",
                "bVar2": "is_negative",
                "uVar3": "parsed_integer",
                "pbVar4": "current_char",
                "uVar5": "char_value",
                "pbVar6": "next_char",
                "iVar7": "char_difference",
                "iVar8": "is_valid",
                "uVar9": "divisor",
                "uVar10": "range_limit"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_main_loop_000815ec",
            "code": "\nvoid runMainLoop_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_main_loop_000815ec"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_final_value_00081624",
            "code": "\nint calculateFinalValue_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((relOffset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relOffset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_final_value_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "relOffset"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bits_00081684",
            "code": "\nint check_bits_00081684(uint *bits_array,uint bit_mask,uint expected_value,int num_iterations)\n\n{\n  int counter;\n  \n  do {\n    if ((*bits_array & bit_mask) != expected_value) {\n      do {\n        if ((*bits_array & bit_mask) == expected_value) {\n          counter = 0;\n          do {\n            if ((*bits_array & bit_mask) != expected_value) {\n              return counter;\n            }\n            counter = counter + 1;\n          } while (num_iterations != counter);\n          return 0;\n        }\n        num_iterations = num_iterations + -1;\n      } while (num_iterations != 0);\n      return 0;\n    }\n    num_iterations = num_iterations + -1;\n  } while (num_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bits_00081684",
                "param_1": "bits_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "num_iterations",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_variable_value_000816d8",
            "code": "\nundefined4 getGlobalVariableValue_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_variable_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_data_000816ec",
            "code": "\nvoid updateData_000816ec(dword data1,dword data2,dword data3)\n\n{\n  dword *dataArray;\n  uint index;\n  uint bitMask;\n  code *jumpTableFunc;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  dataArray = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    dataArray = (dword *)FUN_000817f0(400);\n    if (dataArray == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)(0xffffffff);\n      return;\n    }\n    *dataArray = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    dataArray[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)dataArray;\n    dataArray[0x62] = 0;\n    dataArray[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  dataArray[index + 0x22] = data1;\n  dataArray[0x62] = dataArray[0x62] | bitMask;\n  dataArray[index + 0x42] = data3;\n  dataArray[99] = bitMask | dataArray[99];\n  dataArray[1] = index + 1;\n  dataArray[index + 2] = data2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_data_000816ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "pdVar1": "dataArray",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunc"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "assertion_failed_000816f8",
            "code": "\nvoid assertionFailed_000816f8(undefined4 msg1,undefined4 msg2,char *fileName,undefined4 lineNum)\n\n{\n  undefined4 msgFile;\n  undefined4 line;\n  char *functionName;\n  undefined8 result;\n  \n  msgFile = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (fileName == (char *)0x0) goto LAB_0008171c;\n  line = lineNum;\n  functionName = \", function: \";\n  do {\n    lineNum = msg1;\n    FUN_00081750(msgFile,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",line,msg1,msg2,\n                 functionName,fileName);\n    result = FUN_000836ec();\n    msg2 = (undefined4)((ulonglong)result >> 0x20);\n    msgFile = (undefined4)result;\nLAB_0008171c:\n    fileName = \"\";\n    line = lineNum;\n    functionName = fileName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "msg1",
                "param_2": "msg2",
                "param_3": "fileName",
                "param_4": "lineNum",
                "uVar1": "msgFile",
                "uVar2": "line",
                "pcVar3": "functionName",
                "uVar4": "result"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "execute_elf_relocation_00081750",
            "code": "\nvoid executeElfRelocation_00081750(undefined4 offset,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  \n  param2_copy = param2;\n  param3_copy = param3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param1,&param2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "execute_elf_relocation_00081750",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uStack_8": "param2_copy",
                "uStack_4": "param3_copy"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int iterationCount;\n  code **functionSetPointer;\n  \n  FUNC_00085844();\n  functionSetPointer = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionSetPointer = functionSetPointer + 1;\n    (**functionSetPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "ppcVar2": "functionSetPointer",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_data_000817c8",
            "code": "\nvoid processData_000817c8(undefined4 inputParam,undefined4 stackVar1,undefined4 stackVar2,undefined4 stackVar3)\n\n{\n  undefined4 stackVar4;\n  undefined4 stackVar5;\n  undefined4 stackVar6;\n  \n  stackVar4 = stackVar1;\n  stackVar5 = stackVar2;\n  stackVar6 = stackVar3;\n  FUN_0008289c(relArray[140].r_offset,\n               *(undefined4 *)(relArray[140].r_offset + 8),inputParam,&stackVar4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "inputParam",
                "param_2": "stackVar1",
                "param_3": "stackVar2",
                "param_4": "stackVar3",
                "uStack_c": "stackVar4",
                "uStack_8": "stackVar5",
                "uStack_4": "stackVar6",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "execute_relocation_000817f0",
            "code": "\nvoid executeRelocation_000817f0(undefined4 param)\n\n{\n  FUN_00081810(relocationTable[140]offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "execute_relocation_000817f0",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                ".r_offset": "offset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "resolve_elf_relocation_00081800",
            "code": "\nvoid resolveElfRelocation_00081800(undefined4 data)\n\n{\n  FUN_00083b10(relocationTable[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "resolve_elf_relocation_00081800",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "relocate_symbols_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateSymbols_00081810(undefined4 *result,uint size)\n\n{\n  dword relInfo;\n  int offset;\n  uint sizeAligned;\n  uint newSize;\n  int prevOffset;\n  uint diff;\n  dword entryOffset;\n  uint firstOffset;\n  int nextOffset;\n  undefined *ptr;\n  dword prevEntryOffset;\n  dword prevRelInfo;\n  int index;\n  dword *relArray;\n  uint alignedSize;\n  undefined *newEntry;\n  dword *infoArray;\n  uint relIndex;\n  \n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < size)) {\nLAB_00081876:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(result);\n  relInfo = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((index != alignedSize + 0x20070464) ||\n       (offset = index + 8, index = *(int *)(index + 0x14), offset != index)) {\n      prevOffset = *(int *)(index + 0xc);\n      nextOffset = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      alignedSize = *(uint *)(nextOffset + 4);\n      offset = *(int *)(index + 8);\n      *(int *)(offset + 0xc) = prevOffset;\n      *(int *)(prevOffset + 8) = offset;\n      *(uint *)(nextOffset + 4) = alignedSize | 1;\n      FUNC_00081f98(result);\n      return (int *)(index + 8);\n    }\n    relIndex = (alignedSize >> 3) + 2;\n  }\n  else {\n    relIndex = alignedSize >> 9;\n    if (relIndex == 0) {\n      offset = 0x7e;\n      index = 0x3f;\n    }\n    else if (relIndex < 5) {\n      index = (alignedSize >> 6) + 0x38;\n      offset = index * 2;\n    }\n    else if (relIndex < 0x15) {\n      index = relIndex + 0x5b;\n      offset = index * 2;\n    }\n    else if (relIndex < 0x55) {\n      index = (alignedSize >> 0xc) + 0x6e;\n      offset = index * 2;\n    }\n    else if (relIndex < 0x155) {\n      index = (alignedSize >> 0xf) + 0x77;\n      offset = index * 2;\n    }\n    else if (relIndex < 0x555) {\n      index = (alignedSize >> 0x12) + 0x7c;\n      offset = index * 2;\n    }\n    else {\n      offset = 0xfc;\n      index = 0x7e;\n    }\n    for (entryOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[offset]; offset * 4 + 0x20070464U != entryOffset\n        ; entryOffset = *(dword *)(entryOffset + 0xc)) {\n      relIndex = *(uint *)(entryOffset + 4) & 0xfffffffc;\n      prevOffset = relIndex - alignedSize;\n      if (0xf < prevOffset) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < prevOffset) {\n        offset = relIndex + entryOffset;\n        alignedSize = *(uint *)(offset + 4);\n        prevOffset = *(int *)(entryOffset + 0xc);\n        index = *(int *)(entryOffset + 8);\n        *(int *)(index + 0xc) = prevOffset;\n        *(int *)(prevOffset + 8) = index;\n        *(uint *)(offset + 4) = alignedSize | 1;\n        FUNC_00081f98(result);\n        return (int *)(entryOffset + 8);\n      }\n    }\n    relIndex = index + 1;\n  }\n  entryOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    sizeAligned = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    newSize = sizeAligned & 0xfffffffc;\n    diff = newSize - alignedSize;\n    if (0xf < (int)diff) {\n      entryOffset = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = entryOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = entryOffset;\n      *(undefined4 *)(entryOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(entryOffset + 8) = 0x2007046c;\n      *(uint *)(entryOffset + 4) = diff | 1;\n      *(uint *)(entryOffset + diff) = diff;\n      FUNC_00081f98(result);\n      return (int *)(relInfo + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)diff) {\n      *(uint *)(newSize + relInfo + 4) = *(uint *)(newSize + relInfo + 4) | 1;\n      FUNC_00081f98(result);\n      return (int *)(relInfo + 8);\n    }\n    if (newSize < 0x200) {\n      newSize = sizeAligned & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + newSize);\n      entryOffset = 1 << ((int)(sizeAligned >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relInfo + 8) = index;\n      *(uint *)(relInfo + 0xc) = newSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = entryOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + newSize) = relInfo;\n      *(dword *)(index + 0xc) = relInfo;\n    }\n    else {\n      diff = sizeAligned >> 9;\n      if (diff < 5) {\n        offset = (sizeAligned >> 6) + 0x38;\n        index = offset * 2;\n      }\n      else if (diff < 0x15) {\n        offset = diff + 0x5b;\n        index = offset * 2;\n      }\n      else if (diff < 0x55) {\n        offset = (sizeAligned >> 0xc) + 0x6e;\n        index = offset * 2;\n      }\n      else if (diff < 0x155) {\n        offset = (sizeAligned >> 0xf) + 0x77;\n        index = offset * 2;\n      }\n      else if (diff < 0x555) {\n        offset = (sizeAligned >> 0x12) + 0x7c;\n        index = offset * 2;\n      }\n      else {\n        index = 0xfc;\n        offset = 0x7e;\n      }\n      entryOffset = index * 4 + 0x20070464;\n      prevEntryOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (prevEntryOffset == entryOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (offset >> 2 & 0xffU);\n        prevRelInfo = prevEntryOffset;\n      }\n      else {\n        do {\n          prevRelInfo = prevEntryOffset;\n          if ((*(uint *)(prevEntryOffset + 4) & 0xfffffffc) <= newSize) break;\n          prevEntryOffset = *(dword *)(prevEntryOffset + 8);\n          prevRelInfo = prevEntryOffset;\n        } while (entryOffset != prevEntryOffset);\n        prevEntryOffset = *(dword *)(prevRelInfo + 0xc);\n      }\n      entryOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relInfo + 0xc) = prevEntryOffset;\n      *(dword *)(relInfo + 8) = prevRelInfo;\n      *(dword *)(prevEntryOffset + 8) = relInfo;\n      *(dword *)(prevRelInfo + 0xc) = relInfo;\n    }\n  }\n  relInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  sizeAligned = 1 << ((int)relIndex >> 2 & 0xffU);\n  if (sizeAligned <= entryOffset) {\n    if ((entryOffset & sizeAligned) == 0) {\n      relIndex = relIndex & 0xfffffffc;\n      do {\n        sizeAligned = sizeAligned << 1;\n        relIndex = relIndex + 4;\n      } while ((entryOffset & sizeAligned) == 0);\n    }\n    do {\n      infoArray = &Elf32_Rel_ARRAY_20070000[relIndex + 0x8c].r_info;\n      relArray = infoArray;\n      newSize = relIndex;\n      do {\n        for (ptr = (undefined *)relArray[3]; relArray != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          diff = *(uint *)(ptr + 4) & 0xfffffffc;\n          firstOffset = diff - alignedSize;\n          if (0xf < (int)firstOffset) {\n            offset = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            newEntry = ptr + alignedSize;\n            *(uint *)(ptr + 4) = alignedSize | 1;\n            *(int *)(offset + 0xc) = index;\n            *(int *)(index + 8) = offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newEntry;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newEntry;\n            *(undefined4 *)(newEntry + 0xc) = 0x2007046c;\n            *(undefined4 *)(newEntry + 8) = 0x2007046c;\n            *(uint *)(newEntry + 4) = firstOffset | 1;\n            *(uint *)(newEntry + firstOffset) = firstOffset;\n            FUNC_00081f98(result);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)firstOffset) {\n            index = *(int *)(ptr + 8);\n            offset = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + diff + 4) = *(uint *)(ptr + diff + 4) | 1;\n            *(int *)(index + 0xc) = offset;\n            *(int *)(offset + 8) = index;\n            FUNC_00081f98(result);\n            return (int *)(ptr + 8);\n          }\n        }\n        newSize = newSize + 1;\n        relArray = relArray + 2;\n      } while ((newSize & 3) != 0);\n      do {\n        diff = relIndex & 3;\n        ptr = (undefined *)(infoArray + -2);\n        relIndex = relIndex - 1;\n        if (diff == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~sizeAligned;\n          break;\n        }\n        infoArray = (dword *)*infoArray;\n      } while (infoArray == (dword *)ptr);\n      sizeAligned = sizeAligned * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= sizeAligned &&\n           sizeAligned - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (relIndex = newSize, sizeAligned == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & sizeAligned) == 0; sizeAligned = sizeAligned << 1) {\n        relIndex = relIndex + 4;\n      }\n    } while( true );\n  }\n  relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= relIndex) &&\n     (sizeAligned = relIndex - alignedSize, entryOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)sizeAligned))\n  goto LAB_00081b1a;\n  sizeAligned = Elf32_Rel_ARRAY_20070000[141].r_info + relIndex;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    newSize = alignedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    newSize = alignedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  entryOffset = FUN_0008236c(result,newSize);\n  if ((entryOffset == 0xffffffff) || ((entryOffset < sizeAligned && (relInfo != 0x20070464)))) {\n    relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    entryOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    diff = DAT_2007121c + newSize;\n    DAT_2007121c = diff;\n    if ((sizeAligned == entryOffset) && ((sizeAligned & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = newSize + relIndex | 1;\n    }\n    else {\n      prevEntryOffset = entryOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevEntryOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = diff + (entryOffset - sizeAligned);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevEntryOffset;\n      sizeAligned = entryOffset & 7;\n      if (sizeAligned == 0) {\n        index = 0x1000;\n      }\n      else {\n        entryOffset = entryOffset + (8 - sizeAligned);\n        index = 0x1008 - sizeAligned;\n      }\n      index = index - (newSize + entryOffset & 0xfff);\n      offset = FUN_0008236c(result,index);\n      if (offset == -1) {\n        sizeAligned = 1;\n        index = 0;\n      }\n      else {\n        sizeAligned = (offset - entryOffset) + index | 1;\n      }\n      diff = DAT_2007121c + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = entryOffset;\n      DAT_2007121c = diff;\n      *(uint *)(entryOffset + 4) = sizeAligned;\n      if (relInfo != 0x20070464) {\n        if (relIndex < 0x10) {\n          *(undefined4 *)(entryOffset + 4) = 1;\n          relIndex = 0;\n          goto LAB_00081b04;\n        }\n        relIndex = relIndex - 0xc & 0xfffffff8;\n        *(uint *)(relInfo + 4) = relIndex | *(uint *)(relInfo + 4) & 1;\n        *(undefined4 *)(relInfo + relIndex + 4) = 5;\n        *(undefined4 *)(relInfo + relIndex + 8) = 5;\n        if (0xf < relIndex) {\n          FUN_00083b10(result,relInfo + 8);\n          diff = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < diff) {\n      DAT_20071214 = diff;\n    }\n    if (DAT_20071210 < diff) {\n      DAT_20071210 = diff;\n    }\n    relIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    entryOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  sizeAligned = relIndex - alignedSize;\n  if ((relIndex < alignedSize) || ((int)sizeAligned < 0x10)) {\n    FUNC_00081f98(result);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + entryOffset;\n  *(uint *)(entryOffset + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = sizeAligned | 1;\n  FUNC_00081f98(result);\n  return (int *)(entryOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "relocate_symbols_00081810",
                "param_1": "result",
                "param_2": "size",
                "dVar1": "relInfo",
                "iVar2": "offset",
                "uVar3": "sizeAligned",
                "uVar4": "newSize",
                "iVar5": "prevOffset",
                "uVar6": "diff",
                "dVar7": "entryOffset",
                "uVar8": "firstOffset",
                "iVar9": "nextOffset",
                "puVar10": "ptr",
                "dVar11": "prevEntryOffset",
                "dVar12": "prevRelInfo",
                "iVar13": "index",
                "pdVar14": "relArray",
                "uVar15": "alignedSize",
                "puVar16": "newEntry",
                "pdVar17": "infoArray",
                "uVar18": "relIndex"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *srcPtr;\n  undefined4 *tmpPtr;\n  uint remainingLength;\n  uint copyLength;\n  bool shouldContinue;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copyLength = length - 4;\n      if (3 < length) {\n        do {\n          dstPtr = source;\n          tmpPtr = srcPtr;\n          shouldContinue = copyLength != 0;\n          copyLength = copyLength - 1;\n          *(undefined *)tmpPtr = *(undefined *)dstPtr;\n          srcPtr = (undefined4 *)((int)tmpPtr + 1);\n          source = (undefined4 *)((int)dstPtr + 1);\n        } while (shouldContinue);\n        *(undefined *)(undefined4 *)((int)tmpPtr + 1) =\n             *(undefined *)(undefined4 *)((int)dstPtr + 1);\n        *(undefined *)((int)tmpPtr + 2) = *(undefined *)((int)dstPtr + 2);\n        *(undefined *)((int)tmpPtr + 3) = *(undefined *)((int)dstPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copyLength = 4 - ((uint)destination & 3);\n      length = length - copyLength;\n      dstPtr = destination;\n      tmpPtr = source;\n      if (((uint)destination & 1) != 0) {\n        tmpPtr = (undefined4 *)((int)source + 1);\n        dstPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = dstPtr;\n      source = tmpPtr;\n      if ((copyLength & 2) != 0) {\n        source = (undefined4 *)((int)tmpPtr + 2);\n        srcPtr = (undefined4 *)((int)dstPtr + 2);\n        *(undefined2 *)dstPtr = *(undefined2 *)tmpPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      shouldContinue = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (shouldContinue);\n  }\n  copyLength = remainingLength + 0xc;\n  tmpPtr = srcPtr;\n  dstPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = dstPtr + 1;\n      *tmpPtr = *dstPtr;\n      shouldContinue = 3 < copyLength;\n      copyLength = copyLength - 4;\n      srcPtr = tmpPtr + 1;\n      tmpPtr = tmpPtr + 1;\n      dstPtr = source;\n    } while (shouldContinue);\n  }\nLAB_00081dcc:\n  if (copyLength + 4 != 0) {\n    dstPtr = srcPtr;\n    tmpPtr = source;\n    if ((copyLength & 1) != 0) {\n      tmpPtr = (undefined4 *)((int)source + 1);\n      dstPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((copyLength + 4 & 2) != 0) {\n      *(undefined2 *)dstPtr = *(undefined2 *)tmpPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "puVar3": "tmpPtr",
                "uVar4": "remainingLength",
                "uVar5": "copyLength",
                "bVar6": "shouldContinue"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_and_expand_buffer_00081e34",
            "code": "\nvoid copyAndExpandBuffer_00081e34(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint temp;\n  undefined *destEnd;\n  uint remainder;\n  \n  if ((src < dest) && (destEndPtr = (undefined4 *)((int)src + length), dest < destEndPtr)) {\n    destEnd = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    destEndPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remainder = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp = remainder;\n    destEndPtr = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        temp = temp - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < temp);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = length & 3;\n    }\n    length = remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  destEndPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_and_expand_buffer_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "temp",
                "puVar6": "destEnd",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "fill_array_with_byte_00081f00",
            "code": "\nvoid fillArrayWithByte_00081f00(undefined4 *array,undefined byte,uint length)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  undefined4 bytePattern;\n  uint remainingLength;\n  bool isZero;\n  \n  if (((uint)array & 3) != 0) {\n    isZero = length == 0;\n    ptr1 = array;\n    length = length - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      array = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = byte;\n      if (((uint)array & 3) == 0) break;\n      isZero = length == 0;\n      ptr1 = array;\n      length = length - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    bytePattern = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    remainingLength = length;\n    ptr1 = array;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      do {\n        *ptr1 = bytePattern;\n        ptr1[1] = bytePattern;\n        ptr1[2] = bytePattern;\n        ptr1[3] = bytePattern;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)array + (remainingLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      array = array + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      ptr1 = array;\n      if (length < 4) goto LAB_00081f7c;\n    }\n    do {\n      length = length - 4;\n      *array = bytePattern;\n      array = array + 1;\n    } while (3 < length);\n    array = (undefined4 *)((int)ptr1 + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_00081f7c:\n  if (length != 0) {\n    ptr1 = array;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = byte;\n      ptr1 = ptr2;\n    } while (ptr2 != (undefined4 *)(length + (int)array));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "fill_array_with_byte_00081f00",
                "param_1": "array",
                "param_2": "byte",
                "param_3": "length",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "bytePattern",
                "uVar4": "remainingLength",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "execute_relocation_00081f9c",
            "code": "\nvoid executeRelocation_00081f9c(undefined4 param1,undefined4 param2)\n\n{\n  FUN_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "execute_relocation_00081f9c",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_block_00081fac",
            "code": "\nint * allocateMemoryBlock_00081fac(undefined4 *ptrToUndefined4,int *ptrToInt,uint size)\n\n{\n  dword dwordValue;\n  int *resultPtr;\n  uint uintValue;\n  int intVar1;\n  uint uintVar1;\n  int intVar2;\n  int *ptrVar1;\n  uint uintVar2;\n  uint uintVar3;\n  int *ptrVar2;\n  \n  if (ptrToInt == (int *)0x0) {\n    resultPtr = (int *)FUN_00081810(ptrToUndefined4,size);\n    return resultPtr;\n  }\n  FUNC_00081f94();\n  uintVar1 = ptrToInfo2;\n  uintVar2 = uintVar1 & 0xfffffffc;\n  resultPtr = ptrToInt + -2;\n  if (size + 0xb < 0x17) {\n    uintVar3 = 0x10;\n  }\n  else {\n    uintVar3 = size + 0xb & 0xfffffff8;\n    if ((int)uintVar3 < 0) goto label1;\n  }\n  if (uintVar3 < size) {\nlabel1:\n    *ptrToUndefined4 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uintVar2 < (int)uintVar3) {\n    dwordValue = (int)resultPtr + uintVar2;\n    if (elfRelArray[141].r_info == dwordValue) {\n      uintValue = *(uint *)(elfRelArray[141].r_info + 4) & 0xfffffffc;\n      dwordValue = elfRelArray[141].r_info;\n      if ((int)(uintVar3 + 0x10) <= (int)(uintValue + uintVar2)) {\n        elfRelArray[141].r_info = (int)resultPtr + uintVar3;\n        *(uint *)(elfRelArray[141].r_info + 4) = (uintValue + uintVar2) - uintVar3 | 1;\n        ptrToInfo2 = uintVar3 | ptrToInfo2 & 1U;\n        FUNC_00081f98(ptrToUndefined4);\n        return ptrToInt;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(dwordValue + 4) & 0xfffffffe) + dwordValue + 4) & 1) == 0) {\n      uintValue = *(uint *)(dwordValue + 4) & 0xfffffffc;\n      if ((int)uintVar3 <= (int)(uintValue + uintVar2)) {\n        intVar2 = *(int *)(dwordValue + 0xc);\n        intVar1 = *(int *)(dwordValue + 8);\n        *(int *)(intVar1 + 0xc) = intVar2;\n        *(int *)(intVar2 + 8) = intVar1;\n        uintVar2 = uintValue + uintVar2;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uintValue = 0;\n      dwordValue = 0;\n    }\n    if (-1 < (int)(uintVar1 << 0x1f)) {\n      ptrVar2 = (int *)((int)resultPtr - ptrToInt[-2]);\n      uintVar1 = (ptrVar2[1] & 0xfffffffcU) + uintVar2;\n      if (dwordValue != 0) {\n        if (dwordValue == elfRelArray[141].r_info) {\n          if ((int)(uintVar3 + 0x10) <= (int)(uintValue + uintVar1)) {\n            resultPtr = ptrVar2 + 2;\n            intVar1 = *resultPtr;\n            intVar2 = ptrVar2[3];\n            uintVar2 = uintVar2 - 4;\n            *(int *)(intVar1 + 0xc) = intVar2;\n            *(int *)(intVar2 + 8) = intVar1;\n            if (uintVar2 < 0x25) {\n              ptrVar1 = resultPtr;\n              if (0x13 < uintVar2) {\n                ptrVar2[2] = *ptrToInt;\n                ptrVar2[3] = ptrToInt[1];\n                if (uintVar2 < 0x1c) {\n                  ptrToInt = ptrToInt + 2;\n                  ptrVar1 = ptrVar2 + 4;\n                }\n                else {\n                  ptrVar2[4] = ptrToInt[2];\n                  ptrVar2[5] = ptrToInt[3];\n                  if (uintVar2 == 0x24) {\n                    ptrVar2[6] = ptrToInt[4];\n                    ptrVar1 = ptrToInt + 5;\n                    ptrToInt = ptrToInt + 6;\n                    ptrVar2[7] = *ptrVar1;\n                    ptrVar1 = ptrVar2 + 8;\n                  }\n                  else {\n                    ptrToInt = ptrToInt + 4;\n                    ptrVar1 = ptrVar2 + 6;\n                  }\n                }\n              }\n              *ptrVar1 = *ptrToInt;\n              ptrVar1[1] = ptrToInt[1];\n              ptrVar1[2] = ptrToInt[2];\n            }\n            else {\n              FUN_00081e34(resultPtr,ptrToInt);\n            }\n            elfRelArray[141].r_info = (int)ptrVar2 + uintVar3;\n            *(uint *)(elfRelArray[141].r_info + 4) = (uintValue + uintVar1) - uintVar3 | 1;\n            ptrVar2[1] = uintVar3 | ptrVar2[1] & 1U;\n            FUNC_00081f98(ptrToUndefined4);\n            return resultPtr;\n          }\n        }\n        else {\n          uintValue = uintValue + uintVar1;\n          if ((int)uintVar3 <= (int)uintValue) {\n            intVar2 = *(int *)(dwordValue + 0xc);\n            intVar1 = *(int *)(dwordValue + 8);\n            *(int *)(intVar1 + 0xc) = intVar2;\n            *(int *)(intVar2 + 8) = intVar1;\n            ptrVar1 = ptrVar2 + 2;\n            intVar1 = *ptrVar1;\n            intVar2 = ptrVar2[3];\n            uintVar1 = uintVar2 - 4;\n            *(int *)(intVar1 + 0xc) = intVar2;\n            *(int *)(intVar2 + 8) = intVar1;\n            uintVar2 = uintValue;\n            if (uintVar1 < 0x25) {\n              resultPtr = ptrVar1;\n              if (0x13 < uintVar1) {\n                ptrVar2[2] = *ptrToInt;\n                ptrVar2[3] = ptrToInt[1];\n                if (uintVar1 < 0x1c) {\n                  ptrToInt = ptrToInt + 2;\n                  resultPtr = ptrVar2 + 4;\n                }\n                else {\n                  ptrVar2[4] = ptrToInt[2];\n                  ptrVar2[5] = ptrToInt[3];\n                  if (uintVar1 == 0x24) {\n                    ptrVar2[6] = ptrToInt[4];\n                    resultPtr = ptrToInt + 5;\n                    ptrToInt = ptrToInt + 6;\n                    ptrVar2[7] = *resultPtr;\n                    resultPtr = ptrVar2 + 8;\n                  }\n                  else {\n                    ptrToInt = ptrToInt + 4;\n                    resultPtr = ptrVar2 + 6;\n                  }\n                }\n              }\n              *resultPtr = *ptrToInt;\n              resultPtr[1] = ptrToInt[1];\n              resultPtr[2] = ptrToInt[2];\n              uintVar1 = ptrVar2[1];\n              resultPtr = ptrVar2;\n              ptrToInt = ptrVar1;\n            }\n            else {\n              FUN_00081e34(ptrVar1,ptrToInt);\n              uintVar1 = ptrVar2[1];\n              resultPtr = ptrVar2;\n              ptrToInt = ptrVar1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uintVar3 <= (int)uintVar1) {\n        ptrVar1 = ptrVar2 + 2;\n        intVar1 = *ptrVar1;\n        intVar2 = ptrVar2[3];\n        uintValue = uintVar2 - 4;\n        *(int *)(intVar1 + 0xc) = intVar2;\n        *(int *)(intVar2 + 8) = intVar1;\n        uintVar2 = uintVar1;\n        if (uintValue < 0x25) {\n          resultPtr = ptrVar1;\n          if (0x13 < uintValue) {\n            ptrVar2[2] = *ptrToInt;\n            ptrVar2[3] = ptrToInt[1];\n            if (uintValue < 0x1c) {\n              ptrToInt = ptrToInt + 2;\n              resultPtr = ptrVar2 + 4;\n            }\n            else {\n              ptrVar2[4] = ptrToInt[2];\n              ptrVar2[5] = ptrToInt[3];\n              if (uintValue == 0x24) {\n                ptrVar2[6] = ptrToInt[4];\n                resultPtr = ptrToInt + 5;\n                ptrToInt = ptrToInt + 6;\n                ptrVar2[7] = *resultPtr;\n                resultPtr = ptrVar2 + 8;\n              }\n              else {\n                ptrToInt = ptrToInt + 4;\n                resultPtr = ptrVar2 + 6;\n              }\n            }\n          }\n          *resultPtr = *ptrToInt;\n          resultPtr[1] = ptrToInt[1];\n          resultPtr[2] = ptrToInt[2];\n          uintVar1 = ptrVar2[1];\n          resultPtr = ptrVar2;\n          ptrToInt = ptrVar1;\n        }\n        else {\n          FUN_00081e34(ptrVar1,ptrToInt);\n          uintVar1 = ptrVar2[1];\n          resultPtr = ptrVar2;\n          ptrToInt = ptrVar1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    ptrVar2 = (int *)FUN_00081810(ptrToUndefined4,size);\n    if (ptrVar2 == (int *)0x0) goto LAB_000820a0;\n    uintVar1 = ptrToInfo2;\n    if (ptrVar2 + -2 != (int *)((uintVar1 & 0xfffffffe) + (int)resultPtr)) {\n      uintVar2 = uintVar2 - 4;\n      if (uintVar2 < 0x25) {\n        resultPtr = ptrToInt;\n        ptrVar1 = ptrVar2;\n        if (0x13 < uintVar2) {\n          *ptrVar2 = *ptrToInt;\n          ptrVar2[1] = ptrToInt[1];\n          if (uintVar2 < 0x1c) {\n            resultPtr = ptrToInt + 2;\n            ptrVar1 = ptrVar2 + 2;\n          }\n          else {\n            ptrVar2[2] = ptrToInt[2];\n            ptrVar2[3] = ptrToInt[3];\n            if (uintVar2 == 0x24) {\n              ptrVar2[4] = ptrToInt[4];\n              ptrVar2[5] = ptrToInt[5];\n              resultPtr = ptrToInt + 6;\n              ptrVar1 = ptrVar2 + 6;\n            }\n            else {\n              resultPtr = ptrToInt + 4;\n              ptrVar1 = ptrVar2 + 4;\n            }\n          }\n        }\n        *ptrVar1 = *resultPtr;\n        ptrVar1[1] = resultPtr[1];\n        ptrVar1[2] = resultPtr[2];\n      }\n      else {\n        FUN_00081e34(ptrVar2,ptrToInt);\n      }\n      FUN_00083b10(ptrToUndefined4,ptrToInt);\n      goto LAB_000820a0;\n    }\n    uintVar2 = uintVar2 + (ptrVar2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uintValue = uintVar2 - uintVar3;\n  ptrVar2 = ptrToInt;\n  if (uintValue < 0x10) {\n    resultPtr[1] = uintVar1 & 1 | uintVar2;\n    *(uint *)((int)resultPtr + uintVar2 + 4) = *(uint *)((int)resultPtr + uintVar2 + 4) | 1;\n  }\n  else {\n    resultPtr[1] = uintVar1 & 1 | uintVar3;\n    *(uint *)((int)resultPtr + uintVar3 + 4) = uintValue | 1;\n    *(uint *)((int)resultPtr + uintValue + uintVar3 + 4) = *(uint *)((int)resultPtr + uintValue + uintVar3 + 4) | 1;\n    FUN_00083b10(ptrToUndefined4,(int)resultPtr + uintVar3 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(ptrToUndefined4);\n  return ptrVar2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_block_00081fac",
                "param_1": "ptrToUndefined4",
                "param_2": "ptrToInt",
                "param_3": "size",
                "dVar1": "dwordValue",
                "piVar2": "resultPtr",
                "uVar3": "uintValue",
                "iVar4": "intVar1",
                "uVar5": "uintVar1",
                "iVar6": "intVar2",
                "piVar7": "ptrVar1",
                "uVar8": "uintVar2",
                "uVar9": "uintVar3",
                "piVar10": "ptrVar2",
                "LAB_00082078": "label1",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "param_2[-1]": "ptrToInfo2"
            },
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_error_and_set_result_0008236c",
            "code": "\nvoid checkErrorAndSetResult_0008236c(int *result,undefined4 input)\n\n{\n  int error;\n  \n  DAT_20071244 = 0;\n  error = FUN_00080e88(input);\n  if ((error == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_error_and_set_result_0008236c",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "error"
            },
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_uint_arrays_00082390",
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint tmp1;\n  uint tmp2;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      tmp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        tmp2 = tmp1 >> 0x10 & 0xff;\n        result = tmp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (tmp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          tmp2 = tmp1 >> 8 & 0xff;\n          result = tmp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (tmp2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (tmp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (tmp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    tmp1 = (uint)array2 & 3;\n    if (tmp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (tmp1 == 2) {\n        tmp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          tmp3 = *ptr1;\n          tmp1 = tmp1 >> 0x10;\n          tmp4 = tmp3 + 0xfefefeff & ~tmp3;\n          tmp5 = tmp4 & 0x80808080;\n          tmp2 = tmp3 & 0xffff;\n          if ((tmp4 & 0x8080) != 0 || tmp2 != tmp1) goto LAB_0008258e;\n          tmp1 = *array2;\n          tmp2 = tmp2 ^ tmp3;\n          tmp3 = tmp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (tmp5 == 0 && tmp2 == tmp3);\n      }\n      else if (tmp1 < 2) {\n        tmp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          tmp3 = *ptr1;\n          tmp1 = tmp1 >> 8;\n          tmp4 = tmp3 + 0xfefefeff & ~tmp3;\n          tmp5 = tmp4 & 0x80808080;\n          tmp2 = tmp3 & 0xffffff;\n          if ((tmp4 & 0x808080) != 0 || tmp2 != tmp1) goto LAB_0008258e;\n          tmp1 = *array2;\n          tmp2 = tmp2 ^ tmp3;\n          tmp3 = tmp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (tmp5 == 0 && tmp2 == tmp3);\n      }\n      else {\n        tmp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          tmp3 = *ptr1;\n          tmp1 = tmp1 >> 0x18;\n          tmp4 = tmp3 + 0xfefefeff & ~tmp3;\n          tmp5 = tmp4 & 0x80808080;\n          tmp2 = tmp3 & 0xff;\n          if ((tmp4 & 0x80) != 0 || tmp2 != tmp1) goto LAB_0008258e;\n          tmp1 = *array2;\n          tmp2 = tmp2 ^ tmp3;\n          tmp3 = tmp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (tmp5 == 0 && tmp2 == tmp3);\n      }\n      tmp2 = tmp2 << 0x18 | (tmp2 >> 8 & 0xff) << 0x10 | (tmp2 >> 0x10 & 0xff) << 8 |\n              tmp2 >> 0x18;\n      tmp1 = (tmp3 >> 8 & 0xff) << 0x10 | (tmp3 >> 0x10 & 0xff) << 8 | tmp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      tmp1 = *ptr1;\n      ptr2 = array2 + 1;\n      tmp3 = *array2;\n      tmp5 = tmp1 + 0xfefefeff & ~tmp1 & 0x80808080;\n      if (tmp1 != tmp3 || tmp5 != 0) {\nLAB_0008259a:\n        tmp2 = tmp1 << 0x18 | (tmp1 >> 8 & 0xff) << 0x10 | (tmp1 >> 0x10 & 0xff) << 8 |\n                tmp1 >> 0x18;\n        tmp1 = tmp3 << 0x18 | (tmp3 >> 8 & 0xff) << 0x10 | (tmp3 >> 0x10 & 0xff) << 8 |\n                tmp3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      tmp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        tmp2 = *array1;\n        tmp3 = array1[1];\n        tmp5 = tmp2 + 0xfefefeff & ~tmp2 & 0x80808080;\n        if (tmp2 != tmp1 || tmp5 != 0) goto LAB_0008258e;\n        tmp4 = *ptr1;\n        tmp1 = ptr1[1];\n        tmp5 = tmp3 + 0xfefefeff & ~tmp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (tmp3 == tmp4 && tmp5 == 0);\n      tmp2 = tmp3 << 0x18 | (tmp3 >> 8 & 0xff) << 0x10 | (tmp3 >> 0x10 & 0xff) << 8 |\n              tmp3 >> 0x18;\n      tmp1 = tmp4 << 0x18 | (tmp4 >> 8 & 0xff) << 0x10 | (tmp4 >> 0x10 & 0xff) << 8 |\n              tmp4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    tmp1 = *array1;\n    tmp2 = array1[1];\n    tmp3 = *array2;\n    tmp4 = array2[1];\n    tmp5 = tmp1 + 0xfefefeff & ~tmp1 & 0x80808080;\n    if (tmp1 != tmp3 || tmp5 != 0) goto LAB_0008259a;\n    tmp5 = tmp2 + 0xfefefeff & ~tmp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (tmp2 == tmp4 && tmp5 == 0);\n  tmp2 = tmp2 << 0x18 | (tmp2 >> 8 & 0xff) << 0x10 | (tmp2 >> 0x10 & 0xff) << 8 | tmp2 >> 0x18;\n  tmp1 = tmp4 << 0x18 | (tmp4 >> 8 & 0xff) << 0x10 | (tmp4 >> 0x10 & 0xff) << 8 | tmp4 >> 0x18;\nLAB_0008259e:\n  tmp3 = tmp5 << 0x18 | (tmp5 >> 8 & 0xff) << 0x10 | (tmp5 >> 0x10 & 0xff) << 8 | tmp5 >> 0x18;\n  if (tmp3 != 0) {\n    tmp3 = 0x18 - leading_zero_count(tmp3);\n    tmp2 = tmp2 >> (tmp3 & 0xff);\n    tmp1 = tmp1 >> (tmp3 & 0xff);\n  }\n  result = 1;\n  if (tmp2 <= tmp1) {\n    result = -(uint)(tmp2 < tmp1);\n  }\n  return result;\nLAB_0008258e:\n  tmp2 = tmp2 << 0x18 | (tmp2 >> 8 & 0xff) << 0x10 | (tmp2 >> 0x10 & 0xff) << 8 | tmp2 >> 0x18;\n  tmp1 = tmp1 << 0x18 | (tmp1 >> 8 & 0xff) << 0x10 | (tmp1 >> 0x10 & 0xff) << 8 | tmp1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "tmp1",
                "uVar6": "tmp2",
                "uVar7": "tmp3",
                "uVar8": "tmp4",
                "uVar9": "tmp5",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *source_ptr;\n  uint *source_ptr_temp;\n  uint current_word;\n  uint current_word_temp;\n  uint *destination_ptr;\n  bool is_end_of_string;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    source_ptr_temp = source;\n    if (((uint)source & 1) != 0) {\n      source_ptr_temp = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = source_ptr_temp;\n    if (((uint)source_ptr_temp & 2) != 0) {\n      source = (uint *)((int)source_ptr_temp + 2);\n      current_short = *(ushort *)source_ptr_temp;\n      is_end_of_string = (current_short & 0xff) == 0;\n      if (is_end_of_string) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_end_of_string = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_end_of_string) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  source_ptr_temp = source + 1;\n  destination_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_00082630;\n    destination_ptr = destination + 1;\n    *destination = current_word;\n    source_ptr_temp = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    source_ptr = source_ptr_temp + 1;\n    current_word_temp = *source_ptr_temp;\n    destination = destination_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    destination = destination_ptr + 1;\n    *destination_ptr = current_word;\n    current_word = current_word_temp;\n    if ((current_word_temp + 0xfefefeff & ~current_word_temp & 0x80808080) != 0) break;\n    source_ptr_temp = source_ptr_temp + 2;\n    current_word = *source_ptr;\n    destination_ptr = destination_ptr + 2;\n    *destination = current_word_temp;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)current_word;\n    current_word_temp = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (current_word_temp != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr",
                "puVar4": "source_ptr_temp",
                "uVar5": "current_word",
                "uVar6": "current_word_temp",
                "puVar7": "destination_ptr",
                "bVar8": "is_end_of_string"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "find_first_non_zero_byte_index_00082688",
            "code": "\nint findFirstNonZeroByteIndex_00082688(uint input)\n\n{\n  int index;\n  uint *ptr;\n  uint value;\n  bool isZeroByte;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  index = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((index + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    index = index + 4;\n    value = *ptr;\n  }\n  isZeroByte = (value & 0xff) == 0;\n  if (!isZeroByte) {\n    index = index + 1;\n    isZeroByte = (value & 0xff00) == 0;\n  }\n  if (!isZeroByte) {\n    index = index + 1;\n    isZeroByte = (value & 0xff0000) == 0;\n  }\n  if (!isZeroByte) {\n    index = index + 1;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00082688": "find_first_non_zero_byte_index_00082688",
                "param_1": "input",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZeroByte"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_elements_00082824",
            "code": "\nint processElements_00082824(undefined4 data,int size,int **array)\n\n{\n  int *currentElements;\n  int result;\n  int *remainingElements;\n  uint index;\n  undefined4 *currentValue;\n  uint elementSize;\n  uint numElements;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083ca8();\n    array[2] = (int *)0x0;\n    array[1] = (int *)0x0;\n    return result;\n  }\n  remainingElements = array[2];\n  currentElements = *array;\n  while (remainingElements != (int *)0x0) {\n    elementSize = currentElements[1];\n    numElements = elementSize >> 2;\n    if (numElements != 0) {\n      currentValue = (undefined4 *)(*currentElements + -4);\n      index = 0;\n      do {\n        currentValue = currentValue + 1;\n        result = FUN_000839b4(data,*currentValue,size);\n        index = index + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (numElements != index);\n      remainingElements = array[2];\n    }\n    remainingElements = (int *)((int)remainingElements - (elementSize & 0xfffffffc));\n    array[2] = remainingElements;\n    currentElements = currentElements + 2;\n  }\n  result = 0;\nLAB_00082864:\n  array[2] = (int *)0x0;\n  array[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_elements_00082824",
                "param_1": "data",
                "param_2": "size",
                "param_3": "array",
                "piVar1": "currentElements",
                "iVar2": "result",
                "piVar3": "remainingElements",
                "uVar4": "index",
                "puVar5": "currentValue",
                "uVar6": "elementSize",
                "uVar7": "numElements"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_0008289c(int ptr_to_object,int ptr_to_format_struct,int *******format_string,int **ptr_to_arguments)\n\n{\n  bool isFlagPlus;\n  bool isFlagMinus;\n  bool isFlagSpace;\n  char conversionSpecifier;\n  bool isFlagZero;\n  int ********ptr_to_argument_array;\n  int *ptr_to_conversion_result;\n  int result;\n  char tempConversionSpecifier;\n  int *******ptr_to_start_of_format;\n  uint tempVar1;\n  int **ptr_to_ptr_to_arguments;\n  uint tempVar2;\n  uint tempVar3;\n  int numSpecifiers;\n  int ********ptr_to_array;\n  int numArguments;\n  int *******ptr_to_remaining_format;\n  int *ptr_to_argument;\n  int *******ptr_to_current_format;\n  uint tempVar4;\n  int *ptr_to_secondary_argument;\n  int *******ptr_to_temp_format;\n  undefined4 tempVar5;\n  int ********ptr_to_temp_array;\n  bool isSecondaryArgument;\n  longlong combinedArguments;\n  int *******numArgumentsToSkip;\n  int *******numConversionsToSkip;\n  int **ptr_to_ptr_to_arguments;\n  int numCharsPrinted;\n  char *conversionCharacter;\n  char flagPlus;\n  undefined flagZero;\n  undefined isFlagZero;\n  int ********ptr_to_ptr_to_arguments;\n  int numSpecifiers;\n  int *******ptr_to_argument_array;\n  undefined flagZero;\n  char tempChar;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((ptr_to_object != 0) && (*(int *)(ptr_to_object + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  tempVar2 = (uint)*(ushort *)(ptr_to_format_struct + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(ptr_to_format_struct + 0xc) << 0x12)) {\n    tempVar2 = tempVar2 | 0x2000;\n    *(short *)(ptr_to_format_struct + 0xc) = (short)tempVar2;\n    *(uint *)(ptr_to_format_struct + 100) = *(uint *)(ptr_to_format_struct + 100) & 0xffffdfff;\n  }\n  if (((int)(tempVar2 << 0x1c) < 0) && (*(int *)(ptr_to_format_struct + 0x10) != 0)) {\n    if ((tempVar2 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = FUN_0008356c(ptr_to_object,ptr_to_format_struct);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(ptr_to_format_struct + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(ptr_to_format_struct + 0xe)) {\n    result = FUN_000834f0(ptr_to_object,ptr_to_format_struct,format_string,ptr_to_arguments);\n    return result;\n  }\nLAB_000828ee:\n  conversionCharacter = (char *)0x0;\n  ptr_to_argument_array = (int *******)0x0;\n  numSpecifiers = 0;\n  numCharsPrinted = 0;\n  ptr_to_argument_array = (int ********)local_68;\n  ptr_to_ptr_to_arguments = ptr_to_arguments;\n  ptr_to_ptr_to_arguments = (int ********)local_68;\nLAB_00082902:\n  ptr_to_start_of_format = format_string;\n  if ((*(char *)format_string != '\\0') && (*(char *)format_string != '%')) {\n    do {\n      ptr_to_start_of_format = (int *******)((int)ptr_to_start_of_format + 1);\n      if (*(char *)ptr_to_start_of_format == '\\0') break;\n    } while (*(char *)ptr_to_start_of_format != '%');\n    ptr_to_current_format = (int *******)((int)ptr_to_start_of_format - (int)format_string);\n    if (ptr_to_current_format != (int *******)0x0) {\n      numSpecifiers = numSpecifiers + 1;\n      ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)ptr_to_current_format);\n      *ptr_to_argument_array = format_string;\n      ptr_to_argument_array[1] = ptr_to_current_format;\n      if (numSpecifiers < 8) {\n        ptr_to_argument_array = ptr_to_argument_array + 2;\n      }\n      else {\n        if (ptr_to_argument_array == (int *******)0x0) {\n          numCharsPrinted = numCharsPrinted + (int)ptr_to_current_format;\n          numSpecifiers = 0;\n          ptr_to_argument_array = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n        ptr_to_argument_array = (int ********)local_68;\n        if (result != 0) goto LAB_00083142;\n      }\n      numCharsPrinted = numCharsPrinted + (int)ptr_to_current_format;\n    }\n  }\nLAB_00082952:\n  if (*(char *)ptr_to_start_of_format != '\\0') {\n    flagPlus = '\\0';\n    tempVar3 = (uint)*(byte *)((int)ptr_to_start_of_format + 1);\n    tempVar2 = 0;\n    isFlagZero = false;\n    isFlagMinus = false;\n    isFlagPlus = false;\n    isFlagSpace = false;\n    isSecondaryArgument = false;\n    ptr_to_current_format = (int *******)0x0;\n    numConversionsToSkip = (int *******)0xffffffff;\n    format_string = (int *******)((int)ptr_to_start_of_format + 1);\nLAB_00082976:\n    format_string = (int *******)((int)format_string + 1);\nLAB_0008297a:\n    switch(tempVar3) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (tempVar3 != 0) {\n        numArgumentsToSkip = (int *******)0x1;\n        numConversionsToSkip = (int *******)0x1;\n        ptr_to_temp_array = (int ********)&flagZero;\n        flagZero = (char)tempVar3;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isFlagSpace = true;\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2a:\n      ptr_to_current_format = (int *******)*ptr_to_ptr_to_arguments;\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n      if ((int)ptr_to_current_format < 0) {\n        ptr_to_current_format = (int *******)-(int)ptr_to_current_format;\n        goto switchD_00082984_caseD_2d;\n      }\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2b:\n      tempVar3 = (uint)*(byte *)format_string;\n      flagPlus = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      tempVar2 = tempVar2 | 4;\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2e:\n      tempVar3 = (uint)*(byte *)format_string;\n      ptr_to_start_of_format = (int *******)((int)format_string + 1);\n      if (tempVar3 == 0x2a) {\n        tempVar3 = (uint)*(byte *)((int)format_string + 1);\n        numConversionsToSkip = (int *******)*ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        format_string = ptr_to_start_of_format;\n        if ((int)numConversionsToSkip < 0) {\n          numConversionsToSkip = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      tempVar1 = tempVar3 - 0x30;\n      if (tempVar1 < 10) {\n        tempVar4 = 0;\n        do {\n          format_string = (int *******)((int)ptr_to_start_of_format + 1);\n          tempVar3 = (uint)*(byte *)ptr_to_start_of_format;\n          tempVar4 = tempVar1 + tempVar4 * 10;\n          tempVar1 = tempVar3 - 0x30;\n          ptr_to_start_of_format = format_string;\n        } while (tempVar1 < 10);\n        numConversionsToSkip = (int *******)(tempVar4 | (int)tempVar4 >> 0x1f);\n      }\n      else {\n        numConversionsToSkip = (int *******)0x0;\n        format_string = ptr_to_start_of_format;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      tempVar2 = tempVar2 | 0x80;\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isFlagMinus = true;\n      if (isFlagPlus == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      ptr_to_ptr_to_arguments = (int **)((int)ptr_to_ptr_to_arguments + 7U & 0xfffffff8);\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_secondary_argument = ptr_to_ptr_to_arguments[1];\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isFlagMinus = true;\n      if (isFlagPlus != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isFlagMinus << 4;\n      numSpecifiers = (uint)isFlagPlus << 5;\n      if ((isFlagMinus == 0) && (numSpecifiers = (uint)isSecondaryArgument << 6, isSecondaryArgument != 0)) {\n        ptr_to_argument = (int *)(uint)*(ushort *)ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)0x0;\n      }\n      else {\n        result = numSpecifiers;\n        ptr_to_argument = *ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isFlagMinus = true;\n      if (isFlagPlus != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isFlagMinus) || (isSecondaryArgument == false)) {\n        result = 1;\n        ptr_to_argument = *ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)0x0;\n      }\n      else {\n        ptr_to_secondary_argument = (int *)0x0;\n        ptr_to_argument = (int *)(uint)*(ushort *)ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      conversionCharacter = \"0123456789ABCDEF\";\n      if (isFlagPlus == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ptr_to_ptr_to_arguments = (int **)((int)ptr_to_ptr_to_arguments + 7U & 0xfffffff8);\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 2;\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_secondary_argument = ptr_to_ptr_to_arguments[1];\n      goto LAB_00082d2e;\n    case 99:\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n      numArgumentsToSkip = (int *******)0x1;\n      flagZero = SUB41(ptr_to_argument,0);\n      numConversionsToSkip = (int *******)0x1;\n      ptr_to_temp_array = (int ********)&flagZero;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isFlagPlus != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isFlagMinus == false) && (isSecondaryArgument != false)) {\n        ptr_to_argument = (int *)(int)*(short *)ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)((int)ptr_to_argument >> 0x1f);\n      }\n      else {\n        ptr_to_argument = *ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)((int)ptr_to_argument >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)ptr_to_secondary_argument < 0) {\n        isSecondaryArgument = ptr_to_argument != (int *)0x0;\n        ptr_to_argument = (int *)-(int)ptr_to_argument;\n        ptr_to_secondary_argument = (int *)(-(int)ptr_to_secondary_argument - (uint)isSecondaryArgument);\n        flagPlus = '-';\n        conversionSpecifier = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)numConversionsToSkip) {\n        tempVar2 = tempVar2 & 0xffffff7f;\n      }\n      isFlagZero = false;\n      tempVar3 = (uint)ptr_to_argument | (uint)ptr_to_secondary_argument;\n      result = 1;\n      conversionSpecifier = flagPlus;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isSecondaryArgument = true;\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x6c:\n      tempVar3 = (uint)*(byte *)format_string;\n      if (tempVar3 == 0x6c) {\n        isFlagPlus = true;\n        tempVar3 = (uint)*(byte *)((int)format_string + 1);\n        format_string = (int *******)((int)format_string + 1);\n      }\n      else {\n        isFlagMinus = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isFlagPlus == false) {\n        if (isFlagMinus == false) {\n          if (isSecondaryArgument) {\n            ptr_to_argument = *ptr_to_ptr_to_arguments;\n            ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n            *(short *)ptr_to_argument = (short)numCharsPrinted;\n          }\n          else {\n            ptr_to_argument = *ptr_to_ptr_to_arguments;\n            ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n            *ptr_to_argument = numCharsPrinted;\n          }\n        }\n        else {\n          ptr_to_argument = *ptr_to_ptr_to_arguments;\n          ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n          *ptr_to_argument = numCharsPrinted;\n        }\n      }\n      else {\n        ptr_to_argument = *ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        *ptr_to_argument = numCharsPrinted;\n        ptr_to_argument[1] = numCharsPrinted >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isFlagPlus == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ptr_to_ptr_to_arguments = (int **)((int)ptr_to_ptr_to_arguments + 7U & 0xfffffff8);\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 2;\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_secondary_argument = ptr_to_ptr_to_arguments[1];\n      result = 0;\n      break;\n    case 0x70:\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n      isFlagZero = 0x78;\n      isFlagZero = true;\n      ptr_to_secondary_argument = (int *)0x0;\n      flagZero = 0x30;\n      conversionCharacter = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isFlagPlus = true;\n      tempVar3 = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x73:\n      ptr_to_temp_array = (int ********)*ptr_to_ptr_to_arguments;\n      flagPlus = '\\0';\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n      if (ptr_to_temp_array != (int ********)0x0) {\n        if ((int)numConversionsToSkip < 0) {\n          numConversionsToSkip = (int *******)FUN_00082688(ptr_to_temp_array);\n          ptr_to_start_of_format = (int *******)0x0;\n          conversionSpecifier = flagPlus;\n        }\n        else {\n          result = FUN_000840f8(ptr_to_temp_array,0,numConversionsToSkip);\n          conversionSpecifier = flagPlus;\n          if (result == 0) {\n            ptr_to_start_of_format = (int *******)0x0;\n          }\n          else {\n            ptr_to_remaining_format = (int *******)(result - (int)ptr_to_temp_array);\n            if ((int)numConversionsToSkip <= (int)(int *******)(result - (int)ptr_to_temp_array)) {\n              ptr_to_remaining_format = numConversionsToSkip;\n            }\n            ptr_to_start_of_format = (int *******)0x0;\n            numConversionsToSkip = ptr_to_remaining_format;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < numConversionsToSkip) {\n        numConversionsToSkip = (int *******)0x6;\n      }\n      numArgumentsToSkip = (int *******)((uint)numConversionsToSkip & ~((int)numConversionsToSkip >> 0x1f));\n      ptr_to_temp_array = (int ********)&UNK_00085728;\nLAB_00082d76:\n      flagPlus = '\\0';\n      ptr_to_start_of_format = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isFlagPlus) goto LAB_00082ce0;\nLAB_00082bc6:\n      ptr_to_ptr_to_arguments = (int **)((int)ptr_to_ptr_to_arguments + 7U & 0xfffffff8);\n      ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 2;\n      ptr_to_argument = *ptr_to_ptr_to_arguments;\n      ptr_to_secondary_argument = ptr_to_ptr_to_arguments[1];\n      result = 1;\n      break;\n    case 0x78:\n      conversionCharacter = \"0123456789abcdef\";\n      if (isFlagPlus != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isFlagMinus == false) && (isSecondaryArgument != false)) {\n        ptr_to_secondary_argument = (int *)0x0;\n        ptr_to_argument = (int *)(uint)*(ushort *)ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n      }\n      else {\n        ptr_to_argument = *ptr_to_ptr_to_arguments;\n        ptr_to_ptr_to_arguments = ptr_to_ptr_to_arguments + 1;\n        ptr_to_secondary_argument = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isFlagSpace) && (((uint)ptr_to_argument | (uint)ptr_to_secondary_argument) != 0)) {\n        isFlagZero = true;\n        flagZero = 0x30;\n        result = 2;\n        isFlagZero = (char)tempVar3;\n      }\n      else {\n        result = 2;\n      }\n    }\n    flagPlus = '\\0';\n    conversionSpecifier = '\\0';\nLAB_00082ace:\n    if (-1 < (int)numConversionsToSkip) {\n      tempVar2 = tempVar2 & 0xffffff7f;\n    }\n    tempVar3 = (uint)ptr_to_argument | (uint)ptr_to_secondary_argument;\njoined_r0x00082adc:\n    combinedArguments = CONCAT44(ptr_to_secondary_argument,ptr_to_argument);\n    ptr_to_start_of_format = numConversionsToSkip;\n    if ((tempVar3 == 0) && (numConversionsToSkip == (int *******)0x0)) {\n      ptr_to_temp_array = (int ********)local_68;\n      if ((result != 0) || (!isFlagSpace)) goto LAB_00082b04;\n      ptr_to_temp_array = (int ********)(&tempChar + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (ptr_to_secondary_argument != (int *)0x0 || (int *)0x9 < ptr_to_argument) {\n        ptr_to_array = (int ********)(&tempChar + 1);\n        do {\n          ptr_to_temp_array = ptr_to_array;\n          tempVar5 = (undefined4)((ulonglong)combinedArguments >> 0x20);\n          tempConversionSpecifier = '\\n';\n          FUN_00084530((int)combinedArguments,tempVar5,10,0);\n          *(char *)ptr_to_temp_array = tempConversionSpecifier + '0';\n          combinedArguments = FUN_00084530((int)combinedArguments,tempVar5,10,0);\n          ptr_to_array = (int ********)((int)ptr_to_temp_array + -1);\n        } while (combinedArguments != 0);\n        numConversionsToSkip = (int *******)((int)local_68 - (int)ptr_to_temp_array);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)ptr_to_argument + '0';\n      ptr_to_temp_array = (int ********)(&tempChar + 1);\n      goto LAB_00083282;\n    }\n    ptr_to_array = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ptr_to_temp_array = ptr_to_array;\n      tempVar3 = (uint)ptr_to_argument & 0xf;\n      ptr_to_argument = (int *)((uint)ptr_to_argument >> 4 | (int)ptr_to_secondary_argument << 0x1c);\n      ptr_to_secondary_argument = (int *)((uint)ptr_to_secondary_argument >> 4);\n      *(char *)ptr_to_temp_array = conversionCharacter[tempVar3];\n      ptr_to_array = (int ********)((int)ptr_to_temp_array + -1);\n    } while (((uint)ptr_to_argument | (uint)ptr_to_secondary_argument) != 0);\n    numConversionsToSkip = (int *******)((int)local_68 - (int)ptr_to_temp_array);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (ptr_to_argument_array != (int *******)0x0) {\n    FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(ptr_to_format_struct + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return numCharsPrinted;\nLAB_000830e2:\n  do {\n    ptr_to_temp_array = ptr_to_array;\n    ptr_to_conversion_result = (int *)((uint)ptr_to_argument >> 3 | (int)ptr_to_secondary_argument << 0x1d);\n    ptr_to_secondary_argument = (int *)((uint)ptr_to_secondary_argument >> 3);\n    result = ((uint)ptr_to_argument & 7) + 0x30;\n    *(char *)ptr_to_temp_array = (char)result;\n    ptr_to_array = (int ********)((int)ptr_to_temp_array + -1);\n    ptr_to_argument = ptr_to_conversion_result;\n  } while (((uint)ptr_to_conversion_result | (uint)ptr_to_secondary_argument) != 0);\n  if (isFlagSpace) {\n    if (result == 0x30) {\nLAB_00082afe:\n      numConversionsToSkip = (int *******)((int)local_68 - (int)ptr_to_temp_array);\n    }\n    else {\n      *(undefined *)((int)ptr_to_temp_array + -1) = 0x30;\n      ptr_to_temp_array = ptr_to_array;\n      numConversionsToSkip = (int *******)((int)local_68 - (int)ptr_to_array);\n    }\n  }\n  else {\nLAB_00083282:\n    numConversionsToSkip = (int *******)((int)local_68 - (int)ptr_to_temp_array);\n  }\nLAB_00082b04:\n  numArgumentsToSkip = numConversionsToSkip;\n  if ((int)numConversionsToSkip < (int)ptr_to_start_of_format) {\n    numArgumentsToSkip = ptr_to_start_of_format;\n  }\n  if (conversionSpecifier != '\\0') {\n    numArgumentsToSkip = (int *******)((int)numArgumentsToSkip + 1);\n  }\nLAB_00082b1e:\n  if (isFlagZero) {\n    numArgumentsToSkip = (int *******)((int)numArgumentsToSkip + 2);\n  }\n  if ((tempVar2 == 0) &&\n     (ptr_to_remaining_format = (int *******)((int)ptr_to_current_format - (int)numArgumentsToSkip), 0 < (int)ptr_to_remaining_format)) {\n    if ((int)ptr_to_remaining_format < 0x11) {\n      numSpecifiers = numSpecifiers + 1;\n    }\n    else {\n      do {\n        ptr_to_temp_format = ptr_to_remaining_format;\n        result = numSpecifiers + 1;\n        ptr_to_argument_array = ptr_to_argument_array + 4;\n        *ptr_to_argument_array = (int *******)0x856f0;\n        ptr_to_argument_array[1] = (int *******)0x10;\n        if (result < 8) {\n          numSpecifiers = numSpecifiers + 2;\n          ptr_to_argument_array = ptr_to_argument_array + 2;\n          numSpecifiers = result;\n        }\n        else if (ptr_to_argument_array == (int *******)0x0) {\n          numSpecifiers = 1;\n          ptr_to_argument_array = (int ********)local_68;\n          numSpecifiers = 0;\n        }\n        else {\n          numSpecifiers = result;\n          result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n          if (result != 0) goto LAB_00083142;\n          numSpecifiers = numSpecifiers + 1;\n          ptr_to_argument_array = (int ********)local_68;\n        }\n        ptr_to_remaining_format = ptr_to_temp_format + -4;\n      } while (0x10 < (int)ptr_to_remaining_format);\n      ptr_to_remaining_format = ptr_to_temp_format + -4;\n      numSpecifiers = numSpecifiers;\n    }\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)ptr_to_remaining_format);\n    *ptr_to_argument_array = (int *******)0x856f0;\n    ptr_to_argument_array[1] = ptr_to_remaining_format;\n    if (numSpecifiers < 8) {\n      result = numSpecifiers + 1;\n      ptr_to_argument_array = ptr_to_argument_array + 2;\n    }\n    else if (ptr_to_argument_array == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n  }\n  else {\n    result = numSpecifiers + 1;\n  }\n  numSpecifiers = result;\n  if (flagPlus != '\\0') {\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + 1);\n    numSpecifiers = 1;\n    *ptr_to_argument_array = (int *******)&flagPlus;\n    ptr_to_argument_array[1] = (int *******)0x1;\n    numSpecifiers = result;\n    if (result < 8) {\n      numSpecifiers = result + 1;\n      ptr_to_argument_array = ptr_to_argument_array + 2;\n    }\n    else if (ptr_to_argument_array == (int *******)0x0) {\n      numSpecifiers = 0;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n      numSpecifiers = numSpecifiers + 1;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n  }\n  result = numSpecifiers;\n  numArguments = numSpecifiers;\n  if (isFlagZero) {\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + 2);\n    *ptr_to_argument_array = (int *******)&flagZero;\n    ptr_to_argument_array[1] = (int *******)0x2;\n    if (numSpecifiers < 8) {\n      result = numSpecifiers + 1;\n      numArguments = numSpecifiers;\n      ptr_to_argument_array = ptr_to_argument_array + 2;\n    }\n    else if (ptr_to_argument_array == (int *******)0x0) {\n      result = 1;\n      numArguments = 0;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n    else {\n      numSpecifiers = numSpecifiers;\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      numArguments = numSpecifiers;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n  }\n  numSpecifiers = numArguments;\n  if ((tempVar2 == 0x80) &&\n     (ptr_to_remaining_format = (int *******)((int)ptr_to_current_format - (int)numArgumentsToSkip), 0 < (int)ptr_to_remaining_format)) {\n    if (0x10 < (int)ptr_to_remaining_format) {\n      do {\n        while( true ) {\n          ptr_to_temp_format = ptr_to_remaining_format;\n          numSpecifiers = numArguments + 1;\n          ptr_to_argument_array = ptr_to_argument_array + 4;\n          *ptr_to_argument_array = (int *******)\"0000000000000000\";\n          ptr_to_argument_array[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = numArguments + 2;\n          ptr_to_argument_array = ptr_to_argument_array + 2;\nLAB_000831f2:\n          numArguments = numSpecifiers;\n          ptr_to_remaining_format = ptr_to_temp_format + -4;\n          if ((int)(ptr_to_temp_format + -4) < 0x11) goto LAB_00083218;\n        }\n        if (ptr_to_argument_array != (int *******)0x0) {\n          result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            ptr_to_argument_array = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        numArguments = 0;\n        ptr_to_remaining_format = ptr_to_temp_format + -4;\n        ptr_to_argument_array = (int ********)local_68;\n      } while (0x10 < (int)(ptr_to_temp_format + -4));\nLAB_00083218:\n      ptr_to_remaining_format = ptr_to_temp_format + -4;\n    }\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)ptr_to_remaining_format);\n    *ptr_to_argument_array = (int *******)\"0000000000000000\";\n    ptr_to_argument_array[1] = ptr_to_remaining_format;\n    numSpecifiers = result;\n    if (result < 8) {\n      result = result + 1;\n      ptr_to_argument_array = ptr_to_argument_array + 2;\n    }\n    else if (ptr_to_argument_array == (int *******)0x0) {\n      result = 1;\n      numSpecifiers = 0;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      ptr_to_argument_array = (int ********)local_68;\n    }\n  }\n  ptr_to_start_of_format = (int *******)((int)ptr_to_start_of_format - (int)numConversionsToSkip);\n  ptr_to_array = (int ********)local_68;\n  if ((int)ptr_to_start_of_format < 1) {\nLAB_0008302a:\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)numConversionsToSkip);\n    *ptr_to_argument_array = (int *******)ptr_to_temp_array;\n    ptr_to_argument_array[1] = numConversionsToSkip;\n    numConversionsToSkip = ptr_to_argument_array;\n    numSpecifiers = result;\n    if (result < 8) goto LAB_000831be;\n    if (ptr_to_argument_array == (int *******)0x0) {\n      numSpecifiers = 0;\n    }\n    else {\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    numSpecifiers = numSpecifiers;\n    if (0x10 < (int)ptr_to_start_of_format) {\n      do {\n        while( true ) {\n          ptr_to_remaining_format = ptr_to_start_of_format;\n          numSpecifiers = numSpecifiers + 1;\n          ptr_to_argument_array = ptr_to_argument_array + 4;\n          *ptr_to_argument_array = (int *******)\"0000000000000000\";\n          ptr_to_argument_array[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          result = numSpecifiers + 2;\n          ptr_to_argument_array = ptr_to_argument_array + 2;\nLAB_00082fe6:\n          numSpecifiers = numSpecifiers;\n          ptr_to_start_of_format = ptr_to_remaining_format + -4;\n          if ((int)(ptr_to_remaining_format + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (ptr_to_argument_array != (int *******)0x0) {\n          result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n          if (result == 0) {\n            result = numSpecifiers + 1;\n            ptr_to_argument_array = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        ptr_to_argument_array = (int ********)local_68;\n        numSpecifiers = 0;\n        ptr_to_start_of_format = ptr_to_remaining_format + -4;\n      } while (0x10 < (int)(ptr_to_remaining_format + -4));\nLAB_0008300e:\n      ptr_to_start_of_format = ptr_to_remaining_format + -4;\n    }\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)ptr_to_start_of_format);\n    *ptr_to_argument_array = (int *******)\"0000000000000000\";\n    ptr_to_argument_array[1] = ptr_to_start_of_format;\n    if (result < 8) {\n      result = result + 1;\n      ptr_to_argument_array = ptr_to_argument_array + 2;\n      goto LAB_0008302a;\n    }\n    if (ptr_to_argument_array != (int *******)0x0) {\n      numSpecifiers = result;\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n      result = numSpecifiers + 1;\n      ptr_to_argument_array = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = numConversionsToSkip;\n    numSpecifiers = 1;\n    ptr_to_argument_array = (int ********)local_68;\n    local_68 = (undefined  [4])ptr_to_temp_array;\nLAB_000831be:\n    ptr_to_array = ptr_to_argument_array + 2;\n    ptr_to_argument_array = numConversionsToSkip;\n  }\n  if (((tempVar2 & 4) != 0) &&\n     (ptr_to_start_of_format = (int *******)((int)ptr_to_current_format - (int)numArgumentsToSkip), 0 < (int)ptr_to_start_of_format)) {\n    result = numSpecifiers;\n    if ((int)ptr_to_start_of_format < 0x11) {\n      numSpecifiers = numSpecifiers + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numSpecifiers = result + 1;\n          ptr_to_argument_array = ptr_to_argument_array + 4;\n          *ptr_to_array = (int *******)0x856f0;\n          ptr_to_array[1] = (int *******)0x10;\n          if (7 < numSpecifiers) break;\n          numSpecifiers = result + 2;\n          ptr_to_array = ptr_to_array + 2;\nLAB_0008307a:\n          ptr_to_start_of_format = ptr_to_start_of_format + -4;\n          result = numSpecifiers;\n          if ((int)ptr_to_start_of_format < 0x11) goto LAB_000830a2;\n        }\n        if (ptr_to_argument_array != (int *******)0x0) {\n          result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n          if (result == 0) {\n            numSpecifiers = numSpecifiers + 1;\n            ptr_to_array = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        ptr_to_start_of_format = ptr_to_start_of_format + -4;\n        numSpecifiers = 1;\n        result = 0;\n        ptr_to_array = (int ********)local_68;\n      } while (0x10 < (int)ptr_to_start_of_format);\n    }\nLAB_000830a2:\n    ptr_to_argument_array = (int *******)((int)ptr_to_argument_array + (int)ptr_to_start_of_format);\n    *ptr_to_array = (int *******)0x856f0;\n    ptr_to_array[1] = ptr_to_start_of_format;\n    numSpecifiers = numSpecifiers;\n    if (7 < numSpecifiers) {\n      if (ptr_to_argument_array == (int *******)0x0) {\n        if ((int)numArgumentsToSkip < (int)ptr_to_current_format) {\n          numArgumentsToSkip = ptr_to_current_format;\n        }\n        numCharsPrinted = numCharsPrinted + (int)numArgumentsToSkip;\n        goto LAB_00083186;\n      }\n      result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)numArgumentsToSkip < (int)ptr_to_current_format) {\n    numArgumentsToSkip = ptr_to_current_format;\n  }\n  numCharsPrinted = numCharsPrinted + (int)numArgumentsToSkip;\n  if ((ptr_to_argument_array != (int *******)0x0) &&\n     (result = FUN_00082824(ptr_to_object,ptr_to_format_struct,&ptr_to_ptr_to_arguments), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  numSpecifiers = 0;\n  ptr_to_argument_array = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  tempVar1 = tempVar3 - 0x30;\n  ptr_to_current_format = (int *******)0x0;\n  ptr_to_start_of_format = format_string;\n  do {\n    format_string = (int *******)((int)ptr_to_start_of_format + 1);\n    tempVar3 = (uint)*(byte *)ptr_to_start_of_format;\n    ptr_to_current_format = (int *******)(tempVar1 + (int)ptr_to_current_format * 10);\n    tempVar1 = tempVar3 - 0x30;\n    ptr_to_start_of_format = format_string;\n  } while (tempVar1 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  tempVar3 = (uint)*(byte *)format_string;\n  if (flagPlus == '\\0') {\n    flagPlus = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "param_1": "ptr_to_object",
                "param_2": "ptr_to_format_struct",
                "param_3": "format_string",
                "param_4": "ptr_to_arguments",
                "bVar1": "isFlagPlus",
                "bVar2": "isFlagMinus",
                "bVar3": "isFlagSpace",
                "cVar4": "conversionSpecifier",
                "bVar5": "isFlagZero",
                "ppppppppiVar6": "ptr_to_argument_array",
                "piVar7": "ptr_to_conversion_result",
                "iVar8": "result",
                "cVar9": "tempConversionSpecifier",
                "pppppppiVar10": "ptr_to_start_of_format",
                "uVar11": "tempVar1",
                "ppiVar12": "ptr_to_ptr_to_arguments",
                "uVar13": "tempVar2",
                "uVar14": "tempVar3",
                "iVar15": "numSpecifiers",
                "ppppppppiVar16": "ptr_to_array",
                "iVar17": "numArguments",
                "pppppppiVar18": "ptr_to_remaining_format",
                "piVar19": "ptr_to_argument",
                "pppppppiVar20": "ptr_to_current_format",
                "uVar21": "tempVar4",
                "piVar22": "ptr_to_secondary_argument",
                "pppppppiVar23": "ptr_to_temp_format",
                "uVar24": "tempVar5",
                "ppppppppiVar25": "ptr_to_temp_array",
                "bVar26": "isSecondaryArgument",
                "lVar27": "combinedArguments",
                "local_dc": "numArgumentsToSkip",
                "local_d4": "numConversionsToSkip",
                "local_c8": "ptr_to_ptr_to_arguments",
                "local_c4": "numCharsPrinted",
                "local_c0": "conversionCharacter",
                "local_a1": "flagPlus",
                "local_a0": "flagZero",
                "local_9f": "isFlagZero",
                "local_9c": "ptr_to_ptr_to_arguments",
                "local_98": "numSpecifiers",
                "local_94": "ptr_to_argument_array",
                "local_90": "flagZero",
                "cStack_6a": "tempChar"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int returnValue;\n  undefined *stackArray [2];\n  undefined4 arraySize1;\n  ushort maskedValue1;\n  undefined2 value1;\n  undefined *pointer1;\n  undefined4 arraySize2;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined buffer [1024];\n  \n  value5 = *(undefined4 *)(param2 + 100);\n  value3 = *(undefined4 *)(param2 + 0x1c);\n  value1 = *(undefined2 *)(param2 + 0xe);\n  value4 = *(undefined4 *)(param2 + 0x24);\n  stackArray[0] = buffer;\n  maskedValue1 = *(ushort *)(param2 + 0xc) & 0xfffd;\n  arraySize1 = 0x400;\n  arraySize2 = 0x400;\n  value2 = 0;\n  pointer1 = stackArray[0];\n  result = FUN_0008289c(param1,stackArray);\n  if ((-1 < result) && (returnValue = FUN_00083850(param1,stackArray), returnValue != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)maskedValue1 << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "returnValue",
                "local_488": "stackArray",
                "local_480": "arraySize1",
                "local_47c": "maskedValue1",
                "local_47a": "value1",
                "local_478": "pointer1",
                "local_474": "arraySize2",
                "local_470": "value2",
                "local_46c": "value3",
                "local_464": "value4",
                "local_424": "value5",
                "auStack_420": "buffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_function_0008356c",
            "code": "\nundefined4 processFunction_0008356c(undefined4 *outputPtr,int *inputPtr)\n\n{\n  int var1;\n  int var2;\n  uint var3;\n  ushort var4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  var4 = *(ushort *)(inputPtr + 3);\n  var3 = (uint)var4;\n  if ((int)(var3 << 0x1c) < 0) {\n    var2 = inputPtr[4];\n  }\n  else {\n    if (-1 < (int)(var3 << 0x1b)) {\n      *outputPtr = 9;\n      *(ushort *)(inputPtr + 3) = var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(var3 << 0x1d) < 0) {\n      if ((int *)inputPtr[0xc] != (int *)0x0) {\n        if ((int *)inputPtr[0xc] != inputPtr + 0x10) {\n          FUN_00083b10(outputPtr);\n          var4 = *(ushort *)(inputPtr + 3);\n        }\n        inputPtr[0xc] = 0;\n      }\n      var2 = inputPtr[4];\n      var4 = var4 & 0xffdb;\n      *inputPtr = var2;\n      inputPtr[1] = 0;\n    }\n    else {\n      var2 = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = var4 | 8;\n    var3 = (uint)(var4 | 8);\n  }\n  if ((var2 == 0) && ((var3 & 0x280) != 0x200)) {\n    FUN_00084018(outputPtr,inputPtr);\n    var3 = (uint)*(ushort *)(inputPtr + 3);\n    var2 = inputPtr[4];\n  }\n  if ((var3 & 1) == 0) {\n    var1 = 0;\n    if (-1 < (int)(var3 << 0x1e)) {\n      var1 = inputPtr[5];\n    }\n    inputPtr[2] = var1;\n  }\n  else {\n    inputPtr[6] = -inputPtr[5];\n    inputPtr[2] = 0;\n  }\n  if ((var2 == 0) && ((int)((uint)*(ushort *)(inputPtr + 3) << 0x18) < 0)) {\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_function_0008356c",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_relocation_table_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeRelocationTable_000836ec(void)\n\n{\n  dword *relocationEntry;\n  dword functionOffset;\n  int currentIndex;\n  code *errorHandler;\n  \n  FUN_000841e4(6);\n  errorHandler = (code *)0x836fb;\n  functionOffset = FUN_00080eec(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  currentIndex = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < currentIndex) {\n    relocationEntry = (dword *)FUN_000817f0(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*errorHandler)(0xffffffff);\n      return;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    currentIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  relocationEntry[1] = currentIndex + 1;\n  relocationEntry[currentIndex + 2] = functionOffset;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*errorHandler)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_relocation_table_000836ec",
                "pdVar1": "relocationEntry",
                "dVar2": "functionOffset",
                "iVar3": "currentIndex",
                "UNRECOVERED_JUMPTABLE_00": "errorHandler"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *dataBuffer,int *infoBuffer)\n\n{\n  int *tempPtr;\n  int tempVar;\n  ushort flags;\n  uint temp;\n  int tempVar2;\n  code *callback;\n  undefined4 unaffTempVar;\n  int tempVar3;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(infoBuffer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(infoBuffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar3 = infoBuffer[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    tempVar = *infoBuffer;\n    if ((flags & 3) == 0) {\n      tempVar2 = infoBuffer[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *infoBuffer = tempVar3;\n    tempVar = tempVar - tempVar3;\n    infoBuffer[2] = tempVar2;\n    do {\n      if (tempVar < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)infoBuffer[9])(dataBuffer,infoBuffer[7],tempVar3,tempVar,unaffTempVar);\n      tempVar = tempVar - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_000837c8:\n    *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoBuffer + 3) = flags | 0x800;\n  if ((infoBuffer[1] < 1) && (infoBuffer[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)infoBuffer[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  tempVar3 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((flags & 0x1000) == 0) {\n    tempVar = (*callback)(dataBuffer,infoBuffer[7],temp & 0x1000,1);\n    if ((tempVar == -1) && (tempVar2 = *dataBuffer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataBuffer = tempVar3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp = (uint)*(ushort *)(infoBuffer + 3);\n    callback = (code *)infoBuffer[10];\n  }\n  else {\n    tempVar = infoBuffer[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (tempVar = tempVar - infoBuffer[1], infoBuffer[0xc] != 0)) {\n    tempVar = tempVar - infoBuffer[0xf];\n  }\n  tempVar = (*callback)(dataBuffer,infoBuffer[7],tempVar,0);\n  if (tempVar == -1) {\n    tempVar2 = *dataBuffer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n      *infoBuffer = infoBuffer[4];\n      infoBuffer[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    infoBuffer[1] = 0;\n    *(ushort *)(infoBuffer + 3) = flags;\n    *infoBuffer = infoBuffer[4];\n  }\n  else {\n    flags = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    *infoBuffer = infoBuffer[4];\n    *(ushort *)(infoBuffer + 3) = flags;\n    infoBuffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    infoBuffer[0x14] = tempVar;\n  }\nLAB_00083774:\n  tempPtr = (int *)infoBuffer[0xc];\n  *dataBuffer = tempVar3;\n  if (tempPtr == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr != infoBuffer + 0x10) {\n    FUN_00083b10(dataBuffer);\n  }\n  infoBuffer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "dataBuffer",
                "param_2": "infoBuffer",
                "piVar1": "tempPtr",
                "iVar2": "tempVar",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "tempVar2",
                "pcVar6": "callback",
                "unaff_r4": "unaffTempVar",
                "iVar7": "tempVar3"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int ptrData)\n\n{\n  undefined4 *ptrArray1;\n  undefined4 *ptrArray2;\n  \n  if (*(int *)(ptrData + 0x38) == 0) {\n    ptrArray1 = *(undefined4 **)(ptrData + 4);\n    *(undefined **)(ptrData + 0x3c) = &label1;\n    *(undefined4 *)(ptrData + 0x2e4) = 3;\n    *(int *)(ptrData + 0x2e8) = ptrData + 0x2ec;\n    *(undefined4 *)(ptrData + 0x2e0) = 0;\n    *(undefined2 *)(ptrArray1 + 3) = 4;\n    *ptrArray1 = 0;\n    ptrArray1[1] = 0;\n    ptrArray1[2] = 0;\n    ptrArray1[0x19] = 0;\n    *(undefined2 *)((int)ptrArray1 + 0xe) = 0;\n    ptrArray1[4] = 0;\n    ptrArray1[5] = 0;\n    ptrArray1[6] = 0;\n    FUN_00081f00(ptrArray1 + 0x17,0,8);\n    ptrArray2 = *(undefined4 **)(ptrData + 8);\n    ptrArray1[7] = ptrArray1;\n    ptrArray1[8] = 0x84221;\n    ptrArray1[9] = 0x84245;\n    ptrArray1[10] = 0x8427d;\n    ptrArray1[0xb] = &label2;\n    *(undefined2 *)((int)ptrArray2 + 0xe) = 1;\n    *(undefined2 *)(ptrArray2 + 3) = 9;\n    *ptrArray2 = 0;\n    ptrArray2[1] = 0;\n    ptrArray2[2] = 0;\n    ptrArray2[0x19] = 0;\n    ptrArray2[4] = 0;\n    ptrArray2[5] = 0;\n    ptrArray2[6] = 0;\n    FUN_00081f00(ptrArray2 + 0x17,0,8);\n    ptrArray1 = *(undefined4 **)(ptrData + 0xc);\n    ptrArray2[7] = ptrArray2;\n    ptrArray2[8] = 0x84221;\n    ptrArray2[9] = 0x84245;\n    ptrArray2[10] = 0x8427d;\n    ptrArray2[0xb] = &label2;\n    *(undefined2 *)(ptrArray1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrArray1 + 0xe) = 2;\n    *ptrArray1 = 0;\n    ptrArray1[1] = 0;\n    ptrArray1[2] = 0;\n    ptrArray1[0x19] = 0;\n    ptrArray1[4] = 0;\n    ptrArray1[5] = 0;\n    ptrArray1[6] = 0;\n    FUN_00081f00(ptrArray1 + 0x17,0,8);\n    ptrArray1[7] = ptrArray1;\n    ptrArray1[8] = 0x84221;\n    ptrArray1[9] = 0x84245;\n    ptrArray1[10] = 0x8427d;\n    ptrArray1[0xb] = &label2;\n    *(undefined4 *)(ptrData + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "ptrData",
                "puVar1": "ptrArray1",
                "puVar2": "ptrArray2",
                "LAB_0008387c_1": "label1",
                "LAB_0008429c_1": "label2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  byte *tempVar4;\n  uint tempVar5;\n  byte tempVar6;\n  byte tempArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  tempVar1 = FUN_0008400c();\n  if ((tempVar1 == 1) && (param2 - 1 < 0xff)) {\n    tempVar3 = param2 & 0xff;\n    tempVar6 = (byte)tempVar3;\n    tempVar2 = 1;\n  }\n  else {\n    tempVar2 = FUN_0008434c(param1,&tempVar6,param2,param3 + 0x17);\n    if (tempVar2 == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (tempVar2 == 0) {\n      return param2;\n    }\n    tempVar3 = (uint)tempVar6;\n  }\n  tempVar5 = 0;\n  do {\n    tempVar4 = param3[2] + -1;\n    param3[2] = tempVar4;\n    if ((int)tempVar4 < 0) {\n      if ((int)param3[6] <= (int)tempVar4) {\n        **param3 = (byte)tempVar3;\n        tempVar4 = *param3;\n        tempVar3 = (uint)*tempVar4;\n        if (tempVar3 != 10) goto LAB_00083a04;\n      }\n      tempVar1 = FUN_000842a4(param1,tempVar3,param3);\n      if (tempVar1 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)tempVar3;\n      tempVar4 = *param3;\nLAB_00083a04:\n      *param3 = tempVar4 + 1;\n    }\n    if (tempVar2 <= tempVar5 + 1) {\n      return param2;\n    }\n    tempVar3 = (uint)tempArray[tempVar5];\n    tempVar5 = tempVar5 + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "pbVar4": "tempVar4",
                "uVar5": "tempVar5",
                "local_1c": "tempVar6",
                "abStack_1b": "tempArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "improve_and_validate_address_00083a74",
            "code": "\nundefined4 improve_and_validate_address_00083a74(undefined4 input_data,int current_address)\n\n{\n  int result;\n  uint offset;\n  int new_address;\n  \n  FUNC_00081f94();\n  offset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  new_address = ((offset - current_address) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_address) {\n    result = FUN_0008236c(input_data,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + offset) {\n      result = FUN_0008236c(input_data,-new_address);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - new_address;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = offset - new_address | 1;\n        FUNC_00081f98(input_data);\n        return 1;\n      }\n      new_address = FUN_0008236c(input_data,0);\n      if (0xf < (int)(new_address - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = new_address - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             new_address - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "improve_and_validate_address_00083a74",
                "param_1": "input_data",
                "param_2": "current_address",
                "iVar1": "result",
                "uVar2": "offset",
                "iVar3": "new_address"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocation_00083b10",
            "code": "\nvoid processRelocation_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isSpecialCase;\n  uint flags;\n  dword relInfo;\n  int index2;\n  uint relOffset;\n  dword relOffsetPtr;\n  uint relSize;\n  dword newRelOffset;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  flags = *(uint *)(param2 + -4);\n  relOffsetPtr = param2 - 8;\n  relOffset = flags & 0xfffffffe;\n  relInfo = relOffsetPtr + relOffset;\n  relSize = *(uint *)(relInfo + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == relInfo) {\n    relSize = relSize + relOffset;\n    if (-1 < (int)(flags << 0x1f)) {\n      relOffsetPtr = relOffsetPtr - *(int *)(param2 + -8);\n      index2 = *(int *)(relOffsetPtr + 0xc);\n      index1 = *(int *)(relOffsetPtr + 8);\n      relSize = relSize + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    relInfo = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(relOffsetPtr + 4) = relSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = relOffsetPtr;\n    if (relInfo <= relSize) {\n      FUN_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(relInfo + 4) = relSize;\n    if ((flags & 1) == 0) {\n      relOffsetPtr = relOffsetPtr - *(int *)(param2 + -8);\n      index1 = *(int *)(relOffsetPtr + 8);\n      relOffset = relOffset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        index2 = *(int *)(relOffsetPtr + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(relInfo + relSize + 4) << 0x1f) {\n      relOffset = relOffset + relSize;\n      index1 = *(int *)(relInfo + 8);\n      if ((!isSpecialCase) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = relOffsetPtr;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = relOffsetPtr;\n        *(undefined4 *)(relOffsetPtr + 0xc) = 0x2007046c;\n        *(undefined4 *)(relOffsetPtr + 8) = 0x2007046c;\n        *(uint *)(relOffsetPtr + 4) = relOffset | 1;\n        *(uint *)(relOffsetPtr + relOffset) = relOffset;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(relInfo + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(relOffsetPtr + 4) = relOffset | 1;\n    *(uint *)(relOffsetPtr + relOffset) = relOffset;\n    if (!isSpecialCase) {\n      if (relOffset < 0x200) {\n        flags = relOffset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(relOffset >> 3) >> 2 & 0xffU);\n        *(int *)(relOffsetPtr + 8) = index1;\n        *(uint *)(relOffsetPtr + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = relOffsetPtr;\n        *(dword *)(index1 + 0xc) = relOffsetPtr;\n        FUNC_00081f98(param1);\n        return;\n      }\n      flags = relOffset >> 9;\n      if (flags < 5) {\n        index1 = (relOffset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x15) {\n        index1 = flags + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x55) {\n        index1 = (relOffset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x155) {\n        index1 = (relOffset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flags < 0x555) {\n        index1 = (relOffset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      newRelOffset = index2 * 4 + 0x20070464;\n      relInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (relInfo == newRelOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        newRelOffset = relInfo;\n      }\n      else {\n        do {\n          if ((*(uint *)(relInfo + 4) & 0xfffffffc) <= relOffset) break;\n          relInfo = *(dword *)(relInfo + 8);\n        } while (newRelOffset != relInfo);\n        newRelOffset = *(dword *)(relInfo + 0xc);\n      }\n      *(dword *)(relOffsetPtr + 0xc) = newRelOffset;\n      *(dword *)(relOffsetPtr + 8) = relInfo;\n      *(dword *)(newRelOffset + 8) = relOffsetPtr;\n      *(dword *)(relInfo + 0xc) = relOffsetPtr;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocation_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isSpecialCase",
                "uVar3": "flags",
                "dVar4": "relInfo",
                "iVar5": "index2",
                "uVar6": "relOffset",
                "dVar7": "relOffsetPtr",
                "uVar8": "relSize",
                "dVar9": "newRelOffset"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 process_data_00083ca8(undefined4 *output,uint *input_data,uint **ptr_array)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag;\n  uint data;\n  uint *ptr1;\n  uint *ptr2;\n  uint size1;\n  uint size2;\n  uint count;\n  uint temp;\n  uint temp_size;\n  \n  if (ptr_array[2] != (uint *)0x0) {\n    flag = *(ushort *)(input_data + 3);\n    data = (uint)flag;\n    if (((int)(data << 0x1c) < 0) && (input_data[4] != 0)) {\n      ptr2 = *ptr_array;\n    }\n    else {\n      result = FUN_0008356c(output,input_data);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input_data + 3);\n      data = (uint)flag;\n      ptr2 = *ptr_array;\n    }\n    if ((flag & 2) == 0) {\n      value1 = data & 2;\n      count = value1;\n      size1 = value1;\n      temp_size = value1;\n      if ((data & 1) == 0) {\n        value1 = 0;\n        count = 0;\n        while( true ) {\n          while (value1 == 0) {\n            count = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          size1 = input_data[2];\n          if ((int)(data << 0x16) < 0) {\n            if (value1 < size1) {\n              data = *input_data;\n              size1 = value1;\n            }\n            else if ((data & 0x480) == 0) {\n              data = *input_data;\n            }\n            else {\n              result = *input_data - input_data[4];\n              size1 = result + 1 + value1;\n              size2 = (int)(input_data[5] * 3) / 2;\n              if (size1 <= size2) {\n                size1 = size2;\n              }\n              if ((int)(data << 0x15) < 0) {\n                size2 = FUN_00081810(output,size1);\n                if (size2 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input_data + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(size2,input_data[4],result);\n                *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size2 = FUN_00081fac(output);\n                if (size2 == 0) {\n                  FUN_00083b10(output,input_data[4]);\n                  flag = *(ushort *)(input_data + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              data = size2 + result;\n              input_data[4] = size2;\n              input_data[5] = size1;\n              *input_data = data;\n              input_data[2] = size1 - result;\n              size1 = value1;\n            }\n            FUN_00081e34(data,count,size1);\n            input_data[2] = input_data[2] - size1;\n            *input_data = *input_data + size1;\n            size1 = value1;\n          }\n          else if ((input_data[4] < *input_data) || (data = input_data[5], value1 < data)) {\n            if (value1 < size1) {\n              size1 = value1;\n            }\n            FUN_00081e34(*input_data,count,size1);\n            data = input_data[2];\n            input_data[2] = data - size1;\n            *input_data = *input_data + size1;\n            if ((data - size1 == 0) && (result = FUN_00083850(output,input_data), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            size1 = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size1 = value1;\n            }\n            size1 = (*(code *)input_data[9])(output,input_data[7],count,(size1 / data) * data);\n            if ((int)size1 < 1) goto LAB_00083da2;\n          }\n          ptr1 = ptr_array[2];\n          count = count + size1;\n          value1 = value1 - size1;\n          ptr_array[2] = (uint *)((int)ptr1 - size1);\n          if ((uint *)((int)ptr1 - size1) == (uint *)0x0) break;\n          data = (uint)*(ushort *)(input_data + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size1 = *ptr2;\n            value1 = ptr2[1];\n            temp_size = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp_size == 0) {\n            result = FUN_000840f8(size1,10,value1);\n            if (result == 0) {\n              count = value1 + 1;\n              temp_size = 1;\n            }\n            else {\n              count = (result + 1) - size1;\n              temp_size = 1;\n            }\n          }\n          size2 = *input_data;\n          data = count;\n          if (value1 <= count) {\n            data = value1;\n          }\n          value2 = input_data[5];\n          if ((input_data[4] < size2) && (temp = input_data[2] + value2, (int)temp < (int)data)) {\n            FUN_00081e34(size2,size1,temp);\n            *input_data = *input_data + temp;\n            result = FUN_00083850(output,input_data);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)data < (int)value2) {\n            FUN_00081e34(size2,size1,data);\n            input_data[2] = input_data[2] - data;\n            *input_data = data + *input_data;\n            temp = data;\n          }\n          else {\n            temp = (*(code *)input_data[9])(output,input_data[7],size1,value2);\n            if ((int)temp < 1) goto LAB_00083da2;\n          }\n          count = count - temp;\n          if (count == 0) {\n            result = FUN_00083850(output,input_data);\n            if (result != 0) goto LAB_00083da2;\n            temp_size = 0;\n          }\n          ptr1 = ptr_array[2];\n          size1 = size1 + temp;\n          value1 = value1 - temp;\n          ptr_array[2] = (uint *)((int)ptr1 - temp);\n        } while ((uint *)((int)ptr1 - temp) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      data = 0;\n      do {\n        while( true ) {\n          count = data;\n          if (0x7ffffbff < data) {\n            count = 0x7ffffc00;\n          }\n          if (data != 0) break;\n          value1 = *ptr2;\n          data = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input_data[9])(output,input_data[7],value1,count);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(input_data + 3);\nLAB_00083da4:\n          *(ushort *)(input_data + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = ptr_array[2];\n        value1 = value1 + result;\n        data = data - result;\n        ptr_array[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "output",
                "param_2": "input_data",
                "param_3": "ptr_array",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag",
                "uVar5": "data",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "size1",
                "uVar9": "size2",
                "uVar10": "count",
                "uVar11": "temp",
                "local_2c": "temp_size"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nuint32 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "uint32"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_relocation_offset_0008400c",
            "code": "\ndword getElfRelocationOffset_0008400c(void)\n\n{\n  return relArray[275].relocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "check_and_modify_data_00084018",
            "code": "\nvoid checkAndModifyData_00084018(int inputData,int *dataPointer)\n\n{\n  ushort value1;\n  int result1;\n  int result2;\n  uint value2;\n  bool flag;\n  undefined stackArray [4];\n  uint localValue;\n  \n  value1 = *(ushort *)(dataPointer + 3);\n  value2 = (uint)value1;\n  if ((int)(value2 << 0x1e) < 0) {\n    *dataPointer = (int)dataPointer + 0x43;\n    dataPointer[4] = (int)dataPointer + 0x43;\n    dataPointer[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)dataPointer + 0xe)) {\n    result1 = FUN_00084494(inputData,(int)*(short *)((int)dataPointer + 0xe),stackArray);\n    if (-1 < result1) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (dataPointer[10] == 0x8427d)) {\n        result1 = 0x400;\n        *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x400;\n        dataPointer[0x13] = 0x400;\n      }\n      else {\n        result1 = 0x400;\n        *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    value1 = *(ushort *)(dataPointer + 3);\n    value2 = (uint)value1;\n  }\n  *(ushort *)(dataPointer + 3) = value1 | 0x800;\n  if ((value2 & 0x80) == 0) {\n    result1 = 0x400;\n  }\n  else {\n    result1 = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  result2 = FUN_00081810(inputData,result1);\n  value1 = *(ushort *)(dataPointer + 3);\n  if (result2 == 0) {\n    if (-1 < (int)((uint)value1 << 0x16)) {\n      *(ushort *)(dataPointer + 3) = value1 | 2;\n      *dataPointer = (int)dataPointer + 0x43;\n      dataPointer[4] = (int)dataPointer + 0x43;\n      dataPointer[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputData + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(dataPointer + 3) = value1 | 0x80;\n    *dataPointer = result2;\n    dataPointer[4] = result2;\n    dataPointer[5] = result1;\n    if ((flag) && (result1 = FUN_000844bc(inputData,(int)*(short *)((int)dataPointer + 0xe)), result1 != 0))\n    {\n      *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "check_and_modify_data_00084018",
                "param_1": "inputData",
                "param_2": "dataPointer",
                "uVar1": "value1",
                "iVar2": "result1",
                "iVar3": "result2",
                "uVar4": "value2",
                "bVar5": "flag",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "search_character_000840f8",
            "code": "\nuint * searchCharacter_000840f8(uint *data,char target,uint length)\n\n{\n  uint xorResult;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      ptr = data;\n      do {\n        xorResult = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((xorResult + 0xfefefeff & ~xorResult & 0x80808080) != 0) break;\n        length = length - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_00084150;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      ptr = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "search_character_000840f8",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "xorResult",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_function_000841e4",
            "code": "\nint executeFunction_000841e4(uint inputValue)\n\n{\n  dword rOffset;\n  undefined4 result;\n  int functionOffset;\n  code *functionPtr;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 returnAddr;\n  undefined4 someValue;\n  \n  rOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  someValue = 0x20070460;\n  if (0x1f < inputValue) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  functionOffset = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((functionOffset == 0) || (functionPtr = *(code **)(functionOffset + inputValue * 4), functionPtr == (code *)0x0)) {\n    result = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    functionOffset = FUNC_00080efc(result,inputValue,inputValue,0,someValue,tempVar1,tempVar2,returnAddr);\n    if ((functionOffset == -1) && (DAT_20071244 != 0)) {\n      *(int *)rOffset = DAT_20071244;\n      return -1;\n    }\n    return functionOffset;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(functionOffset + inputValue * 4) = 0;\n    (*functionPtr)(inputValue);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_function_000841e4",
                "param_1": "inputValue",
                "dVar1": "rOffset",
                "uVar2": "result",
                "iVar3": "functionOffset",
                "pcVar4": "functionPtr",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "returnAddr",
                "uVar5": "someValue"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_negative_one_thunk_00080efe",
            "code": "\nundefined4 get_negative_one_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_negative_one_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_counter_00084220",
            "code": "\nvoid updateCounter_00084220(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = FUN_00084508(param1,(int)*(short *)(param2 + 0xe));\n  if (-1 < result) {\n    *(int *)(param2 + 0x50) = *(int *)(param2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_counter_00084220",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int returnValue;\n  ushort extractedValue;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  extractedValue = *(ushort *)(data + 0xc);\n  if ((int)((uint)extractedValue << 0x17) < 0) {\n    FUN_000844e0(result,(int)*(short *)(data + 0xe),0,2);\n    extractedValue = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = extractedValue & 0xefff;\n  DAT_20071244 = 0;\n  returnValue = FUN_00080ec8((int)*(short *)(data + 0xe),param1,param2,param2,unused1,unused2,\n                       unused3,unused4);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "uVar2": "extractedValue",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_parameter_0008427c",
            "code": "\nvoid updateParameter_0008427c(undefined4 dataPtr,int structPtr)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = FUN_000844e0(dataPtr,(int)*(short *)(structPtr + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(structPtr + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(structPtr + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(structPtr + 0x50) = result;\n  }\n  *(ushort *)(structPtr + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_parameter_0008427c",
                "param_1": "dataPtr",
                "param_2": "structPtr",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int inputData,uint dataLength,undefined4 *buffer,undefined4 config)\n\n{\n  ushort headerValue;\n  uint headerSize;\n  undefined *bufferPointer;\n  int offset;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  headerValue = *(ushort *)(buffer + 3);\n  headerSize = (uint)headerValue;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(headerSize << 0x1c)) || (offset = buffer[4], offset == 0)) {\n    offset = FUN_0008356c(inputData,buffer,headerValue,headerSize,config);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    headerValue = *(ushort *)(buffer + 3);\n    offset = buffer[4];\n    headerSize = (uint)headerValue;\n  }\n  dataLength = dataLength & 0xff;\n  if ((int)(headerSize << 0x12) < 0) {\n    bufferPointer = (undefined *)*buffer;\n    offset = (int)bufferPointer - offset;\n    if (offset < (int)buffer[5]) {\nLAB_000842d6:\n      offset = offset + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    bufferPointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = headerValue | 0x2000;\n    offset = (int)bufferPointer - offset;\n    if (offset < (int)buffer[5]) goto LAB_000842d6;\n  }\n  offset = FUN_00083850(inputData,buffer);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  bufferPointer = (undefined *)*buffer;\n  offset = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = bufferPointer + 1;\n  *bufferPointer = (char)dataLength;\n  if (((buffer[5] == offset) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (dataLength == 10)))) &&\n     (offset = FUN_00083850(inputData,buffer), offset != 0)) {\n    return 0xffffffff;\n  }\n  return dataLength;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "inputData",
                "param_2": "dataLength",
                "param_3": "buffer",
                "param_4": "config",
                "uVar1": "headerValue",
                "uVar2": "headerSize",
                "puVar3": "bufferPointer",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "perform_relocation_0008434c",
            "code": "\nvoid performRelocation_0008434c(undefined4 *destination,int size,undefined4 data,undefined4 *result)\n\n{\n  dword relocationInfo;\n  undefined4 functionPointer;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    functionPointer = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(destination,temporaryBuffer,0,functionPointer,result);\n  }\n  else {\n    functionPointer = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(destination,size,data,functionPointer,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *destination = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "perform_relocation_0008434c",
                "param_1": "destination",
                "param_2": "size",
                "param_3": "data",
                "param_4": "result",
                "dVar1": "relocationInfo",
                "uVar2": "functionPointer",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "convert_to_char_or_set_error_0008439c",
            "code": "\nundefined4 convertToCharOrSetError_0008439c(undefined4 *errorFlag,undefined *outputChar,uint inputValue)\n\n{\n  if (outputChar == (undefined *)0x0) {\n    return 0;\n  }\n  if (inputValue < 0x100) {\n    *outputChar = (char)inputValue;\n    return 1;\n  }\n  *errorFlag = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "convert_to_char_or_set_error_0008439c",
                "param_1": "errorFlag",
                "param_2": "outputChar",
                "param_3": "inputValue"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_param_00084484",
            "code": "\nundefined4 processParam_00084484(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = FUN_00083850(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_param_00084484",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "process_binary_00084494",
            "code": "\nvoid processBinary_00084494(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080eb0(input1,input2,input2,0,input3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "process_binary_00084494",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_assign_value_000844bc",
            "code": "\nvoid checkAndAssignValue_000844bc(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eba(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_assign_value_000844bc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "validate_and_assign_return_value_000844e0",
            "code": "\nvoid validateAndAssignReturnValue_000844e0(int *outputValue,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ebe(inputParam1,inputParam2,inputParam3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "validate_and_assign_return_value_000844e0",
                "param_1": "outputValue",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "execute_and_check_result_00084508",
            "code": "\nvoid executeAndCheckResult_00084508(int *result,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int functionResult;\n  \n  DAT_20071244 = 0;\n  functionResult = FUN_00080ec2(input_1,input_2,input_3);\n  if ((functionResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "execute_and_check_result_00084508",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "functionResult"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_for_zero_parameters_00084530",
            "code": "\nint checkForZeroParameters_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_for_zero_parameters_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_adjust_0008455c",
            "code": "\nvoid subtract_and_adjust_0008455c(uint input_value,int subtracted_value,undefined4 factor_low,undefined4 factor_high,int *output_array)\n\n{\n  uint computed_value;\n  longlong result;\n  \n  result = FUN_000845c0();\n  result = result * CONCAT44(factor_high,factor_low);\n  computed_value = (uint)result;\n  *output_array = input_value - computed_value;\n  output_array[1] = (subtracted_value - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < computed_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_adjust_0008455c",
                "param_1": "input_value",
                "param_2": "subtracted_value",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "output_array",
                "uVar1": "computed_value",
                "lVar2": "result"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculateDifference_0008458c(uint inputValue1,int inputValue2,undefined4 constant1,undefined4 constant2,int *outputArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_00084860();\n  product = product * CONCAT44(constant2,constant1);\n  result = (uint)product;\n  *outputArray = inputValue1 - result;\n  outputArray[1] = (inputValue2 - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "constant1",
                "param_4": "constant2",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "div_and_mod_000845c0",
            "code": "\nundefined8 div_and_mod_000845c0(uint dividend,uint dividend_lower,uint divisor,uint divisor_lower)\n\n{\n  longlong product;\n  uint quotient_higher;\n  uint quotient_lower;\n  uint remainder_higher;\n  uint remainder_lower;\n  int shift_count;\n  uint temp1;\n  uint temp2;\n  uint is_negative;\n  uint quotient1;\n  uint quotient2;\n  uint temp3;\n  bool carry_bit;\n  \n  if ((int)dividend_lower < 0) {\n    carry_bit = dividend != 0;\n    dividend = -dividend;\n    dividend_lower = -dividend_lower - (uint)carry_bit;\n    is_negative = 0xffffffff;\n  }\n  else {\n    is_negative = 0;\n  }\n  if ((int)divisor_lower < 0) {\n    is_negative = ~is_negative;\n    carry_bit = divisor != 0;\n    divisor = -divisor;\n    divisor_lower = -divisor_lower - (uint)carry_bit;\n  }\n  if (divisor_lower == 0) {\n    if (dividend_lower < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        quotient_lower = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_lower = dividend_lower << shift_count | quotient_lower;\n      }\n      quotient_higher = divisor >> 0x10;\n      remainder_higher = dividend_lower / quotient_higher;\n      temp1 = (divisor & 0xffff) * remainder_higher;\n      quotient1 = dividend >> 0x10 | (dividend_lower - quotient_higher * remainder_higher) * 0x10000;\n      quotient_lower = remainder_higher;\n      if (quotient1 <= temp1 && temp1 - quotient1 != 0) {\n        carry_bit = CARRY4(quotient1,divisor);\n        quotient1 = quotient1 + divisor;\n        quotient_lower = remainder_higher - 1;\n        if ((carry_bit == false) && (quotient1 <= temp1 && temp1 - quotient1 != 0)) {\n          quotient_lower = remainder_higher - 2;\n          quotient1 = quotient1 + divisor;\n        }\n      }\n      temp2 = (quotient1 - temp1) / quotient_higher;\n      remainder_higher = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((quotient1 - temp1) - quotient_higher * temp2) * 0x10000;\n      quotient_higher = temp2;\n      if (temp1 <= remainder_higher && remainder_higher - temp1 != 0) {\n        quotient_higher = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= remainder_higher && remainder_higher - (temp1 + divisor) != 0)) {\n          quotient_higher = temp2 - 2;\n        }\n      }\n      quotient_higher = quotient_higher | quotient_lower << 0x10;\n      quotient_lower = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_lower = dividend_lower - divisor;\n        remainder_higher = divisor >> 0x10;\n        temp3 = divisor & 0xffff;\n        quotient_lower = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        quotient_lower = dividend_lower >> (0x20U - shift_count & 0xff);\n        remainder_higher = divisor >> 0x10;\n        quotient1 = quotient_lower / remainder_higher;\n        temp3 = divisor & 0xffff;\n        temp1 = temp3 * quotient1;\n        temp2 = dividend >> (0x20U - shift_count & 0xff) | dividend_lower << shift_count;\n        quotient_lower = temp2 >> 0x10 | (quotient_lower - remainder_higher * quotient1) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient_higher = quotient1;\n        if (quotient_lower <= temp1 && temp1 - quotient_lower != 0) {\n          carry_bit = CARRY4(quotient_lower,divisor);\n          quotient_lower = quotient_lower + divisor;\n          quotient_higher = quotient1 - 1;\n          if ((carry_bit == false) && (quotient_lower <= temp1 && temp1 - quotient_lower != 0)) {\n            quotient_higher = quotient1 - 2;\n            quotient_lower = quotient_lower + divisor;\n          }\n        }\n        remainder_lower = (quotient_lower - temp1) / remainder_higher;\n        quotient1 = temp3 * remainder_lower;\n        dividend_lower = temp2 & 0xffff | ((quotient_lower - temp1) - remainder_higher * remainder_lower) * 0x10000;\n        quotient_lower = remainder_lower;\n        if (dividend_lower <= quotient1 && quotient1 - dividend_lower != 0) {\n          carry_bit = CARRY4(dividend_lower,divisor);\n          dividend_lower = dividend_lower + divisor;\n          quotient_lower = remainder_lower - 1;\n          if ((carry_bit == false) && (dividend_lower <= quotient1 && quotient1 - dividend_lower != 0)) {\n            quotient_lower = remainder_lower - 2;\n            dividend_lower = dividend_lower + divisor;\n          }\n        }\n        dividend_lower = dividend_lower - quotient1;\n        quotient_lower = quotient_lower | quotient_higher << 0x10;\n      }\n      quotient_higher = dividend_lower / remainder_higher;\n      quotient1 = temp3 * quotient_higher;\n      temp2 = dividend >> 0x10 | (dividend_lower - remainder_higher * quotient_higher) * 0x10000;\n      temp1 = quotient_higher;\n      if (temp2 <= quotient1 && quotient1 - temp2 != 0) {\n        carry_bit = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_higher - 1;\n        if ((carry_bit == false) && (temp2 <= quotient1 && quotient1 - temp2 != 0)) {\n          temp1 = quotient_higher - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainder_lower = (temp2 - quotient1) / remainder_higher;\n      temp3 = temp3 * remainder_lower;\n      remainder_higher = dividend & 0xffff | ((temp2 - quotient1) - remainder_higher * remainder_lower) * 0x10000;\n      quotient_higher = remainder_lower;\n      if (remainder_higher <= temp3 && temp3 - remainder_higher != 0) {\n        quotient_higher = remainder_lower - 1;\n        if ((CARRY4(remainder_higher,divisor) == false) &&\n           (remainder_higher + divisor <= temp3 && temp3 - (remainder_higher + divisor) != 0)) {\n          quotient_higher = remainder_lower - 2;\n        }\n      }\n      quotient_higher = quotient_higher | temp1 << 0x10;\n    }\n  }\n  else if (dividend_lower < divisor_lower) {\n    quotient_lower = 0;\n    quotient_higher = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_lower);\n    if (shift_count == 0) {\n      if ((divisor_lower < dividend_lower) || (divisor <= dividend)) {\n        quotient_lower = 0;\n        quotient_higher = 1;\n      }\n      else {\n        quotient_higher = 0;\n        quotient_lower = 0;\n      }\n    }\n    else {\n      quotient_lower = 0x20 - shift_count;\n      remainder_higher = dividend_lower >> (quotient_lower & 0xff);\n      temp3 = divisor >> (quotient_lower & 0xff) | divisor_lower << shift_count;\n      quotient1 = temp3 >> 0x10;\n      quotient_higher = remainder_higher / quotient1;\n      temp2 = (temp3 & 0xffff) * quotient_higher;\n      temp1 = dividend_lower << shift_count | dividend >> (quotient_lower & 0xff);\n      remainder_higher = temp1 >> 0x10 | (remainder_higher - quotient1 * quotient_higher) * 0x10000;\n      quotient_lower = quotient_higher;\n      if (remainder_higher <= temp2 && temp2 - remainder_higher != 0) {\n        carry_bit = CARRY4(remainder_higher,temp3);\n        remainder_higher = remainder_higher + temp3;\n        quotient_lower = quotient_higher - 1;\n        if ((carry_bit == false) && (remainder_higher <= temp2 && temp2 - remainder_higher != 0)) {\n          quotient_lower = quotient_higher - 2;\n          remainder_higher = remainder_higher + temp3;\n        }\n      }\n      remainder_lower = (remainder_higher - temp2) / quotient1;\n      quotient2 = (temp3 & 0xffff) * remainder_lower;\n      remainder_higher = temp1 & 0xffff | ((remainder_higher - temp2) - quotient1 * remainder_lower) * 0x10000;\n      quotient_higher = remainder_lower;\n      if (remainder_higher <= quotient2 && quotient2 - remainder_higher != 0) {\n        carry_bit = CARRY4(remainder_higher,temp3);\n        remainder_higher = remainder_higher + temp3;\n        quotient_higher = remainder_lower - 1;\n        if ((carry_bit == false) && (remainder_higher <= quotient2 && quotient2 - remainder_higher != 0)) {\n          quotient_higher = remainder_lower - 2;\n          remainder_higher = remainder_higher + temp3;\n        }\n      }\n      quotient_higher = quotient_higher | quotient_lower << 0x10;\n      product = (ulonglong)quotient_higher * (ulonglong)(divisor << shift_count);\n      temp1 = (uint)((ulonglong)product >> 0x20);\n      quotient_lower = 0;\n      if ((remainder_higher - quotient2 < temp1) ||\n         ((remainder_higher - quotient2 == temp1 && (dividend << shift_count < (uint)product)))) {\n        quotient_higher = quotient_higher - 1;\n        quotient_lower = 0;\n      }\n    }\n  }\n  if (is_negative != 0) {\n    carry_bit = quotient_higher != 0;\n    quotient_higher = -quotient_higher;\n    quotient_lower = -quotient_lower - (uint)carry_bit;\n  }\n  return CONCAT44(quotient_lower,quotient_higher);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "div_and_mod_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_lower",
                "param_3": "divisor",
                "param_4": "divisor_lower",
                "lVar1": "product",
                "uVar2": "quotient_higher",
                "uVar3": "quotient_lower",
                "uVar4": "remainder_higher",
                "uVar5": "remainder_lower",
                "iVar6": "shift_count",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_negative",
                "uVar10": "quotient1",
                "uVar11": "quotient2",
                "uVar12": "temp3",
                "bVar13": "carry_bit"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_and_remainder_00084860",
            "code": "\nulonglong divideAndRemainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint bits;\n  uint q1;\n  uint r1;\n  uint q2;\n  uint r2;\n  uint q3;\n  uint r3;\n  uint q4;\n  int shift;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift = LZCOUNT(quotient);\n      if (shift == 0) {\n        divisor = divisor - quotient;\n        q1 = quotient >> 0x10;\n        q2 = quotient & 0xffff;\n        bits = 1;\n      }\n      else {\n        quotient = quotient << shift;\n        r3 = divisor >> (0x20U - shift & 0xff);\n        q1 = quotient >> 0x10;\n        q4 = r3 / q1;\n        q2 = quotient & 0xffff;\n        bits = q2 * q4;\n        r2 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        r1 = r2 >> 0x10 | (r3 - q1 * q4) * 0x10000;\n        dividend = dividend << shift;\n        r3 = q4;\n        if (r1 <= bits && bits - r1 != 0) {\n          carry = CARRY4(r1,quotient);\n          r1 = r1 + quotient;\n          r3 = q4 - 1;\n          if ((carry == false) && (r1 <= bits && bits - r1 != 0)) {\n            r3 = q4 - 2;\n            r1 = r1 + quotient;\n          }\n        }\n        q3 = (r1 - bits) / q1;\n        q4 = q2 * q3;\n        divisor = r2 & 0xffff | ((r1 - bits) - q1 * q3) * 0x10000;\n        bits = q3;\n        if (divisor <= q4 && q4 - divisor != 0) {\n          carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          bits = q3 - 1;\n          if ((carry == false) && (divisor <= q4 && q4 - divisor != 0)) {\n            bits = q3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - q4;\n        bits = bits | r3 << 0x10;\n      }\n      q4 = divisor / q1;\n      r1 = q2 * q4;\n      r2 = dividend >> 0x10 | (divisor - q1 * q4) * 0x10000;\n      r3 = q4;\n      if (r2 <= r1 && r1 - r2 != 0) {\n        carry = CARRY4(r2,quotient);\n        r2 = r2 + quotient;\n        r3 = q4 - 1;\n        if ((carry == false) && (r2 <= r1 && r1 - r2 != 0)) {\n          r3 = q4 - 2;\n          r2 = r2 + quotient;\n        }\n      }\n      q4 = (r2 - r1) / q1;\n      q2 = q2 * q4;\n      r2 = dividend & 0xffff | ((r2 - r1) - q1 * q4) * 0x10000;\n      q1 = q4;\n      if (r2 <= q2 && q2 - r2 != 0) {\n        q1 = q4 - 1;\n        if ((CARRY4(r2,quotient) == false) &&\n           (r2 + quotient <= q2 && q2 - (r2 + quotient) != 0)) {\n          q1 = q4 - 2;\n        }\n      }\n      return CONCAT44(bits,q1 | r3 << 0x10);\n    }\n    shift = LZCOUNT(quotient);\n    if (shift != 0) {\n      r3 = dividend >> (0x20U - shift & 0xff);\n      quotient = quotient << shift;\n      dividend = dividend << shift;\n      divisor = r3 | divisor << shift;\n    }\n    bits = quotient >> 0x10;\n    q1 = divisor / bits;\n    q2 = (quotient & 0xffff) * q1;\n    q4 = dividend >> 0x10 | (divisor - bits * q1) * 0x10000;\n    r3 = q1;\n    if (q4 <= q2 && q2 - q4 != 0) {\n      carry = CARRY4(q4,quotient);\n      q4 = q4 + quotient;\n      r3 = q1 - 1;\n      if ((carry == false) && (q4 <= q2 && q2 - q4 != 0)) {\n        r3 = q1 - 2;\n        q4 = q4 + quotient;\n      }\n    }\n    r2 = (q4 - q2) / bits;\n    q1 = (quotient & 0xffff) * r2;\n    q2 = dividend & 0xffff | ((q4 - q2) - bits * r2) * 0x10000;\n    bits = r2;\n    if (q2 <= q1 && q1 - q2 != 0) {\n      bits = r2 - 1;\n      if ((CARRY4(q2,quotient) == false) &&\n         (q2 + quotient <= q1 && q1 - (q2 + quotient) != 0)) {\n        bits = r2 - 2;\n      }\n    }\n    bits = bits | r3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift = LZCOUNT(remainder);\n    if (shift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      bits = 0;\n    }\n    else {\n      bits = 0x20 - shift;\n      r3 = divisor >> (bits & 0xff);\n      q1 = remainder << shift | quotient >> (bits & 0xff);\n      q2 = q1 >> 0x10;\n      r1 = r3 / q2;\n      q4 = (q1 & 0xffff) * r1;\n      r2 = dividend >> (bits & 0xff) | divisor << shift;\n      bits = r2 >> 0x10 | (r3 - q2 * r1) * 0x10000;\n      r3 = r1;\n      if (bits <= q4 && q4 - bits != 0) {\n        carry = CARRY4(bits,q1);\n        bits = bits + q1;\n        r3 = r1 - 1;\n        if ((carry == false) && (bits <= q4 && q4 - bits != 0)) {\n          r3 = r1 - 2;\n          bits = bits + q1;\n        }\n      }\n      r1 = (bits - q4) / q2;\n      q3 = (q1 & 0xffff) * r1;\n      q2 = r2 & 0xffff | ((bits - q4) - q2 * r1) * 0x10000;\n      bits = r1;\n      if (q2 <= q3 && q3 - q2 != 0) {\n        carry = CARRY4(q2,q1);\n        q2 = q2 + q1;\n        bits = r1 - 1;\n        if ((carry == false) && (q2 <= q3 && q3 - q2 != 0)) {\n          bits = r1 - 2;\n          q2 = q2 + q1;\n        }\n      }\n      bits = bits | r3 << 0x10;\n      temp = (ulonglong)bits * (ulonglong)(quotient << shift);\n      r3 = (uint)((ulonglong)temp >> 0x20);\n      if ((q2 - q3 < r3) || ((q2 - q3 == r3 && (dividend << shift < (uint)temp)))\n         ) {\n        bits = bits - 1;\n      }\n    }\n  }\n  return (ulonglong)bits;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_and_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "bits",
                "uVar3": "q1",
                "uVar4": "r1",
                "uVar5": "q2",
                "uVar6": "r2",
                "uVar7": "q3",
                "uVar8": "r3",
                "uVar9": "q4",
                "iVar10": "shift",
                "bVar11": "carry"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 95586,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": []
}