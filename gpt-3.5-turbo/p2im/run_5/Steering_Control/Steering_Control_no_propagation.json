{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "uStack_8": "value2",
                "param_1": "data",
                "uStack_4": "value3",
                "uStack_c": "value1",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3"
            },
            "code": "void process_data_000817c8(undefined4 data, undefined4* ptr1, undefined4* ptr2, undefined4* ptr3)\n{\n  undefined4 value1 = *ptr1;\n  undefined4 value2 = *ptr2;\n  undefined4 value3 = *ptr3;\n  call_function(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &value1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": true,
            "current_name": "process_data_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_values_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int compare_values_00081560(int value1, int value2)\n{\n  if (value1 != value2) {\n    notify_mismatch();\n  }\n  return value1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "compare_values_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": true,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "iVar1": "num_bits_matched",
                "FUN_00081684": "check_bits_00081684",
                "param_1": "bits",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "num_bits_to_check"
            },
            "code": "int check_bits_00081684(uint *bits, uint mask, uint expected, int num_bits_to_check) {\n  int num_bits_matched = 0;\n  while (num_bits_to_check-- > 0) {\n    if ((*bits & mask) != expected) {\n      return num_bits_matched;\n    }\n    num_bits_matched++;\n    bits++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": true,
            "current_name": "check_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "puVar3": "src_ptr_1",
                "FUN_000825cc": "copy_string_000825cc",
                "puVar4": "src_ptr_2",
                "param_1": "dest",
                "puVar7": "dest_ptr",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "uVar5": "current_uint_1",
                "uVar6": "current_uint_2",
                "bVar8": "is_null_char"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src)\n{\n  char current_char;\n  ushort current_ushort;\n  uint *src_ptr_1;\n  uint *src_ptr_2;\n  uint current_uint_1;\n  uint current_uint_2;\n  uint *dest_ptr;\n  bool is_null_char;\n\n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr_2 = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr_2 = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr_2;\n    if (((uint)src_ptr_2 & 2) != 0) {\n      src = (uint *)((int)src_ptr_2 + 2);\n      current_ushort = *(ushort *)src_ptr_2;\n      is_null_char = (current_ushort & 0xff) == 0;\n      if (is_null_char) {\n        *(char *)dest = (char)current_ushort;\n      }\n      else {\n        *(ushort *)dest = current_ushort;\n        is_null_char = (current_ushort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_null_char) {\n        return;\n      }\n    }\n  }\n  current_uint_1 = *src;\n  src_ptr_2 = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint_1 + 0xfefefeff & ~current_uint_1 & 0x80808080) != 0) goto LAB_00082630;\n    dest_ptr = dest + 1;\n    *dest = current_uint_1;\n    src_ptr_2 = src + 2;\n    current_uint_1 = src[1];\n  }\n  while( true ) {\n    src_ptr_1 = src_ptr_2 + 1;\n    current_uint_2 = *src_ptr_2;\n    dest = dest_ptr;\n    if ((current_uint_1 + 0xfefefeff & ~current_uint_1 & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_uint_1;\n    current_uint_1 = current_uint_2;\n    if ((current_uint_2 + 0xfefefeff & ~current_uint_2 & 0x80808080) != 0) break;\n    src_ptr_2 = src_ptr_2 + 2;\n    current_uint_1 = *src_ptr_1;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_uint_2;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_uint_1;\n    current_uint_2 = current_uint_1 & 0xff;\n    current_uint_1 = current_uint_1 >> 8 | current_uint_1 << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (current_uint_2 != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "imported": true,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "DAT_00080134": "isPtrNotNull",
                "DAT_00080144": "DAT_00080144",
                "PTR_DAT_0008013c": "PTR_DAT_0008013c",
                "param_1": "param1",
                "FUN_00080118": "executeFunctionIfAvailable_00080118",
                "param_2": "data",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080140": "isDatNotNull"
            },
            "code": "void executeFunctionIfAvailable_00080118(int param1, char* data, int param2, int param3) {\n  bool DAT_00080134 = (*PTR_DAT_0008013c != nullptr);\n  bool DAT_00080140 = (*DAT_00080140 != 0);\n  if (DAT_00080134) {\n    data = *PTR_DAT_0008013c;\n  }\n  if (DAT_00080140 && DAT_00080144 != nullptr) {\n    (*DAT_00080144)(*DAT_00080140, data, param2, DAT_00080144, param3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "executeFunctionIfAvailable_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "uVar1": "bit_mask",
                "param_1": "bit_position",
                "FUN_00080aa8": "check_and_set_bit_00080aa8"
            },
            "code": "uint8_t check_and_set_bit_00080aa8(uint8_t bit_position)\n{\n  uint8_t bit_mask;\n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & *(uint8_t *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n        *(uint8_t *)(DAT_00080ae8 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & *(uint8_t *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n        *(uint8_t *)(DAT_00080ae8 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000813dc",
                "FUN_00080774",
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "check_and_set_bit_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "iVar3": "value",
                "puVar2": "type_ptr",
                "param_1": "index",
                "iVar9": "entry_offset",
                "iVar10": "entry_address",
                "FUN_00080f0c": "get_value_00080f0c",
                "param_2": "param_2",
                "puVar1": "entry_ptr",
                "uVar5": "uVar5",
                "uVar4": "uVar4",
                "uVar6": "uVar6",
                "bVar8": "type_and_flags",
                "bVar7": "type"
            },
            "code": "int get_value_00080f0c(int index, int param_2)\n{\n  undefined *entry_ptr = PTR_DAT_00081008;\n  undefined *type_ptr = PTR_DAT_0008100c;\n  int value = index;\n  if (entry_ptr[index * 0x1c + 0xc] != '\\0') {\n    if ((type_ptr[index] & 0xf) == 4) {\n      value = FUN_00080d58(DAT_00081010,entry_ptr[index * 0x1c + 0x19]);\n    }\n    byte type = type_ptr[index] & 0xf;\n    if ((type < 3) && (type_ptr[index] != 0)) {\n      if (type == 2) {\n        if (param_2 == 0) {\n          return value;\n        }\n      }\n      else if (type == 1) {\n        if (param_2 == 2) {\n          return value;\n        }\n      }\n      else if (type == 3) {\n        if (param_2 == 1) {\n          return value;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (param_2 != 1) {\nLAB_00080f68:\n      if (param_2 == 0) {\n        int entry_offset = index * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(entry_ptr + entry_offset + 8));\n        value = FUN_00080a30(*(undefined4 *)(entry_ptr + entry_offset),3,*(undefined4 *)(entry_ptr + entry_offset + 4),0);\n        type_ptr[index] = type_ptr[index] & 0xf0 | 2;\n      }\n      else {\n        if (param_2 != 2) {\n          return value;\n        }\n        int entry_offset = index * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(entry_ptr + entry_offset + 8));\n        value = FUN_00080a30(*(undefined4 *)(entry_ptr + entry_offset),3,*(undefined4 *)(entry_ptr + entry_offset + 4),1);\n        type_ptr[index] = type_ptr[index] & 0xf0 | 1;\n      }\n      return value;\n    }\n    int entry_offset = index * 0x1c;\n    int entry_address = *(int *)(entry_ptr + entry_offset);\n    byte entry_type = type_ptr[index] >> 4;\n    if (entry_type == 0) {\n      int uVar5 = 4;\n    }\n    else {\n      int uVar5 = 5;\n    }\n    value = FUN_00080a30(entry_address,uVar5,*(undefined4 *)(entry_ptr + entry_offset + 4),*(undefined4 *)(entry_ptr + entry_offset + 0x10));\n    type_ptr[index] = type_ptr[index] & 0xf0 | 3;\n    if (*(int *)(entry_address + 0x18) == -1) {\n      uint uVar4 = *(uint *)(entry_ptr + entry_offset + 8);\n      if (0x2c < uVar4) {\n        return 1;\n      }\n      if (uVar4 < 0x20) {\n        uVar4 = 1 << (uVar4 & 0xff);\n        uint uVar6 = *(uint *)(DAT_00080b28 + 0x18) & uVar4;\n        if (uVar6 == uVar4) {\n          *(uint *)(DAT_00080b28 + 0x14) = uVar6;\n        }\n      }\n      else {\n        uVar4 = 1 << (uVar4 - 0x20 & 0xff);\n        uint uVar6 = *(uint *)(DAT_00080b28 + 0x108) & uVar4;\n        if (uVar6 == uVar4) {\n          *(uint *)(DAT_00080b28 + 0x104) = uVar6;\n        }\n      }\n      return 0;\n    }\n  }\n  return value;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080a30",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "get_value_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "iVar1": "base_address",
                "iVar3": "temp_value",
                "iVar5": "new_value",
                "puVar2": "pointer",
                "param_1": "input_value",
                "FUN_00083a74": "calculate_new_value_00083a74",
                "param_2": "input_offset",
                "uVar4": "var1"
            },
            "code": "undefined4 calculate_new_value_00083a74(undefined4 input_value,int input_offset) {\n\n  int base_address = DAT_00083b04;\n  do_nothing_00081f94();\n\n  uint var1 = *(uint *)(*(int *)(base_address + 8) + 4) & 0xfffffffc;\n  int new_value = ((var1 - input_offset) + 0xfef & 0xfffff000) - 0x1000;\n\n  if (0xfff < new_value) {\n    int temp_value = FUN_0008236c(input_value,0);\n\n    if (temp_value == *(int *)(base_address + 8) + var1) {\n      temp_value = FUN_0008236c(input_value,-new_value);\n      undefined *pointer = PTR_DAT_00083b08;\n\n      if (temp_value != -1) {\n        int new_offset = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(base_address + 8) + 4) = var1 - new_value | 1;\n        *(int *)pointer = new_offset - new_value;\n        do_nothing_00081f98(input_value);\n        return 1;\n      }\n      new_value = FUN_0008236c(input_value,0);\n      pointer = PTR_DAT_00083b08;\n      var1 = new_value - *(int *)(base_address + 8);\n\n      if (0xf < (int)var1) {\n        int temp_offset = *DAT_00083b0c;\n        *(uint *)(*(int *)(base_address + 8) + 4) = var1 | 1;\n        *(int *)pointer = new_value - temp_offset;\n      }\n    }\n  }\n  do_nothing_00081f98(input_value);\n  return 0;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_0008236c",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": true,
            "current_name": "calculate_new_value_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "iVar2": "status",
                "param_1": "result_ptr",
                "FUN_000844e0": "get_result_000844e0",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr"
            },
            "code": "void get_result_000844e0(int *result_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *data_ptr;\n  int status;\n  \n  data_ptr = PTR_DAT_00084504;\n  *(undefined4 *)PTR_DAT_00084504 = 0;\n  status = calculate_result(arg1, arg2, arg3);\n  if ((status == -1) && (*(int *)data_ptr != 0)) {\n    *result_ptr = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": true,
            "current_name": "get_result_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "iVar1": "current_block",
                "iVar3": "previous_block",
                "iVar5": "new_block",
                "iVar6": "memory_pool_header",
                "i": "loop_var",
                "param_1": "memory_pool",
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_2": "block_size",
                "uVar2": "block_header",
                "uVar4": "previous_block_header",
                "uVar7": "memory_pool_bitmap"
            },
            "code": "void allocate_memory_block_00083b10(int memory_pool, int block_size)\n{\n  int current_block;\n  uint block_header;\n  int previous_block;\n  uint previous_block_header;\n  int new_block;\n  int memory_pool_header;\n  uint memory_pool_bitmap;\n  int i;\n  \n  if (block_size == 0) {\n    return;\n  }\n  do_nothing();\n  memory_pool_header = DAT_00083c98;\n  block_header = *(uint *)(block_size + -4);\n  previous_block = block_size + -8;\n  block_size = block_size + -8;\n  block_header = block_header & 0xfffffffe;\n  current_block = previous_block + block_header;\n  previous_block_header = *(uint *)(current_block + 4) & 0xfffffffc;\n  if (*(int *)(memory_pool_header + 8) == current_block) {\n    previous_block_header = previous_block_header + block_header;\n    if (-1 < (int)(block_header << 0x1f)) {\n      previous_block = previous_block - *(int *)(block_size);\n      new_block = *(int *)(previous_block + 0xc);\n      current_block = *(int *)(previous_block + 8);\n      previous_block_header = previous_block_header + *(int *)(block_size);\n      *(int *)(current_block + 0xc) = new_block;\n      *(int *)(new_block + 8) = current_block;\n    }\n    block_header = *DAT_00083ca0;\n    *(uint *)(previous_block + 4) = previous_block_header | 1;\n    *(int *)(memory_pool_header + 8) = previous_block;\n    if (block_header <= previous_block_header) {\n      out_of_memory();\n    }\n  }\n  else {\n    block_header = block_header & 1;\n    *(uint *)(current_block + 4) = previous_block_header;\n    if (block_header == 0) {\n      previous_block = previous_block - *(int *)(block_size);\n      new_block = *(int *)(previous_block + 8);\n      previous_block_header = previous_block_header + *(int *)(block_size);\n      if (new_block == memory_pool_header + 8) {\n        block_header = 1;\n      }\n      else {\n        i = *(int *)(previous_block + 0xc);\n        *(int *)(new_block + 0xc) = i;\n        *(int *)(i + 8) = new_block;\n      }\n    }\n    else {\n      block_header = 0;\n    }\n    if (-1 < *(int *)(current_block + previous_block_header + 4) << 0x1f) {\n      previous_block_header = previous_block_header + previous_block_header;\n      new_block = *(int *)(current_block + 8);\n      if ((block_header == 0) && (new_block == DAT_00083c9c)) {\n        *(int *)(memory_pool_header + 0x14) = previous_block;\n        *(int *)(memory_pool_header + 0x10) = previous_block;\n        *(int *)(previous_block + 0xc) = new_block;\n        *(int *)(previous_block + 8) = new_block;\n        *(uint *)(previous_block + 4) = previous_block_header | 1;\n        *(uint *)(previous_block + previous_block_header) = previous_block_header;\n        goto LAB_00083ba4;\n      }\n      current_block = *(int *)(current_block + 0xc);\n      *(int *)(new_block + 0xc) = current_block;\n      *(int *)(current_block + 8) = new_block;\n    }\n    *(uint *)(previous_block + 4) = previous_block_header | 1;\n    *(uint *)(previous_block + previous_block_header) = previous_block_header;\n    if (block_header == 0) {\n      if (previous_block_header < 0x200) {\n        block_header = *(uint *)(memory_pool_header + 4);\n        i = memory_pool_header + (previous_block_header & 0xfffffff8);\n        current_block = *(int *)(i + 8);\n        *(int *)(previous_block + 8) = current_block;\n        *(int *)(previous_block + 0xc) = i;\n        *(uint *)(memory_pool_header + 4) = block_header | 1 << ((int)(previous_block_header >> 3) >> 2 & 0xffU);\n        *(int *)(i + 8) = previous_block;\n        *(int *)(current_block + 0xc) = previous_block;\n        do_nothing_2();\n        return;\n      }\n      block_header = previous_block_header >> 9;\n      if (block_header < 5) {\n        current_block = (previous_block_header >> 6) + 0x38;\n        i = current_block * 2;\n      }\n      else if (block_header < 0x15) {\n        current_block = block_header + 0x5b;\n        i = current_block * 2;\n      }\n      else if (block_header < 0x55) {\n        current_block = (previous_block_header >> 0xc) + 0x6e;\n        i = current_block * 2;\n      }\n      else if (block_header < 0x155) {\n        current_block = (previous_block_header >> 0xf) + 0x77;\n        i = current_block * 2;\n      }\n      else if (block_header < 0x555) {\n        current_block = (previous_block_header >> 0x12) + 0x7c;\n        i = current_block * 2;\n      }\n      else {\n        i = 0xfc;\n        current_block = 0x7e;\n      }\n      memory_pool_header = memory_pool_header + i * 4;\n      current_block = *(int *)(memory_pool_header + 8);\n      if (current_block == memory_pool_header) {\n        *(uint *)(DAT_00083c98 + 4) = *(uint *)(DAT_00083c98 + 4) | 1 << (current_block >> 2 & 0xffU);\n        memory_pool_header = current_block;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_block + 4) & 0xfffffffc) <= previous_block_header) break;\n          current_block = *(int *)(current_block + 8);\n        } while (memory_pool_header != current_block);\n        memory_pool_header = *(int *)(current_block + 0xc);\n      }\n      *(int *)(previous_block + 0xc) = memory_pool_header;\n      *(int *)(previous_block + 8) = current_block;\n      *(int *)(memory_pool_header + 8) = previous_block;\n      *(int *)(current_block + 0xc) = previous_block;\n    }\n  }\nLAB_00083ba4:\n  do_nothing_2();\n  return;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00083a74",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081810",
                "FUN_00083850",
                "FUN_00083ca8",
                "FUN_0008356c",
                "FUN_00081800",
                "FUN_00084484",
                "FUN_00081fac"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "undefined4": "int32_t",
                "FUN_00080e80": "returnZero_00080e80"
            },
            "code": "int32_t returnZero_00080e80(void)\n{\n  int32_t result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": true,
            "current_name": "returnZero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative_flag",
                "FUN_000810fc": "process_data_val",
                "FUN_000810cc": "add_minus_sign",
                "param_1": "data_ptr",
                "param_2": "data_val",
                "param_3": "data_len",
                "thunk_FUN_0008113a": "process_data_thunk_0008113a",
                "param_4": "extra_param"
            },
            "code": "int process_data_thunk_0008113a(undefined4 *data_ptr, uint data_val, uint data_len, undefined4 extra_param) {\n  int result;\n  int negative_flag;\n\n  if (data_len == 0) {\n    result = (**(code **)*data_ptr)(data_ptr,data_val & 0xff);\n    return result;\n  }\n  if (data_len == 10) {\n    negative_flag = (int)data_val < 0;\n    if (negative_flag) {\n      int minus_sign = FUN_000810cc(data_ptr,0x2d);\n      int abs_val = FUN_000810fc(data_ptr,-data_val,10);\n      return abs_val + minus_sign;\n    }\n  }\n  else {\n    data_len = data_len & 0xff;\n  }\n  result = FUN_000810fc(data_ptr,data_val,data_len,extra_param);\n  return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "process_data_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "iVar2": "result",
                "param_1": "output",
                "param_2": "input",
                "FUN_0008236c": "getInteger_0008236c",
                "puVar1": "dataPtr"
            },
            "code": "void getInteger_0008236c(int *output, undefined4 input)\n{\n  undefined *dataPtr;\n  int result;\n  dataPtr = PTR_DAT_0008238c;\n  *(undefined4 *)PTR_DAT_0008238c = 0;\n  result = calculate(input);\n  if ((result == -1) && (*(int *)dataPtr != 0)) {\n    *output = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "imported": true,
            "current_name": "getInteger_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "uVar1": "message_type",
                "iVar4": "error_code",
                "puVar3": "current_byte",
                "param_1": "socket_fd",
                "param_2": "message_length",
                "param_3": "message_buffer",
                "param_4": "message_flags",
                "FUN_000842a4": "send_message_000842a4",
                "uVar2": "message_size"
            },
            "code": "uint send_message_000842a4(int socket_fd, uint message_length, undefined4 *message_buffer, undefined4 message_flags)\n{\n  ushort message_type;\n  uint message_size;\n  undefined *current_byte;\n  int error_code;\n  \n  if ((socket_fd != 0) && (*(int *)(socket_fd + 0x38) == 0)) {\n    close(socket_fd);\n  }\n  message_type = *(ushort *)(message_buffer + 3);\n  message_size = (uint)message_type;\n  message_buffer[2] = message_buffer[6];\n  if ((-1 < (int)(message_size << 0x1c)) || (error_code = message_buffer[4], error_code == 0)) {\n    error_code = send_message_000842a4_internal(socket_fd, message_buffer, message_type, message_size, message_flags);\n    if (error_code != 0) {\n      return 0xffffffff;\n    }\n    message_type = *(ushort *)(message_buffer + 3);\n    error_code = message_buffer[4];\n    message_size = (uint)message_type;\n  }\n  message_length = message_length & 0xff;\n  if ((int)(message_size << 0x12) < 0) {\n    current_byte = (undefined *)*message_buffer;\n    error_code = (int)current_byte - error_code;\n    if (error_code < (int)message_buffer[5]) {\nLAB_000842d6:\n      error_code = error_code + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    message_buffer[0x19] = message_buffer[0x19] & 0xffffdfff;\n    current_byte = (undefined *)*message_buffer;\n    *(ushort *)(message_buffer + 3) = message_type | 0x2000;\n    error_code = (int)current_byte - error_code;\n    if (error_code < (int)message_buffer[5]) goto LAB_000842d6;\n  }\n  error_code = send_message_000842a4_internal(socket_fd, message_buffer);\n  if (error_code != 0) {\n    return 0xffffffff;\n  }\n  current_byte = (undefined *)*message_buffer;\n  error_code = 1;\nLAB_000842d8:\n  message_buffer[2] = message_buffer[2] + -1;\n  *message_buffer = current_byte + 1;\n  *current_byte = (char)message_length;\n  if (((message_buffer[5] == error_code) ||\n      (((int)((uint)*(ushort *)(message_buffer + 3) << 0x1f) < 0 && (message_length == 10)))) &&\n     (error_code = send_message_000842a4_internal(socket_fd, message_buffer), error_code != 0)) {\n    return 0xffffffff;\n  }\n  return message_length;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "send_message_000842a4"
        },
        "FUN_00080d62": {
            "renaming": {
                "param_1": "value",
                "FUN_00080d62": "set_default_value_00080d62"
            },
            "code": "void set_default_value_00080d62(int value) {\n  *(undefined4 *)(value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "set_default_value_00080d62"
        },
        "FUN_000814f6": {
            "renaming": {
                "param_1[2]": "value_to_set",
                "uVar1": "computed_value",
                "param_1": "array",
                "param_1[1]": "value_to_set",
                "*param_1": "value_to_set",
                "param_2": "size",
                "FUN_000814f6": "set_values_to_zero_000814f6"
            },
            "code": "undefined4* set_values_to_zero_000814f6(undefined4 *array, int size)\n{\n  undefined4 value_to_set = 0;\n  array[0] = value_to_set;\n  array[1] = value_to_set;\n  array[2] = value_to_set;\n  if (size != 0) {\n    undefined4 computed_value = FUN_00082688(size);\n    FUN_000814d0(array, size, computed_value);\n  }\n  return array;\n}",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "set_values_to_zero_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": true,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "iVar2": "previous_value",
                "param_1": "new_value",
                "puVar1": "ptr_data",
                "FUN_00080e88": "sum_and_return_previous_00080e88"
            },
            "code": "int sum_and_return_previous_00080e88(int new_value)\n{\n  undefined *ptr_data = PTR_DAT_00080e9c;\n  if (*(int *)ptr_data == 0)\n  {\n    *(undefined4 *)ptr_data = DAT_00080ea0;\n  }\n  int previous_value = *(int *)ptr_data;\n  *(int *)ptr_data = new_value + previous_value;\n  return previous_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": true,
            "current_name": "sum_and_return_previous_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "iVar3": "data_index",
                "iVar4": "list_size",
                "puVar2": "list_pointer",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "puVar1": "data_pointer",
                "FUN_000836d8": "add_to_list_000836d8"
            },
            "code": "void add_to_list_000836d8(void)\n{\n  undefined *data_pointer;\n  undefined4 *list_pointer;\n  int list_size;\n  int data_index;\n  code *jump_table;\n  data_pointer = PTR_DAT_000836e8;\n  if (DAT_000836e4 == 0) {\n    return;\n  }\n  list_size = *(int *)PTR_DAT_000836d0;\n  list_pointer = *(undefined4 **)(list_size + 0x148);\n  if (list_pointer == (undefined4 *)0x0) {\n    list_pointer = (undefined4 *)(list_size + 0x14c);\n    *(undefined4 **)(list_size + 0x148) = list_pointer;\n  }\n  data_index = list_pointer[1];\n  if (0x1f < data_index) {\n    if ((DAT_000836d4 == 0) ||\n       (list_pointer = (undefined4 *)FUN_000817f0(400), list_pointer == (undefined4 *)0x0)) {\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *list_pointer = *(undefined4 *)(list_size + 0x148);\n    list_pointer[1] = 0;\n    data_index = 0;\n    *(undefined4 **)(list_size + 0x148) = list_pointer;\n    list_pointer[0x62] = 0;\n    list_pointer[99] = 0;\n  }\n  list_pointer[1] = data_index + 1;\n  list_pointer[data_index + 2] = data_pointer;\n  (*jump_table)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "add_to_list_000836d8"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008074c"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "undefined4": "int32_t",
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "code": "int32_t get_error_code_thunk_00080efe(void) \n{\n  return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": true,
            "current_name": "get_error_code_thunk_00080efe"
        },
        "FUN_000812b8": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": "buffer_size",
                "*(uint *)(iVar1 + 0x84)": "current_offset",
                "iVar1": "buffer_ptr",
                "*(int *)(iVar1 + 0x80)": "buffer_offset",
                "param_1": "buffer_address",
                "DAT_00081308": "BUFFER_MASK",
                "*(int *)(iVar1 + 0x84)": "buffer_capacity",
                "*(int *)(*(int *)(param_1 + 0x18) + 0x1c)": "next_buffer_ptr",
                "param_2": "value_to_write",
                "uVar2": "new_offset",
                "*(int *)(param_1 + 0x14)": "buffer_ptr",
                "FUN_000812b8": "write_to_buffer_000812b8"
            },
            "code": "int write_to_buffer_000812b8(int buffer_address, int value_to_write) {\n  int buffer_ptr = *(int *)(buffer_address + 0x14);\n  int buffer_size = *(int *)(*(int *)(buffer_address + 0x18) + 0x14);\n  int buffer_offset = *(int *)(buffer_ptr + 0x80);\n  int buffer_capacity = *(int *)(buffer_ptr + 0x84);\n  if ((buffer_size << 0x1e < 0) && (buffer_capacity == buffer_offset)) {\n    *(int *)(*(int *)(buffer_address + 0x18) + 0x1c) = value_to_write;\n  }\n  else {\n    uint new_offset = DAT_00081308 & buffer_capacity + 1U;\n    if ((int)new_offset < 0) {\n      new_offset = (new_offset - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_ptr + 0x84) == new_offset);\n    *(char *)(buffer_ptr + buffer_offset) = (char)value_to_write;\n    *(int *)(buffer_ptr + 0x80) = new_offset;\n    *(int *)(*(int *)(buffer_address + 0x18) + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": true,
            "current_name": "write_to_buffer_000812b8"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "encode_string_000839b4",
                "iVar2": "status",
                "uVar1": "encoding_status",
                "param_1": "param_1",
                "abStack_1b": "lookahead_chars",
                "local_1c": "current_char",
                "pbVar4": "lookahead_ptr",
                "param_2": "string_length",
                "param_3": "output_buffer",
                "uVar3": "encoded_char",
                "uVar5": "index"
            },
            "code": "uint encode_string_000839b4(undefined4 param_1,uint string_length,byte **output_buffer)\n{\n  uint index = 0;\n  int status = 0;\n  uint encoded_char = 0;\n  byte current_char;\n  byte lookahead_chars[3];\n  \n  if ((uint)*(ushort *)(output_buffer + 3) << 0x12 >= 0xffffffff) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    (*output_buffer)[0x19] = (byte *)((uint)(*output_buffer)[0x19] | 0x2000);\n  }\n  \n  uint encoding_status = get_encoding_status();\n  if ((encoding_status == 1) && (string_length - 1 < 0xff)) {\n    encoded_char = string_length & 0xff;\n    current_char = (byte)encoded_char;\n  }\n  else {\n    encoding_status = encode_string_000839b4_with_status(param_1,&current_char,string_length,output_buffer + 0x17);\n    if (encoding_status == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (encoding_status == 0) {\n      return string_length;\n    }\n    encoded_char = (uint)current_char;\n  }\n  \n  do {\n    byte *output_ptr = *output_buffer + index;\n    byte *lookahead_ptr = *output_buffer[2] + -1;\n    *output_buffer[2] = lookahead_ptr;\n    if ((int)lookahead_ptr < 0) {\n      if ((int)(*output_buffer)[6] <= (int)lookahead_ptr) {\n        **output_buffer = (byte)encoded_char;\n        lookahead_ptr = *output_buffer;\n        encoded_char = (uint)*lookahead_ptr;\n        if (encoded_char != 10) goto LAB_00083a04;\n      }\n      status = encode_string_000839b4_with_status(param_1,encoded_char,output_buffer);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)encoded_char;\n      lookahead_ptr = *output_buffer;\nLAB_00083a04:\n      *output_buffer = lookahead_ptr + 1;\n    }\n    if (encoding_status <= index + 1) {\n      return string_length;\n    }\n    encoded_char = (uint)lookahead_chars[index];\n    index = index + 1;\n  } while( true );\n}",
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": true,
            "current_name": "encode_string_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "current_offset",
                "FUN_00081570": "copy_data_00081570",
                "param_1": "data",
                "param_2": "num_bytes",
                "param_3": "offset"
            },
            "code": "int copy_data_00081570(int *data, int num_bytes, int offset)\n{\n  int current_offset = data[2];\n  if (num_bytes == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int result = FUN_000814ae(data, current_offset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*data + data[2], num_bytes);\n    data[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": true,
            "current_name": "copy_data_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "PTR_s____source_tc_c_00080b80": "source_data",
                "PTR_s_TC_Start_00080b84": "start_tc",
                "uVar1": "combined_index",
                "FUN_000803fc": "set_channel_status_000803fc",
                "param_1": "channel_index",
                "FUN_00080b2c": "set_channel_status_bit",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "sizeof(TC_CHANNEL)",
                "DAT_00080448": "channel_status_array",
                "FUN_00080aa8": "set_channel_status_bit",
                "FUN_00080b90": "set_channel_status_bit",
                "unaff_r4": "unaff_r4",
                "param_2": "num_channels",
                "param_3": "channel_status",
                "DAT_00080b8c": "channel_status_func",
                "param_4": "bit_index",
                "in_lr": "in_lr"
            },
            "code": "void set_channel_status_000803fc(int channel_index, uint32_t num_channels, uint32_t channel_status, uint32_t bit_index)\n{\n  uint64_t combined_index = ((uint64_t)num_channels << 32) | channel_index;\n  set_channel_status_000803fc_bit(channel_status);\n  set_channel_status_000803fc_bit(0xc002);\n  set_channel_status_000803fc_bit(0xa41);\n  *(int *)(DAT_00080448 + (bit_index >> 5) * 4) = 1 << (bit_index & 0x1f);\n  *(uint32_t *)(combined_index * 0x40 + 0x24) = 4;\n  if (num_channels > 2) {\n    combined_index = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80, 0x5c, PTR_s_TC_Start_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88, unaff_r4, in_lr);\n  }\n  *(uint32_t *)((int)combined_index + (int)((uint64_t)combined_index >> 0x20) * 0x40) = 5;\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": true,
            "current_name": "set_channel_status_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_access_permissions_00080eb0",
                "param_1": "process_handle",
                "param_2": "memory_address"
            },
            "code": "undefined4 set_memory_access_permissions_00080eb0(undefined4 process_handle, int memory_address)\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": true,
            "current_name": "set_memory_access_permissions_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "uVar1": "current_value",
                "param_1": "param1",
                "FUN_00081214": "process_data_00081214",
                "param_2": "param2",
                "param_3": "target_value",
                "FUN_0008159e": "process_value",
                "FUN_000814f6": "initialize",
                "FUN_000811e8": "get_next_value"
            },
            "code": "void process_data_00081214(uint32_t param1, uint32_t param2, uint32_t target_value) {\n  uint32_t current_value;\n  initialize(param1, PTR_DATA);\n  while ((current_value = get_next_value(param2), current_value != -1 && current_value != target_value)) {\n    process_value(param1, current_value & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "process_data_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "param_1": "memory_location",
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "*param_1": "*memory_location",
                "*param_2": "*byte",
                "param_2": "byte",
                "param_3": "byte_value"
            },
            "code": "int write_byte_to_memory_0008439c(int *memory_location, char *byte, uint byte_value) {\n  if (byte == NULL) {\n    return 0;\n  }\n  if (byte_value < 256) {\n    *byte = (char)byte_value;\n    return 1;\n  }\n  *memory_location = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": true,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "iVar2": "return_value",
                "param_1": "value",
                "piVar3": "end_of_list",
                "puVar5": "current_entry",
                "piVar1": "current_pointer",
                "FUN_00082824": "find_value_in_list_and_call_function_00082824",
                "param_2": "count",
                "param_3": "list_of_pointers",
                "uVar4": "list_entry_size",
                "uVar7": "entries_processed",
                "uVar6": "entries_left"
            },
            "code": "int find_value_in_list_and_call_function_00082824(undefined4 value, int count, int **list_of_pointers) {\n  int *current_pointer;\n  int return_value;\n  int *end_of_list;\n  uint list_entry_size;\n  undefined4 *current_entry;\n  uint entries_left;\n  uint entries_processed;\n  \n  if (-1 < *(int *)(count + 100) << 0x12) {\n    return_value = FUNC_00083ca8();\n    list_of_pointers[2] = (int *)0x0;\n    list_of_pointers[1] = (int *)0x0;\n    return return_value;\n  }\n  end_of_list = list_of_pointers[2];\n  current_pointer = *list_of_pointers;\n  while (end_of_list != (int *)0x0) {\n    list_entry_size = current_pointer[1];\n    entries_left = list_entry_size >> 2;\n    if (entries_left != 0) {\n      current_entry = (undefined4 *)(*current_pointer + -4);\n      entries_processed = 0;\n      do {\n        current_entry++;\n        return_value = FUN_000839b4(value,*current_entry,count);\n        entries_processed++;\n        if (return_value == -1) goto LAB_00082864;\n      } while (entries_left != entries_processed);\n      end_of_list = list_of_pointers[2];\n    }\n    end_of_list = (int *)((int)end_of_list - (list_entry_size & 0xfffffffc));\n    list_of_pointers[2] = end_of_list;\n    current_pointer = current_pointer + 2;\n  }\n  return_value = 0;\nLAB_00082864:\n  list_of_pointers[2] = (int *)0x0;\n  list_of_pointers[1] = (int *)0x0;\n  return return_value;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "find_value_in_list_and_call_function_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "iVar1": "result",
                "param_1": "data",
                "FUN_0008427c": "process_data_0008427c",
                "param_2": "data_info",
                "uVar2": "flag"
            },
            "code": "void process_data_0008427c(undefined4 data, int data_info)\n{\n  int result = get_data(data, *(short *)(data_info + 0xe));\n  ushort flag;\n  if (result == -1) {\n    flag = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info + 0x50) = result;\n  }\n  *(ushort *)(data_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": true,
            "current_name": "process_data_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "uVar1": "masked_value",
                "param_1": "base_address",
                "FUN_000809be": "set_param_000809be",
                "param_2": "control_register",
                "param_3": "value",
                "uVar2": "or_value"
            },
            "code": "void set_param_000809be(uint32_t base_address, uint32_t control_register, uint32_t value) {\n  *(uint32_t *)(base_address + 0x44) = value;\n  switch(control_register) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      uint32_t masked_value = *(uint32_t *)(base_address + 0x70) & *(uint32_t *)(base_address + 0x70) & ~value;\n      *(uint32_t *)(base_address + 0x70) = masked_value;\n      break;\n    case 2:\n      uint32_t or_value = *(uint32_t *)(base_address + 0x70) | value;\n      *(uint32_t *)(base_address + 0x70) = or_value;\n      break;\n    default:\n      goto switchD_000809c4_caseD_6;\n  }\n  *(uint32_t *)(base_address + 4) = value;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": true,
            "current_name": "set_param_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "uVar1": "masked_value",
                "param_1": "ptr_address",
                "FUN_00080a94": "checkIfBitIsSet_00080a94",
                "param_2": "bit_mask"
            },
            "code": "uint checkIfBitIsSet_00080a94(int ptr_address, uint bit_mask) {\n  uint masked_value = *(uint *)(ptr_address + 8) & bit_mask;\n  if (masked_value != 0) {\n    if ((bit_mask & *(uint *)(ptr_address + 0x18)) == 0) {\n      masked_value = 0;\n    }\n    else {\n      masked_value = 1;\n    }\n  }\n  return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": true,
            "current_name": "checkIfBitIsSet_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "DAT_00081620": "data_address",
                "FUN_00081618": "setMemoryAddress_00081618"
            },
            "code": "void setMemoryAddress_00081618(void)\n{\n    int* memory_address = (int*)(DAT_00081620 + 4);\n    *memory_address = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "setMemoryAddress_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "param_5[1]": "difference_2",
                "uVar1": "difference_1",
                "param_1": "input_1",
                "lVar2": "product",
                "param_2": "input_2",
                "param_3": "multiplier_1",
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_4": "multiplier_2",
                "param_5": "output_array"
            },
            "code": "void calculate_difference_0008455c(uint input_1, int input_2, uint32_t multiplier_1, uint32_t multiplier_2, int *output_array)\n{\n  uint32_t product = FUNC_000845c0() * ((uint64_t)multiplier_2 << 32 | multiplier_1);\n  uint32_t difference_1 = input_1 - product;\n  uint32_t difference_2 = input_2 - (int)(product >> 32) - (input_1 < product);\n  output_array[0] = difference_1;\n  output_array[1] = difference_2;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": true,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "pcVar3": "current_char_ptr",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_length",
                "FUN_000840f8": "find_char_in_array_000840f8",
                "puVar1": "result_ptr",
                "uVar2": "xor_result",
                "pcVar4": "last_char_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_array_000840f8(uint *array, char target_char, uint *array_length) {\n  uint *result_ptr;\n  uint xor_result;\n  char *current_char_ptr;\n  char *last_char_ptr;\n  bool found_target_char;\n  \n  if (((uint)array & 3) == 0) {\n    result_ptr = array;\n    if ((uint *)0x3 < array_length) {\n      do {\n        xor_result = *array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        result_ptr = array;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length + -1;\n        result_ptr = array + 1;\n        array = array + 1;\n      } while ((uint *)0x3 < array_length);\n    }\n    array = array_length;\n    last_char_ptr = (char *)((int)array + -1);\n    if ((array != (uint *)0x0) && (array = result_ptr, *(char *)result_ptr != target_char)) {\n      current_char_ptr = (char *)0x0;\n      do {\n        array = (uint *)((int)array + 1);\n        found_target_char = current_char_ptr == last_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (found_target_char) goto LAB_00084150;\n      } while (*(char *)array != target_char);\n    }\n  }\n  else if (array_length == (uint *)0x0) {\nLAB_00084150:\n    result_ptr = (uint *)0x0;\n  }\n  else if (*(char *)array != target_char) {\n    result_ptr = (uint *)((int)array + 1);\n    array_length = (uint *)((int)array_length + -1);\n    do {\n      array = result_ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_length == (uint *)0x0) goto LAB_00084150;\n      result_ptr = (uint *)((int)array + 1);\n      array_length = (uint *)((int)array_length + -1);\n    } while (*(char *)array != target_char);\n  }\n  return result_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "find_char_in_array_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = FUN_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00082688",
                "FUN_00084530",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00083888",
                "FUN_00082824"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000834f0",
                "FUN_000817c8",
                "FUN_00081750"
            ],
            "imported": true,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "puVar2": "dst32_next",
                "param_1": "dst",
                "param_2": "val",
                "param_3": "size",
                "puVar1": "dst32",
                "uVar3": "val32",
                "uVar4": "i",
                "FUN_00081f00": "memset32_00081f00",
                "bVar5": "is_size_zero"
            },
            "code": "void memset32_00081f00(uint32_t *dst, uint8_t val, size_t size) {\n  uint32_t *dst32;\n  uint32_t val32;\n  size_t i;\n  if (((uint32_t)dst & 3) != 0) {\n    if (size == 0) {\n      return;\n    }\n    dst32 = dst;\n    size--;\n    while (true) {\n      *dst32 = val;\n      dst32++;\n      if (((uint32_t)dst32 & 3) == 0) {\n        break;\n      }\n      size--;\n      if (size == 0) {\n        return;\n      }\n    }\n  }\n  if (size >= 16) {\n    val32 = (val << 24) | (val << 16) | (val << 8) | val;\n    i = size >> 4;\n    while (i != 0) {\n      *dst = val32;\n      dst[1] = val32;\n      dst[2] = val32;\n      dst[3] = val32;\n      dst += 4;\n      i--;\n    }\n    size &= 0xF;\n    dst32 = dst + (size >> 2);\n    size &= 3;\n    if (size < 4) {\n      goto done;\n    }\n  }\n  else {\n    dst32 = dst;\n  }\n  val32 = val;\n  while (size != 0) {\n    *dst32 = val32;\n    dst32++;\n    size--;\n  }\n  done:\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "imported": true,
            "current_name": "memset32_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_error_code_00080eaa"
            },
            "code": "uint32_t return_error_code_00080eaa(void)\n{\n  return ERROR_CODE;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": true,
            "current_name": "return_error_code_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "puVar2": "src_ptr",
                "puVar3": "unused_ptr",
                "*(undefined2*)puVar1": "*(uchar2*)src",
                "param_1": "dest",
                "param_2": "src",
                "*(undefined2*)puVar3": "*(uchar2*)dest",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "*(undefined*)puVar1": "*(uchar*)src",
                "uVar5": "remaining_size",
                "uVar4": "i",
                "*(undefined*)puVar3": "*(uchar*)dest",
                "bVar6": "is_aligned",
                "FUN_00081d48": "copy_memory_00081d48"
            },
            "code": "undefined4 * copy_memory_00081d48(undefined4 *dest, undefined4 *src, uint size) {\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_dest_aligned = ((uint)dest & 3) == 0;\n  bool is_src_aligned = ((uint)src & 3) == 0;\n  \n  if (!is_dest_aligned && !is_src_aligned && size >= 8) {\n    uint unaligned_bytes = 4 - ((uint)dest & 3);\n    size -= unaligned_bytes;\n    for (i = 0; i < unaligned_bytes; i++) {\n      *(uchar*)dest = *(uchar*)src;\n      dest = (undefined4*)((uchar*)dest + 1);\n      src = (undefined4*)((uchar*)src + 1);\n    }\n  }\n  \n  dest_ptr = dest;\n  src_ptr = src;\n  remaining_size = size / 16 * 16;\n  \n  for (i = 0; i < remaining_size; i += 16) {\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n  }\n  \n  remaining_size = size % 16;\n  \n  for (i = 0; i < remaining_size; i++) {\n    *(uchar*)dest_ptr++ = *(uchar*)src_ptr++;\n  }\n  \n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "decode_00084494",
                "iVar2": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr"
            },
            "code": "void decode_00084494(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *ptr = PTR_DAT_000844b8;\n  *(undefined4 *)ptr = 0;\n  int result = decode_00084494_helper(input1, input2, input3, 0, input4);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": true,
            "current_name": "decode_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "iVar1": "result",
                "FUN_00084530": "check_params_00084530",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "FUN_0008458c": "calculate_result",
                "param_4": "fourth_param"
            },
            "code": "int check_params_00084530(int first_param, int second_param, int third_param, int fourth_param) {\n  int result;\n  if (fourth_param == 0 && third_param == 0) {\n    if (second_param != 0 || first_param != 0) {\n      first_param = -1;\n    }\n    result = first_param;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "check_params_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "iVar1": "result",
                "FUN_00080970": "check_and_do_nothing_00080970",
                "FUN_00081248": "check_value"
            },
            "code": "void check_and_do_nothing_00080970(void)\n{\n  int result;\n  result = check_value(PTR_DAT_000809a4);\n  if (result != 0) {\n    do_nothing_0008073a();\n  }\n  result = check_value(PTR_DAT_000809a8);\n  if (result != 0) {\n    do_nothing_00080748();\n  }\n  result = check_value(PTR_DAT_000809ac);\n  if (result != 0) {\n    do_nothing_0008074a();\n  }\n  result = check_value(PTR_DAT_000809b0);\n  if (result != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c",
                "FUN_0008074a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "check_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "iVar2": "returnValue",
                "local_50": "localVal",
                "iVar3": "returnCode",
                "uVar1": "param3",
                "FUN_00084018": "checkParameter_00084018",
                "param_1": "param",
                "auStack_54": "stackArr",
                "param_2": "paramArr",
                "uVar4": "paramVal",
                "bVar5": "flag"
            },
            "code": "void checkParameter_00084018(int param, int *paramArr) {\n    ushort param3 = *(ushort *)(paramArr + 3);\n    uint paramVal = (uint)param3;\n    if ((int)(paramVal << 0x1e) < 0) {\n        *paramArr = (int)paramArr + 0x43;\n        paramArr[4] = (int)paramArr + 0x43;\n        paramArr[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)paramArr + 0xe)) {\n        int iVar2 = checkFunction(param, (int)*(short *)((int)paramArr + 0xe), auStack_54);\n        if (-1 < iVar2) {\n            bool bVar5 = (local_50 & 0xf000) == 0x2000;\n            if (((local_50 & 0xf000) == 0x8000) && ((undefined *)paramArr[10] == PTR_FUN_0008427c_1_000840f4)) {\n                iVar2 = 0x400;\n                *(ushort *)(paramArr + 3) = *(ushort *)(paramArr + 3) | 0x400;\n                paramArr[0x13] = 0x400;\n            }\n            else {\n                iVar2 = 0x400;\n                *(ushort *)(paramArr + 3) = *(ushort *)(paramArr + 3) | 0x800;\n            }\n            goto LAB_00084074;\n        }\n        param3 = *(ushort *)(paramArr + 3);\n        paramVal = (uint)param3;\n    }\n    *(ushort *)(paramArr + 3) = param3 | 0x800;\n    if ((paramVal & 0x80) == 0) {\n        iVar2 = 0x400;\n    }\n    else {\n        iVar2 = 0x40;\n    }\n    bool bVar5 = false;\nLAB_00084074:\n    int iVar3 = checkFunction(param, iVar2);\n    param3 = *(ushort *)(paramArr + 3);\n    if (iVar3 == 0) {\n        if (-1 < (int)((uint)param3 << 0x16)) {\n            *(ushort *)(paramArr + 3) = param3 | 2;\n            *paramArr = (int)paramArr + 0x43;\n            paramArr[4] = (int)paramArr + 0x43;\n            paramArr[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(param + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n        *(ushort *)(paramArr + 3) = param3 | 0x80;\n        *paramArr = iVar3;\n        paramArr[4] = iVar3;\n        paramArr[5] = iVar2;\n        if ((bVar5) && (iVar2 = checkFunction(param, (int)*(short *)((int)paramArr + 0xe)), iVar2 != 0)) {\n            *(ushort *)(paramArr + 3) = *(ushort *)(paramArr + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_00081810",
                "FUN_000844bc",
                "FUN_00084494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": true,
            "current_name": "checkParameter_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "bVar2": "has_sign",
                "bVar1": "digit_value",
                "uVar10": "max_int",
                "iVar8": "digit_count",
                "param_1": "input_string",
                "FUN_000815de": "parse_integer_000815de",
                "pbVar4": "current_char",
                "uVar3": "result",
                "uVar5": "current_byte",
                "uVar9": "max_div_10"
            },
            "code": "uint parse_integer_000815de(byte **input_string) {\n  if (*input_string == NULL) {\n    return 0;\n  }\n  byte *current_char = *input_string;\n  while (*(byte *)(*DAT_000827f8 + (uint)*current_char + 1) & 8) {\n    current_char++;\n  }\n  uint sign = 1;\n  if (*current_char == 0x2d) {\n    sign = -1;\n    current_char++;\n  } else if (*current_char == 0x2b) {\n    current_char++;\n  }\n  uint max_int = (sign == 1) ? 0x7fffffff : 0x80000000;\n  uint max_div_10 = max_int / 10;\n  int digit_count = 0;\n  uint result = 0;\n  while (true) {\n    byte current_byte = *current_char;\n    uint digit_value = *(byte *)(*DAT_000827f8 + (uint)current_byte + 1);\n    if ((digit_value & 4) == 0) {\n      if ((digit_value & 3) == 0) {\n        if (digit_count == 0) {\n          return 0;\n        }\n        return sign * result;\n      }\n      int base_offset = (digit_value & 3) == 1 ? 0x37 : 0x57;\n      digit_value = (uint)current_byte - base_offset;\n    } else {\n      digit_value = (uint)current_byte - 0x30;\n    }\n    if (digit_value > 9) {\n      if (digit_count == 0) {\n        return 0;\n      }\n      return sign * result;\n    }\n    if (result > max_div_10 || (result == max_div_10 && digit_value > (int)(max_int % 10))) {\n      return sign * max_int;\n    }\n    result = result * 10 + digit_value;\n    digit_count++;\n    current_char++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "parse_integer_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "local_47c": "flag",
                "iVar1": "result",
                "local_46c": "var3",
                "iVar2": "func_result",
                "local_47a": "flag2",
                "param_1": "data",
                "auStack_420": "buffer",
                "local_424": "var5",
                "local_488": "stack_buffer",
                "local_478": "buffer_ptr",
                "local_464": "var4",
                "FUN_000834f0": "process_data_000834f0",
                "local_474": "var1",
                "param_2": "data_len",
                "local_480": "buffer_size",
                "local_470": "var2"
            },
            "code": "int process_data_000834f0(undefined4 data, int data_len)\n{\n  int result = 0;\n  int func_result = 0;\n  undefined *stack_buffer [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 flag2;\n  undefined *buffer_ptr;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined buffer[1024];\n\n  var5 = *(undefined4 *)(data_len + 100);\n  var3 = *(undefined4 *)(data_len + 0x1c);\n  flag2 = *(undefined2 *)(data_len + 0xe);\n  var4 = *(undefined4 *)(data_len + 0x24);\n  stack_buffer[0] = buffer;\n  flag = *(ushort *)(data_len + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  var1 = 0x400;\n  var2 = 0;\n  buffer_ptr = stack_buffer[0];\n  func_result = function1(data, stack_buffer);\n  if ((-1 < func_result) && (result = function2(data, stack_buffer), result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_len + 0xc) = *(ushort *)(data_len + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": true,
            "current_name": "process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "iVar4": "func_ptr",
                "param_1": "data",
                "piVar3": "data_ptr",
                "unaff_r5": "unused_register_5",
                "ppiVar6": "data_list_ptr",
                "unaff_r4": "unused_register_4",
                "FUN_000841e4": "process_data_000841e4",
                "puVar1": "temporary_data_ptr",
                "uVar2": "func_result",
                "pcVar5": "func_ptr_data",
                "in_lr": "unused_register_lr"
            },
            "code": "int process_data_000841e4(uint data) {\n  int *data_ptr = *data_list_ptr;\n  if (data > 31) {\n    *data_ptr = 22;\n    return -1;\n  }\n  int func_ptr = data_ptr[183];\n  if ((func_ptr == 0) || (*(code **)(func_ptr + data * 4) == (code *)0)) {\n    int **list_ptr = data_list_ptr;\n    undefined4 func_result = thunk_FUN_00080efe(data_ptr);\n    undefined *temp_ptr = temporary_data_ptr;\n    *(undefined4 *)temporary_data_ptr = 0;\n    int result = do_nothing_00080efc(func_result, data, data, 0, list_ptr, temp_ptr, temp_ptr + 4, temp_ptr + 8);\n    if ((result == -1) && (*(int *)temp_ptr != 0)) {\n      *data_ptr = *(int *)temp_ptr;\n      return -1;\n    }\n    return result;\n  }\n  if (*(code **)(func_ptr + data * 4) == (code *)1) {\n    return 0;\n  }\n  if (*(code **)(func_ptr + data * 4) != (code *)-1) {\n    *(undefined4 *)(func_ptr + data * 4) = 0;\n    (*(code **)(func_ptr + data * 4))(data);\n    return 0;\n  }\n  *data_ptr = 22;\n  return 1;\n}",
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "FUN_0008113a": "convert_number_to_string_0008113a",
                "param_4": "format_character"
            },
            "code": "int convert_number_to_string_0008113a(undefined4 *function_pointer, uint number, uint base, undefined4 format_character)\n{\n  int result;\n  int negative = 0;\n  if (base == 0)\n  {\n    result = (**(code **)*function_pointer)(function_pointer, number & 0xff);\n    return result;\n  }\n  if (base == 10)\n  {\n    if ((int)number < 0)\n    {\n      negative = 1;\n      result = convert_number_to_string_0008113a(function_pointer, 0x2d, 0, 0);\n      number = -number;\n    }\n  }\n  else\n  {\n    base = base & 0xff;\n  }\n  result = convert_number_to_string_0008113a(function_pointer, number, base, format_character);\n  if (negative)\n  {\n    result += convert_number_to_string_0008113a(function_pointer, '-', 0, 0);\n  }\n  return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "imported": true,
            "current_name": "convert_number_to_string_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "*DAT_00084014": "data_pointer",
                "FUN_0008400c": "get_data_from_pointer_0008400c"
            },
            "code": "get_data_from_pointer_0008400c() {\n  return **DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "iVar1": "validation_result",
                "FUN_00081480": "process_data",
                "FUN_000825cc": "send_data_to_server",
                "param_1": "data_ptr",
                "FUN_000814ae": "validate_data",
                "param_2": "new_data",
                "param_3": "size",
                "FUN_000814d0": "validate_and_process_data_000814d0"
            },
            "code": "undefined4 * validate_and_process_data_000814d0(undefined4 *data_ptr, undefined4 new_data, undefined4 size)\n{\n  int validation_result = validate_data(data_ptr, size);\n  if (validation_result == 0) {\n    process_data(data_ptr);\n  }\n  else {\n    data_ptr[2] = new_data;\n    send_data_to_server(*data_ptr, size);\n  }\n  return data_ptr;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": true,
            "current_name": "validate_and_process_data_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "DAT_00080c90": "ptr",
                "iVar3": "i",
                "PTR_Elf32_Rel_ARRAY_00080c7c": "rel_array_ptr",
                "(*DAT_00080c94)()": "function_pointer",
                "PTR_DAT_00080c84": "end_dat_ptr",
                "puVar2": "data_ptr",
                "PTR_DAT_00080c8c": "ptr",
                "puVar4": "dat_ptr",
                "puVar1": "rel_array_ptr",
                "FUN_00080c20": "copy_and_clear_memory_00080c20",
                "PTR_DAT_00080c80": "dat_ptr",
                "DAT_00080c78": "data_ptr"
            },
            "code": "void copy_and_clear_memory_00080c20(void)\n{\n  undefined *PTR_Elf32_Rel_ARRAY_00080c7c = PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined *DAT_00080c78 = DAT_00080c78;\n  int i = 0;\n  undefined4 *PTR_DAT_00080c80 = (undefined4 *)PTR_DAT_00080c80;\n  if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n    for (; PTR_Elf32_Rel_ARRAY_00080c7c + i < PTR_DAT_00080c84; i += 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080c7c + i) = *(undefined4 *)(DAT_00080c78 + i);\n    }\n  }\n  for (; PTR_DAT_00080c80 < DAT_00080c88; PTR_DAT_00080c80++) {\n    *PTR_DAT_00080c80 = 0;\n  }\n  undefined *DAT_00080c90 = PTR_DAT_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n  if (DAT_00080c90 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) = *(uint *)(DAT_00080c90 + 8) | 0x20000000;\n  }\n  (*DAT_00080c94)();\n  do {\n    // Infinite loop\n  } while(true);\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": true,
            "current_name": "copy_and_clear_memory_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": true,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "bVar1": "max_data_index",
                "puVar2": "data_flags_ptr",
                "iVar6": "data_offset",
                "puVar3": "data_indices_ptr",
                "puVar4": "data_values_ptr",
                "param_1": "data_index",
                "param_2": "data_buffer",
                "param_3": "buffer_offset",
                "uVar5": "calculated_value",
                "FUN_0008044c": "process_data_0008044c"
            },
            "code": "void process_data_0008044c(int data_index, int data_buffer, int buffer_offset) {\n    byte max_data_index = *max_data_index_ptr;\n    byte *data_flags = data_flags_ptr;\n    byte *data_indices = data_indices_ptr;\n    byte *data_values = data_values_ptr;\n    uint calculated_value;\n    int data_offset;\n    \n    buffer_offset = buffer_offset * 0x40;\n    \n    if ((data_flags[data_index] & 0x80) == 0) {\n        data_offset = data_index * 0xc;\n        if (((char)data_flags[data_index] + data_offset < (int)(uint)max_data_index) &&\n            ((int)((uint)(byte)data_values[((char)data_flags[data_index] + data_offset) * 8] << 0x19) < 0)) {\n            calculate_value(data_values[(data_offset + (char)data_flags[data_index]) * 8] & 0x3f, 0);\n        }\n    }\n    else {\n        *(uint *)(data_buffer + buffer_offset) = *(uint *)(data_buffer + buffer_offset) | 4;\n    }\n    \n    byte data_index_value = data_indices[data_index];\n    data_flags[data_index] = data_flags[data_index] + '\\x01';\n    byte *data_values_ptr = data_values_ptr;\n    data_offset = data_index * 0xc;\n    \n    if (((char)data_flags[data_index] + data_offset < (int)(uint)max_data_index) &&\n        ((char)data_indices[data_index] < '\f')) {\n        *(int *)(data_buffer + buffer_offset + 0x14) =\n            *(int *)(data_buffer + buffer_offset + 0x10) +\n            *(int *)(data_values_ptr + ((char)data_indices[data_index] + data_offset) * 8 + 4);\n        calculated_value = (uint)(byte)data_values[((char)data_flags[data_index] + data_offset) * 8] << 0x19;\n        if (-1 < (int)(calculated_value)) {\n            return;\n        }\n        calculate_value(data_values[(data_offset + (char)data_flags[data_index]) * 8] & 0x3f, 1);\n        return;\n    }\n    \n    data_buffer = data_buffer + buffer_offset;\n    uint calculated_value = (*data_count_ptr / *data_size_ptr) * 20000 >> 5;\n    if (calculated_value <= *(int *)(data_buffer + 0x10) + 4U) {\n        calculated_value = *(int *)(data_buffer + 0x10) + 4;\n    }\n    *(uint *)(data_buffer + 0x14) = calculated_value;\n    data_flags[data_index] = 0xff;\n    return;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": true,
            "current_name": "process_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "size",
                "param_4": "count",
                "PTR_DAT_000810e4": "ptr",
                "FUN_000810d8": "process_data_and_return_000810d8",
                "FUN_000810a6": "process_data"
            },
            "code": "void process_data_and_return_000810d8(undefined4 data, undefined4 PTR_DAT_000810e4, undefined4 size, undefined4 count) {\n  process_data(data, PTR_DAT_000810e4, size, count, count);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": true,
            "current_name": "process_data_and_return_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "undefined4": "int32_t",
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "code": "int32_t get_error_code_00080efe(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": true,
            "current_name": "get_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_byte_ptr",
                "param_1": "dest",
                "puVar6": "src_byte_ptr",
                "param_2": "src",
                "param_3": "size",
                "uVar5": "remainder",
                "FUN_00081e34": "reverse_copy_00081e34",
                "uVar7": "i"
            },
            "code": "void reverse_copy_00081e34(undefined4 *dest, undefined4 *src, uint32_t size)\n{\n    uint32_t i;\n    uint32_t remainder;\n    uint32_t *dest_ptr;\n    uint32_t *src_ptr;\n    uint8_t *dest_byte_ptr;\n    uint8_t *src_byte_ptr;\n\n    if (src < dest && dest < src + size) {\n        dest_byte_ptr = (uint8_t*)dest + size;\n        src_byte_ptr = (uint8_t*)src + size;\n        remainder = size % sizeof(uint32_t);\n        for (i = 0; i < remainder; i++) {\n            dest_byte_ptr--;\n            src_byte_ptr--;\n            *dest_byte_ptr = *src_byte_ptr;\n        }\n        dest_ptr = (uint32_t*)dest_byte_ptr;\n        src_ptr = (uint32_t*)src_byte_ptr;\n        for (i = 0; i < size / sizeof(uint32_t); i++) {\n            dest_ptr[i] = src_ptr[i];\n        }\n    } else {\n        dest_ptr = dest;\n        src_ptr = src;\n        for (i = 0; i < size / sizeof(uint32_t); i++) {\n            dest_ptr[i] = src_ptr[i];\n        }\n        remainder = size % sizeof(uint32_t);\n        if (remainder != 0) {\n            dest_byte_ptr = (uint8_t*)(dest_ptr + i);\n            src_byte_ptr = (uint8_t*)(src_ptr + i);\n            for (i = 0; i < remainder; i++) {\n                dest_byte_ptr[i] = src_byte_ptr[i];\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "imported": true,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "bVar1": "currentValue",
                "DAT_000805dc": "puVar",
                "FUN_000805a8": "updateValue_000805a8",
                "puVar2": "puVar",
                "param_1": "value",
                "PTR_DAT_000805d8": "PTR_DAT_currentValue",
                "0x3c": "maxValue",
                "*param_1": "*value",
                "*PTR_DAT_000805d8": "*PTR_DAT_currentValue",
                "DAT_000805e0": "DAT_divisor",
                "0x5dc": "newValue",
                "*(uint *)(PTR_DAT_000805e4 + (uint)bVar1 * 8 + 4)": "*(uint *)(PTR_DAT_000805e4 + (uint)currentValue * 8 + 4)",
                "0xff": "errorValue"
            },
            "code": "void updateValue_000805a8(byte *value)\n{\n  byte currentValue = *PTR_DAT_000805d8;\n  if (currentValue < 0x3c) {\n    *PTR_DAT_000805d8 = currentValue + 1;\n    uint *DAT_000805dc = DAT_000805dc;\n    *value = currentValue;\n    uint newValue = (*DAT_000805dc / DAT_000805e0) * 0x5dc >> 5;\n    *(uint *)(PTR_DAT_000805e4 + (uint)bVar1 * 8 + 4) = newValue;\n    return;\n  }\n  *value = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": true,
            "current_name": "updateValue_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "invoke_function_pointer_000810cc",
                "param_1": "function_pointer"
            },
            "code": "void invoke_function_pointer_000810cc(void* function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": true,
            "current_name": "invoke_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "bVar1": "nextByte",
                "iVar2": "bufferStartAddress",
                "FUN_00081276": "getNextByteFromBuffer_00081276",
                "param_1": "bufferAddress",
                "PTR_": "buffer",
                "DAT_": "data"
            },
            "code": "uint getNextByteFromBuffer_00081276(int PTR_Address)\n{\n  int PTR_StartAddress = *(int *)(PTR_Address + 0x10);\n  int PTR_ReadIndex = *(int *)(PTR_StartAddress + 0x80);\n  int PTR_WriteIndex = *(int *)(PTR_StartAddress + 0x84);\n  if (PTR_ReadIndex != PTR_WriteIndex) {\n    byte nextByte = *(byte *)(PTR_StartAddress + PTR_WriteIndex);\n    *(int *)(PTR_StartAddress + 0x84) = (PTR_WriteIndex + 1U) & 0x7f;\n    return (uint)nextByte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "getNextByteFromBuffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "iVar2": "result",
                "FUN_000844bc": "getIntegerValue_000844bc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "dataPointer"
            },
            "code": "void getIntegerValue_000844bc(int *outputValue, undefined4 inputValue)\n{\n  undefined *dataPointer = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  int result = findIntegerValue(inputValue);\n  if ((result == -1) && (*(int *)dataPointer != 0)) {\n    *outputValue = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": true,
            "current_name": "getIntegerValue_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "iVar2": "info_var_1",
                "iVar5": "info_var_4",
                "FUN_00083850": "process_data_00083850",
                "iVar7": "info_var_5",
                "param_1": "data_ptr",
                "piVar1": "data_ptr_2",
                "unaff_r4": "result",
                "param_2": "info_ptr",
                "uVar3": "info_var_2",
                "pcVar6": "func_ptr",
                "uVar4": "info_var_3"
            },
            "code": "undefined4 process_data_00083850(int *data_ptr, int *info_ptr)\n{\n  int *data_ptr_2;\n  int info_var_1;\n  ushort info_var_2;\n  uint info_var_3;\n  int info_var_4;\n  code *func_ptr;\n  undefined4 result;\n  int info_var_5;\n  \n  if ((data_ptr != (int *)0x0) && (data_ptr[0xe] == 0)) {\n    initialize_data();\n  }\n  if (*(short *)(info_ptr + 3) == 0) {\n    return 0;\n  }\n  info_var_2 = *(ushort *)(info_ptr + 3);\n  if ((int)((uint)info_var_2 << 0x1c) < 0) {\n    info_var_5 = info_ptr[4];\n    if (info_var_5 == 0) {\n      return 0;\n    }\n    info_var_1 = *info_ptr;\n    if ((info_var_2 & 3) == 0) {\n      info_var_4 = info_ptr[5];\n    }\n    else {\n      info_var_4 = 0;\n    }\n    *info_ptr = info_var_5;\n    info_var_1 = info_var_1 - info_var_5;\n    info_ptr[2] = info_var_4;\n    do {\n      if (info_var_1 < 1) {\n        return 0;\n      }\n      info_var_4 = (*(code *)info_ptr[9])(data_ptr,info_ptr[7],info_var_5,info_var_1,result);\n      info_var_1 = info_var_1 - info_var_4;\n      info_var_5 = info_var_5 + info_var_4;\n    } while (0 < info_var_4);\n    *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_ptr + 3) = info_var_2 | 0x800;\n  if ((info_ptr[1] < 1) && (info_ptr[0xf] < 1)) {\n    return 0;\n  }\n  func_ptr = (code *)info_ptr[10];\n  if (func_ptr == (code *)0x0) {\n    return 0;\n  }\n  info_var_3 = (uint)(info_var_2 | 0x800);\n  info_var_1 = *data_ptr;\n  *data_ptr = 0;\n  if ((info_var_2 & 0x1000) == 0) {\n    info_var_4 = (*func_ptr)(data_ptr,info_ptr[7],info_var_3 & 0x1000,1);\n    if ((info_var_4 == -1) && (info_var_5 = *data_ptr, info_var_5 != 0)) {\n      if ((info_var_5 == 0x1d) || (info_var_5 == 0x16)) {\n        *data_ptr = info_var_1;\n        return 0;\n      }\n      *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    info_var_3 = (uint)*(ushort *)(info_ptr + 3);\n    func_ptr = (code *)info_ptr[10];\n  }\n  else {\n    info_var_4 = info_ptr[0x14];\n  }\n  if (((int)(info_var_3 << 0x1d) < 0) && (info_var_4 = info_var_4 - info_ptr[1], info_ptr[0xc] != 0)) {\n    info_var_4 = info_var_4 - info_ptr[0xf];\n  }\n  info_var_4 = (*func_ptr)(data_ptr,info_ptr[7],info_var_4,0);\n  if (info_var_4 == -1) {\n    info_var_5 = *data_ptr;\n    if (info_var_5 != 0) {\n      if ((info_var_5 != 0x1d) && (info_var_5 != 0x16)) {\n        *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) & 0xf7ff;\n      *info_ptr = info_ptr[4];\n      info_ptr[1] = 0;\n      goto LAB_00083774;\n    }\n    info_var_2 = *(ushort *)(info_ptr + 3) & 0xf7ff;\n    info_ptr[1] = 0;\n    *(ushort *)(info_ptr + 3) = info_var_2;\n    *info_ptr = info_ptr[4];\n  }\n  else {\n    info_var_2 = *(ushort *)(info_ptr + 3) & 0xf7ff;\n    *info_ptr = info_ptr[4];\n    *(ushort *)(info_ptr + 3) = info_var_2;\n    info_ptr[1] = 0;\n  }\n  if ((int)((uint)info_var_2 << 0x13) < 0) {\n    info_ptr[0x14] = info_var_4;\n  }\n  data_ptr_2 = (int *)info_ptr[0xc];\n  *data_ptr = info_var_1;\n  if (data_ptr_2 == (int *)0x0) {\n    return 0;\n  }\n  if (data_ptr_2 != info_ptr + 0x10) {\n    cleanup_data(data_ptr);\n  }\n  info_ptr[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000834f0",
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "process_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "do_nothing_00080f08": "activate_sensor",
                "FUN_00080250": "check_sensor_data",
                "FUN_000815ec": "run_system_checks_000815ec",
                "FUN_00080970": "update_network",
                "do_nothing_000815e8": "do_nothing",
                "FUN_00080774": "check_system_status",
                "DAT_00081614": "sensor_status",
                "FUN_00081618": "initialize_hardware",
                "FUN_000801e0": "check_network_status"
            },
            "code": "void run_system_checks_000815ec(void)\n{\n  initialize_hardware();\n  check_system_status();\n  do_nothing();\n  activate_sensor(1);\n  check_network_status();\n  do {\n    do {\n      check_sensor_data();\n    } while (DAT_00081614 == 0);\n    update_network();\n  } while(true);\n}",
            "called": [
                "FUN_00080774",
                "FUN_00081618",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000815e8",
                "FUN_000801e0",
                "FUN_00080f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": true,
            "current_name": "run_system_checks_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "(param_4 & 3) << 0x1c": "shift_amount",
                "param_1": "register_address",
                "FUN_00080d3e": "set_bits_in_register_00080d3e",
                "param_2": "value_to_set",
                "*(uint *)(param_1 + 4)": "*register_address",
                "param_3": "mask",
                "(param_2 & 0xf) << 0x18": "shifted_value",
                "param_4": "shift_amount",
                "param_3 | *(uint *)(param_1 + 4)": "masked_value"
            },
            "code": "void set_bits_in_register_00080d3e(uint32_t* register_address, uint32_t value_to_set, uint32_t mask, uint32_t shift_amount) {\n  uint32_t current_value = *register_address;\n  uint32_t masked_value = current_value & ~mask;\n  uint32_t shifted_value = (value_to_set & mask) << shift_amount;\n  *register_address = masked_value | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "set_bits_in_register_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "PTR_PTR_FUN_000812b8_1_00081458": "PTR_PTR_FUNCTION_1",
                "param_1": "params_array",
                "FUN_00081348": "initialize",
                "FUN_00081438": "set_function_params_00081438",
                "*param_1": "*params_array",
                "param_2": "param_value"
            },
            "code": "undefined4* set_function_params_00081438(undefined4* params_array, undefined4 param_value) {\n  initialize();\n  *params_array = PTR_PTR_FUN_000812b8_1_00081458;\n  params_array[9] = param_value;\n  return params_array;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": true,
            "current_name": "set_function_params_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "param_1": "base_address",
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n  *(int *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "iVar2": "value2",
                "uVar1": "value3",
                "param_1": "output",
                "param_2": "input",
                "FUN_0008356c": "process_data_0008356c",
                "uVar3": "value1",
                "uVar4": "value4"
            },
            "code": "uint32_t process_data_0008356c(uint32_t *output, int *input) {\n  uint32_t value1 = *(uint16_t *)(input + 3);\n  uint32_t value2 = (uint32_t)value1;\n  if ((*DAT_0008362c != 0) && (*(int *)(*DAT_0008362c + 0x38) == 0)) {\n    initialize();\n  }\n  if ((int)(value2 << 0x1c) < 0) {\n    value2 = input[4];\n  }\n  else {\n    if (-1 < (int)(value2 << 0x1b)) {\n      *output = 9;\n      *(uint16_t *)(input + 3) = value1 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value2 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          cleanup(output);\n          value1 = *(uint16_t *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      value2 = input[4];\n      value1 = value1 & 0xffdb;\n      *input = value2;\n      input[1] = 0;\n    }\n    else {\n      value2 = input[4];\n    }\n    *(uint16_t *)(input + 3) = value1 | 8;\n    value2 = (uint32_t)(value1 | 8);\n  }\n  if ((value2 == 0) && ((value2 & 0x280) != 0x200)) {\n    finalize(output, input);\n    value2 = (uint32_t)*(uint16_t *)(input + 3);\n  }\n  uint32_t value3 = value2 & 1;\n  if (value3 == 0) {\n    if (-1 < (int)(value2 << 0x1e)) {\n      value3 = input[5];\n    }\n    input[2] = value3;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((value1 == 0) && ((int)((uint32_t)*(uint16_t *)(input + 3) << 0x18) < 0)) {\n    *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c",
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "iVar2": "controlPtr",
                "DAT_00080c1c": "controlFlag",
                "DAT_00080c0c": "initialControlValue2",
                "DAT_00080c18": "flagValue",
                "DAT_00080c08": "controlData",
                "puVar1": "dataPtr",
                "FUN_00080b98": "initializeData_00080b98",
                "DAT_00080c10": "initialControlValue",
                "DAT_00080c14": "controlValue",
                "DAT_00080c04": "data"
            },
            "code": "void initializeData_00080b98(void)\n{\n  int *DAT_00080c04Ptr = DAT_00080c04;\n  *DAT_00080c04Ptr = 0x400;\n  DAT_00080c04Ptr[0x80] = 0x400;\n  int *controlPtr = DAT_00080c08;\n  if (-1 < *(int *)(DAT_00080c08 + 0x20) << 7) {\n    *(int *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n    while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1f);\n  }\n  *(int *)(DAT_00080c08 + 0x20) = DAT_00080c0c;\n  while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0xf);\n  *(uint *)(DAT_00080c08 + 0x30) = *(uint *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(int *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n  while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1e);\n  *(int *)(DAT_00080c08 + 0x30) = 0x11;\n  while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *(int *)(DAT_00080c08 + 0x30) = 0x12;\n  while (-1 < *(int *)(DAT_00080c08 + 0x68) << 0x1c);\n  *DAT_00080c1c = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "initializeData_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "iVar1": "sum_of_function1",
                "iVar2": "sum_of_function2",
                "param_1": "num",
                "FUN_000810e8": "calculate_sum_of_two_numbers_000810e8",
                "FUN_000810d8": "function2",
                "FUN_000810a6": "function1"
            },
            "code": "int calculate_sum_of_two_numbers_000810e8(undefined4 num){\n  int sum_of_function1 = function1();\n  int sum_of_function2 = function2(num);\n  return sum_of_function1 + sum_of_function2;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "calculate_sum_of_two_numbers_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "param_1": "array_index",
                "1 << (param_2 & 0xff)": "int bit_mask",
                "param_2": "bit_index",
                "*(int *)(param_1 + 0x14)": "int* array_ptr",
                "FUN_00080d58": "set_bit_at_index_00080d58"
            },
            "code": "void set_bit_at_index_00080d58(int array_index, uint bit_index) {\n  int* array_ptr = (int*)(array_index + 0x14);\n  int bit_mask = 1 << (bit_index & 0xff);\n  *array_ptr = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "reset_data_00081480",
                "param_1": "data",
                "FUN_00081800": "perform_reset"
            },
            "code": "void reset_data_00081480(int *data)\n{\n  if (*data != 0) {\n    perform_reset();\n  }\n  *data = 0;\n  data[2] = 0;\n  data[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": true,
            "current_name": "reset_data_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "DAT_00081fa8": "data",
                "FUN_00081f9c": "execute_function_with_params_and_data_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "PTR_": "function_pointer"
            },
            "code": "void execute_function_with_params_and_data_00081f9c(void* DAT_00081fa8, int param_1, int param_2)\n{\n  call_function_with_DAT_00081fa8(*PTR_,DAT_00081fa8,param_1,param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": true,
            "current_name": "execute_function_with_params_and_data_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": true,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "value_1",
                "param_1": "input_param",
                "FUN_00081248": "calculate_difference_00081248",
                "PTR_": "ptr_",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "value_2"
            },
            "code": "uint calculate_difference_00081248(int input_param)\n{\n    int* PTR_1 = *(int**)(input_param + 0x10);\n    int value_1 = *(PTR_1 + 0x80);\n    int value_2 = *(PTR_1 + 0x84);\n    int result = value_1 - value_2;\n    return result & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "imported": true,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "*DAT_0008180c": "function_pointer",
                "param_1": "parameter",
                "FUN_00081800": "execute_function_with_param_00081800"
            },
            "code": "void execute_function_with_param_00081800(void* *DAT_0008180c, int parameter) {\n  *DAT_0008180c(parameter);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": true,
            "current_name": "execute_function_with_param_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "uVar1": "lower_product",
                "param_1": "minuend",
                "lVar2": "product",
                "param_2": "subtrahend",
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_3": "multiplicand_low",
                "param_4": "multiplicand_high",
                "param_5": "difference"
            },
            "code": "void calculate_difference_0008458c(uint minuend, int subtrahend, uint64_t multiplicand, int *difference)\n{\n  uint64_t product = FUNC_00084860() * multiplicand;\n  uint32_t lower_product = (uint32_t)product;\n  difference[0] = minuend - lower_product;\n  difference[1] = subtrahend - ((int)(product >> 32)) - (minuend < lower_product);\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": true,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "iVar2": "response_size",
                "pcVar3": "function_ptr",
                "uVar1": "response_flag",
                "param_1": "request_buffer",
                "param_2": "request_size",
                "param_3": "request_flag",
                "param_4": "response_buffer",
                "FUN_0008434c": "process_request_0008434c",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_request_0008434c(undefined4 *request_buffer, int request_size, undefined4 request_flag, undefined4 *response_buffer)\n{\n  undefined4 response_flag;\n  int response_size;\n  code *function_ptr;\n  undefined stack_buffer [12];\n  \n  if (request_size == 0) {\n    function_ptr = *DAT_00084398;\n    response_flag = get_response_flag();\n    response_size = (*function_ptr)(request_buffer, stack_buffer, 0, response_flag, response_buffer);\n  }\n  else {\n    function_ptr = *DAT_00084398;\n    response_flag = get_response_flag();\n    response_size = (*function_ptr)(request_buffer, request_size, request_flag, response_flag, response_buffer);\n  }\n  if (response_size == -1) {\n    *response_buffer = 0;\n    *request_buffer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": true,
            "current_name": "process_request_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": true,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "local_c": "masked_buffer_size",
                "FUN_00081570": "send_data_to_device",
                "uStack_8": "data",
                "param_1": "data_buffer",
                "param_2": "buffer_size",
                "param_3": "data_type",
                "FUN_0008159e": "process_data_0008159e"
            },
            "code": "void process_data_0008159e(uint32_t* data_buffer, uint32_t buffer_size, uint32_t data_type) {\n  uint32_t masked_buffer_size = buffer_size & 0xffff00ff;\n  uint32_t data = data_type;\n  send_data_to_device(data_buffer, &masked_buffer_size, 1, 0, data_buffer);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "process_data_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "bVar1": "result",
                "puVar2": "codes",
                "iVar6": "i",
                "*param_1": "data",
                "param_2": "length",
                "uVar3": "code_len",
                "uVar5": "code_data",
                "uVar4": "index",
                "uVar7": "data_val",
                "FUN_000806a0": "encode_000806a0"
            },
            "code": "byte encode_000806a0(byte *data, undefined4 length) {\n  byte result;\n  undefined *codes;\n  undefined4 code_len;\n  uint index;\n  undefined4 code_data;\n  int i;\n  uint data_val;\n  \n  if (0x3b < *data) {\n      goto END;\n  }\n  encode_000806a0_data(length, 1, 0x220, *data, 0x960);\n  codes = PTR_DAT_00080694;\n  data_val = (uint)*data;\n  result = PTR_DAT_00080694[data_val * 8];\n  data[2] = 0;\n  index = data_val / 0xc;\n  codes[data_val * 8] = result & 0xc0 | (byte)length & 0x3f;\n  data[1] = 0;\n  i = 0;\n  do {\n      if ((int)((uint)(byte)codes[(i + index * 0xc) * 8] << 0x19) < 0) {\n          goto END;\n      }\n      i = i + 1;\n  } while (i != 0xc);\n  code_len = DAT_00080698;\n  if (index == 0) {\n      code_data = 0x1e;\n  }\n  else if (index == 1) {\n      code_data = 0x1f;\n  }\n  else if (index == 2) {\n      code_data = 0x20;\n  }\n  else if (index == 3) {\n      index = 2;\n      code_data = 0x1d;\n  }\n  else if (index == 4) {\n      index = 0;\n      code_data = 0x1b;\n  }\n  encode_000806a0_data(code_len, index, code_data, code_data);\n  END:\n  codes[(uint)*data * 8] = codes[(uint)*data * 8] | 0x40;\n  return *data;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "encode_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "PTR_DAT_0008155c": "PTR_DAT_0008155c",
                "FUN_000825cc": "update_helper",
                "param_1": "old_params",
                "uint": "uint",
                "undefined": "undefined",
                "param_2": "new_params",
                "FUN_0008151c": "update_params_0008151c"
            },
            "code": "void update_params_0008151c(int *old_params, int *new_params)\n{\n  if (old_params[0] != 0) {\n    if ((new_params[0] != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n      if ((uint)new_params[2] <= (uint)old_params[1]) {\n        update_helper();\n        old_params[2] = new_params[2];\n        goto END;\n      }\n    }\n    reset_params();\n  }\n  old_params[0] = new_params[0];\n  old_params[1] = new_params[1];\n  old_params[2] = new_params[2];\n  new_params[0] = 0;\n  new_params[1] = 0;\nEND:\n  new_params[2] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": true,
            "current_name": "update_params_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "uVar1": "errorCodeLocal",
                "puVar3": "messageString",
                "param_1": "line",
                "param_2": "column",
                "param_3": "message",
                "param_4": "errorCode",
                "uVar2": "errorCodeParam",
                "uVar4": "currentTime",
                "FUN_000816f8": "assertion_failed_000816f8"
            },
            "code": "void assertion_failed_000816f8(undefined4 line, undefined4 column, undefined *message, undefined4 errorCode)\n{\n  undefined4 errorCodeLocal = *(undefined4 *)(*DAT_00081724 + 0xc);\n  undefined4 errorCodeParam = errorCode;\n  undefined *messageString = PTR_s___function__00081728;\n  if (message == (undefined *)0x0) goto LAB_0008171c;\n  do {\n    errorCode = line;\n    FUN_00081750(errorCodeLocal, PTR_s_assertion___s__failed__file___s__0008172c, errorCodeParam, line, column, messageString, message);\n    undefined8 currentTime = FUN_000836ec();\n    column = (undefined4)((ulonglong)currentTime >> 0x20);\n    errorCodeLocal = (undefined4)currentTime;\nLAB_0008171c:\n    message = PTR_s__00081730;\n    errorCodeParam = errorCode;\n    messageString = PTR_s__00081730;\n  } while( true );\n}",
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "assertion_failed_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "handle_error": "handle_error",
                "OFFSET_DATA_PTR": "0x30",
                "OFFSET_DATA_NEXT": "0x40",
                "do_nothing_00083980": "do_nothing_00083980",
                "iVar2": "handler_result",
                "FUN_00084484": "process_data_00084484",
                "iVar3": "data",
                "uVar1": "result",
                "initialize_data": "initialize_data",
                "PTR_DATA": "data",
                "update_data": "update_data",
                "param_1": "data_ptr",
                "OFFSET_DATA_PARAMETER": "0x1C",
                "OFFSET_DATA_SIZE": "0x10",
                "OFFSET_DATA_FLAG": "0x38",
                "do_nothing_0008397c": "do_nothing_0008397c",
                "OFFSET_DATA_FIELD": "0xC",
                "OFFSET_DATA_HANDLER": "0x2C",
                "OFFSET_DATA_TEMP": "0x44"
            },
            "code": "int process_data_00084484(int PTR_DATA_ptr)\n{\n  int result = 0;\n  int PTR_DATA = *PTR_DATA;\n  \n  if (PTR_DATA_ptr != 0) {\n    if ((PTR_DATA != 0) && (*(int *)(PTR_DATA + OFFSET_DATA_FLAG) == 0)) {\n      initialize_PTR_DATA();\n    }\n    if (*(short *)(PTR_DATA_ptr + OFFSET_DATA_FIELD) != 0) {\n      result = update_PTR_DATA(PTR_DATA, PTR_DATA_ptr);\n      if ((*(code **)(PTR_DATA_ptr + OFFSET_DATA_HANDLER) != (code *)0x0) &&\n         (result = (**(code **)(PTR_DATA_ptr + OFFSET_DATA_HANDLER))(PTR_DATA,*(undefined4 *)(PTR_DATA_ptr + OFFSET_DATA_PARAMETER)), result < 0))\n      {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(PTR_DATA_ptr + OFFSET_DATA_SIZE) << 0x18) < 0) {\n        handle_error(PTR_DATA,*(undefined4 *)(PTR_DATA_ptr + OFFSET_DATA_ERROR));\n      }\n      if (*(int *)(PTR_DATA_ptr + OFFSET_DATA_PTR) != 0) {\n        if (*(int *)(PTR_DATA_ptr + OFFSET_DATA_PTR) != PTR_DATA_ptr + OFFSET_DATA_NEXT) {\n          handle_error(PTR_DATA);\n        }\n        *(int *)(PTR_DATA_ptr + OFFSET_DATA_PTR) = 0;\n      }\n      if (*(int *)(PTR_DATA_ptr + OFFSET_DATA_TEMP) != 0) {\n        handle_error(PTR_DATA);\n        *(int *)(PTR_DATA_ptr + OFFSET_DATA_TEMP) = 0;\n      }\n      do_nothing_0008397c();\n      *(short *)(PTR_DATA_ptr + OFFSET_DATA_FIELD) = 0;\n      do_nothing_00083980();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_00083888",
                "FUN_0008397c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": true,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "uVar1": "buffer_index",
                "param_1": "buffer_address",
                "param_2": "new_data"
            },
            "code": "void update_buffer_000811ca(int buffer_address, unsigned char new_data) {\n  uint buffer_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (buffer_index != *(uint *)(buffer_address + 0x84)) {\n    *(unsigned char *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_data;\n    *(uint *)(buffer_address + 0x80) = buffer_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": true,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_000806f8": "print_message",
                "FUN_00080164": "print_message_and_values_00080164",
                "param_1": "message",
                "PTR_DAT_00080180": "value_ptr",
                "param_2": "message_len",
                "param_3": "value1",
                "param_4": "value2",
                "PTR_DAT_0008017c": "message_ptr"
            },
            "code": "void print_message_and_values_00080164(int* message, int message_len, int value1, int value2)\n{\n  print_message(message, message_len);\n  print_value(value1);\n  print_value(value2);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "print_message_and_values_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "sVar1": "input_value",
                "iVar3": "result",
                "FUN_00084244": "process_data_00084244",
                "puVar2": "ptr",
                "param_1": "output",
                "param_2": "input_ptr",
                "param_3": "zero",
                "param_4": "two",
                "uVar4": "mask"
            },
            "code": "void process_data_00084244(int *output, int input_ptr, int zero, int two)\n{\n  short input_value = *(short *)(input_ptr + 0xe);\n  ushort mask = *(ushort *)(input_ptr + 0xc);\n  if ((int)((uint)mask << 0x17) < 0) {\n    FUN_000844e0(output, input_value, 0, 2);\n    mask = *(ushort *)(input_ptr + 0xc);\n  }\n  *(ushort *)(input_ptr + 0xc) = mask & 0xefff;\n  undefined *ptr = PTR_DAT_000843dc;\n  *(undefined4 *)PTR_DAT_000843dc = 0;\n  int result = FUN_00080ec8((int)input_value, zero, two, two, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": true,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "iVar1": "result",
                "FUN_00081496": "check_and_set_value_00081496",
                "param_1": "ptr_value",
                "param_2": "value",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "code": "int check_and_set_value_00081496(int *ptr_value, int value, undefined4 arg3, undefined4 arg4)\n{\n  int result;\n  result = calculate_value(*ptr_value, value + 1, arg3, arg4, arg4);\n  if (result != 0) {\n    *ptr_value = result;\n    ptr_value[1] = value;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": true,
            "current_name": "check_and_set_value_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_value_00084004",
                "DAT_00084008": "dat_value"
            },
            "code": "int get_dat_value_00084004(){\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": true,
            "current_name": "get_dat_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "iVar3": "result",
                "iVar5": "data_index",
                "puVar2": "data_ptr_2",
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "uVar4": "data_value"
            },
            "code": "void update_data_00081014(int index, int value, undefined4 param_3) {\\n  undefined *data_ptr_1 = PTR_DAT_0008107c;\\n  undefined *data_ptr_2 = PTR_DAT_00081080;\\n  if (data_ptr_1[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((data_ptr_2[index] & 0xf) == 5) {\\n      FUN_00080f0c(index, 1, param_3, 5, index, value, param_3);\\n    }\\n    data_ptr_2[index] = data_ptr_2[index] & 0xf | (byte)(value << 4);\\n    int data_index = *(int *)(data_ptr_1 + index * 0x1c);\\n    undefined4 data_value = *(undefined4 *)(data_ptr_1 + index * 0x1c + 4);\\n    int result = FUN_00080a94(data_index, data_value);\\n    if (result == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_index + 100) = data_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_index + 0x60) = data_value;\\n      return;\\n    }\\n    FUN_00080a0a(data_index, data_value, value, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "update_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "iVar3": "buffer_index",
                "FUN_000816ec": "add_to_buffer_000816ec",
                "param_1": "data",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_2": "index",
                "param_3": "flag",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_size",
                "uVar4": "bit_mask"
            },
            "code": "void add_to_buffer_000816ec(uint32_t data, uint32_t index, uint32_t flag)\n{\n  uint32_t *buffer_ptr;\n  uint32_t buffer_size;\n  uint32_t bit_mask;\n  code *jump_table;\n  int buffer_index = *(int *)PTR_DAT_000836d0;\n  buffer_ptr = *(uint32_t **)(buffer_index + 0x148);\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(buffer_index + 0x14c);\n    *(uint32_t **)(buffer_index + 0x148) = buffer_ptr;\n  }\n  buffer_size = buffer_ptr[1];\n  if (buffer_size > 31) {\n    if ((DAT_000836d4 == 0) || (buffer_ptr = (uint32_t *)FUN_000817f0(400), buffer_ptr == (uint32_t *)0x0)) {\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *buffer_ptr = *(uint32_t *)(buffer_index + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_size = 0;\n    *(uint32_t **)(buffer_index + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  bit_mask = 1 << (buffer_size & 0xff);\n  buffer_ptr[buffer_size + 0x22] = data;\n  buffer_ptr[0x62] |= bit_mask;\n  buffer_ptr[buffer_size + 0x42] = flag;\n  buffer_ptr[99] |= bit_mask;\n  buffer_ptr[1] = buffer_size + 1;\n  buffer_ptr[buffer_size + 2] = index;\n  (*jump_table)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": true,
            "current_name": "add_to_buffer_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = FUN_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083850",
                "FUN_00081e34",
                "FUN_00081d48",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00081fac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": true,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_0008236c",
                "FUN_00083b10",
                "FUN_00081f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "imported": true,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "iVar1": "result",
                "param_1": "input_array",
                "FUN_000814ae": "check_valid_input_000814ae",
                "param_2": "input_length"
            },
            "code": "int check_valid_input_000814ae(int *input_array, uint input_length)\n{\n  int result;\n  if ((input_array[0] == 0) || ((uint)input_array[1] < input_length)) {\n    result = check_input_array(input_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (input_array[2] == 0) {\n      *(undefined *)*input_array = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "imported": true,
            "current_name": "check_valid_input_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "ppcVar4": "function_pointer",
                "iVar3": "i",
                "iVar5": "function_count",
                "puVar2": "data_end",
                "FUN_00081778": "execute_functions_00081778",
                "puVar1": "data_start"
            },
            "code": "void execute_functions_00081778(void)\n{\n  int function_count = (int)PTR_FUNCTION_END - (int)PTR_FUNCTION_START >> 2;\n  if (function_count != 0) {\n    code **function_pointer = (code **)(PTR_FUNCTION_START - 4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (function_count != i);\n  }\n  undefined *data_end = PTR_DATA_END;\n  undefined *data_start = PTR_DATA_START;\n  do_nothing_00085844();\n  int data_count = (int)data_start - (int)data_end >> 2;\n  if (data_count != 0) {\n    code **data_pointer = (code **)(data_end - 4);\n    int i = 0;\n    do {\n      i++;\n      data_pointer++;\n      (**data_pointer)();\n    } while (data_count != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_000836d8",
                "FUN_00085844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "execute_functions_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "PTR_DAT_0008010c": "is_initialized",
                "DAT_00080110": "default_value",
                "param_1": "value",
                "FUN_000800f4": "check_and_get_value_000800f4"
            },
            "code": "int check_and_get_value_000800f4(int value)\n{\n  if (*PTR_DAT_0008010c == false) {\n    if (DAT_00080110 != 0) {\n      value = DAT_00080110;\n    }\n    *PTR_DAT_0008010c = true;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": true,
            "current_name": "check_and_get_value_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "execute_function_000810c4",
                "FUN_000810a6": "call_helper_function"
            },
            "code": "void execute_function_000810c4(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "execute_function_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "param_1": "baseAddress",
                "uint": "uint32_t",
                "param_2": "newValue",
                "*(uint *)(param_1 + 4)": "*flagsAddress",
                "param_3": "flagValue",
                "FUN_00080d30": "updateFlags_00080d30"
            },
            "code": "void updateFlags_00080d30(int baseAddress, uint32_t newValue, uint32_t flagValue) {\n  uint32_t* flagsAddress = (uint32_t*)(baseAddress + 4);\n  *flagsAddress = newValue | *flagsAddress | (flagValue & 1) << 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "updateFlags_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "uVar1": "quotient",
                "param_1": "array",
                "PTR_DAT_00080d28": "PTR_DAT_00080d28",
                "DAT_00080d2c": "DAT_00080d2c",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "index",
                "FUN_00080c98": "get_index_of_uint_array_00080c98",
                "local_58": "thresholds"
            },
            "code": "uint get_index_of_uint_array_00080c98(uint *array, uint size, uint value)\n{\n  uint thresholds[16];\n  thresholds[0] = *(uint *)PTR_DAT_00080d28;\n  thresholds[1] = *(uint *)(PTR_DAT_00080d28 + 4);\n  thresholds[2] = *(uint *)(PTR_DAT_00080d28 + 8);\n  thresholds[3] = *(uint *)(PTR_DAT_00080d28 + 0xc);\n  thresholds[4] = *(uint *)(PTR_DAT_00080d28 + 0x10);\n  thresholds[5] = *(uint *)(PTR_DAT_00080d28 + 0x14);\n  thresholds[6] = *(uint *)(PTR_DAT_00080d28 + 0x18);\n  thresholds[7] = *(uint *)(PTR_DAT_00080d28 + 0x1c);\n  thresholds[8] = *(uint *)(PTR_DAT_00080d28 + 0x20);\n  thresholds[9] = *(uint *)(PTR_DAT_00080d28 + 0x24);\n  thresholds[10] = *(uint *)(PTR_DAT_00080d28 + 0x28);\n  thresholds[11] = *(uint *)(PTR_DAT_00080d28 + 0x2c);\n  thresholds[12] = *(uint *)(PTR_DAT_00080d28 + 0x30);\n  thresholds[13] = *(uint *)(PTR_DAT_00080d28 + 0x34);\n  thresholds[14] = *(uint *)(PTR_DAT_00080d28 + 0x38);\n  thresholds[15] = *(uint *)(PTR_DAT_00080d28 + 0x3c);\n  uint index = 0;\n  for (uint i = 0; i < 16; i++) {\n    if (value <= thresholds[i]) {\n      index = i;\n      break;\n    }\n  }\n  uint quotient = size / (index + 1) / 2;\n  if (size == (index + 1) * 2 * quotient) {\n    quotient--;\n  }\n  uint result = 0;\n  for (uint i = 0; i < index + 1; i++) {\n    result += thresholds[i];\n  }\n  result = quotient * param_4 * result / DAT_00080d2c;\n  uint final_result = (index & 0xf) << 0x10 | (quotient & 0xff) << 8;\n  return final_result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "get_index_of_uint_array_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_s_Exiting_with_status__d__00080ef8": "print_exit_status",
                "FUN_00080eec": "exit_with_status_00080eec"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n  PTR_s_Exiting_with_status__d__00080ef8(status_code, param_2, param_3, param_4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "thunk_FUN_000816d8": "thunk_get_last_index",
                "iVar1": "last_index",
                "code": "function_pointer",
                "-1": "-1",
                "param_1": "arr",
                "FUN_000811e8": "find_index_of_positive_000811e8",
                "current_index": "current_index"
            },
            "code": "int find_index_of_positive_000811e8(int *arr)\n{\n  int last_index = thunk_get_last_index();\n  arr[3] = last_index;\n  do {\n    int current_index = (**(code **)(*arr + 0xc))(arr);\n    if (current_index >= 0) {\n      return current_index;\n    }\n    last_index = thunk_get_last_index();\n  } while ((uint)(last_index - arr[3]) < (uint)arr[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": true,
            "current_name": "find_index_of_positive_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_data_000806f8",
                "PTR_DAT_000806f4": "PTR_DAT_000806f4",
                "DAT_000806ec": "DAT_000806ec",
                "uVar1": "length_copy",
                "param_1": "input_data",
                "param_2": "input_length",
                "DAT_000806f0": "DAT_000806f0",
                "FUN_0008145c": "calculate_data_helper"
            },
            "code": "void calculate_data_000806f8(byte *input_data,uint input_length)\n{\n  uint length_copy;\n  if ((int)input_length < 0x220) {\n    length_copy = input_length;\n    if (0xb3 < (int)input_length) {\n      length_copy = 0xb4;\n    }\n    input_length = calculate_data_000806f8_helper(length_copy & ~((int)length_copy >> 0x1f),0,0xb4,(0x88 - (char)input_data[1]) * 4,\n                           (600 - (char)input_data[2]) * 4,input_length);\n  }\n  if (*input_data < 0x3c) {\n    uint temp_length = (0x88 - (char)input_data[1]) * 4;\n    if (((int)(input_length + (0x88 - (char)input_data[1]) * -4) < 0 == SBORROW4(input_length,temp_length)) &&\n       (temp_length = (600 - (char)input_data[2]) * 4, (int)input_length <= (int)temp_length)) {\n      temp_length = input_length;\n    }\n    *(uint *)(PTR_DAT_000806f4 + (uint)*input_data * 8 + 4) =\n         (*DAT_000806ec / DAT_000806f0) * (temp_length - 2) >> 5;\n  }\n  return;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": true,
            "current_name": "calculate_data_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": true,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_base_and_call_func_000810fc",
                "pcVar3": "previous_char",
                "pcVar1": "current_char",
                "param_1": "output",
                "cVar4": "digit_char",
                "local_15": "digits",
                "param_2": "input",
                "param_3": "base",
                "uVar2": "quotient",
                "uVar5": "digit_index"
            },
            "code": "void convert_base_and_call_func_000810fc(uint8_t *output, uint32_t input, uint32_t base) {\n  char *current_char = output;\n  uint32_t quotient = input;\n  char digit_char;\n  char digits[36] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  if (base < 2 || base > 36) {\n    base = 10;\n  }\n  do {\n    current_char++;\n    quotient /= base;\n    digit_char = digits[input - base * quotient];\n    *current_char = digit_char;\n  } while (quotient != 0);\n  call_func(output, current_char);\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": true,
            "current_name": "convert_base_and_call_func_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "PTR_DAT_000803d4": "motor_data_ptr",
                "PTR_DAT_000803e8": "autonomous_control_mode",
                "PTR_DAT_000803c0": "motor_error_pin",
                "FUN_00080250": "control_mode_00080250",
                "PTR_DAT_000803d0": "manual_control_mode",
                "iVar4": "timeout",
                "PTR_DAT_000803e4": "steer_error_ptr",
                "auStack_1c": "steer_str",
                "PTR_DAT_000803f4": "steer_control_data_pin",
                "puVar5": "motor_data_ptr",
                "PTR_DAT_000803c8": "control_pin",
                "PTR_DAT_000803d8": "steer_data_ptr",
                "PTR_DAT_000803bc": "mode_ptr",
                "PTR_DAT_000803cc": "mode_changed_ptr",
                "PTR_DAT_000803dc": "motor_control_pin",
                "puVar1": "steer_error_ptr",
                "PTR_DAT_000803ec": "steer_control_pin",
                "uVar3": "steer_angle",
                "uVar2": "motor_speed",
                "PTR_DAT_000803e0": "motor_error_ptr",
                "PTR_DAT_000803f0": "motor_data_pin"
            },
            "code": "void control_mode_00080250(void)\n{\n  int autonomous_mode = 0;\n  int manual_mode = 1;\n  int motor_speed = 0;\n  int steer_angle = 0;\n  int timeout = 20000;\n  int wait_time = 10;\n  int motor_pin = 0x28;\n  int steer_pin = 0x96;\n  int PTR_DAT_000803f0 = 0x2c;\n  int PTR_DAT_000803c0 = 0x10;\n  int steer_data_pin = 0xa;\n  int steer_error_pin = 0x8;\n  int *PTR_DAT_000803bc = (int *)PTR_DAT_000803bc;\n  int *PTR_DAT_000803d4 = (int *)PTR_DAT_000803d4;\n  int *PTR_DAT_000803e0 = (int *)PTR_DAT_000803e0;\n  int *PTR_DAT_000803d8 = (int *)PTR_DAT_000803d8;\n  int *PTR_DAT_000803e4 = (int *)PTR_DAT_000803e4;\n  int *PTR_DAT_000803cc = (int *)PTR_DAT_000803cc;\n  while (*PTR_DAT_000803bc < 0x641) {\n    FUN_00080164();\n    FUN_000810e8(PTR_DAT_000803c8, PTR_s_error_000803c4);\n    return;\n  }\n  if (*PTR_DAT_000803bc - 0x385U < 299) {\n    if (*PTR_DAT_000803cc != autonomous_mode) {\n      FUN_00080164();\n      FUN_000810e8(PTR_DAT_000803c8, PTR_s_Entered_PTR_DAT_000803d0__000803d0);\n      *PTR_DAT_000803cc = manual_mode;\n    }\n    do_nothing_00080f08(wait_time);\n    int motor_speed = FUN_00081624(3, 1, timeout);\n    int steer_angle = FUN_0008145c(0, 1000, 2000, motor_pin, steer_pin);\n    *PTR_DAT_000803d4 = steer_angle;\n    int *PTR_DAT_000803d8 = (int *)PTR_DAT_000803d8;\n    *PTR_DAT_000803d8 = motor_speed;\n    while (FUN_00081248(PTR_DAT_000803c8) > 0) {\n      FUN_00081276(PTR_DAT_000803c8);\n      thunk_FUN_0008113a(PTR_DAT_000803c8, *PTR_DAT_000803d4, wait_time);\n      FUN_000810c4(PTR_DAT_000803c8, PTR_DAT_000803dc);\n      FUN_0008117a(PTR_DAT_000803c8, *PTR_DAT_000803d8, wait_time);\n    }\n    FUN_000806f8(PTR_DAT_000803e0, *PTR_DAT_000803d8);\n    FUN_000806f8(PTR_DAT_000803e4, *PTR_DAT_000803d4);\n  }\n  else {\n    if (*PTR_DAT_000803cc == autonomous_mode) {\n      FUN_00080164();\n      FUN_000810e8(PTR_DAT_000803c8, PTR_s_Entered_PTR_DAT_000803e8__000803e8);\n    }\n    *PTR_DAT_000803cc = autonomous_mode;\n    while (FUN_00081248(PTR_DAT_000803c8) > 0) {\n      char steer_str[12];\n      char motor_str[12];\n      FUN_00081214(steer_str, PTR_DAT_000803c8, steer_data_pin);\n      FUN_00081560(PTR_DAT_000803ec, steer_str);\n      FUN_00081472(steer_str);\n      FUN_00081214(motor_str, PTR_DAT_000803c8, PTR_DAT_000803f0);\n      FUN_00081560(PTR_DAT_000803f0, motor_str);\n      FUN_00081472(motor_str);\n      FUN_00081276(PTR_DAT_000803c8);\n      int steer_val = FUN_000815b8(PTR_DAT_000803ec, PTR_s_steer_000803f4);\n      if (steer_val == 0) {\n        continue;\n      }\n      int motor_val = FUN_000815de(PTR_DAT_000803f0);\n      if (motor_val != 0) {\n        FUN_000806f8(PTR_DAT_000803e0, motor_val);\n      }\n    }\n  }\n}",
            "called": [
                "FUN_000815de",
                "thunk_FUN_0008113a",
                "FUN_00081248",
                "FUN_00081624",
                "FUN_0008117a",
                "FUN_000810e8",
                "FUN_00081560",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_0008145c",
                "FUN_00080164",
                "FUN_00081276",
                "FUN_000806f8",
                "FUN_00081014",
                "FUN_000815b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "control_mode_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_value_00080d6a",
                "param_1": "object_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_value_00080d6a(int object_address, int parameter_value) {\n  *(int *)(object_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": true,
            "current_name": "set_parameter_value_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "iVar2": "var_i",
                "FUN_000813dc": "initialize_000813dc",
                "puVar3": "ptr_undefined",
                "param_1": "init_value",
                "param_2": "divisor",
                "puVar1": "ptr_array"
            },
            "code": "void initialize_000813dc(uint32_t init_value, uint32_t divisor) {\n  uint32_t *ptr_array;\n  int32_t var_i;\n  undefined4 *ptr_undefined;\n  initialize_000813dc_helper(*(undefined4 *)(init_value + 0x20));\n  ptr_undefined = *(undefined4 **)(init_value + 0x18);\n  ptr_undefined[0x48] = 0x202;\n  *ptr_undefined = 0xac;\n  ptr_array = PTR_000813d4;\n  ptr_undefined[1] = 0x800;\n  ptr_undefined[8] = *ptr_array / divisor >> 4;\n  ptr_undefined[3] = 0xffffffff;\n  ptr_undefined[2] = 0x61;\n  *(int *)(PTR_000813d8 + ((uint32_t)(int32_t)(char)*(uint8_t *)(init_value + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(uint8_t *)(init_value + 0x1c) & 0x1f);\n  var_i = *(int *)(init_value + 0x10);\n  *(undefined4 *)(var_i + 0x84) = 0;\n  *(undefined4 *)(var_i + 0x80) = 0;\n  var_i = *(int *)(init_value + 0x14);\n  *(undefined4 *)(var_i + 0x84) = 0;\n  *(undefined4 *)(var_i + 0x80) = 0;\n  *ptr_undefined = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": true,
            "current_name": "initialize_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "parameters",
                "param_2": "new_parameter",
                "param_3": "has_parameter_3",
                "param_4": "has_parameter_4",
                "param_5": "has_parameter_5"
            },
            "code": "void update_parameters_00080a0a(int* parameters, int new_parameter, int has_parameter_3, int has_parameter_4, int has_parameter_5) {\n  parameters[0] = new_parameter;\n  parameters[0xc] = has_parameter_3 ? new_parameter : parameters[0xc];\n  parameters[0xd] = has_parameter_3 ? parameters[0xd] : new_parameter;\n  parameters[0x14] = has_parameter_4 ? new_parameter : parameters[0x14];\n  parameters[0x15] = has_parameter_4 ? parameters[0x15] : new_parameter;\n  parameters[0x18] = has_parameter_5 ? parameters[0x18] : new_parameter;\n  parameters[0x19] = has_parameter_5 ? new_parameter : parameters[0x19];\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": true,
            "current_name": "update_parameters_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "iVar1": "channel_offset",
                "DAT_00080b60": "tc_configure",
                "iVar2": "channel_address",
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_id",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c": "sizeof(TC_CHANNEL)",
                "param_2": "num_channels",
                "PTR_s_TC_Configure_00080b58": "default_config_data",
                "param_3": "config_data",
                "uVar3": "channel_info",
                "PTR_s____source_tc_c_00080b54": "source_tc"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_id, uint32_t num_channels, char *config_data) {\n  uint64_t channel_info = ((uint64_t)num_channels << 32) | channel_id;\n  if (num_channels > 2) {\n    config_data = PTR_s_TC_Configure_00080b58;\n    channel_info = (*DAT_00080b60)(PTR_s____source_tc_c_00080b54, 0x40, PTR_s_TC_Configure_00080b58, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b5c);\n  }\n  uint32_t channel_offset = (uint32_t)(channel_info >> 32) * 0x40;\n  uint32_t channel_address = (uint32_t)channel_info + channel_offset;\n  *(uint32_t *)(channel_address) = 2;\n  *(uint32_t *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = config_data;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": true,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "iVar3": "var_3",
                "iVar4": "var_4",
                "iVar5": "var_5",
                "puVar2": "config_ptr",
                "iVar6": "var_6",
                "iVar7": "iteration_count",
                "iVar8": "i",
                "FUN_00080774": "initialize_system_00080774",
                "puVar1": "time_ptr"
            },
            "code": "void initialize_system_00080774(void)\n{\n  uint *time_ptr;\n  undefined4 *config_ptr;\n  int i;\n  int num_iterations = 79;\n  int var_6;\n  int var_5;\n  int var_4;\n  int var_3;\n  int iteration_count = 0;\n  time_ptr = PTR_00080878;\n  initialize_time();\n  config_ptr = PTR_0008087c;\n  PTR_0008087c[1] = *time_ptr / 1000 - 1;\n  *(undefined *)(PTR_00080880 + 0x23) = 0xf0;\n  config_ptr[2] = 0;\n  *config_ptr = 7;\n  set_configuration();\n  do {\n    iteration_count++;\n    initialize_iteration(iteration_count,0);\n    var_6 = PTR_00080890;\n    var_5 = PTR_0008088c;\n    var_4 = PTR_00080888;\n    var_3 = PTR_00080884;\n  } while (iteration_count != num_iterations);\n  *(undefined4 *)(PTR_00080884 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_6 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_5 + 0xa0) = 0xffffffff;\n  set_configuration(var_3,1,0x300,0);\n  initialize_iteration(0,1);\n  set_configuration(var_3,1,0xc00,0);\n  set_configuration(var_3,1,0x3000,0);\n  set_configuration(var_5,2,0x30,0);\n  set_configuration(var_4,1,0xc00,0);\n  set_configuration(var_3,1,3,0);\n  set_configuration(var_4,1,0xc000,0);\n  set_iteration(0x25);\n  set_mode(PTR_00080898,*time_ptr,PTR_00080894,0xc);\n  set_mode(PTR_00080898,0,0x300000,1);\n  set_mode(PTR_00080898,0,0);\n  set_mode(PTR_00080898,0xffffffff);\n  end_iteration(PTR_00080898);\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080d3e",
                "FUN_00080c98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00081014",
                "FUN_00080b98",
                "FUN_00081778",
                "FUN_00080d62",
                "FUN_00080d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "initialize_system_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int32_t return_zero_00080ec2(void)\n{\n  int32_t result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": true,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "dataStructure2": "dataStructure2",
                "dataStructure1": "dataStructure1",
                "puVar2": "pointer2",
                "param_1": "dataStructures",
                "FUN_00083888": "initializeDataStructures_00083888",
                "puVar1": "pointer1"
            },
            "code": "void initializeDataStructures_00083888(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *dataStructure1 = *(undefined4 **)(param_1 + 4);\n    *(undefined **)(param_1 + 0x3c) = dataStructure1;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(dataStructure1 + 3) = 4;\n    *dataStructure1 = 0;\n    dataStructure1[1] = 0;\n    dataStructure1[2] = 0;\n    dataStructure1[0x19] = 0;\n    *(undefined2 *)((int)dataStructure1 + 0xe) = 0;\n    dataStructure1[4] = 0;\n    dataStructure1[5] = 0;\n    dataStructure1[6] = 0;\n    initializeDataStructure2(dataStructure1 + 0x17, 0, 8);\n    undefined *puVar1 = *(undefined **)(param_1 + 0x14);\n    undefined *puVar2 = *(undefined **)(param_1 + 8);\n    undefined4 *dataStructure2 = *(undefined4 **)(param_1 + 0xc);\n    dataStructure1[7] = dataStructure1;\n    dataStructure1[8] = puVar1;\n    dataStructure1[9] = puVar2;\n    dataStructure1[10] = puVar1;\n    dataStructure1[0xb] = puVar2;\n    initializeDataStructure2(puVar2 + 0x17, 0, 8);\n    dataStructure2[7] = dataStructure2;\n    dataStructure2[8] = puVar1;\n    dataStructure2[9] = puVar2;\n    dataStructure2[10] = puVar1;\n    dataStructure2[0xb] = puVar2;\n    *(undefined2 *)(dataStructure2 + 3) = 0x12;\n    *(undefined2 *)((int)dataStructure2 + 0xe) = 2;\n    *dataStructure2 = 0;\n    dataStructure2[1] = 0;\n    dataStructure2[2] = 0;\n    dataStructure2[0x19] = 0;\n    dataStructure2[4] = 0;\n    dataStructure2[5] = 0;\n    dataStructure2[6] = 0;\n    initializeDataStructure2(dataStructure2 + 0x17, 0, 8);\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_0008289c",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "initializeDataStructures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "param_1": "settings",
                "FUN_00081348": "initialize_settings_00081348",
                "param_6": "value3",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "value1",
                "param_5": "value2",
                "puVar1": "DAT_000812b8"
            },
            "code": "void initialize_settings_00081348(int *settings, int mode, bool flag, int value1, int value2, int value3) {\n  settings[0] = DAT_000812b8;\n  settings[1] = 0;\n  settings[2] = 1000;\n  settings[3] = mode;\n  *(bool *)(settings + 4) = flag;\n  settings[5] = value1;\n  settings[6] = value2;\n  settings[7] = value3;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "imported": true,
            "current_name": "initialize_settings_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "iVar2": "time_to_complete_task_in_seconds",
                "param_1": "task_index",
                "FUN_00081624": "calculate_time_to_complete_task_00081624",
                "time_units_required": "time_units_required",
                "param_2": "task_status",
                "param_3": "task_priority",
                "param_4": "param_4",
                "puVar1": "time_units_per_second",
                "uVar3": "time_to_complete_task"
            },
            "code": "int calculate_time_to_complete_task_00081624(int task_index, int task_status, int task_priority, undefined4 param_4)\n{\n  uint *time_units_per_second = DAT_0008167c;\n  undefined4 time_to_complete_task = *(undefined4 *)(PTR_DAT_00081678 + task_index * 0x1c + 4);\n  if (task_status == 0) {\n    time_to_complete_task = 0;\n  }\n  int time_units_required = ((*DAT_0008167c / DAT_00081680) * task_priority) / 0x12;\n  int time_to_complete_task_in_seconds = calculate_time_in_seconds(*(int *)(PTR_DAT_00081678 + task_index * 0x1c) + 0x3c,\n                       *(undefined4 *)(PTR_DAT_00081678 + task_index * 0x1c + 4),time_to_complete_task,\n                       time_units_required,param_4);\n  if (time_to_complete_task_in_seconds != 0) {\n    time_to_complete_task_in_seconds = (int)((ulonglong)(time_to_complete_task_in_seconds * 18000 + 16000) / ((ulonglong)*time_units_per_second / 1000));\n  }\n  return time_to_complete_task_in_seconds;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "calculate_time_to_complete_task_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "iVar1": "index",
                "param_1": "destination",
                "FUN_00080ec8": "copy_bytes_to_ptr_00080ec8",
                "param_2": "source",
                "param_3": "count"
            },
            "code": "uint copy_bytes_to_ptr_00080ec8(uint* destination, char* source, uint count)\n{\n  int index;\n  for (index = 0; index < (int)count; index = index + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(destination + index) = (uint)*(byte *)(source + index);\n  }\n  return count & ~((int)count >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": true,
            "current_name": "copy_bytes_to_ptr_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "iVar1": "first_value",
                "iVar2": "second_value",
                "param_1": "param_1",
                "FUN_0008117a": "sum_of_values_0008117a",
                "FUN_0008113a": "get_first_value",
                "FUN_000810d8": "get_second_value"
            },
            "code": "int sum_of_values_0008117a(int param_1)\n{\n  int first_value = get_first_value();\n  int second_value = get_second_value(param_1);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "sum_of_values_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "software_interrupt": "trigger_system_interrupt",
                "do_nothing_00080f08": "wait_for_system_response",
                "FUN_00080164": "perform_system_test",
                "PTR_DAT_0008024c": "system_data_ptr_3",
                "FUN_000813dc": "initialize_system",
                "PTR_DAT_00080160": "system_status_ptr",
                "param_1": "input_param_1",
                "FUN_00080f0c": "set_system_status",
                "PTR_DAT_00080248": "system_data_ptr_2",
                "FUN_000801e0": "perform_system_check_000801e0",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "PTR_DAT_00080244": "system_data_ptr_1",
                "FUN_000806a0": "configure_system"
            },
            "code": "int perform_system_check_000801e0(int param_1, int param_2, int param_3, int param_4)\n{\n  initialize_system(PTR_DAT_00080244, 0xe100, param_3, param_4, param_4);\n  set_system_status(0xd, 1);\n  set_system_status(6, 1);\n  set_system_status(0x39, 0);\n  set_system_status(4, 0);\n  set_system_status(3, 0);\n  set_system_status(2, 0);\n  configure_system(PTR_DAT_00080248, 5);\n  configure_system(PTR_DAT_0008024c, 6);\n  perform_system_test();\n  wait_for_system_response(1000);\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    trigger_system_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": true,
            "current_name": "perform_system_check_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "param_1": "buffer_address",
                "FUN_000811b0": "initialize_buffer_000811b0",
                "FUN_00081f00": "set_memory"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n  // Call function to set buffer memory to 0x00\n  set_memory(buffer_address, 0, 0x80);\n  // Set 4 bytes at offset 0x80 to 0\n  *(undefined4 *)(buffer_address + 0x80) = 0;\n  // Set 4 bytes at offset 0x84 to 0\n  *(undefined4 *)(buffer_address + 0x84) = 0;\n  // Return buffer address\n  return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "*DAT_000817fc": "data_pointer",
                "param_1": "param",
                "FUN_000817f0": "execute_function_with_data_pointer_000817f0",
                "FUNC_00081810": "call_function_with_data"
            },
            "code": "void execute_function_with_data_pointer_000817f0(void* *DAT_000817fc, int param) {\n  call_function_with_data(**DAT_000817fc, param);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": true,
            "current_name": "execute_function_with_data_pointer_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "start_range",
                "param_4": "end_range",
                "param_5": "new_range_start",
                "FUN_0008145c": "calculate_new_value_0008145c"
            },
            "code": "int calculate_new_value_0008145c(int start_value, int end_value, int start_range, int end_range, int new_range_start){\n    int range_difference = end_range - start_range;\n    int value_difference = start_value - end_value;\n    int new_range_difference = new_range_start - end_range;\n    int result = (value_difference * new_range_difference) / range_difference + end_range;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": true,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74",
                "FUN_00081fac"
            ],
            "imported": true,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba"
            },
            "code": "int return_one_00080eba(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": true,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac"
            ],
            "imported": true,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00081e34(piVar9,param_2);\n      }\n      FUN_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081810",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": true,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "iVar1": "count",
                "FUN_00081190": "decrement_and_call_if_zero_00081190"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if (count != -1) {\n    count--;\n    *DAT_000811a8 = count;\n    if (count == 0) {\n      (*DAT_000811ac)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": true,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "bVar2": "flag2",
                "bVar1": "flag1",
                "bVar3": "flag3",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flags"
            },
            "code": "void set_parameters_000809e4(uint32_t* parameters, uint32_t value, uint32_t flags) {\n  bool flag1 = (int)(flags << 31) < 0;\n  parameters[0x11] = value;\n  if (flag1) {\n    parameters[0x19] = value;\n  }\n  if (!flag1) {\n    parameters[0x18] = value;\n  }\n  bool flag2 = (flags & 10) != 0;\n  if (flag2) {\n    parameters[8] = value;\n  }\n  if (!flag2) {\n    parameters[9] = value;\n  }\n  bool flag3 = ((int)(flags << 30) < 0) || ((int)(flags << 28) < 0);\n  if (flag3) {\n    parameters[0x20] = value;\n  }\n  parameters[5] = value;\n  *parameters = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": true,
            "current_name": "set_parameters_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "return_zero_00080ebe"
            },
            "code": "int32_t return_zero_00080ebe(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": true,
            "current_name": "return_zero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "getValueFromPointer_thunk_000816d8",
                "PTR_DAT_000816e0": "pointerToValue"
            },
            "code": "int getValueFromPointer_thunk_000816d8() {\n  int* PTR_DAT_000816e0 = (int*) PTR_DAT_000816e0;\n  int value = *PTR_DAT_000816e0;\n  return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": true,
            "current_name": "getValueFromPointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "pointer_value"
            },
            "code": "get_value_from_pointer_000816d8() {\n  return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_byte_array_000815b8",
                "iVar2": "result",
                "uVar1": "array_len",
                "param_1": "array_ptr",
                "FUNC_00082390": "get_array_len",
                "param_2": "byte_ptr"
            },
            "code": "int check_byte_array_000815b8(byte **array_ptr,byte *byte_ptr)\n{\n  uint array_len;\n  int result;\n  \n  if (array_ptr[2] == NULL) {\n    if (byte_ptr == NULL) {\n      return 1;\n    }\n  }\n  else {\n    if (byte_ptr != NULL) {\n      array_len = get_array_len(*array_ptr);\n      goto LAB_000815d4;\n    }\n    byte_ptr = *array_ptr;\n  }\n  array_len = (uint)*byte_ptr;\nLAB_000815d4:\n  result = 1 - array_len;\n  if (array_len > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "check_byte_array_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "iVar1": "result",
                "FUN_00084220": "calculate_new_value_00084220",
                "param_1": "input_value",
                "param_2": "input_offset"
            },
            "code": "void calculate_new_value_00084220(undefined4 input_value, int input_offset)\n{\n  int result = calculate_offset(input_value,(int)*(short *)(input_offset + 0xe));\n  if (result >= 0) {\n    *(int *)(input_offset + 0x50) = *(int *)(input_offset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(input_offset + 0xc) = *(ushort *)(input_offset + 0xc) & 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": true,
            "current_name": "calculate_new_value_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "increment_and_return_value_00081472",
                "param_1": "value_ptr",
                "*param_1": "*value_ptr"
            },
            "code": "undefined4* increment_and_return_value_00081472(undefined4* value_ptr) {\n  increment_value(*value_ptr);\n  return value_ptr;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": true,
            "current_name": "increment_and_return_value_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": true,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "iVar3": "list_end_address",
                "uVar1": "value_to_add",
                "iVar4": "list_start_address",
                "FUN_000836ec": "add_value_to_list_000836ec",
                "puVar2": "list_pointer",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_address"
            },
            "code": "void add_value_to_list_000836ec(void)\n{\n  undefined4 value_to_add;\n  undefined4 *list_pointer;\n  int list_start_address;\n  int list_end_address;\n  code *jump_table_address;\n  initialize_list(6);\n  jump_table_address = (code *)0x836fb;\n  value_to_add = get_value(1);\n  list_start_address = *(int *)PTR_DAT_000836d0;\n  list_pointer = *(undefined4 **)(list_start_address + 0x148);\n  if (list_pointer == (undefined4 *)0x0) {\n    list_pointer = (undefined4 *)(list_start_address + 0x14c);\n    *(undefined4 **)(list_start_address + 0x148) = list_pointer;\n  }\n  list_end_address = list_pointer[1];\n  if (0x1f < list_end_address) {\n    if ((DAT_000836d4 == 0) ||\n       (list_pointer = (undefined4 *)allocate_memory(400), list_pointer == (undefined4 *)0x0)) {\n      (*jump_table_address)(0xffffffff);\n      return;\n    }\n    *list_pointer = *(undefined4 *)(list_start_address + 0x148);\n    list_pointer[1] = 0;\n    list_end_address = 0;\n    *(undefined4 **)(list_start_address + 0x148) = list_pointer;\n    list_pointer[0x62] = 0;\n    list_pointer[99] = 0;\n  }\n  list_pointer[1] = list_end_address + 1;\n  list_pointer[list_end_address + 2] = value_to_add;\n  (*jump_table_address)(0);\n  return;\n}",
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": true,
            "current_name": "add_value_to_list_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUNC_0008289c": "call_function_with_data",
                "FUN_00081750": "process_data_and_call_function_00081750",
                "uStack_8": "data_3",
                "param_1": "data_1",
                "uStack_4": "data_4",
                "param_2": "data_2",
                "param_3": "data_3_ptr",
                "param_4": "data_4_ptr"
            },
            "code": "void process_data_and_call_function_00081750(int data_1, int data_2, int* data_3_ptr, int* data_4_ptr)\n{\n  int data_3 = *data_3_ptr;\n  int data_4 = *data_4_ptr;\n  call_function_with_data(data_1, data_2, &data_3);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": true,
            "current_name": "process_data_and_call_function_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "bVar4": "is_null_byte_found",
                "iVar1": "byte_count",
                "puVar2": "ptr_input_address",
                "param_1": "input_address",
                "FUN_00082688": "count_bytes_until_null_00082688",
                "uVar3": "current_word"
            },
            "code": "int count_bytes_until_null_00082688(uint input_address){\n    int byte_count;\n    uint *ptr_input_address;\n    uint current_word, mask;\n    bool is_null_byte_found;\n    \n    ptr_input_address = (uint *)(input_address & 0xfffffffc);\n    byte_count = -(input_address & 3);\n    current_word = *ptr_input_address;\n    if ((input_address & 3) != 0) {\n        mask = 0xffffffffU >> ((byte_count + 4U & 0x1f) << 3);\n        current_word |= mask;\n    }\n    while (ptr_input_address++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        byte_count += 4;\n        current_word = *ptr_input_address;\n    }\n    is_null_byte_found = (current_word & 0xff) == 0;\n    if (!is_null_byte_found) {\n        byte_count += 1;\n        is_null_byte_found = (current_word & 0xff00) == 0;\n    }\n    if (!is_null_byte_found) {\n        byte_count += 1;\n        is_null_byte_found = (current_word & 0xff0000) == 0;\n    }\n    if (!is_null_byte_found) {\n        byte_count += 1;\n    }\n    return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_0008289c",
                "FUN_000814f6"
            ],
            "imported": true,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "iVar2": "errorCode",
                "param_1": "result",
                "FUN_00084508": "processResult_00084508",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "resultPointer"
            },
            "code": "void processResult_00084508(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *resultPointer = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  int errorCode = executeProcess(arg2, arg3, arg4);\n  if ((errorCode == -1) && (*(int *)resultPointer != 0)) {\n    *result = *(int *)resultPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": true,
            "current_name": "processResult_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "bVar1": "is_negative_flag",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "FUN_00080a30": "process_data_00080a30",
                "param_4": "flag"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, unsigned int flag) {\n  bool is_negative_flag;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*data_ptr)(data_type, data_value);\n      is_negative_flag = (int)(flag << 0x1f) < 0;\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative_flag) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*data_ptr)(data_value, flag, data_ptr, data_value);\n      break;\n    case 4:\n    case 5:\n      (*data_ptr)(data_value, data_type == 5, (flag << 0x1d) >> 0x1f, flag & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": true,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "DAT_00080950": "constant_17",
                "DAT_00080938": "constant_8",
                "param_1": "constant_1",
                "DAT_00080958": "constant_18",
                "PTR_DAT_0008095c": "component_array_10",
                "PTR_DAT_0008093c": "component_array_3",
                "PTR_DAT_00080940": "component_array_4",
                "PTR_DAT_00080968": "component_array_6",
                "PTR_DAT_00080948": "component_array_7",
                "PTR_DAT_00080964": "component_array_11",
                "PTR_DAT_00080944": "component_array_5",
                "PTR_DAT_0008096c": "component_array_6",
                "DAT_00080960": "constant_20",
                "puVar2": "component_ptr_2",
                "puVar3": "component_ptr_3",
                "puVar4": "component_ptr_4",
                "puVar5": "component_ptr_5",
                "puVar6": "component_ptr_6",
                "PTR_DAT_0008094c": "component_array_8",
                "PTR_DAT_00080930": "component_array_1",
                "param_2": "constant_2",
                "param_3": "constant_3",
                "puVar1": "component_ptr_1",
                "FUN_0008089c": "initialize_components_0008089c",
                "PTR_DAT_00080954": "component_array_9",
                "PTR_DAT_00080934": "component_array_2"
            },
            "code": "void initialize_components_0008089c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *component_ptr_1;\n  undefined *component_ptr_2;\n  undefined *component_ptr_3;\n  undefined *component_ptr_4;\n  undefined *component_ptr_5;\n  undefined *component_ptr_6;\n  \n  component_ptr_2 = PTR_DAT_00080934;\n  component_ptr_1 = PTR_DAT_00080930;\n  initialize_component(PTR_DAT_00080930);\n  initialize_component(PTR_DAT_00080934);\n  component_ptr_5 = PTR_DAT_00080944;\n  component_ptr_3 = PTR_DAT_0008093c;\n  initialize_component(PTR_DAT_00080940, constant_1, constant_2, DAT_00080938, component_ptr_1, component_ptr_2, param_3);\n  component_ptr_1 = PTR_DAT_00080968;\n  initialize_component(PTR_DAT_00080944);\n  component_ptr_6 = PTR_DAT_00080968;\n  initialize_component(PTR_DAT_0008093c);\n  component_ptr_2 = PTR_DAT_00080948;\n  initialize_component(PTR_DAT_00080968);\n  component_ptr_4 = PTR_DAT_0008094c;\n  initialize_component(PTR_DAT_00080948);\n  initialize_component(PTR_DAT_0008094c);\n  initialize_component(PTR_DAT_00080954, DAT_00080950, DAT_00080950, component_ptr_5, component_ptr_6);\n  initialize_component(PTR_DAT_0008095c, DAT_00080958, DAT_00080958, component_ptr_3, component_ptr_2);\n  initialize_component(PTR_DAT_00080964, DAT_00080960, DAT_00080960, component_ptr_1, component_ptr_4);\n  return;\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_components_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "uVar1": "allocated_memory",
                "param_1": "data_ptr",
                "FUN_00082688": "allocate_memory",
                "param_2": "data_count",
                "FUN_000810a6": "process_data_000810a6"
            },
            "code": "void process_data_000810a6(int *data_ptr, int data_count, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 uVar1;\n  if (data_count != 0) {\n    uVar1 = allocate_memory(data_count);\n    (**(code **)(*data_ptr + 4))(data_ptr, data_count, uVar1, *(code **)(*data_ptr + 4), param_4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "imported": true,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 95964,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081560",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_00083b10",
            "FUN_00080e80",
            "thunk_FUN_0008113a",
            "FUN_0008236c",
            "FUN_00080d62",
            "FUN_000842a4",
            "FUN_000814f6",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_000839b4",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00080eb0",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_00082824",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_000834f0",
            "FUN_000841e4",
            "FUN_0008113a",
            "FUN_0008400c",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_000810d8",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080d3e",
            "FUN_00081438",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000810e8",
            "FUN_00080d58",
            "FUN_00081480",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_00081800",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084484",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081496",
            "FUN_00084004",
            "FUN_00081014",
            "FUN_000816ec",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_000810c4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000810fc",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080774",
            "FUN_00080ec2",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_0008117a",
            "FUN_000801e0",
            "FUN_000811b0",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00084220",
            "FUN_00081472",
            "FUN_000836ec",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_00080a30",
            "FUN_0008089c",
            "FUN_000810a6"
        ]
    ],
    "locked_functions": []
}