{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_and_offset_00000428",
            "code": "\ndword validateAndOffset_00000428(undefined4 *result,int value)\n\n{\n  undefined4 randomValue;\n  dword offset;\n  \n  randomValue = FUN_00000cd0();\n  offset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((value + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < value + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = value + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    offset = 0xffffffff;\n  }\n  FUN_00000d0c(randomValue);\n  return offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_and_offset_00000428",
                "param_1": "result",
                "param_2": "value",
                "uVar1": "randomValue",
                "local_c": "offset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_data_00000490",
            "code": "\nundefined4 process_data_00000490(undefined4 input_1,undefined4 input_2,undefined4 data_1,undefined4 data_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(data_1,data_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_data_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_return_value_to19_000004f2",
            "code": "\nundefined4 setReturnValueTo19_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_return_value_to19_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_param_with_0x13_00000514",
            "code": "\nundefined4 initialize_param_with_0x13_00000514(undefined4 *param)\n\n{\n  *param = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_param_with_0x13_00000514",
                "param_1": "param"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *result,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "result",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_bits_and_count_00000566",
            "code": "\nint extractBitsAndCount_00000566(int inputValue)\n\n{\n  byte bit1;\n  byte bit2;\n  byte bit3;\n  byte bit4;\n  int result;\n  \n  bit2 = (byte)inputValue;\n  bit3 = (byte)((uint)inputValue >> 8);\n  bit4 = (byte)((uint)inputValue >> 0x10);\n  bit1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((bit2 & 1) << 1 | bit2 >> 1 & 1) << 1 | bit2 >> 2 & 1) << 1\n                                  | bit2 >> 3 & 1) << 1 | bit2 >> 4 & 1) << 1 | bit2 >> 5 & 1) <<\n                                1 | bit2 >> 6 & 1) << 1 | bit2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((bit3 & 1) << 1 | bit3 >> 1 & 1) << 1 | bit3 >> 2 & 1) << 1\n                                  | bit3 >> 3 & 1) << 1 | bit3 >> 4 & 1) << 1 | bit3 >> 5 & 1) <<\n                                1 | bit3 >> 6 & 1) << 1 | bit3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((bit4 & 1) << 1 | bit4 >> 1 & 1) << 1 | bit4 >> 2 & 1) << 1\n                                  | bit4 >> 3 & 1) << 1 | bit4 >> 4 & 1) << 1 | bit4 >> 5 & 1) <<\n                                1 | bit4 >> 6 & 1) << 1 | bit4 >> 7) << 8 |\n                  (uint)(byte)((((((((bit1 & 1) << 1 | bit1 >> 1 & 1) << 1 | bit1 >> 2 & 1) << 1\n                                  | bit1 >> 3 & 1) << 1 | bit1 >> 4 & 1) << 1 | bit1 >> 5 & 1) <<\n                                1 | bit1 >> 6 & 1) << 1 | bit1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_bits_and_count_00000566",
                "param_1": "inputValue",
                "bVar1": "bit1",
                "bVar2": "bit2",
                "bVar3": "bit3",
                "bVar4": "bit4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePointer,undefined4 *newPointer)\n\n{\n  if (*sourcePointer == 0) {\n    *newPointer = newPointer;\n  }\n  else {\n    *newPointer = *(undefined4 *)*sourcePointer;\n    *(undefined4 **)*sourcePointer = newPointer;\n  }\n  *sourcePointer = (int)newPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePointer",
                "param_2": "newPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_content_000005ca",
            "code": "\nundefined4 * extractContent_000005ca(int *inputArray)\n\n{\n  undefined4 *result;\n  \n  if (*inputArray == 0) {\n    result = (undefined4 *)0x0;\n  }\n  else {\n    result = *(undefined4 **)*inputArray;\n    if (result == (undefined4 *)*inputArray) {\n      *inputArray = 0;\n    }\n    else {\n      *(undefined4 *)*inputArray = *result;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_content_000005ca",
                "param_1": "inputArray",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "extract_data_00000610",
            "code": "\nundefined4 extractData_00000610(void)\n\n{\n  int dataAddress;\n  int index;\n  undefined4 status;\n  \n  dataAddress = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataAddress == index + -8) {\n    status = 0;\n  }\n  else {\n    if ((dataAddress != 0) && (*(char *)(dataAddress + 4) == '\\t')) {\n      *(undefined *)(dataAddress + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    status = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00000610": "extract_data_00000610",
                "iVar1": "dataAddress",
                "iVar2": "index",
                "uVar3": "status"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataPointer,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataPointer + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataPointer + 5));\n    }\n  }\n  else if (*(byte *)(dataPointer + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4,dataPointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataPointer + 5);\n  }\n  *(char *)(dataPointer + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataPointer",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_process_limit_00000738",
            "code": "\nvoid checkAndProcessLimit_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_process_limit_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_array_00000794",
            "code": "\nint * initializeArray_00000794(void)\n\n{\n  int returnedValue;\n  int currentIndex;\n  undefined4 *ptrToData;\n  uint alignedAddress;\n  int loopCounter1;\n  int loopCounter2;\n  int *arrayPointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  ptrToData = &DAT_1fff03dc;\n  currentIndex = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)ptrToData + currentIndex & 0xfffffffc;\n  arrayPointer = (int *)(alignedAddress - 4);\n  *arrayPointer = 0x77777777;\n  if (((uint)arrayPointer & 7) != 0) {\n    arrayPointer = (int *)(alignedAddress - 8);\n    *arrayPointer = 0x88888888;\n  }\n  arrayPointer[-1] = 0x1000000;\n  arrayPointer[-2] = currentIndex << 0xd;\n  arrayPointer[-3] = 0x795;\n  arrayPointer = arrayPointer + -4;\n  *arrayPointer = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = loopCounter2;\n  }\n  arrayPointer = arrayPointer + -1;\n  *arrayPointer = returnedValue;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = loopCounter1;\n  }\n  arrayPointer[-1] = -3;\n  return arrayPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_array_00000794",
                "extraout_r1": "returnedValue",
                "iVar1": "currentIndex",
                "puVar2": "ptrToData",
                "uVar3": "alignedAddress",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "arrayPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_block_000007dc",
            "code": "\nint * initializeMemoryBlock_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int counter1;\n  int counter2;\n  int *ptrToBlock;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptrToBlock = (int *)(alignedSize - 4);\n  *ptrToBlock = 0x77777777;\n  if (((uint)ptrToBlock & 7) != 0) {\n    ptrToBlock = (int *)(alignedSize - 8);\n    *ptrToBlock = 0x88888888;\n  }\n  ptrToBlock[-1] = 0x1000000;\n  ptrToBlock[-2] = param1;\n  ptrToBlock[-3] = 0x795;\n  ptrToBlock = ptrToBlock + -4;\n  *ptrToBlock = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    ptrToBlock = ptrToBlock + -1;\n    *ptrToBlock = counter2;\n  }\n  ptrToBlock = ptrToBlock + -1;\n  *ptrToBlock = param2;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    ptrToBlock = ptrToBlock + -1;\n    *ptrToBlock = counter1;\n  }\n  ptrToBlock[-1] = -3;\n  return ptrToBlock + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_block_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "counter1",
                "local_10": "counter2",
                "local_c": "ptrToBlock"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_relocation_entries_000008b8",
            "code": "\nint count_relocation_entries_000008b8(void)\n\n{\n  Elf32_Rel *current_entry;\n  \n  for (current_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (current_entry->r_offset == 0xe7fee7fe && (current_entry < Elf32_Rel_ARRAY_1fff0200));\n      current_entry = (Elf32_Rel *)&current_entry->r_info) {\n  }\n  return ((int)Elf32_Rel_ARRAY_1fff0200 - (int)current_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_relocation_entries_000008b8",
                "local_c": "current_entry"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_protection_flag_0000093c",
            "code": "\n\n\nvoid setMemoryProtectionFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_protection_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int stackOffset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return NMI_HANDLER_BASE + -*(int *)(stackOffset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "stackOffset",
                "&stack0xe000ffe0": "NMI_HANDLER_BASE"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_irq_and_get_interrupt_status_00000cc0",
            "code": "\nundefined4 disableIRQAndGetInterruptStatus_00000cc0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptStatus;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interruptStatus = 0;\n  isPrivileged = (bool)isPrivilegedMode();\n  if (isPrivileged) {\n    interruptStatus = areIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_irq_and_get_interrupt_status_00000cc0",
                "isCurrentModePrivileged": "isPrivilegedMode",
                "isIRQinterruptsEnabled": "areIRQinterruptsEnabled",
                "bVar1": "isPrivileged",
                "uVar2": "interruptStatus"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "disable_and_check_ir_qinterrupts_00000cd0",
            "code": "\nundefined4 disableAndCheckIRQinterrupts_00000cd0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "disable_and_check_ir_qinterrupts_00000cd0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivileged"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfPrivileged_00000d0c(uint input)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkCurrentModePrivilege();\n  if (isPrivileged) {\n    enableIRQInterrupts((input & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "input",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkCurrentModePrivilege",
                "enableIRQinterrupts": "enableIRQInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_result_00000d44",
            "code": "\nint calculateResult_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 inputParam,undefined undefinedValue)\n\n{\n  undefined4 *resultPtr;\n  \n  resultPtr = (undefined4 *)FUN_00000d44(inputParam,undefinedValue);\n  *resultPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "inputParam",
                "param_2": "undefinedValue",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_hardware_00000d9c",
            "code": "\nvoid initializeHardware_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_hardware_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initializeSystem_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_00000dc0",
            "code": "\nvoid initialize_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_hardware_00000df4",
            "code": "\nvoid initializeHardware_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_hardware_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "execute_binary_function_00000e14",
            "code": "\nundefined4 executeBinaryFunction_00000e14(undefined4 argument1,undefined4 argument2)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_000012e2(0x1fff0204,argument1,argument2);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "execute_binary_function_00000e14",
                "param_1": "argument1",
                "param_2": "argument2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_and_return_param2_00000e38",
            "code": "\nundefined4 executeAndReturnParam2_00000e38(undefined4 inputParam,undefined4 outputParam)\n\n{\n  FUN_000015d0(0,inputParam,outputParam);\n  return outputParam;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_and_return_param2_00000e38",
                "param_1": "inputParam",
                "param_2": "outputParam"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripheral_00000e64",
            "code": "\n\n\nvoid initializePeripheral_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripheral_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 inputReturnAddress;\n  \n  FUN_00004c84(&DAT_00006f58,inputReturnAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "inputReturnAddress"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 tempStack;\n  code *jumpTable;\n  undefined4 panicMessageCopy;\n  char panicTypeCopy;\n  \n  panicMessageCopy = panicMessage;\n  panicTypeCopy = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMessageCopy);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  tempStack = (int)&tempStack + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "tempStack",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "panicMessageCopy",
                "local_9": "panicTypeCopy"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_data_00000f8c",
            "code": "\nvoid initializeData_00000f8c(void)\n\n{\n  uint bitMask;\n  undefined4 *pointerToData;\n  uint loopCount;\n  int stackVar1;\n  int *pointerToStackVar1;\n  undefined4 dummyValue3;\n  undefined4 dummyValue2;\n  undefined4 dummyValue1;\n  dword dataOffset;\n  \n  FUN_00000cd0();\n  dataOffset = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  dummyValue1 = 0;\n  dummyValue2 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  dataOffset = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  dummyValue1 = 0;\n  dummyValue2 = 0xf5d;\n  loopCount = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  dummyValue3 = 0xfd3;\n  bitMask = FUN_00000930();\n  bitMask = bitMask >> 0x1e;\n  pointerToData = (undefined4 *)(loopCount * 0x100);\n  stackVar1 = (loopCount >> 0x1d) << 0x11;\n  pointerToStackVar1 = &stackVar1;\n  if ((bitMask & bitMask - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointerToData = 0;\n  pointerToData[1] = 0;\n  pointerToData[2] = bitMask - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_data_00000f8c",
                "local_10": "dataOffset",
                "local_14": "dummyValue1",
                "local_18": "dummyValue2",
                "uStack_1c": "dummyValue3",
                "uVar1": "bitMask",
                "puVar2": "pointerToData",
                "uVar3": "loopCount",
                "iStack_24": "stackVar1",
                "piStack_20": "pointerToStackVar1"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_memory_00000fec",
            "code": "\nvoid initializeMemory_00000fec(undefined4 *memoryPointer,uint memorySize)\n\n{\n  if ((memorySize & memorySize - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *memoryPointer = 0;\n  memoryValue1 = 0;\n  memoryValue2 = memorySize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_memory_00000fec",
                "param_1": "memoryPointer",
                "param_2": "memorySize",
                "param_1[1]": "memoryValue1",
                "param_1[2]": "memoryValue2"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_value_00001034",
            "code": "\nvoid findClosestValue_00001034(int **array,int value)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(value + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = array;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(value + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(value + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(value + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_value_00001034",
                "param_1": "array",
                "param_2": "value",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_difference_000010a0",
            "code": "\nint count_difference_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_difference_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_buffer_000010d4",
            "code": "\nint initializeBuffer_000010d4(uint bufferAddress,int bufferLength,byte bufferSize,uint config,undefined4 configValue1,\n                undefined4 configValue2,undefined4 configValue3)\n\n{\n  undefined4 result;\n  undefined4 tempValue;\n  int returnValue;\n  uint alignedLength;\n  undefined4 *bufferPtr;\n  int remainingLength;\n  uint alignedAddress;\n  uint loopCounter;\n  short bufferIndex;\n  short availableIndex;\n  \n  if (bufferSize < 0x10) {\n    remainingLength = bufferLength;\n    alignedAddress = bufferAddress;\n    if ((bufferAddress & 3) != 0) {\n      remainingLength = 4 - (bufferAddress & 3);\n      alignedAddress = remainingLength + bufferAddress;\n      remainingLength = bufferLength - remainingLength;\n    }\n    alignedLength = remainingLength - 0x30U & 0xfffffffc;\n    bufferPtr = (undefined4 *)(alignedLength + alignedAddress);\n    if ((config & 8) == 0) {\n      *(uint *)alignedAddress = alignedAddress;\n    }\n    else {\n      for (loopCounter = alignedAddress; loopCounter < alignedLength + alignedAddress; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    result = FUN_00000cd0();\n    availableIndex = 0;\n    for (bufferIndex = 1; bufferIndex < 0x21; bufferIndex = bufferIndex + 1) {\n      if (*(int *)(&DAT_1fff0358 + bufferIndex * 4) == 0) {\n        availableIndex = bufferIndex;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      FUN_00000d0c(result);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = bufferPtr;\n      *(short *)((int)bufferPtr + 6) = availableIndex;\n      tempValue = FUN_000007dc(configValue1,configValue2,alignedAddress,alignedLength);\n      *bufferPtr = tempValue;\n      bufferPtr[9] = alignedAddress;\n      bufferPtr[0xb] = bufferLength;\n      bufferPtr[10] = configValue3;\n      *(byte *)((int)bufferPtr + 5) = bufferSize;\n      *(undefined *)(bufferPtr + 1) = 0;\n      bufferPtr[2] = 0;\n      bufferPtr[3] = 0;\n      bufferPtr[4] = 0;\n      FUN_00000fec(bufferPtr + 5,0);\n      bufferPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((config & 1) == 0) {\n        FUN_00000698(bufferPtr,10);\n        if ((config & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(bufferSize);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        FUN_00000698(bufferPtr,1);\n      }\n      FUN_00000d0c(result);\n      returnValue = (int)availableIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_buffer_000010d4",
                "param_1": "bufferAddress",
                "param_2": "bufferLength",
                "param_3": "bufferSize",
                "param_4": "config",
                "param_5": "configValue1",
                "param_6": "configValue2",
                "param_7": "configValue3",
                "uVar1": "result",
                "uVar2": "tempValue",
                "iVar3": "returnValue",
                "uVar4": "alignedLength",
                "puVar5": "bufferPtr",
                "local_30": "remainingLength",
                "local_2c": "alignedAddress",
                "local_10": "loopCounter",
                "local_c": "bufferIndex",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_application_00001274",
            "code": "\nvoid initializeApplication_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_application_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_function_0000129c",
            "code": "\nvoid initializeFunction_0000129c(undefined4 param)\n\n{\n  FUN_00002434(param,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_function_0000129c",
                "param_1": "param"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_data_000012b4",
            "code": "\nundefined4 processData_000012b4(int inputOffset,undefined inputData)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(inputOffset + 4,inputData);\n  FUN_000024bc(inputOffset);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "inputOffset",
                "param_2": "inputData",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_for_error_000012e2",
            "code": "\nint checkForError_000012e2(int input,undefined4 arg1,undefined4 arg2)\n\n{\n  int errorCode;\n  \n  while( true ) {\n    errorCode = FUN_0000231c(input + 4,arg1,arg2);\n    if (errorCode != 0) break;\n    FUN_0000129c(input);\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_for_error_000012e2",
                "param_1": "input",
                "param_2": "arg1",
                "param_3": "arg2",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_execute_00001348",
            "code": "\nvoid checkAndExecute_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_execute_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_value_00001392",
            "code": "\nvoid initializeValue_00001392(undefined4 inputParameter,undefined undefinedValue)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001360(inputParameter,undefinedValue);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_value_00001392",
                "param_1": "inputParameter",
                "param_2": "undefinedValue",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_entry_000013b8",
            "code": "\nundefined4 updateDataEntry_000013b8(int index,undefined4 value,undefined4 dataEntry,undefined4 dataValue)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = dataEntry;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = dataValue;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_entry_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "dataEntry",
                "param_4": "dataValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_data_000014c4",
            "code": "\nvoid updateData_000014c4(int index,uint divider)\n\n{\n  byte *dataPtr;\n  uint value1;\n  uint value2;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (divider << 4);\n  *dataPtr = (byte)(value2 >> 8) & 0x1f;\n  dataPtr[1] = (byte)value2;\n  dataPtr[10] = (byte)((value1 << 2) / divider + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "divider",
                "pbVar1": "dataPtr",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int sourceAddress,uint numElements)\n\n{\n  int arrayAddress;\n  uint currentElement;\n  \n  arrayAddress = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (currentElement = 0; currentElement < numElements; currentElement = currentElement + 1) {\n    do {\n    } while (-1 < *(char *)(arrayAddress + 4));\n    *(undefined *)(arrayAddress + 7) = *(undefined *)(currentElement + sourceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "sourceAddress",
                "param_3": "numElements",
                "iVar1": "arrayAddress",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_callback_00001628",
            "code": "\nvoid executeCallback_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_callback_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_system_00001688",
            "code": "\nvoid initializeSystem_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_system_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_final_value_00001696",
            "code": "\nint calculateFinalValue_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_final_value_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_pointer_value_to_one_000016c8",
            "code": "\nvoid setPointerValueToOne_000016c8(undefined4 ptr,undefined data)\n\n{\n  undefined4 *ptrToValue;\n  \n  ptrToValue = (undefined4 *)FUN_00001696(ptr,data);\n  *ptrToValue = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_pointer_value_to_one_000016c8",
                "param_1": "ptr",
                "param_2": "data",
                "puVar1": "ptrToValue"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "initialize_pointer_000016ec",
            "code": "\nvoid initializePointer_000016ec(undefined4 inputValue,undefined inputParam)\n\n{\n  undefined *pointerToResult;\n  \n  pointerToResult = (undefined *)FUN_00001696(inputValue,inputParam);\n  *pointerToResult = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "initialize_pointer_000016ec",
                "param_1": "inputValue",
                "param_2": "inputParam",
                "puVar1": "pointerToResult"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_data_in_memory_00001710",
            "code": "\nvoid clearDataInMemory_00001710(undefined4 memoryAddress,undefined valueToClear)\n\n{\n  undefined *ptrToMemory;\n  \n  ptrToMemory = (undefined *)FUN_00001696(memoryAddress,valueToClear);\n  *ptrToMemory = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_data_in_memory_00001710",
                "param_1": "memoryAddress",
                "param_2": "valueToClear",
                "puVar1": "ptrToMemory"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte input)\n\n{\n  DAT_40064003 = input | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_and_call_function_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlagsAndCallFunction_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_and_call_function_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_data_000018bc",
            "code": "\nvoid initializeData_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_data_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_data_0000191c",
            "code": "\nvoid initialize_data_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_device_000019c0",
            "code": "\nvoid initialize_device_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initializeDevice_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "execute_operations_00001b10",
            "code": "\nundefined4 executeOperations_00001b10(byte inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (inputValue < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)inputValue + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (inputValue != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "execute_operations_00001b10",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_invoke_callback_00001cf0",
            "code": "\nvoid checkAndInvokeCallback_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_invoke_callback_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint base_value,int multiplier)\n\n{\n  return multiplier * 4 + (base_value & 0xf0000000 | (base_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "base_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_variable_to1_00001d3a",
            "code": "\nvoid setVariableTo1_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001d08(input1,input2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_variable_to1_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort input)\n\n{\n  return input & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "map_to_memory_address_00001d80",
            "code": "\nuint mapToMemoryAddress_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "map_to_memory_address_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_three_least_significant_bits_00001da2",
            "code": "\nushort extractThreeLeastSignificantBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_three_least_significant_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_least_significant_bits_00001dc0",
            "code": "\nushort extractLeastSignificantBits_00001dc0(ushort originalValue)\n\n{\n  return originalValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_least_significant_bits_00001dc0",
                "param_1": "originalValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "process_data_00001ddc",
            "code": "\nvoid processData_00001ddc(undefined2 data)\n\n{\n  char result;\n  \n  result = FUN_00001da2(data);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "process_data_00001ddc",
                "param_1": "data",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int input_offset,uint bit_offset)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)bit_offset >> 3) + input_offset * 4) * 4) >> ((bit_offset & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "input_offset",
                "param_2": "bit_offset"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bit_value_00001e44",
            "code": "\nvoid updateBitValue_00001e44(int index,uint position,int value)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)position >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) & ~(0xf << ((position & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) | value << ((position & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bit_value_00001e44",
                "param_1": "index",
                "param_2": "position",
                "param_3": "value",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "execute_function_00001ec4",
            "code": "\nvoid executeFunction_00001ec4(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  undefined4 result1;\n  \n  result1 = FUN_00001e0c(inputParam1,inputParam2);\n  FUN_00001e44(inputParam1,inputParam2,result1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "execute_function_00001ec4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "result1"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "initialize_bit_flags_00001eea",
            "code": "\nundefined4 initializeBitFlags_00001eea(undefined2 param1,byte param2)\n\n{\n  uint flagIndex;\n  int ptrData;\n  int index;\n  \n  FUN_00001f80(param1,0);\n  if ((char)param2 < '\\0') {\n    flagIndex = FUN_00001dc0(param1);\n    ptrData = FUN_00001d80(param1);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) | 1 << (flagIndex & 0xff);\n  }\n  else {\n    flagIndex = FUN_00001dc0(param1);\n    ptrData = FUN_00001d80(param1);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) & ~(1 << (flagIndex & 0xff));\n  }\n  ptrData = FUN_00001d5e(param1);\n  index = FUN_00001dc0(param1);\n  *(uint *)(ptrData + index * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "initialize_bit_flags_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "flagIndex",
                "iVar2": "ptrData",
                "iVar3": "index"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_00001f80",
            "code": "\nvoid updateValue_00001f80(undefined2 input,undefined4 newValue)\n\n{\n  int result1;\n  int result2;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint value;\n  \n  FUN_00001ddc(input);\n  result1 = FUN_00001d5e(input);\n  result2 = FUN_00001dc0(input);\n  value = *(uint *)(result1 + result2 * 4);\n  result1 = FUN_00001d5e(input);\n  result2 = FUN_00001dc0(input);\n  *(undefined4 *)(result1 + result2 * 4) = newValue;\n  if ((value & 0xf0000) != 0) {\n    temp1 = FUN_00001da2(input);\n    temp2 = FUN_00001dc0(input);\n    FUN_00001ec4(temp1,temp2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_00001f80",
                "param_1": "input",
                "param_2": "newValue",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_based_on_input_00001ff6",
            "code": "\nvoid setBitBasedOnInput_00001ff6(undefined2 input)\n\n{\n  uint index;\n  int result;\n  \n  index = FUN_00001dc0(input);\n  result = FUN_00001d80(input);\n  *(int *)(result + 4) = 1 << (index & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_based_on_input_00001ff6",
                "param_1": "input",
                "uVar1": "index",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "update_bits_and_invoke_00002028",
            "code": "\nvoid updateBitsAndInvoke_00002028(int baseAddress,undefined4 param)\n\n{\n  int index;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(baseAddress + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(baseAddress + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(baseAddress + 0xa0) = 1 << (bitIndex & 0xff);\n      index = FUN_00001e0c(param,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + index * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "update_bits_and_invoke_00002028",
                "param_1": "baseAddress",
                "param_2": "param",
                "iVar1": "index",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initializeMemory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_registers_000020f4",
            "code": "\nvoid initializeRegisters_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_registers_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_memory_usage_0000211c",
            "code": "\nvoid printMemoryUsage_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 title;\n  int offset;\n  int pointerFlag;\n  dword relOffset;\n  uint relIndex;\n  undefined4 *symbol;\n  undefined4 currentRelOffset;\n  undefined4 currentBaseAddr;\n  int currentStackSize;\n  short symbolIndex;\n  int totalStackSize;\n  int usedStackSize;\n  \n  title = 0x515f;\n  usedStackSize = 0;\n  totalStackSize = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  currentStackSize = FUN_000008b8();\n  currentBaseAddr = FUN_0000091c();\n  currentRelOffset = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               currentStackSize,currentBaseAddr,currentRelOffset);\n  usedStackSize = usedStackSize + 0x200;\n  if (0 < currentStackSize) {\n    totalStackSize = currentStackSize + totalStackSize;\n  }\n  for (symbolIndex = 1; symbolIndex < 0x21; symbolIndex = symbolIndex + 1) {\n    symbol = *(undefined4 **)(&DAT_1fff0358 + symbolIndex * 4);\n    if (symbol != (undefined4 *)0x0) {\n      relIndex = (uint)*(byte *)(symbol + 1);\n      relOffset = (relOffsetArray)[relIndex];\n      pointerFlag = (int)&title + (uint)(8 < relIndex);\n      offset = symbol[0xb];\n      usedStackSize = offset + usedStackSize;\n      iVar1 = FUN_000010a0(symbol[9]);\n      offset = offset - iVar1;\n      totalStackSize = offset + totalStackSize;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)symbol + 6),symbol[10],relOffset,pointerFlag,\n                   *(undefined *)((int)symbol + 5),symbol[0xb],offset,symbol[9],*symbol);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,usedStackSize,totalStackSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_memory_usage_0000211c",
                "local_40": "title",
                "local_3c": "offset",
                "local_38": "pointerFlag",
                "local_34": "relOffset",
                "local_30": "relIndex",
                "local_2c": "symbol",
                "local_28": "currentRelOffset",
                "local_24": "currentBaseAddr",
                "local_20": "currentStackSize",
                "local_1a": "symbolIndex",
                "local_18": "totalStackSize",
                "local_14": "usedStackSize",
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "relOffsetArray"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_difference_equals_offset_00002294",
            "code": "\nundefined checkIfDifferenceEqualsOffset_00002294(int functionParam)\n\n{\n  undefined result;\n  int offset;\n  bool isEqual;\n  \n  offset = *(int *)(functionParam + 4);\n  isEqual = *(int *)(functionParam + 0xc) - *(int *)(functionParam + 8) == offset;\n  if (isEqual) {\n    offset = 1;\n  }\n  result = (undefined)offset;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_difference_equals_offset_00002294",
                "param_1": "functionParam",
                "iVar2": "offset",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_element_000022be",
            "code": "\nvoid updateArrayElement_000022be(int *array,undefined newValue)\n\n{\n  uint currentIndex;\n  \n  currentIndex = array[3];\n  array[3] = currentIndex + 1;\n  *(undefined *)((currentIndex & array[1] - 1U) + *array) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_element_000022be",
                "param_1": "array",
                "param_2": "newValue",
                "uVar1": "currentIndex"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_access_memory_000022f0",
            "code": "\nundefined incrementAndAccessMemory_000022f0(int *array)\n\n{\n  uint currentElementValue;\n  \n  currentElementValue = array[2];\n  array[2] = currentElementValue + 1;\n  return *(undefined *)((currentElementValue & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_access_memory_000022f0",
                "param_1": "array",
                "uVar1": "currentElementValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "extract_bytes_0000231c",
            "code": "\nint extractBytes_0000231c(undefined4 param_1,undefined *outputBuffer,int numberOfBytes)\n\n{\n  undefined extractedByte;\n  int result;\n  undefined *currentOutput;\n  int remainingBytes;\n  \n  currentOutput = outputBuffer;\n  remainingBytes = numberOfBytes;\n  while ((remainingBytes != 0 && (result = FUN_00002270(param_1), result == 0))) {\n    extractedByte = FUN_000022f0(param_1);\n    *currentOutput = extractedByte;\n    remainingBytes = remainingBytes + -1;\n    currentOutput = currentOutput + 1;\n  }\n  return numberOfBytes - remainingBytes;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "extract_bytes_0000231c",
                "param_2": "outputBuffer",
                "param_3": "numberOfBytes",
                "uVar1": "extractedByte",
                "iVar2": "result",
                "local_20": "currentOutput",
                "local_14": "remainingBytes"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 check_status_00002364(undefined4 input_1,undefined input_2)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = FUN_00002294(input_1);\n  if (status == 0) {\n    FUN_000022be(input_1,input_2);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_riot_000023a4",
            "code": "\nundefined4 initialize_RIOT_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  result = FUN_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_riot_000023a4",
                "auStack_88": "buffer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid triggerSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_flag_000023d0",
            "code": "\nundefined4 initializeFlag_000023d0(undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,inputParameter,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_flag_000023d0",
                "param_1": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "update_pointer_0000240c",
            "code": "\nundefined4 * updatePointer_0000240c(undefined4 *sourcePtr)\n\n{\n  undefined4 *targetPtr;\n  \n  targetPtr = (undefined4 *)*sourcePtr;\n  if (targetPtr != (undefined4 *)0x0) {\n    *sourcePtr = *targetPtr;\n  }\n  return targetPtr;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "sourcePtr",
                "puVar1": "targetPtr"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_data_and_return_value_00002434",
            "code": "\nundefined4 updateDataAndReturnValue_00002434(int *dataPointer,int flag)\n\n{\n  int savedValue;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  savedValue = DAT_1fff03dc;\n  if (*dataPointer == 0) {\n    *dataPointer = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*dataPointer == -1) {\n      *dataPointer = savedValue + 8;\n      *(undefined4 *)*dataPointer = 0;\n    }\n    else {\n      FUN_00001034(dataPointer,savedValue);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_data_and_return_value_00002434",
                "param_1": "dataPointer",
                "param_2": "flag",
                "uVar2": "result",
                "iVar1": "savedValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined temp1;\n  undefined4 temp2;\n  int temp3;\n  \n  temp2 = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(temp2);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(temp2);\n  }\n  else {\n    temp3 = FUN_0000240c(param);\n    FUN_00000698(temp3 + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    temp1 = *(undefined *)(temp3 + -3);\n    FUN_00000d0c(temp2);\n    FUN_00000738(temp1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte index,uint value)\n\n{\n  if ((char)index < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)index + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initializeSystem_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "process_data_00002600",
            "code": "\nundefined4 processData_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "process_data_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_function_00002624",
            "code": "\nundefined4 initializeFunction_00002624(undefined4 inputParam)\n\n{\n  undefined4 initializedValue;\n  undefined4 temporaryValue;\n  \n  initializedValue = FUN_0000281c();\n  temporaryValue = 0;\n  FUN_0000443c(&initializedValue,inputParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_function_00002624",
                "param_1": "inputParam",
                "local_10": "initializedValue",
                "uStack_c": "temporaryValue"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 inputValue,undefined4 dataPointer,undefined4 otherData)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputValue);\n  DAT_1fff0d9c = dataPointer;\n  FUN_00002894(result,0x26f1,otherData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "inputValue",
                "param_2": "dataPointer",
                "param_3": "otherData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_function_00002690",
            "code": "\nundefined4 initializeFunction_00002690(undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  undefined4 stackVariable;\n  \n  returnValue = FUN_000028f0();\n  stackVariable = 0;\n  FUN_0000443c(&returnValue,inputParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_function_00002690",
                "param_1": "inputParameter",
                "local_10": "returnValue",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_function_000026c0",
            "code": "\nvoid initializeFunction_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_function_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_app_000026d8",
            "code": "\nvoid initializeApp_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_app_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 data)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte inputIndex,uint data)\n\n{\n  if ((char)inputIndex < '\\0') {\n    (&DAT_e000ed14)[inputIndex & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputIndex + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "inputIndex",
                "param_2": "data",
                "(char)param_1": "(char)inputIndex"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_execute_function_00002798",
            "code": "\nvoid checkAndExecuteFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_execute_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_system_status_0000285c",
            "code": "\n\n\nvoid setSystemStatus_0000285c(undefined4 status)\n\n{\n  _DAT_4003d000 = status;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_system_status_0000285c",
                "param_1": "status"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 data1,undefined4 data2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data1;\n  DAT_1fff0da4 = data2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint incrementValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "initialize_data_00002910",
            "code": "\n\n\nvoid initializeData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "initialize_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_in_register_0000294c",
            "code": "\n\n\nvoid setFlagInRegister_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_in_register_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_bit_in_register_00002970",
            "code": "\n\n\nvoid clearBitInRegister_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_bit_in_register_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_binary_instructions_00002994",
            "code": "\n\n\nvoid executeBinaryInstructions_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_binary_instructions_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_00002a00",
            "code": "\nvoid initialize_00002a00(undefined4 data)\n\n{\n  FUN_00004cb4(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_00002a00",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_reboot_option_00002a18",
            "code": "\nint find_reboot_option_00002a18(int *options,undefined4 param)\n\n{\n  int iVar1;\n  int *current_option;\n  undefined **reboot_message;\n  uint index;\n  int *current_command;\n  \n  current_option = options;\n  reboot_message = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_command = (&current_option)[index];\n    if (current_command != (int *)0x0) {\n      for (; *current_command != 0; current_command = current_command + 3) {\n        iVar1 = FUN_00004e52(*current_command,param);\n        if (iVar1 == 0) {\n          return current_command[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_reboot_option_00002a18",
                "param_1": "options",
                "param_2": "param",
                "local_18": "current_option",
                "local_14": "reboot_message",
                "local_10": "index",
                "local_c": "current_command"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_description_00002a88",
            "code": "\nvoid printCommandDescription_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **rebootString;\n  uint counter;\n  int *currentItem;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  rebootString = &PTR_s_reboot_00007300;\n  for (counter = 0; counter < 2; counter = counter + 1) {\n    currentItem = (&currentCommand)[counter];\n    if (currentItem != (int *)0x0) {\n      for (; *currentItem != 0; currentItem = currentItem + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentItem,currentItem[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_description_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "rebootString",
                "local_10": "counter",
                "local_c": "currentItem"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "extract_strings_and_execute_00002b10",
            "code": "\nvoid extractStringsAndExecute_00002b10(undefined4 param1,byte *param2)\n\n{\n  int indexVar1;\n  byte *ptrVar2;\n  byte *ptrArray [3];\n  code *functionPtr;\n  char **stringArray;\n  uint numStrings;\n  byte char2;\n  char *charPtr1;\n  char *charPtr2;\n  char **stringArrayPtr;\n  uint indexVar2;\n  int charCount;\n  uint stringCount;\n  byte *currentChar;\n  \n  stringCount = 0;\n  charCount = 0;\n  currentChar = param2;\n  while( true ) {\n    ptrArray[0] = param2;\n    ptrArray[1] = (byte *)param1;\n    if (0x20 < *currentChar) {\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        char2 = *currentChar;\n        do {\n          ptrVar2 = currentChar + 1;\n          if (*ptrVar2 == 0) {\n            currentChar = ptrVar2;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*ptrVar2 == 0x5c) {\n            charCount = charCount + 1;\n            currentChar = currentChar + 2;\n            ptrVar2 = currentChar;\n            if (*currentChar == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = ptrVar2;\n        } while (char2 != *currentChar);\n        if (0x20 < currentChar[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentChar == 0x5c) {\n            charCount = charCount + 1;\n            currentChar = currentChar + 1;\n            if (*currentChar == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = currentChar + 1;\n          if (*currentChar == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentChar);\n      }\n      stringCount = stringCount + 1;\n    }\n    if (*currentChar == 0) break;\n    *currentChar = 0;\n    currentChar = currentChar + 1;\n  }\n  if (stringCount != 0) {\n    numStrings = stringCount;\n    stringArray = (char **)((int)ptrArray - ((stringCount + 1) * 4 + 7 & 0xfffffff8));\n    stringArray[stringCount] = (char *)0x0;\n    currentChar = param2;\n    for (indexVar2 = 0; stringArrayPtr = stringArray, indexVar2 < stringCount; indexVar2 = indexVar2 + 1) {\n      for (; *currentChar == 0; currentChar = currentChar + 1) {\n      }\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        currentChar = currentChar + 1;\n      }\n      stringArray[indexVar2] = (char *)currentChar;\n      for (; *currentChar != 0; currentChar = currentChar + 1) {\n      }\n    }\n    for (; (charCount != 0 && (*stringArrayPtr != (char *)0x0)); stringArrayPtr = stringArrayPtr + 1) {\n      for (charPtr2 = *stringArrayPtr; *charPtr2 != '\\0'; charPtr2 = charPtr2 + 1) {\n        if (*charPtr2 == '\\') {\n          for (charPtr1 = charPtr2; *charPtr1 != '\\0'; charPtr1 = charPtr1 + 1) {\n            *charPtr1 = charPtr1[1];\n          }\n          charCount = charCount + -1;\n          if (charCount == 0) break;\n        }\n      }\n    }\n    functionPtr = (code *)FUN_00002a18(param1,*stringArray);\n    if (functionPtr == (code *)0x0) {\n      indexVar1 = FUN_00004e52(&DAT_00007214,*stringArray);\n      if (indexVar1 == 0) {\n        FUN_00002a88(ptrArray[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*stringArray);\n      }\n    }\n    else {\n      (*functionPtr)(stringCount,stringArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "extract_strings_and_execute_00002b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "indexVar1",
                "pbVar2": "ptrVar2",
                "local_48": "ptrArray",
                "local_3c": "functionPtr",
                "local_38": "stringArray",
                "local_34": "numStrings",
                "local_2d": "char2",
                "local_2c": "charPtr1",
                "local_28": "charPtr2",
                "local_24": "stringArrayPtr",
                "local_20": "indexVar2",
                "local_1c": "charCount",
                "local_18": "stringCount",
                "local_14": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int bufferSize)\n\n{\n  int inputValue;\n  byte byteValue;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    inputValue = FUN_00004418();\n    if (inputValue < 0) break;\n    if ((inputValue == 0xd) || (inputValue == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstChar = currentChar == inputBuffer;\n      if (isFirstChar) {\n        inputBuffer = (undefined *)0x1;\n      }\n      byteValue = (byte)inputBuffer;\n      if (!isFirstChar) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((inputValue == 8) || (inputValue == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputValue;\n      FUN_00002a00(inputValue);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "bufferSize",
                "iVar1": "inputValue",
                "bVar2": "byteValue",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_components_00002e48",
            "code": "\nvoid initializeComponents_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(arrayPointer[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_components_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "arrayPointer",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "check_and_process_input_00002e6c",
            "code": "\nvoid checkAndProcessInput_00002e6c(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(input2,input3);\n    if (result == 0) {\n      FUN_00002b10(input1,input2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "check_and_process_input_00002e6c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_program_00002e9c",
            "code": "\nundefined4 initializeProgram_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_program_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_program_00002eb4",
            "code": "\nundefined4 initializeProgram_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_program_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceType;\n  undefined4 deviceName;\n  undefined buffer [8];\n  uint bytesRead;\n  \n  bytesRead = FUN_00003d64(deviceInfo,buffer);\n  if ((int)bytesRead < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceInfo + 8);\n    deviceType = FUN_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,deviceType);\n    FUN_00003694(buffer,bytesRead & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceType",
                "uVar2": "deviceName",
                "auStack_1c": "buffer",
                "local_14": "bytesRead"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_linked_list_00002f30",
            "code": "\nvoid processLinkedList_00002f30(void)\n\n{\n  int counter;\n  undefined4 *currentNode;\n  \n  counter = 0;\n  for (currentNode = DAT_1fff0db0; currentNode != (undefined4 *)0x0; currentNode = (undefined4 *)*currentNode) {\n    FUN_00002ecc(counter,currentNode);\n    FUN_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_linked_list_00002f30",
                "local_10": "counter",
                "local_c": "currentNode"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *devicePtr;\n  \n  devicePtr = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; devicePtr != (undefined4 *)0x0; devicePtr = (undefined4 *)*devicePtr) {\n    deviceClass = FUN_000039e8(*(undefined *)(devicePtr[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,devicePtr[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "devicePtr",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "validate_and_process_input_00002fe0",
            "code": "\nvoid validateAndProcessInput_00002fe0(int inputCount,undefined4 *inputArray)\n\n{\n  int result;\n  undefined4 deviceID;\n  \n  if (inputCount < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*inputArray,inputArray[1]);\n  }\n  else {\n    result = FUN_00004e52(inputArray[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(inputArray[2]);\n      result = FUN_00003d24(deviceID);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "validate_and_process_input_00002fe0",
                "param_1": "inputCount",
                "param_2": "inputArray",
                "iVar1": "result",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 deviceValues [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = FUN_00004042(argv[2]);\n    deviceIndex = FUN_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(deviceValues,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (i = 0; i < (int)numValues; i = i + 1) {\n        value = FUN_00004042(argv[i + 3]);\n        deviceValues[i] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      FUN_00003694(deviceValues,numValues & 0xff);\n      numValues = FUN_00003d94(deviceIndex,deviceValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "deviceValues",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "i"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_input_0000316c",
            "code": "\nundefined4 handleInput_0000316c(int numArgs,undefined4 *args)\n\n{\n  int result;\n  \n  if (numArgs < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(args[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(numArgs,args);\n    }\n    else {\n      result = FUN_00004e52(args[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(numArgs,args);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_input_0000316c",
                "param_1": "numArgs",
                "param_2": "args",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  isLeapYear = (byte)adjustedMonth;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayTable + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayTable"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_information_0000328c",
            "code": "\nundefined4 extractInformation_0000328c(undefined4 *inputArray,int *outputArray)\n\n{\n  int result;\n  int currentIndex;\n  short value;\n  \n  value = FUN_00004f84(*inputArray,&currentIndex,10);\n  outputArray[5] = value + -0x76c;\n  value = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[4] = value + -1;\n  value = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[3] = (int)value;\n  value = FUN_00004f84(inputArray[1],&currentIndex,10);\n  outputArray[2] = (int)value;\n  value = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[1] = (int)value;\n  value = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  *outputArray = (int)value;\n  result = FUN_000031fc(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = result;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_information_0000328c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "iVar1": "result",
                "local_10": "currentIndex",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_and_get_error_000033c0",
            "code": "\nbool checkAlarmAndGetError_000033c0(void)\n\n{\n  int error;\n  undefined rtcData [36];\n  \n  error = FUN_00002690(rtcData);\n  if (error != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(rtcData);\n  }\n  return error != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_and_get_error_000033c0",
                "auStack_2c": "rtcData",
                "iVar1": "error"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 success;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(input,buffer);\n  if (result == 0) {\n    result = FUN_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "success",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "check_rtc_time_validity_00003444",
            "code": "\nbool checkRtcTimeValidity_00003444(void)\n\n{\n  int result;\n  undefined buffer [36];\n  \n  result = FUN_00002624(buffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "check_rtc_time_validity_00003444",
                "auStack_2c": "buffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_rtc_time_00003478",
            "code": "\nundefined4 setRtcTime_00003478(undefined4 rtcTime)\n\n{\n  int result;\n  undefined4 isError;\n  undefined timeData [36];\n  \n  result = FUN_0000328c(rtcTime,timeData);\n  if (result == 0) {\n    result = FUN_00002600(timeData);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      isError = 1;\n    }\n    else {\n      isError = 0;\n    }\n  }\n  else {\n    isError = 1;\n  }\n  return isError;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "rtcTime",
                "iVar1": "result",
                "uVar2": "isError",
                "auStack_2c": "timeData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "display_usage_info_000034c0",
            "code": "\nundefined4 displayUsageInfo_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "display_usage_info_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int numParams,int command)\n\n{\n  int result;\n  undefined4 returnVal;\n  \n  if (numParams < 2) {\n    FUN_000034c0();\n    returnVal = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(command + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(command + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(command + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(command + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(command + 4),\"setalarm\",8);\n            if ((result == 0) && (numParams == 4)) {\n              FUN_000033f4(command + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(command + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(command + 4),\"settime\",7);\n                if ((result != 0) || (numParams != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(command + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(command + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnVal = 0;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "numParams",
                "param_2": "command",
                "iVar1": "result",
                "uVar2": "returnVal"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_system_00003688",
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjectAddress,byte dataObjectSize)\n\n{\n  undefined4 status;\n  char flag;\n  uint bitMask;\n  bool bitSet;\n  undefined auxiliaryStack [8];\n  int auxiliaryVar1;\n  char auxiliaryVar2;\n  byte index;\n  \n  if ((dataObjectAddress == 0) || (3 < dataObjectSize)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < dataObjectSize; index = index + 1) {\n      if (*(byte *)(dataObjectAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectAddress + 6) & 0x8018f;\n        bitSet = bitMask != 0;\n        if (bitSet) {\n          bitMask = 1;\n        }\n        flag = (char)bitMask;\n        if (!bitSet) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        auxiliaryVar2 = '\\0';\n      }\n      else {\nLAB_000036ee:\n        auxiliaryVar2 = FUN_00003918((int)*(char *)(dataObjectAddress + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (dataObjectSize < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (auxiliaryVar2 == '\\0') {\n        if (*(char *)(dataObjectAddress + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObjectAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObjectAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectAddress + 7),4)) &&\n                (*(char *)(dataObjectAddress + 7) < '\\0')) {\n          auxiliaryVar1 = FUN_00003e9e(auxiliaryStack,(int)*(short *)(dataObjectAddress + (uint)index * 2),\n                                  (int)*(char *)(dataObjectAddress + 7));\n          auxiliaryStack[auxiliaryVar1] = 0;\n          FUN_00004c84(&DAT_000077dc,auxiliaryStack);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObjectAddress + (uint)index * 2),\n                       (int)*(char *)(dataObjectAddress + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObjectAddress + (uint)index * 2),auxiliaryVar2);\n      }\n      status = FUN_00003810(*(undefined *)(dataObjectAddress + 6));\n      FUN_00004c84(&DAT_000077e8,status);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjectAddress",
                "param_2": "dataObjectSize",
                "uVar1": "status",
                "cVar2": "flag",
                "uVar3": "bitMask",
                "bVar4": "bitSet",
                "auStack_18": "auxiliaryStack",
                "local_10": "auxiliaryVar1",
                "local_a": "auxiliaryVar2",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_data_pointer_00003810",
            "code": "\nundefined * get_data_pointer_00003810(undefined input_value)\n\n{\n  undefined *data_pointer;\n  \n  switch(input_value) {\n  case 2:\n    data_pointer = &DAT_000077ec;\n    break;\n  case 3:\n    data_pointer = &DAT_000077f0;\n    break;\n  case 4:\n    data_pointer = &DAT_000077f4;\n    break;\n  case 5:\n    data_pointer = &DAT_000077f8;\n    break;\n  case 6:\n    data_pointer = &DAT_000077fc;\n    break;\n  case 7:\n    data_pointer = (undefined *)0x7800;\n    break;\n  case 8:\n    data_pointer = &DAT_00007804;\n    break;\n  case 9:\n    data_pointer = &DAT_00007808;\n    break;\n  case 10:\n    data_pointer = &DAT_0000780c;\n    break;\n  case 0xb:\n    data_pointer = &DAT_00007810;\n    break;\n  case 0xc:\n    data_pointer = &DAT_00007814;\n    break;\n  case 0xd:\n    data_pointer = &DAT_00007818;\n    break;\n  case 0xe:\n    data_pointer = &DAT_0000781c;\n    break;\n  case 0xf:\n    data_pointer = &DAT_00007820;\n    break;\n  case 0x10:\n    data_pointer = &DAT_00007824;\n    break;\n  case 0x11:\n    data_pointer = &DAT_0000782c;\n    break;\n  default:\n    data_pointer = &DAT_00007834;\n    break;\n  case 0x13:\n    data_pointer = &DAT_00007830;\n    break;\n  case 0x15:\n    data_pointer = &DAT_00007828;\n  }\n  return data_pointer;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_data_pointer_00003810",
                "param_1": "input_value",
                "puVar1": "data_pointer"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_to_value_00003918",
            "code": "\nundefined4 mapParameterToValue_00003918(undefined input)\n\n{\n  undefined4 output;\n  \n  switch(input) {\n  case 2:\n    output = 0x68;\n    break;\n  case 3:\n    output = 0x6b;\n    break;\n  case 6:\n    output = 0x4d;\n    break;\n  case 9:\n    output = 0x47;\n    break;\n  case 0xc:\n    output = 0x54;\n    break;\n  case 0xf:\n    output = 0x50;\n    break;\n  case 0xf1:\n    output = 0x66;\n    break;\n  default:\n    output = 0;\n    break;\n  case 0xf4:\n    output = 0x70;\n    break;\n  case 0xf7:\n    output = 0x6e;\n    break;\n  case 0xfa:\n    output = 0x75;\n    break;\n  case 0xfd:\n    output = 0x6d;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_to_value_00003918",
                "param_1": "input",
                "uVar1": "output"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_string_000039e8",
            "code": "\nchar * getClassString_000039e8(char classCode)\n\n{\n  char *classString;\n  \n  switch(classCode) {\n  case '\\0':\n    classString = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    classString = \"ACT_ANY\";\n    break;\n  case 'B':\n    classString = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    classString = \"ACT_SERVO\";\n    break;\n  case 'D':\n    classString = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    classString = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    classString = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    classString = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    classString = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    classString = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    classString = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    classString = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    classString = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    classString = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    classString = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    classString = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    classString = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    classString = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    classString = \"SENSE_UV\";\n    break;\n  case -0x74:\n    classString = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    classString = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    classString = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    classString = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    classString = \"CLASS_UNKNOWN\";\n  }\n  return classString;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_string_000039e8",
                "param_1": "classCode",
                "pcVar1": "classString"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_node;\n  \n  count = 0;\n  for (current_node = DAT_1fff0db0; (count < n && (current_node != (undefined4 *)0x0));\n      current_node = (undefined4 *)*current_node) {\n    count = count + 1;\n  }\n  return current_node;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_node"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int targetFunction,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (targetFunction == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(targetFunction + 0xc))(*(undefined4 *)(targetFunction + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "targetFunction",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_or_return_error_00003d94",
            "code": "\nundefined4 executeFunctionOrReturnError_00003d94(int functionPointer,undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),inputParameter);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_or_return_error_00003d94",
                "param_1": "functionPointer",
                "param_2": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint number)\n\n{\n  uint remainder;\n  char *outputPtr;\n  uint power;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (power = 10; power <= number; power = power * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    outputPtr = (char *)(digitCount + inputOffset);\n    remainder = number;\n    do {\n      outputPtr = outputPtr + -1;\n      *outputPtr = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "outputPtr",
                "local_10": "power",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_result_00003e58",
            "code": "\nint calculate_result_00003e58(undefined *input_string,int input_number)\n\n{\n  int result;\n  int abs_input_number;\n  undefined *adjusted_input_string;\n  \n  abs_input_number = input_number;\n  adjusted_input_string = input_string;\n  if (-(input_number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      adjusted_input_string = input_string + 1;\n      *input_string = 0x2d;\n    }\n    abs_input_number = -input_number;\n  }\n  result = FUN_00003dc4(adjusted_input_string,abs_input_number);\n  return -(input_number >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_result_00003e58",
                "param_1": "input_string",
                "param_2": "input_number",
                "iVar1": "result",
                "local_18": "abs_input_number",
                "local_14": "adjusted_input_string"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 inputData,short dataSize,undefined4 options)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(inputData,(int)dataSize,options);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "inputData",
                "param_2": "dataSize",
                "param_3": "options",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_decimal_to_base_00003ec4",
            "code": "\nint convertDecimalToBase_00003ec4(undefined *outputBuffer,uint inputNumber,int base)\n\n{\n  int conversionResult;\n  undefined4 conversionLength;\n  uint quotient;\n  int remainder;\n  int totalChars;\n  \n  if (base + 7 < 0 != SCARRY4(base,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalChars = 0;\n  if (base == 0) {\n    totalChars = FUN_00003e58(outputBuffer,inputNumber);\n  }\n  else if (base < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + base * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + base * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalChars = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      conversionResult = FUN_00003e58(0,quotient);\n      totalChars = conversionResult + 1 + totalChars;\n    }\n    else {\n      conversionResult = FUN_00003e58(outputBuffer + totalChars,quotient);\n      conversionResult = totalChars + conversionResult;\n      totalChars = conversionResult + 1;\n      outputBuffer[conversionResult] = 0x2e;\n      conversionLength = FUN_00003e58(outputBuffer + totalChars,remainder);\n      FUN_00003ff4(outputBuffer + totalChars,conversionLength,-base,0x30);\n    }\n    totalChars = -base + totalChars;\n  }\n  else {\n    totalChars = FUN_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      FUN_00004622(outputBuffer + totalChars,0x30,base);\n    }\n    totalChars = base + totalChars;\n  }\n  return totalChars;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_decimal_to_base_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "base",
                "iVar1": "conversionResult",
                "uVar2": "conversionLength",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalChars"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_new_value_00003ff4",
            "code": "\nuint calculateNewValue_00003ff4(int inputValue,uint lowerLimit,uint upperLimit,undefined undefinedParam)\n\n{\n  uint newValue;\n  \n  newValue = lowerLimit;\n  if ((lowerLimit < upperLimit) && (newValue = upperLimit, inputValue != 0)) {\n    FUN_000045ee((upperLimit - lowerLimit) + inputValue,inputValue,lowerLimit);\n    FUN_00004622(inputValue,undefinedParam,upperLimit - lowerLimit);\n  }\n  return newValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_new_value_00003ff4",
                "param_1": "inputValue",
                "param_2": "lowerLimit",
                "param_3": "upperLimit",
                "param_4": "undefinedParam",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_counter_00004042",
            "code": "\nvoid initializeCounter_00004042(undefined4 counter)\n\n{\n  FUN_00004f84(counter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_counter_00004042",
                "param_1": "counter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *data,int *params)\n\n{\n  int offset;\n  int *ptrVar;\n  uint ushortVal;\n  ushort flag;\n  int count;\n  code *functionPtr;\n  int tempVar;\n  uint value;\n  bool isZero;\n  \n  flag = *(ushort *)(params + 3);\n  ushortVal = (uint)flag;\n  if ((int)(ushortVal << 0x1c) < 0) {\n    offset = params[4];\n    if (offset != 0) {\n      count = ushortVal << 0x1e;\n      isZero = count == 0;\n      tempVar = *params;\n      if (isZero) {\n        count = params[5];\n      }\n      *params = offset;\n      if (!isZero) {\n        count = 0;\n      }\n      params[2] = count;\n      for (tempVar = tempVar - offset; 0 < tempVar; tempVar = tempVar - count) {\n        count = (*(code *)params[10])(data,params[8],offset,tempVar);\n        if (count < 1) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return 0xffffffff;\n        }\n        offset = offset + count;\n      }\n    }\n  }\n  else {\n    if ((params[1] < 1) && (params[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)params[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    value = *data;\n    *data = 0;\n    if ((flag & 0x1000) == 0) {\n      offset = (*functionPtr)(data,params[8],ushortVal & 0x1000,1);\n      if ((offset == -1) && (ushortVal = *data, ushortVal != 0)) {\n        if ((ushortVal == 0x1d) || (ushortVal == 0x16)) {\n          *data = value;\n          return 0;\n        }\n        flag = *(ushort *)(params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      offset = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) &&\n       (offset = offset - params[1], params[0xd] != 0)) {\n      offset = offset - params[0x10];\n    }\n    offset = (*(code *)params[0xb])(data,params[8],offset,0);\n    flag = *(ushort *)(params + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(params + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((offset != -1 || (*data == 0)))) {\n      params[0x15] = offset;\n    }\n    ptrVar = (int *)params[0xd];\n    *data = value;\n    if (ptrVar != (int *)0x0) {\n      if (ptrVar != params + 0x11) {\n        FUN_00004b34(data);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "offset",
                "piVar2": "ptrVar",
                "uVar3": "ushortVal",
                "uVar4": "flag",
                "iVar5": "count",
                "pcVar6": "functionPtr",
                "iVar7": "tempVar",
                "uVar8": "value",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPointer,undefined4 *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  if (dataArray[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (dataArray == &DAT_000079b8) {\n      dataArray = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (dataArray == (undefined4 *)&DAT_000079d8) {\n      dataArray = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (dataArray == (undefined4 *)&DAT_00007998) {\n      dataArray = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(dataArray + 3) != 0) {\n      if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataArray + 3) << 0x16)) {\n        FUNC_000045e8(dataArray[0x16]);\n      }\n      returnValue = FUN_0000404c(dataPointer,dataArray);\n      if ((int)(dataArray[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(dataArray + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(dataArray[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_table_000041d0",
            "code": "\nuint processRelocationTable_000041d0(int offset,undefined4 baseAddress,undefined4 size)\n\n{\n  uint result;\n  int index;\n  dword *currentEntry;\n  int entryOffset;\n  uint totalResult;\n  int count;\n  undefined4 *sectionAddress;\n  \n  if (offset == 0) {\n    sectionAddress = &DAT_000079f8;\n    currentEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    totalResult = 0;\n    do {\n      count = currentEntry[1];\n      entryOffset = currentEntry[2];\n      while (count = count + -1, -1 < count) {\n        if ((1 < *(ushort *)(entryOffset + 0xc)) && (index = *(short *)(entryOffset + 0xe) + 1, index != 0)) {\n          result = FUN_00004158(0x1fff0284,entryOffset,size,index,sectionAddress);\n          totalResult = totalResult | result;\n        }\n        entryOffset = entryOffset + 0x68;\n      }\n      currentEntry = (dword *)*currentEntry;\n    } while (currentEntry != (dword *)0x0);\n    return totalResult;\n  }\n  totalResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset);\n  return totalResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_table_000041d0",
                "param_1": "offset",
                "param_2": "baseAddress",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "index",
                "pdVar3": "currentEntry",
                "iVar4": "entryOffset",
                "uVar5": "totalResult",
                "iVar6": "count",
                "puVar7": "sectionAddress"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_struct_000041f4",
            "code": "\nvoid initializeDataStruct_000041f4(undefined4 *dataStruct,undefined2 value1,undefined2 value2)\n\n{\n  *dataStruct = 0;\n  dataStruct[1] = 0;\n  dataStruct[4] = 0;\n  dataStruct[5] = 0;\n  dataStruct[2] = 0;\n  *(undefined2 *)(dataStruct + 3) = value1;\n  dataStruct[0x19] = 0;\n  *(undefined2 *)((int)dataStruct + 0xe) = value2;\n  dataStruct[6] = 0;\n  FUN_00004622(dataStruct + 0x17,0,8);\n  dataStruct[9] = 0x4dc9;\n  dataStruct[10] = 0x4def;\n  dataStruct[0xb] = 0x4e27;\n  dataStruct[8] = dataStruct;\n  dataStruct[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_struct_000041f4",
                "param_1": "dataStruct",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_00004248",
            "code": "\nundefined4 * initializeData_00004248(undefined4 dataPointer,int size)\n\n{\n  undefined4 *dataChunkPointer;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  dataChunkPointer = (undefined4 *)FUN_00004bd0(dataPointer,offset + 0x74);\n  if (dataChunkPointer != (undefined4 *)0x0) {\n    *dataChunkPointer = 0;\n    dataChunkPointer[1] = size;\n    dataChunkPointer[2] = dataChunkPointer + 3;\n    FUN_00004622(dataChunkPointer + 3,0,offset + 0x68);\n  }\n  return dataChunkPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_00004248",
                "param_1": "dataPointer",
                "param_2": "size",
                "puVar1": "dataChunkPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_data_0000428c",
            "code": "\nvoid initializeData_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_data_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataPointer)\n\n{\n  undefined4 returnValue;\n  \n  FUN_0000428c();\n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    returnValue = 0x1fff0284;\n    *(undefined **)(dataPointer + 0x28) = &DAT_0000423d;\n    if (dataPointer == 0x1fff0284) {\n      returnValue = 1;\n    }\n    if (dataPointer == 0x1fff0284) {\n      *(undefined4 *)(dataPointer + 0x18) = returnValue;\n    }\n    returnValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 4) = returnValue;\n    returnValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = returnValue;\n    returnValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = returnValue;\n    FUN_000041f4(*(undefined4 *)(dataPointer + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataPointer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_relocation_table_00004314",
            "code": "\nundefined4 * processRelocationTable_00004314(undefined4 *result)\n\n{\n  dword newValue;\n  int count;\n  undefined4 *currentEntry;\n  dword *currentRelInfo;\n  \n  FUN_00004274();\n  if (relTable[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  currentRelInfo = &relTable[0x19].r_info;\n  do {\n    count = currentRelInfo[1];\n    currentEntry = (undefined4 *)currentRelInfo[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(currentEntry + 3) == 0) {\n        currentEntry[3] = 0xffff0001;\n        currentEntry[0x19] = 0;\n        FUNC_000045e4(currentEntry + 0x16);\n        FUN_00004280();\n        currentEntry[1] = 0;\n        currentEntry[2] = 0;\n        currentEntry[4] = 0;\n        currentEntry[5] = 0;\n        *currentEntry = 0;\n        currentEntry[6] = 0;\n        FUN_00004622(currentEntry + 0x17,0,8);\n        currentEntry[0xd] = 0;\n        currentEntry[0xe] = 0;\n        currentEntry[0x12] = 0;\n        currentEntry[0x13] = 0;\n        return currentEntry;\n      }\n      currentEntry = currentEntry + 0x1a;\n    }\n    if (*currentRelInfo == 0) {\n      newValue = FUN_00004248(result,4);\n      *currentRelInfo = newValue;\n      if (newValue == 0) {\n        FUN_00004280();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    currentRelInfo = (dword *)*currentRelInfo;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_relocation_table_00004314",
                "param_1": "result",
                "dVar1": "newValue",
                "iVar2": "count",
                "puVar3": "currentEntry",
                "pdVar4": "currentRelInfo",
                "Elf32_Rel_ARRAY_1fff0200": "relTable"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int dataOffset,code *callbackFunc)\n\n{\n  uint result;\n  int *ptrToData;\n  int innerVar1;\n  uint finalResult;\n  int innerVar2;\n  \n  ptrToData = (int *)(dataOffset + 0x48);\n  finalResult = 0;\n  do {\n    innerVar2 = ptrToData[1];\n    innerVar1 = ptrToData[2];\n    while (innerVar2 = innerVar2 + -1, -1 < innerVar2) {\n      if ((1 < *(ushort *)(innerVar1 + 0xc)) && (*(short *)(innerVar1 + 0xe) != -1)) {\n        result = (*callbackFunc)(innerVar1);\n        finalResult = finalResult | result;\n      }\n      innerVar1 = innerVar1 + 0x68;\n    }\n    ptrToData = (int *)*ptrToData;\n  } while (ptrToData != (int *)0x0);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "dataOffset",
                "param_2": "callbackFunc",
                "uVar1": "result",
                "piVar2": "ptrToData",
                "iVar3": "innerVar1",
                "uVar4": "finalResult",
                "iVar5": "innerVar2"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "get_item_count_00004418",
            "code": "\nuint get_item_count_00004418(void)\n\n{\n  dword item_offset;\n  uint item_count;\n  byte **item_ptr_ptr;\n  byte *item_ptr;\n  \n  item_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  item_ptr_ptr = *(byte ***)(item_offset + 4);\n  if ((item_offset != 0) && (*(int *)(item_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (item_ptr_ptr == (byte **)&DAT_000079b8) {\n    item_ptr_ptr = *(byte ***)(item_offset + 4);\n  }\n  else if (item_ptr_ptr == (byte **)&DAT_000079d8) {\n    item_ptr_ptr = *(byte ***)(item_offset + 8);\n  }\n  else if (item_ptr_ptr == (byte **)&DAT_00007998) {\n    item_ptr_ptr = *(byte ***)(item_offset + 0xc);\n  }\n  if ((-1 < (int)item_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(item_ptr_ptr + 3) << 0x16))) {\n    FUNC_000045e8(item_ptr_ptr[0x16]);\n  }\n  item_ptr = item_ptr_ptr[1];\n  item_ptr_ptr[1] = item_ptr + -1;\n  if ((int)(item_ptr + -1) < 0) {\n    item_count = FUN_00005e10(item_offset,item_ptr_ptr);\n  }\n  else {\n    item_ptr = *item_ptr_ptr;\n    *item_ptr_ptr = item_ptr + 1;\n    item_count = (uint)*item_ptr;\n  }\n  if ((-1 < (int)item_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(item_ptr_ptr + 3) << 0x16))) {\n    FUNC_000045ec(item_ptr_ptr[0x16]);\n  }\n  return item_count;\n}\n\n",
            "renaming": {
                "FUN_00004418": "get_item_count_00004418",
                "dVar1": "item_offset",
                "uVar2": "item_count",
                "ppbVar3": "item_ptr_ptr",
                "pbVar4": "item_ptr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTimeParams,uint *dateTimeResult)\n\n{\n  int result;\n  uint days;\n  uint tempDays;\n  uint daysSinceEpoch;\n  uint hundredYears;\n  undefined4 param1;\n  undefined4 param2;\n  uint temp4;\n  bool negative;\n  \n  param1 = *dateTimeParams;\n  param2 = dateTimeParams[1];\n  result = FUN_00006974(param1,param2,0x15180,0);\n  tempDays = 0x15180;\n  FUN_00006974(param1,param2,0x15180,0);\n  negative = (int)tempDays < 0;\n  if (negative) {\n    tempDays = tempDays + 0x15180;\n  }\n  if (negative) {\n    days = result + 0xafa6b;\n  }\n  else {\n    days = result + 0xafa6c;\n  }\n  dateTimeResult[2] = tempDays / 0xe10;\n  dateTimeResult[1] = (tempDays % 0xe10) / 0x3c;\n  *dateTimeResult = (tempDays % 0xe10) % 0x3c;\n  dateTimeResult[6] = (days + 3) % 7;\n  tempDays = days;\n  if ((int)days < 0) {\n    tempDays = days - 0x23ab0;\n  }\n  days = (tempDays / 0x23ab1) * -0x23ab1 + days;\n  daysSinceEpoch = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  hundredYears = daysSinceEpoch / 0x16d;\n  days = (hundredYears / 100 - daysSinceEpoch / 0x5b4) + days + hundredYears * -0x16d;\n  temp4 = days * 5 + 2;\n  daysSinceEpoch = temp4 / 0x99;\n  if (temp4 < 0x5fa) {\n    result = 2;\n  }\n  else {\n    result = -10;\n  }\n  temp4 = daysSinceEpoch + result;\n  result = (tempDays / 0x23ab1) * 400 + hundredYears;\n  if (temp4 < 2) {\n    result = result + 1;\n  }\n  if (days < 0x132) {\n    if (((hundredYears & 3) == 0) && (hundredYears != (hundredYears / 100) * 100)) {\n      tempDays = 1;\n    }\n    else {\n      tempDays = (uint)(hundredYears % 400 == 0);\n    }\n    tempDays = days + 0x3b + tempDays;\n  }\n  else {\n    tempDays = days - 0x132;\n  }\n  dateTimeResult[7] = tempDays;\n  dateTimeResult[3] = (days + 1) - (daysSinceEpoch * 0x99 + 2) / 5;\n  dateTimeResult[4] = temp4;\n  dateTimeResult[5] = result - 0x76c;\n  dateTimeResult[8] = 0;\n  return dateTimeResult;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTimeParams",
                "param_2": "dateTimeResult",
                "uVar2": "days",
                "uVar3": "tempDays",
                "uVar4": "daysSinceEpoch",
                "uVar5": "hundredYears",
                "uVar6": "param1",
                "uVar7": "param2",
                "uVar8": "temp4",
                "bVar9": "negative",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_0000459c",
            "code": "\nvoid executeFunctions_0000459c(void)\n\n{\n  code **functionPointer;\n  int iterationCount;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (iterationCount = 0; iterationCount != 0; iterationCount = iterationCount + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  FUN_00000410();\n  functionPointer = (code **)&DAT_00007c58;\n  for (iterationCount = 0; iterationCount != 0; iterationCount = iterationCount + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "iterationCount"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_range_000045ee",
            "code": "\nvoid copyRange_000045ee(undefined *destination,undefined *source,int length)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = source + length;\n  if ((source < destination) && (destination < srcPtr)) {\n    destPtr = destination + length;\n    while (destPtr != destination) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    destination = destination + -1;\n    for (; source != srcPtr; source = source + 1) {\n      destination = destination + 1;\n      *destination = *source;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_range_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_00004622",
            "code": "\nvoid fillMemoryWith_00004622(undefined *memory,undefined value,int length)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + length;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateArray,uint monthIndex,undefined4 yearOffset)\n\n{\n  int daysToAdd;\n  uint currentMonth;\n  uint currentYear;\n  int daysInMonth;\n  bool isNegative;\n  uint *tempArray;\n  uint tempMonth;\n  undefined4 tempYear;\n  \n  tempArray = dateArray;\n  tempMonth = monthIndex;\n  tempYear = yearOffset;\n  if (0x3b < *dateArray) {\n    FUN_00005584(&tempArray,*dateArray,0x3c);\n    currentMonth = dateArray[1] + (int)tempArray;\n    dateArray[1] = currentMonth;\n    if ((int)tempMonth < 0) {\n      currentMonth = currentMonth - 1;\n      *dateArray = tempMonth + 0x3c;\n    }\n    else {\n      *dateArray = tempMonth;\n    }\n    if ((int)tempMonth < 0) {\n      dateArray[1] = currentMonth;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    FUN_00005584(&tempArray,dateArray[1],0x3c);\n    isNegative = (int)tempMonth < 0;\n    currentYear = dateArray[2] + (int)tempArray;\n    dateArray[2] = currentYear;\n    currentMonth = tempMonth;\n    if (isNegative) {\n      currentMonth = tempMonth + 0x3c;\n      currentYear = currentYear - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[1] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[2] = currentYear;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    FUN_00005584(&tempArray,dateArray[2],0x18);\n    isNegative = (int)tempMonth < 0;\n    currentYear = dateArray[3] + (int)tempArray;\n    dateArray[3] = currentYear;\n    currentMonth = tempMonth;\n    if (isNegative) {\n      currentMonth = tempMonth + 0x18;\n      currentYear = currentYear - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[2] = currentMonth;\n    }\n    if (isNegative) {\n      dateArray[3] = currentYear;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    FUN_00005584(&tempArray,dateArray[4],0xc);\n    isNegative = (int)tempMonth < 0;\n    currentMonth = dateArray[5] + (int)tempArray;\n    dateArray[5] = currentMonth;\n    if (isNegative) {\n      tempMonth = tempMonth + 0xc;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = tempMonth;\n    }\n    if (isNegative) {\n      dateArray[4] = tempMonth;\n    }\n    if (isNegative) {\n      dateArray[5] = currentMonth;\n    }\n  }\n  currentMonth = dateArray[5];\n  if ((currentMonth & 3) == 0) {\n    if (currentMonth == (currentMonth / 100) * 100) {\n      if ((currentMonth + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      currentMonth = dateArray[4];\n      dateArray[4] = currentMonth - 1;\n      if (currentMonth - 1 == 0xffffffff) {\n        currentYear = dateArray[5];\n        currentMonth = currentYear - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = currentMonth;\n        if ((currentMonth & 3) == 0) {\n          if (currentMonth == (currentMonth / 100) * 100) {\n            if ((currentYear + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      daysToAdd = daysInMonth;\n      if (dateArray[4] != 1) {\n        daysToAdd = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = daysToAdd + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      currentMonth = dateArray[4];\n      daysToAdd = daysInMonth;\n      if (currentMonth != 1) {\n        daysToAdd = (&DAT_000079fc)[currentMonth];\n      }\n      if ((int)dateArray[3] <= daysToAdd) break;\n      dateArray[3] = dateArray[3] - daysToAdd;\n      dateArray[4] = currentMonth + 1;\n      if (currentMonth + 1 == 0xc) {\n        currentYear = dateArray[5];\n        currentMonth = currentYear + 1;\n        dateArray[4] = 0;\n        dateArray[5] = currentMonth;\n        if ((currentMonth & 3) == 0) {\n          if (currentMonth % 100 == 0) {\n            if ((currentYear + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateArray",
                "param_2": "monthIndex",
                "param_3": "yearOffset",
                "iVar1": "daysToAdd",
                "uVar2": "currentMonth",
                "uVar3": "currentYear",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "tempMonth",
                "uStack_18": "tempYear"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_time_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateTimeOffset_000047e4(int *dateTimeArray)\n\n{\n  longlong totalMinutes;\n  longlong tempTotalMinutes;\n  int *dateTimeUtils;\n  uint var4;\n  int var5;\n  int var6;\n  int var7;\n  uint var8;\n  uint var9;\n  uint var10;\n  int var11;\n  uint var12;\n  uint var13;\n  uint var14;\n  uint var15;\n  bool isLeapYear;\n  \n  dateTimeUtils = (int *)FUN_000056b0();\n  FUN_00004634(dateTimeArray);\n  var12 = dateTimeArray[5];\n  var11 = dateTimeArray[3] + -1 + *(int *)(&DAT_00007a2c + dateTimeArray[4] * 4);\n  if (((1 < dateTimeArray[4]) && ((var12 & 3) == 0)) &&\n     ((var12 != (var12 / 100) * 100 || (var12 + 0x76c == ((var12 + 0x76c) / 400) * 400)))) {\n    var11 = var11 + 1;\n  }\n  dateTimeArray[7] = var11;\n  if (20000 < (int)&DAT_00002710 + var12) {\n    var7 = -1;\n    var5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)var12 < 0x47) {\n    if (var12 != 0x46) {\n      for (var9 = 0x45; (int)var12 < (int)var9; var9 = var9 - 1) {\n        if ((var9 & 3) == 0) {\n          if (var9 == (var9 / 100) * 100) {\n            if ((var9 + 0x76c) % 400 == 0) {\n              var7 = 0x16e;\n            }\n            else {\n              var7 = 0x16d;\n            }\n          }\n          else {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16d;\n        }\n        var11 = var11 - var7;\n      }\n      if ((var9 & 3) == 0) {\n        if (var12 == (var12 / 100) * 100) {\n          var7 = 0x16d;\n          if ((var12 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var11 = var11 - var7;\n    }\n  }\n  else {\n    var9 = 0x46;\n    do {\n      if ((var9 & 3) == 0) {\n        if (var9 % 100 == 0) {\n          if ((var9 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n          else {\n            var7 = 0x16d;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var9 = var9 + 1;\n      var11 = var11 + var7;\n    } while (var12 != var9);\n  }\n  totalMinutes = (longlong)var11 * 0x15180 + (longlong)(dateTimeArray[2] * 0xe10 + dateTimeArray[1] * 0x3c + *dateTimeArray)\n  ;\n  var15 = (uint)totalMinutes;\n  var7 = (int)((ulonglong)totalMinutes >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  var9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    var12 = dateTimeUtils[10];\n    var7 = (uint)totalMinutes + var12;\n    var5 = (int)((ulonglong)totalMinutes >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalMinutes,var12);\n  }\n  else {\n    var14 = dateTimeArray[8];\n    var13 = var14;\n    if (0 < (int)var14) {\n      var13 = 1;\n    }\n    if ((dateTimeUtils[1] == dateTimeArray[5] + 0x76c) || (var5 = FUN_00004f98(), var5 != 0)) {\n      var10 = dateTimeUtils[0x14];\n      var4 = dateTimeUtils[0x12];\n      var8 = dateTimeUtils[10];\n      var9 = var4 - var8;\n      var5 = (dateTimeUtils[0x13] - ((int)var8 >> 0x1f)) - (uint)(var4 < var8);\n      if (((int)((var7 - var5) - (uint)(var15 < var9)) < 0 ==\n           (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(var15 < var9)))) &&\n         (var6 = (dateTimeUtils[0x13] - ((int)var10 >> 0x1f)) - (uint)(var4 < var10),\n         isLeapYear = var15 < var4 - var10,\n         (int)((var7 - var6) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)isLeapYear)))) goto LAB_00004a88;\n      var4 = dateTimeUtils[8] - var10;\n      var6 = (dateTimeUtils[9] - ((int)var10 >> 0x1f)) - (uint)((uint)dateTimeUtils[8] < var10);\n      if (*dateTimeUtils != 0) {\n        if ((int)((var7 - var6) - (uint)(var15 < var4)) < 0 ==\n            (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(var15 < var4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        var9 = 0;\n        if ((int)var14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        var15 = var13 ^ var9;\n        var13 = var9;\n        if (var15 == 1) {\n          if (var9 == 0) {\n            var7 = var10 - var8;\n          }\n          else {\n            var7 = var8 - var10;\n          }\n          var5 = dateTimeArray[3];\n          *dateTimeArray = *dateTimeArray + var7;\n          tempTotalMinutes = totalMinutes + var7;\n          FUN_00004634(dateTimeArray);\n          var5 = dateTimeArray[3] - var5;\n          totalMinutes = totalMinutes + var7;\n          if (var5 != 0) {\n            if (var5 < 2) {\n              if (var5 == -2 || var5 + 2 < 0 != SCARRY4(var5,2)) {\n                var5 = 1;\n              }\n            }\n            else {\n              var5 = -1;\n            }\n            var7 = var5 + dateTimeArray[7];\n            var11 = var11 + var5;\n            if (var7 < 0) {\n              var9 = var12 - 1;\n              if ((var9 & 3) == 0) {\n                if (var9 == (var9 / 100) * 100) {\n                  var7 = 0x16d;\n                  if ((var12 + 0x76b) % 400 != 0) {\n                    var7 = 0x16c;\n                  }\n                }\n                else {\n                  var7 = 0x16d;\n                }\n              }\n              else {\n                var7 = 0x16c;\n              }\n            }\n            else {\n              if ((var12 & 3) == 0) {\n                if (var12 == (var12 / 100) * 100) {\n                  var5 = 0x16d;\n                  if ((var12 + 0x76c) % 400 == 0) {\n                    var5 = 0x16e;\n                  }\n                }\n                else {\n                  var5 = 0x16e;\n                }\n              }\n              else {\n                var5 = 0x16d;\n              }\n              if (var5 <= var7) {\n                var7 = var7 - var5;\n              }\n            }\n            dateTimeArray[7] = var7;\n            totalMinutes = tempTotalMinutes;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var7 - var6) - (uint)(var15 < var4)) < 0 !=\n          (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(var15 < var4)))) {\nLAB_0000491e:\n        if ((int)((var7 - var5) - (uint)(var15 < var9)) < 0 ==\n            (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(var15 < var9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var14) {\n        var9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      var9 = var13;\n      if (var13 != 1) goto LAB_00004934;\n    }\n    var12 = dateTimeUtils[0x14];\n    var7 = (uint)totalMinutes + var12;\n    var5 = (int)((ulonglong)totalMinutes >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalMinutes,var12);\n    var9 = 1;\n  }\n  FUN_000050f4();\n  dateTimeArray[8] = var9;\n  dateTimeArray[6] = (var11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(var5,var7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_time_offset_000047e4",
                "param_1": "dateTimeArray",
                "lVar1": "totalMinutes",
                "lVar2": "tempTotalMinutes",
                "piVar3": "dateTimeUtils",
                "uVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "iVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_linked_list_00004b34",
            "code": "\nvoid updateLinkedList_00004b34(undefined4 *outputArray,int size,undefined4 param1,undefined4 param2)\n\n{\n  int *currentNode;\n  int **nextNode;\n  int **previousNode;\n  int **currentNodePtr;\n  int **previousNodePtr;\n  int **newNodePtr;\n  bool isCurrentNodeNext;\n  \n  if (size == 0) {\n    return;\n  }\n  newNodePtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNodePtr = (int **)((int)newNodePtr + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  currentNodePtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNodePtr[1] = (int *)0x0;\n    previousNode = nextNode;\n    DAT_1fff0db4 = newNodePtr;\n  }\n  else {\n    previousNodePtr = DAT_1fff0db4;\n    if (newNodePtr < DAT_1fff0db4) {\n      previousNode = (int **)*newNodePtr;\n      currentNodePtr = (int **)((int)newNodePtr + (int)previousNode);\n      isCurrentNodeNext = DAT_1fff0db4 == currentNodePtr;\n      if (isCurrentNodeNext) {\n        currentNodePtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNodePtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNodePtr;\n      if (isCurrentNodeNext) {\n        currentNodePtr = (int **)((int)currentNodePtr + (int)previousNode);\n        *newNodePtr = (int *)currentNodePtr;\n      }\n    }\n    else {\n      do {\n        currentNodePtr = previousNodePtr;\n        previousNodePtr = (int **)currentNodePtr[1];\n        if (previousNodePtr == (int **)0x0) break;\n      } while (previousNodePtr <= newNodePtr);\n      previousNode = (int **)*currentNodePtr;\n      if ((int **)((int)currentNodePtr + (int)previousNode) == newNodePtr) {\n        previousNode = (int **)((int)previousNode + (int)*newNodePtr);\n        *currentNodePtr = (int *)previousNode;\n        if (previousNodePtr == (int **)((int)currentNodePtr + (int)previousNode)) {\n          currentNode = *previousNodePtr;\n          currentNodePtr[1] = previousNodePtr[1];\n          previousNode = (int **)((int)previousNode + (int)currentNode);\n          *currentNodePtr = (int *)previousNode;\n        }\n      }\n      else if (newNodePtr < (int **)((int)currentNodePtr + (int)previousNode)) {\n        *outputArray = 0xc;\n      }\n      else {\n        previousNode = (int **)((int)newNodePtr + (int)*newNodePtr);\n        isCurrentNodeNext = previousNodePtr == previousNode;\n        if (isCurrentNodeNext) {\n          previousNode = (int **)*previousNodePtr;\n          previousNodePtr = (int **)previousNodePtr[1];\n        }\n        newNodePtr[1] = (int *)previousNodePtr;\n        if (isCurrentNodeNext) {\n          previousNode = (int **)((int)previousNode + (int)*newNodePtr);\n          *newNodePtr = (int *)previousNode;\n        }\n        currentNodePtr[1] = (int *)newNodePtr;\n      }\n    }\n  }\n  FUN_0000579c(outputArray,previousNode,currentNodePtr,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_linked_list_00004b34",
                "param_1": "outputArray",
                "param_2": "size",
                "param_3": "param1",
                "param_4": "param2",
                "piVar1": "currentNode",
                "extraout_r1": "nextNode",
                "ppiVar2": "previousNode",
                "ppiVar3": "currentNodePtr",
                "ppiVar4": "previousNodePtr",
                "ppiVar5": "newNodePtr",
                "bVar6": "isCurrentNodeNext"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *pointer,uint size,undefined4 value1,undefined4 value2)\n\n{\n  uint *previous_ptr;\n  int difference;\n  uint calculated_size;\n  uint *current_ptr;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *pointer = 0xc;\n  }\n  else {\n    FUN_00005790();\n    previous_ptr = DAT_1fff0db4;\n    for (current_ptr = DAT_1fff0db4; current_ptr != (uint *)0x0; current_ptr = (uint *)current_ptr[1]) {\n      calculated_size = *current_ptr - allocated_size;\n      if (-1 < (int)calculated_size) {\n        if (0xb < calculated_size) {\n          *current_ptr = calculated_size;\n          current_ptr = (uint *)((int)current_ptr + calculated_size);\n          goto LAB_00004c34;\n        }\n        if (previous_ptr == current_ptr) {\n          DAT_1fff0db4 = (uint *)current_ptr[1];\n        }\n        if (previous_ptr != current_ptr) {\n          previous_ptr[1] = (uint)(uint *)current_ptr[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_ptr = current_ptr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(pointer,0,previous_ptr,0,value2);\n    }\n    previous_ptr = (uint *)FUN_00000428(pointer,allocated_size);\n    if ((previous_ptr != (uint *)0xffffffff) &&\n       ((current_ptr = (uint *)((int)previous_ptr + 3U & 0xfffffffc), previous_ptr == current_ptr ||\n        (difference = FUN_00000428(pointer,(int)current_ptr - (int)previous_ptr), difference != -1)))) {\nLAB_00004c34:\n      *current_ptr = allocated_size;\nLAB_00004c42:\n      FUN_0000579c(pointer);\n      allocated_size = (int)current_ptr + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(current_ptr + 1);\n      if (difference == 0) {\n        return allocated_size;\n      }\n      *(uint *)((int)current_ptr + difference) = (int)(current_ptr + 1) - allocated_size;\n      return allocated_size;\n    }\n    *pointer = 0xc;\n    FUN_0000579c(pointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "pointer",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "previous_ptr",
                "iVar2": "difference",
                "uVar3": "calculated_size",
                "puVar4": "current_ptr",
                "uVar5": "allocated_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_relocation_00004c84",
            "code": "\nvoid processRelocation_00004c84(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  dword relocationOffset;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tempVar1 = inputParam1;\n  tempVar2 = inputParam2;\n  tempVar3 = inputParam3;\n  tempVar4 = inputParam4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relocationOffset,*(undefined4 *)(relocationOffset + 8),inputParam1,&tempVar2,tempVar1,&tempVar2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_relocation_00004c84",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "dVar1": "relocationOffset",
                "uVar2": "tempVar1",
                "uStack_c": "tempVar2",
                "uStack_8": "tempVar3",
                "uStack_4": "tempVar4"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_data_00004cb4",
            "code": "\nuint processData_00004cb4(uint input)\n\n{\n  dword offset;\n  undefined4 *dataArray;\n  uint temp;\n  undefined *currentPointer;\n  undefined4 unused1;\n  undefined4 unused2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataArray = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataArray == &DAT_000079b8) {\n    dataArray = *(undefined4 **)(offset + 4);\n  }\n  else if (dataArray == (undefined4 *)&DAT_000079d8) {\n    dataArray = *(undefined4 **)(offset + 8);\n  }\n  else if (dataArray == (undefined4 *)&DAT_00007998) {\n    dataArray = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045e8(dataArray[0x16]);\n  }\n  temp = dataArray[2] - 1;\n  dataArray[2] = temp;\n  if (((int)temp < 0) && (((int)temp < (int)dataArray[6] || (temp = input & 0xff, temp == 10))))\n  {\n    input = FUN_00005404(offset,input,dataArray,temp,unused1,unused2);\n  }\n  else {\n    currentPointer = (undefined *)*dataArray;\n    *dataArray = currentPointer + 1;\n    *currentPointer = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045ec(dataArray[0x16]);\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_data_00004cb4",
                "param_1": "input",
                "dVar1": "offset",
                "puVar2": "dataArray",
                "uVar3": "temp",
                "puVar4": "currentPointer",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "extract_and_print_strings_00004db8",
            "code": "\nundefined4 extractAndPrintStrings_00004db8(int input_param)\n\n{\n  char current_char;\n  dword relocation_offset;\n  int result;\n  char *str_ptr;\n  char **string_array_ptr;\n  undefined4 return_value;\n  char *cur_str_ptr;\n  \n  relocation_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  string_array_ptr = *(char ***)(relocation_offset + 8);\n  if (*(int *)(relocation_offset + 0x18) == 0) {\n    FUN_000042a4(relocation_offset);\n  }\n  if (string_array_ptr == (char **)&DAT_000079b8) {\n    string_array_ptr = *(char ***)(relocation_offset + 4);\n  }\n  else if (string_array_ptr == (char **)&DAT_000079d8) {\n    string_array_ptr = *(char ***)(relocation_offset + 8);\n  }\n  else if (string_array_ptr == (char **)&DAT_00007998) {\n    string_array_ptr = *(char ***)(relocation_offset + 0xc);\n  }\n  if ((-1 < (int)string_array_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array_ptr + 3) << 0x16))) {\n    FUNC_000045e8(string_array_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(string_array_ptr + 3) << 0x1c) < 0) && (string_array_ptr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(relocation_offset,string_array_ptr), result == 0)) {\n    cur_str_ptr = (char *)(input_param + -1);\n    do {\n      while( true ) {\n        cur_str_ptr = cur_str_ptr + 1;\n        current_char = *cur_str_ptr;\n        str_ptr = string_array_ptr[2] + -1;\n        string_array_ptr[2] = str_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)str_ptr) {\n            cur_str_ptr = *string_array_ptr;\n            return_value = 10;\n            *string_array_ptr = cur_str_ptr + 1;\n            *cur_str_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(relocation_offset,10,string_array_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)str_ptr < 0) && (((int)str_ptr < (int)string_array_ptr[6] || (current_char == '\\n')))) break;\n        str_ptr = *string_array_ptr;\n        *string_array_ptr = str_ptr + 1;\n        *str_ptr = current_char;\n      }\n      result = FUN_00005404(relocation_offset,current_char,string_array_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)string_array_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array_ptr + 3) << 0x16))) {\n    FUNC_000045ec(string_array_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "extract_and_print_strings_00004db8",
                "param_1": "input_param",
                "cVar1": "current_char",
                "dVar2": "relocation_offset",
                "iVar3": "result",
                "pcVar4": "str_ptr",
                "ppcVar5": "string_array_ptr",
                "uVar6": "return_value",
                "pcVar7": "cur_str_ptr"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 input,int dataOffset)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_00000490(input,(int)*(short *)(dataOffset + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(dataOffset + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(dataOffset + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(dataOffset + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(dataOffset + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "input",
                "param_2": "dataOffset",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "update_data_and_call_function_00004dee",
            "code": "\nundefined4 updateDataAndCallFunction_00004dee(undefined4 data,int address,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(address + 0xc) << 0x17) < 0) {\n    FUN_000004f2(data,(int)*(short *)(address + 0xe),0,2);\n  }\n  *(ushort *)(address + 0xc) = *(ushort *)(address + 0xc) & 0xefff;\n  result = FUN_00000e38(param1,param2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "update_data_and_call_function_00004dee",
                "param_1": "data",
                "param_2": "address",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_variable_based_on_condition_00004e26",
            "code": "\nvoid updateVariableBasedOnCondition_00004e26(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isResultMinusOne;\n  \n  result = FUN_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isResultMinusOne = result == -1;\n  if (isResultMinusOne) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isResultMinusOne) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isResultMinusOne) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_variable_based_on_condition_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isResultMinusOne"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *inputBytes1,byte *inputBytes2)\n\n{\n  byte byteValue2;\n  uint byteValue1;\n  bool isEqual;\n  \n  do {\n    byteValue1 = (uint)*inputBytes1;\n    byteValue2 = *inputBytes2;\n    isEqual = byteValue1 == 1;\n    if (byteValue1 != 0) {\n      isEqual = byteValue1 == byteValue2;\n    }\n    inputBytes1 = inputBytes1 + 1;\n    inputBytes2 = inputBytes2 + 1;\n  } while (isEqual);\n  return byteValue1 - byteValue2;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "inputBytes1",
                "param_2": "inputBytes2",
                "uVar2": "byteValue1",
                "bVar1": "byteValue2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int length,int comparison_length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *comparison_byte;\n  uint current_byte_value;\n  \n  if (comparison_length == 0) {\n    difference = 0;\n  }\n  else {\n    comparison_byte = (byte *)(length + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      comparison_byte = comparison_byte + 1;\n      if ((current_byte_value != *comparison_byte) || (current_byte + 1 == data + comparison_length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *comparison_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "length",
                "param_3": "comparison_length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "comparison_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint parsedNumber;\n  uint currentChar;\n  uint flag;\n  uint digitValue;\n  int comparisonResult;\n  uint maxNumber;\n  uint quotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    flag = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    flag = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxNumber = flag + 0x7fffffff;\n  comparisonResult = 0;\n  quotient = maxNumber / base;\n  parsedNumber = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (comparisonResult != -1) {\n      if ((quotient < parsedNumber) || ((quotient == parsedNumber && ((int)(maxNumber - base * quotient) < (int)digitValue)))) {\n        comparisonResult = -1;\n      }\n      else {\n        parsedNumber = parsedNumber * base + digitValue;\n        comparisonResult = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (comparisonResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedNumber = maxNumber;\n    if (outputPointer == (byte **)0x0) {\n      return maxNumber;\n    }\n  }\n  else {\n    if (flag != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (comparisonResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "parsedNumber",
                "uVar2": "currentChar",
                "uVar3": "flag",
                "uVar4": "digitValue",
                "iVar5": "comparisonResult",
                "uVar6": "maxNumber",
                "uVar7": "quotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_weekday_00004f98",
            "code": "\nundefined4 calculateWeekday_00004f98(uint year)\n\n{\n  uint *resultArray;\n  undefined4 isLeapYear;\n  uint offset;\n  int weekdayOffset;\n  uint *currentRow;\n  int baseOffset;\n  uint isDivisibleBy400;\n  int index;\n  int adjustedOffset;\n  uint isLeapYearOffset;\n  \n  resultArray = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    baseOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    resultArray[1] = year;\n    isLeapYearOffset = (uint)(year % 400 == 0);\n    currentRow = resultArray;\n    do {\n      offset = currentRow[5];\n      if (*(char *)(currentRow + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)offset < 0x3c) {\n            weekdayOffset = 0;\n          }\n          else {\n            weekdayOffset = 1;\n          }\n        }\n        else {\n          weekdayOffset = 0;\n        }\n        weekdayOffset = weekdayOffset + baseOffset + offset + -1;\n      }\n      else if (*(char *)(currentRow + 2) == 'D') {\n        weekdayOffset = baseOffset + offset;\n      }\n      else {\n        isDivisibleBy400 = isLeapYearOffset;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isDivisibleBy400 = 1;\n        }\n        index = 0;\n        weekdayOffset = baseOffset;\n        while( true ) {\n          index = index + 1;\n          if ((int)currentRow[3] <= index) break;\n          weekdayOffset = weekdayOffset + *(int *)(&UNK_00007b98 + index * 4 + isDivisibleBy400 * 0x30);\n        }\n        adjustedOffset = offset - (weekdayOffset + 4U) % 7;\n        if (adjustedOffset < 0) {\n          adjustedOffset = adjustedOffset + 7;\n        }\n        for (adjustedOffset = (currentRow[4] - 1) * 7 + adjustedOffset;\n            *(int *)(&UNK_00007b98 + index * 4 + isDivisibleBy400 * 0x30) <= adjustedOffset; adjustedOffset = adjustedOffset + -7) {\n        }\n        weekdayOffset = weekdayOffset + adjustedOffset;\n      }\n      offset = currentRow[10] + weekdayOffset * 0x15180 + currentRow[6];\n      currentRow[8] = offset;\n      currentRow[9] = (int)offset >> 0x1f;\n      currentRow = currentRow + 10;\n    } while (resultArray + 0x14 != currentRow);\n    offset = resultArray[9];\n    isLeapYearOffset = resultArray[0x13];\n    *resultArray = (uint)((int)((offset - isLeapYearOffset) - (uint)(resultArray[8] < resultArray[0x12])) < 0 !=\n                    (SBORROW4(offset,isLeapYearOffset) !=\n                    SBORROW4(offset - isLeapYearOffset,(uint)(resultArray[8] < resultArray[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_weekday_00004f98",
                "param_1": "year",
                "puVar1": "resultArray",
                "uVar2": "isLeapYear",
                "uVar3": "offset",
                "iVar4": "weekdayOffset",
                "puVar5": "currentRow",
                "iVar6": "baseOffset",
                "uVar7": "isDivisibleBy400",
                "iVar8": "index",
                "iVar9": "adjustedOffset",
                "uVar10": "isLeapYearOffset"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * getMemoryAddress_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_ptr_000050f4",
            "code": "\nundefined * get_data_ptr_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_ptr_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_data_00005100",
            "code": "\nvoid parseData_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *ptr;\n  int status;\n  int count;\n  undefined type;\n  char *ptr2;\n  bool boolFlag;\n  ushort *ptr3;\n  int *ptr4;\n  ushort *ptr5;\n  int *ptr6;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int length;\n  char *ptrArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  result = FUN_000056b0();\n  ptr = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (ptr == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = ptr;\n    DAT_1fff0ddc = ptr;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (status = FUN_00004e52(), status != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    status = FUN_00005ecc(ptr);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,status + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,ptr);\n    }\n    if (*ptr == ':') {\n      ptr = ptr + 1;\n    }\n    status = FUN_00005e68(ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&length);\n    if (0 < status) {\n      ptr2 = ptr + length;\n      if (ptr[length] == '-') {\n        ptr2 = ptr2 + 1;\n        status = -1;\n      }\n      else {\n        if (ptr[length] == '+') {\n          ptr2 = ptr2 + 1;\n        }\n        status = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      ptr3 = &value2;\n      ptr4 = &length;\n      ptr5 = &value3;\n      ptr6 = &length;\n      count = FUN_00005e68(ptr2,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                           &value3,&length);\n      if (0 < count) {\n        *(uint *)(result + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * status;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        ptr2 = ptr2 + length;\n        status = FUN_00005e68(ptr2,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&length,ptr3,ptr4,ptr5,\n                             ptr6);\n        if (status < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          ptr = ptr2 + length;\n          if (ptr2[length] == '-') {\n            ptr = ptr + 1;\n            status = -1;\n          }\n          else {\n            if (ptr2[length] == '+') {\n              ptr = ptr + 1;\n            }\n            status = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          length = 0;\n          count = FUN_00005e68(ptr,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                               &value3,&length);\n          if (count < 1) {\n            status = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            status = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * status;\n          }\n          *(int *)(result + 0x50) = status;\n          ptr = ptr + length;\n          boolFlag = false;\n          status = result;\n          while( true ) {\n            if (*ptr == ',') {\n              ptr = ptr + 1;\n            }\n            if (*ptr == 'M') {\n              count = FUN_00005e68(ptr,\"M%hu%n.%hu%n.%hu%n\",&value4,&length,&value5,\n                                   &length,&value6,&length);\n              if (count != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(status + 0xc) = (uint)value4;\n              *(uint *)(status + 0x10) = (uint)value5;\n              *(undefined *)(status + 8) = 0x4d;\n              *(uint *)(status + 0x14) = (uint)value6;\n              ptr2 = ptr + length;\n            }\n            else {\n              if (*ptr == 'J') {\n                ptr = ptr + 1;\n                type = 0x4a;\n              }\n              else {\n                type = 0x44;\n              }\n              value6 = FUN_00005fd8(ptr,ptrArray,10);\n              ptr2 = ptrArray[0];\n              if (ptrArray[0] == ptr) {\n                if (boolFlag) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(status + 8) = type;\n                *(uint *)(status + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            length = 0;\n            if (*ptr2 == '/') {\n              FUN_00005e68(ptr2,&DAT_00007a85,&value1,&length,&value2,&length,&value3,\n                           &length);\n            }\n            *(uint *)(status + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            status = status + 0x28;\n            ptr = ptr2 + length;\n            if (boolFlag) break;\n            boolFlag = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_data_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "ptr",
                "iVar4": "status",
                "iVar5": "count",
                "uVar6": "type",
                "pcVar7": "ptr2",
                "bVar8": "boolFlag",
                "puVar9": "ptr3",
                "piVar10": "ptr4",
                "puVar11": "ptr5",
                "piVar12": "ptr6",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "length",
                "local_2c": "ptrArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputValue,uint flag,int *dataArray,undefined4 config)\n\n{\n  int result;\n  uint temp;\n  undefined *ptr;\n  \n  if ((inputValue != 0) && (*(int *)(inputValue + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataArray == &DAT_000079b8) {\n    dataArray = *(int **)(inputValue + 4);\n  }\n  else if (dataArray == (int *)&DAT_000079d8) {\n    dataArray = *(int **)(inputValue + 8);\n  }\n  else if (dataArray == (int *)&DAT_00007998) {\n    dataArray = *(int **)(inputValue + 0xc);\n  }\n  dataArray[2] = dataArray[6];\n  temp = (uint)*(ushort *)(dataArray + 3);\n  result = temp << 0x1c;\n  if (((result < 0) && (temp = dataArray[4], temp != 0)) ||\n     (result = FUN_000054a8(inputValue,dataArray,result,temp,config), result == 0)) {\n    result = *dataArray - dataArray[4];\n    flag = flag & 0xff;\n    if ((result < dataArray[5]) || (result = FUN_00004158(inputValue,dataArray), result == 0)) {\n      dataArray[2] = dataArray[2] + -1;\n      ptr = (undefined *)*dataArray;\n      *dataArray = (int)(ptr + 1);\n      *ptr = (char)flag;\n      if (dataArray[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x1f)) {\n          return flag;\n        }\n        if (flag != 10) {\n          return flag;\n        }\n      }\n      result = FUN_00004158(inputValue,dataArray);\n      if (result == 0) {\n        return flag;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputValue",
                "param_2": "flag",
                "param_3": "dataArray",
                "param_4": "config",
                "iVar1": "result",
                "uVar2": "temp",
                "puVar3": "ptr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "validate_and_process_data_000054a8",
            "code": "\nuint validate_and_process_data_000054a8(undefined4 *output_ptr,undefined4 *input_ptr)\n\n{\n  ushort temp_var1;\n  dword temp_var2;\n  ushort temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  \n  temp_var2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_ptr == &DAT_000079b8) {\n    input_ptr = *(undefined4 **)(temp_var2 + 4);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_000079d8) {\n    input_ptr = *(undefined4 **)(temp_var2 + 8);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_00007998) {\n    input_ptr = *(undefined4 **)(temp_var2 + 0xc);\n  }\n  temp_var4 = (uint)*(ushort *)(input_ptr + 3);\n  temp_var3 = *(ushort *)(input_ptr + 3);\n  if (-1 < (int)(temp_var4 << 0x1c)) {\n    if (-1 < (int)(temp_var4 << 0x1b)) {\n      *output_ptr = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_var4 << 0x1d) < 0) {\n      if ((undefined4 *)input_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_ptr[0xd] != input_ptr + 0x11) {\n          FUN_00004b34(output_ptr);\n        }\n        input_ptr[0xd] = 0;\n      }\n      *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xffdb;\n      input_ptr[1] = 0;\n      *input_ptr = input_ptr[4];\n    }\n    *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 8;\n  }\n  if ((input_ptr[4] == 0) && ((*(ushort *)(input_ptr + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output_ptr,input_ptr);\n  }\n  temp_var1 = *(ushort *)(input_ptr + 3);\n  temp_var4 = (uint)temp_var1;\n  temp_var3 = *(ushort *)(input_ptr + 3);\n  temp_var5 = temp_var4 & 1;\n  if ((temp_var1 & 1) == 0) {\n    if (-1 < (int)(temp_var4 << 0x1e)) {\n      temp_var5 = input_ptr[5];\n    }\n    input_ptr[2] = temp_var5;\n  }\n  else {\n    input_ptr[2] = 0;\n    input_ptr[6] = -input_ptr[5];\n  }\n  if (input_ptr[4] != 0) {\n    return 0;\n  }\n  if ((temp_var1 & 0x80) == 0) {\n    return temp_var4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_ptr + 3) = temp_var3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "validate_and_process_data_000054a8",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "uVar1": "temp_var1",
                "dVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_store_remainder_00005584",
            "code": "\nvoid divideAndStoreRemainder_00005584(uint *resultArray,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *resultArray = quotient;\n  resultArray[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "resultArray",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_offset_and_check_0000562c",
            "code": "\nint find_offset_and_check_0000562c(undefined4 param_1,char *string,int *offset)\n\n{\n  char current_char;\n  int *ptr_rel_array;\n  int result;\n  char *current_char_ptr;\n  int *current_ptr_rel;\n  int offset_index;\n  \n  FUN_00005fec();\n  current_char_ptr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        offset_index = (int)current_char_ptr - (int)string;\n        ptr_rel_array = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_ptr_rel = ptr_rel_array;\n          if (*current_ptr_rel == 0) break;\n          result = FUN_00004e66(*current_ptr_rel,string,offset_index);\n          ptr_rel_array = current_ptr_rel + 1;\n          if ((result == 0) && (result = *current_ptr_rel, *(char *)(result + offset_index) == '=')) {\n            *offset = (int)((int)current_ptr_rel - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param_1);\n            return result + offset_index + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_offset_and_check_0000562c",
                "param_2": "string",
                "param_3": "offset",
                "cVar1": "current_char",
                "piVar2": "ptr_rel_array",
                "iVar3": "result",
                "pcVar4": "current_char_ptr",
                "piVar5": "current_ptr_rel",
                "iVar6": "offset_index"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "process_data_000056a0",
            "code": "\nvoid processData_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = input2;\n  temp2 = input3;\n  FUN_0000562c(input1,input2,&temp1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "temp1",
                "uStack_8": "temp2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_permissions_000056b8",
            "code": "\nundefined4 checkPermissions_000056b8(undefined4 param1,int param2,undefined4 *status,uint *permission)\n\n{\n  int result;\n  undefined4 permissionFlag;\n  undefined tempBuffer [4];\n  uint flag;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = FUN_00000514(param1,(int)*(short *)(param2 + 0xe),tempBuffer), result < 0)) {\n    *permission = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permissionFlag = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *permission = (uint)((flag & 0xf000) == 0x2000);\n  }\n  permissionFlag = 0x400;\nLAB_000056f8:\n  *status = permissionFlag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_permissions_000056b8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "status",
                "param_4": "permission",
                "iVar1": "result",
                "uVar2": "permissionFlag",
                "auStack_68": "tempBuffer",
                "local_64": "flag"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int data,int *array)\n\n{\n  ushort result;\n  int status;\n  int localVar1;\n  int *localVar2;\n  \n  if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1e)) {\n    localVar1 = data;\n    localVar2 = array;\n    result = FUN_000056b8(data,array,&localVar1,&localVar2);\n    status = FUN_00004bd0(data,localVar1);\n    if (status != 0) {\n      *(undefined **)(data + 0x28) = &DAT_0000423d;\n      *array = status;\n      *(ushort *)(array + 3) = *(ushort *)(array + 3) | 0x80;\n      array[5] = localVar1;\n      array[4] = status;\n      if ((localVar2 != (int *)0x0) &&\n         (status = FUN_00000534(data,(int)*(short *)((int)array + 0xe)), status != 0)) {\n        *(ushort *)(array + 3) = *(ushort *)(array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(array + 3) = result | *(ushort *)(array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(array + 3) = *(ushort *)(array + 3) & 0xfffc | 2;\n  }\n  *array = (int)array + 0x47;\n  array[4] = (int)array + 0x47;\n  array[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "data",
                "param_2": "array",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "localVar1",
                "local_14": "localVar2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "execute_relocation_00005780",
            "code": "\nvoid executeRelocation_00005780(undefined4 input)\n\n{\n  FUN_00004b34(relocationTable[16].r_offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "execute_relocation_00005780",
                "param_1": "input",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_structure_0000579c",
            "code": "\nvoid initializeDataStructure_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_structure_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_character_000057a8",
            "code": "\nint processCharacter_000057a8(undefined4 input,int character,undefined4 *buffer)\n\n{\n  int counter;\n  undefined *ptr;\n  \n  counter = buffer[2] + -1;\n  buffer[2] = counter;\n  if ((counter < 0) && ((counter < (int)buffer[6] || (character == 10)))) {\n    counter = FUN_00005404();\n    return counter;\n  }\n  ptr = (undefined *)*buffer;\n  *buffer = ptr + 1;\n  *ptr = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_character_000057a8",
                "param_1": "input",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "counter",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_array_000057d2",
            "code": "\nint processArray_000057d2(undefined4 input,undefined4 value,undefined *array,int arrayLength)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentPos;\n  \n  endPointer = array + arrayLength;\n  currentPos = arrayLength;\n  do {\n    if (array == endPointer) {\n      return 0;\n    }\n    result = FUN_000057a8(input,*array,value,arrayLength,currentPos);\n    arrayLength = result + 1;\n    array = array + 1;\n  } while (arrayLength != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_array_000057d2",
                "param_1": "input",
                "param_2": "value",
                "param_3": "array",
                "param_4": "arrayLength",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentPos"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_and_process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseAndProcessData_000057f8(int arg1,undefined4 *arg2,byte *data,int *arg4)\n\n{\n  int result;\n  int returnValue;\n  int *ptrArg4;\n  bool flag;\n  byte *ptrData;\n  int unaffArg7;\n  byte *ptrData2;\n  int *ptrLocal8c;\n  uint flags;\n  int value;\n  undefined4 uStack80;\n  int local7c;\n  int totalSize;\n  byte local70;\n  undefined local6f;\n  undefined local6e;\n  undefined local45;\n  undefined4 local30;\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (arg2 == &DAT_000079b8) {\n    arg2 = *(undefined4 **)(arg1 + 4);\n  }\n  else if (arg2 == (undefined4 *)&DAT_000079d8) {\n    arg2 = *(undefined4 **)(arg1 + 8);\n  }\n  else if (arg2 == (undefined4 *)&DAT_00007998) {\n    arg2 = *(undefined4 **)(arg1 + 0xc);\n  }\n  if ((-1 < (int)(arg2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16))) {\n    FUNC_000045e8(arg2[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x1c)) || (arg2[4] == 0)) &&\n     (result = FUN_000054a8(arg1,arg2), result != 0)) {\n    if ((-1 < (int)(arg2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16)))\n    {\n      FUNC_000045ec(arg2[0x16]);\n    }\n    return -1;\n  }\n  totalSize = 0;\n  local6f = 0x20;\n  local6e = 0x30;\n  ptrData2 = data;\n  ptrLocal8c = arg4;\nLAB_0000588e:\n  ptrData = ptrData2;\n  if (*ptrData != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptrData2 = ptrData + 1;\n  if (*ptrData == 0x25) {\nLAB_0000589a:\n    result = (int)ptrData - (int)data;\n    if (result != 0) {\n      returnValue = FUN_000057d2(arg1,arg2,data,result);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(arg2[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16))) {\n          FUNC_000045ec(arg2[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(arg2 + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalSize;\n      }\n      totalSize = totalSize + result;\n    }\n    if (*ptrData == 0) goto LAB_00005a06;\n    value = -1;\n    uStack80 = 0;\n    flags = 0;\n    local7c = 0;\n    local45 = 0;\n    local30 = 0;\n    ptrData2 = ptrData + 1;\n    while( true ) {\n      ptrData = ptrData2 + 1;\n      result = FUN_00006010(\"#-0+ \",*ptrData2,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      ptrData2 = ptrData;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      local45 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      local45 = 0x2b;\n    }\n    if (*ptrData2 == 0x2a) {\n      ptrArg4 = ptrLocal8c + 1;\n      local7c = *ptrLocal8c;\n      ptrLocal8c = ptrArg4;\n      if (local7c < 0) {\n        local7c = -local7c;\n        flags = flags | 2;\n      }\n    }\n    else {\n      flag = false;\n      result = local7c;\n      ptrData = ptrData2;\n      while( true ) {\n        if (9 < *ptrData - 0x30) break;\n        result = result * 10 + (*ptrData - 0x30);\n        flag = true;\n        ptrData = ptrData + 1;\n      }\n      if (flag) {\n        local7c = result;\n      }\n    }\n    if (*ptrData == 0x2e) {\n      if (ptrData[1] == 0x2a) {\n        value = *ptrLocal8c;\n        if (value < 0) {\n          value = -1;\n        }\n        ptrData = ptrData + 2;\n        ptrLocal8c = ptrLocal8c + 1;\n      }\n      else {\n        flag = false;\n        value = 0;\n        result = 0;\n        while( true ) {\n          ptrData = ptrData + 1;\n          if (9 < *ptrData - 0x30) break;\n          result = result * 10 + (*ptrData - 0x30);\n          flag = true;\n        }\n        if (flag) {\n          value = result;\n        }\n      }\n    }\n    result = FUN_00006010(&DAT_00007c02,*ptrData,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      ptrData = ptrData + 1;\n    }\n    data = ptrData + 1;\n    local70 = *ptrData;\n    result = FUN_00006010(\"efgEFG\",local70,6);\n    if (result == 0) {\n      unaffArg7 = FUN_00005b34(arg1,&flags,arg2,0x57d3,&ptrLocal8c);\n      if (unaffArg7 == -1) goto LAB_00005a06;\n    }\n    else {\n      ptrLocal8c = (int *)(((int)ptrLocal8c + 7U & 0xfffffff8) + 8);\n    }\n    totalSize = totalSize + unaffArg7;\n    ptrData2 = data;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_and_process_data_000057f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "iVar1": "result",
                "iVar2": "returnValue",
                "piVar3": "ptrArg4",
                "bVar4": "flag",
                "pbVar5": "ptrData",
                "unaff_r7": "unaffArg7",
                "pbVar6": "ptrData2",
                "local_8c": "ptrLocal8c",
                "local_88": "flags",
                "local_84": "value",
                "uStack_80": "uStack80",
                "local_7c": "local7c",
                "local_74": "totalSize",
                "local_70": "local70",
                "local_6f": "local6f",
                "local_6e": "local6e",
                "local_45": "local45",
                "local_30": "local30"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_string_length_00005a58",
            "code": "\nundefined4\ncalculateStringLength_00005a58(undefined4 value,uint *data,uint *output,undefined4 arg,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int temp;\n  uint value4;\n  uint value5;\n  bool condition;\n  \n  value4 = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    value4 = data[2];\n  }\n  *output = value4;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = value4 + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      temp = (*callback)(value,arg,(int)data + 0x19,1);\n      if (temp == -1) goto LAB_00005afc;\n    }\n  }\n  value4 = (uint)*(byte *)((int)data + 0x43);\n  if (value4 != 0) {\n    value4 = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + value4 + 0x43) = 0x30;\n    *(undefined *)((int)data + value4 + 0x44) = *(undefined *)((int)data + 0x45);\n    value4 = value4 + 2;\n  }\n  index = (*callback)(value,arg,(int)data + 0x43,value4);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    value4 = data[3];\n    condition = (*data & 6) == 4;\n    if (condition) {\n      value4 = value4 - *output;\n    }\n    if (condition) {\n      value4 = value4 & ~((int)value4 >> 0x1f);\n    }\n    else {\n      value4 = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      value4 = value4 + (data[2] - data[4]);\n    }\n    for (value5 = 0; value4 != value5; value5 = value5 + 1) {\n      index = (*callback)(value,arg,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_string_length_00005a58",
                "param_1": "value",
                "param_2": "data",
                "param_3": "output",
                "param_4": "arg",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "result",
                "iVar3": "temp",
                "uVar4": "value4",
                "uVar5": "value5",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_code_00005b34",
            "code": "\ncode * formatCode_00005b34(undefined4 param1,uint *param2,undefined4 param3,code *param4,uint **param5\n                   )\n\n{\n  bool isPositive;\n  byte byteValue;\n  int intValue;\n  code *resultCode;\n  char *hexArray;\n  int loopCounter;\n  char *charPtr;\n  uint value;\n  uint *uintPtr;\n  uint base;\n  uint **ptrToPtr;\n  char **charPtrPtr;\n  uint length;\n  char *formattedStr;\n  code *localFunc;\n  \n  byteValue = *(byte *)(param2 + 6);\n  charPtr = (char *)((int)param2 + 0x43);\n  localFunc = param4;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)param2 + 0x42) = byteValue;\ngotoLabel1:\n    charPtr = (char *)((int)param2 + 0x42);\n    value = 1;\ngotoLabel2:\n    param2[4] = value;\n    *(undefined *)((int)param2 + 0x43) = 0;\n    goto gotoLabel3;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto gotoLabel4;\n    if (byteValue == 0x58) {\n      hexArray = \"0123456789ABCDEF\";\n      *(undefined *)((int)param2 + 0x45) = 0x58;\n      goto gotoLabel5;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    value = **param5;\n    *param5 = *param5 + 1;\n    *(char *)((int)param2 + 0x42) = (char)value;\n    goto gotoLabel1;\n  case 100:\n  case 0x69:\n    base = *param2;\n    uintPtr = *param5;\n    if ((int)(base << 0x18) < 0) {\n      value = *uintPtr;\n      *param5 = uintPtr + 1;\n    }\n    else {\n      value = *uintPtr;\n      *param5 = uintPtr + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)param2 + 0x43) = 0x2d;\n    }\n    hexArray = \"0123456789ABCDEF\";\n    base = 10;\n    goto gotoLabel6;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptrToPtr = (uint **)*param5;\n    base = *param2;\n    value = param2[5];\n    *param5 = (uint *)(ptrToPtr + 1);\n    uintPtr = *ptrToPtr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *uintPtr = value;\n    }\n    else {\n      *(short *)uintPtr = (short)value;\n    }\ngotoLabel4:\n    param2[4] = 0;\n    goto gotoLabel3;\n  case 0x6f:\n  case 0x75:\n    uintPtr = *param5;\n    value = *param2;\n    *param5 = uintPtr + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *uintPtr;\n    }\n    else {\n      value = (uint)*(ushort *)uintPtr;\n    }\n    hexArray = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *param2 = *param2 | 0x20;\n  case 0x78:\n    hexArray = \"0123456789abcdef\";\n    *(undefined *)((int)param2 + 0x45) = 0x78;\ngotoLabel5:\n    base = *param2;\n    value = **param5;\n    *param5 = *param5 + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *param2 = base | 0x20;\n    }\n    if (value == 0) {\n      *param2 = *param2 & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    charPtrPtr = (char **)*param5;\n    *param5 = (uint *)(charPtrPtr + 1);\n    charPtr = *charPtrPtr;\n    intValue = FUN_00006010(charPtr,0,param2[1],charPtrPtr,param1,param2,param3);\n    if (intValue != 0) {\n      param2[1] = intValue - (int)charPtr;\n    }\n    value = param2[1];\n    goto gotoLabel2;\n  }\n  *(undefined *)((int)param2 + 0x43) = 0;\ngotoLabel6:\n  length = param2[1];\n  param2[2] = length;\n  if (-1 < (int)length) {\n    *param2 = *param2 & 0xfffffffb;\n  }\n  formattedStr = charPtr;\n  if ((value != 0) || (length != 0)) {\n    do {\n      formattedStr = formattedStr + -1;\n      *formattedStr = hexArray[value - base * (value / base)];\n      isPositive = base <= value;\n      value = value / base;\n    } while (isPositive);\n  }\n  if (((base == 8) && ((int)(*param2 << 0x1f) < 0)) && ((int)param2[1] <= (int)param2[4])) {\n    formattedStr[-1] = '0';\n    formattedStr = formattedStr + -1;\n  }\n  param2[4] = (int)charPtr - (int)formattedStr;\n  charPtr = formattedStr;\ngotoLabel3:\n  intValue = FUN_00005a58(param1,param2,&localFunc,param3,param4);\n  if ((intValue == -1) || (intValue = (*param4)(param1,param3,charPtr,param2[4]), intValue == -1)) {\ngotoLabel7:\n    resultCode = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*param2 << 0x1e) < 0) {\n      for (intValue = 0; intValue < (int)(param2[3] - (int)localFunc); intValue = intValue + 1) {\n        loopCounter = (*param4)(param1,param3,(int)param2 + 0x19,1);\n        if (loopCounter == -1) goto gotoLabel7;\n      }\n    }\n    resultCode = (code *)param2[3];\n    if ((int)(code *)param2[3] < (int)localFunc) {\n      resultCode = localFunc;\n    }\n  }\n  return resultCode;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_code_00005b34",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "bVar1": "isPositive",
                "bVar2": "byteValue",
                "iVar3": "intValue",
                "pcVar4": "resultCode",
                "pcVar5": "hexArray",
                "iVar6": "loopCounter",
                "pcVar7": "charPtr",
                "puVar9": "uintPtr",
                "uVar8": "value",
                "uVar10": "base",
                "ppuVar11": "ptrToPtr",
                "ppcVar12": "charPtrPtr",
                "uVar13": "length",
                "pcVar14": "formattedStr",
                "local_24": "localFunc",
                "LAB_00005bdc": "gotoLabel1",
                "LAB_00005d28": "gotoLabel2",
                "LAB_00005c84": "gotoLabel3",
                "LAB_00005d06": "gotoLabel4",
                "LAB_00005ca8": "gotoLabel5",
                "LAB_00005c36": "gotoLabel6",
                "LAB_00005c98": "gotoLabel7"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int input,byte **dataPtr)\n\n{\n  int result;\n  uint output;\n  byte *ptrByte;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(input + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(input + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(input + 0xc);\n  }\n  result = FUN_00006768(input,dataPtr);\n  if (result == 0) {\n    dataPtr[1] = dataPtr[1] + -1;\n    ptrByte = *dataPtr;\n    *dataPtr = ptrByte + 1;\n    output = (uint)*ptrByte;\n  }\n  else {\n    output = 0xffffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "input",
                "param_2": "dataPtr",
                "iVar1": "result",
                "uVar2": "output",
                "pbVar3": "ptrByte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "initialize_function_00005e68",
            "code": "\nvoid initializeFunction_00005e68(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 initializedParam1;\n  undefined4 initializedParam2;\n  undefined2 constantValue1;\n  undefined2 constantValue2;\n  undefined4 initializedParam3;\n  undefined4 initializedParam4;\n  undefined *pointerToLAB_00004dea_1;\n  undefined4 initializedVar1;\n  undefined4 initializedVar2;\n  undefined4 initializedVar3;\n  undefined4 initializedVar4;\n  \n  constantValue1 = 0x204;\n  initializedParam1 = inputParam1;\n  initializedParam3 = inputParam1;\n  initializedVar3 = inputParam3;\n  initializedVar4 = inputParam4;\n  initializedParam2 = FUN_00005ecc();\n  pointerToLAB_00004dea_1 = &LAB_00004dea_1;\n  initializedVar1 = 0;\n  initializedVar2 = 0;\n  constantValue2 = 0xffff;\n  initializedParam4 = initializedParam2;\n  FUN_000061cc(constantOffset,pointerToLocal_80,inputParam2,pointerToUStack_8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "initialize_function_00005e68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_80": "initializedParam1",
                "local_7c": "initializedParam2",
                "local_74": "constantValue1",
                "local_72": "constantValue2",
                "local_70": "initializedParam3",
                "local_6c": "initializedParam4",
                "local_5c": "pointerToLAB_00004dea_1",
                "local_4c": "initializedVar1",
                "local_38": "initializedVar2",
                "uStack_8": "initializedVar3",
                "uStack_4": "initializedVar4",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "constantOffset",
                "&local_80": "pointerToLocal_80",
                "&uStack_8": "pointerToUStack_8"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "get_string_length_00005ecc",
            "code": "\nchar * getStringLength_00005ecc(char *str)\n\n{\n  char currentChar;\n  char *nextCharPtr;\n  char *strPtr;\n  \n  strPtr = str;\n  do {\n    nextCharPtr = strPtr + 1;\n    currentChar = *strPtr;\n    strPtr = nextCharPtr;\n  } while (currentChar != '\\0');\n  return nextCharPtr + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "get_string_length_00005ecc",
                "param_1": "str",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPtr",
                "pcVar3": "strPtr"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parse_number_00005edc(undefined4 *result,byte *input_string,byte **output_string,uint base)\n\n{\n  uint parsed_number;\n  uint current_char;\n  byte negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_number = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_number)) ||\n       ((max_value == parsed_number && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_number = parsed_number * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_number = 0xffffffff;\n    if (output_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      parsed_number = -parsed_number;\n    }\n    if (output_string == (byte **)0x0) {\n      return parsed_number;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input_string = next_byte + -1;\nLAB_00005fb8:\n  *output_string = input_string;\n  return parsed_number;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "output_string",
                "param_4": "base",
                "uVar1": "parsed_number",
                "uVar2": "current_char",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "digit_value",
                "uVar6": "max_value",
                "pbVar7": "current_byte",
                "pbVar8": "next_byte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "process_elf_relocations_00005fd8",
            "code": "\nvoid process_elf_relocations_00005fd8(undefined4 offset,undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_00005edc(relocation_table[16].r_offset,offset,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "process_elf_relocations_00005fd8",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_data_00005fec",
            "code": "\nvoid initializeData_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_data_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint data_length)\n\n{\n  byte current_byte;\n  char bit_0_of_current_byte;\n  char bit_8_of_current_byte;\n  char bit_16_of_current_byte;\n  char bit_24_of_current_byte;\n  byte *next_byte;\n  uint *current_uint_ptr;\n  byte *result;\n  uint bytes_remaining_in_current_uint;\n  uint bytes_remaining_in_data;\n  uint xored_uint;\n  uint xored_uint_shifted;\n  bool bit_0_of_xored_uint;\n  bool bit_8_of_xored_uint;\n  bool bit_16_of_xored_uint;\n  bool bit_24_of_xored_uint;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      current_uint_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_length = data_length - 1;\n      data = current_uint_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    bytes_remaining_in_current_uint = (uint)data & 7;\n    while( true ) {\n      if (bytes_remaining_in_current_uint == 0) {\n        bytes_remaining_in_current_uint = target_byte | target_byte << 8;\n        bytes_remaining_in_current_uint = bytes_remaining_in_current_uint | bytes_remaining_in_current_uint << 0x10;\n        bytes_remaining_in_data = data_length & 0xfffffff8;\n        do {\n          current_uint_ptr = data + 2;\n          bytes_remaining_in_data = bytes_remaining_in_data - 8;\n          xored_uint = *data ^ bytes_remaining_in_current_uint;\n          xored_uint_shifted = data[1] ^ bytes_remaining_in_current_uint;\n          bit_0_of_current_byte = -((char)xored_uint == '\\0');\n          bit_8_of_current_byte = -((char)(xored_uint >> 8) == '\\0');\n          bit_16_of_current_byte = -((char)(xored_uint >> 0x10) == '\\0');\n          bit_24_of_current_byte = -((char)(xored_uint >> 0x18) == '\\0');\n          xored_uint = CONCAT13(bit_24_of_current_byte,CONCAT12(bit_16_of_current_byte,CONCAT11(bit_8_of_current_byte,bit_0_of_current_byte)));\n          bit_0_of_xored_uint = (char)xored_uint_shifted != '\\0';\n          bit_8_of_xored_uint = (char)(xored_uint_shifted >> 8) != '\\0';\n          bit_16_of_xored_uint = (char)(xored_uint_shifted >> 0x10) != '\\0';\n          bit_24_of_xored_uint = (char)(xored_uint_shifted >> 0x18) != '\\0';\n          xored_uint_shifted = CONCAT13(bit_24_of_xored_uint * bit_24_of_current_byte - !bit_24_of_xored_uint,\n                            CONCAT12(bit_16_of_xored_uint * bit_16_of_current_byte - !bit_16_of_xored_uint,\n                                     CONCAT11(bit_8_of_xored_uint * bit_8_of_current_byte - !bit_8_of_xored_uint,bit_0_of_xored_uint * bit_0_of_current_byte - !bit_0_of_xored_uint)));\n          if (xored_uint_shifted != 0) {\n            if (xored_uint == 0) {\n              result = (byte *)((int)data + 5);\n              xored_uint = xored_uint_shifted;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xored_uint & 1) == 0) {\n              bit_0_of_xored_uint = (xored_uint & 0x100) == 0;\n              next_byte = result + 1;\n              if (bit_0_of_xored_uint) {\n                bit_0_of_xored_uint = (xored_uint & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (bit_0_of_xored_uint) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_uint_ptr;\n        } while (bytes_remaining_in_data != 0);\n        data_length = data_length & 7;\n        goto joined_r0x00006070;\n      }\n      current_uint_ptr = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == target_byte) break;\n      bytes_remaining_in_current_uint = (uint)current_uint_ptr & 7;\n      data = current_uint_ptr;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_uint_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "bit_0_of_current_byte",
                "cVar3": "bit_8_of_current_byte",
                "cVar4": "bit_16_of_current_byte",
                "cVar5": "bit_24_of_current_byte",
                "pbVar6": "next_byte",
                "puVar7": "current_uint_ptr",
                "pbVar8": "result",
                "uVar9": "bytes_remaining_in_current_uint",
                "uVar10": "bytes_remaining_in_data",
                "uVar11": "xored_uint",
                "uVar12": "xored_uint_shifted",
                "bVar13": "bit_0_of_xored_uint",
                "bVar14": "bit_8_of_xored_uint",
                "bVar15": "bit_16_of_xored_uint",
                "bVar16": "bit_24_of_xored_uint"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int src_start_index,undefined *src_array,int array_length)\n\n{\n  undefined *src_current_element;\n  undefined *src_end_ptr;\n  undefined *dest_ptr;\n  \n  src_end_ptr = src_array + array_length;\n  dest_ptr = (undefined *)(src_start_index + -1);\n  if (src_array != src_end_ptr) {\n    do {\n      src_current_element = src_array + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *src_array;\n      src_array = src_current_element;\n    } while (src_current_element != src_end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "src_start_index",
                "param_2": "src_array",
                "param_3": "array_length",
                "puVar1": "src_current_element",
                "puVar2": "src_end_ptr",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 input,int size,uint limit,undefined4 param_4)\n\n{\n  int result;\n  uint random;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      random = FUN_00006964();\n      result = size;\n      if ((random < limit) && (result = FUN_00004bd0(input,limit), result != 0)) {\n        FUN_000060b0(result,size,limit);\n        FUN_00004b34(input,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(input,limit,limit,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "input",
                "param_2": "size",
                "param_3": "limit",
                "iVar1": "result",
                "uVar2": "random"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "extract_data_00006192",
            "code": "\nundefined4 extractData_00006192(undefined4 status,undefined4 *dataPtr)\n\n{\n  if ((undefined4 *)ptrCheck != (undefined4 *)0x0) {\n    if ((undefined4 *)ptrCheck != dataPtr + 0x11) {\n      FUN_00004b34();\n    }\n    value1 = value2;\n    ptrCheck = 0;\n    if (value2 != 0) {\n      *dataPtr = value3;\n      return 0;\n    }\n  }\n  *dataPtr = value4;\n  value1 = 0;\n  *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "extract_data_00006192",
                "param_1": "status",
                "param_2": "dataPtr",
                "param_2[0xd]": "ptrCheck",
                "param_2[1]": "value1",
                "param_2[0x10]": "value2",
                "param_2[0xf]": "value3",
                "param_2[4]": "value4"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "reverse_and_improve_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint reverse_and_improve_000061cc(undefined4 input_flag,byte **byte_pointers,byte *byte_array,int **int_pointers)\n\n{\n  int result;\n  uint temp_value;\n  byte *temp_pointer;\n  uint temp_byte;\n  int **local_int_pointers;\n  undefined local_byte_array [256];\n  uint flag_value;\n  undefined4 temp_number;\n  uint temp_flag;\n  int output_value;\n  int counter;\n  undefined *local_byte_pointer;\n  int temp_flag_value;\n  undefined *local_function_pointer;\n  code *local_reverse_function;\n  \n  output_value = 0;\n  counter = 0;\n  local_function_pointer = &LAB_00006118_1;\n  local_reverse_function = FUN_00006192 + 1;\n  local_int_pointers = int_pointers;\n  local_byte_pointer = local_byte_array;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      temp_byte = (uint)*byte_array;\n      if (temp_byte == 0) {\n        return output_value;\n      }\n      temp_value = (byte)(&DAT_00007a99)[temp_byte] & 8;\n      temp_pointer = byte_array + 1;\n      if (((&DAT_00007a99)[temp_byte] & 8) == 0) break;\n      while (((byte_array = temp_pointer, 0 < (int)byte_pointers[1] ||\n              (result = (*local_reverse_function)(input_flag,byte_pointers), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**byte_pointers] << 0x1c) < 0))) {\n        counter = counter + 1;\n        byte_pointers[1] = byte_pointers[1] + -1;\n        *byte_pointers = *byte_pointers + 1;\n      }\n    }\n    if (temp_byte == 0x25) break;\nLAB_00006352:\n    if (((int)byte_pointers[1] < 1) && (result = (*local_reverse_function)(input_flag,byte_pointers), result != 0))\n    goto LAB_00006380;\n    if (**byte_pointers != temp_byte) {\n      return output_value;\n    }\n    *byte_pointers = *byte_pointers + 1;\n    counter = counter + 1;\n    byte_pointers[1] = byte_pointers[1] + -1;\n    byte_array = temp_pointer;\n  }\n  temp_flag = temp_value;\n  flag_value = temp_value;\n  if (byte_array[1] == 0x2a) {\n    temp_pointer = byte_array + 2;\n    flag_value = 0x10;\n  }\n  while( true ) {\n    temp_value = (uint)*temp_pointer;\n    if (9 < temp_value - 0x30) break;\n    temp_pointer = temp_pointer + 1;\n    temp_flag = (temp_flag * 10 + temp_value) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,temp_value,3);\n  if (result != 0) {\n    flag_value = 1 << (result - 0x7c02U & 0xff) | flag_value;\n    temp_pointer = temp_pointer + 1;\n  }\n  byte_array = temp_pointer + 1;\n  temp_value = (uint)*temp_pointer;\n  if (temp_value < 0x79) {\n    if (0x57 < temp_value) {\n      switch(temp_value) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        byte_array = (byte *)FUN_0000687c(local_byte_array,byte_array);\n        flag_value = flag_value | 0x40;\n        temp_flag_value = 1;\n        break;\n      case 99:\n        flag_value = flag_value | 0x40;\n        temp_flag_value = 0;\n        break;\n      case 100:\n      case 0x75:\n        temp_number = 10;\nLAB_000063a0:\n        if (temp_value < 0x6f) {\n          temp_flag_value = 3;\n        }\n        else {\n          temp_flag_value = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        temp_flag_value = 5;\n        break;\n      case 0x69:\n        temp_number = 0;\n        temp_flag_value = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag_value << 0x1b)) {\n          if ((int)(flag_value << 0x1f) < 0) {\n            *(short *)*local_int_pointers = (short)counter;\n            local_int_pointers = local_int_pointers + 1;\n          }\n          else {\n            **local_int_pointers = counter;\n            local_int_pointers = local_int_pointers + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        temp_number = 8;\n        temp_flag_value = 4;\n        break;\n      case 0x70:\n        flag_value = flag_value | 0x20;\n      case 0x58:\n      case 0x78:\n        flag_value = flag_value | 0x200;\n        temp_number = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        temp_flag_value = 2;\n      }\nLAB_000063ac:\n      if (((int)byte_pointers[1] < 1) && (result = (*local_reverse_function)(input_flag,byte_pointers), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag_value << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**byte_pointers] << 0x1c) < 0) {\n          counter = counter + 1;\n          temp_pointer = byte_pointers[1];\n          byte_pointers[1] = temp_pointer + -1;\n          if ((int)(temp_pointer + -1) < 1) {\n            result = (*local_reverse_function)(input_flag,byte_pointers);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *byte_pointers = *byte_pointers + 1;\n          }\n        }\n      }\n      if (temp_flag_value < 3) {\n        result = FUN_000064bc(input_flag,&flag_value,byte_pointers,&local_int_pointers);\n      }\n      else {\n        if (4 < temp_flag_value) goto LAB_000061f6;\n        result = FUN_0000656c(input_flag,&flag_value,byte_pointers,&local_int_pointers);\n      }\n      if (result == 1) {\n        return output_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (output_value == 0) {\nLAB_00006388:\n          output_value = -1;\n        }\n        else if ((*(ushort *)(byte_pointers + 3) & 0x40) != 0) {\n          output_value = -1;\n        }\n        return output_value;\n      }\n      goto LAB_000061f6;\n    }\n    temp_pointer = byte_array;\n    if (temp_value == 0x25) goto LAB_00006352;\n    if (temp_value < 0x26) {\n      if (temp_value != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (temp_value - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  temp_flag_value = 3;\n  temp_number = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "reverse_and_improve_000061cc",
                "param_1": "input_flag",
                "param_2": "byte_pointers",
                "param_3": "byte_array",
                "param_4": "int_pointers",
                "iVar1": "result",
                "uVar2": "temp_value",
                "pbVar3": "temp_pointer",
                "uVar4": "temp_byte",
                "local_2b0": "local_int_pointers",
                "auStack_2ac": "local_byte_array",
                "local_1ac": "flag_value",
                "local_1a8": "temp_number",
                "local_1a4": "temp_flag",
                "local_1a0": "output_value",
                "local_19c": "counter",
                "local_198": "local_byte_pointer",
                "local_194": "temp_flag_value",
                "local_30": "local_function_pointer",
                "local_2c": "local_reverse_function"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input,uint *parameters,byte **data_pointers,undefined4 *output_status)\n\n{\n  int result;\n  uint temp;\n  byte **current_data;\n  byte *current_byte;\n  byte *current_memory;\n  byte *next_memory;\n  int counter;\n  \n  if (parameters[2] == 0) {\n    if (parameters[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    parameters[2] = temp;\n  }\n  if (-1 < (int)(*parameters << 0x1b)) {\n    current_data = (byte **)*output_status;\n    *output_status = current_data + 1;\n    current_memory = *current_data;\n  }\n  counter = 0;\n  do {\n    temp = parameters[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(parameters[5] + (uint)**data_pointers) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*parameters & 0x10) == 0) && (parameters[3] = parameters[3] + 1, parameters[6] != 0)) {\n            *current_memory = 0;\n          }\n          parameters[4] = counter + parameters[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data_pointers] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_memory = current_memory;\n    if (-1 < (int)(*parameters << 0x1b)) {\n      next_memory = current_memory + 1;\n      *current_memory = **data_pointers;\n    }\n    current_byte = data_pointers[1];\n    *data_pointers = *data_pointers + 1;\n    temp = parameters[2] - 1;\n    data_pointers[1] = current_byte + -1;\n    counter = counter + 1;\n    parameters[2] = temp;\n    current_memory = next_memory;\n    if ((temp == 0) ||\n       (((int)(current_byte + -1) < 1 &&\n        (result = (*(code *)parameters[0x60])(input,data_pointers,temp,(code *)parameters[0x60],output_status),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "parameters",
                "param_3": "data_pointers",
                "param_4": "output_status",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "current_data",
                "pbVar4": "current_byte",
                "unaff_r6": "current_memory",
                "pbVar5": "next_memory",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "reverse_byte_sequence_0000656c",
            "code": "\nundefined4 reverse_byte_sequence_0000656c(undefined4 input_param,uint *output_param,byte **byte_array,undefined4 *result_param)\n\n{\n  int status;\n  undefined4 value;\n  code *conversion_func;\n  uint temp;\n  byte *byte_ptr;\n  uint count;\n  undefined4 *result_ptr;\n  uint *buffer_ptr;\n  uint *byte_ptr2;\n  uint *array_ptr;\n  int unaff_count;\n  int loop_var;\n  undefined *constants_array [4];\n  \n  constants_array[0] = &DAT_00007c2f;\n  constants_array[1] = &DAT_00007c32;\n  constants_array[2] = &DAT_00007c35;\n  conversion_func = (code *)&UNK_00004f81;\n  if (output_param[6] != 3) {\n    conversion_func = (code *)&UNK_00005fd5;\n  }\n  count = output_param[2];\n  temp = count - 1;\n  if (0x15c < temp) {\n    unaff_count = count - 0x15d;\n    count = 0x15d;\n  }\n  if (0x15c < temp) {\n    output_param[2] = count;\n  }\n  array_ptr = output_param + 7;\n  if (temp < 0x15d) {\n    unaff_count = 0;\n  }\n  *output_param = *output_param | 0xd00;\n  loop_var = 0;\n  byte_ptr2 = array_ptr;\n  do {\n    status = FUN_00006010(constants_array[loop_var],**byte_array,2);\n    if (status != 0) {\n      if (loop_var == 1) {\n        if (output_param[1] == 0) {\n          output_param[1] = 8;\n          *output_param = *output_param | 0x200;\n        }\n        temp = *output_param & 0xfffffaff;\nLAB_000065f4:\n        *output_param = temp;\n      }\n      else if (loop_var == 2) {\n        if ((*output_param & 0x600) != 0x200) goto LAB_00006624;\n        output_param[1] = 0x10;\n        temp = *output_param | 0x100;\n        goto LAB_000065f4;\n      }\n      temp = output_param[2];\n      output_param[2] = temp - 1;\n      if (temp != 0) {\n        byte_ptr = *byte_array;\n        *byte_array = byte_ptr + 1;\n        buffer_ptr = (uint *)((int)byte_ptr2 + 1);\n        *(byte *)byte_ptr2 = *byte_ptr;\n        byte_ptr = byte_array[1];\n        byte_array[1] = byte_ptr + -1;\n        byte_ptr2 = buffer_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (status = (*(code *)output_param[0x60])(input_param,byte_array), status != 0)) {\n          loop_var = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_var = loop_var + 1;\n  } while (loop_var != 3);\n  if (output_param[1] == 0) {\n    output_param[1] = 10;\n  }\n  FUN_0000687c(output_param[5],\"01234567]\" + (8 - output_param[1]));\n  loop_var = 0;\n  while( true ) {\n    buffer_ptr = byte_ptr2;\n    if (output_param[2] == 0) break;\n    byte_ptr = *byte_array;\n    temp = (uint)*byte_ptr;\n    if (*(char *)(output_param[5] + temp) == '\\0') break;\n    if ((temp == 0x30) && ((int)(*output_param << 0x14) < 0)) {\n      loop_var = loop_var + 1;\n      if (unaff_count != 0) {\n        unaff_count = unaff_count + -1;\n        output_param[2] = output_param[2] + 1;\n      }\n    }\n    else {\n      *output_param = *output_param & 0xfffff6ff;\n      buffer_ptr = (uint *)((int)byte_ptr2 + 1);\n      *(byte *)byte_ptr2 = *byte_ptr;\n    }\n    byte_ptr = byte_array[1];\n    byte_array[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      status = (*(code *)output_param[0x60])(input_param,byte_array);\n      if (status != 0) break;\n    }\n    else {\n      *byte_array = *byte_array + 1;\n    }\n    output_param[2] = output_param[2] - 1;\n    byte_ptr2 = buffer_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*output_param << 0x17) < 0) {\n    if (array_ptr < buffer_ptr) {\n      (*(code *)output_param[0x5f])(input_param,*(byte *)((int)buffer_ptr + -1),byte_array);\n      buffer_ptr = (uint *)((int)buffer_ptr + -1);\n    }\n    if (buffer_ptr == array_ptr) {\n      return 1;\n    }\n  }\n  if ((*output_param & 0x10) == 0) {\n    *(byte *)buffer_ptr = 0;\n    value = (*conversion_func)(input_param,array_ptr,0,output_param[1]);\n    result_ptr = (undefined4 *)*result_param;\n    temp = *output_param;\n    *result_param = result_ptr + 1;\n    result_ptr = (undefined4 *)*result_ptr;\n    if ((temp & 0x20) == 0) {\n      if ((int)(temp << 0x1f) < 0) {\n        *(short *)result_ptr = (short)value;\n      }\n      else {\n        *result_ptr = value;\n      }\n    }\n    else {\n      *result_ptr = value;\n    }\n    output_param[3] = output_param[3] + 1;\n  }\n  output_param[4] = (uint)((int)buffer_ptr + output_param[4] + (loop_var - (int)array_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "reverse_byte_sequence_0000656c",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "byte_array",
                "param_4": "result_param",
                "iVar1": "status",
                "uVar2": "value",
                "pcVar3": "conversion_func",
                "uVar4": "temp",
                "pbVar5": "byte_ptr",
                "uVar6": "count",
                "puVar7": "result_ptr",
                "puVar8": "buffer_ptr",
                "puVar9": "byte_ptr2",
                "puVar10": "array_ptr",
                "unaff_r9": "unaff_count",
                "iVar11": "loop_var",
                "local_34": "constants_array"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *dataStructure,undefined4 *paramPointer,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 reducedVar1;\n  int result;\n  undefined4 tempVar;\n  ushort flags;\n  uint shiftedValue;\n  \n  if ((dataStructure != (undefined4 *)0x0) && (dataStructure[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (paramPointer == &DAT_000079b8) {\n    paramPointer = (undefined4 *)dataStructure[1];\n  }\n  else if (paramPointer == (undefined4 *)&DAT_000079d8) {\n    paramPointer = (undefined4 *)dataStructure[2];\n  }\n  else if (paramPointer == (undefined4 *)&DAT_00007998) {\n    paramPointer = (undefined4 *)dataStructure[3];\n  }\n  flags = *(ushort *)(paramPointer + 3);\n  paramPointer[1] = 0;\n  shiftedValue = (uint)*(ushort *)(paramPointer + 3);\n  if ((int)(shiftedValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shiftedValue << 0x1d) < 0) {\n    if ((undefined4 *)paramPointer[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)paramPointer[0xd] != paramPointer + 0x11) {\n        FUN_00004b34(dataStructure);\n      }\n      paramPointer[1] = paramPointer[0x10];\n      paramPointer[0xd] = 0;\n      if (paramPointer[0x10] != 0) {\n        *paramPointer = paramPointer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shiftedValue << 0x1b)) {\n      *dataStructure = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shiftedValue << 0x1c) < 0) {\n      result = FUN_00004158(dataStructure,paramPointer,shiftedValue << 0x1c,shiftedValue,param4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      paramPointer[2] = 0;\n      *(ushort *)(paramPointer + 3) = *(ushort *)(paramPointer + 3) & 0xfff7;\n      paramPointer[6] = 0;\n    }\n    *(ushort *)(paramPointer + 3) = *(ushort *)(paramPointer + 3) | 4;\n  }\n  if (paramPointer[4] == 0) {\n    FUN_00005700(dataStructure,paramPointer);\n  }\n  flags = *(ushort *)(paramPointer + 3);\n  reducedVar1 = *(undefined2 *)(paramPointer + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(paramPointer + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(paramPointer + 3) = reducedVar1;\n    if ((flags & 9) == 9) {\n      FUN_0000404c(dataStructure,paramPointer);\n    }\n  }\n  tempVar = paramPointer[4];\n  *paramPointer = tempVar;\n  result = (*(code *)paramPointer[9])(dataStructure,paramPointer[8],tempVar,paramPointer[5]);\n  paramPointer[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  flags = *(ushort *)(paramPointer + 3);\n  if (result != 0) {\n    tempVar = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (result != 0) {\n    paramPointer[1] = tempVar;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(paramPointer + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "dataStructure",
                "param_2": "paramPointer",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "reducedVar1",
                "iVar2": "result",
                "uVar3": "tempVar",
                "uVar4": "flags",
                "uVar5": "shiftedValue"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_byte_sequence_0000687c",
            "code": "\nbyte * extract_byte_sequence_0000687c(int sequence_length,byte *byte_sequence)\n\n{\n  byte *result;\n  uint value;\n  int index;\n  uint byte;\n  uint start_index;\n  uint end_index;\n  bool check_flag;\n  \n  byte = (uint)*byte_sequence;\n  check_flag = byte == 0x5e;\n  if (check_flag) {\n    byte = (uint)byte_sequence[1];\n    byte_sequence = byte_sequence + 2;\n  }\n  else {\n    byte_sequence = byte_sequence + 1;\n  }\n  index = sequence_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = check_flag;\n  } while (index != sequence_length + 0xff);\n  if (byte == 0) {\n    result = byte_sequence + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_index = byte;\n      *(bool *)(sequence_length + start_index) = !check_flag;\n      byte_sequence = byte_sequence + 1;\n      while( true ) {\n        byte = (uint)byte_sequence[-1];\n        if (byte != 0x2d) break;\n        end_index = (uint)*byte_sequence;\n        if ((end_index == 0x5d) || (value = start_index, (int)end_index < (int)start_index)) goto LAB_000068aa;\n        do {\n          value = value + 1;\n          *(bool *)(sequence_length + value) = !check_flag;\n        } while ((int)value < (int)end_index);\n        index = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          index = 0;\n        }\n        start_index = start_index + 1 + index;\n        byte_sequence = byte_sequence + 2;\n      }\n      result = byte_sequence;\n    } while ((byte != 0x5d) && (result = byte_sequence + -1, byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_byte_sequence_0000687c",
                "param_1": "sequence_length",
                "param_2": "byte_sequence",
                "pbVar1": "result",
                "uVar2": "value",
                "iVar3": "index",
                "uVar4": "byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "check_flag"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_buffer_000068f0",
            "code": "\nundefined4 initializeBuffer_000068f0(undefined4 data,int *buffer)\n\n{\n  int newAddress;\n  int oldSize;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    newAddress = FUN_00004bd0(data,0x400);\n    if (newAddress != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = newAddress;\n      *(undefined *)(newAddress + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(newAddress + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(newAddress + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = newAddress + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    oldSize = buffer[0xe];\n    newAddress = FUN_000060cc(data,(int *)buffer[0xd],oldSize << 1);\n    if (newAddress != 0) {\n      FUN_000060b0(newAddress + oldSize,newAddress,oldSize);\n      buffer[0xd] = newAddress;\n      buffer[0xe] = oldSize << 1;\n      *buffer = newAddress + oldSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_buffer_000068f0",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "newAddress",
                "iVar2": "oldSize"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 result,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "extracted_function_00006974",
            "code": "\nundefined8 extractedFunction_00006974(int input1,int input2,int input3,int input4)\n\n{\n  int newVar1;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 < 0) {\n      input1 = 0;\n      input2 = -0x80000000;\n    }\n    else if (input2 != 0 || input1 != 0) {\n      input2 = 0x7fffffff;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  if (input2 < 0) {\n    newVar1 = -input2 - (uint)(input1 != 0);\n    if (input4 < 0) {\n      result = FUN_00006a14(-input1,newVar1,-input3,-input4 - (uint)(input3 != 0),temp);\n      return result;\n    }\n    result = FUN_00006a14(-input1,newVar1,input3,input4,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (input4 < 0) {\n    result = FUN_00006a14(input1,input2,-input3,-input4 - (uint)(input3 != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "extracted_function_00006974",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "newVar1",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "perform_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong performDivision_00006a14(uint numerator,uint denominator,uint shiftVal1,uint shiftVal2,uint *quotient)\n\n{\n  code *jumpTable;\n  uint result1;\n  int shiftCount;\n  uint temp1;\n  uint temp2;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  bool carryFlag;\n  ulonglong returnValue;\n  \n  if (shiftVal2 == 0) {\n    if (denominator < shiftVal1) {\n      shiftCount = LZCOUNT(shiftVal1);\n      uVar5 = shiftVal1;\n      if (shiftCount != 0) {\n        uVar5 = shiftVal1 << shiftCount;\n        denominator = numerator >> (0x20U - shiftCount & 0xff) | denominator << shiftCount;\n        numerator = numerator << shiftCount;\n      }\n      uVar6 = uVar5 >> 0x10;\n      uVar8 = denominator / uVar6;\n      temp1 = numerator >> 0x10 | (denominator - uVar6 * uVar8) * 0x10000;\n      result1 = uVar8 * (uVar5 & 0xffff);\n      temp2 = uVar8;\n      if (temp1 <= result1 && result1 - temp1 != 0) {\n        carryFlag = CARRY4(uVar5,temp1);\n        temp1 = uVar5 + temp1;\n        temp2 = uVar8 - 1;\n        if ((carryFlag == false) && (temp1 <= result1 && result1 - temp1 != 0)) {\n          temp2 = uVar8 - 2;\n          temp1 = temp1 + uVar5;\n        }\n      }\n      uVar8 = (temp1 - result1) / uVar6;\n      uVar6 = numerator & 0xffff | ((temp1 - result1) - uVar6 * uVar8) * 0x10000;\n      temp1 = uVar8 * (uVar5 & 0xffff);\n      result1 = uVar8;\n      if (uVar6 <= temp1 && temp1 - uVar6 != 0) {\n        carryFlag = CARRY4(uVar5,uVar6);\n        uVar6 = uVar5 + uVar6;\n        result1 = uVar8 - 1;\n        if ((carryFlag == false) && (uVar6 <= temp1 && temp1 - uVar6 != 0)) {\n          result1 = uVar8 - 2;\n          uVar6 = uVar6 + uVar5;\n        }\n      }\n      uVar6 = uVar6 - temp1;\n      result1 = result1 | temp2 << 0x10;\n      uVar5 = 0;\n    }\n    else {\n      if (shiftVal1 == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x6abc);\n        returnValue = (*jumpTable)();\n        return returnValue;\n      }\n      shiftCount = LZCOUNT(shiftVal1);\n      if (shiftCount == 0) {\n        denominator = denominator - shiftVal1;\n        uVar9 = shiftVal1 >> 0x10;\n        uVar7 = shiftVal1 & 0xffff;\n        uVar5 = 1;\n        temp2 = shiftVal1;\n      }\n      else {\n        temp2 = shiftVal1 << shiftCount;\n        uVar9 = temp2 >> 0x10;\n        result1 = denominator >> (0x20U - shiftCount & 0xff);\n        uVar5 = numerator >> (0x20U - shiftCount & 0xff) | denominator << shiftCount;\n        temp1 = result1 / uVar9;\n        uVar7 = temp2 & 0xffff;\n        uVar8 = uVar5 >> 0x10 | (result1 - uVar9 * temp1) * 0x10000;\n        uVar6 = temp1 * uVar7;\n        numerator = numerator << shiftCount;\n        result1 = temp1;\n        if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n          carryFlag = CARRY4(temp2,uVar8);\n          uVar8 = temp2 + uVar8;\n          result1 = temp1 - 1;\n          if ((carryFlag == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n            result1 = temp1 - 2;\n            uVar8 = uVar8 + temp2;\n          }\n        }\n        temp1 = (uVar8 - uVar6) / uVar9;\n        denominator = uVar5 & 0xffff | ((uVar8 - uVar6) - uVar9 * temp1) * 0x10000;\n        uVar6 = temp1 * uVar7;\n        uVar5 = temp1;\n        if (denominator <= uVar6 && uVar6 - denominator != 0) {\n          carryFlag = CARRY4(temp2,denominator);\n          denominator = temp2 + denominator;\n          uVar5 = temp1 - 1;\n          if ((carryFlag == false) && (denominator <= uVar6 && uVar6 - denominator != 0)) {\n            uVar5 = temp1 - 2;\n            denominator = denominator + temp2;\n          }\n        }\n        denominator = denominator - uVar6;\n        uVar5 = uVar5 | result1 << 0x10;\n      }\n      uVar8 = denominator / uVar9;\n      uVar6 = numerator >> 0x10 | (denominator - uVar9 * uVar8) * 0x10000;\n      result1 = uVar7 * uVar8;\n      temp1 = uVar8;\n      if (uVar6 <= result1 && result1 - uVar6 != 0) {\n        carryFlag = CARRY4(temp2,uVar6);\n        uVar6 = temp2 + uVar6;\n        temp1 = uVar8 - 1;\n        if ((carryFlag == false) && (uVar6 <= result1 && result1 - uVar6 != 0)) {\n          temp1 = uVar8 - 2;\n          uVar6 = uVar6 + temp2;\n        }\n      }\n      uVar8 = (uVar6 - result1) / uVar9;\n      uVar6 = numerator & 0xffff | ((uVar6 - result1) - uVar9 * uVar8) * 0x10000;\n      uVar7 = uVar7 * uVar8;\n      result1 = uVar8;\n      if (uVar6 <= uVar7 && uVar7 - uVar6 != 0) {\n        carryFlag = CARRY4(temp2,uVar6);\n        uVar6 = temp2 + uVar6;\n        result1 = uVar8 - 1;\n        if ((carryFlag == false) && (uVar6 <= uVar7 && uVar7 - uVar6 != 0)) {\n          result1 = uVar8 - 2;\n          uVar6 = uVar6 + temp2;\n        }\n      }\n      uVar6 = uVar6 - uVar7;\n      result1 = result1 | temp1 << 0x10;\n    }\n    if (quotient != (uint *)0x0) {\n      *quotient = uVar6 >> LZCOUNT(shiftVal1);\n      quotient[1] = 0;\n    }\n  }\n  else if (denominator < shiftVal2) {\n    if (quotient != (uint *)0x0) {\n      *quotient = numerator;\n      quotient[1] = denominator;\n      return 0;\n    }\n    result1 = 0;\n    uVar5 = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(shiftVal2);\n    if (shiftCount != 0) {\n      uVar7 = 0x20 - shiftCount;\n      temp1 = shiftVal1 >> (uVar7 & 0xff) | shiftVal2 << shiftCount;\n      uVar9 = temp1 >> 0x10;\n      result1 = denominator >> (uVar7 & 0xff);\n      uVar5 = numerator >> (uVar7 & 0xff) | denominator << shiftCount;\n      uVar6 = result1 / uVar9;\n      temp2 = uVar5 >> 0x10 | (result1 - uVar9 * uVar6) * 0x10000;\n      uVar8 = uVar6 * (temp1 & 0xffff);\n      numerator = numerator << shiftCount;\n      result1 = uVar6;\n      if (temp2 <= uVar8 && uVar8 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        result1 = uVar6 - 1;\n        if ((carryFlag == false) && (temp2 <= uVar8 && uVar8 - temp2 != 0)) {\n          result1 = uVar6 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      uVar6 = (temp2 - uVar8) / uVar9;\n      temp2 = uVar5 & 0xffff | ((temp2 - uVar8) - uVar9 * uVar6) * 0x10000;\n      uVar8 = uVar6 * (temp1 & 0xffff);\n      uVar5 = uVar6;\n      if (temp2 <= uVar8 && uVar8 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        uVar5 = uVar6 - 1;\n        if ((carryFlag == false) && (temp2 <= uVar8 && uVar8 - temp2 != 0)) {\n          uVar5 = uVar6 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      uVar5 = uVar5 | result1 << 0x10;\n      returnValue = (ulonglong)uVar5 * (ulonglong)(shiftVal1 << shiftCount);\n      if (CONCAT44(temp2 - uVar8,numerator) < returnValue) {\n        returnValue = returnValue - CONCAT44(temp1,shiftVal1 << shiftCount);\n        uVar5 = uVar5 - 1;\n      }\n      if (quotient != (uint *)0x0) {\n        result1 = ((temp2 - uVar8) - (int)(returnValue >> 0x20)) - (uint)(numerator < (uint)returnValue);\n        *quotient = result1 << (uVar7 & 0xff) | numerator - (uint)returnValue >> shiftCount;\n        quotient[1] = result1 >> shiftCount;\n      }\n      return (ulonglong)uVar5;\n    }\n    if ((shiftVal2 < denominator) || (shiftVal1 <= numerator)) {\n      carryFlag = numerator < shiftVal1;\n      numerator = numerator - shiftVal1;\n      denominator = (denominator - shiftVal2) - (uint)carryFlag;\n      result1 = 1;\n    }\n    else {\n      result1 = 0;\n    }\n    uVar5 = 0;\n    if (quotient != (uint *)0x0) {\n      *quotient = numerator;\n      quotient[1] = denominator;\n    }\n  }\n  return CONCAT44(uVar5,result1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "perform_division_00006a14",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "shiftVal1",
                "param_4": "shiftVal2",
                "param_5": "quotient",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "result1",
                "iVar2": "shiftCount",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "bVar10": "carryFlag",
                "uVar11": "returnValue"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 137205,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}