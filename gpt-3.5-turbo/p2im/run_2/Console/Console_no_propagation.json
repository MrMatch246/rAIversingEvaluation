{
    "functions": {
        "FUN_000026c0": {
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0",
                "FUN_00002910": "clear_data",
                "PTR_DAT_000026d4": "data_pointer"
            },
            "code": "void initialize_data_000026c0(void)\n{\n  clear_data();\n  *PTR_DAT_000026d4 = 0;\n  return;\n}",
            "called": [
                "FUN_00002910"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_data_000026c0"
        },
        "FUN_00004bd0": {
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "MEMORY_POOL_POINTER",
                "uVar2": "allocation_result",
                "puVar3": "current_block",
                "iVar4": "remaining_bytes",
                "uVar5": "remaining_size",
                "puVar6": "previous_block",
                "uVar7": "aligned_size"
            },
            "code": "uint allocate_memory_block_00004bd0(undefined4 *result, uint size, undefined4 param_3, undefined4 param_4)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    initialize_memory_pool();\n    uint *current_block = *(uint **)MEMORY_POOL_START;\n    uint *previous_block = *(uint **)MEMORY_POOL_START;\n    for (; current_block != (uint *)0x0; previous_block = current_block, current_block = (uint *)current_block[1]) {\n      uint remaining_size = *current_block - aligned_size;\n      if (-1 < (int)remaining_size) {\n        if (0xb < remaining_size) {\n          *current_block = remaining_size;\n          current_block = (uint *)((int)current_block + remaining_size);\n          goto LAB_00004c34;\n        }\n        uint next_block = current_block[1];\n        if (previous_block == current_block) {\n          *(uint **)MEMORY_POOL_START = (uint *)next_block;\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = next_block;\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (*(int *)MEMORY_POOL_START == 0) {\n      uint allocation_result = allocate_memory(result, 0, previous_block, 0, param_4);\n      *(undefined4 *)MEMORY_POOL_POINTER = allocation_result;\n    }\n    uint *allocation_result = (uint *)allocate_memory(result, aligned_size);\n    if ((allocation_result != (uint *)0xffffffff) && ((current_block = (uint *)((int)allocation_result + 3U & 0xfffffffc), allocation_result == current_block || (remaining_size = allocate_memory(result, (int)current_block - (int)allocation_result), remaining_size != -1)))) {\n      *current_block = aligned_size;\nLAB_00004c42:\n      finalize_memory_pool(result);\n      uint block_end = (int)current_block + 0xbU & 0xfffffff8;\n      int remaining_bytes = block_end - (int)(current_block + 1);\n      if (remaining_bytes == 0) {\n        return block_end;\n      }\n      *(uint *)((int)current_block + remaining_bytes) = (int)(current_block + 1) - block_end;\n      return block_end;\n    }\n    *result = 0xc;\n    finalize_memory_pool(result);\n  }\n  return 0;\n}",
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004bd0",
            "calling": [
                "FUN_000068f0",
                "FUN_00005100",
                "FUN_00004248",
                "FUN_000060cc",
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00004bd0"
        },
        "FUN_00000794": {
            "renaming": {
                "FUN_00000794": "allocate_memory_and_fill_with_values_00000794",
                "extraout_r1": "extraout_return_value",
                "iVar1": "i",
                "puVar2": "memory_pointer",
                "uVar3": "aligned_memory_pointer",
                "iStack_1c": "i",
                "iStack_18": "i",
                "piStack_14": "stack_pointer"
            },
            "code": "int *allocate_memory_and_fill_with_values_00000794(void)\n{\n  int extraout_return_value;\n  int i;\n  undefined4 *memory_pointer;\n  uint aligned_memory_pointer;\n  int *stack_pointer;\n\n  initialize_memory();\n  *(undefined4 *)(memory_region_start + *start_pointer * 4) = 0;\n  *end_pointer = *end_pointer - 1;\n  initialize_function(*function_pointer, 0);\n  memory_pointer = function_pointer;\n  i = 0;\n  *function_pointer = 0;\n  initialize_some_other_stuff();\n  aligned_memory_pointer = (int)memory_pointer + i & 0xfffffffc;\n  stack_pointer = (int *)(aligned_memory_pointer - 4);\n  *stack_pointer = 0x77777777;\n  if (((uint)stack_pointer & 7) != 0) {\n    stack_pointer = (int *)(aligned_memory_pointer - 8);\n    *stack_pointer = 0x88888888;\n  }\n  stack_pointer[-1] = 0x1000000;\n  stack_pointer[-2] = i << 0xd;\n  stack_pointer[-3] = start_of_data;\n  stack_pointer = stack_pointer + -4;\n  *stack_pointer = 0;\n  for (i = 3; 0 < i; i--) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = i;\n  }\n  stack_pointer = stack_pointer + -1;\n  *stack_pointer = extraout_return_value;\n  for (i = 0xb; 3 < i; i--) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = i;\n  }\n  stack_pointer[-1] = -3;\n  return stack_pointer - 1;\n}\n",
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000794",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_and_fill_with_values_00000794"
        },
        "FUN_000064bc": {
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "data_length",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "callback_result",
                "puVar1": "PTR_DAT_00006568",
                "iVar2": "callback_status",
                "iVar7": "output_length",
                "pbVar5": "input_buffer",
                "pbVar6": "output_buffer",
                "ppbVar4": "data_pointer",
                "uVar3": "remaining_data_length",
                "unaff_r6": "output_byte"
            },
            "code": "int process_data_000064bc(uint32_t data_length, uint32_t *flags, uint8_t **data, uint32_t *callback_result) {\n  uint8_t *current_byte;\n  uint8_t *output_byte;\n  uint8_t *output_buffer;\n  uint32_t callback_status;\n  uint32_t output_length = 0;\n  if (flags[2] == 0) {\n    if (flags[6] == 0) {\n      flags[2] = 1;\n    }\n    else {\n      flags[2] = UINT32_MAX;\n    }\n  }\n  if (-1 < (int32_t)(*flags << 0x1b)) {\n    uint8_t **data_pointer = (uint8_t **)*callback_result;\n    *callback_result = data_pointer + 1;\n    current_byte = *data_pointer;\n  }\n  callback_status = 0;\n  do {\n    uint32_t data_type = flags[6];\n    if (data_type != 0) {\n      if (data_type == 1) {\n        if (*(char *)(flags[5] + (uint32_t)**data) == '\\0') {\n          if (output_length == 0) {\n            return 1;\n          }\n          goto end_of_data_processing;\n        }\n      }\n      else if ((data_type != 2) || ((int32_t)((uint32_t)(byte)PTR_DAT_00006568[**data] << 0x1c) < 0)) {\n        goto end_of_data_processing;\n      }\n    }\n    output_buffer = output_byte;\n    if (-1 < (int32_t)(*flags << 0x1b)) {\n      output_buffer = output_byte + 1;\n      *output_byte = **data;\n    }\n    uint8_t *input_buffer = (*data) + 1;\n    *data = input_buffer;\n    uint32_t remaining_data_length = flags[2] - 1;\n    output_length = output_length + 1;\n    flags[2] = remaining_data_length;\n    output_byte = output_buffer;\n    if ((remaining_data_length == 0) || (((int32_t)(input_buffer + -1) < 1 && ((callback_status = (*(code *)flags[0x60])(data_length, data, remaining_data_length, (code *)flags[0x60], callback_result)) != 0)))) {\n      goto end_of_data_processing;\n    }\n  } while (true);\n\nend_of_data_processing:\n  if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n    *output_byte = 0;\n  }\n  flags[4] = output_length + flags[4];\n  return callback_status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000064bc",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "process_data_000064bc"
        },
        "FUN_00002970": {
            "renaming": {
                "FUN_00002970": "set_flag_to_false_00002970",
                "PTR_00002990": "DAT_00002990",
                "DAT_00002990": "DAT_00002990"
            },
            "code": "void set_flag_to_false_00002970(void)\n{\n  uint32_t *flag_ptr = (uint32_t *)(PTR_00002990 + 0x14);\n  *flag_ptr &= 0xFFFFFFEF;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002970",
            "calling": [
                "FUN_000026e4"
            ],
            "imported": false,
            "current_name": "set_flag_to_false_00002970"
        },
        "FUN_00000dc0": {
            "renaming": {
                "FUN_00000dc0": "call_first_function_00000dc0",
                "FUN_00000cc0": "call_second_function"
            },
            "code": "void call_first_function_00000dc0(void)\n{\n  call_second_function();\n  return;\n}",
            "called": [
                "FUN_00000cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dc0",
            "calling": [],
            "imported": false,
            "current_name": "call_first_function_00000dc0"
        },
        "FUN_00000d0c": {
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "param",
                "bVar1": "is_privileged"
            },
            "code": "void enable_irq_interrupts_if_privileged_00000d0c(uint param)\n{\n  bool is_privileged = (bool)isCurrentModePrivileged();\n  if (is_privileged) {\n    enableIRQinterrupts((param & 1) == 1);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d0c",
            "calling": [
                "FUN_00001c84",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c"
        },
        "FUN_00003d94": {
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "function_pointer",
                "param_2": "input",
                "uVar1": "result"
            },
            "code": "int execute_function_00003d94(int function_pointer, int input) {\n  int result;\n  if (function_pointer == 0) {\n    result = -19;\n  }\n  else {\n    result = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(int *)(function_pointer + 4), input);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d94",
            "calling": [
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "execute_function_00003d94"
        },
        "FUN_0000579c": {
            "renaming": {
                "FUN_0000579c": "do_nothing_with_pointer_0000579c",
                "PTR_DAT_000057a4": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_0000579c(void)\n{\n  do_nothing(PTR_DAT_000057a4);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000579c",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_0000579c"
        },
        "FUN_000015d0": {
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "param_1": "start_index",
                "param_2": "dest_address",
                "param_3": "num_bytes",
                "iVar1": "memory_location",
                "local_c": "i"
            },
            "code": "void copy_data_to_memory_000015d0(int start_index, int dest_address, uint num_bytes) {\n  int memory_location = *(int *)(PTR_DAT_00001624 + start_index * 0x20);\n  for (uint i = 0; i < num_bytes; i++) {\n    do {\n    } while (-1 < *(char *)(memory_location + 4));\n    *(undefined *)(memory_location + 7) = *(undefined *)(i + dest_address);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000015d0",
            "calling": [
                "FUN_00000e38"
            ],
            "imported": false,
            "current_name": "copy_data_to_memory_000015d0"
        },
        "FUN_00005e68": {
            "renaming": {
                "FUN_00005e68": "decode_and_execute_command_00005e68",
                "param_1": "command",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "local_72": "decoded_arg4",
                "local_6c": "decoded_arg6",
                "local_5c": "decoded_arg8",
                "local_4c": "decoded_arg9",
                "local_38": "decoded_arg10",
                "local_74": "decoded_arg5",
                "local_7c": "decoded_arg7",
                "local_80": "decoded_command",
                "uStack_8": "decoded_arg11",
                "uStack_4": "decoded_arg12"
            },
            "code": "void decode_and_execute_command_00005e68(undefined4 command, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  \n  undefined4 decoded_command;\n  undefined4 decoded_arg2;\n  undefined2 decoded_arg4;\n  undefined2 decoded_arg5;\n  undefined4 decoded_arg6;\n  undefined4 decoded_arg7;\n  undefined *decoded_arg8;\n  undefined4 decoded_arg9;\n  undefined4 decoded_arg10;\n  undefined4 decoded_arg11;\n  undefined4 decoded_arg12;\n\n  decoded_arg4 = 0xffff;\n  decoded_arg6 = FUN_00005ecc();\n  decoded_arg8 = PTR_LAB_00004dea_1_00005eb4;\n  decoded_arg9 = 0;\n  decoded_arg10 = 0;\n  decoded_arg5 = 0x204;\n  decoded_arg7 = decoded_arg6;\n  decoded_command = arg1;\n  decoded_arg11 = arg3;\n  decoded_arg12 = arg4;\n\n  FUNC_000061cc(*DAT_00005eb8, &decoded_command, arg2, &decoded_arg11);\n  return;\n}",
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e68",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "decode_and_execute_command_00005e68"
        },
        "FUN_00000dcc": {
            "renaming": {
                "FUN_00000dcc": "set_data_values_00000dcc",
                "DAT_00000df0": "data_array"
            },
            "code": "void set_data_values_00000dcc(void)\n{\n    int* DAT_00000df0 = DAT_00000df0;\n    DAT_00000df0[7] = 0xc520;\n    DAT_00000df0[7] = 0xd928;\n    *DAT_00000df0 = 0xd2;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dcc",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "set_data_values_00000dcc"
        },
        "FUN_0000285c": {
            "renaming": {
                "FUN_0000285c": "set_flag_and_save_param_to_memory_0000285c",
                "param_1": "param",
                "puVar1": "mem_ptr",
                "DAT_00002890": "mem_ptr"
            },
            "code": "void set_flag_and_save_param_to_memory_0000285c(int param){\n  int *DAT_00002890 = DAT_00002890;\n  DAT_00002890[5] = DAT_00002890[5] & 0xffffffef;\n  *DAT_00002890 = param;\n  DAT_00002890[5] = DAT_00002890[5] | 0x10;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000285c",
            "calling": [
                "FUN_00002600"
            ],
            "imported": false,
            "current_name": "set_flag_and_save_param_to_memory_0000285c"
        },
        "FUN_00000e58": {
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "FUN_00000cd0": "initialize_system"
            },
            "code": "void run_infinite_loop_00000e58(void)\n{\n  initialize_system();\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e58",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_00000e58"
        },
        "FUN_00001778": {
            "renaming": {
                "FUN_00001778": "set_bit_in_byte_after_masking_00001778",
                "DAT_000017d0": "data_offset",
                "DAT_000017d8": "data_offset_2",
                "byte": "uint8_t",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void set_bit_in_byte_after_masking_00001778(void)\n{\n    byte* DAT_ptr = (byte*)(DAT_000017d0 + 1);\n    *DAT_ptr = (*DAT_ptr & 0xcf) | 0x20;\n    FUN_00001710(DAT_000017d8, 2);\n    return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001778",
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_bit_in_byte_after_masking_00001778"
        },
        "FUN_000026d8": {
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8",
                "FUN_0000294c": "initialize_components"
            },
            "code": "void initialize_system_000026d8(void)\n{\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026d8",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_system_000026d8"
        },
        "FUN_00000566": {
            "renaming": {
                "FUN_00000566": "count_leading_zeroes_from_int_00000566",
                "param_1": "input",
                "bVar1": "byte_4",
                "bVar2": "byte_1",
                "bVar3": "byte_2",
                "bVar4": "byte_3",
                "uVar5": "leading_zeroes",
                "(uint)": "",
                "|": "",
                "&": "",
                ">>": "",
                "<<": "",
                "byte": "uint8_t",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t count_leading_zeroes_from_int_00000566(uint32_t num) {\n    uint32_t mask = 0x80000000;\n    for (int i = 0; i < 32; i++) {\n        if ((num & mask) != 0) {\n            return i;\n        }\n        mask >>= 1;\n    }\n    return 32;\n}\n\nuint32_t reverse_bits(uint32_t num) {\n    uint32_t reversed_num = 0;\n    for (int i = 0; i < 32; i++) {\n        reversed_num <<= 1;\n        reversed_num |= num & 1;\n        num >>= 1;\n    }\n    return reversed_num;\n}\n\nuint32_t count_leading_zeroes(uint32_t num) {\n    if (num == 0) {\n        return 32;\n    }\n    return count_leading_zeroes_from_int_00000566(reverse_bits(num));\n}\n\nuint32_t FUN_00000566(uint32_t input) {\n    uint8_t byte_1 = (uint8_t)input;\n    uint8_t byte_2 = (uint8_t)(input >> 8);\n    uint8_t byte_3 = (uint8_t)(input >> 16);\n    uint8_t byte_4 = (uint8_t)(input >> 24);\n\n    uint32_t reversed_bits = reverse_bits((byte_1 << 24) | (byte_2 << 16) | (byte_3 << 8) | byte_4);\n\n    uint32_t leading_zeroes = count_leading_zeroes(reversed_bits);\n\n    if (input == 0) {\n        leading_zeroes = 32;\n    }\n\n    return leading_zeroes;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000566",
            "calling": [
                "FUN_00000610"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_from_int_00000566"
        },
        "FUN_00001d08": {
            "renaming": {
                "FUN_00001d08": "calculate_address_00001d08",
                "param_1": "address",
                "param_2": "offset",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_address_00001d08(uint32_t address, int offset) {\n    uint32_t upper_bits = address & 0xf0000000;\n    uint32_t lower_bits = address & 0xfffff;\n    uint32_t shifted_lower_bits = lower_bits << 5;\n    int result = offset * 4 + upper_bits + shifted_lower_bits + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d08",
            "calling": [
                "FUN_00001d3a"
            ],
            "imported": false,
            "current_name": "calculate_address_00001d08"
        },
        "FUN_000031fc": {
            "renaming": {
                "FUN_000031fc": "calculate_result_000031fc",
                "param_1": "input_value",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "iVar2": "adjusted_input_value1_final",
                "bVar1": "adjusted_input_value2_byte",
                "adjusted_input_value1": "adjusted_input_value1",
                "DAT_00003280": "constant_1",
                "DAT_00003284": "constant_2",
                "DAT_00003288": "constant_3"
            },
            "code": "int calculate_result_000031fc(int input_value, int input_value2, int input_value3) {\n        int adjusted_input_value2 = input_value2;\n        if (input_value2 < 3) {\n            adjusted_input_value2 = 1;\n        }\n        byte adjusted_input_value2_byte = (byte)adjusted_input_value2;\n        if (2 < input_value2) {\n            adjusted_input_value2_byte = 0;\n        }\n        int adjusted_input_value1 = input_value - (uint)adjusted_input_value2_byte;\n        int adjusted_input_value1_final = adjusted_input_value1;\n        if (adjusted_input_value1 < 0) {\n            adjusted_input_value1_final = adjusted_input_value1 + 3;\n        }\n        int result = (((adjusted_input_value1_final >> 2) + adjusted_input_value1) - (int)((longlong)DAT_00003280 * (longlong)adjusted_input_value1 >> 0x25)) +\n            (int)((longlong)DAT_00003280 * (longlong)adjusted_input_value1 >> 0x27) +\n            *(int *)(DAT_00003284 + (input_value2 + -1) * 4) + input_value3;\n        return result + (((int)((ulonglong)((longlong)DAT_00003288 * (longlong)result) >> 0x20) +\n                     result >> 2) - (result >> 0x1f)) * -7;\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031fc",
            "calling": [
                "FUN_0000328c"
            ],
            "imported": false,
            "current_name": "calculate_result_000031fc"
        },
        "FUN_000016ec": {
            "renaming": {
                "FUN_000016ec": "set_flag_to_true_000016ec",
                "param_1": "num",
                "param_2": "buffer",
                "puVar1": "flag_ptr",
                "FUN_00001696": "get_flag_pointer"
            },
            "code": "void set_flag_to_true_000016ec(int num, char* buffer){\n  char* flag_ptr;\n  flag_ptr = (char*)get_flag_pointer(num, buffer);\n  *flag_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016ec",
            "calling": [
                "FUN_0000182c",
                "FUN_00001a18",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "set_flag_to_true_000016ec"
        },
        "FUN_00005100": {
            "renaming": {
                "FUN_00005100": "FUNC_00005100"
            },
            "code": "\nvoid FUNC_00005100(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined4 *puVar3;\n  undefined4 uVar4;\n  int iVar5;\n  char *pcVar6;\n  int iVar7;\n  int iVar8;\n  char cVar9;\n  char *pcVar10;\n  bool bVar11;\n  ushort *puVar12;\n  int *piVar13;\n  ushort *puVar14;\n  int *piVar15;\n  ushort local_3c;\n  ushort local_3a;\n  ushort local_38;\n  ushort local_36;\n  ushort local_34;\n  ushort local_32;\n  int local_30;\n  char *local_2c [2];\n  \n  uVar4 = *DAT_00005108;\n  iVar5 = FUN_000056b0();\n  puVar1 = PTR_DAT_000053d8;\n  pcVar6 = (char *)FUN_000056a0(uVar4,PTR_DAT_000053d4);\n  puVar2 = PTR_DAT_000053e0;\n  if (pcVar6 == (char *)0x0) {\n    *(undefined4 *)PTR_DAT_000053dc = 0;\n    *(undefined4 *)PTR_DAT_000053e4 = 0;\n    puVar3 = DAT_000053e8;\n    uVar4 = *(undefined4 *)puVar1;\n    *DAT_000053e8 = puVar2;\n    puVar3[1] = puVar2;\n    FUN_00005780(uVar4);\n    *(undefined4 *)puVar1 = 0;\n  }\n  else if ((*(int *)puVar1 == 0) || (iVar7 = FUN_00004e52(), iVar7 != 0)) {\n    FUN_00005780(*(undefined4 *)puVar1);\n    iVar7 = FUN_00005ecc(pcVar6);\n    iVar7 = FUN_00004bd0(uVar4,iVar7 + 1);\n    *(int *)puVar1 = iVar7;\n    if (iVar7 != 0) {\n      FUN_00005ebc(iVar7,pcVar6);\n    }\n    if (*pcVar6 == ':') {\n      pcVar6 = pcVar6 + 1;\n    }\n    iVar7 = FUN_00005e68(pcVar6,PTR_s__10__0_9_____n_000053f0,PTR_DAT_000053ec,&local_30);\n    if (0 < iVar7) {\n      pcVar10 = pcVar6 + local_30;\n      if (pcVar6[local_30] == '-') {\n        pcVar10 = pcVar10 + 1;\n        iVar7 = -1;\n      }\n      else {\n        if (pcVar6[local_30] == '+') {\n          pcVar10 = pcVar10 + 1;\n        }\n        iVar7 = 1;\n      }\n      local_3a = 0;\n      local_38 = 0;\n      puVar12 = &local_3a;\n      piVar13 = &local_30;\n      puVar14 = &local_38;\n      piVar15 = &local_30;\n      iVar8 = FUN_00005e68(pcVar10,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a,\n                           &local_30,&local_38,&local_30);\n      puVar1 = PTR_DAT_00005400;\n      if (0 < iVar8) {\n        *(uint *)(iVar5 + 0x28) =\n             ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n        puVar3 = DAT_000053e8;\n        *DAT_000053e8 = PTR_DAT_000053ec;\n        pcVar10 = pcVar10 + local_30;\n        iVar7 = FUN_00005e68(pcVar10,PTR_s__10__0_9_____n_000053f0,puVar1,&local_30,puVar12,piVar13,\n                             puVar14,piVar15);\n        if (iVar7 < 1) {\n          puVar3[1] = *puVar3;\n          *(undefined4 *)PTR_DAT_000053dc = *(undefined4 *)(iVar5 + 0x28);\n          *(undefined4 *)PTR_DAT_000053e4 = 0;\n        }\n        else {\n          puVar3[1] = puVar1;\n          pcVar6 = pcVar10 + local_30;\n          if (pcVar10[local_30] == '-') {\n            pcVar6 = pcVar6 + 1;\n            iVar7 = -1;\n          }\n          else {\n            if (pcVar10[local_30] == '+') {\n              pcVar6 = pcVar6 + 1;\n            }\n            iVar7 = 1;\n          }\n          local_3c = 0;\n          local_3a = 0;\n          local_38 = 0;\n          local_30 = 0;\n          iVar8 = FUN_00005e68(pcVar6,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a\n                               ,&local_30,&local_38,&local_30);\n          if (iVar8 < 1) {\n            iVar7 = *(int *)(iVar5 + 0x28) + -0xe10;\n          }\n          else {\n            iVar7 = ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n          }\n          *(int *)(iVar5 + 0x50) = iVar7;\n          pcVar6 = pcVar6 + local_30;\n          bVar11 = false;\n          iVar7 = iVar5;\n          while( true ) {\n            if (*pcVar6 == ',') {\n              pcVar6 = pcVar6 + 1;\n            }\n            cVar9 = *pcVar6;\n            if (cVar9 == 'M') {\n              iVar8 = FUN_00005e68(pcVar6,PTR_s_M_hu_n__hu_n__hu_n_000053f8,&local_36,&local_30,\n                                   &local_34,&local_30,&local_32,&local_30);\n              if (iVar8 != 3) {\n                return;\n              }\n              if (0xb < local_36 - 1) {\n                return;\n              }\n              if (4 < local_34 - 1) {\n                return;\n              }\n              if (6 < local_32) {\n                return;\n              }\n              *(uint *)(iVar7 + 0xc) = (uint)local_36;\n              *(uint *)(iVar7 + 0x10) = (uint)local_34;\n              *(undefined *)(iVar7 + 8) = 0x4d;\n              *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              pcVar10 = pcVar6 + local_30;\n            }\n            else {\n              if (cVar9 == 'J') {\n                pcVar6 = pcVar6 + 1;\n              }\n              else {\n                cVar9 = 'D';\n              }\n              local_32 = FUN_00005fd8(pcVar6,local_2c,10);\n              pcVar10 = local_2c[0];\n              if (local_2c[0] == pcVar6) {\n                if (bVar11) {\n                  *(undefined *)(iVar5 + 0x30) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0x34) = 0xb;\n                  *(undefined4 *)(iVar5 + 0x38) = 1;\n                  *(undefined4 *)(iVar5 + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(iVar5 + 8) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0xc) = 3;\n                  *(undefined4 *)(iVar5 + 0x10) = 2;\n                  *(undefined4 *)(iVar5 + 0x14) = 0;\n                }\n              }\n              else {\n                *(char *)(iVar7 + 8) = cVar9;\n                *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              }\n            }\n            local_3c = 2;\n            local_3a = 0;\n            local_38 = 0;\n            local_30 = 0;\n            if (*pcVar10 == '/') {\n              FUN_00005e68(pcVar10,PTR_DAT_000053fc,&local_3c,&local_30,&local_3a,&local_30,\n                           &local_38,&local_30);\n            }\n            *(uint *)(iVar7 + 0x18) =\n                 (uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38;\n            iVar7 = iVar7 + 0x28;\n            pcVar6 = pcVar10 + local_30;\n            if (bVar11) break;\n            bVar11 = true;\n          }\n          FUN_00004f98(*(undefined4 *)(iVar5 + 4));\n          iVar7 = *(int *)(iVar5 + 0x28);\n          *(int *)PTR_DAT_000053dc = iVar7;\n          iVar7 = *(int *)(iVar5 + 0x50) - iVar7;\n          if (iVar7 != 0) {\n            iVar7 = 1;\n          }\n          *(int *)PTR_DAT_000053e4 = iVar7;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005780",
                "FUN_00005ecc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_00004e52",
                "FUN_00005fd8",
                "FUN_000056b0",
                "FUN_00005ebc",
                "FUN_00004f98",
                "FUN_000056a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005100",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00005100"
        },
        "FUN_00005584": {
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "code": "void divide_and_remainder_00005584(uint *result, uint dividend, uint divisor)\n{\n  uint quotient;\n  uint remainder;\n  quotient = dividend / divisor;\n  remainder = dividend % divisor;\n  if (dividend < 0) {\n    if (remainder > 0) {\n      quotient--;\n      remainder += divisor;\n    }\n  }\n  else if (remainder < 0) {\n    quotient++;\n    remainder -= divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005584",
            "calling": [
                "FUN_00004634"
            ],
            "imported": false,
            "current_name": "divide_and_remainder_00005584"
        },
        "FUN_00004248": {
            "renaming": {
                "FUN_00004248": "allocate_memory_block_00004248",
                "param_1": "base_address",
                "param_2": "block_number",
                "puVar1": "block_address",
                "iVar2": "block_offset"
            },
            "code": "undefined4* allocate_memory_block_00004248(undefined4 base_address, int block_number)\n{\n    undefined4* block_address;\n    int block_offset = (block_number - 1) * 104;\n    block_address = (undefined4*)FUN_00004bd0(base_address, block_offset + 116);\n    if (block_address != (undefined4*)0x0)\n    {\n        *block_address = 0;\n        block_address[1] = block_number;\n        block_address[2] = block_address + 3;\n        FUN_00004622(block_address + 3, 0, block_offset + 104);\n    }\n    return block_address;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004248",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00004248"
        },
        "FUN_00001da2": {
            "renaming": {
                "FUN_00001da2": "get_bits_from_value_00001da2",
                "param_1": "value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "ushort get_bits_from_value_00001da2(ushort value) {\n    ushort bits = value >> 6 & 7;\n    return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001da2",
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "get_bits_from_value_00001da2"
        },
        "FUN_00001ec4": {
            "renaming": {
                "FUN_00001ec4": "calculate_and_store_result_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "FUN_00001e0c": "calculate",
                "FUN_00001e44": "store_result"
            },
            "code": "void calculate_and_store_result_00001ec4(int input1, int input2)\n{\n  int result = calculate(input1, input2);\n  store_result(input1, input2, result);\n  return;\n}",
            "called": [
                "FUN_00001e44",
                "FUN_00001e0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ec4",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "calculate_and_store_result_00001ec4"
        },
        "FUN_00002744": {
            "renaming": {
                "FUN_00002744": "write_byte_to_memory_00002744",
                "param_1": "address",
                "param_2": "data",
                "DAT_00002790": "memory_start_address",
                "DAT_00002794": "memory_start_address"
            },
            "code": "void write_byte_to_memory_00002744(byte address, uint8_t data) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_00002790 + 0x14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_00002790 + 0x300) = (char)((data & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002744",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_00002744"
        },
        "FUN_00002624": {
            "renaming": {
                "FUN_00002624": "copy_data_to_buffer_and_return_zero_00002624",
                "param_1": "buffer",
                "local_10": "bytes_copied",
                "uStack_c": "unused_variable"
            },
            "code": "int copy_data_to_buffer_and_return_zero_00002624(void* buffer, int data_size) {\n                      int bytes_copied = copy_data_to_buffer(buffer, data_size);\n                      return 0;\n                  }",
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002624",
            "calling": [
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_and_return_zero_00002624"
        },
        "FUN_00001e0c": {
            "renaming": {
                "FUN_00001e0c": "get_bits_from_uint_array_00001e0c",
                "param_1": "array_index",
                "param_2": "bit_index",
                "PTR_DAT_00001e40": "uint_array_ptr",
                "uint": "unsigned int",
                "masked_bits": "bits",
                "shifted_bits": "bits_shifted"
            },
            "code": "uint get_bits_from_uint_array_00001e0c(int array_index, uint bit_index) {\n    uint* PTR_DAT_00001e40 = (uint*)(PTR_DAT_00001e40 + (((int)bit_index >> 3) + array_index * 4) * 4);\n    uint shifted_bits = (bit_index & 7) << 2;\n    uint masked_bits = *PTR_DAT_00001e40 >> shifted_bits & 0xf;\n    return masked_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e0c",
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "get_bits_from_uint_array_00001e0c"
        },
        "FUN_00000ef8": {
            "renaming": {
                "FUN_00000ef8": "do_nothing_00000ef8"
            },
            "code": "\nvoid do_nothing_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ef8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00000ef8"
        },
        "FUN_000041d0": {
            "renaming": {
                "FUN_000041d0": "process_data_000041d0",
                "param_1": "data",
                "pcVar1": "function_ptr",
                "iVar2": "index_1",
                "uVar3": "temp_result",
                "iVar4": "index_4",
                "piVar5": "list_ptr",
                "iVar6": "index_3",
                "uVar7": "result",
                "iVar8": "index_2",
                "puVar9": "data_ptr"
            },
            "code": "uint process_data_000041d0(int data, undefined4 param_2, undefined4 param_3)\n{\n  code *function_ptr;\n  int index_1;\n  uint result = 0;\n  int index_2;\n  int *list_ptr;\n  int index_3;\n  uint temp_result;\n  int index_4;\n  undefined *data_ptr;\n  function_ptr = DAT_000041ec;\n  if (data == 0) {\n    index_1 = *(int *)PTR_DAT_000041e8;\n    list_ptr = (int *)(index_1 + 0x48);\n    data_ptr = PTR_DAT_000041e8;\n    do {\n      index_2 = list_ptr[1];\n      index_3 = list_ptr[2];\n      while (index_2 = index_2 + -1, -1 < index_2) {\n        if ((1 < *(ushort *)(index_3 + 0xc)) && (index_4 = *(short *)(index_3 + 0xe) + 1, index_4 != 0)) {\n          temp_result = (*function_ptr)(index_1, index_3, param_3, index_4, data_ptr);\n          result = result | temp_result;\n        }\n        index_3 = index_3 + 0x68;\n      }\n      list_ptr = (int *)*list_ptr;\n    } while (list_ptr != (int *)0x0);\n    return result;\n  }\n  result = FUN_00004158(*DAT_000041f0, data);\n  return result;\n}",
            "called": [
                "FUN_00004158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041d0",
            "calling": [
                "FUN_00002e48"
            ],
            "imported": false,
            "current_name": "process_data_000041d0"
        },
        "FUN_0000459c": {
            "renaming": {
                "FUN_0000459c": "run_function_pointers_0000459c",
                "puVar1": "start_ptr",
                "puVar2": "end_ptr",
                "iVar3": "num_ptrs",
                "ppcVar4": "function_ptrs",
                "iVar5": "i"
            },
            "code": "void run_function_pointers_0000459c(void)\n{\n  undefined *start_ptr = PTR_DAT_000045d4;\n  undefined *end_ptr = PTR_DAT_000045e0;\n  int num_ptrs = (int)end_ptr - (int)start_ptr;\n  code **function_ptrs = (code **)start_ptr;\n  for (int i = 0; i < num_ptrs/4; i++) {\n    (**function_ptrs)();\n    function_ptrs++;\n  }\n  FUN_00000410();\n  function_ptrs = (code **)PTR_DAT_000045dc;\n  num_ptrs = (int)PTR_DAT_000045e0 - (int)PTR_DAT_000045dc;\n  for (int i = 0; i < num_ptrs/4; i++) {\n    (**function_ptrs)();\n    function_ptrs++;\n  }\n  return;\n}",
            "called": [
                "FUN_00000410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000459c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "run_function_pointers_0000459c"
        },
        "FUN_000014c4": {
            "renaming": {
                "FUN_000014c4": "set_data_000014c4",
                "param_1": "data_index",
                "param_2": "data_value",
                "pbVar1": "data_pointer",
                "uVar2": "data_size",
                "uVar3": "quotient"
            },
            "code": "void set_data_000014c4(int data_index, uint data_value)\n{\n  byte *data_pointer;\n  uint data_size;\n  \n  data_pointer = *(byte **)(PTR_DAT_000015cc + data_index * 0x20);\n  data_size = *(uint *)(PTR_DAT_000015cc + data_index * 0x20 + 4);\n  data_pointer[3] = data_pointer[3] & 0xf3;\n  data_pointer[2] = PTR_DAT_000015cc[data_index * 0x20 + 0x1d];\n  uint quotient = data_size / (data_value << 4);\n  *data_pointer = (byte)(quotient >> 8) & 0x1f;\n  data_pointer[1] = (byte)quotient;\n  data_pointer[10] = (byte)((data_size << 2) / data_value + 1 >> 1) & 0x1f;\n  data_pointer[0x10] = data_pointer[0x10] | 0x88;\n  if ((data_pointer[0x10] & 0x70) == 0) {\n    data_pointer[0x13] = 0;\n  }\n  else {\n    data_pointer[0x13] = (char)(2 << (data_pointer[0x10] >> 4 & 7)) - 1;\n  }\n  data_pointer[0x15] = 1;\n  data_pointer[0x11] = 0xc0;\n  data_pointer[3] = data_pointer[3] | 0x2c;\n  FUN_00001318((int)(char)PTR_DAT_000015cc[data_index * 0x20 + 0x14]);\n  return;\n}",
            "called": [
                "FUN_00001318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000014c4",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "set_data_000014c4"
        },
        "FUN_00004b34": {
            "renaming": {
                "FUN_00004b34": "insert_node_00004b34",
                "param_1": "node",
                "param_2": "size",
                "param_3": "val",
                "param_4": "param_4",
                "puVar1": "ptr",
                "piVar2": "ptr_2",
                "extraout_r1": "extraout",
                "ppiVar3": "current_node_ptr",
                "ppiVar4": "prev_node_ptr",
                "ppiVar5": "start_node_ptr",
                "ppiVar6": "current_node",
                "bVar7": "is_less_than_current"
            },
            "code": "void insert_node_00004b34(int *node, int size, int val, int param_4)\n{\n  int **current_node;\n  int **prev_node;\n  int **start_node;\n  bool is_less_than_current;\n  \n  if (size == 0) {\n    return;\n  }\n  current_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    current_node = (int **)((int)current_node + *(int *)(size + -4));\n  }\n  initialize_list();\n  start_node = *(int ***)PTR_DAT_00004bcc;\n  if (start_node == (int **)0x0) {\n    current_node[1] = (int *)0x0;\n    *(int ***)PTR_DAT_00004bcc = current_node;\n    prev_node = (int **)extraout_r1;\n  }\n  else if (current_node < start_node) {\n    prev_node = (int **)*current_node;\n    current_node = (int **)((int)current_node + (int)prev_node);\n    is_less_than_current = start_node == current_node;\n    if (is_less_than_current) {\n      current_node = (int **)*start_node;\n      start_node = (int **)start_node[1];\n    }\n    current_node[1] = (int *)start_node;\n    if (is_less_than_current) {\n      current_node = (int **)((int)current_node + (int)prev_node);\n      *current_node = (int *)current_node;\n    }\n    *(int ***)PTR_DAT_00004bcc = current_node;\n  }\n  else {\n    do {\n      prev_node = start_node;\n      start_node = (int **)prev_node[1];\n      if (start_node == (int **)0x0) break;\n    } while (start_node <= current_node);\n    current_node = (int **)*prev_node;\n    if ((int **)((int)prev_node + (int)current_node) == current_node) {\n      current_node = (int **)((int)current_node + (int)*current_node);\n      *prev_node = (int *)current_node;\n      if (start_node == (int **)((int)prev_node + (int)current_node)) {\n        prev_node = *start_node;\n        prev_node[1] = start_node[1];\n        current_node = (int **)((int)current_node + (int)prev_node);\n        *prev_node = (int *)current_node;\n      }\n    }\n    else if (current_node < (int **)((int)prev_node + (int)current_node)) {\n      *node = 0xc;\n    }\n    else {\n      is_less_than_current = start_node == (int **)((int)current_node + (int)*current_node);\n      if (is_less_than_current) {\n        current_node = (int **)*start_node;\n        start_node = (int **)start_node[1];\n      }\n      current_node[1] = (int *)start_node;\n      if (is_less_than_current) {\n        current_node = (int **)((int)current_node + (int)*current_node);\n        *current_node = (int *)current_node;\n      }\n      prev_node[1] = (int *)current_node;\n    }\n  }\n  add_node(node, prev_node, current_node, val, param_4);\n  return;\n}",
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004b34",
            "calling": [
                "FUN_00005780",
                "FUN_00006192",
                "FUN_0000404c",
                "FUN_00006768",
                "FUN_000054a8",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "insert_node_00004b34"
        },
        "FUN_000004f2": {
            "renaming": {
                "FUN_000004f2": "set_param_to_19_000004f2",
                "*param_1": "*param",
                "value_to_set": "value_to_set"
            },
            "code": "int set_param_to_19_000004f2(int *param){\n                      int value_to_set = 19;\n                      *param = value_to_set;\n                      return -1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000004f2",
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "set_param_to_19_000004f2"
        },
        "FUN_00004e66": {
            "renaming": {
                "FUN_00004e66": "compare_strings_00004e66",
                "param_1": "string1",
                "param_2": "length1",
                "param_3": "length2",
                "pbVar1": "current_char1",
                "pbVar2": "current_char2",
                "uVar3": "current_char_code"
            },
            "code": "int compare_strings_00004e66(byte *string1, int length1, byte *string2, int length2) {\n  byte *current_char1;\n  byte *current_char2;\n  uint current_char_code;\n  if (length2 != 0) {\n    current_char2 = string2 + length2 - 1;\n    current_char1 = string1;\n    do {\n      current_char_code = (uint)*current_char1;\n      current_char2++;\n      if ((current_char_code != *current_char2) || (current_char1 + 1 == string1 + length2)) break;\n      current_char1++;\n    } while (current_char_code != 0);\n    length2 = current_char_code - *current_char2;\n  }\n  return length2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e66",
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "compare_strings_00004e66"
        },
        "FUN_00005ecc": {
            "renaming": {
                "FUN_00005ecc": "string_end_00005ecc",
                "param_1": "input_string",
                "pcVar2": "current_char",
                "pcVar3": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* string_end_00005ecc(char* input_string) {\n    char* current_char = input_string;\n    while (*current_char != '\\0') {\n        current_char++;\n    }\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ecc",
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "string_end_00005ecc"
        },
        "FUN_0000129c": {
            "renaming": {
                "FUN_0000129c": "set_param_to_one_0000129c",
                "param_1": "param",
                "FUN_00002434": "call_function_with_param"
            },
            "code": "void set_param_to_one_0000129c(int param){\n  call_function_with_param(param, 1);\n  return;\n}",
            "called": [
                "FUN_00002434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000129c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "set_param_to_one_0000129c"
        },
        "FUN_00001628": {
            "renaming": {
                "FUN_00001628": "check_param_and_call_function_00001628",
                "param_1": "param_index",
                "PTR_DAT_00001680": "ptr1_data",
                "PTR_DAT_00001684": "ptr2_data"
            },
            "code": "void check_param_and_call_function_00001628(int param_index)\n{\n    int* ptr1 = *(int**)(PTR_DAT_00001680 + param_index * 0x20);\n    int* ptr2 = *(int**)(PTR_DAT_00001684 + param_index * 8);\n    byte* byte_ptr = (byte*)(ptr1 + 1);\n    bool is_byte_set = ((*byte_ptr) & 0x20) != 0;\n    bool is_ptr2_valid = (*ptr2) != 0;\n    if (is_byte_set && is_ptr2_valid) {\n        code* func_ptr = *(code**)(ptr2);\n        undefined4 arg1 = *(undefined4*)(ptr2 + 1);\n        undefined arg2 = *(undefined*)(ptr1 + 7);\n        func_ptr(arg1, arg2);\n    }\n    call_another_function();\n    return;\n}",
            "called": [
                "FUN_00001348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001628",
            "calling": [
                "FUN_00001688"
            ],
            "imported": false,
            "current_name": "check_param_and_call_function_00001628"
        },
        "FUN_00001748": {
            "renaming": {
                "FUN_00001748": "set_param_value_00001748",
                "param_1": "new_param_value",
                "DAT_00001774": "param_address",
                "* (byte *) (DAT_00001774 + 3)": "current_param_value",
                "param_1 | * (byte *) (DAT_00001774 + 3) & 0x1f": "masked_new_value"
            },
            "code": "void set_param_value_00001748(byte new_param_value)\n{\n    byte* DAT_00001774 = DAT_00001774 + 3;\n    byte * (byte *) (DAT_00001774 + 3) = *DAT_00001774;\n    byte param_1 | * (byte *) (DAT_00001774 + 3) & 0x1f = new_param_value | (* (byte *) (DAT_00001774 + 3) & 0x1f);\n    *DAT_00001774 = param_1 | * (byte *) (DAT_00001774 + 3) & 0x1f;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001748",
            "calling": [
                "FUN_000019c0",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001960",
                "FUN_0000191c"
            ],
            "imported": false,
            "current_name": "set_param_value_00001748"
        },
        "FUN_0000294c": {
            "renaming": {
                "FUN_0000294c": "setFlagInData_0000294c",
                "DAT_0000296c": "data"
            },
            "code": "void setFlagInData_0000294c()\n{\n    uint* DAT_0000296c = (uint*)(DAT_0000296c + 0x14);\n    *DAT_0000296c |= 0x10;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000294c",
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "imported": false,
            "current_name": "setFlagInData_0000294c"
        },
        "FUN_00005790": {
            "renaming": {
                "FUN_00005790": "do_nothing_with_pointer_00005790",
                "PTR_DAT_00005798": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_00005790(void)\n{\n  do_nothing_with_pointer_00005790(PTR_DAT_00005798);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005790",
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00005790"
        },
        "FUN_00000534": {
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "*param_1": "*input",
                "param_2": "size",
                "uVar1": "is_valid"
            },
            "code": "int check_valid_input_00000534(int *input, int size) {\n    int is_valid = 0;\n    *input = 0;\n    if (size == 0 || size == 1 || size == 2) {\n        is_valid = 1;\n    }\n    return is_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000534",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "check_valid_input_00000534"
        },
        "FUN_000017dc": {
            "renaming": {
                "FUN_000017dc": "set_flag_if_not_set_000017dc",
                "FUN_000016c8": "set_bit_in_array",
                "DAT_00001820": "data_array",
                "DAT_00001824": "flag_ptr",
                "DAT_00001828": "some_other_ptr"
            },
            "code": "void set_flag_if_not_set_000017dc(void)\n{\n  set_bit_in_array(DAT_00001820, 0x1d);\n  if ((*(uint *)(DAT_00001820 + 0x10) & 0x100) == 0) {\n    *(undefined4 *)(DAT_00001820 + 0x10) = 0x104;\n  }\n  *DAT_00001824 = *DAT_00001824 & 0xfff3ffff | 0x80000;\n  return;\n}",
            "called": [
                "FUN_000016c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000017dc",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_000017dc"
        },
        "FUN_00000410": {
            "renaming": {
                "FUN_00000410": "initialize_system_00000410",
                "FUN_00000df4": "execute_startup_routine"
            },
            "code": "void initialize_system_00000410(void)\n{\n  execute_startup_routine();\n  return;\n}",
            "called": [
                "FUN_00000df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000410",
            "calling": [
                "FUN_0000459c"
            ],
            "imported": false,
            "current_name": "initialize_system_00000410"
        },
        "FUN_000005ca": {
            "renaming": {
                "FUN_000005ca": "remove_first_element_000005ca",
                "param_1": "array",
                "puVar1": "result"
            },
            "code": "undefined4* remove_first_element_000005ca(int* array) {\n  undefined4* result;\n  if (*array == 0) {\n    result = NULL;\n  }\n  else {\n    result = *(undefined4**)*array;\n    if (result == (undefined4*)*array) {\n      *array = 0;\n    }\n    else {\n      *(undefined4*)*array = *result;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000005ca",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "remove_first_element_000005ca"
        },
        "FUN_00005ff8": {
            "renaming": {
                "FUN_00005ff8": "do_nothing_with_data_00005ff8",
                "DAT_00006000": "DAT_data",
                "do_nothing_000045ec": "do_nothing"
            },
            "code": "void do_nothing_with_data_00005ff8(void)\n{\n  do_nothing(DAT_00006000);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ff8",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005ff8"
        },
        "FUN_00002714": {
            "renaming": {
                "FUN_00002714": "set_bit_in_array_00002714",
                "param_1": "bit_index",
                "DAT_00002740": "array_pointer"
            },
            "code": "void set_bit_in_array_00002714(uint8_t bit_index) {\n  uint32_t* DAT_00002740 = (uint32_t*)(DAT_00002740 + ((uint32_t)bit_index >> 5) * 4);\n  uint32_t bit_mask = 1 << (bit_index & 0x1f);\n  *DAT_00002740 = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002714",
            "calling": [
                "FUN_00002894"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00002714"
        },
        "FUN_000020e0": {
            "renaming": {
                "FUN_000020e0": "initialize_data_000020e0",
                "FUN_00002028": "set_data",
                "DAT_000020f0": "PTR_data"
            },
            "code": "void initialize_data_000020e0(void)\n{\n  set_data(DAT_000020f0, 2);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020e0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020e0"
        },
        "FUN_00005fec": {
            "renaming": {
                "FUN_00005fec": "do_nothing_with_data_00005fec",
                "DAT_00005ff4": "DAT_data"
            },
            "code": "void do_nothing_with_data_00005fec(void)\n{\n  do_nothing(DAT_00005ff4);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fec",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00005fec"
        },
        "FUN_00004f84": {
            "renaming": {
                "FUN_00004f84": "parseNumber_00004f84",
                "param_1": "input",
                "param_2": "next",
                "param_3": "base",
                "uVar1": "value",
                "uVar2": "digitValue",
                "uVar3": "isNegative",
                "uVar4": "maxVal",
                "uVar5": "unused",
                "uVar6": "unused",
                "uVar7": "unused",
                "iVar5": "unused",
                "pbVar8": "unused",
                "pbVar9": "currentChar"
            },
            "code": "uint parseNumber_00004f84(byte *input, byte **next, uint base) {\n  uint digitValue;\n  uint isNegative = 0;\n  uint value = 0;\n  byte *currentChar = input;\n  byte *nextChar;\n  while (PTR_DAT_00004f7c[*currentChar] & 8) {\n    currentChar++;\n  }\n  if (*currentChar == 0x2d) {\n    isNegative = 1;\n    currentChar++;\n  }\n  else if (*currentChar == 0x2b) {\n    currentChar++;\n  }\n  if (base == 0) {\n    if (*currentChar != 0x30) {\n      base = 10;\n    }\n    else if ((*(currentChar + 1) & 0xdf) == 0x58) {\n      base = 16;\n      currentChar += 2;\n    }\n    else {\n      base = 8;\n    }\n  }\n  else if (base != 16 || *currentChar != 0x30) {\n    base = 10;\n  }\n  uint maxVal = 0x7fffffff / base;\n  while (1) {\n    if (*currentChar >= 0x30 && *currentChar <= 0x39) {\n      digitValue = *currentChar - 0x30;\n    }\n    else if (*currentChar >= 0x41 && *currentChar <= 0x46) {\n      digitValue = *currentChar - 0x37;\n    }\n    else if (*currentChar >= 0x61 && *currentChar <= 0x66) {\n      digitValue = *currentChar - 0x57;\n    }\n    else {\n      break;\n    }\n    if (digitValue >= base) {\n      break;\n    }\n    if (value > maxVal || (value == maxVal && digitValue > 0x7fffffff - maxVal * base)) {\n      return 0x7fffffff;\n    }\n    value = value * base + digitValue;\n    currentChar++;\n  }\n  if (isNegative) {\n    value = -value;\n  }\n  if (next != 0) {\n    *next = currentChar;\n  }\n  return value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f84",
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "imported": false,
            "current_name": "parseNumber_00004f84"
        },
        "FUN_000028f0": {
            "renaming": {
                "FUN_000028f0": "get_data_at_offset_000028f0",
                "DAT_0000290c": "data"
            },
            "code": "int get_data_at_offset_000028f0(void)\n{\n    int* DAT_0000290c_ptr = (int*)(DAT_0000290c + 8);\n    int DAT_0000290c_value = *DAT_0000290c_ptr + 1;\n    return DAT_0000290c_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000028f0",
            "calling": [
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "get_data_at_offset_000028f0"
        },
        "FUN_00004f98": {
            "renaming": {
                "FUN_00004f98": "calculate_day_of_year_00004f98",
                "param_1": "year",
                "puVar1": "calendar_data",
                "uVar2": "carry_flag",
                "uVar3": "month_length",
                "iVar4": "day_offset",
                "puVar5": "calendar_data_2",
                "iVar6": "days_since_1900",
                "uVar7": "leap_year_offset",
                "iVar8": "i",
                "iVar9": "day_offset_2",
                "uVar10": "leading_zeroes",
                "PTR_DAT_000050e4": "calendar_constants",
                "DAT_000050e0": "days_per_year"
            },
            "code": "uint32_t calculate_day_of_year_00004f98(uint32_t year)\n{\n  uint32_t *calendar_data = (uint32_t *)FUN_000056b0();\n  if (year < 0x7b2) {\n    return 0;\n  }\n  else {\n    uint32_t leading_zeroes = count_leading_zeroes(year % 400);\n    uint32_t days_since_1900 = (year - 0x7b2) * 365 + (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    calendar_data[1] = year;\n    do {\n      uint32_t month_length = calendar_data[5];\n      if (*(char *)(calendar_data + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          month_length = (month_length < 0x3c) ? 0 : 1;\n        }\n        else {\n          month_length = 0;\n        }\n        month_length += days_since_1900 + calendar_data[5] + -1;\n      }\n      else if (*(char *)(calendar_data + 2) == 'D') {\n        month_length = days_since_1900 + calendar_data[5];\n      }\n      else {\n        uint32_t leap_year_offset = leading_zeroes >> 5;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leap_year_offset = 1;\n        }\n        uint32_t i = 0;\n        month_length = days_since_1900;\n        while (i < calendar_data[3]) {\n          month_length += *(int *)(PTR_DAT_000050e4 + i * 4 + leap_year_offset * 0x30 + -4);\n          i++;\n        }\n        uint32_t day_offset = calendar_data[5] - (month_length + 4U) % 7;\n        if (day_offset < 0) {\n          day_offset += 7;\n        }\n        for (day_offset = (calendar_data[4] - 1) * 7 + day_offset;\n            *(int *)(PTR_DAT_000050e4 + i * 4 + leap_year_offset * 0x30 + -4) <= day_offset; day_offset -= 7)\n        {\n        }\n        month_length += day_offset;\n      }\n      uint32_t days_since_1900_2 = calendar_data[10] + DAT_000050e0 * month_length + calendar_data[6];\n      calendar_data[8] = days_since_1900_2;\n      calendar_data[9] = (int)days_since_1900_2 >> 0x1f;\n      calendar_data += 10;\n    } while (calendar_data != (uint32_t *)FUN_000056b0() + 0x14);\n    uint32_t carry = calendar_data[9];\n    uint32_t days_since_1900_3 = calendar_data[0x13];\n    *calendar_data = (uint32_t)((int)((carry - days_since_1900_3) - (uint32_t)(calendar_data[8] < calendar_data[0x12])) < 0 !=\n                    (SBORROW4(carry,days_since_1900_3) !=\n                    SBORROW4(carry - days_since_1900_3,(uint32_t)(calendar_data[8] < calendar_data[0x12]))));\n    return 1;\n  }\n}",
            "called": [
                "FUN_000056b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f98",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "calculate_day_of_year_00004f98"
        },
        "FUN_00004dee": {
            "renaming": {
                "FUN_00004dee": "calculate_result_00004dee",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "ushort": "uint16_t",
                "FUN_000004f2": "perform_operation",
                "FUN_00000e38": "perform_calculation"
            },
            "code": "uint32_t calculate_result_00004dee(uint32_t input_value, int16_t* data_array, uint32_t param_3, uint32_t param_4) {\n  uint32_t result;\n  uint32_t shifted_value = (uint32_t)(data_array[3]) << 23;\n  if (shifted_value < 0) {\n    perform_operation(input_value, (int16_t)(data_array[4]), 0, 2);\n  }\n  data_array[3] = data_array[3] & 0xefff;\n  result = perform_calculation(param_3, param_4);\n  return result;\n}",
            "called": [
                "FUN_00000e38",
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dee",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00004dee"
        },
        "FUN_00000fec": {
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "*param_1": "array[0]",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]",
                "PTR_s_FAILED_ASSERTION__00001030": "false && \"Size must be a power of 2\""
            },
            "code": "void initialize_array_00000fec(uint32_t *array, uint32_t size) {\n  if ((size & (size - 1)) != 0) {\n    assert(PTR_s_FAILED_ASSERTION__00001030);\n  }\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000fec",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "initialize_array_00000fec"
        },
        "FUN_00000428": {
            "renaming": {
                "FUN_00000428": "get_local_value_00000428",
                "param_1": "output_value",
                "param_2": "input_value",
                "uVar1": "random_value",
                "local_c": "local_value"
            },
            "code": "uint32_t get_local_value_00000428(uint32_t *output_value, int input_value) {\n  uint32_t uVar1 = get_random_value();\n  uint32_t local_value = *(uint32_t *)PTR_Elf32_Rel_ARRAY_00000484;\n  if ((DAT_00000488 < (uint32_t)(input_value + *(int *)PTR_Elf32_Rel_ARRAY_00000484)) || ((uint32_t)(input_value + *(int *)PTR_Elf32_Rel_ARRAY_00000484) < DAT_0000048c)) {\n    *output_value = 0xc;\n    local_value = 0xffffffff;\n  }\n  else {\n    *(int *)PTR_Elf32_Rel_ARRAY_00000484 = input_value + *(int *)PTR_Elf32_Rel_ARRAY_00000484;\n  }\n  release_random_value(uVar1);\n  return local_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000428",
            "calling": [
                "FUN_00004bd0"
            ],
            "imported": false,
            "current_name": "get_local_value_00000428"
        },
        "FUN_000039e8": {
            "renaming": {
                "FUN_000039e8": "get_device_class_name_000039e8",
                "param_1": "device_class_code",
                "puVar1": "device_class_name",
                "PTR_s_CLASS_UNKNOWN_00003d20": "UNKNOWN",
                "DAT_00003cc0": "ANY",
                "DAT_00003cc4": "ACT_BUZZER",
                "DAT_00003cc8": "ACT_LED",
                "PTR_s_ACT_SERVO_00003ccc": "ACT_SERVO",
                "PTR_s_ACT_MOTOR_00003cd0": "ACT_MOTOR",
                "PTR_s_ACT_SWITCH_00003cd4": "ACT_SWITCH",
                "PTR_s_ACT_DIMMER_00003cd8": "ACT_DIMMER",
                "PTR_s_SENSE_ANY_00003cdc": "SENSE_ANY",
                "PTR_s_SENSE_BTN_00003ce0": "SENSE_BTN",
                "PTR_s_SENSE_TEMP_00003ce4": "SENSE_TEMP",
                "PTR_s_SENSE_HUM_00003ce8": "SENSE_HUM",
                "PTR_s_SENSE_LIGHT_00003cec": "SENSE_LIGHT",
                "PTR_s_SENSE_ACCEL_00003cf0": "SENSE_ACCEL",
                "PTR_s_SENSE_MAG_00003cf4": "SENSE_MAG",
                "PTR_s_SENSE_GYRO_00003cf8": "SENSE_GYRO",
                "PTR_s_SENSE_COLOR_00003cfc": "SENSE_COLOR",
                "PTR_s_SENSE_PRESS_00003d00": "SENSE_PRESS",
                "PTR_s_SENSE_ANALOG_00003d04": "SENSE_ANALOG",
                "PTR_s_SENSE_UV_00003d08": "SENSE_UV",
                "PTR_s_SENSE_OBJTEMP_00003d0c": "SENSE_OBJTEMP",
                "PTR_s_SENSE_PULSE_COUNT_00003d10": "SENSE_PULSE_COUNT",
                "PTR_s_SENSE_DISTANCE_00003d14": "SENSE_DISTANCE",
                "PTR_s_SENSE_CO2_00003d18": "SENSE_CO2",
                "param_1 == -1": "device_class_code == -1",
                "PTR_s_CLASS_ANY_00003d1c": "ANY"
            },
            "code": "const char* get_device_class_name_000039e8(char device_class_code) {\n  const char* device_class_name = \"PTR_s_CLASS_UNKNOWN_00003d20\";\n  switch(device_class_code) {\n    case '\\0':\n      device_class_name = \"DAT_00003cc0\";\n      break;\n    case '@':\n      device_class_name = \"DAT_00003cc4\";\n      break;\n    case 'B':\n      device_class_name = \"DAT_00003cc8\";\n      break;\n    case 'C':\n      device_class_name = \"PTR_s_ACT_SERVO_00003ccc\";\n      break;\n    case 'D':\n      device_class_name = \"PTR_s_ACT_MOTOR_00003cd0\";\n      break;\n    case 'E':\n      device_class_name = \"PTR_s_ACT_SWITCH_00003cd4\";\n      break;\n    case 'F':\n      device_class_name = \"PTR_s_ACT_DIMMER_00003cd8\";\n      break;\n    case -0x80:\n      device_class_name = \"PTR_s_SENSE_DAT_00003cc0_00003cdc\";\n      break;\n    case -0x7f:\n      device_class_name = \"PTR_s_SENSE_BTN_00003ce0\";\n      break;\n    case -0x7e:\n      device_class_name = \"PTR_s_SENSE_TEMP_00003ce4\";\n      break;\n    case -0x7d:\n      device_class_name = \"PTR_s_SENSE_HUM_00003ce8\";\n      break;\n    case -0x7c:\n      device_class_name = \"PTR_s_SENSE_LIGHT_00003cec\";\n      break;\n    case -0x7b:\n      device_class_name = \"PTR_s_SENSE_ACCEL_00003cf0\";\n      break;\n    case -0x7a:\n      device_class_name = \"PTR_s_SENSE_MAG_00003cf4\";\n      break;\n    case -0x79:\n      device_class_name = \"PTR_s_SENSE_GYRO_00003cf8\";\n      break;\n    case -0x78:\n      device_class_name = \"PTR_s_SENSE_COLOR_00003cfc\";\n      break;\n    case -0x77:\n      device_class_name = \"PTR_s_SENSE_PRESS_00003d00\";\n      break;\n    case -0x76:\n      device_class_name = \"PTR_s_SENSE_ANALOG_00003d04\";\n      break;\n    case -0x75:\n      device_class_name = \"PTR_s_SENSE_UV_00003d08\";\n      break;\n    case -0x74:\n      device_class_name = \"PTR_s_SENSE_OBJTEMP_00003d0c\";\n      break;\n    case -0x73:\n      device_class_name = \"PTR_s_SENSE_PULSE_COUNT_00003d10\";\n      break;\n    case -0x72:\n      device_class_name = \"PTR_s_SENSE_DISTANCE_00003d14\";\n      break;\n    case -0x71:\n      device_class_name = \"PTR_s_SENSE_CO2_00003d18\";\n      break;\n    default:\n      break;\n  }\n  return device_class_name;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000039e8",
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "imported": false,
            "current_name": "get_device_class_name_000039e8"
        },
        "FUN_00000e38": {
            "renaming": {
                "FUN_00000e38": "call_with_params_and_return_second_param_00000e38",
                "param_1": "first_param",
                "param_2": "second_param",
                "FUN_000015d0": "call_function_with_three_params"
            },
            "code": "undefined4 call_with_params_and_return_second_param_00000e38(undefined4 first_param, undefined4 second_param)\n{\n  call_function_with_three_params(0, first_param, second_param);\n  return second_param;\n}",
            "called": [
                "FUN_000015d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e38",
            "calling": [
                "FUN_00004dee"
            ],
            "imported": false,
            "current_name": "call_with_params_and_return_second_param_00000e38"
        },
        "FUN_00002294": {
            "renaming": {
                "FUN_00002294": "is_difference_equal_to_third_00002294",
                "param_1": "input_value",
                "iVar2": "third_value",
                "bVar3": "is_equal",
                "difference": "difference",
                "*(int *)(param_1 + 0xC)": "third_value",
                "*(int *)(param_1 + 8)": "second_value",
                "*(int *)(param_1 + 4)": "third_value",
                "uVar1": "result"
            },
            "code": "bool is_difference_equal_to_third_00002294(int param_1)\n{\n    int difference = *(int *)(param_1 + 0xC) - *(int *)(param_1 + 8);\n    int third_value = *(int *)(param_1 + 4);\n    bool is_equal = difference == third_value;\n    if (is_equal)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002294",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "is_difference_equal_to_third_00002294"
        },
        "FUN_00003e9e": {
            "renaming": {
                "FUN_00003e9e": "calculate_result_00003e9e",
                "param_1": "data",
                "param_2": "count",
                "param_3": "params",
                "uVar1": "result",
                "FUN_00003ec4": "calculate"
            },
            "code": "int calculate_result_00003e9e(void *data, int count, void *params) {\n                      int result = calculate(data, count, params);\n                      return result;\n                    }",
            "called": [
                "FUN_00003ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e9e",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "calculate_result_00003e9e"
        },
        "FUN_00003378": {
            "renaming": {
                "FUN_00003378": "perform_operation_00003378",
                "param_1": "data_array",
                "PTR_s__04i__02i__02i__02i__02i__02i_000033bc": "constant_string",
                "arg1": "argument_1",
                "arg2": "argument_2",
                "arg3": "argument_3",
                "arg4": "argument_4",
                "size": "data_size",
                "offset": "data_offset"
            },
            "code": "int perform_operation_00003378(unsigned int *data_array)\n{\n    unsigned int offset = 0x76c;\n    unsigned int size = data_array[4] + 1;\n    unsigned int arg1 = data_array[3];\n    unsigned int arg2 = data_array[2];\n    unsigned int arg3 = data_array[1];\n    unsigned int arg4 = data_array[0];\n    perform_action(PTR_s__04i__02i__02i__02i__02i__02i_000033bc, offset, size, arg1, arg2, arg3, arg4);\n    return 0;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003378",
            "calling": [
                "FUN_000033c0",
                "FUN_00003444"
            ],
            "imported": false,
            "current_name": "perform_operation_00003378"
        },
        "FUN_00006768": {
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "data_buffer",
                "param_2": "data_pointer",
                "param_3": "data_length",
                "param_4": "param_4",
                "uVar1": "status_bits",
                "iVar2": "result",
                "uVar3": "temp_pointer",
                "uVar4": "data_length_short",
                "uVar5": "data_length_uint"
            },
            "code": "undefined4 process_data_00006768(undefined4 *data_buffer, undefined4 *data_pointer, undefined4 data_length, undefined4 param_4)\n{\n  undefined2 status_bits;\n  int result;\n  undefined4 temp_pointer;\n  ushort data_length_short;\n  uint data_length_uint;\n  \n  if ((data_buffer != (undefined4 *)0x0) && (data_buffer[6] == 0)) {\n    initialize_data();\n  }\n  if (data_pointer == (undefined4 *)PTR_DAT_00006868) {\n    data_pointer = (undefined4 *)data_buffer[1];\n  }\n  else if (data_pointer == (undefined4 *)PTR_DAT_0000686c) {\n    data_pointer = (undefined4 *)data_buffer[2];\n  }\n  else if (data_pointer == (undefined4 *)PTR_DAT_00006870) {\n    data_pointer = (undefined4 *)data_buffer[3];\n  }\n  data_length_short = *(ushort *)(data_pointer + 3);\n  data_pointer[1] = 0;\n  data_length_uint = (uint)data_length_short;\n  if ((int)(data_length_uint << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(data_length_uint << 0x1d) < 0) {\n    if ((undefined4 *)data_pointer[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data_pointer[0xd] != data_pointer + 0x11) {\n        finalize_data(data_buffer);\n      }\n      data_pointer[1] = data_pointer[0x10];\n      data_pointer[0xd] = 0;\n      if (data_pointer[0x10] != 0) {\n        *data_pointer = data_pointer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(data_length_uint << 0x1b)) {\n      *data_buffer = 9;\n      data_length_short = data_length_short | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(data_length_uint << 0x1c) < 0) {\n      result = process_data_00006768(data_buffer, data_pointer, data_length_uint << 0x1c, data_length, param_4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      data_pointer[2] = 0;\n      *(ushort *)(data_pointer + 3) = *(ushort *)(data_pointer + 3) & 0xfff7;\n      data_pointer[6] = 0;\n    }\n    *(ushort *)(data_pointer + 3) = *(ushort *)(data_pointer + 3) | 4;\n  }\n  if (data_pointer[4] == 0) {\n    finalize_data(data_buffer);\n  }\n  data_length_short = *(ushort *)(data_pointer + 3);\n  status_bits = *(undefined2 *)(data_pointer + 3);\n  if ((data_length_short & 3) != 0) {\n    *(undefined2 *)(data_pointer + 3) = 1;\n    handle_error(*(undefined4 *)PTR_DAT_00006874,PTR_LAB_00006754_1_00006878);\n    *(undefined2 *)(data_pointer + 3) = status_bits;\n    if ((data_length_short & 9) == 9) {\n      finalize_data(data_buffer);\n    }\n  }\n  temp_pointer = data_pointer[4];\n  *data_pointer = temp_pointer;\n  result = (*(code *)data_pointer[9])(data_buffer,data_pointer[8],temp_pointer,data_pointer[5]);\n  data_pointer[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  data_length_short = *(ushort *)(data_pointer + 3);\n  if (result != 0) {\n    temp_pointer = 0;\n  }\n  else {\n    data_length_short = data_length_short | 0x20;\n  }\n  if (result != 0) {\n    data_pointer[1] = temp_pointer;\n    data_length_short = data_length_short | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data_pointer + 3) = data_length_short;\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004158",
                "FUN_0000404c",
                "FUN_00004b34",
                "FUN_000043a0",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006768",
            "calling": [
                "FUN_00005e10"
            ],
            "imported": false,
            "current_name": "process_data_00006768"
        },
        "FUN_00000db0": {
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0",
                "FUN_00000dcc": "initialize_network",
                "FUN_00000d9c": "initialize_database"
            },
            "code": "void initialize_system_00000db0(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000db0",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "initialize_system_00000db0"
        },
        "FUN_00002600": {
            "renaming": {
                "FUN_00002600": "process_data_and_return_zero_00002600",
                "param_1": "input",
                "uVar1": "processed_data",
                "FUNC_000047e4": "process_input",
                "FUN_0000285c": "send_to_output"
            },
            "code": "int process_data_and_return_zero_00002600(int input) {\n  int processed_data = process_input(input);\n  send_to_output(processed_data);\n  return 0;\n}",
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002600",
            "calling": [
                "FUN_00003478"
            ],
            "imported": false,
            "current_name": "process_data_and_return_zero_00002600"
        },
        "FUN_00003810": {
            "renaming": {
                "FUN_00003810": "get_label_pointer_00003810",
                "param_1": "label_id",
                "puVar1": "label_pointer"
            },
            "code": "undefined* get_label_pointer_00003810(int label_id) {\n    undefined* label_pointer;\n    switch(label_id) {\n        case 2:\n            label_pointer = PTR_LABEL_000038cc;\n            break;\n        case 3:\n            label_pointer = PTR_LABEL_000038d0;\n            break;\n        case 4:\n            label_pointer = PTR_LABEL_000038d4;\n            break;\n        case 5:\n            label_pointer = PTR_LABEL_000038d8;\n            break;\n        case 6:\n            label_pointer = PTR_LABEL_000038dc;\n            break;\n        case 7:\n            label_pointer = PTR_LABEL_000038e0;\n            break;\n        case 8:\n            label_pointer = PTR_LABEL_000038e4;\n            break;\n        case 9:\n            label_pointer = PTR_LABEL_000038e8;\n            break;\n        case 10:\n            label_pointer = PTR_LABEL_000038ec;\n            break;\n        case 11:\n            label_pointer = PTR_LABEL_000038f0;\n            break;\n        case 12:\n            label_pointer = PTR_LABEL_000038f4;\n            break;\n        case 13:\n            label_pointer = PTR_LABEL_000038f8;\n            break;\n        case 14:\n            label_pointer = PTR_LABEL_000038fc;\n            break;\n        case 15:\n            label_pointer = PTR_LABEL_00003900;\n            break;\n        case 16:\n            label_pointer = PTR_LABEL_00003904;\n            break;\n        case 17:\n            label_pointer = PTR_LABEL_0000390c;\n            break;\n        case 19:\n            label_pointer = PTR_LABEL_00003910;\n            break;\n        case 21:\n            label_pointer = PTR_LABEL_00003908;\n            break;\n    }\n    return label_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003810",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_label_pointer_00003810"
        },
        "FUN_00000ed8": {
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "return_address",
                "FUN_00004c84": "initialize",
                "PTR_DAT_00000ef4": "PTR_DATA_ARRAY"
            },
            "code": "void initialize_data_00000ed8(void)\n{\n  undefined4 return_address;\n  initialize(PTR_DAT_00000ef4,return_address);\n  return;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ed8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "initialize_data_00000ed8"
        },
        "FUN_000031e0": {
            "renaming": {
                "FUN_000031e0": "print_alarm_message_000031e0",
                "PTR_s_The_alarm_rang_000031f8": "alarm_message",
                "FUN_00004db8": "print_message"
            },
            "code": "void print_alarm_message_000031e0(void)\n{\n  print_message(PTR_s_The_alarm_rang_000031f8);\n  return;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031e0",
            "calling": [],
            "imported": false,
            "current_name": "print_alarm_message_000031e0"
        },
        "FUN_000020f4": {
            "renaming": {
                "FUN_000020f4": "initialize_data_000020f4",
                "FUN_00002028": "initialize_buffer",
                "DAT_00002104": "PTR_buffer"
            },
            "code": "void initialize_data_000020f4(void)\n{\n  initialize_buffer(DAT_00002104, 3);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020f4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020f4"
        },
        "FUN_0000687c": {
            "renaming": {
                "FUN_0000687c": "decode_0000687c",
                "param_1": "code_length",
                "param_2": "encoded_code",
                "pbVar1": "decoded_code",
                "uVar2": "next_char",
                "iVar3": "i",
                "uVar4": "current_char",
                "uVar5": "start_range",
                "uVar6": "end_range",
                "bVar7": "is_range"
            },
            "code": "byte * decode_0000687c(int code_length, byte *encoded_code) {\n  byte *decode_0000687cd_code;\n  uint current_char;\n  int i;\n  uint next_char;\n  uint start_range;\n  uint end_range;\n  bool is_range;\n  bool is_negated;\n  current_char = (uint)*encoded_code;\n  is_range = current_char == 0x5e;\n  if (is_range) {\n    current_char = (uint)encoded_code[1];\n    encoded_code += 2;\n  }\n  else {\n    encoded_code++;\n  }\n  i = code_length - 1;\n  decode_0000687cd_code = (byte *)(&is_range + i);\n  do {\n    i++;\n    *(bool *)i = is_range;\n  } while (i != code_length + 0xff);\n  if (current_char == 0) {\n    decode_0000687cd_code = encoded_code - 1;\n  }\n  else {\n    do {\n      next_char = current_char;\n      is_negated = !is_range;\n      *(bool *)(code_length + next_char) = is_negated;\n      encoded_code++;\n      while (true) {\n        current_char = (uint)encoded_code[-1];\n        if (current_char != 0x2d) {\n          break;\n        }\n        end_range = (uint)*encoded_code;\n        if ((end_range == 0x5d) || (start_range = next_char, (int)end_range < (int)next_char)) {\n          goto LAB_000068aa;\n        }\n        do {\n          start_range++;\n          *(bool *)(code_length + start_range) = is_negated;\n        } while ((int)start_range < (int)end_range);\n        i = ~next_char + end_range;\n        if ((int)end_range <= (int)next_char) {\n          i = 0;\n        }\n        next_char = next_char + 1 + i;\n        encoded_code += 2;\n      }\n      decode_0000687cd_code = encoded_code - 1;\n    } while ((current_char != 0x5d) && (decode_0000687cd_code = encoded_code - 1, current_char != 0));\n  }\n  return decode_0000687cd_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000687c",
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "decode_0000687c"
        },
        "FUN_00005edc": {
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "str",
                "param_3": "endptr",
                "param_4": "base",
                "uVar1": "digit",
                "uVar2": "value",
                "bVar3": "sign",
                "iVar4": "result",
                "uVar5": "max_value",
                "uVar6": "max_digit",
                "pbVar7": "ptr",
                "pbVar8": "ptr",
                "PTR_DAT_00005fd0": "PTR_DAT_00005fd0"
            },
            "code": "uint parse_number_00005edc(undefined4 *result, byte *str, byte **endptr, uint base) {\n  uint digit;\n  uint value = 0;\n  int sign = 1;\n  uint max_value = UINT_MAX / base;\n  uint max_digit = UINT_MAX % base;\n  byte *ptr = str;\n  while (isspace(*ptr)) {\n    ptr++;\n  }\n  if (*ptr == '-') {\n    sign = -1;\n    ptr++;\n  }\n  else if (*ptr == '+') {\n    ptr++;\n  }\n  if (base == 0) {\n    if (*ptr != '0') {\n      base = 10;\n    }\n    else if (tolower(*(ptr + 1)) == 'x') {\n      base = 16;\n      ptr += 2;\n    }\n    else {\n      base = 8;\n    }\n  }\n  else if (base == 16 && *ptr == '0' && tolower(*(ptr + 1)) == 'x') {\n    ptr += 2;\n  }\n  while (isalnum(*ptr)) {\n    if (isdigit(*ptr)) {\n      digit = *ptr - '0';\n    }\n    else {\n      digit = tolower(*ptr) - 'a' + 10;\n    }\n    if (digit >= base) {\n      break;\n    }\n    if (value > max_value || (value == max_value && digit > max_digit)) {\n      result = 0;\n      value = UINT_MAX;\n      break;\n    }\n    value = value * base + digit;\n    ptr++;\n  }\n  if (result != 0) {\n    *result = sign * value;\n  }\n  if (endptr != 0) {\n    *endptr = ptr;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005edc",
            "calling": [
                "FUN_00005fd8"
            ],
            "imported": false,
            "current_name": "parse_number_00005edc"
        },
        "FUN_00001eea": {
            "renaming": {
                "FUN_00001eea": "update_data_00001eea",
                "param_1": "data_index",
                "param_2": "data_value",
                "uVar1": "bit_index",
                "iVar2": "data_ptr",
                "iVar3": "flag_ptr"
            },
            "code": "int update_data_00001eea(uint16_t data_index, uint8_t data_value) {\n    uint8_t bit_index = data_index & 0xff;\n    uint8_t bit_value = (data_value & 0x23) | 0x100;\n    uint8_t* data_ptr = get_data_ptr();\n    uint8_t* flag_ptr = get_flag_ptr();\n    if (data_value < 0) {\n        flag_ptr[bit_index / 8] |= (1 << (bit_index % 8));\n    }\n    else {\n        flag_ptr[bit_index / 8] &= ~(1 << (bit_index % 8));\n    }\n    data_ptr[data_index] = bit_value;\n    return 0;\n}",
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001eea",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "update_data_00001eea"
        },
        "FUN_000023a4": {
            "renaming": {
                "FUN_000023a4": "read_and_interrupt_000023a4",
                "auStack_88": "buffer",
                "FUN_000023d0": "initialize",
                "FUN_00004db8": "set_memory",
                "FUN_00002e6c": "read_from_buffer",
                "software_interrupt": "trigger_interrupt",
                "uVar1": "result"
            },
            "code": "undefined4 read_and_interrupt_000023a4(void)\n{\n  undefined4 result;\n  undefined buffer[128];\n  initialize(0);\n  set_memory(uRam000023c4);\n  result = read_from_buffer(0, buffer, 0x80);\n  trigger_interrupt(0x3f);\n  return result;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023a4",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "read_and_interrupt_000023a4"
        },
        "FUN_0000240c": {
            "renaming": {
                "FUN_0000240c": "getNextNode_0000240c",
                "param_1": "currentNode",
                "puVar1": "nextNode"
            },
            "code": "undefined4* getNextNode_0000240c(undefined4* currentNode) {\n    undefined4* nextNode = (undefined4*)*currentNode;\n    if (nextNode != (undefined4*)0x0) {\n        *currentNode = *nextNode;\n    }\n    return nextNode;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000240c",
            "calling": [
                "FUN_000024bc"
            ],
            "imported": false,
            "current_name": "getNextNode_0000240c"
        },
        "FUN_00004280": {
            "renaming": {
                "FUN_00004280": "do_nothing_with_data_00004280",
                "PTR_DAT_00004288": "PTR_dat",
                "do_nothing_000045ec": "do_nothing_with_data"
            },
            "code": "void do_nothing_with_data_00004280(void)\n{\n  do_nothing_with_data_00004280(PTR_DAT_00004288);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004280",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_00004280"
        },
        "FUN_00001448": {
            "renaming": {
                "FUN_00001448": "check_and_call_functions_00001448",
                "param_1": "index",
                "PTR_DAT_000014c0": "data_pointer",
                "short": "short_value",
                "FUN_00001f80": "call_function",
                "undefined2": "first_param",
                "undefined4": "second_param"
            },
            "code": "void check_and_call_functions_00001448(int index)\n{\n    short first_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n    short second_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n    \n    if (first_value != -1)\n    {\n        undefined2 first_param = *(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n        undefined4 second_param = *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0xc);\n        FUN_00001f80(first_param, second_param);\n    }\n    \n    if (second_value != -1)\n    {\n        undefined2 first_param = *(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n        undefined4 second_param = *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0x10);\n        FUN_00001f80(first_param, second_param);\n    }\n}",
            "called": [
                "FUN_00001f80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001448",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "check_and_call_functions_00001448"
        },
        "FUN_00001688": {
            "renaming": {
                "FUN_00001688": "initialize_data_00001688",
                "FUN_00001628": "initialize_pointer"
            },
            "code": "void initialize_data_00001688(void)\n{\n  initialize_pointer(0);\n  return;\n}",
            "called": [
                "FUN_00001628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001688",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00001688"
        },
        "FUN_00004042": {
            "renaming": {
                "FUN_00004042": "initialize_counter_00004042",
                "param_1": "counter_ptr",
                "FUN_00004f84": "set_counter"
            },
            "code": "void initialize_counter_00004042(void* counter_ptr)\n{\n  set_counter(counter_ptr, 0, 10);\n  return;\n}",
            "called": [
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004042",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "initialize_counter_00004042"
        },
        "FUN_00000cf0": {
            "renaming": {
                "FUN_00000cf0": "is_interrupts_enabled_in_privileged_mode_00000cf0",
                "uVar2": "interrupts_enabled",
                "bVar1": "is_privileged"
            },
            "code": "bool is_interrupts_enabled_in_privileged_mode_00000cf0() {\n  enable_irq_interrupts();\n  bool interrupts_enabled = false;\n  bool is_privileged = is_current_mode_privileged();\n  if (is_privileged) {\n    interrupts_enabled = is_irq_interrupts_enabled();\n  }\n  return interrupts_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cf0",
            "calling": [
                "FUN_00000930"
            ],
            "imported": false,
            "current_name": "is_interrupts_enabled_in_privileged_mode_00000cf0"
        },
        "FUN_00000f8c": {
            "renaming": {
                "FUN_00000f8c": "initialize_data_structure_00000f8c",
                "uVar1": "bit_mask",
                "puVar2": "data_ptr",
                "uVar3": "index",
                "iStack_24": "shift_amount",
                "piStack_20": "stack_ptr",
                "local_18": "size",
                "local_14": "unused",
                "local_10": "memory",
                "uStack_1c": "bit_mask_constant",
                "FUN_00000cd0": "initialize_memory",
                "FUN_000010d4": "initialize_data",
                "PTR_uRam00000fd4": "data_ptr_1",
                "uRam00000fd8": "size_1",
                "PTR_uRam00000fe0": "data_ptr_2",
                "uRam00000fe4": "size_2",
                "FUN_00000930": "get_random_number",
                "PTR_s_FAILED_ASSERTION__00001030": "error_message"
            },
            "code": "void initialize_data_structure_00000f8c(void)\n{\n  uint32_t bit_mask;\n  uint32_t *data_ptr;\n  uint32_t index;\n  int shift_amount;\n  int *stack_ptr;\n  uint32_t size;\n  initialize_memory();\n  data_ptr = (uint32_t *)PTR_uRam00000fd4;\n  size = uRam00000fd8;\n  initialize_data(data_ptr, size, 0x100, 0xf, 0xc);\n  data_ptr = (uint32_t *)PTR_uRam00000fe0;\n  size = uRam00000fe4;\n  initialize_data(data_ptr, size, 0x600, 7, 0);\n  bit_mask = 0xfd3;\n  index = get_random_number() >> 0x1e;\n  shift_amount = ((int)index << 0x11) >> 0x11;\n  stack_ptr = &shift_amount;\n  if ((index & (index - 1)) != 0) {\n    handle_error(3, PTR_s_FAILED_ASSERTION__00001030);\n  }\n  *data_ptr = 0;\n  *(data_ptr + 1) = 0;\n  *(data_ptr + 2) = index - 1;\n  return;\n}",
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f8c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00000f8c"
        },
        "FUN_00002894": {
            "renaming": {
                "FUN_00002894": "update_status_00002894",
                "param_1": "status",
                "param_2": "arg1",
                "param_3": "arg2",
                "iVar1": "data",
                "DAT_000028e8": "DATA_SECTION_START",
                "PTR_DAT_000028ec": "arg_data_ptr",
                "status_reg": "status_register_ptr",
                "status_ptr": "status_ptr"
            },
            "code": "void update_status_00002894(int status, uint32_t arg1, uint32_t arg2)\n{\n  int data = DAT_000028e8;\n  uint32_t* status_reg = (uint32_t*)(data + 0x1c);\n  *status_reg &= 0xfffffffb;\n  int* status_ptr = (int*)(data + 8);\n  *status_ptr = status - 1;\n  *(uint32_t*)PTR_DAT_000028ec = arg1;\n  *(uint32_t*)(PTR_DAT_000028ec + 4) = arg2;\n  *status_reg |= 4;\n  send_message(0x2e, 10);\n  update_message(0x2e);\n  return;\n}",
            "called": [
                "FUN_00002744",
                "FUN_00002714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002894",
            "calling": [
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "update_status_00002894"
        },
        "FUN_00004158": {
            "renaming": {
                "FUN_00004158": "check_and_execute_00004158",
                "param_1": "input",
                "param_2": "data",
                "uVar1": "result",
                "PTR_DAT_000041c4": "pointer_to_data_0x4",
                "PTR_DAT_000041c8": "pointer_to_data_0x8",
                "PTR_DAT_000041cc": "pointer_to_data_0xc",
                "do_nothing_000045e8": "do_nothing_1",
                "do_nothing_000045ec": "do_nothing_2"
            },
            "code": "int check_and_execute_00004158(int input, char *data)\n{\n  int result;\n  int *pointer_to_data_0x10 = (int *)(data + 0x10);\n  int *pointer_to_input_0x18 = (int *)(input + 0x18);\n  if (*pointer_to_data_0x10 != 0) {\n    if ((input != 0) && (*pointer_to_input_0x18 == 0)) {\n      execute_000042a4();\n    }\n    if (data == PTR_DAT_000041c4) {\n      data = *(char **)(input + 4);\n    }\n    else if (data == PTR_DAT_000041c8) {\n      data = *(char **)(input + 8);\n    }\n    else if (data == PTR_DAT_000041cc) {\n      data = *(char **)(input + 0xc);\n    }\n    short *PTR_DAT_000041cc = (short *)(data + 0xc);\n    if (*PTR_DAT_000041cc != 0) {\n      int *pointer_to_data_0x64 = (int *)(data + 100);\n      if ((*pointer_to_data_0x64 < 0) && (*PTR_DAT_000041cc << 0x10 < 0)) {\n        do_nothing_000045e8(*(int *)(data + 0x58));\n      }\n      result = execute_0000404c(input, data);\n      if (*pointer_to_data_0x64 < 0) {\n        return result;\n      }\n      if (*PTR_DAT_000041cc << 0x10 < 0) {\n        do_nothing_000045ec(*(int *)(data + 0x58));\n        return result;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004158",
            "calling": [
                "FUN_000041d0",
                "FUN_00006768",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "check_and_execute_00004158"
        },
        "FUN_00002654": {
            "renaming": {
                "FUN_00002654": "process_and_store_data_00002654",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "uVar1": "processed_data",
                "FUNC_000047e4": "perform_processing",
                "PTR_DAT_00002688": "stored_data",
                "FUN_00002894": "store_processed_data",
                "PTR_FUN_000026f0_1_0000268c": "processing_function_ptr"
            },
            "code": "int process_and_store_data_00002654(int data1, int data2, int data3)\n{\n  int processed_data = perform_processing(data1);\n  *(int*)PTR_DAT_00002688 = data2;\n  store_processed_data(processed_data, PTR_FUN_000026f0_1_0000268c, data3);\n  return 0;\n}",
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002654",
            "calling": [
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "process_and_store_data_00002654"
        },
        "FUN_00002538": {
            "renaming": {
                "FUN_00002538": "write_to_memory_00002538",
                "param_1": "address",
                "param_2": "value",
                "DAT_00002584": "memory_start_address",
                "DAT_00002588": "memory_start_address"
            },
            "code": "void write_to_memory_00002538(byte address, uint8_t value) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_00002584 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_00002584 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002538",
            "calling": [
                "FUN_0000258c"
            ],
            "imported": false,
            "current_name": "write_to_memory_00002538"
        },
        "FUN_00004c84": {
            "renaming": {
                "FUN_00004c84": "process_data_00004c84",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "data_handle",
                "uVar2": "arg1",
                "uStack_c": "arg2",
                "uStack_8": "arg3",
                "uStack_4": "arg4",
                "*DAT_00004cb0": "*data_ptr",
                "FUN_000042a4": "release_data",
                "FUNC_000057f8": "process_data_internal"
            },
            "code": "void process_data_00004c84(undefined4 data_ptr, undefined4 data_size, undefined4 param_3, undefined4 param_4) {\n  int data_handle = *DAT_00004cb0;\n  undefined4 arg1 = data_ptr;\n  undefined4 arg2 = data_size;\n  undefined4 arg3 = param_3;\n  undefined4 arg4 = param_4;\n  if ((data_handle != 0) && (*(int *)(data_handle + 0x18) == 0)) {\n    release_data(data_handle);\n  }\n  process_data_00004c84_internal(data_handle, *(undefined4 *)(data_handle + 8), data_ptr, &data_size, arg1, &arg2);\n  return;\n}\n",
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004c84",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c",
                "FUN_00003524",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00000f04",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00003378",
                "FUN_00002f74",
                "FUN_0000316c",
                "FUN_00000ed8",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "process_data_00004c84"
        },
        "FUN_0000305c": {
            "renaming": {
                "FUN_0000305c": "write_data_to_device_0000305c",
                "param_1": "num_args",
                "param_2": "args",
                "uVar1": "data_element",
                "auStack_20": "data_array",
                "local_18": "num_data_elements",
                "local_14": "device_id",
                "local_10": "device_address",
                "local_c": "i"
            },
            "code": "void write_data_to_device_0000305c(int num_args, undefined4 *args)\n{\n  undefined2 data_array[4];\n  uint num_data_elements;\n  int device_id;\n  undefined4 device_address;\n  int i;\n  if (num_args < 4) {\n    print_usage(PTR_s_usage___s__s__device_id___value_0_00003154, *args, args[1]);\n  }\n  else {\n    device_address = FUN_00004042(args[2]);\n    device_id = FUN_00003d24(device_address);\n    if (device_id == 0) {\n      print_error(PTR_s_error__undefined_device_given_00003158);\n    }\n    else {\n      initialize_data_array(data_array, num_args, args);\n      print_message(PTR_s_Writing_to_device___i____s_0000315c, device_address, *(undefined4 *)(device_id + 8));\n      write_data_to_device_0000305c_address(data_array, num_data_elements & 0xff);\n      num_data_elements = FUN_00003d94(device_id, data_array);\n      if ((int)num_data_elements < 1) {\n        if (num_data_elements == -0x86) {\n          print_error(PTR_s_error__device___i_is_not_writabl_00003160, device_address);\n        }\n        else {\n          print_error(PTR_s_error__failure_to_write_to_devic_00003164, device_address);\n        }\n      }\n      else {\n        print_message(PTR_s_data_successfully_written_to_dev_00003168, device_address);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00003d94",
                "FUN_00003694",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000305c",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "write_data_to_device_0000305c"
        },
        "FUN_000012b4": {
            "renaming": {
                "FUN_000012b4": "calculate_result_000012b4",
                "param_1": "input_value",
                "param_2": "input_data",
                "uVar1": "result",
                "FUN_00002364": "perform_calculation",
                "FUN_000024bc": "finalize_calculation"
            },
            "code": "int calculate_result_000012b4(int input_value, undefined input_data) {\n    int result = perform_calculation(input_value + 4, input_data);\n    finalize_calculation(input_value);\n    return result;\n}",
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012b4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_000012b4"
        },
        "FUN_00005b34": {
            "renaming": {
                "FUN_00005b34": "FUNC_00005b34"
            },
            "code": "\ncode * FUNC_00005b34(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5\n                   )\n\n{\n  bool bVar1;\n  byte bVar2;\n  undefined *puVar3;\n  int iVar4;\n  code *pcVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint uVar10;\n  uint **ppuVar11;\n  uint uVar12;\n  undefined *puVar13;\n  code *local_24;\n  \n  puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n  bVar2 = *(byte *)(param_2 + 6);\n  puVar7 = (undefined *)((int)param_2 + 0x43);\n  local_24 = param_4;\n  if (0x78 < bVar2) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)param_2 + 0x42) = bVar2;\nLAB_00005bdc:\n    puVar7 = (undefined *)((int)param_2 + 0x42);\n    uVar8 = 1;\nLAB_00005d28:\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (bVar2 < 99) {\n    if (bVar2 == 0) goto LAB_00005d06;\n    if (bVar2 == 0x58) {\n      *(undefined *)((int)param_2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(bVar2) {\n  case 99:\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    *(char *)((int)param_2 + 0x42) = (char)uVar8;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uVar10 = *param_2;\n    puVar9 = *param_5;\n    if ((int)(uVar10 << 0x18) < 0) {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n    }\n    else {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n      if ((uVar10 & 0x40) != 0) {\n        uVar8 = (uint)(short)uVar8;\n      }\n    }\n    if ((int)uVar8 < 0) {\n      uVar8 = -uVar8;\n      *(undefined *)((int)param_2 + 0x43) = 0x2d;\n    }\n    uVar10 = 10;\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*param_5;\n    uVar10 = *param_2;\n    uVar8 = param_2[5];\n    *param_5 = (uint *)(ppuVar11 + 1);\n    puVar9 = *ppuVar11;\n    if (((int)(uVar10 << 0x18) < 0) || (-1 < (int)(uVar10 << 0x19))) {\n      *puVar9 = uVar8;\n    }\n    else {\n      *(short *)puVar9 = (short)uVar8;\n    }\nLAB_00005d06:\n    param_2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    puVar9 = *param_5;\n    uVar8 = *param_2;\n    *param_5 = puVar9 + 1;\n    if (((int)(uVar8 << 0x18) < 0) || (-1 < (int)(uVar8 << 0x19))) {\n      uVar8 = *puVar9;\n    }\n    else {\n      uVar8 = (uint)*(ushort *)puVar9;\n    }\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    if (bVar2 == 0x6f) {\n      uVar10 = 8;\n    }\n    else {\n      uVar10 = 10;\n    }\n    break;\n  case 0x70:\n    *param_2 = *param_2 | 0x20;\n  case 0x78:\n    puVar3 = PTR_s_0123456789abcdef_00005d7c;\n    *(undefined *)((int)param_2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uVar10 = *param_2;\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    if ((-1 < (int)(uVar10 << 0x18)) && ((int)(uVar10 << 0x19) < 0)) {\n      uVar8 = uVar8 & 0xffff;\n    }\n    if ((int)(uVar10 << 0x1f) < 0) {\n      *param_2 = uVar10 | 0x20;\n    }\n    if (uVar8 == 0) {\n      *param_2 = *param_2 & 0xffffffdf;\n    }\n    uVar10 = 0x10;\n    break;\n  case 0x73:\n    puVar9 = *param_5;\n    *param_5 = puVar9 + 1;\n    puVar7 = (undefined *)*puVar9;\n    iVar4 = FUN_00006010(puVar7,0,param_2[1],puVar9,param_1,param_2,param_3);\n    if (iVar4 != 0) {\n      param_2[1] = iVar4 - (int)puVar7;\n    }\n    uVar8 = param_2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)param_2 + 0x43) = 0;\nLAB_00005c36:\n  uVar12 = param_2[1];\n  param_2[2] = uVar12;\n  if (-1 < (int)uVar12) {\n    *param_2 = *param_2 & 0xfffffffb;\n  }\n  puVar13 = puVar7;\n  if ((uVar8 != 0) || (uVar12 != 0)) {\n    do {\n      puVar13 = puVar13 + -1;\n      *puVar13 = puVar3[uVar8 - uVar10 * (uVar8 / uVar10)];\n      bVar1 = uVar10 <= uVar8;\n      uVar8 = uVar8 / uVar10;\n    } while (bVar1);\n  }\n  if (((uVar10 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4])) {\n    puVar13[-1] = 0x30;\n    puVar13 = puVar13 + -1;\n  }\n  param_2[4] = (int)puVar7 - (int)puVar13;\n  puVar7 = puVar13;\nLAB_00005c84:\n  iVar4 = FUN_00005a58(param_1,param_2,&local_24,param_3,param_4);\n  if ((iVar4 == -1) || (iVar4 = (*param_4)(param_1,param_3,puVar7,param_2[4]), iVar4 == -1)) {\nLAB_00005c98:\n    pcVar5 = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar4 = 0; iVar4 < (int)(param_2[3] - (int)local_24); iVar4 = iVar4 + 1) {\n        iVar6 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar6 == -1) goto LAB_00005c98;\n      }\n    }\n    pcVar5 = (code *)param_2[3];\n    if ((int)(code *)param_2[3] < (int)local_24) {\n      pcVar5 = local_24;\n    }\n  }\n  return pcVar5;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005b34",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "FUNC_00005b34"
        },
        "FUN_0000058e": {
            "renaming": {
                "FUN_0000058e": "update_linked_list_0000058e",
                "param_1": "head_ptr",
                "param_2": "new_node_ptr",
                "*param_1": "*head_ptr",
                "*param_2": "*new_node_ptr"
            },
            "code": "void update_linked_list_0000058e(int *head_ptr, undefined4 *new_node_ptr)\n{\n  if (*head_ptr == 0) {\n    *new_node_ptr = new_node_ptr;\n  }\n  else {\n    *new_node_ptr = *(undefined4 *)*head_ptr;\n    *(undefined4 **) *head_ptr = new_node_ptr;\n  }\n  *head_ptr = (int)new_node_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000058e",
            "calling": [
                "FUN_00000698"
            ],
            "imported": false,
            "current_name": "update_linked_list_0000058e"
        },
        "FUN_0000656c": {
            "renaming": {
                "FUN_0000656c": "FUNC_0000656c"
            },
            "code": "\nundefined4 FUNC_0000656c(undefined4 param_1,uint *param_2,byte **param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  code *pcVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  undefined4 *puVar7;\n  uint *puVar8;\n  uint *puVar9;\n  uint *puVar10;\n  int unaff_r9;\n  int iVar11;\n  undefined4 local_34 [4];\n  \n  local_34[0] = *(undefined4 *)PTR_PTR_DAT_00006744;\n  local_34[1] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 4);\n  local_34[2] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 8);\n  pcVar3 = (code *)PTR_LAB_00004f80_1_0000674c;\n  if (param_2[6] != 3) {\n    pcVar3 = (code *)PTR_LAB_00005fd4_1_00006748;\n  }\n  uVar6 = param_2[2];\n  uVar4 = uVar6 - 1;\n  if (0x15c < uVar4) {\n    unaff_r9 = uVar6 - 0x15d;\n    uVar6 = 0x15d;\n  }\n  if (0x15c < uVar4) {\n    param_2[2] = uVar6;\n  }\n  puVar10 = param_2 + 7;\n  if (uVar4 < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *param_2 = *param_2 | 0xd00;\n  iVar11 = 0;\n  puVar9 = puVar10;\n  do {\n    iVar1 = FUN_00006010(local_34[iVar11],**param_3,2);\n    if (iVar1 != 0) {\n      if (iVar11 == 1) {\n        if (param_2[1] == 0) {\n          param_2[1] = 8;\n          *param_2 = *param_2 | 0x200;\n        }\n        uVar4 = *param_2 & 0xfffffaff;\nLAB_000065f4:\n        *param_2 = uVar4;\n      }\n      else if (iVar11 == 2) {\n        if ((*param_2 & 0x600) != 0x200) goto LAB_00006624;\n        param_2[1] = 0x10;\n        uVar4 = *param_2 | 0x100;\n        goto LAB_000065f4;\n      }\n      uVar4 = param_2[2];\n      param_2[2] = uVar4 - 1;\n      if (uVar4 != 0) {\n        pbVar5 = *param_3;\n        *param_3 = pbVar5 + 1;\n        puVar8 = (uint *)((int)puVar9 + 1);\n        *(byte *)puVar9 = *pbVar5;\n        pbVar5 = param_3[1];\n        param_3[1] = pbVar5 + -1;\n        puVar9 = puVar8;\n        if (((int)(pbVar5 + -1) < 1) &&\n           (iVar1 = (*(code *)param_2[0x60])(param_1,param_3), iVar1 != 0)) {\n          iVar11 = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iVar11 = iVar11 + 1;\n  } while (iVar11 != 3);\n  if (param_2[1] == 0) {\n    param_2[1] = 10;\n  }\n  FUN_0000687c(param_2[5],(int)PTR_DAT_00006750 - param_2[1]);\n  iVar11 = 0;\n  while( true ) {\n    puVar8 = puVar9;\n    if (param_2[2] == 0) break;\n    pbVar5 = *param_3;\n    uVar4 = (uint)*pbVar5;\n    if (*(char *)(param_2[5] + uVar4) == '\\0') break;\n    if ((uVar4 == 0x30) && ((int)(*param_2 << 0x14) < 0)) {\n      iVar11 = iVar11 + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        param_2[2] = param_2[2] + 1;\n      }\n    }\n    else {\n      *param_2 = *param_2 & 0xfffff6ff;\n      puVar8 = (uint *)((int)puVar9 + 1);\n      *(byte *)puVar9 = *pbVar5;\n    }\n    pbVar5 = param_3[1];\n    param_3[1] = pbVar5 + -1;\n    if ((int)(pbVar5 + -1) < 1) {\n      iVar1 = (*(code *)param_2[0x60])(param_1,param_3);\n      if (iVar1 != 0) break;\n    }\n    else {\n      *param_3 = *param_3 + 1;\n    }\n    param_2[2] = param_2[2] - 1;\n    puVar9 = puVar8;\n  }\nLAB_000066ca:\n  if ((int)(*param_2 << 0x17) < 0) {\n    if (puVar10 < puVar8) {\n      (*(code *)param_2[0x5f])(param_1,*(byte *)((int)puVar8 + -1),param_3);\n      puVar8 = (uint *)((int)puVar8 + -1);\n    }\n    if (puVar8 == puVar10) {\n      return 1;\n    }\n  }\n  if ((*param_2 & 0x10) == 0) {\n    *(byte *)puVar8 = 0;\n    uVar2 = (*pcVar3)(param_1,puVar10,0,param_2[1]);\n    puVar7 = (undefined4 *)*param_4;\n    uVar4 = *param_2;\n    *param_4 = puVar7 + 1;\n    puVar7 = (undefined4 *)*puVar7;\n    if ((uVar4 & 0x20) == 0) {\n      if ((int)(uVar4 << 0x1f) < 0) {\n        *(short *)puVar7 = (short)uVar2;\n      }\n      else {\n        *puVar7 = uVar2;\n      }\n    }\n    else {\n      *puVar7 = uVar2;\n    }\n    param_2[3] = param_2[3] + 1;\n  }\n  param_2[4] = (uint)((int)puVar8 + param_2[4] + (iVar11 - (int)puVar10));\n  return 0;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0000656c",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "FUNC_0000656c"
        },
        "FUN_000025f4": {
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "FUN_000027b0": "initialize_hardware"
            },
            "code": "void initialize_system_000025f4(void)\n{\n  initialize_hardware();\n  return;\n}",
            "called": [
                "FUN_000027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000025f4",
            "calling": [
                "FUN_00002396"
            ],
            "imported": false,
            "current_name": "initialize_system_000025f4"
        },
        "FUN_00001ddc": {
            "renaming": {
                "FUN_00001ddc": "print_char_with_tab_offset_00001ddc",
                "param_1": "character",
                "cVar1": "char_to_print",
                "FUN_00001da2": "get_char_from_input",
                "FUN_00001d3a": "print_char_to_output"
            },
            "code": "void print_char_with_tab_offset_00001ddc(undefined2 character)\n{\n  char char_to_print;\n  char_to_print = get_char_from_input(character);\n  print_char_to_output(DAT_00001e08, char_to_print + '\t');\n  return;\n}",
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ddc",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "print_char_with_tab_offset_00001ddc"
        },
        "FUN_00002ecc": {
            "renaming": {
                "FUN_00002ecc": "read_from_device_and_print_message_00002ecc",
                "param_1": "device_address",
                "param_2": "device_info_address",
                "uVar1": "device_type",
                "uVar2": "device_info_ptr",
                "auStack_1c": "message_buffer",
                "local_14": "message_length"
            },
            "code": "void read_from_device_and_print_message_00002ecc(undefined4 device_address, int device_info_address)\n{\n    undefined4 device_info_ptr;\n    undefined4 message_length;\n    undefined message_buffer[8];\n    \n    message_length = FUN_00003d64(device_info_address, message_buffer);\n    if ((int)message_length < 1) {\n        FUN_00004c84(PTR_s_error__failed_to_read_from_devic_00002f28, device_address);\n    }\n    else {\n        device_info_ptr = *(undefined4 *)(device_info_address + 8);\n        undefined4 device_type = FUN_000039e8(*(undefined *)(*(int *)(device_info_address + 0xc) + 8));\n        FUN_00004c84(PTR_s_Reading_from___i___s__s__00002f2c, device_address, device_info_ptr, device_type);\n        FUN_00003694(message_buffer, message_length & 0xff);\n    }\n    return;\n}",
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002ecc",
            "calling": [
                "FUN_00002f30",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "read_from_device_and_print_message_00002ecc"
        },
        "FUN_00000d76": {
            "renaming": {
                "FUN_00000d76": "clearMemory_00000d76",
                "param_1": "memoryBlock",
                "param_2": "blockSize",
                "puVar1": "blockPointer",
                "*puVar1": "*blockPointer",
                "undefined4": "uint32_t",
                "FUN_00000d44": "<unchanged>"
            },
            "code": "void clearMemory_00000d76(void* memoryBlock, size_t blockSize){\n                      uint32_t* blockPointer = (uint32_t*)memoryBlock;\n                      *blockPointer = 0;\n                    }",
            "called": [
                "FUN_00000d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d76",
            "calling": [
                "FUN_00000d9c"
            ],
            "imported": false,
            "current_name": "clearMemory_00000d76"
        },
        "FUN_000057a8": {
            "renaming": {
                "FUN_000057a8": "decrease_array_index_and_return_input_000057a8",
                "param_1": "input",
                "param_2": "array_element",
                "param_3": "array_and_index",
                "iVar1": "new_index",
                "puVar2": "current_element",
                "*param_3": "array",
                "param_3[2]": "current_index",
                "param_3[6]": "array_size",
                "(char)param_2": "input_casted_to_char",
                "FUN_00005404": "handle_error"
            },
            "code": "int decrease_array_index_and_return_input_000057a8(int input, int *array, int array_size, int *current_index){\n  int new_index = *current_index - 1;\n  *current_index = new_index;\n  if ((new_index < 0) && ((new_index < array_size || (input == 10)))) {\n    int result = handle_error();\n    return result;\n  }\n  int *current_element = &array[*current_index];\n  *current_element = input;\n  return input;\n}",
            "called": [
                "FUN_00005404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057a8",
            "calling": [
                "FUN_000057d2"
            ],
            "imported": false,
            "current_name": "decrease_array_index_and_return_input_000057a8"
        },
        "FUN_00001696": {
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "code": "int calculate_offset_00001696(uint32_t base_address, int offset) {\n    uint32_t masked_base_address = base_address & 0xf0000000;\n    uint32_t lower_bits = base_address & 0xfffff;\n    uint32_t shifted_lower_bits = lower_bits << 5;\n    uint32_t result = (offset * 4) + masked_base_address + shifted_lower_bits + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001696",
            "calling": [
                "FUN_00001710",
                "FUN_000016c8",
                "FUN_000016ec"
            ],
            "imported": false,
            "current_name": "calculate_offset_00001696"
        },
        "FUN_000008b8": {
            "renaming": {
                "FUN_000008b8": "count_Elf32_Rel_ARRAY_000008b8",
                "local_c": "current_ptr"
            },
            "code": "int count_Elf32_Rel_ARRAY_000008b8() {\n    int *current_ptr = (int *)PTR_DAT_000008f4;\n    while (*current_ptr == DAT_000008f8 && current_ptr < PTR_Elf32_Rel_ARRAY_000008fc) {\n        current_ptr++;\n    }\n    int count = ((int)PTR_Elf32_Rel_ARRAY_000008fc - (int)current_ptr) >> 2;\n    return count << 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000008b8",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "count_Elf32_Rel_ARRAY_000008b8"
        },
        "FUN_000024bc": {
            "renaming": {
                "FUN_000024bc": "check_and_handle_error_000024bc",
                "*param_1": "*error_code",
                "uVar1": "error_character",
                "uVar2": "function_result",
                "iVar3": "error_check",
                "FUN_00000cd0": "get_function_result",
                "FUN_00000d0c": "handle_error",
                "FUN_0000240c": "check_error",
                "FUN_00000698": "print_error",
                "FUN_00000738": "print_error_character"
            },
            "code": "void check_and_handle_error_000024bc(int *error_code)\n{\n    undefined uVar1;\n    undefined4 function_result = get_function_result();\n    if (*error_code == 0) {\n        handle_error(function_result);\n    }\n    else if (*error_code == -1) {\n        *error_code = 0;\n        handle_error(function_result);\n    }\n    else {\n        int error_check = check_error(error_code);\n        print_error(error_check - 8, 10);\n        if (*error_code == 0) {\n            *error_code = -1;\n        }\n        uVar1 = *(undefined *)(error_check - 3);\n        handle_error(function_result);\n        print_error_character(uVar1);\n    }\n    return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000024bc",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "check_and_handle_error_000024bc"
        },
        "FUN_00000490": {
            "renaming": {
                "FUN_00000490": "calculate_result_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "FUN_00000e14": "perform_calculation"
            },
            "code": "int calculate_result_00000490(int input1, int input2, int input3, int input4) {\n  int result = perform_calculation(input3, input4);\n  return result;\n}",
            "called": [
                "FUN_00000e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000490",
            "calling": [
                "FUN_00004dc8"
            ],
            "imported": false,
            "current_name": "calculate_result_00000490"
        },
        "FUN_0000091c": {
            "renaming": {
                "FUN_0000091c": "get_pointer_to_data_0000091c",
                "PTR_DAT_0000092c": "pointer_to_data"
            },
            "code": "const char* get_pointer_to_data_0000091c() {\n    return PTR_DAT_0000092c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000091c",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_pointer_to_data_0000091c"
        },
        "FUN_00001f80": {
            "renaming": {
                "FUN_00001f80": "update_data_in_table_00001f80",
                "param_1": "table",
                "param_2": "data",
                "iVar1": "index_of_data",
                "iVar2": "index_of_table_row",
                "uVar3": "parameter_1",
                "uVar4": "parameter_2",
                "uVar5": "data_flags"
            },
            "code": "void update_data_in_table_00001f80(undefined2 table, undefined4 data) {\n  int index_of_data;\n  int index_of_table_row;\n  undefined4 original_data;\n  uint data_flags;\n  \n  initialize_table(table);\n  index_of_data = get_index_of_data(table);\n  index_of_table_row = get_index_of_table_row(table);\n  original_data = *(undefined4 *)(index_of_data + index_of_table_row * 4);\n  *(undefined4 *)(index_of_data + index_of_table_row * 4) = data;\n  data_flags = *(uint *)(index_of_data + index_of_table_row * 4);\n  if ((data_flags & 0xf0000) != 0) {\n    undefined4 parameter_1 = get_parameter_1(table);\n    int parameter_2 = get_parameter_2(table);\n    call_function(parameter_1, parameter_2);\n  }\n  return;\n}",
            "called": [
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001ddc",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001f80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "imported": false,
            "current_name": "update_data_in_table_00001f80"
        },
        "FUN_00000e64": {
            "renaming": {
                "FUN_00000e64": "set_flags_and_call_functions_00000e64",
                "FUN_00001274": "call_function1",
                "FUN_00001eea": "call_function2",
                "FUN_00001ff6": "call_function3",
                "DAT_00000ed0": "data_offset",
                "DAT_00000ed4": "data_address",
                "PTR_": "pointer_"
            },
            "code": "void set_flags_and_call_functions_00000e64(void)\n{\n  uint* flag_ptr = (uint *)(FUN_00001034 + DAT_00000ed0 + 4);\n  *flag_ptr |= 0x200;\n  uint* data_ptr = (uint *)(DAT_00000ed4 + 0x48);\n  *data_ptr &= 0xfefff8ff;\n  call_function1();\n  call_function2(0x2056,0x80);\n  call_function2(0x511a,0x80);\n  call_function2(0x2055,0x80);\n  call_function3(0x2056);\n  call_function3(0x511a);\n  call_function3(0x2055);\n  return;\n}",
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e64",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_00000e64"
        },
        "FUN_000026e4": {
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4",
                "FUN_00002970": "setup_hardware"
            },
            "code": "void initialize_system_000026e4(void)\n{\n  setup_hardware();\n  return;\n}",
            "called": [
                "FUN_00002970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026e4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_system_000026e4"
        },
        "FUN_00000d44": {
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "value",
                "param_2": "multiplier"
            },
            "code": "int calculate_offset_00000d44(uint32_t value, int multiplier) {\n    int shifted_value = (value & 0xfffff) << 5;\n    int masked_value = (value & 0xf0000000);\n    int result = (multiplier * 4) + shifted_value + masked_value + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d44",
            "calling": [
                "FUN_00000d76"
            ],
            "imported": false,
            "current_name": "calculate_offset_00000d44"
        },
        "FUN_00000698": {
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "data_index",
                "param_2": "new_data",
                "PTR_DAT_00000730": "PTR_DATA",
                "PTR_DAT_00000734": "PTR_CONTROL"
            },
            "code": "void update_data_00000698(int data_index, uint8_t new_data) {\n    if (new_data < 9) {\n        uint8_t current_data_index = *(uint8_t *)(data_index + 4);\n        if ((8 < current_data_index) &&\n            (is_data_valid(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4),\n             *(int *)(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4) == 0)) {\n            *(uint32_t *)PTR_DAT_00000734 = *(uint32_t *)PTR_DAT_00000734 & ~(1 << *(int8_t *)(data_index + 5));\n        }\n    }\n    else if (*(uint8_t *)(data_index + 4) < 9) {\n        set_data(PTR_DAT_00000730 + *(uint8_t *)(data_index + 5) * 4, data_index + 8);\n        *(uint32_t *)PTR_DAT_00000734 = *(uint32_t *)PTR_DAT_00000734 | 1 << *(int8_t *)(data_index + 5);\n    }\n    *(uint8_t *)(data_index + 4) = new_data;\n    return;\n}",
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000698",
            "calling": [
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "update_data_00000698"
        },
        "FUN_00000cd0": {
            "renaming": {
                "FUN_00000cd0": "check_interrupt_enabled_00000cd0",
                "uVar2": "is_interrupt_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_interrupt_enabled = false;\nbool is_privileged_mode = check_interrupt_enabled_00000cd0();\nif (is_privileged_mode) {\n    is_interrupt_enabled = isIRQinterruptsEnabled();\n}\ndisableIRQinterrupts();\nreturn is_interrupt_enabled;",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cd0",
            "calling": [
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000f8c",
                "FUN_00000e58",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "check_interrupt_enabled_00000cd0"
        },
        "FUN_00000cc0": {
            "renaming": {
                "FUN_00000cc0": "is_interrupt_enabled_00000cc0",
                "uVar2": "is_enabled",
                "bVar1": "is_privileged_mode"
            },
            "code": "bool is_interrupt_enabled_00000cc0(){\\n\\\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\\n\\\n  if (is_privileged_mode) {\\n\\\n    return isIRQinterruptsEnabled();\\n\\\n  }\\n\\\n  disableIRQinterrupts();\\n\\\n  return false;\\n\\\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cc0",
            "calling": [
                "FUN_00000dc0"
            ],
            "imported": false,
            "current_name": "is_interrupt_enabled_00000cc0"
        },
        "FUN_00002994": {
            "renaming": {
                "FUN_00002994": "execute_function_00002994",
                "DAT_000029f8": "data",
                "PTR_DAT_000029fc": "function_pointer"
            },
            "code": "void execute_function_00002994(void)\n{\n  int DAT_000029f8 = DAT_000029f8;\n  if ((*(uint *)(DAT_000029f8 + 0x14) & 4) != 0 && (*(int *)PTR_DAT_000029fc != 0)) {\n    *(uint *)(DAT_000029f8 + 0x1c) &= 0xfffffffb;\n    (**(code **)PTR_DAT_000029fc)(*(undefined4 *)(PTR_DAT_000029fc + 4));\n  }\n  if ((*(uint *)(DAT_000029f8 + 0x14) & 2) != 0 && (*(int *)(PTR_DAT_000029fc + 8) != 0)) {\n    (**(code **)(PTR_DAT_000029fc + 8))(*(undefined4 *)(PTR_DAT_000029fc + 0xc));\n  }\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00002798"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002994",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00002994"
        },
        "FUN_00000d2a": {
            "renaming": {
                "FUN_00000d2a": "get_current_exception_number_if_privileged_mode_00000d2a",
                "bVar1": "is_privileged_mode",
                "uVar2": "current_exception_number"
            },
            "code": "uint get_current_exception_number_if_privileged_mode_00000d2a(void)\n{\n  bool is_privileged_mode;\n  uint current_exception_number;\n  \n  current_exception_number = 0;\n  is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    current_exception_number = getCurrentExceptionNumber();\n    current_exception_number = current_exception_number & 0x1f;\n  }\n  return current_exception_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d2a",
            "calling": [
                "FUN_00000738"
            ],
            "imported": false,
            "current_name": "get_current_exception_number_if_privileged_mode_00000d2a"
        },
        "FUN_00001ff6": {
            "renaming": {
                "FUN_00001ff6": "set_bit_at_position_00001ff6",
                "param_1": "position",
                "uVar1": "bit_position",
                "iVar2": "ptr",
                "*(int *)(iVar2 + 4)": "*ptr",
                "FUN_00001dc0": "get_bit_position",
                "FUN_00001d80": "get_pointer"
            },
            "code": "void set_bit_at_position_00001ff6(uint8_t position)\n{\n  uint8_t bit_position = get_bit_position(position);\n  int32_t* ptr = get_pointer(position);\n  *ptr = 1 << bit_position;\n  return;\n}",
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ff6",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00001ff6"
        },
        "FUN_000013b8": {
            "renaming": {
                "FUN_000013b8": "set_data_at_index_000013b8",
                "param_1": "index",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "assertion",
                "uVar1": "result",
                "PTR_s_FAILED_ASSERTION__0000143c": "FAILED_ASSERTION_MSG",
                "PTR_DAT_00001440": "DATA_PTR",
                "FUN_00000f04": "print_error",
                "FUN_00001448": "call_function_1",
                "FUN_00001392": "call_function_2",
                "PTR_DAT_00001444": "INFO_PTR",
                "0x18": "OFFSET_1",
                "0x1c": "OFFSET_2",
                "0x1e": "FLAG_OFFSET"
            },
            "code": "int set_data_at_index_000013b8(int index, int data, int flag, int assertion) {\n  int result = -1;\n  if (assertion != 0) {\n    print_error(3, PTR_s_FAILED_ASSERTION__0000143c);\n  }\n  *(int *)(PTR_DAT_00001440 + index * 8) = data;\n  *(int *)(PTR_DAT_00001440 + index * 8 + 4) = flag;\n  call_function_1(index);\n  call_function_2(*(int *)(PTR_DAT_00001444 + index * 0x20 + 0x18), PTR_DAT_00001444[index * 0x20 + 0x1c]);\n  if (PTR_DAT_00001444[index * 0x20 + 0x1e] == 0) {\n    result = call_function_3(index, data);\n  }\n  return result;\n}",
            "called": [
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448",
                "FUN_000014c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000013b8",
            "calling": [
                "FUN_00000df4"
            ],
            "imported": false,
            "current_name": "set_data_at_index_000013b8"
        },
        "FUN_00002a88": {
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "command_description",
                "local_10": "index",
                "local_c": "current_command",
                "PTR_s___20s__s_00002b04": "header_format",
                "PTR_s_Command_00002b00": "command_format",
                "PTR_s_Description_00002afc": "description_format",
                "PTR_s__________________________________00002b08": "separator_format",
                "PTR_PTR_s_reboot_00002b0c": "reboot_command"
            },
            "code": "void print_command_descriptions_00002a88(int *commands)\n{\n    int *command_description[2];\n    uint index;\n    int *current_command;\n    print_header(\"%20s %s\\n\", \"Command\", \"Description\");\n    print_separator();\n    print_footer();\n    command_description[0] = commands;\n    command_description[1] = (int *)PTR_PTR_s_reboot_00002b0c;\n    for (index = 0; index < 2; index = index + 1) {\n        current_command = command_description[index];\n        if (current_command != (int *)0x0) {\n            for (; *current_command != 0; current_command = current_command + 3) {\n                print_command_description(\"%20s %s\\n\", *current_command, current_command[1]);\n            }\n        }\n    }\n}\n",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a88",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "print_command_descriptions_00002a88"
        },
        "FUN_00002f30": {
            "renaming": {
                "FUN_00002f30": "iterate_linked_list_00002f30",
                "local_10": "index",
                "local_c": "current_node",
                "FUN_00002ecc": "do_something_with_node",
                "FUN_00004db8": "do_something_else"
            },
            "code": "void iterate_linked_list_00002f30() {\n  int index = 0;\n  undefined4 *current_node = *(undefined4 **)PTR_DAT_00002f6c;\n  while (current_node != (undefined4 *)0x0) {\n    do_something_with_node(index, current_node);\n    do_something_else(PTR_DAT_00002f70);\n    index++;\n    current_node = (undefined4 *)*current_node;\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f30",
            "calling": [
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "iterate_linked_list_00002f30"
        },
        "FUN_00001e44": {
            "renaming": {
                "FUN_00001e44": "set_bits_in_uint_array_00001e44",
                "param_1": "array_index",
                "param_2": "bit_index",
                "param_3": "value",
                "iVar1": "uint_array_index",
                "PTR_DAT_00001ec0": "uint_array",
                "*PTR_DAT_00001ec0": "*uint_array",
                "*(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4)": "*current_uint",
                "*(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4) & ~(0xf << ((param_2 & 7) << 2))": "*current_uint &= ~(0xf << bit_shift)",
                "*(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4) | param_3 << ((param_2 & 7) << 2)": "*current_uint |= value << bit_shift"
            },
            "code": "void set_bits_in_uint_array_00001e44(uint32_t *PTR_DAT_00001ec0, int array_index, uint32_t bit_index, uint32_t value) {\n    int PTR_DAT_00001ec0_index = (int)bit_index >> 3;\n    uint32_t *(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4) = PTR_DAT_00001ec0 + (PTR_DAT_00001ec0_index + array_index * 4);\n    uint32_t bit_shift = (bit_index & 7) << 2;\n    *(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4) & ~(0xf << ((param_2 & 7) << 2));\n    *(uint *)(PTR_DAT_00001ec0 + (iVar1 + param_1 * 4) * 4) | param_3 << ((param_2 & 7) << 2);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e44",
            "calling": [
                "FUN_00001ec4"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_array_00001e44"
        },
        "FUN_00001318": {
            "renaming": {
                "FUN_00001318": "set_bit_in_array_00001318",
                "param_1": "bit_position",
                "DAT_00001344": "PTR_DAT_00001344",
                "int": "uint32_t",
                "byte": "uint8_t",
                "*": "*",
                ">>": ">>",
                "&": "&",
                "=": "=",
                "1": "1",
                "<<": "<<"
            },
            "code": "void set_bit_in_array_00001318(uint8_t bit_position)\n{\n    uint32_t* array = DAT_00001344;\n    uint32_t index = (uint32_t)bit_position >> 5;\n    uint32_t bit_mask = 1 << (bit_position & 0x1f);\n    array[index] = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001318",
            "calling": [
                "FUN_000014c4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_00001318"
        },
        "FUN_00000900": {
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "code": "uint32_t get_main_stack_pointer_00000900() {\n    uint32_t main_stack_pointer = getMainStackPointer();\n    return main_stack_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000900",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "get_main_stack_pointer_00000900"
        },
        "FUN_00004274": {
            "renaming": {
                "FUN_00004274": "do_nothing_with_pointer_00004274",
                "PTR_DAT_0000427c": "PTR_pointer",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_pointer_00004274(void)\n{\n  do_nothing(PTR_DAT_0000427c);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004274",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_00004274"
        },
        "FUN_00002fe0": {
            "renaming": {
                "FUN_00002fe0": "check_device_id_00002fe0",
                "param_1": "device_id",
                "param_2": "device_info",
                "iVar1": "status",
                "uVar2": "device_id_info",
                "FUN_00004c84": "print_usage",
                "PTR_s_usage___s__s__device_id__all_00003050": "usage_string",
                "FUN_00004e52": "check_device_id_info",
                "PTR_DAT_00003054": "device_id_info_array",
                "FUN_00002f30": "print_device_id_not_found_error",
                "FUN_00004042": "get_device_id_info",
                "FUN_00003d24": "check_device_id_format",
                "FUN_00004db8": "print_error",
                "PTR_s_error__undefined_device_id_given_00003058": "undefined_device_id_error_string",
                "FUN_00002ecc": "print_device_id_info"
            },
            "code": "void check_device_id_00002fe0(int device_id, undefined4 *device_info)\n{\n  int status;\n  undefined4 device_id_info;\n  \n  if (device_id < 3) {\n    print_usage(PTR_s_usage___s__s__device_id__all_00003050, *device_info, device_info[1]);\n  }\n  else {\n    status = check_device_id_00002fe0_info(device_info[2], PTR_DAT_00003054);\n    if (status == 0) {\n      print_error(PTR_s_error__undefined_device_id_given_00003058);\n    }\n    else {\n      device_id_info = get_device_id_info(device_info[2]);\n      status = check_device_id_00002fe0_format(device_id_info);\n      if (status == 0) {\n        print_error(PTR_s_error__undefined_device_id_given_00003058);\n      }\n      else {\n        print_device_id_info(device_id_info, status);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00004c84",
                "FUN_00002f30",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002fe0",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "check_device_id_00002fe0"
        },
        "FUN_00001dc0": {
            "renaming": {
                "FUN_00001dc0": "extract_lower_bits_00001dc0",
                "param_1": "input_value"
            },
            "code": "ushort extract_lower_bits_00001dc0(ushort input_value) {\n    ushort lower_bits = input_value & 0x3f;\n    return lower_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001dc0",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "extract_lower_bits_00001dc0"
        },
        "FUN_00000df4": {
            "renaming": {
                "FUN_00000df4": "executeFunction_00000df4",
                "FUN_000013b8": "execute",
                "PTR_FUN_000012b4_1_00000e10": "functionPointer",
                "DAT_00000e0c": "arg4"
            },
            "code": "void executeFunction_00000df4(void)\n{\n  int arg1 = 0;\n  int arg2 = 0x1c200;\n  PTR_FUN_000012b4_1_00000e10 arg3 = PTR_FUN_000012b4_1_00000e10;\n  int DAT_00000e0c = DAT_00000e0c;\n  execute(arg1, arg2, arg3, DAT_00000e0c);\n  return;\n}",
            "called": [
                "FUN_000013b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000df4",
            "calling": [
                "FUN_00000410"
            ],
            "imported": false,
            "current_name": "executeFunction_00000df4"
        },
        "FUN_00002400": {
            "renaming": {
                "FUN_00002400": "do_nothing_00002400"
            },
            "code": "\nvoid do_nothing_00002400(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002400",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": false,
            "current_name": "do_nothing_00002400"
        },
        "FUN_00002eb4": {
            "renaming": {
                "FUN_00002eb4": "execute_function_00002eb4",
                "FUN_0000211c": "call_another_function"
            },
            "code": "int execute_function_00002eb4(void)\n{\n    call_another_function();\n    return 0;\n}",
            "called": [
                "FUN_0000211c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002eb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00002eb4"
        },
        "FUN_0000328c": {
            "renaming": {
                "FUN_0000328c": "decode_and_store_values_0000328c",
                "param_1": "input_values",
                "param_2": "output_values",
                "local_10": "current_position",
                "local_a": "decoded_value",
                "FUN_00004f84": "decode_value",
                "FUN_000031fc": "decode_values"
            },
            "code": "int decode_and_store_values_0000328c(unsigned int *input_values, int *output_values){\n    int current_position = 0;\n    short decoded_value;\n    decoded_value = decode_value(input_values[0], &current_position, 10);\n    output_values[5] = decoded_value - 0x76c;\n    decoded_value = decode_value(current_position + 1, &current_position, 10);\n    output_values[4] = decoded_value - 1;\n    decoded_value = decode_value(current_position + 1, &current_position, 10);\n    output_values[3] = (int)decoded_value;\n    decoded_value = decode_value(input_values[1], &current_position, 10);\n    output_values[2] = (int)decoded_value;\n    decoded_value = decode_value(current_position + 1, &current_position, 10);\n    output_values[1] = (int)decoded_value;\n    decoded_value = decode_value(current_position + 1, &current_position, 10);\n    *output_values = (int)decoded_value;\n    int decoded_result = decode_values(output_values[5] + 0x76c, output_values[4] + 1, output_values[3]);\n    output_values[6] = decoded_result;\n    output_values[8] = -1;\n    return 0;\n}",
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000328c",
            "calling": [
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "imported": false,
            "current_name": "decode_and_store_values_0000328c"
        },
        "FUN_000041f4": {
            "renaming": {
                "FUN_000041f4": "initialize_params_000041f4",
                "*param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "ptr",
                "PTR_FUN_00004dc8_1_0000422c": "PTR_FUN_00004dc8_1_0000422c",
                "DAT_00004230": "DAT_00004230",
                "PTR_FUN_00004e26_1_00004234": "PTR_FUN_00004e26_1_00004234",
                "PTR_LAB_00004e4a_1_00004238": "PTR_LAB_00004e4a_1_00004238"
            },
            "code": "void initialize_params_000041f4(undefined4 *params, undefined2 param_2, undefined2 param_3) {\n  params[0] = 0;\n  params[1] = 0;\n  params[2] = 0;\n  params[3] = param_2;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  params[7] = params + 8;\n  params[8] = params;\n  params[9] = PTR_FUN_00004dc8_1_0000422c;\n  params[10] = DAT_00004230;\n  params[11] = PTR_FUN_00004e26_1_00004234;\n  params[12] = PTR_LAB_00004e4a_1_00004238;\n  params[25] = 0;\n  params[26] = 0;\n}",
            "called": [
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041f4",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "initialize_params_000041f4"
        },
        "FUN_0000316c": {
            "renaming": {
                "FUN_0000316c": "check_and_execute_command_0000316c",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "result",
                "FUN_00002f74": "print_usage",
                "FUN_00004e52": "strcmp",
                "PTR_DAT_000031d4": "write",
                "FUN_00002fe0": "execute_write_command",
                "PTR_s_write_000031d8": "read",
                "FUN_0000305c": "execute_read_command",
                "PTR_s_usage___s_read_write_000031dc": "print_usage_and_exit"
            },
            "code": "int check_and_execute_command_0000316c(int argc, char **argv)\n{\n  int result;\n  if (argc < 2) {\n    print_usage();\n  }\n  else {\n    result = strcmp(argv[1], \"PTR_DAT_000031d4\");\n    if (result == 0) {\n      execute_PTR_DAT_000031d4_command(argc, argv);\n    }\n    else {\n      result = strcmp(argv[1], \"PTR_s_write_000031d8\");\n      if (result == 0) {\n        execute_PTR_s_write_000031d8_command(argc, argv);\n      }\n      else {\n        PTR_s_usage___s_PTR_s_write_000031d8_PTR_DAT_000031d4_000031dc(argv[0]);\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0000305c",
                "FUN_00004c84",
                "FUN_00004e52",
                "FUN_00002f74",
                "FUN_00002fe0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000316c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_execute_command_0000316c"
        },
        "FUN_000026f0": {
            "renaming": {
                "FUN_000026f0": "execute_if_valid_callback_000026f0",
                "param_1": "callback_param",
                "PTR_DAT_00002710": "callback_ptr",
                "code": "callback_func"
            },
            "code": "void execute_if_valid_callback_000026f0(int callback_param)\n{\n  int* PTR_DAT_00002710 = (int*)PTR_DAT_00002710;\n  if (*PTR_DAT_00002710 != 0) {\n    code* callback_func = *(code**)PTR_DAT_00002710;\n    (*callback_func)(callback_param);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026f0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_valid_callback_000026f0"
        },
        "FUN_000057d2": {
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "data",
                "param_4": "data_size",
                "puVar2": "data_end",
                "iVar1": "result",
                "iVar3": "index",
                "FUN_000057a8": "process_byte"
            },
            "code": "int process_data_000057d2(undefined4 param_1, undefined4 param_2, undefined *data, int data_size) {\n  int result = 0;\n  undefined *data_end = data + data_size;\n  while (data != data_end) {\n    result = process_byte(param_1, *data, param_2, data_size, result);\n    data++;\n  }\n  return result;\n}",
            "called": [
                "FUN_000057a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057d2",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "process_data_000057d2"
        },
        "FUN_000056b8": {
            "renaming": {
                "FUN_000056b8": "check_permission_and_return_status_000056b8",
                "param_1": "permission",
                "param_2": "permission_level",
                "param_3": "status",
                "param_4": "result",
                "iVar1": "function_result",
                "uVar2": "permission_status",
                "auStack_68": "permission_status_holder",
                "local_64": "permission_status"
            },
            "code": "int check_permission_and_return_status_000056b8(undefined4 permission, int permission_level, undefined4 *status, uint *result) {\n  int function_result;\n  undefined4 permission_status_holder [1];\n  uint permission_status;\n  if (*(short *)(permission_level + 0xe) < 0 || (function_result = check_permission(permission, (int)*(short *)(permission_level + 0xe), permission_status_holder), function_result < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(permission_level + 0xc) << 0x18) < 0) {\n      *status = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    permission_status = (uint)((permission_status & 0xf000) == 0x2000);\n    *result = permission_status;\n  }\n  *status = 0x400;\nLAB_000056f8:\n  return 0;\n}",
            "called": [
                "FUN_00000514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b8",
            "calling": [
                "FUN_00005700"
            ],
            "imported": false,
            "current_name": "check_permission_and_return_status_000056b8"
        },
        "FUN_00001a18": {
            "renaming": {
                "FUN_00001a18": "set_data_and_value_00001a18",
                "FUN_000016ec": "set_data",
                "FUN_00001734": "set_value",
                "PTR_DAT_00001a38": "PTR_DATA",
                "DAT_00001a34": "data"
            },
            "code": "void set_data_and_value_00001a18(void)\n{\n    int DAT_00001a34 = 1;\n    set_DAT_00001a34(DAT_00001a34);\n    set_value();\n    *PTR_DAT_00001a38 = 4;\n    return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a18",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "set_data_and_value_00001a18"
        },
        "FUN_00000d9c": {
            "renaming": {
                "FUN_00000d9c": "initialize_data_00000d9c",
                "FUN_00000d76": "clear_data_buffer",
                "DAT_00000dac": "data_buffer"
            },
            "code": "void initialize_data_00000d9c(void)\n{\n  clear_DAT_00000dac(DAT_00000dac,0);\n  return;\n}",
            "called": [
                "FUN_00000d76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d9c",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": false,
            "current_name": "initialize_data_00000d9c"
        },
        "FUN_00003ff4": {
            "renaming": {
                "FUN_00003ff4": "calculate_new_length_00003ff4",
                "param_1": "length",
                "param_2": "start",
                "param_3": "end",
                "uVar1": "new_end"
            },
            "code": "uint32_t calculate_new_length_00003ff4(int length, uint32_t start, uint32_t end, undefined param_4)\n{\n    uint32_t new_end = end;\n    if ((start < end) && (new_end = end, length != 0)) {\n        FUN_000045ee((end - start) + length, length, start);\n        FUN_00004622(length, param_4, end - start);\n    }\n    return new_end;\n}",
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ff4",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "calculate_new_length_00003ff4"
        },
        "FUN_00004634": {
            "renaming": {
                "FUN_00004634": "FUNC_00004634"
            },
            "code": "\nvoid FUNC_00004634(uint *param_1,uint param_2,undefined4 param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  bool bVar6;\n  uint *local_20;\n  uint local_1c;\n  undefined4 uStack_18;\n  \n  local_20 = param_1;\n  local_1c = param_2;\n  uStack_18 = param_3;\n  if (0x3b < *param_1) {\n    FUN_00005584(&local_20,*param_1,0x3c);\n    uVar3 = param_1[1] + (int)local_20;\n    param_1[1] = uVar3;\n    if ((int)local_1c < 0) {\n      uVar3 = uVar3 - 1;\n      *param_1 = local_1c + 0x3c;\n    }\n    else {\n      *param_1 = local_1c;\n    }\n    if ((int)local_1c < 0) {\n      param_1[1] = uVar3;\n    }\n  }\n  if (0x3b < param_1[1]) {\n    FUN_00005584(&local_20,param_1[1],0x3c);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[2] + (int)local_20;\n    param_1[2] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x3c;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar4;\n    }\n  }\n  if (0x17 < param_1[2]) {\n    FUN_00005584(&local_20,param_1[2],0x18);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[3] + (int)local_20;\n    param_1[3] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x18;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[3] = uVar4;\n    }\n  }\n  if (0xb < param_1[4]) {\n    FUN_00005584(&local_20,param_1[4],0xc);\n    bVar6 = (int)local_1c < 0;\n    uVar3 = param_1[5] + (int)local_20;\n    param_1[5] = uVar3;\n    if (bVar6) {\n      local_1c = local_1c + 0xc;\n      uVar3 = uVar3 - 1;\n    }\n    if (!bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[5] = uVar3;\n    }\n  }\n  puVar1 = PTR_DAT_000047e0;\n  uVar3 = param_1[5];\n  if ((uVar3 & 3) == 0) {\n    if (uVar3 == (uVar3 / 100) * 100) {\n      if ((uVar3 + 0x76c) % 400 == 0) {\n        iVar5 = 0x1d;\n      }\n      else {\n        iVar5 = 0x1c;\n      }\n    }\n    else {\n      iVar5 = 0x1d;\n    }\n  }\n  else {\n    iVar5 = 0x1c;\n  }\n  if ((int)param_1[3] < 1) {\n    while ((int)param_1[3] < 1) {\n      uVar3 = param_1[4];\n      param_1[4] = uVar3 - 1;\n      if (uVar3 - 1 == 0xffffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 - 1;\n        param_1[4] = 0xb;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 == (uVar3 / 100) * 100) {\n            if ((uVar4 + 0x76b) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n      iVar2 = iVar5;\n      if (param_1[4] != 1) {\n        iVar2 = *(int *)(puVar1 + param_1[4] * 4);\n      }\n      param_1[3] = iVar2 + param_1[3];\n    }\n  }\n  else {\n    while( true ) {\n      uVar3 = param_1[4];\n      iVar2 = iVar5;\n      if (uVar3 != 1) {\n        iVar2 = *(int *)(puVar1 + uVar3 * 4);\n      }\n      if ((int)param_1[3] <= iVar2) break;\n      param_1[3] = param_1[3] - iVar2;\n      param_1[4] = uVar3 + 1;\n      if (uVar3 + 1 == 0xc) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 + 1;\n        param_1[4] = 0;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 % 100 == 0) {\n            if ((uVar4 + 0x76d) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005584"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00004634",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00004634"
        },
        "FUN_00001d5e": {
            "renaming": {
                "FUN_00001d5e": "convertParamToAddress_00001d5e",
                "param_1": "param",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint16_t convertParamToAddress_00001d5e(ushort param) {\n    uint16_t address = (param & 0x7000) | 0x40048000;\n    return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d5e",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "imported": false,
            "current_name": "convertParamToAddress_00001d5e"
        },
        "FUN_0000191c": {
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "FUN_00001778": "disable_interrupts",
                "FUN_00001748": "set_system_clock",
                "*DAT_00001958": "*data_register",
                "*PTR_DAT_0000195c": "*status_register"
            },
            "code": "void initialize_system_0000191c(void)\n{\n  disable_interrupts();\n  set_system_clock(0x40);\n  *DAT_00001958 = *DAT_00001958 & 0x3b;\n  do {\n  } while ((data_register[6] & 0xc) != 0);\n  *PTR_DAT_0000195c = 1;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000191c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_system_0000191c"
        },
        "FUN_000050f4": {
            "renaming": {
                "FUN_000050f4": "get_pointer_to_data_000050f4",
                "PTR_DAT_000050fc": "pointer_to_data"
            },
            "code": "const char* get_pointer_to_data_000050f4() {\n  return PTR_DAT_000050fc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050f4",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_pointer_to_data_000050f4"
        },
        "FUN_00005a58": {
            "renaming": {
                "FUN_00005a58": "encode_string_00005a58",
                "param_1": "input",
                "param_2": "output_buffer",
                "param_3": "output_length",
                "param_4": "unknown",
                "param_5": "encoder_function",
                "iVar1": "i",
                "uVar2": "result",
                "uVar3": "buffer_offset",
                "uVar4": "j",
                "bVar5": "is_buffer_offset_four",
                "buffer_length": "buffer_length",
                "remaining_buffer_length": "remaining_buffer_length"
            },
            "code": "undefined4 encode_string_00005a58(undefined4 input, uint *output_length, uint *output_buffer, undefined4 unknown, code *encoder_function)\\n\\\n{\\n\\\n    int i;\\n\\\n    undefined4 result;\\n\\\n    uint buffer_length = output_buffer[4];\\n\\\n    if ((int)output_buffer[4] < (int)output_buffer[2]) {\\n\\\n        buffer_length = output_buffer[2];\\n\\\n    }\\n\\\n    *output_length = buffer_length;\\n\\\n    if (*(char *)((int)output_buffer + 0x43) != \"\\0\") {\\n\\\n        *output_length = buffer_length + 1;\\n\\\n    }\\n\\\n    if ((int)(*output_buffer << 0x1a) < 0) {\\n\\\n        *output_length = *output_length + 2;\\n\\\n    }\\n\\\n    uint buffer_offset = *output_buffer & 6;\\n\\\n    if (buffer_offset == 0) {\\n\\\n        for (; (int)buffer_offset < (int)(output_buffer[3] - *output_length); buffer_offset++) {\\n\\\n            i = (*encoder_function)(input, unknown, (int)output_buffer + 0x19, 1);\\n\\\n            if (i == -1) {\\n\\\n                goto LAB_00005afc;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    buffer_offset = (uint)*(byte *)((int)output_buffer + 0x43);\\n\\\n    if (buffer_offset != 0) {\\n\\\n        buffer_offset = 1;\\n\\\n    }\\n\\\n    if ((int)(*output_buffer << 0x1a) < 0) {\\n\\\n        *(undefined *)((int)output_buffer + buffer_offset + 0x43) = 0x30;\\n\\\n        *(undefined *)((int)output_buffer + buffer_offset + 0x44) = *(undefined *)((int)output_buffer + 0x45);\\n\\\n        buffer_offset += 2;\\n\\\n    }\\n\\\n    i = (*encoder_function)(input, unknown, (int)output_buffer + 0x43, buffer_offset);\\n\\\n    if (i == -1) {\\n\\\n        goto LAB_00005afc;\\n\\\n    }\\n\\\n    uint remaining_buffer_length = output_buffer[3];\\n\\\n    bool is_buffer_offset_four = (*output_buffer & 6) == 4;\\n\\\n    if (is_buffer_offset_four) {\\n\\\n        remaining_buffer_length = remaining_buffer_length - *output_length;\\n\\\n    }\\n\\\n    if (is_buffer_offset_four) {\\n\\\n        remaining_buffer_length = remaining_buffer_length & ~((int)remaining_buffer_length >> 0x1f);\\n\\\n    }\\n\\\n    else {\\n\\\n        remaining_buffer_length = 0;\\n\\\n    }\\n\\\n    if ((int)output_buffer[4] < (int)output_buffer[2]) {\\n\\\n        remaining_buffer_length += (output_buffer[2] - output_buffer[4]);\\n\\\n    }\\n\\\n    for (uint j = 0; remaining_buffer_length != j; j++) {\\n\\\n        i = (*encoder_function)(input, unknown, (int)output_buffer + 0x1a, 1);\\n\\\n        if (i == -1) {\\n\\\n            goto LAB_00005afc;\\n\\\n        }\\n\\\n    }\\n\\\n    result = 0;\\n\\\n    LAB_00005afc:\\n\\\n    return result;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005a58",
            "calling": [
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "encode_string_00005a58"
        },
        "FUN_000056b0": {
            "renaming": {
                "FUN_000056b0": "get_dat_value_000056b0",
                "DAT_000056b4": "dat_value"
            },
            "code": "int get_dat_value_000056b0(void)\n{\n    return DAT_000056b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b0",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100",
                "FUN_00004f98"
            ],
            "imported": false,
            "current_name": "get_dat_value_000056b0"
        },
        "FUN_00003d24": {
            "renaming": {
                "FUN_00003d24": "get_element_at_index_00003d24",
                "param_1": "index",
                "local_c": "current_element",
                "local_10": "current_index"
            },
            "code": "undefined4 * get_element_at_index_00003d24(int index)\n{\n  undefined4 *current_element = *(undefined4 **)PTR_DAT_00003d60;\n  int current_index = 0;\n  \n  while (current_index < index && current_element != (undefined4 *)0x0)\n  {\n    current_element = (undefined4 *)*current_element;\n    current_index++;\n  }\n  return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d24",
            "calling": [
                "FUN_0000305c",
                "FUN_00002fe0"
            ],
            "imported": false,
            "current_name": "get_element_at_index_00003d24"
        },
        "FUN_000060cc": {
            "renaming": {
                "FUN_000060cc": "calculate_result_000060cc",
                "param_1": "base_value",
                "param_2": "multiplier_value",
                "param_3": "divisor_value",
                "param_4": "offset_value",
                "uVar1": "result_value",
                "uVar2": "quotient_value",
                "FUN_00004b34": "print_error",
                "FUN_00006964": "calculate_quotient",
                "FUN_00004bd0": "perform_calculation"
            },
            "code": "uint calculate_result_000060cc(uint base_value, uint multiplier_value, uint divisor_value, uint offset_value)\n{\n  uint result_value;\n  uint quotient_value;\n  if (multiplier_value != 0) {\n    if (divisor_value == 0) {\n      print_error();\n      result_value = divisor_value;\n    }\n    else {\n      quotient_value = calculate_quotient();\n      result_value = multiplier_value;\n      if ((quotient_value < divisor_value) && (result_value = perform_calculation(base_value, divisor_value), result_value != 0)) {\n        print_result(result_value, multiplier_value, divisor_value);\n        print_error(base_value, multiplier_value);\n      }\n    }\n    return result_value;\n  }\n  result_value = perform_calculation(base_value, divisor_value, divisor_value, offset_value);\n  return result_value;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_000060b0",
                "FUN_00006964"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060cc",
            "calling": [
                "FUN_000068f0"
            ],
            "imported": false,
            "current_name": "calculate_result_000060cc"
        },
        "FUN_00003dc4": {
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "num",
                "param_2": "base",
                "local_20": "remainder",
                "local_14": "digit_ptr",
                "local_10": "multiplier",
                "local_c": "digit_count"
            },
            "code": "int count_digits_00003dc4(int num, uint base) {\n  uint multiplier = 0xCCCCCCCD;\n  uint remainder;\n  char* digit_ptr;\n  int digit_count = 1;\n  if (DAT_00003e50 < base) {\n    digit_count = 10;\n  }\n  else {\n    for (remainder = 10; remainder <= base; remainder *= 10) {\n      digit_count++;\n    }\n  }\n  if (num != 0) {\n    digit_ptr = (char*)(digit_count + num);\n    remainder = base;\n    do {\n      digit_ptr--;\n      *digit_ptr = (char)(remainder % 10) + '0';\n      remainder = (multiplier * remainder) >> 35;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003dc4",
            "calling": [
                "FUN_00003e58"
            ],
            "imported": false,
            "current_name": "count_digits_00003dc4"
        },
        "FUN_000022be": {
            "renaming": {
                "FUN_000022be": "increment_and_write_to_memory_000022be",
                "param_1": "array",
                "param_2": "value_to_write",
                "uVar1": "currentIndex",
                "offset": "offset",
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": "*(undefined *)memory_address"
            },
            "code": "void increment_and_write_to_memory_000022be(int *array, undefined value_to_write) {\n  uint currentIndex = array[3];\n  array[3] = currentIndex + 1;\n  uint offset = currentIndex & (array[1] - 1U);\n  uint memory_address = offset + *array;\n  *(undefined *)memory_address = value_to_write;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022be",
            "calling": [
                "FUN_00002364"
            ],
            "imported": false,
            "current_name": "increment_and_write_to_memory_000022be"
        },
        "FUN_00002108": {
            "renaming": {
                "FUN_00002108": "initialize_data_00002108",
                "FUN_00002028": "initialize_memory_block",
                "DAT_00002118": "data_block"
            },
            "code": "void initialize_data_00002108(void)\n{\n  initialize_memory_block(DAT_00002118, 4);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002108",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00002108"
        },
        "FUN_00001d80": {
            "renaming": {
                "FUN_00001d80": "getMaskedValue_00001d80",
                "param_1": "value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint16_t getMaskedValue_00001d80(ushort value) {\n    uint16_t mask = 0x1c0;\n    uint32_t result = value & mask | 0x400ff000;\n    return (uint16_t)result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d80",
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "imported": false,
            "current_name": "getMaskedValue_00001d80"
        },
        "FUN_000033c0": {
            "renaming": {
                "FUN_000033c0": "check_alarm_000033c0",
                "iVar1": "error_code",
                "auStack_2c": "alarm_info",
                "FUN_00002690": "get_alarm_info",
                "FUN_00004db8": "report_error",
                "FUN_00003378": "process_alarm_info"
            },
            "code": "bool check_alarm_000033c0(void)\n{\n  int error_code;\n  undefined alarm_info [36];\n  error_code = get_alarm_info(alarm_info);\n  if (error_code != 0) {\n    report_error(PTR_s_rtc__error_getting_alarm_000033f0);\n  }\n  else {\n    process_alarm_info(alarm_info);\n  }\n  return error_code != 0;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003378",
                "FUN_00002690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "check_alarm_000033c0"
        },
        "FUN_00002b10": {
            "renaming": {
                "FUN_00002b10": "parse_command_line_arguments_00002b10",
                "param_1": "argc",
                "param_2": "argv",
                "local_48": "args_array",
                "local_3c": "function_pointer",
                "local_38": "current_arg",
                "local_34": "num_args",
                "local_2d": "current_char",
                "local_2c": "escape_count",
                "local_28": "current_arg",
                "local_24": "current_arg",
                "local_20": "num_args",
                "local_1c": "escape_count",
                "local_18": "count",
                "local_14": "current_char_ptr"
            },
            "code": "void parse_command_line_arguments_00002b10(int argc, char **argv)\n{\n    int count = 0;\n    int escape_count = 0;\n    char *current_arg;\n    char **args_array;\n    uint num_args = 0;\n    byte *current_char_ptr;\n    byte current_char;\n    code *function_pointer;\n\n    current_char_ptr = (byte *)argv;\n    args_array = (char **)((int)current_char_ptr - ((argc + 1) * 4 + 7 & 0xfffffff8));\n    args_array[argc] = (char *)0x0;\n    current_char_ptr = (byte *)*argv;\n    while (true)\n    {\n        if (0x20 < *current_char_ptr)\n        {\n            if ((*current_char_ptr == 0x22) || (*current_char_ptr == 0x27))\n            {\n                current_char = *current_char_ptr;\n                do\n                {\n                    current_char_ptr = current_char_ptr + 1;\n                    if (*current_char_ptr == 0)\n                    {\n                        args_array[num_args] = (char *)0x0;\n                        return;\n                    }\n                    if (*current_char_ptr == 0x5c)\n                    {\n                        escape_count = escape_count + 1;\n                        current_char_ptr = current_char_ptr + 1;\n                        if (*current_char_ptr == 0)\n                        {\n                            args_array[num_args] = (char *)0x0;\n                            return;\n                        }\n                    }\n                } while (current_char != *current_char_ptr);\n                if (0x20 < current_char_ptr[1])\n                {\n                    args_array[num_args] = (char *)0x0;\n                    return;\n                }\n            }\n            else\n            {\n                do\n                {\n                    if (*current_char_ptr == 0x5c)\n                    {\n                        escape_count = escape_count + 1;\n                        current_char_ptr = current_char_ptr + 1;\n                        if (*current_char_ptr == 0)\n                        {\n                            args_array[num_args] = (char *)0x0;\n                            return;\n                        }\n                    }\n                    current_char_ptr = current_char_ptr + 1;\n                    if (*current_char_ptr == 0x22)\n                    {\n                        args_array[num_args] = (char *)0x0;\n                        return;\n                    }\n                } while (0x20 < *current_char_ptr);\n            }\n            num_args++;\n        }\n        if (*current_char_ptr == 0)\n        {\n            args_array[num_args] = (char *)0x0;\n            break;\n        }\n        *current_char_ptr = 0;\n        current_char_ptr++;\n    }\n    if (num_args != 0)\n    {\n        function_pointer = (code *)FUN_00002a18(argc, args_array);\n        if (function_pointer == (code *)0x0)\n        {\n            int result = FUN_00004e52(PTR_DAT_00002d8c, args_array);\n            if (result == 0)\n            {\n                FUN_00002a88(*argv);\n            }\n            else\n            {\n                FUN_00004c84(PTR_s_shell__command_not_found___s_00002d90, args_array);\n            }\n        }\n        else\n        {\n            (*function_pointer)(num_args, args_array);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004c84",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002b10",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "parse_command_line_arguments_00002b10"
        },
        "FUN_00001b10": {
            "renaming": {
                "FUN_00001b10": "process_byte_00001b10",
                "param_1": "input_byte",
                "uVar1": "result",
                "PTR_DAT_00001bb4": "lookup_table",
                "PTR_DAT_00001bb0": "table_offset"
            },
            "code": "int process_byte_00001b10(byte input_byte) {\n  int result = 0;\n  if (input_byte < 8) {\n    do {\n      int index = (int)input_byte + (int)(*PTR_DAT_00001bb0) * 8;\n      switch(PTR_DAT_00001bb4[index]) {\n        case 0:\n          result = FUN_000018bc();\n          break;\n        case 1:\n          result = FUN_0000191c();\n          break;\n        case 2:\n          result = FUN_00001960();\n          break;\n        case 3:\n          result = FUN_000019c0();\n          break;\n        case 4:\n          result = FUN_00001a18();\n          break;\n        case 5:\n          result = FUN_00001a3c();\n          break;\n        case 6:\n          result = FUN_00001a60();\n          break;\n        case 7:\n          result = FUN_00001ad4();\n          break;\n        default:\n          return -1;\n      }\n    } while (input_byte != *PTR_DAT_00001bb0);\n  }\n  else {\n    result = -1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00001a18",
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_00001a3c",
                "FUN_0000191c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001b10",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "process_byte_00001b10"
        },
        "FUN_000047e4": {
            "renaming": {
                "FUN_000047e4": "FUNC_000047e4"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 FUNC_000047e4(int *param_1)\n\n{\n  longlong lVar1;\n  longlong lVar2;\n  int *piVar3;\n  uint uVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  bool bVar16;\n  \n  piVar3 = (int *)FUN_000056b0();\n  FUNC_00004634(param_1);\n  uVar12 = param_1[5];\n  iVar11 = param_1[3] + -1 + *(int *)(PTR_DAT_00004adc + param_1[4] * 4);\n  if (((1 < param_1[4]) && ((uVar12 & 3) == 0)) &&\n     ((uVar12 != (uVar12 / 100) * 100 || (uVar12 + 0x76c == ((uVar12 + 0x76c) / 400) * 400)))) {\n    iVar11 = iVar11 + 1;\n  }\n  param_1[7] = iVar11;\n  if (20000 < (int)&PTR_DAT_00002710 + uVar12) {\n    iVar7 = -1;\n    iVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)uVar12 < 0x47) {\n    if (uVar12 != 0x46) {\n      for (uVar9 = 0x45; (int)uVar12 < (int)uVar9; uVar9 = uVar9 - 1) {\n        if ((uVar9 & 3) == 0) {\n          if (uVar9 == (uVar9 / 100) * 100) {\n            if ((uVar9 + 0x76c) % 400 == 0) {\n              iVar7 = 0x16e;\n            }\n            else {\n              iVar7 = 0x16d;\n            }\n          }\n          else {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16d;\n        }\n        iVar11 = iVar11 - iVar7;\n      }\n      if ((uVar9 & 3) == 0) {\n        if (uVar12 == (uVar12 / 100) * 100) {\n          iVar7 = 0x16d;\n          if ((uVar12 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      iVar11 = iVar11 - iVar7;\n    }\n  }\n  else {\n    uVar9 = 0x46;\n    do {\n      if ((uVar9 & 3) == 0) {\n        if (uVar9 % 100 == 0) {\n          if ((uVar9 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n          else {\n            iVar7 = 0x16d;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      uVar9 = uVar9 + 1;\n      iVar11 = iVar11 + iVar7;\n    } while (uVar12 != uVar9);\n  }\n  lVar1 = (longlong)DAT_00004ae0 * (longlong)iVar11 +\n          (longlong)(param_1[2] * 0xe10 + param_1[1] * 0x3c + *param_1);\n  uVar15 = (uint)lVar1;\n  iVar7 = (int)((ulonglong)lVar1 >> 0x20);\n  FUN_000050e8();\n  FUNC_00005100();\n  uVar9 = *(uint *)PTR_DAT_00004ae4;\n  if (*(uint *)PTR_DAT_00004ae4 == 0) {\nLAB_00004934:\n    uVar12 = piVar3[10];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n  }\n  else {\n    uVar14 = param_1[8];\n    uVar13 = uVar14;\n    if (0 < (int)uVar14) {\n      uVar13 = 1;\n    }\n    if ((piVar3[1] == param_1[5] + 0x76c) || (iVar5 = FUN_00004f98(), iVar5 != 0)) {\n      uVar10 = piVar3[0x14];\n      uVar4 = piVar3[0x12];\n      uVar8 = piVar3[10];\n      uVar9 = uVar4 - uVar8;\n      iVar5 = (piVar3[0x13] - ((int)uVar8 >> 0x1f)) - (uint)(uVar4 < uVar8);\n      if (((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n           (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9)))) &&\n         (iVar6 = (piVar3[0x13] - ((int)uVar10 >> 0x1f)) - (uint)(uVar4 < uVar10),\n         bVar16 = uVar15 < uVar4 - uVar10,\n         (int)((iVar7 - iVar6) - (uint)bVar16) < 0 !=\n         (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)bVar16)))) goto LAB_00004a88;\n      uVar4 = piVar3[8] - uVar10;\n      iVar6 = (piVar3[9] - ((int)uVar10 >> 0x1f)) - (uint)((uint)piVar3[8] < uVar10);\n      if (*piVar3 != 0) {\n        if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 ==\n            (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        uVar9 = 0;\n        if ((int)uVar14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        uVar15 = uVar13 ^ uVar9;\n        uVar13 = uVar9;\n        if (uVar15 == 1) {\n          if (uVar9 == 0) {\n            iVar7 = uVar10 - uVar8;\n          }\n          else {\n            iVar7 = uVar8 - uVar10;\n          }\n          iVar5 = param_1[3];\n          *param_1 = *param_1 + iVar7;\n          lVar2 = lVar1 + iVar7;\n          FUNC_00004634(param_1);\n          iVar5 = param_1[3] - iVar5;\n          lVar1 = lVar1 + iVar7;\n          if (iVar5 != 0) {\n            if (iVar5 < 2) {\n              if (iVar5 == -2 || iVar5 + 2 < 0 != SCARRY4(iVar5,2)) {\n                iVar5 = 1;\n              }\n            }\n            else {\n              iVar5 = -1;\n            }\n            iVar7 = iVar5 + param_1[7];\n            iVar11 = iVar11 + iVar5;\n            if (iVar7 < 0) {\n              uVar9 = uVar12 - 1;\n              if ((uVar9 & 3) == 0) {\n                if (uVar9 == (uVar9 / 100) * 100) {\n                  iVar7 = 0x16d;\n                  if ((uVar12 + 0x76b) % 400 != 0) {\n                    iVar7 = 0x16c;\n                  }\n                }\n                else {\n                  iVar7 = 0x16d;\n                }\n              }\n              else {\n                iVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((uVar12 & 3) == 0) {\n                if (uVar12 == (uVar12 / 100) * 100) {\n                  iVar5 = 0x16d;\n                  if ((uVar12 + 0x76c) % 400 == 0) {\n                    iVar5 = 0x16e;\n                  }\n                }\n                else {\n                  iVar5 = 0x16e;\n                }\n              }\n              else {\n                iVar5 = 0x16d;\n              }\n              if (iVar5 <= iVar7) {\n                iVar7 = iVar7 - iVar5;\n              }\n            }\n            param_1[7] = iVar7;\n            lVar1 = lVar2;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 !=\n          (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4)))) {\nLAB_0000491e:\n        if ((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n            (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)uVar14) {\n        uVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      uVar9 = uVar13;\n      if (uVar13 != 1) goto LAB_00004934;\n    }\n    uVar12 = piVar3[0x14];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n    uVar9 = 1;\n  }\n  FUN_000050f4();\n  param_1[8] = uVar9;\n  param_1[6] = (iVar11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(iVar5,iVar7);\n}\n\n",
            "called": [
                "FUN_00005100",
                "FUN_00004634",
                "FUN_000050f4",
                "FUN_000050e8",
                "FUN_000056b0",
                "FUN_00004f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000047e4",
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "FUNC_000047e4"
        },
        "FUN_000023c8": {
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "code": "void trigger_software_interrupt_000023c8() {\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023c8",
            "calling": [
                "FUN_000023d0"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_000023c8"
        },
        "FUN_00002e48": {
            "renaming": {
                "FUN_00002e48": "print_hex_and_space_00002e48",
                "FUN_00002a00": "print_hex",
                "FUN_000041d0": "print_address",
                "PTR_00002e68": "ptr_to_data"
            },
            "code": "void print_hex_and_space_00002e48(void)\n{\n  print_hex(0x3e);\n  print_space(0x20);\n  print_address(*(uint32_t *)(*DAT_00002e68 + 8));\n  return;\n}",
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e48",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "print_hex_and_space_00002e48"
        },
        "FUN_00000930": {
            "renaming": {
                "FUN_00000930": "run_interrupt_loop_00000930",
                "FUN_00000cf0": "initialize",
                "software_interrupt": "trigger_interrupt"
            },
            "code": "void run_interrupt_loop_00000930(void)\n{\n  initialize();\n  trigger_interrupt(1);\n  while(true) {\n    // Do nothing, infinite loop\n  }\n}",
            "called": [
                "FUN_00000cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000930",
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "imported": false,
            "current_name": "run_interrupt_loop_00000930"
        },
        "FUN_00001348": {
            "renaming": {
                "FUN_00001348": "checkPointerValidity_00001348",
                "PTR_DAT_0000135c": "pointerData",
                "*PTR_DAT_0000135c": "*pointer",
                "FUN_0000093c": "handleInvalidPointer"
            },
            "code": "void checkPointerValidity_00001348(void)\n{\n  int* pointer = (int*)PTR_DAT_0000135c;\n  if (*PTR_DAT_0000135c != 0) {\n    FUN_0000093c();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001348",
            "calling": [
                "FUN_00001628"
            ],
            "imported": false,
            "current_name": "checkPointerValidity_00001348"
        },
        "FUN_00001d3a": {
            "renaming": {
                "FUN_00001d3a": "set_integer_value_at_pointer_00001d3a",
                "param_1": "value",
                "param_2": "pointer",
                "puVar1": "integer_pointer",
                "*puVar1": "*integer_pointer"
            },
            "code": "void set_integer_value_at_pointer_00001d3a(int value, void* pointer) {\n  int* integer_pointer;\n  integer_pointer = (int*)pointer;\n  *integer_pointer = value;\n  return;\n}",
            "called": [
                "FUN_00001d08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d3a",
            "calling": [
                "FUN_00001ddc"
            ],
            "imported": false,
            "current_name": "set_integer_value_at_pointer_00001d3a"
        },
        "FUN_00002434": {
            "renaming": {
                "FUN_00002434": "initialize_data_00002434",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "result",
                "iVar2": "temp"
            },
            "code": "int initialize_data_00002434(int *data, int size)\n{\n  int result = FUN_00000cd0();\n  if (*data == 0) {\n    *data = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (size == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    int temp = *(int *)PTR_DAT_000024b8;\n    FUN_00000698(temp, 2);\n    if (*data == -1) {\n      *data = temp + 8;\n      *(int *)*data = 0;\n    }\n    else {\n      FUN_00001034(data, temp);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_0000093c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002434",
            "calling": [
                "FUN_0000129c"
            ],
            "imported": false,
            "current_name": "initialize_data_00002434"
        },
        "FUN_00005700": {
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "data",
                "param_2": "data_ptr",
                "iVar2": "value2",
                "local_18": "value1",
                "local_14": "temp_ptr",
                "uVar1": "flag"
            },
            "code": "void process_data_00005700(int data, int *data_ptr) {\n  ushort flag;\n  int value1;\n  int value2;\n  int *temp_ptr;\n  \n  if ((int)((uint)*(ushort *)(data_ptr + 3) << 0x1e) >= 0) {\n    value1 = data;\n    temp_ptr = data_ptr;\n    flag = get_flag_value(data, data_ptr, &value1, &temp_ptr);\n    value2 = get_value(data, value1);\n    if (value2 != 0) {\n      *(undefined **)(data + 0x28) = PTR_DAT_0000577c;\n      *data_ptr = value2;\n      *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x80;\n      data_ptr[5] = value1;\n      data_ptr[4] = value2;\n      if ((temp_ptr != (int *)0x0) && (get_value(data, (int)*(short *)((int)data_ptr + 0xe)) != 0)) {\n        *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_ptr + 3) = flag | *(ushort *)(data_ptr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_ptr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xfffc | 2;\n  }\n  *data_ptr = (int)data_ptr + 0x47;\n  data_ptr[4] = (int)data_ptr + 0x47;\n  data_ptr[5] = 1;\n  return;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00000534",
                "FUN_000056b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005700",
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "imported": false,
            "current_name": "process_data_00005700"
        },
        "FUN_00002798": {
            "renaming": {
                "FUN_00002798": "checkIfPointerIsNull_00002798",
                "PTR_DAT_000027ac": "pointer",
                "FUN_0000093c": "callFunctionToHandleNullPointer"
            },
            "code": "void checkIfPointerIsNull_00002798(void)\n{\n  int* PTR_DAT_000027ac = (int*)PTR_DAT_000027ac;\n  if (*PTR_DAT_000027ac != 0) {\n    callFunctionToHandleNullPointer();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002798",
            "calling": [
                "FUN_00002994"
            ],
            "imported": false,
            "current_name": "checkIfPointerIsNull_00002798"
        },
        "FUN_00003524": {
            "renaming": {
                "FUN_00003524": "process_command_00003524",
                "param_1": "command_count",
                "param_2": "command_args",
                "iVar1": "func_result",
                "uVar2": "result",
                "FUN_000034c0": "print_error",
                "FUN_000026d8": "print_error",
                "FUN_000026e4": "print_error",
                "FUN_000026c0": "print_error",
                "FUN_000033c0": "print_error",
                "FUN_000033f4": "print_alarm",
                "FUN_00003444": "print_error",
                "FUN_00004c84": "print_unknown_command_or_missing_param",
                "PTR_s_poweron_00003638": "PTR_s_poweron_00003638",
                "PTR_s_poweroff_0000363c": "PTR_s_poweroff_0000363c",
                "PTR_s_clearalarm_00003640": "PTR_s_clearalarm_00003640",
                "PTR_s_getalarm_00003644": "PTR_s_getalarm_00003644",
                "PTR_s_setalarm_00003648": "PTR_s_setalarm_00003648",
                "PTR_s_gettime_0000364c": "PTR_s_gettime_0000364c",
                "PTR_s_settime_00003650": "PTR_s_settime_00003650",
                "PTR_s_unknown_command_or_missing_param_00003654": "PTR_s_unknown_command_or_missing_param_00003654"
            },
            "code": "int process_command_00003524(int command_count, int command_args)\n{\n    int result = 0;\n    if (command_count < 2) {\n        print_error();\n        result = 1;\n    }\n    else {\n        int func_result = 0;\n        func_result = execute_command(command_args, PTR_s_poweron_00003638, 7);\n        if (func_result == 0) {\n            print_error();\n        }\n        else {\n            func_result = execute_command(command_args, PTR_s_poweroff_0000363c, 8);\n            if (func_result == 0) {\n                print_error();\n            }\n            else {\n                func_result = execute_command(command_args, PTR_s_clearalarm_00003640, 8);\n                if (func_result == 0) {\n                    print_error();\n                }\n                else {\n                    func_result = execute_command(command_args, PTR_s_getalarm_00003644, 8);\n                    if (func_result == 0) {\n                        print_error();\n                    }\n                    else {\n                        func_result = execute_command(command_args, PTR_s_setalarm_00003648, 8);\n                        if ((func_result == 0) && (command_count == 4)) {\n                            print_alarm(command_args + 8);\n                        }\n                        else {\n                            func_result = execute_command(command_args, PTR_s_gettime_0000364c, 7);\n                            if (func_result == 0) {\n                                print_error();\n                            }\n                            else {\n                                func_result = execute_command(command_args, PTR_s_settime_00003650, 7);\n                                if ((func_result != 0) || (command_count != 4)) {\n                                    print_unknown_command_or_missing_param(PTR_s_unknown_command_or_missing_param_00003654, *(int *)(command_args + 4));\n                                    print_error();\n                                    return 1;\n                                }\n                                print_time(command_args + 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_000026e4",
                "FUN_000026c0",
                "FUN_000033c0",
                "FUN_000034c0",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_00003444",
                "FUN_00003478",
                "FUN_000033f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003524",
            "calling": [],
            "imported": false,
            "current_name": "process_command_00003524"
        },
        "FUN_00001bb8": {
            "renaming": {
                "FUN_00001bb8": "process_data_00001bb8",
                "DAT_00001c74": "control_bits",
                "DAT_00001c78": "data_1",
                "DAT_00001c7c": "data_2",
                "PTR_DAT_00001c80": "control_flag_ptr",
                "FUN_00001710": "send_data",
                "FUN_00001748": "send_ack"
            },
            "code": "void process_data_00001bb8(void)\n{\n  if ((DAT_00001c74[1] & 0b10) != 0) {\n    send_data(DAT_00001c74[2],1);\n  }\n  if ((DAT_00001c74[5] & 0b01000000) != 0) {\n    if ((*DAT_00001c74 & 0b11000000) == 0) {\n      *DAT_00001c74 = *DAT_00001c74 & 0b00111111 | 0b10000000;\n      do {\n      } while ((DAT_00001c74[6] & 0b00001100) != 0b00001000);\n    }\n    send_data(DAT_00001c74[7],6);\n    do {\n    } while ((DAT_00001c74[6] & 0b00100000) != 0);\n  }\n  send_ack(0);\n  *DAT_00001c74 = *DAT_00001c74 & 0b00111011 | 0b00000100;\n  do {\n  } while ((DAT_00001c74[6] & 0b00010000) == 0);\n  do {\n  } while ((DAT_00001c74[6] & 0b00001100) != 0);\n  *PTR_DAT_00001c80 = 0;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001bb8",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "process_data_00001bb8"
        },
        "FUN_0000428c": {
            "renaming": {
                "FUN_0000428c": "do_nothing_with_data_0000428c",
                "DAT_00004294": "DAT_data",
                "do_nothing_000045e8": "do_nothing"
            },
            "code": "void do_nothing_with_data_0000428c(void)\n{\n  do_nothing(DAT_00004294);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000428c",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_0000428c"
        },
        "FUN_0000404c": {
            "renaming": {
                "FUN_0000404c": "read_stream_0000404c",
                "param_1": "stream",
                "param_2": "params",
                "iVar1": "read_size",
                "piVar2": "p_params",
                "uVar3": "stream_size",
                "uVar4": "flags",
                "iVar5": "remaining",
                "pcVar6": "read_func",
                "iVar7": "result",
                "uVar8": "saved_stream_size",
                "bVar9": "is_stream_empty"
            },
            "code": "int read_stream_0000404c(uint *stream, int *params)\n{\n  int read_size;\n  int *p_params;\n  uint stream_size;\n  ushort flags;\n  int remaining;\n  code *read_func;\n  int result;\n  uint saved_stream_size;\n  bool is_stream_empty;\n  \n  flags = *(ushort *)(params + 3);\n  stream_size = (uint)flags;\n  if ((int)(stream_size << 0x1c) < 0) {\n    read_size = params[4];\n    if (read_size != 0) {\n      remaining = stream_size << 0x1e;\n      is_stream_empty = remaining == 0;\n      saved_stream_size = *params;\n      if (is_stream_empty) {\n        remaining = params[5];\n      }\n      *params = read_size;\n      if (!is_stream_empty) {\n        remaining = 0;\n      }\n      params[2] = remaining;\n      for (saved_stream_size = saved_stream_size - read_size; 0 < saved_stream_size; saved_stream_size = saved_stream_size - remaining) {\n        remaining = (*(code *)params[10])(stream,params[8],read_size,saved_stream_size);\n        if (remaining < 1) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return -1;\n        }\n        read_size = read_size + remaining;\n      }\n    }\n  }\n  else {\n    if ((params[1] < 1) && (params[0x10] < 1)) {\n      return 0;\n    }\n    read_func = (code *)params[0xb];\n    if (read_func == (code *)0x0) {\n      return 0;\n    }\n    result = *stream;\n    *stream = 0;\n    if ((flags & 0x1000) == 0) {\n      read_size = (*read_func)(stream,params[8],stream_size & 0x1000,1);\n      if ((read_size == -1) && (stream_size = *stream, stream_size != 0)) {\n        if ((stream_size == 0x1d) || (stream_size == 0x16)) {\n          *stream = result;\n          return 0;\n        }\n        flags = *(ushort *)(params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      read_size = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) &&\n       (read_size = read_size - params[1], params[0xd] != 0)) {\n      read_size = read_size - params[0x10];\n    }\n    read_size = (*(code *)params[0xb])(stream,params[8],read_size,0);\n    flags = *(ushort *)(params + 3);\n    if ((read_size == -1) &&\n       ((0x1d < *stream || (-1 < (int)((DAT_00004154 >> (*stream & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(params + 3) = flags | 0x40;\n      return read_size;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((read_size != -1 || (*stream == 0)))) {\n      params[0x15] = read_size;\n    }\n    p_params = (int *)params[0xd];\n    *stream = result;\n    if (p_params != (int *)0x0) {\n      if (p_params != params + 0x11) {\n        cleanup_stream(stream);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000404c",
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "read_stream_0000404c"
        },
        "FUN_00002f74": {
            "renaming": {
                "FUN_00002f74": "print_devices_00002f74",
                "local_14": "device_list",
                "local_18": "device_count",
                "uVar1": "device_info",
                "FUN_000039e8": "get_device_info",
                "FUN_00004c84": "print_string"
            },
            "code": "void print_devices_00002f74(void)\n{\n  undefined4 device_info;\n  int device_count = 0;\n  undefined4 *device_list = *(undefined4 **)PTR_DAT_00002fd0;\n  if (device_list == (undefined4 *)0x0) {\n    print_string(PTR_s_No_devices_found_00002fd8);\n  }\n  else {\n    print_string(PTR_s_ID_Class_Name_00002fd4);\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    device_info = get_device_info(*(undefined *)(device_list[3] + 8));\n    print_string(PTR_s___i__s__s_00002fdc, device_count, device_info, device_list[2]);\n    device_count++;\n  }\n  return;\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00004c84",
                "FUN_000039e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f74",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": false,
            "current_name": "print_devices_00002f74"
        },
        "FUN_000010a0": {
            "renaming": {
                "FUN_000010a0": "count_items_in_array_000010a0",
                "param_1": "array",
                "local_c": "current_item"
            },
            "code": "int count_items_in_array_000010a0(int *array){\n    int *current_item;\n    for (current_item = array; (int *)*current_item == current_item; current_item++){\n    }\n    return (int)current_item - (int)array;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010a0",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": false,
            "current_name": "count_items_in_array_000010a0"
        },
        "FUN_000012e2": {
            "renaming": {
                "FUN_000012e2": "find_non_zero_return_000012e2",
                "param_1": "input_val",
                "iVar1": "result",
                "FUN_0000231c": "check_value",
                "FUN_0000129c": "reset_input_val"
            },
            "code": "int find_non_zero_return_000012e2(int input_val, undefined4 param_2, undefined4 param_3) {\n  int result = 0;\n  while (true) {\n    result = check_value(input_val + 4, param_2, param_3);\n    if (result != 0) {\n      break;\n    }\n    reset_input_val(input_val);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012e2",
            "calling": [
                "FUN_00000e14"
            ],
            "imported": false,
            "current_name": "find_non_zero_return_000012e2"
        },
        "FUN_000056a0": {
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "data",
                "param_2": "data_ptr_1",
                "param_3": "data_ptr_2",
                "param_4": "flag",
                "uStack_c": "var_1",
                "uStack_8": "var_2",
                "FUN_0000562c": "process_subdata"
            },
            "code": "void process_data_000056a0(undefined4 data, undefined4* data_ptr_1, undefined4* data_ptr_2, undefined4 flag) {\n  undefined4 var_1;\n  undefined4 var_2;\n  var_1 = *data_ptr_1;\n  var_2 = *data_ptr_2;\n  process_subdata(data, *data_ptr_1, &var_1, flag, data);\n  return;\n}",
            "called": [
                "FUN_0000562c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056a0",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_000056a0"
        },
        "FUN_0000231c": {
            "renaming": {
                "FUN_0000231c": "copy_bytes_from_source_to_destination_buffer_0000231c",
                "param_1": "source_address",
                "param_2": "destination_buffer",
                "param_3": "num_bytes_to_copy",
                "uVar1": "byte_to_copy",
                "iVar2": "num_bytes_copied",
                "local_20": "current_destination_byte",
                "local_14": "num_bytes_left_to_copy"
            },
            "code": "int copy_bytes_from_source_to_destination_buffer_0000231c(undefined4 source_address, undefined *destination_buffer, int num_bytes_to_copy)\n{\n  undefined byte_to_copy;\n  int num_bytes_copied = 0;\n  undefined *current_destination_byte = destination_buffer;\n\n  while ((num_bytes_to_copy != 0 && (num_bytes_copied = check_if_byte_was_copied_successfully(source_address), num_bytes_copied == 0))) {\n    byte_to_copy = get_next_byte_from_source(source_address);\n    *current_destination_byte = byte_to_copy;\n    num_bytes_to_copy = num_bytes_to_copy - 1;\n    current_destination_byte = current_destination_byte + 1;\n  }\n  return num_bytes_to_copy - num_bytes_copied;\n}",
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000231c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": false,
            "current_name": "copy_bytes_from_source_to_destination_buffer_0000231c"
        },
        "FUN_000061cc": {
            "renaming": {
                "FUN_000061cc": "FUNC_000061cc"
            },
            "code": "\nint FUNC_000061cc(int param_1,byte **param_2,byte *param_3,int **param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  int **local_2b0;\n  undefined auStack_2ac [256];\n  uint local_1ac;\n  undefined4 local_1a8;\n  uint local_1a4;\n  int local_1a0;\n  int local_19c;\n  undefined *local_198;\n  int local_194;\n  undefined *local_30;\n  code *local_2c;\n  \n  puVar2 = PTR_DAT_000064b4;\n  puVar1 = PTR_DAT_000064b0;\n  local_1a0 = 0;\n  local_19c = 0;\n  local_30 = PTR_LAB_00006118_1_000064a8;\n  local_2c = DAT_000064ac;\n  local_2b0 = param_4;\n  local_198 = auStack_2ac;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      uVar6 = (uint)*param_3;\n      if (uVar6 == 0) {\n        return local_1a0;\n      }\n      uVar4 = (byte)puVar1[uVar6] & 8;\n      pbVar5 = param_3 + 1;\n      if ((puVar1[uVar6] & 8) == 0) break;\n      while (((param_3 = pbVar5, 0 < (int)param_2[1] ||\n              (iVar3 = (*local_2c)(param_1,param_2), iVar3 == 0)) &&\n             ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0))) {\n        local_19c = local_19c + 1;\n        param_2[1] = param_2[1] + -1;\n        *param_2 = *param_2 + 1;\n      }\n    }\n    if (uVar6 == 0x25) break;\nLAB_00006352:\n    if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n    goto LAB_00006380;\n    if (**param_2 != uVar6) {\n      return local_1a0;\n    }\n    *param_2 = *param_2 + 1;\n    local_19c = local_19c + 1;\n    param_2[1] = param_2[1] + -1;\n    param_3 = pbVar5;\n  }\n  local_1a4 = uVar4;\n  local_1ac = uVar4;\n  if (param_3[1] == 0x2a) {\n    pbVar5 = param_3 + 2;\n    local_1ac = 0x10;\n  }\n  while( true ) {\n    uVar4 = (uint)*pbVar5;\n    if (9 < uVar4 - 0x30) break;\n    pbVar5 = pbVar5 + 1;\n    local_1a4 = (local_1a4 * 10 + uVar4) - 0x30;\n  }\n  iVar3 = FUN_00006010(PTR_DAT_000064b4,uVar4,3);\n  if (iVar3 != 0) {\n    local_1ac = 1 << (iVar3 - (int)puVar2 & 0xffU) | local_1ac;\n    pbVar5 = pbVar5 + 1;\n  }\n  param_3 = pbVar5 + 1;\n  uVar4 = (uint)*pbVar5;\n  if (uVar4 < 0x79) {\n    if (0x57 < uVar4) {\n      switch(uVar4) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param_3 = (byte *)FUN_0000687c(auStack_2ac,param_3);\n        local_1ac = local_1ac | 0x40;\n        local_194 = 1;\n        break;\n      case 99:\n        local_1ac = local_1ac | 0x40;\n        local_194 = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_1a8 = 10;\nLAB_000063a0:\n        if (uVar4 < 0x6f) {\n          local_194 = 3;\n        }\n        else {\n          local_194 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        local_194 = 5;\n        break;\n      case 0x69:\n        local_1a8 = 0;\n        local_194 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_1ac << 0x1b)) {\n          if ((int)(local_1ac << 0x1f) < 0) {\n            *(short *)*local_2b0 = (short)local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n          else {\n            **local_2b0 = local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_1a8 = 8;\n        local_194 = 4;\n        break;\n      case 0x70:\n        local_1ac = local_1ac | 0x20;\n      case 0x58:\n      case 0x78:\n        local_1ac = local_1ac | 0x200;\n        local_1a8 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        local_194 = 2;\n      }\nLAB_000063ac:\n      if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_1ac << 0x19)) {\n        while ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0) {\n          local_19c = local_19c + 1;\n          pbVar5 = param_2[1];\n          param_2[1] = pbVar5 + -1;\n          if ((int)(pbVar5 + -1) < 1) {\n            iVar3 = (*local_2c)(param_1,param_2);\n            if (iVar3 != 0) goto LAB_00006380;\n          }\n          else {\n            *param_2 = *param_2 + 1;\n          }\n        }\n      }\n      if (local_194 < 3) {\n        iVar3 = FUN_000064bc(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else if (local_194 < 5) {\n        iVar3 = FUNC_0000656c(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else {\n        iVar3 = param_1;\n        if (DAT_000064b8 == 0) goto LAB_000061f6;\n      }\n      if (iVar3 == 1) {\n        return local_1a0;\n      }\n      if (iVar3 == 2) {\nLAB_00006380:\n        if (local_1a0 == 0) {\nLAB_00006388:\n          local_1a0 = -1;\n        }\n        else if ((*(ushort *)(param_2 + 3) & 0x40) != 0) {\n          local_1a0 = -1;\n        }\n        return local_1a0;\n      }\n      goto LAB_000061f6;\n    }\n    pbVar5 = param_3;\n    if (uVar4 == 0x25) goto LAB_00006352;\n    if (uVar4 < 0x26) {\n      if (uVar4 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (uVar4 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  local_194 = 3;\n  local_1a8 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000656c",
                "FUN_000064bc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000061cc",
            "calling": [
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "FUNC_000061cc"
        },
        "FUN_00002690": {
            "renaming": {
                "FUN_00002690": "process_data_00002690",
                "param_1": "input_data",
                "local_10": "result",
                "uStack_c": "temp",
                "FUN_000028f0": "get_data",
                "FUN_0000443c": "process_buffer"
            },
            "code": "int process_data_00002690(undefined4 input_data){\n  int result = get_data();\n  int temp = 0;\n  process_buffer(&result, input_data);\n  return 0;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002690",
            "calling": [
                "FUN_000033c0"
            ],
            "imported": false,
            "current_name": "process_data_00002690"
        },
        "FUN_00006010": {
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "byte_sequence",
                "bVar1": "current_byte",
                "puVar7": "current_data",
                "pbVar6": "result_byte",
                "pbVar8": "result_data",
                "uVar9": "data_alignment",
                "uVar10": "data_length_aligned",
                "uVar11": "data_word",
                "uVar12": "data_word_zero_bits",
                "bVar13": "data_word_byte_0",
                "bVar14": "data_word_byte_1",
                "bVar15": "data_word_byte_2",
                "bVar16": "data_word_byte_3"
            },
            "code": "byte* find_byte_sequence_00006010(uint* data, uint data_length, uint byte_sequence) {\n  byte* result = NULL;\n  uint byte_sequence_mask = byte_sequence | (byte_sequence << 8) | (byte_sequence << 16) | (byte_sequence << 24);\n  uint data_length_remaining = data_length;\n  uint* current_data = data;\n  while (data_length_remaining >= 8) {\n    uint data_word = *current_data++ ^ byte_sequence_mask;\n    uint data_word_mask = ((data_word & 0x7F7F7F7Fu) + 0x7F7F7F7Fu) | (data_word & 0x80808080u);\n    uint data_word_zero_bits = ~data_word_mask & (data_word_mask + 0x01010101u);\n    if (data_word_zero_bits != 0) {\n      result = (byte*)current_data - 4;\n      result += __builtin_ctz(data_word_zero_bits) >> 3;\n      break;\n    }\n    data_length_remaining -= 8;\n  }\n  if (result == NULL) {\n    uint* current_data_word = current_data;\n    while (data_length_remaining--) {\n      if ((*current_data_word++ & 0xFF) == (byte_sequence & 0xFF)) {\n        result = (byte*)current_data_word - 1;\n        break;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006010",
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_00005b34"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_00006010"
        },
        "FUN_00001cf0": {
            "renaming": {
                "FUN_00001cf0": "checkAndExecuteFunction_00001cf0",
                "PTR_DAT_00001d04": "dataPointer",
                "FUN_0000093c": "executeFunction"
            },
            "code": "void checkAndExecuteFunction_00001cf0(void)\n{\n  int* PTR_DAT_00001d04 = (int*)PTR_DAT_00001d04;\n  if (*PTR_DAT_00001d04 != 0) {\n    executeFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001cf0",
            "calling": [
                "FUN_00002028"
            ],
            "imported": false,
            "current_name": "checkAndExecuteFunction_00001cf0"
        },
        "FUN_00003ec4": {
            "renaming": {
                "FUN_00003ec4": "format_output_string_00003ec4",
                "param_1": "output_buffer",
                "param_2": "output_buffer_size",
                "param_3": "format_length",
                "iVar1": "buffer_index",
                "uVar2": "uVar1",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "buffer_index",
                "FUN_00000f04": "report_error",
                "PTR_s_FAILED_ASSERTION__00003fec": "PTR_s_FAILED_ASSERTION__00003fec",
                "PTR_DAT_00003ff0": "PTR_DAT_00003ff0",
                "FUN_00003e58": "get_output_string",
                "FUN_00004622": "fill_with_character"
            },
            "code": "int format_output_string_00003ec4(undefined *output_buffer, uint output_buffer_size, int format_length) {\n  int buffer_index;\n  undefined4 uVar1;\n  uint quotient;\n  int remainder;\n\n  if ((format_length + 7 < 0) != SCARRY4(format_length, 7)) {\n    report_error(3, PTR_s_FAILED_ASSERTION__00003fec);\n  }\n  buffer_index = 0;\n  if (format_length == 0) {\n    buffer_index = get_output_string(output_buffer, output_buffer_size);\n  }\n  else if (format_length < 1) {\n    quotient = output_buffer_size / *(uint *)(PTR_DAT_00003ff0 + format_length * -4);\n    remainder = output_buffer_size - *(uint *)(PTR_DAT_00003ff0 + format_length * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)output_buffer_size < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      buffer_index = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      buffer_index = get_output_string(0, quotient);\n      buffer_index = buffer_index + 1 + buffer_index;\n    }\n    else {\n      buffer_index = get_output_string(output_buffer + buffer_index, quotient);\n      buffer_index = buffer_index + 1;\n      output_buffer[buffer_index - 1] = 0x2e;\n      uVar1 = get_output_string(output_buffer + buffer_index, remainder);\n      format_output_string_00003ec4(output_buffer + buffer_index, uVar1, -format_length, 0x30);\n    }\n    buffer_index = -format_length + buffer_index;\n  }\n  else {\n    buffer_index = get_output_string(output_buffer, output_buffer_size);\n    if (output_buffer != (undefined *)0x0) {\n      fill_with_character(output_buffer + buffer_index, 0x30, format_length);\n    }\n    buffer_index = format_length + buffer_index;\n  }\n  return buffer_index;\n}",
            "called": [
                "FUN_00003e58",
                "FUN_00000f04",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ec4",
            "calling": [
                "FUN_00003e9e"
            ],
            "imported": false,
            "current_name": "format_output_string_00003ec4"
        },
        "FUN_00001360": {
            "renaming": {
                "FUN_00001360": "calculate_value_00001360",
                "param_1": "input_value",
                "param_2": "offset",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_value_00001360(uint32_t input_value, int offset) {\n    uint32_t masked_input = input_value & 0xf0000000;\n    uint32_t shifted_input = (input_value & 0xfffff) << 5;\n    int result = offset * 4 + masked_input + shifted_input + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001360",
            "calling": [
                "FUN_00001392"
            ],
            "imported": false,
            "current_name": "calculate_value_00001360"
        },
        "FUN_00004622": {
            "renaming": {
                "FUN_00004622": "fill_memory_with_value_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end"
            },
            "code": "void fill_memory_with_value_00004622(unsigned char *memory, unsigned char value, int size) {\n  unsigned char *end = memory + size;\n  for (; memory != end; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004622",
            "calling": [
                "FUN_00004314",
                "FUN_0000305c",
                "FUN_00003ff4",
                "FUN_00003ec4",
                "FUN_00004248",
                "FUN_000041f4"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00004622"
        },
        "FUN_0000093c": {
            "renaming": {
                "FUN_0000093c": "set_flag_0000093c",
                "*PTR_DAT_00000954": "flag_ptr"
            },
            "code": "void set_flag_0000093c(void)\n{\n  uint32_t* *PTR_DAT_00000954 = (uint32_t*)(DAT_00000954 + 4);\n  **PTR_DAT_00000954 |= 0x10000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000093c",
            "calling": [
                "FUN_00002434",
                "FUN_00002798",
                "FUN_00000738",
                "FUN_00001cf0",
                "FUN_00001348"
            ],
            "imported": false,
            "current_name": "set_flag_0000093c"
        },
        "FUN_00003658": {
            "renaming": {
                "FUN_00003658": "synchronize_data_00003658",
                "DAT_00003680": "PTR_data_start",
                "DAT_00003684": "data_value",
                "* (uint *)(DAT_00003680 + 0xc)": "*ptr_data",
                "0x700": "mask"
            },
            "code": "void synchronize_data_00003658(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* ptr_data = (uint*)(DAT_00003680 + 0xc);\n    uint DAT_00003684 = DAT_00003684 | (* (uint *)(DAT_00003680 + 0xc) & 0x700);\n    * (uint *)(DAT_00003680 + 0xc) = DAT_00003684;\n    DataSynchronizationBarrier(0xf);\n    while(true)\n    {\n        // Do nothing, infinite loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003658",
            "calling": [
                "FUN_00003688"
            ],
            "imported": false,
            "current_name": "synchronize_data_00003658"
        },
        "FUN_000019c0": {
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0",
                "FUN_00001778": "set_up_clock",
                "FUN_00001748": "set_up_serial",
                "FUN_00001710": "set_up_gpio",
                "*DAT_00001a10": "*DAT_device_register",
                "DAT_00001a0c": "DAT_device_gpio_pin",
                "*PTR_DAT_00001a14": "*PTR_device_timer_ctrl",
                "FUN_00001734": "set_up_timer"
            },
            "code": "void initialize_device_000019c0(void) {\n  set_up_clock();\n  set_up_serial(0x40);\n  set_up_gpio(DAT_00001a0c, 1);\n  *DAT_00001a10 = *DAT_00001a10 & 0x3b | 0x80;\n  do {\n  } while ((DAT_device_register[6] & 0xc) != 8);\n  set_up_timer();\n  *PTR_DAT_00001a14 = 3;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000019c0",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_device_000019c0"
        },
        "FUN_000060b0": {
            "renaming": {
                "FUN_000060b0": "copy_memory_000060b0",
                "param_1": "dst_address",
                "param_2": "src_address",
                "param_3": "size",
                "puVar1": "next_src",
                "puVar2": "src_end",
                "puVar3": "dst_end"
            },
            "code": "void copy_memory_000060b0(int dst_address, undefined *src_address, int size)\n{\n  undefined *src_end = src_address + size;\n  undefined *dst_end = (undefined *)(dst_address - 1);\n  \n  if (src_address != src_end) {\n    do {\n      undefined *next_src = src_address + 1;\n      dst_end = dst_end + 1;\n      *dst_end = *src_address;\n      src_address = next_src;\n    } while (next_src != src_end);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060b0",
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "copy_memory_000060b0"
        },
        "FUN_00006a14": {
            "renaming": {
                "FUN_00006a14": "FUNC_00006a14"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong FUNC_00006a14(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint uVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 != 0) {\n        param_3 = param_3 << (uVar4 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        param_1 = param_1 << (uVar4 & 0xff);\n      }\n      uVar7 = param_3 >> 0x10;\n      uVar9 = param_2 / uVar7;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar7 * uVar9) * 0x10000;\n      uVar1 = uVar9 * (param_3 & 0xffff);\n      uVar6 = uVar9;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar9 = (uVar5 - uVar1) / uVar7;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar7 * uVar9) * 0x10000;\n      uVar7 = uVar9 * (param_3 & 0xffff);\n      uVar1 = uVar9;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          uVar1 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar7;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n      puVar3 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x00006abc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        uVar12 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar12;\n      }\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 == 0) {\n        param_2 = param_2 - param_3;\n        uVar10 = param_3 >> 0x10;\n        uVar8 = param_3 & 0xffff;\n        puVar3 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar4 & 0xff);\n        uVar10 = param_3 >> 0x10;\n        uVar6 = param_2 >> (0x20 - uVar4 & 0xff);\n        uVar1 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        uVar5 = uVar6 / uVar10;\n        uVar8 = param_3 & 0xffff;\n        uVar9 = uVar1 >> 0x10 | (uVar6 - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        param_1 = param_1 << (uVar4 & 0xff);\n        uVar6 = uVar5;\n        if (uVar9 <= uVar7 && uVar7 - uVar9 != 0) {\n          bVar11 = CARRY4(param_3,uVar9);\n          uVar9 = param_3 + uVar9;\n          uVar6 = uVar5 - 1;\n          if ((bVar11 == false) && (uVar9 <= uVar7 && uVar7 - uVar9 != 0)) {\n            uVar6 = uVar5 - 2;\n            uVar9 = uVar9 + param_3;\n          }\n        }\n        uVar5 = (uVar9 - uVar7) / uVar10;\n        param_2 = uVar1 & 0xffff | ((uVar9 - uVar7) - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        uVar1 = uVar5;\n        if (param_2 <= uVar7 && uVar7 - param_2 != 0) {\n          bVar11 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar1 = uVar5 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar7 && uVar7 - param_2 != 0)) {\n            uVar1 = uVar5 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar7;\n        puVar3 = (uint *)(uVar1 | uVar6 << 0x10);\n      }\n      uVar7 = param_2 / uVar10;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar10 * uVar7) * 0x10000;\n      uVar1 = uVar8 * uVar7;\n      uVar6 = uVar7;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar7 = (uVar5 - uVar1) / uVar10;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar10 * uVar7) * 0x10000;\n      uVar8 = uVar8 * uVar7;\n      uVar1 = uVar7;\n      if (uVar5 <= uVar8 && uVar8 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar8 && uVar8 - uVar5 != 0)) {\n          uVar1 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar8;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar5 >> (uVar4 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar3 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar3 = (uint *)count_leading_zeroes(param_4);\n    if (puVar3 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar3;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar3 & 0xff);\n      uVar10 = uVar5 >> 0x10;\n      uVar4 = param_2 >> (uVar8 & 0xff);\n      uVar6 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar3 & 0xff);\n      uVar7 = uVar4 / uVar10;\n      uVar1 = uVar6 >> 0x10 | (uVar4 - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar3 & 0xff);\n      param_1 = param_1 << ((uint)puVar3 & 0xff);\n      uVar4 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar4 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar4 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar7 = (uVar1 - uVar9) / uVar10;\n      uVar1 = uVar6 & 0xffff | ((uVar1 - uVar9) - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      uVar6 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar4 << 0x10;\n      uVar12 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar1 - uVar9,param_1) < uVar12) {\n        uVar12 = uVar12 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar4 = ((uVar1 - uVar9) - (int)(uVar12 >> 0x20)) - (uint)(param_1 < (uint)uVar12);\n        *param_5 = uVar4 << (uVar8 & 0xff) | param_1 - (uint)uVar12 >> ((uint)puVar3 & 0xff);\n        param_5[1] = uVar4 >> ((uint)puVar3 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar3, param_3 <= param_1)) {\n      bVar11 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar11;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n    }\n  }\n  return CONCAT44(puVar3,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00006a14",
            "calling": [
                "FUN_00006974"
            ],
            "imported": false,
            "current_name": "FUNC_00006a14"
        },
        "FUN_000023d0": {
            "renaming": {
                "FUN_000023d0": "initialize_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "code": "int initialize_000023d0(int input)\n{\n  int is_initialize_000023d0d = *(int *)PTR_DAT_000023fc;\n  int result;\n  if(is_initialize_000023d0d == 0)\n  {\n    result = FUN_000023c8(1, input, 0);\n  }\n  else\n  {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_000023c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023d0",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "initialize_000023d0"
        },
        "FUN_00000a30": {
            "renaming": {
                "FUN_00000a30": "calculate_stack_address_00000a30",
                "auStack_20": "stack_address",
                "in_r3": "register_value",
                "FUN_00000f04": "calculate_register_value",
                "PTR_DAT_00000a60": "PTR_DAT_00000a60",
                "uRam00000a3c": "uRam00000a3c"
            },
            "code": "char* calculate_stack_address_00000a30(void)\n{\n    int register_value;\n    char stack_address[24];\n    \n    calculate_register_value(4, uRam00000a3c);\n    \n    return stack_address + (-(int)PTR_DAT_00000a60 - *(int *)(register_value + 0x4c));\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000a30",
            "calling": [],
            "imported": false,
            "current_name": "calculate_stack_address_00000a30"
        },
        "FUN_000034c0": {
            "renaming": {
                "FUN_000034c0": "initialize_rtc_commands_000034c0",
                "PTR_s_usage__rtc__command___arguments__00003500": "rtc_command_usage",
                "PTR_s_commands__00003504": "rtc_commands_list",
                "PTR_s__poweron_power_the_interface_on_00003508": "power_on_rtc_interface",
                "PTR_s__poweroff_power_the_interface_of_0000350c": "power_off_rtc_interface",
                "PTR_s__clearalarm_deactivate_the_curre_00003510": "deactivate_current_alarm",
                "PTR_s__getalarm_print_the_currently_al_00003514": "print_current_alarm",
                "PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518": "set_alarm",
                "PTR_s__gettime_print_the_current_time_0000351c": "print_current_time",
                "PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520": "set_time"
            },
            "code": "int initialize_rtc_commands_000034c0(void)\n{\n  initialize_PTR_s_usage__rtc__command___arguments__00003500();\n  initialize_PTR_s_commands__00003504();\n  initialize_PTR_s__poweron_power_the_interface_on_00003508();\n  initialize_PTR_s__poweroff_power_the_interface_of_0000350c();\n  PTR_s__clearalarm_deactivate_the_curre_00003510();\n  PTR_s__getalarm_print_the_currently_al_00003514();\n  PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518();\n  PTR_s__gettime_print_the_current_time_0000351c();\n  PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520();\n  return 0;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000034c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "initialize_rtc_commands_000034c0"
        },
        "FUN_000050e8": {
            "renaming": {
                "FUN_000050e8": "get_pointer_to_data_000050e8",
                "PTR_DAT_000050f0": "pointer_to_data"
            },
            "code": "const char* get_pointer_to_data_000050e8()\n{\n  return PTR_DAT_000050f0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050e8",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "get_pointer_to_data_000050e8"
        },
        "FUN_000042a4": {
            "renaming": {
                "FUN_000042a4": "initialize_data_structure_000042a4",
                "param_1": "data_structure",
                "uVar1": "data_structure_value",
                "iVar2": "data_structure_pointer",
                "bVar3": "is_data_structure_pointer_equal",
                "PTR_DAT_0000430c": "data_structure_pointer_global_variable",
                "PTR_DAT_00004310": "data_structure_array_global_variable",
                "FUN_00004314": "get_data_structure_value",
                "FUN_000041f4": "set_data_structure_value",
                "DAT_000042a0": "constant_value"
            },
            "code": "void initialize_data_structure_000042a4(int data_structure)\n{\n  bool is_data_structure_initialized;\n  int index;\n  int data_structure_pointer;\n  \n  initialize_global_variables();\n  \n  is_data_structure_initialized = *(int *)(data_structure + 0x18) != 0;\n  if (!is_data_structure_initialized) {\n    *(int *)(data_structure + 0x48) = 0;\n    *(int *)(data_structure + 0x4c) = 0;\n    *(int *)(data_structure + 0x50) = 0;\n    data_structure_pointer = *(int *)PTR_DAT_0000430c;\n    *(int *)(data_structure + 0x28) = PTR_DAT_00004310;\n    if (data_structure_pointer == data_structure) {\n      index = 1;\n    }\n    if (data_structure_pointer == data_structure) {\n      *(int *)(data_structure + 0x18) = index;\n    }\n    *(int *)(data_structure + 4) = get_data_structure_value(data_structure);\n    *(int *)(data_structure + 8) = get_data_structure_value(data_structure);\n    *(int *)(data_structure + 0xc) = get_data_structure_value(data_structure);\n    set_data_structure_value(*(int *)(data_structure + 4), 4, 0);\n    set_data_structure_value(*(int *)(data_structure + 8), 9, 1);\n    set_data_structure_value(*(int *)(data_structure + 0xc), 0x12, 2);\n    *(int *)(data_structure + 0x18) = 1;\n  }\n  do_nothing(DAT_000042a0);\n  return;\n}",
            "called": [
                "FUN_00004314",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_000041f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000042a4",
            "calling": [
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004314",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_000042a4"
        },
        "FUN_00000514": {
            "renaming": {
                "FUN_00000514": "set_param_value_00000514",
                "param_1": "param_value",
                "*param_1": "*param_value"
            },
            "code": "int set_param_value_00000514(int *param_value)\n{\n    *param_value = 19;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000514",
            "calling": [
                "FUN_000056b8"
            ],
            "imported": false,
            "current_name": "set_param_value_00000514"
        },
        "FUN_00002e9c": {
            "renaming": {
                "FUN_00002e9c": "start_program_00002e9c",
                "FUN_00003688": "execute_startup"
            },
            "code": "int start_program_00002e9c(void)\n{\n    execute_startup();\n    return 0;\n}",
            "called": [
                "FUN_00003688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e9c",
            "calling": [],
            "imported": false,
            "current_name": "start_program_00002e9c"
        },
        "FUN_00001960": {
            "renaming": {
                "FUN_00001960": "check_status_of_device_00001960",
                "FUN_00001748": "set_device_mode",
                "FUN_00001710": "enable_device_feature",
                "DAT_000019b4": "device_feature",
                "*DAT_000019b8": "device_status",
                "PTR_DAT_000019bc": "device_mode"
            },
            "code": "void check_status_of_device_00001960(void)\n{\n  set_PTR_DAT_000019bc(0xa0);\n  enable_DAT_000019b4(DAT_000019b4,1);\n  *DAT_000019b8 = (*DAT_000019b8 & 0x3b) | 0x44;\n  while ((DAT_000019b8[6] & 0xc) != 4);\n  while ((DAT_000019b8[6] & 0x10) == 0);\n  *PTR_DAT_000019bc = 2;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001960",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "check_status_of_device_00001960"
        },
        "FUN_00000990": {
            "renaming": {
                "FUN_00000990": "do_nothing_00000990"
            },
            "code": "\nvoid do_nothing_00000990(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000990",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": false,
            "current_name": "do_nothing_00000990"
        },
        "FUN_00001a3c": {
            "renaming": {
                "FUN_00001a3c": "initialize_data_and_set_flag_00001a3c",
                "FUN_000016ec": "initialize_data",
                "FUN_00001734": "set_flag",
                "DAT_00001a58": "DAT_buffer",
                "PTR_DAT_00001a5c": "PTR_result"
            },
            "code": "void initialize_data_and_set_flag_00001a3c(void)\n{\n  initialize_data(DAT_00001a58, 1);\n  set_flag();\n  *PTR_DAT_00001a5c = 5;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a3c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_data_and_set_flag_00001a3c"
        },
        "FUN_000045ee": {
            "renaming": {
                "FUN_000045ee": "reverse_copy_range_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destination_end",
                "puVar2": "source_end"
            },
            "code": "void reverse_copy_range_000045ee(unsigned char *destination, unsigned char *source, int size) {\n  unsigned char *source_end = source + size;\n  if ((source < destination) && (destination < source_end)) {\n    unsigned char *destination_end = destination + size;\n    while (destination_end != destination) {\n      source_end--;\n      destination_end--;\n      *destination_end = *source_end;\n    }\n  }\n  else {\n    destination--;\n    for (; source != source_end; source++, destination++) {\n      *destination = *source;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ee",
            "calling": [
                "FUN_00003ff4"
            ],
            "imported": false,
            "current_name": "reverse_copy_range_000045ee"
        },
        "FUN_00005404": {
            "renaming": {
                "FUN_00005404": "FUNC_00005404"
            },
            "code": "\nuint FUNC_00005404(int param_1,uint param_2,int *param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined *puVar3;\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_3 == (int *)PTR_DAT_0000549c) {\n    param_3 = *(int **)(param_1 + 4);\n  }\n  else if (param_3 == (int *)PTR_DAT_000054a0) {\n    param_3 = *(int **)(param_1 + 8);\n  }\n  else if (param_3 == (int *)PTR_DAT_000054a4) {\n    param_3 = *(int **)(param_1 + 0xc);\n  }\n  param_3[2] = param_3[6];\n  uVar2 = (uint)*(ushort *)(param_3 + 3);\n  iVar1 = uVar2 << 0x1c;\n  if (((iVar1 < 0) && (uVar2 = param_3[4], uVar2 != 0)) ||\n     (iVar1 = FUN_000054a8(param_1,param_3,iVar1,uVar2,param_4), iVar1 == 0)) {\n    iVar1 = *param_3 - param_3[4];\n    param_2 = param_2 & 0xff;\n    if ((iVar1 < param_3[5]) || (iVar1 = FUN_00004158(param_1,param_3), iVar1 == 0)) {\n      param_3[2] = param_3[2] + -1;\n      puVar3 = (undefined *)*param_3;\n      *param_3 = (int)(puVar3 + 1);\n      *puVar3 = (char)param_2;\n      if (param_3[5] != iVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(param_3 + 3) << 0x1f)) {\n          return param_2;\n        }\n        if (param_2 != 10) {\n          return param_2;\n        }\n      }\n      iVar1 = FUN_00004158(param_1,param_3);\n      if (iVar1 == 0) {\n        return param_2;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005404",
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "FUNC_00005404"
        },
        "FUN_00006974": {
            "renaming": {
                "FUN_00006974": "calculate_result_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "iVar1": "temp_result",
                "uVar2": "result",
                "local_8": "local_array"
            },
            "code": "undefined8 calculate_result_00006974(int dividend, int divisor, int remainder, int quotient)\n{\n  int temp_result;\n  undefined8 result;\n  undefined local_array[8];\n  \n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor, dividend);\n  }\n  if (divisor < 0) {\n    temp_result = -divisor - (uint)(dividend != 0);\n    if (quotient < 0) {\n      result = FUNC_00006a14(-dividend,temp_result,-remainder,-quotient - (uint)(remainder != 0),local_array);\n      return result;\n    }\n    result = FUNC_00006a14(-dividend,temp_result,remainder,quotient,local_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (quotient < 0) {\n    result = FUNC_00006a14(dividend,divisor,-remainder,-quotient - (uint)(remainder != 0),local_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUNC_00006a14();\n  return result;\n}",
            "called": [
                "FUN_00006a14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006974",
            "calling": [
                "FUN_0000443c"
            ],
            "imported": false,
            "current_name": "calculate_result_00006974"
        },
        "FUN_00004314": {
            "renaming": {
                "FUN_00004274": "initialize",
                "PTR_DAT_00004398": "iVar3",
                "FUN_000042a4": "allocate_memory",
                "DAT_0000439c": "0x0",
                "do_nothing_000045e4": "do_nothing",
                "FUN_00004280": "initialize",
                "FUN_00004622": "initialize_memory",
                "param_1": "param",
                "piVar1": "p1",
                "piVar2": "p2",
                "iVar3": "i",
                "ppiVar4": "ppi",
                "FUN_00004314": "find_piVar2_00004314"
            },
            "code": "int * find_piVar2_00004314(int *param_1)\n{\n  int *piVar1;\n  int *piVar2;\n  int PTR_DAT_00004398;\n  int **ppiVar4;\n  initialize();\n  PTR_DAT_00004398 = *(int *)PTR_DAT_00004398;\n  if (*(int *)(PTR_DAT_00004398 + 0x18) == 0) {\n    allocate_memory(PTR_DAT_00004398);\n  }\n  ppiVar4 = (int **)(PTR_DAT_00004398 + 0x48);\n  while (true) {\n    piVar1 = ppiVar4[1];\n    piVar2 = ppiVar4[2];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        piVar2[3] = DAT_0000439c;\n        piVar2[0x19] = 0;\n        do_nothing_000045e4(piVar2 + 0x16);\n        initialize();\n        piVar2[1] = 0;\n        piVar2[2] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        *piVar2 = 0;\n        piVar2[6] = 0;\n        initialize_memory(piVar2 + 0x17,0,8);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)DAT_0000439c) {\n      piVar1 = (int *)allocate_memory(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)DAT_0000439c) {\n        initialize();\n        *param_1 = 0xc;\n        return (int *)DAT_0000439c;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  }\n}\n",
            "called": [
                "FUN_00004274",
                "FUN_00004280",
                "FUN_000045e4",
                "FUN_00004248",
                "FUN_00004622",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004314",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": false,
            "current_name": "find_piVar2_00004314"
        },
        "FUN_00004dc8": {
            "renaming": {
                "FUN_00004dc8": "calculate_new_value_00004dc8",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "value",
                "uVar2": "new_value",
                "bVar3": "is_positive"
            },
            "code": "void calculate_new_value_00004dc8(void* data, int offset) {\n    int value = calculate_offset(data, *(short*)(offset + 0xe));\n    bool is_positive = value >= 0;\n    uint new_value = is_positive ? *(int*)(offset + 0x54) + value : *(ushort*)(offset + 0xc) & 0xffffefff;\n    if (is_positive) {\n        *(uint*)(offset + 0x54) = new_value;\n    }\n    else {\n        *(short*)(offset + 0xc) = (short)new_value;\n    }\n}",
            "called": [
                "FUN_00000490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dc8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_value_00004dc8"
        },
        "FUN_00005fd8": {
            "renaming": {
                "FUN_00005fd8": "process_data_00005fd8",
                "param_1": "data_size",
                "param_2": "data_type",
                "param_3": "data_format",
                "*DAT_00005fe8": "data_ptr",
                "FUN_00005edc": "call_data_processing_function"
            },
            "code": "void process_data_00005fd8(int* *DAT_00005fe8, int param_1, int param_2, int param_3)\n{\n  call_data_processing_function(**DAT_00005fe8, param_1, param_2, param_3);\n  return;\n}",
            "called": [
                "FUN_00005edc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fd8",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "process_data_00005fd8"
        },
        "FUN_00005e10": {
            "renaming": {
                "FUN_00005e10": "read_byte_from_buffer_00005e10",
                "param_1": "buffer_address",
                "param_2": "buffer_pointer",
                "iVar1": "buffer_type",
                "uVar2": "read_byte",
                "pbVar3": "current_byte",
                "PTR_DAT_00005e5c": "buffer_type_1",
                "PTR_DAT_00005e60": "buffer_type_2",
                "PTR_DAT_00005e64": "buffer_type_3"
            },
            "code": "uint read_byte_from_buffer_00005e10(int buffer_address, byte **buffer_pointer) {\n  int buffer_type = *(int *)(buffer_address + 0x18);\n  if ((buffer_address != 0) && (buffer_type == 0)) {\n    initialize_buffer();\n  }\n  if (buffer_pointer == (byte **)PTR_DAT_00005e5c) {\n    buffer_pointer = *(byte ***)(buffer_address + 4);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005e60) {\n    buffer_pointer = *(byte ***)(buffer_address + 8);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005e64) {\n    buffer_pointer = *(byte ***)(buffer_address + 0xc);\n  }\n  int read_status = read_from_buffer(buffer_address, buffer_pointer);\n  if (read_status == 0) {\n    buffer_pointer[1] = buffer_pointer[1] - 1;\n    byte *current_byte = *buffer_pointer;\n    *buffer_pointer = current_byte + 1;\n    uint read_byte = (uint)*current_byte;\n    return read_byte;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e10",
            "calling": [
                "FUN_00004418"
            ],
            "imported": false,
            "current_name": "read_byte_from_buffer_00005e10"
        },
        "FUN_000033f4": {
            "renaming": {
                "FUN_000033f4": "set_alarm_if_valid_time_000033f4",
                "param_1": "time",
                "iVar1": "is_valid_time",
                "uVar2": "return_value",
                "auStack_2c": "alarm_info",
                "FUN_0000328c": "get_valid_time_info",
                "PTR_FUN_000031e0_1_0000343c": "ALARM_SETTING_INFO",
                "FUN_00002654": "set_alarm",
                "PTR_s_rtc__error_setting_alarm_00003440": "ALARM_SETTING_ERROR_MSG"
            },
            "code": "int set_alarm_if_valid_time_000033f4(int time)\n{\n  int is_valid_time;\n  char alarm_info[36];\n  \n  is_valid_time = get_valid_time_info(time, alarm_info);\n  if (is_valid_time == 0) {\n    int is_alarm_set = set_alarm(alarm_info, PTR_FUN_000031e0_1_0000343c, 0);\n    if (is_alarm_set == -1) {\n      log_error(PTR_s_rtc__error_setting_alarm_00003440);\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002654"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033f4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_alarm_if_valid_time_000033f4"
        },
        "FUN_0000443c": {
            "renaming": {
                "FUN_0000443c": "calculate_date_0000443c",
                "*param_1": "date",
                "*param_2": "result",
                "iVar1": "days_since_jan_1",
                "uVar2": "days_since_2000_2",
                "uVar3": "days_since_2000",
                "uVar4": "days_since_1900_leap_years",
                "uVar5": "year",
                "uVar6": "unused",
                "uVar7": "unused",
                "uVar8": "days_since_jan_1_mod_1461",
                "bVar9": "is_negative",
                "DAT_0000458c": "unused",
                "DAT_00004590": "days_in_4_years",
                "DAT_00004594": "days_in_400_years",
                "DAT_00004598": "days_in_100_years",
                "count_leading_zeroes": "unused"
            },
            "code": "uint * calculate_date_0000443c(uint32_t *date, uint32_t *result)\n{\n  int days_since_2000 = days_since_2000(date[0], date[1]);\n  int days_since_2000_2 = days_since_2000(date[0], date[1]);\n  bool is_negative = (days_since_2000_2 < 0);\n  if (is_negative) {\n    days_since_2000_2 += 0x15180;\n  }\n  int day_of_week = (is_negative) ? (days_since_2000 + 0xafa6b) : (days_since_2000 + 0xafa6c);\n  result[2] = days_since_2000_2 / 0xe10;\n  result[1] = (days_since_2000_2 % 0xe10) / 0x3c;\n  *result = (days_since_2000_2 % 0xe10) % 0x3c;\n  result[6] = (day_of_week + 3) % 7;\n  int days_since_1900 = (is_negative) ? (day_of_week - 0x23ab0) : day_of_week;\n  int days_since_1900_leap_years = (days_since_1900 / 1461) * 4;\n  days_since_1900_leap_years += ((days_since_1900 % 1461) / 365) - ((days_since_1900 % 1461) / 1460);\n  int year = (days_since_1900_leap_years + 1900);\n  bool is_leap_year = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n  int days_since_jan_1 = days_since_1900 % 1461;\n  int month = (days_since_jan_1 * 5 + 2) / 153;\n  result[7] = ((days_since_jan_1 - ((153 * month) + 2) / 5) + 1);\n  result[3] = days_since_jan_1 - ((153 * month + 2) / 5);\n  result[4] = year - 1900;\n  if (month < 10) {\n    result[5] = year - 1;\n  }\n  else {\n    result[5] = year;\n  }\n  result[5] -= 1900;\n  result[8] = 0;\n  return result;\n}\n",
            "called": [
                "FUN_00006974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000443c",
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "imported": false,
            "current_name": "calculate_date_0000443c"
        },
        "FUN_000027b0": {
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "puVar1": "system_pointer",
                "DAT_00002814": "system_data_pointer",
                "DAT_00002818": "system_data"
            },
            "code": "void initialize_system_000027b0(void)\n{\n    uint32_t *system_pointer;\n    system_pointer = DAT_00002814;\n    *(uint32_t *)(DAT_00002814 + 0x103c) = *(uint32_t *)(DAT_00002814 + 0x103c) | 0x20000000;\n    system_pointer[4] = 1;\n    system_pointer[4] = 0;\n    if ((system_pointer[5] & 1) != 0) {\n        *system_pointer = 0;\n    }\n    system_pointer[4] = 0x104;\n    system_pointer[2] = 0xffffff42;\n    system_pointer[7] = 0;\n    initialize_device();\n    return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000027b0",
            "calling": [
                "FUN_000025f4"
            ],
            "imported": false,
            "current_name": "initialize_system_000027b0"
        },
        "FUN_00005ebc": {
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "code": "void copy_string_00005ebc(char *destination, char *source) {\n  char current_char;\n  do {\n    current_char = *source;\n    *destination = current_char;\n    source++;\n    destination++;\n  } while (current_char != '\\0');\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ebc",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "copy_string_00005ebc"
        },
        "FUN_00006192": {
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "status",
                "param_2": "data_buffer",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "int",
                "FUN_00004b34": "cleanup"
            },
            "code": "int process_data_00006192(int status, int* data_buffer) {\n  int* ptr_1 = (int*)data_buffer[13];\n  if (ptr_1 != NULL) {\n    int* ptr_2 = data_buffer + 17;\n    if (ptr_1 != ptr_2) {\n      cleanup();\n    }\n    data_buffer[1] = data_buffer[16];\n    data_buffer[13] = NULL;\n    if (data_buffer[16] != 0) {\n      *data_buffer = data_buffer[15];\n      return 0;\n    }\n  }\n  *data_buffer = data_buffer[4];\n  data_buffer[1] = 0;\n  *(unsigned short*)(data_buffer + 3) |= 0x20;\n  return -1;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006192",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "process_data_00006192"
        },
        "FUN_00001734": {
            "renaming": {
                "FUN_00001734": "print_six_characters_00001734",
                "DAT_00001744": "data",
                "FUN_00001710": "print"
            },
            "code": "void print_six_characters_00001734(const char* DAT_00001744)\n{\n  print(DAT_00001744, 6);\n  return;\n}",
            "called": [
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001734",
            "calling": [
                "FUN_00001a18",
                "FUN_000019c0",
                "FUN_00001a3c"
            ],
            "imported": false,
            "current_name": "print_six_characters_00001734"
        },
        "FUN_00000e14": {
            "renaming": {
                "FUN_00000e14": "calculate_result_00000e14",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "code": "int calculate_result_00000e14(int input1, int input2) {\n  int result = calculate(DAT_00000e34, input1, input2);\n  return result;\n}",
            "called": [
                "FUN_000012e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e14",
            "calling": [
                "FUN_00000490"
            ],
            "imported": false,
            "current_name": "calculate_result_00000e14"
        },
        "FUN_0000281c": {
            "renaming": {
                "FUN_0000281c": "find_matching_value_in_array_0000281c",
                "local_10": "match_count",
                "local_c": "current_value",
                "DAT_00002858": "array_ptr"
            },
            "code": "int find_matching_value_in_array_0000281c(void)\n{\n  int match_count = 0;\n  int current_value;\n  int *DAT_00002858 = PTR_00002858;\n\n  while (match_count < 3 && (current_value = *DAT_00002858, current_value != *DAT_00002858))) {\n    match_count++;\n  }\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000281c",
            "calling": [
                "FUN_00002624"
            ],
            "imported": false,
            "current_name": "find_matching_value_in_array_0000281c"
        },
        "FUN_00002270": {
            "renaming": {
                "FUN_00002270": "is_ptr_same_00002270",
                "param_1": "ptr_param",
                "uVar1": "ptr_result",
                "iVar2": "ptr_data",
                "bVar3": "is_same"
            },
            "code": "bool is_ptr_same_00002270(int ptr_param) {\n  int ptr_data = *(int *)(ptr_param + 0xc);\n  bool is_same = *(int *)(ptr_param + 8) == ptr_data;\n  if (is_same) {\n    ptr_data = 1;\n  }\n  return (bool)ptr_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002270",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "is_ptr_same_00002270"
        },
        "FUN_00005780": {
            "renaming": {
                "FUN_00005780": "call_function_with_param_00005780",
                "param_1": "param",
                "FUN_00004b34": "function_ptr",
                "*DAT_0000578c": "function_ptr"
            },
            "code": "void call_function_with_param_00005780(void* *DAT_0000578c, undefined4 param) {\n  *DAT_0000578c(param);\n  return;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005780",
            "calling": [
                "FUN_00005100"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00005780"
        },
        "FUN_000020cc": {
            "renaming": {
                "FUN_000020cc": "initialize_data_000020cc",
                "FUN_00002028": "set_data_buffer",
                "DAT_000020dc": "data_buffer"
            },
            "code": "void initialize_data_000020cc(void)\n{\n  set_DAT_000020dc(DAT_000020dc, 1);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020cc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020cc"
        },
        "FUN_00002396": {
            "renaming": {
                "FUN_00002396": "initialize_system_00002396",
                "FUN_000025f4": "initialize_components"
            },
            "code": "void initialize_system_00002396(void)\n{\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_000025f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002396",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_system_00002396"
        },
        "FUN_00004cb4": {
            "renaming": {
                "FUN_00004cb4": "message_handler_00004cb4",
                "param_1": "message",
                "puVar1": "message_buffer_pointer",
                "uVar2": "message_length",
                "puVar3": "message_buffer",
                "unaff_r4": "unused_variable_1",
                "iVar4": "message_data_pointer",
                "unaff_r5": "unused_variable_2"
            },
            "code": "uint message_handler_00004cb4(uint message)\n{\n  uint result = message;\n  uint *message_data = *(uint **)(*DAT_00004cd8 + 8);\n  if (message_data == (uint *)PTR_DAT_00005e04) {\n    message_data = *(uint **)(*DAT_00004cd8 + 4);\n  }\n  else if (message_data == (uint *)PTR_DAT_00005e08) {\n    message_data = *(uint **)(*DAT_00004cd8 + 8);\n  }\n  else if (message_data == (uint *)PTR_DAT_00005e0c) {\n    message_data = *(uint **)(*DAT_00004cd8 + 0xc);\n  }\n  if ((-1 < (int)(message_data[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(message_data + 3) << 0x16))) {\n    do_nothing_000045e8(message_data[0x16]);\n  }\n  message_data[2]--;\n  if (((int)message_data[2] < 0) && (((int)message_data[2] < (int)message_data[6] || (result & 0xff) == 10)))\n  {\n    result = FUNC_00005404(*DAT_00004cd8, result, message_data, result & 0xff, unaff_r4, unaff_r5);\n  }\n  else {\n    uint *message_buffer = (uint *)*message_data;\n    *message_data = (uint)message_buffer + 1;\n    *(char *)message_buffer = (char)result;\n    result &= 0xff;\n  }\n  if ((-1 < (int)(message_data[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(message_data + 3) << 0x16))) {\n    do_nothing_000045ec(message_data[0x16]);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004cb4",
            "calling": [
                "FUN_00002a00"
            ],
            "imported": false,
            "current_name": "message_handler_00004cb4"
        },
        "FUN_00003478": {
            "renaming": {
                "FUN_00003478": "set_rtc_time_and_check_error_00003478",
                "param_1": "time_to_set",
                "iVar1": "set_time_result",
                "uVar2": "return_value",
                "auStack_2c": "time_buffer",
                "FUN_0000328c": "get_time_from_rtc",
                "FUN_00002600": "check_time_format",
                "PTR_s_rtc__error_setting_time_000034bc": "RTC_ERROR_SETTING_TIME_MSG"
            },
            "code": "set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478aset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478dset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478hset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478kset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478{set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478hset_rtc_time_and_check_error_00003478aset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478bset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478[set_rtc_time_and_check_error_000034783set_rtc_time_and_check_error_000034786set_rtc_time_and_check_error_00003478]set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478gset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478,set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478bset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478{set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478hset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478kset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478hset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478kset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478aset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478bset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478fset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478hset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478kset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478=set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478-set_rtc_time_and_check_error_000034781set_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478{set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478gset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478(set_rtc_time_and_check_error_00003478Pset_rtc_time_and_check_error_00003478Tset_rtc_time_and_check_error_00003478Rset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478oset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478gset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478iset_rtc_time_and_check_error_00003478mset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478_set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_000034783set_rtc_time_and_check_error_000034784set_rtc_time_and_check_error_00003478bset_rtc_time_and_check_error_00003478cset_rtc_time_and_check_error_00003478)set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_000034781set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478}set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478}set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478lset_rtc_time_and_check_error_00003478sset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478{set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_000034781set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478}set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478eset_rtc_time_and_check_error_00003478tset_rtc_time_and_check_error_00003478uset_rtc_time_and_check_error_00003478rset_rtc_time_and_check_error_00003478nset_rtc_time_and_check_error_00003478 set_rtc_time_and_check_error_000034780set_rtc_time_and_check_error_00003478;set_rtc_time_and_check_error_00003478\nset_rtc_time_and_check_error_00003478}set_rtc_time_and_check_error_00003478",
            "called": [
                "FUN_00002600",
                "FUN_0000328c",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003478",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "set_rtc_time_and_check_error_00003478"
        },
        "FUN_00002028": {
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "data_array",
                "param_2": "num_elements",
                "iVar1": "function_index",
                "uVar2": "bit_mask",
                "local_c": "flag",
                "FUN_00001e0c": "get_function_index",
                "PTR_DAT_000020b4": "function_array",
                "FUN_00001cf0": "cleanup"
            },
            "code": "void process_data_00002028(int data_array[], int num_elements) {\n  int current_element;\n  uint32_t bit_mask;\n  uint32_t flag;\n  for (current_element = 0; current_element < num_elements; current_element++) {\n    bit_mask = *(uint32_t *)(data_array + 0xa0);\n    for (flag = 0; flag < 0x20; flag++) {\n      if (((bit_mask & 1 << (flag & 0xff)) != 0) &&\n         ((*(uint32_t *)(data_array + flag * 4) & 0xf0000) != 0)) {\n        *(int *)(data_array + 0xa0) = 1 << (flag & 0xff);\n        int function_index = get_function_index(flag);\n        (**(code **)(PTR_DAT_000020b4 + function_index * 0xc))\n                  (*(undefined4 *)(PTR_DAT_000020b4 + function_index * 0xc + 4));\n      }\n    }\n  }\n  cleanup();\n  return;\n}",
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002028",
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020f4",
                "FUN_000020cc",
                "FUN_000020e0"
            ],
            "imported": false,
            "current_name": "process_data_00002028"
        },
        "FUN_000016c8": {
            "renaming": {
                "FUN_000016c8": "set_pointer_value_to_one_000016c8",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "pointer_to_address"
            },
            "code": "void set_pointer_value_to_one_000016c8(undefined4 address, undefined value) {\n    undefined4 *pointer_to_address;\n    pointer_to_address = (undefined4 *)get_pointer_address(address, value);\n    *pointer_to_address = 1;\n    return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016c8",
            "calling": [
                "FUN_000017dc"
            ],
            "imported": false,
            "current_name": "set_pointer_value_to_one_000016c8"
        },
        "FUN_00001a60": {
            "renaming": {
                "FUN_00001a60": "initialize_data_00001a60",
                "DAT_00001ac4": "DAT_buffer",
                "DAT_00001ac8": "DAT_buffer+1",
                "DAT_00001acc": "DAT_buffer+2",
                "PTR_DAT_00001ad0": "PTR_result",
                "FUN_00001710": "set_bit_in_byte",
                "FUN_000016ec": "copy_bytes"
            },
            "code": "void initialize_data_00001a60(void)\n{\n  set_bit_in_byte(DAT_00001ac4, 1);\n  set_bit_in_byte(DAT_00001ac8, 7);\n  while ((DAT_00001ac4[6] & 0xc) != 8);\n  copy_bytes(DAT_00001acc, DAT_00001ac4_copy, 6);\n  while ((DAT_00001ac4[6] & 0x20) == 0);\n  while ((DAT_00001ac4[6] & 0x40) == 0);\n  *PTR_DAT_00001ad0 = 6;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a60",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_data_00001a60"
        },
        "FUN_0000099c": {
            "renaming": {
                "FUN_0000099c": "initialize_variables_0000099c",
                "uStack_18": "uStack_variable",
                "local_14": "stack_pointer",
                "local_10": "global_pointer",
                "local_c": "rel_array_pointer",
                "DAT_00000a14": "global_array_pointer",
                "FUN_00000db0": "initialize_global_array",
                "PTR_Elf32_Rel_ARRAY_00000a20": "global_rel_array_pointer",
                "PTR_DAT_00000a24": "global_array_end_pointer",
                "DAT_00000a1c": "global_variable_1",
                "PTR_DAT_00000a28": "global_zero_array_pointer",
                "DAT_00000a2c": "global_variable_2",
                "do_nothing_00000990": "do_nothing",
                "FUN_00000e64": "call_function_1",
                "FUN_0000459c": "call_function_2",
                "FUN_00000f8c": "call_function_3"
            },
            "code": "void initialize_variables_0000099c(void)\n{\n  undefined4 uStack_variable = 0;\n  undefined4 *stack_pointer = &uStack_variable;\n  undefined4 *global_pointer = DAT_00000a14;\n  initialize_global_array();\n  undefined4 *rel_array_pointer = (undefined4 *)PTR_Elf32_Rel_ARRAY_00000a20;\n  while (rel_array_pointer < &uStack_variable) {\n    *rel_array_pointer = DAT_00000a1c;\n    rel_array_pointer++;\n  }\n  undefined4 *zero_array_pointer = (undefined4 *)PTR_DAT_00000a28;\n  while( true ) {\n    if (DAT_00000a2c <= zero_array_pointer) break;\n    *zero_array_pointer = 0;\n    zero_array_pointer++;\n  }\n  do_nothing();\n  call_function_1();\n  call_function_2();\n  call_function_3();\n  return;\n}",
            "called": [
                "FUN_0000459c",
                "FUN_00000f8c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000099c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_variables_0000099c"
        },
        "FUN_00002d94": {
            "renaming": {
                "FUN_00002d94": "reverse_string_to_uint_00002d94",
                "param_1": "string",
                "param_2": "len",
                "iVar1": "char_code",
                "bVar2": "byte_val",
                "bVar3": "is_first_char",
                "local_c": "string_ptr",
                "FUN_00004418": "get_next_char_code",
                "FUN_00002a00": "print_char"
            },
            "code": "uint reverse_string_to_uint_00002d94(undefined *string, int len)\n{\n  int char_code;\n  byte byte_val;\n  bool is_first_char = true;\n  undefined *string_ptr = string;\n  while( true ) {\n    if (len + -1 <= (int)string_ptr - (int)string) {\n      return 0xffffffff;\n    }\n    char_code = get_next_char_code();\n    if (char_code < 0) break;\n    if ((char_code == 0xd) || (char_code == 10)) {\n      *string_ptr = 0;\n      print_char(0xd);\n      print_char(10);\n      byte_val = is_first_char ? 1 : 0;\n      return (uint)byte_val;\n    }\n    if ((char_code == 8) || (char_code == 0x7f)) {\n      if (string_ptr != string) {\n        string_ptr = string_ptr + -1;\n        *string_ptr = 0;\n        print_char(8);\n        print_char(0x20);\n        print_char(8);\n      }\n    }\n    else {\n      *string_ptr = (char)char_code;\n      print_char(char_code);\n      string_ptr = string_ptr + 1;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002d94",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": false,
            "current_name": "reverse_string_to_uint_00002d94"
        },
        "FUN_00003918": {
            "renaming": {
                "FUN_00003918": "get_character_for_code_00003918",
                "param_1": "code",
                "uVar1": "character"
            },
            "code": "int get_character_for_code_00003918(int code) {\n  int character;\n  switch(code) {\n    case 2:\n      character = 'h';\n      break;\n    case 3:\n      character = 'k';\n      break;\n    case 6:\n      character = 'M';\n      break;\n    case 9:\n      character = 'G';\n      break;\n    case 0xc:\n      character = 'T';\n      break;\n    case 0xf:\n      character = 'P';\n      break;\n    case 0xf1:\n      character = 'f';\n      break;\n    case 0xf4:\n      character = 'p';\n      break;\n    case 0xf7:\n      character = 'n';\n      break;\n    case 0xfa:\n      character = 'u';\n      break;\n    case 0xfd:\n      character = 'm';\n      break;\n    default:\n      character = 0;\n      break;\n  }\n  return character;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003918",
            "calling": [
                "FUN_00003694"
            ],
            "imported": false,
            "current_name": "get_character_for_code_00003918"
        },
        "FUN_00003d64": {
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "uVar1": "result"
            },
            "code": "int execute_function_00003d64(int function_pointer, int arg1){\n  int result;\n  if (function_pointer == 0) {\n    result = -19;\n  }\n  else {\n    result = (***(int ***)(function_pointer + 0xc))(*(int *)(function_pointer + 4), arg1);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d64",
            "calling": [
                "FUN_00002ecc"
            ],
            "imported": false,
            "current_name": "execute_function_00003d64"
        },
        "FUN_00004e52": {
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "first_array",
                "param_2": "second_array",
                "bVar1": "first_byte",
                "uVar2": "current_byte",
                "bVar3": "are_bytes_equal"
            },
            "code": "int compare_bytes_00004e52(byte *first_array, byte *second_array) {\n  byte first_byte;\n  uint current_byte;\n  bool are_bytes_equal;\n  do {\n    current_byte = (uint)*first_array;\n    first_byte = *second_array;\n    are_bytes_equal = current_byte == 1;\n    if (current_byte != 0) {\n      are_bytes_equal = current_byte == first_byte;\n    }\n    first_array = first_array + 1;\n    second_array = second_array + 1;\n  } while (are_bytes_equal);\n  return current_byte - first_byte;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e52",
            "calling": [
                "FUN_00002a18",
                "FUN_00005100",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "compare_bytes_00004e52"
        },
        "FUN_000010d4": {
            "renaming": {
                "FUN_000010d4": "create_new_data_structure_000010d4",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "flags",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "temp",
                "uVar2": "data",
                "iVar3": "result",
                "uVar4": "size_aligned",
                "puVar5": "new_data",
                "local_30": "data_size_aligned",
                "local_2c": "data_offset_aligned",
                "local_10": "i",
                "local_c": "j",
                "local_a": "index",
                "PTR_DAT_0000126c": "g_data_structure_array",
                "PTR_DAT_00001270": "g_data_structure_count"
            },
            "code": "int create_new_data_structure_000010d4(uint data_offset, int data_size, byte flags, uint param_4, undefined4 param_5, undefined4 param_6, undefined4 param_7)\n{\n    uint offset_aligned = data_offset;\n    int size_aligned = data_size;\n    if ((data_offset & 3) != 0) {\n        int offset_diff = 4 - (data_offset & 3);\n        offset_aligned = data_offset + offset_diff;\n        size_aligned = data_size - offset_diff;\n    }\n    size_aligned = (size_aligned - 0x30U) & 0xfffffffc;\n    undefined4 *new_data = (undefined4 *)(size_aligned + offset_aligned);\n    if ((flags & 8) == 0) {\n        *(uint *)offset_aligned = offset_aligned;\n    }\n    else {\n        for (uint i = offset_aligned; i < size_aligned + offset_aligned; i = i + 4) {\n            *(uint *)i = i;\n        }\n    }\n    undefined4 *temp = create_temporary_data();\n    short index = 0;\n    for (short i = 1; i < 0x21; i++) {\n        if (*(int *)(PTR_DAT_0000126c + i * 4) == 0) {\n            index = i;\n            break;\n        }\n    }\n    if (index == 0) {\n        destroy_temporary_data(temp);\n        return -0x8b;\n    }\n    *(undefined4 **)(PTR_DAT_0000126c + index * 4) = new_data;\n    *(short *)((int)new_data + 6) = index;\n    undefined4 data = create_data(param_5, param_6, offset_aligned, size_aligned);\n    *new_data = data;\n    new_data[9] = offset_aligned;\n    new_data[0xb] = data_size;\n    new_data[10] = param_7;\n    *(byte *)((int)new_data + 5) = flags;\n    *(undefined *)(new_data + 1) = 0;\n    new_data[2] = 0;\n    new_data[3] = 0;\n    new_data[4] = 0;\n    initialize_data(new_data + 5, 0);\n    new_data[8] = 0;\n    *(int *)PTR_DAT_00001270 = *(int *)PTR_DAT_00001270 + 1;\n    if ((flags & 1) == 0) {\n        initialize_data(new_data, 10);\n        if ((flags & 4) == 0) {\n            destroy_temporary_data(temp);\n            destroy_data_structure(data_size);\n            return (int)index;\n        }\n    }\n    else {\n        initialize_data(new_data, 1);\n    }\n    destroy_temporary_data(temp);\n    return (int)index;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00000fec",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000698"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010d4",
            "calling": [
                "FUN_00000f8c"
            ],
            "imported": false,
            "current_name": "create_new_data_structure_000010d4"
        },
        "FUN_000045e4": {
            "renaming": {
                "FUN_000045e4": "do_nothing_000045e4"
            },
            "code": "\nvoid do_nothing_000045e4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e4",
            "calling": [
                "FUN_00004314"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e4"
        },
        "FUN_00000738": {
            "renaming": {
                "FUN_00000738": "check_param_bounds_00000738",
                "param_1": "input_param",
                "iVar1": "result",
                "PTR_DAT_0000078c": "ptr_data_1",
                "PTR_DAT_00000790": "ptr_data_2"
            },
            "code": "void check_param_bounds_00000738(ushort input_param)\n{\n    int num_bytes = *(byte *)(*(int *)PTR_DAT_0000078c + 4);\n    int max_param_value = *(byte *)(*(int *)PTR_DAT_0000078c + 5);\n    if (num_bytes < 9 || input_param < max_param_value)\n    {\n        int result = FUN_00000d2a();\n        if (result == 0)\n        {\n            FUN_0000093c();\n        }\n        else\n        {\n            *(undefined4 *)PTR_DAT_00000790 = 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000738",
            "calling": [
                "FUN_000024bc",
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "check_param_bounds_00000738"
        },
        "FUN_00003e58": {
            "renaming": {
                "FUN_00003e58": "reverse_number_string_00003e58",
                "param_1": "number_string",
                "param_2": "string_length",
                "iVar1": "reversed_number",
                "local_18": "absolute_value",
                "local_14": "number_start"
            },
            "code": "int reverse_number_string_00003e58(char *number_string, int string_length)\n{\n    int is_negative = (-(string_length >> 0x1f) != 0);\n    int absolute_value = is_negative ? -string_length : string_length;\n    char *number_start = number_string;\n    if (number_string != NULL && is_negative)\n    {\n        *number_string = '-';\n        number_start = number_string + 1;\n    }\n    int reversed_number = reverse_string(number_start, absolute_value);\n    return is_negative + reversed_number;\n}",
            "called": [
                "FUN_00003dc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e58",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": false,
            "current_name": "reverse_number_string_00003e58"
        },
        "FUN_00004e26": {
            "renaming": {
                "FUN_00004e26": "check_value_and_set_flag_00004e26",
                "param_1": "value",
                "param_2": "param_offset",
                "iVar1": "result",
                "uVar2": "flag_value",
                "bVar3": "is_negative"
            },
            "code": "void check_value_and_set_flag_00004e26(undefined4 value, int param_offset)\n{\n  int result = FUN_000004f2(value, (int)*(short *)(param_offset + 0xe));\n  bool is_negative = result == -1;\n  ushort flag_value;\n  if (is_negative) {\n    flag_value = *(ushort *)(param_offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param_offset + 0x54) = result;\n    flag_value = *(ushort *)(param_offset + 0xc) | 0x1000;\n  }\n  *(ushort *)(param_offset + 0xc) = flag_value;\n}\n",
            "called": [
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e26",
            "calling": [],
            "imported": false,
            "current_name": "check_value_and_set_flag_00004e26"
        },
        "FUN_000045e8": {
            "renaming": {
                "FUN_000045e8": "do_nothing_000045e8"
            },
            "code": "\nvoid do_nothing_000045e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e8",
            "calling": [
                "FUN_00004274",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005fec",
                "FUN_0000428c",
                "FUN_00005790",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045e8"
        },
        "FUN_000057f8": {
            "renaming": {
                "FUN_000057f8": "FUNC_000057f8"
            },
            "code": "\nint FUNC_000057f8(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  bool bVar6;\n  byte *pbVar7;\n  int unaff_r7;\n  byte *pbVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 uStack_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_2 == PTR_DAT_00005a38) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_00005a3c) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_00005a40) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n     (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n    do_nothing_000045e8(*(undefined4 *)(param_2 + 0x58));\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar3 = FUN_000054a8(param_1,param_2), iVar3 != 0)) {\n    if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n       (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n      do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n    }\n    return -1;\n  }\n  puVar1 = PTR_s___0__00005a44;\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\n  local_8c = param_4;\nLAB_0000588e:\n  pbVar7 = pbVar8;\n  if (*pbVar7 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  pbVar8 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_0000588e;\nLAB_0000589a:\n  iVar3 = (int)pbVar7 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = FUN_000057d2(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_00005a06:\n      if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n         (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n        do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar7 == 0) goto LAB_00005a06;\n  local_84 = -1;\n  uStack_80 = 0;\n  local_88 = 0;\n  local_7c = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar7 + 1;\n  while( true ) {\n    pbVar7 = pbVar8 + 1;\n    iVar3 = FUN_00006010(PTR_s___0__00005a44,*pbVar8,5);\n    puVar2 = PTR_DAT_00005a54;\n    if (iVar3 == 0) break;\n    local_88 = 1 << (iVar3 - (int)puVar1 & 0xffU) | local_88;\n    pbVar8 = pbVar7;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar5 = local_8c + 1;\n    local_7c = *local_8c;\n    local_8c = piVar5;\n    if (local_7c < 0) {\n      local_7c = -local_7c;\n      local_88 = local_88 | 2;\n    }\n  }\n  else {\n    bVar6 = false;\n    iVar3 = local_7c;\n    pbVar7 = pbVar8;\n    while( true ) {\n      if (9 < *pbVar7 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n      bVar6 = true;\n      pbVar7 = pbVar7 + 1;\n    }\n    if (bVar6) {\n      local_7c = iVar3;\n    }\n  }\n  if (*pbVar7 == 0x2e) {\n    if (pbVar7[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      pbVar7 = pbVar7 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar6 = false;\n      local_84 = 0;\n      iVar3 = 0;\n      while( true ) {\n        pbVar7 = pbVar7 + 1;\n        if (9 < *pbVar7 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n        bVar6 = true;\n      }\n      if (bVar6) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  iVar3 = FUN_00006010(PTR_DAT_00005a54,*pbVar7,3);\n  if (iVar3 != 0) {\n    local_88 = local_88 | 0x40 << (iVar3 - (int)puVar2 & 0xffU);\n    pbVar7 = pbVar7 + 1;\n  }\n  param_3 = pbVar7 + 1;\n  local_70 = *pbVar7;\n  iVar3 = FUN_00006010(PTR_s_efgEFG_00005a48,local_70,6);\n  if (iVar3 == 0) {\n    iVar3 = FUNC_00005b34(param_1,&local_88,param_2,DAT_00005a50,&local_8c);\n  }\n  else {\n    iVar3 = param_1;\n    if (DAT_00005a4c == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar3 = unaff_r7;\n      goto LAB_000059b4;\n    }\n  }\n  if (iVar3 == -1) goto LAB_00005a06;\nLAB_000059b4:\n  local_74 = local_74 + iVar3;\n  pbVar8 = param_3;\n  unaff_r7 = iVar3;\n  goto LAB_0000588e;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_000057d2",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005b34",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000057f8",
            "calling": [
                "FUN_00004c84"
            ],
            "imported": false,
            "current_name": "FUNC_000057f8"
        },
        "FUN_000018bc": {
            "renaming": {
                "FUN_000018bc": "initialize_device_000018bc",
                "FUN_00001748": "set_device_speed",
                "DAT_00001910": "device_control_register",
                "FUN_00001710": "enable_device_interrupts",
                "PTR_DAT_00001918": "device_pointer_register",
                "DAT_00001914": "device_interrupt_register"
            },
            "code": "void initialize_device_000018bc(void)\n{\n  set_device_speed(160);\n  *DAT_00001910 = *DAT_00001910 & 0x3b | 4;\n  enable_device_interrupts(DAT_00001914, 1);\n  while ((DAT_00001910[6] & 0x10) == 0);\n  while ((DAT_00001910[6] & 0xc) != 0);\n  *PTR_DAT_00001918 = 0;\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000018bc",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "initialize_device_000018bc"
        },
        "FUN_00000f04": {
            "renaming": {
                "FUN_00000f04": "process_input_00000f04",
                "param_1": "input",
                "param_2": "param",
                "uStack_18": "initialized_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "param",
                "local_9": "input",
                "*piRam00000f4c": "initialized_ptr",
                "FUN_00000ed8": "handle_interrupt",
                "FUN_00004c84": "init_memory",
                "uRam00000f50": "memory_location",
                "FUN_0000211c": "init_system",
                "uRam00000f54": "io_port1",
                "uRam00000f58": "io_port2",
                "FUN_00000cd0": "execute_logic",
                "do_nothing_00000ef8": "do_nothing",
                "FUN_00000e58": "execute_post_logic",
                "do_nothing_00002400": "do_nothing2",
                "PTR_s_main____This_is_RIOT___Version__2_00000f7c": "main_message",
                "FUN_000023a4": "init_network"
            },
            "code": "void process_input_00000f04(char input, int param)\n{\n  int initialized = 0;\n  int *initialized_ptr = (int*)0x00000f4c;\n  void (*jump_table)();\n\n  if (*initialized_ptr == 0) {\n    *initialized_ptr = 1;\n    if (input == '\\x03') {\n      handle_interrupt();\n    }\n    init_memory(uRam00000f50, param);\n    init_system();\n    init_io_ports();\n  }\n  execute_logic();\n  do_nothing();\n  jump_table = (void(*)())0xf4d;\n  execute_post_logic();\n  initialized_ptr = &initialized + 1;\n  do_nothing2();\n  init_PTR_s_main____This_is_RIOT___Version__2_00000f7c();\n  init_network();\n  jump_table();\n}\n",
            "called": [
                "FUN_00000e58",
                "FUN_00000ef8",
                "FUN_00000cd0",
                "FUN_0000211c",
                "FUN_000023a4",
                "FUN_00002400",
                "FUN_00004c84",
                "FUN_00000ed8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f04",
            "calling": [
                "FUN_000013b8",
                "FUN_00000fec",
                "FUN_00003ec4",
                "FUN_00000cc0",
                "FUN_00000a30",
                "FUN_00001034"
            ],
            "imported": false,
            "current_name": "process_input_00000f04"
        },
        "FUN_00000610": {
            "renaming": {
                "FUN_00000610": "initialize_array_00000610",
                "iVar1": "current_index",
                "iVar2": "expected_index",
                "uVar3": "success_flag",
                "PTR_DAT_00000684": "PTR_DATA_START",
                "PTR_DAT_00000688": "PTR_CURRENT_INDEX",
                "FUN_00000566": "get_current_index",
                "PTR_DAT_0000068c": "PTR_CURRENT_INDEX",
                "PTR_DAT_00000690": "PTR_INDEX_TABLE_START",
                "*(undefined4 *)PTR_DAT_00000684": "*(int *)PTR_DATA_START",
                "**(int **)(PTR_DAT_00000690 + iVar1 * 4)": "**(int **)(PTR_INDEX_TABLE_START + current_index * 4)",
                "*(undefined *)(iVar2 + 4)": "*(char *)(expected_index + 4)",
                "*(undefined *)(iVar1 + -4)": "*(char *)(current_index + -4)",
                "*(undefined2 *)PTR_DAT_00000694": "*(short *)PTR_NEXT_INDEX",
                "*(int *)PTR_DAT_00000688": "*(int *)PTR_CURRENT_INDEX"
            },
            "code": "int initialize_array_00000610(void)\n{\n  int current_index;\n  int expected_index;\n  int success_flag;\n  \n  *(undefined4 *)PTR_DAT_00000684 = 0;\n  expected_index = *(int *)PTR_EXPECTED_INDEX;\n  current_index = get_current_index(*(int *)PTR_DAT_00000688);\n  current_index = **(int **)(PTR_DAT_00000690 + iVar1 * 4);\n  if (expected_index == current_index + -8) {\n    success_flag = 0;\n  }\n  else {\n    if ((expected_index != 0) && (*(char *)(expected_index + 4) == '\t')) {\n      *(char *)(expected_index + 4) = 10;\n    }\n    *(char *)(current_index + -4) = 9;\n    *(undefined2 *)PTR_DAT_00000694 = *(short *)(current_index + -2);\n    *(int *)PTR_DAT_00000688 = current_index + -8;\n    success_flag = 1;\n  }\n  return success_flag;\n}",
            "called": [
                "FUN_00000566"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000610",
            "calling": [],
            "imported": false,
            "current_name": "initialize_array_00000610"
        },
        "FUN_00003694": {
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "data_object_address",
                "param_2": "data_object_size",
                "uVar1": "data_type",
                "cVar2": "is_bit_set",
                "uVar3": "bit_mask",
                "bVar4": "is_bit_set_bool",
                "auStack_18": "stack_data",
                "local_10": "string_length",
                "local_a": "string_type",
                "local_9": "current_byte_index",
                "PTR_s_Unable_to_display_data_object_000037e4": "unable_to_display_data_object_error_message",
                "PTR_s_Data__000037e8": "data_header_label",
                "PTR_LAB_000037f0": "data_label",
                "PTR_s__000037f8": "single_data_label",
                "PTR_s___u__000037f4": "multiple_data_label",
                "PTR_LAB_00003800": "string_data_label",
                "PTR_LAB_00003804": "string_error_label",
                "PTR_s__iE_i_00003808": "string_type_error_label",
                "PTR_s__6d__c_000037fc": "string_type_label",
                "DAT_000037ec": "bit_mask_constant"
            },
            "code": "void display_data_object_00003694(int data_object_address, byte data_object_size) {\\n  undefined4 uVar1;\\n  char is_bit_set;\\n  uint bit_mask;\\n  bool is_bit_set_bool;\\n  undefined stack_data[8];\\n  int string_length;\\n  char string_type;\\n  byte current_byte_index;\\n  if ((data_object_address == 0) || (3 < data_object_size)) {\\n    print_error_message(PTR_s_Unable_to_display_data_object_00003694_000037e4);\\n  }\\n  else {\\n    print_data_header(PTR_s_Data__000037e8);\\n    for (current_byte_index = 0; current_byte_index < data_object_size; current_byte_index++) {\\n      if (*(byte *)(data_object_address + 6) < 0x14) {\\n        bit_mask = DAT_000037ec & 1 << (uint)*(byte *)(data_object_address + 6);\\n        is_bit_set_bool = bit_mask != 0;\\n        if (is_bit_set_bool) {\\n          bit_mask = 1;\\n        }\\n        is_bit_set = (char)bit_mask;\\n        if (!is_bit_set_bool) {\\n          is_bit_set = \"\\0\";\\n        }\\n        if (is_bit_set == \"\\0\") goto skip_byte;\\n        string_type = \"\\0\";\\n      }\\n      else {\\n        string_type = get_string_type((int)*(char *)(data_object_address + 7));\\n      }\\n      print_PTR_LAB_000037f0(PTR_LAB_000037f0);\\n      if (data_object_size < 2) {\\n        print_PTR_LAB_000037f0(PTR_s__000037f8);\\n      }\\n      else {\\n        print_PTR_LAB_000037f0(PTR_s___u__000037f4,current_byte_index);\\n      }\\n      if (string_type == \"\\0\") {\\n        if (*(char *)(data_object_address + 7) == \"\\0\") {\\n          print_PTR_LAB_000037f0(PTR_LAB_00003800,(int)*(short *)(data_object_address + (uint)current_byte_index * 2));\\n        }\\n        else if ((*(char *)(data_object_address + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object_address + 7),4)) &&\\n                (*(char *)(data_object_address + 7) < \"\\0\")) {\\n          string_length = create_string(stack_data,(int)*(short *)(data_object_address + (uint)current_byte_index * 2),\\n                                  (int)*(char *)(data_object_address + 7));\\n          stack_data[string_length] = 0;\\n          print_PTR_LAB_000037f0(PTR_LAB_00003804,stack_data);\\n        }\\n        else {\\n          print_PTR_LAB_000037f0(PTR_s__iE_i_00003808,(int)*(short *)(data_object_address + (uint)current_byte_index * 2),\\n                       (int)*(char *)(data_object_address + 7));\\n        }\\n      }\\n      else {\\n        print_PTR_LAB_000037f0(PTR_s__6d__c_000037fc,(int)*(short *)(data_object_address + (uint)current_byte_index * 2),string_type);\\n      }\\n      uVar1 = get_data_type(*(undefined *)(data_object_address + 6));\\n      print_PTR_LAB_000037f0(PTR_LAB_0000380c,uVar1);\\n      skip_byte:\\n      continue;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00004db8",
                "FUN_00003810",
                "FUN_00003e9e",
                "FUN_00004c84",
                "FUN_00003918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003694",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "imported": false,
            "current_name": "display_data_object_00003694"
        },
        "FUN_00002364": {
            "renaming": {
                "FUN_00002364": "check_input_and_handle_error_00002364",
                "param_1": "input",
                "param_2": "error_message",
                "iVar1": "input_check",
                "uVar2": "return_value",
                "FUN_00002294": "check_input",
                "FUN_000022be": "handle_error"
            },
            "code": "int check_input_and_handle_error_00002364(int input, char error_message){\n  int input_check = check_input(input);\n  if (input_check == 0) {\n    handle_error(input, error_message);\n    return 0;\n  }\n  else {\n    return -1;\n  }\n}",
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002364",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": false,
            "current_name": "check_input_and_handle_error_00002364"
        },
        "FUN_00001ad4": {
            "renaming": {
                "FUN_00001ad4": "clear_bitmask_on_data_00001ad4",
                "DAT_00001b08": "data_pointer",
                "PTR_DAT_00001b0c": "flag_pointer"
            },
            "code": "void clear_bitmask_on_data_00001ad4(void) {\n  *DAT_00001b08 = *DAT_00001b08 & 0x3f;\n  do {\n  } while ((DAT_00001b08[6] & 0xc) != 0xc);\n  *PTR_DAT_00001b0c = 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ad4",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": false,
            "current_name": "clear_bitmask_on_data_00001ad4"
        },
        "FUN_00001274": {
            "renaming": {
                "FUN_00001274": "initialize_device_00001274",
                "FUN_0000258c": "setup_gpio_pins",
                "FUN_00001c84": "initialize_communication",
                "FUN_00002396": "initialize_interrupts",
                "DAT_00001298": "device_status_register"
            },
            "code": "void initialize_device_00001274(void) {\n  setup_gpio_pins();\n  *DAT_00001298 = *DAT_00001298 | 0x28;\n  initialize_communication();\n  initialize_interrupts();\n  return;\n}",
            "called": [
                "FUN_00001c84",
                "FUN_0000258c",
                "FUN_00002396"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001274",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": false,
            "current_name": "initialize_device_00001274"
        },
        "FUN_00002e6c": {
            "renaming": {
                "FUN_00002e6c": "check_and_execute_function_00002e6c",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "iVar1": "function_result",
                "FUN_00002e48": "call_initialize_function",
                "FUN_00002d94": "call_check_function",
                "FUN_00002b10": "call_execute_function"
            },
            "code": "void check_and_execute_function_00002e6c(int* parameter_1, int* parameter_2, int* parameter_3)\n{\n  bool function_result;\n  do {\n    call_initialize_function();\n    function_result = call_check_function(parameter_2, parameter_3);\n    if (function_result) {\n      call_execute_function(parameter_1, parameter_2);\n    }\n  } while(true);\n}",
            "called": [
                "FUN_00002e48",
                "FUN_00002d94",
                "FUN_00002b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e6c",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00002e6c"
        },
        "FUN_00003444": {
            "renaming": {
                "FUN_00003444": "get_time_successful_00003444",
                "iVar1": "error_code",
                "auStack_2c": "time_buffer",
                "FUN_00002624": "get_time_from_rtc",
                "FUN_00004db8": "log_error",
                "PTR_s_rtc__error_getting_time_00003474": "PTR_s_rtc__error_getting_time_00003474"
            },
            "code": "bool get_time_successful_00003444(void)\n{\n  int error_code;\n  char time_buffer[36];\n  error_code = get_time_from_rtc(time_buffer);\n  if (error_code != 0) {\n    log_error(PTR_s_rtc__error_getting_time_00003474);\n  }\n  else {\n    process_time(time_buffer);\n  }\n  return error_code == 0;\n}",
            "called": [
                "FUN_00002624",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003444",
            "calling": [
                "FUN_00003524"
            ],
            "imported": false,
            "current_name": "get_time_successful_00003444"
        },
        "FUN_00003688": {
            "renaming": {
                "FUN_00003688": "execute_function_00003688",
                "FUN_00003658": "call_another_function"
            },
            "code": "void execute_function_00003688(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_00003658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003688",
            "calling": [
                "FUN_00002e9c"
            ],
            "imported": false,
            "current_name": "execute_function_00003688"
        },
        "FUN_00001392": {
            "renaming": {
                "FUN_00001392": "set_flag_to_1_00001392",
                "param_1": "input_value",
                "param_2": "input_char",
                "puVar1": "flag_ptr",
                "*puVar1": "*flag_ptr",
                "FUN_00001360": "get_flag_pointer"
            },
            "code": "void set_flag_to_1_00001392(int input_value, char input_char) {\n  int *flag_ptr;\n  flag_ptr = (int *)get_flag_pointer(input_value, input_char);\n  *flag_ptr = 1;\n  return;\n}",
            "called": [
                "FUN_00001360"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001392",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": false,
            "current_name": "set_flag_to_1_00001392"
        },
        "FUN_00002910": {
            "renaming": {
                "FUN_00002910": "clear_flags_00002910",
                "DAT_00002944": "DATA_ADDRESS"
            },
            "code": "void clear_flags_00002910(void)\n{\n  int data_address = DAT_00002944;\n  uint* flags_address = (uint*)(data_address + 0x1c);\n  *flags_address &= 0xfffffffb;\n  *(undefined4 *)(data_address + 8) = 0;\n  *(undefined4 *)PTR_DAT_00002944 = 0;\n  *(undefined4 *)(PTR_DAT_00002944 + 4) = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002910",
            "calling": [
                "FUN_000026c0"
            ],
            "imported": false,
            "current_name": "clear_flags_00002910"
        },
        "FUN_00004418": {
            "renaming": {
                "FUN_00004418": "get_next_byte_00004418",
                "data_ptr_ptr": "data_ptr_ptr",
                "free_data_ptr": "free_data_ptr",
                "data_ptr_const1": "data_ptr_const1",
                "data_ptr_const2": "data_ptr_const2",
                "data_ptr_const3": "data_ptr_const3",
                "do_nothing1": "do_nothing1",
                "do_nothing2": "do_nothing2",
                "byte_pp": "byte_pp",
                "byte_p": "byte_p",
                "data_ptr": "data_ptr",
                "next_byte": "next_byte"
            },
            "code": "uint get_next_byte_00004418(void)\n{\n  uint next_byte;\n  byte **byte_pp;\n  byte *byte_p;\n  int data_ptr;\n  \n  data_ptr = *data_ptr_ptr;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    free_data_ptr(data_ptr);\n  }\n  byte_pp = *(byte ***)(data_ptr + 4);\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    free_data_ptr(data_ptr);\n  }\n  if (byte_pp == (byte **)data_ptr_const1) {\n    byte_pp = *(byte ***)(data_ptr + 4);\n  }\n  else if (byte_pp == (byte **)data_ptr_const2) {\n    byte_pp = *(byte ***)(data_ptr + 8);\n  }\n  else if (byte_pp == (byte **)data_ptr_const3) {\n    byte_pp = *(byte ***)(data_ptr + 0xc);\n  }\n  if ((-1 < (int)byte_pp[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pp + 3) << 0x16))) {\n    do_nothing1(byte_pp[0x16]);\n  }\n  byte_p = byte_pp[1];\n  byte_pp[1] = byte_p + -1;\n  if ((int)(byte_p + -1) < 0) {\n    next_byte = read_byte(data_ptr, byte_pp);\n  }\n  else {\n    byte_p = *byte_pp;\n    *byte_pp = byte_p + 1;\n    next_byte = (uint)*byte_p;\n  }\n  if ((-1 < (int)byte_pp[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pp + 3) << 0x16))) {\n    do_nothing2(byte_pp[0x16]);\n  }\n  return next_byte;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_000042a4",
                "FUN_00005e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004418",
            "calling": [
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "get_next_byte_00004418"
        },
        "FUN_0000258c": {
            "renaming": {
                "FUN_0000258c": "initialize_device_0000258c",
                "DAT_000025ec": "device_data",
                "DAT_000025f0": "DEVICE_ID",
                "local_c": "counter",
                "FUN_00002538": "enable_device"
            },
            "code": "void initialize_device_0000258c(void)\n{\n  uint8_t counter;\n  *(uint32_t *)(DAT_000025ec + 8) = DAT_000025f0;\n  enable_device(0xfffffffe,1);\n  enable_device(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter++) {\n    enable_device((int)(char)counter,1);\n  }\n  *(uint32_t *)(DAT_000025ec + 0x10) |= 0x10;\n  *(uint32_t *)(DAT_000025ec + 0x14) |= 0x200;\n  return;\n}",
            "called": [
                "FUN_00002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000258c",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_device_0000258c"
        },
        "FUN_00002a00": {
            "renaming": {
                "FUN_00002a00": "call_function_with_param_00002a00",
                "param_1": "param",
                "FUN_00004cb4": "function_with_param"
            },
            "code": "void call_function_with_param_00002a00(void* param) {\n  function_with_param(param);\n  return;\n}",
            "called": [
                "FUN_00004cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a00",
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00002a00"
        },
        "FUN_000043a0": {
            "renaming": {
                "FUN_000043a0": "search_for_value_000043a0",
                "param_1": "start_address",
                "param_2": "callback_function",
                "piVar2": "current_address_pointer",
                "uVar4": "found_values",
                "iVar5": "count",
                "iVar3": "current_data_address",
                "uVar1": "result"
            },
            "code": "uint search_for_value_000043a0(int start_address, code *callback_function)\n{\n  uint found_values = 0;\n  int *current_address_pointer = (int *)(start_address + 0x48);\n  do {\n    int count = current_address_pointer[1];\n    int current_data_address = current_address_pointer[2];\n    while (count-- > 0) {\n      if ((*(ushort *)(current_data_address + 0xc) > 1) && (*(short *)(current_data_address + 0xe) != -1)) {\n        uint result = (*callback_function)(current_data_address);\n        found_values |= result;\n      }\n      current_data_address += 0x68;\n    }\n    current_address_pointer = (int *)*current_address_pointer;\n  } while (current_address_pointer != (int *)0x0);\n  return found_values;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000043a0",
            "calling": [
                "FUN_00006768"
            ],
            "imported": false,
            "current_name": "search_for_value_000043a0"
        },
        "FUN_0000211c": {
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "process_name",
                "local_3c": "stack_size",
                "local_38": "heap_size",
                "local_34": "priority",
                "local_30": "index",
                "local_2c": "process_info",
                "local_28": "start_address",
                "local_24": "end_address",
                "local_20": "code_size",
                "local_1a": "i",
                "local_18": "data_size",
                "local_14": "bss_size",
                "PTR_s__pid_____21s____9sQ___pri___stac_00002250": "process_info_format",
                "PTR_DAT_0000224c": "state",
                "PTR_s_state_00002248": "state_format",
                "PTR_s______isr_stack______________6i___00002254": "stack_info_format",
                "DAT_0000225c": "stack_size_table",
                "PTR_s___3hi_____20s_____8s___1s____3i___00002260": "process_detail_format",
                "PTR_s___5s___21s__13s_6s__6i___5i__0000226c": "memory_info_format",
                "PTR_DAT_00002264": "memory_info_heap",
                "PTR_DAT_00002268": "memory_info_bss"
            },
            "code": "void print_process_info_0000211c(void)\n{\n  int total_stack_size = 0;\n  int total_heap_size = 0;\n  char process_name[16] = \"\";\n  uint8_t priority = 0;\n  void *stack_pointer = NULL;\n  void *heap_pointer = NULL;\n  void *start_address = NULL;\n  int end_address = 0;\n  int code_size = 0;\n  int data_size = 0;\n  int bss_size = 0;\n  \n  strcpy(process_name, \"pid\");\n  strcat(process_name, \" %d\");\n  strcat(process_name, \" %s\");\n  strcat(process_name, \" %s\");\n  printf(process_name, getpid(), PTR_DAT_0000224c, \"READY\");\n  \n  total_stack_size = get_total_stack_size();\n  stack_pointer = get_stack_pointer();\n  heap_pointer = get_heap_pointer();\n  start_address = get_start_address();\n  end_address = get_end_address();\n  code_size = get_code_size();\n  data_size = get_data_size();\n  bss_size = get_bss_size();\n  printf(\"%d %d %d %p %p %p %d %d %d %d %d\\n\", total_stack_size, total_heap_size, priority, stack_pointer, heap_pointer, start_address, end_address, code_size, data_size, bss_size);\n}\n",
            "called": [
                "FUN_0000091c",
                "FUN_00000900",
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000211c",
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "imported": false,
            "current_name": "print_process_info_0000211c"
        },
        "FUN_0000562c": {
            "renaming": {
                "FUN_0000562c": "find_parameter_index_0000562c",
                "param_1": "param",
                "param_2": "input_string",
                "param_3": "output_index",
                "cVar1": "current_char",
                "ppiVar2": "ptr_to_ptr_to_int",
                "piVar3": "ptr_to_int",
                "iVar4": "current_int_value",
                "pcVar5": "string_ptr",
                "piVar6": "current_ptr_to_int",
                "iVar7": "string_index"
            },
            "code": "int find_parameter_index_0000562c(undefined4 param, char *input_string, int *output_index) {\n  char current_char;\n  int **ptr_to_ptr_to_int;\n  int *ptr_to_int;\n  int string_index;\n  char *string_ptr;\n  int *current_ptr_to_int;\n  int current_int_value;\n  \n  initialize();\n  ptr_to_ptr_to_int = DAT_0000569c;\n  string_ptr = input_string;\n  if (**DAT_0000569c != NULL) {\n    do {\n      current_char = *string_ptr;\n      if (current_char == '\\0') {\n        string_index = (int)string_ptr - (int)input_string;\n        ptr_to_int = **DAT_0000569c;\n        while (true) {\n          current_ptr_to_int = ptr_to_int;\n          if (*current_ptr_to_int == 0) break;\n          current_int_value = FUN_00004e66(*current_ptr_to_int, input_string, string_index);\n          ptr_to_int = current_ptr_to_int + 1;\n          if ((current_int_value == 0) && (current_int_value = *current_ptr_to_int, *(char *)(current_int_value + string_index) == '=')) {\n            *output_index = (int)current_ptr_to_int - (int)*ptr_to_ptr_to_int >> 2;\n            finalize(param);\n            return current_int_value + string_index + 1;\n          }\n        }\n        break;\n      }\n      string_ptr++;\n    } while (current_char != '=');\n  }\n  finalize(param);\n  return 0;\n}",
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000562c",
            "calling": [
                "FUN_000056a0"
            ],
            "imported": false,
            "current_name": "find_parameter_index_0000562c"
        },
        "FUN_000020b8": {
            "renaming": {
                "FUN_000020b8": "initialize_data_000020b8",
                "DAT_000020c8": "data_ptr",
                "FUN_00002028": "set_data_to_zero"
            },
            "code": "void initialize_data_000020b8(void)\n{\n    set_data_to_zero(DAT_000020c8, 0);\n    return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020b8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_000020b8"
        },
        "FUN_00002a18": {
            "renaming": {
                "FUN_00002a18": "find_value_in_array_00002a18",
                "param_1": "array",
                "param_2": "value_to_find",
                "local_18": "arrays",
                "local_10": "i",
                "local_c": "current_array_element",
                "iVar1": "index"
            },
            "code": "int find_value_in_array_00002a18(int *array, int value_to_find)\n{\n  int index;\n  int *current_array_element;\n  int *arrays[] = {array, PTR_PTR_s_reboot_00002a84};\n  for (int i = 0; i < 2; i++) {\n    current_array_element = arrays[i];\n    if (current_array_element != NULL) {\n      for (; *current_array_element != 0; current_array_element += 3) {\n        index = FUN_00004e52(*current_array_element, value_to_find);\n        if (index == 0) {\n          return current_array_element[2];\n        }\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a18",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "find_value_in_array_00002a18"
        },
        "FUN_000054a8": {
            "renaming": {
                "FUN_000054a8": "calculateValue_000054a8",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "value",
                "uVar4": "temp3",
                "iVar5": "g_iVar5"
            },
            "code": "uint32_t calculateValue_000054a8(uint32_t *result, uint32_t *input)\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint32_t value = 0;\n    uint32_t iVar3 = *g_iVar5;\n    if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n        releaseMemory(iVar3);\n    }\n    if (input == (uint32_t *)g_Ptr1) {\n        input = *(uint32_t **)(iVar3 + 4);\n    }\n    else if (input == (uint32_t *)g_Ptr2) {\n        input = *(uint32_t **)(iVar3 + 8);\n    }\n    else if (input == (uint32_t *)g_Ptr3) {\n        input = *(uint32_t **)(iVar3 + 0xc);\n    }\n    uint32_t uVar4 = (uint32_t)*(uint16_t *)(input + 3);\n    uVar2 = *(uint16_t *)(input + 3);\n    if (-1 < (int32_t)(uVar4 << 0x1c)) {\n        if (-1 < (int32_t)(uVar4 << 0x1b)) {\n            *result = 9;\n            goto LAB_000054d8;\n        }\n        if ((uint32_t *)(input[0xd]) != (uint32_t *)0x0) {\n            if ((uint32_t *)(input[0xd]) != input + 0x11) {\n                setInvalidValue(result);\n            }\n            input[0xd] = 0;\n        }\n        *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) & 0xffdb;\n        input[1] = 0;\n        *input = input[4];\n    }\n    *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 8;\n    if ((input[4] == 0) && ((*(uint16_t *)(input + 3) & 0x280) != 0x200)) {\n        calculateValue_000054a8(result, input);\n    }\n    uVar1 = *(uint16_t *)(input + 3);\n    uVar4 = (uint32_t)uVar1;\n    uVar2 = *(uint16_t *)(input + 3);\n    value = uVar4 & 1;\n    if ((uVar1 & 1) == 0) {\n        if (-1 < (int32_t)(uVar4 << 0x1e)) {\n            value = input[5];\n        }\n        input[2] = value;\n    }\n    else {\n        input[2] = 0;\n        input[6] = -input[5];\n    }\n    if (input[4] != 0) {\n        return 0;\n    }\n    if ((uVar1 & 0x80) == 0) {\n        return uVar4 & 0x80;\n    }\nLAB_000054d8:\n    *(uint16_t *)(input + 3) = uVar2 | 0x40;\n    return 0xffffffff;\n}",
            "called": [
                "FUN_00004b34",
                "FUN_000042a4",
                "FUN_00005700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000054a8",
            "calling": [
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_00005404"
            ],
            "imported": false,
            "current_name": "calculateValue_000054a8"
        },
        "FUN_000007dc": {
            "renaming": {
                "FUN_000007dc": "allocate_memory_block_000007dc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "local_14": "i",
                "local_10": "i",
                "local_c": "block",
                "uVar1": "aligned_size"
            },
            "code": "int* allocate_memory_block_000007dc(undefined4 data, int size, int param_3, int param_4) {\n  uint aligned_size = (param_4 + param_3) & 0xfffffffc;\n  int* block = (int*)(aligned_size - 4);\n  *block = 0x77777777;\n  if (((uint)block & 7) != 0) {\n    block = (int*)(aligned_size - 8);\n    *block = 0x88888888;\n  }\n  block[-1] = 0x1000000;\n  block[-2] = data;\n  block[-3] = DAT_000008b4;\n  block = block - 4;\n  *block = 0;\n  for (int i = 3; i > 0; i--) {\n    block--;\n    *block = i;\n  }\n  block--;\n  *block = size;\n  for (int i = 0xb; i > 3; i--) {\n    block--;\n    *block = i;\n  }\n  block[-1] = -3;\n  return block - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000007dc",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_000007dc"
        },
        "FUN_00001710": {
            "renaming": {
                "FUN_00001710": "clear_buffer_00001710",
                "param_1": "buffer_start",
                "param_2": "buffer_size",
                "puVar1": "buffer_end"
            },
            "code": "void clear_buffer_00001710(void* buffer_start, size_t buffer_size)\n{\n  unsigned char* buffer_end = (unsigned char*)buffer_start + buffer_size;\n  while (buffer_start < buffer_end)\n    {\n      *(unsigned char*)buffer_start = 0;\n      buffer_start++;\n    }\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001710",
            "calling": [
                "FUN_0000182c",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_00001778",
                "FUN_00001960"
            ],
            "imported": false,
            "current_name": "clear_buffer_00001710"
        },
        "FUN_000045ec": {
            "renaming": {
                "FUN_000045ec": "do_nothing_000045ec"
            },
            "code": "\nvoid do_nothing_000045ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ec",
            "calling": [
                "FUN_00004280",
                "FUN_00005ff8",
                "FUN_00004158",
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000057f8",
                "FUN_0000579c",
                "FUN_000042a4",
                "FUN_00004cb4"
            ],
            "imported": false,
            "current_name": "do_nothing_000045ec"
        },
        "FUN_00001034": {
            "renaming": {
                "FUN_00001034": "findAndUpdate_00001034",
                "param_1": "list",
                "param_2": "index",
                "local_1c": "currentNode"
            },
            "code": "void findAndUpdate_00001034(int **list, int index) {\n  int **currentNode;\n  int maxIndex = *(byte *)(index + 4);\n  if (8 < maxIndex) {\n    assert(0 && \"Index out of bounds\");\n  }\n  for (currentNode = list; (*currentNode != (int *)0x0 && (*(byte *)((int)*currentNode + -3) <= *(byte *)(index + 5))); currentNode = (int **)*currentNode) {\n  }\n  *(int **)(index + 8) = *currentNode;\n  *currentNode = (int *)(int **)(index + 8);\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001034",
            "calling": [
                "FUN_00002434"
            ],
            "imported": false,
            "current_name": "findAndUpdate_00001034"
        },
        "FUN_00006964": {
            "renaming": {
                "FUN_00006964": "calculate_sum_of_array_00006964",
                "param_1": "array",
                "param_2": "length",
                "iVar1": "sum"
            },
            "code": "int calculate_sum_of_array_00006964(int* array, int length)\n{\n  int sum = array[length-1] - 4;\n  if (array[length-1] < 0) {\n    sum += array[sum];\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006964",
            "calling": [
                "FUN_000060cc"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_array_00006964"
        },
        "FUN_0000182c": {
            "renaming": {
                "FUN_0000182c": "set_bit_in_byte_0000182c",
                "DAT_000018b4": "data_ptr",
                "DAT_000018b8": "data_ptr_2",
                "*DAT_000018b4": "byte_val",
                "*DAT_000018b8": "byte_val_2",
                "FUN_000016ec": "clear_bit",
                "FUN_00001710": "set_bit"
            },
            "code": "void set_bit_in_byte_0000182c(void) {\n  byte* byte_ptr = (byte*)(DAT_000018b4 + 8);\n  *byte_ptr &= 0xd0;\n  clear_bit(DAT_000018b8, 0);\n  set_bit(DAT_000018b4, 1);\n  set_bit(DAT_000018b4, 0);\n  return;\n}",
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000182c",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": false,
            "current_name": "set_bit_in_byte_0000182c"
        },
        "FUN_00004db8": {
            "renaming": {
                "FUN_00004db8": "process_input_00004db8",
                "param_1": "input",
                "cVar1": "current_char",
                "iVar2": "result",
                "iVar3": "data_ptr",
                "pcVar4": "current_data_ptr",
                "ppcVar5": "current_data",
                "uVar6": "result"
            },
            "code": "int process_input_00004db8(int input) {\n  char current_char;\n  int data_ptr = *data_ptr_global;\n  if (data_ptr != 0 && *(int *)(data_ptr + 0x18) == 0) {\n    free_data_ptr(data_ptr);\n  }\n  char **current_data = *(char ***)(data_ptr + 8);\n  if (*(int *)(data_ptr + 0x18) == 0) {\n    free_data_ptr(data_ptr);\n  }\n  if (current_data == (char **)current_data_start_ptr) {\n    current_data = *(char ***)(data_ptr + 4);\n  }\n  else if (current_data == (char **)current_data_middle_ptr) {\n    current_data = *(char ***)(data_ptr + 8);\n  }\n  else if (current_data == (char **)current_data_end_ptr) {\n    current_data = *(char ***)(data_ptr + 0xc);\n  }\n  if ((-1 < (int)current_data[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(current_data + 3) << 0x16))) {\n    do_nothing_000045e8(current_data[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(current_data + 3) << 0x1c) < 0) && (current_data[4] != (char *)0x0)) || (iVar2 = process_data(data_ptr,current_data), iVar2 == 0)) {\n    char *current_output_ptr = (char *)(input - 1);\n    do {\n      while (true) {\n        current_output_ptr = current_output_ptr + 1;\n        current_char = *current_output_ptr;\n        char *current_data_ptr = current_data[2] + -1;\n        current_data[2] = current_data_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)current_data_ptr) {\n            current_output_ptr = *current_data;\n            int result = 10;\n            *current_data = current_output_ptr + 1;\n            *current_output_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          int result = process_data(data_ptr,10,current_data);\n          if (result != -1) {\n            uVar6 = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)current_data_ptr < 0) && (((int)current_data_ptr < (int)current_data[6] || (current_char == '\\n')))) {\n          break;\n        }\n        char *current_data_ptr_2 = *current_data;\n        *current_data = current_data_ptr_2 + 1;\n        *current_data_ptr_2 = current_char;\n      }\n      iVar2 = process_data(data_ptr,current_char,current_data);\n    } while (iVar2 != -1);\n  }\nLAB_00004d60:\n  int result = -1;\nLAB_00004d64:\n  if ((-1 < (int)current_data[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(current_data + 3) << 0x16))) {\n    do_nothing_000045ec(current_data[0x16]);\n  }\n  return result;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00005404",
                "FUN_000045e8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004db8",
            "calling": [
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_000023a4",
                "FUN_00003444",
                "FUN_00003694",
                "FUN_000031e0",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000033c0",
                "FUN_00002a88",
                "FUN_00002f30",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002b10"
            ],
            "imported": false,
            "current_name": "process_input_00004db8"
        },
        "FUN_000022f0": {
            "renaming": {
                "FUN_000022f0": "increment_value_at_offset_000022f0",
                "param_1": "base_address",
                "uVar1": "offset",
                "PTR_": "base_",
                "DAT_": "data_"
            },
            "code": "undefined increment_value_at_offset_000022f0(int *PTR_address)\n{\n  uint offset;\n  uint mask = PTR_address[1] - 1U;\n  offset = PTR_address[2];\n  PTR_address[2] = offset + 1;\n  return *(undefined *)((offset & mask) + *PTR_address);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022f0",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": false,
            "current_name": "increment_value_at_offset_000022f0"
        },
        "FUN_00001c84": {
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "FUN_00000cd0": "get_system_time",
                "FUN_00001bb8": "initialize_memory",
                "DAT_00001ce8": "system_configuration",
                "DAT_00001cec": "system_flags",
                "FUN_0000182c": "enable_interrupts",
                "FUN_000017dc": "initialize_peripherals",
                "FUN_00001b10": "initialize_communication",
                "FUN_00000d0c": "finalize_system_initialization",
                "uVar1": "system_time"
            },
            "code": "void initialize_system_00001c84(void)\n{\n    undefined4 system_time = get_system_time();\n    initialize_memory();\n    *(undefined4 *)(DAT_00001ce8 + 0x1044) = 0x220000;\n    DAT_00001cec[0xc] = 0;\n    *DAT_00001cec = *DAT_00001cec & 199 | 0x38;\n    DAT_00001cec[4] = 0x13;\n    DAT_00001cec[5] = 0;\n    enable_interrupts();\n    initialize_peripherals();\n    initialize_communication(7);\n    finalize_system_initialization(system_time);\n}\n",
            "called": [
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001b10",
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00001bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001c84",
            "calling": [
                "FUN_00001274"
            ],
            "imported": false,
            "current_name": "initialize_system_00001c84"
        },
        "FUN_000068f0": {
            "renaming": {
                "FUN_000068f0": "allocate_memory_000068f0",
                "param_1": "size",
                "param_2": "memory_block",
                "iVar1": "new_memory_block",
                "iVar2": "current_size"
            },
            "code": "int allocate_memory_000068f0(int size, int* memory_block)\n{\n  int current_size = memory_block[14];\n  if ((int*)memory_block[13] == memory_block + 17) {\n    int new_memory_block = allocate_memory_000068f0_block(size);\n    if (new_memory_block != 0) {\n      memory_block[14] = size;\n      memory_block[13] = new_memory_block;\n      *(char*)(new_memory_block + 1023) = *(char*)((int)memory_block + 70);\n      *(char*)(new_memory_block + 1022) = *(char*)((int)memory_block + 69);\n      *(int*)(new_memory_block + 1021) = *(int*)(memory_block + 17);\n      *memory_block = new_memory_block + 1021;\n      return 0;\n    }\n  }\n  else {\n    int new_size = current_size << 1;\n    int new_memory_block = allocate_memory_000068f0(current_size, (int*)memory_block[13]);\n    if (new_memory_block != 0) {\n      copy_memory_block(new_memory_block + current_size, new_memory_block, current_size);\n      memory_block[13] = new_memory_block;\n      memory_block[14] = new_size;\n      *memory_block = new_memory_block + current_size;\n      return 0;\n    }\n  }\n  return -1;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_000060b0",
                "FUN_000060cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000068f0",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_000068f0"
        }
    },
    "used_tokens": 185711,
    "layers": [
        [
            "FUN_000026c0",
            "FUN_00004bd0",
            "FUN_00000794",
            "FUN_000064bc",
            "FUN_00002970",
            "FUN_00000dc0",
            "FUN_00000d0c",
            "FUN_00003d94",
            "FUN_0000579c",
            "FUN_000015d0",
            "FUN_00005e68",
            "FUN_00000dcc",
            "FUN_0000285c",
            "FUN_00000e58",
            "FUN_00001778",
            "FUN_000026d8",
            "FUN_00000566",
            "FUN_00001d08",
            "FUN_000031fc",
            "FUN_000016ec",
            "FUN_00005584",
            "FUN_00004248",
            "FUN_00001da2",
            "FUN_00001ec4",
            "FUN_00002744",
            "FUN_00002624",
            "FUN_00001e0c",
            "FUN_000041d0",
            "FUN_0000459c",
            "FUN_000014c4",
            "FUN_00004b34",
            "FUN_000004f2",
            "FUN_00004e66",
            "FUN_00005ecc",
            "FUN_0000129c",
            "FUN_00001628",
            "FUN_00001748",
            "FUN_0000294c",
            "FUN_00005790",
            "FUN_00000534",
            "FUN_000017dc",
            "FUN_00000410",
            "FUN_000005ca",
            "FUN_00005ff8",
            "FUN_00002714",
            "FUN_000020e0",
            "FUN_00005fec",
            "FUN_00004f84",
            "FUN_000028f0",
            "FUN_00004f98",
            "FUN_00004dee",
            "FUN_00000fec",
            "FUN_00000428",
            "FUN_000039e8",
            "FUN_00000e38",
            "FUN_00002294",
            "FUN_00003e9e",
            "FUN_00003378",
            "FUN_00006768",
            "FUN_00000db0",
            "FUN_00002600",
            "FUN_00003810",
            "FUN_00000ed8",
            "FUN_000031e0",
            "FUN_000020f4",
            "FUN_0000687c",
            "FUN_00005edc",
            "FUN_00001eea",
            "FUN_000023a4",
            "FUN_0000240c",
            "FUN_00004280",
            "FUN_00001448",
            "FUN_00001688",
            "FUN_00004042",
            "FUN_00000cf0",
            "FUN_00000f8c",
            "FUN_00002894",
            "FUN_00004158",
            "FUN_00002654",
            "FUN_00002538",
            "FUN_00004c84",
            "FUN_0000305c",
            "FUN_000012b4",
            "FUN_0000058e",
            "FUN_000025f4",
            "FUN_00001ddc",
            "FUN_00002ecc",
            "FUN_00000d76",
            "FUN_000057a8",
            "FUN_00001696",
            "FUN_000008b8",
            "FUN_000024bc",
            "FUN_00000490",
            "FUN_0000091c",
            "FUN_00001f80",
            "FUN_00000e64",
            "FUN_000026e4",
            "FUN_00000d44",
            "FUN_00000698",
            "FUN_00000cd0",
            "FUN_00000cc0",
            "FUN_00002994",
            "FUN_00000d2a",
            "FUN_00001ff6",
            "FUN_000013b8",
            "FUN_00002a88",
            "FUN_00002f30",
            "FUN_00001e44",
            "FUN_00001318",
            "FUN_00000900",
            "FUN_00004274",
            "FUN_00002fe0",
            "FUN_00001dc0",
            "FUN_00000df4",
            "FUN_00002eb4",
            "FUN_0000328c",
            "FUN_000041f4",
            "FUN_0000316c",
            "FUN_000026f0",
            "FUN_000057d2",
            "FUN_000056b8",
            "FUN_00001a18",
            "FUN_00000d9c",
            "FUN_00003ff4",
            "FUN_00001d5e",
            "FUN_0000191c",
            "FUN_000050f4",
            "FUN_00005a58",
            "FUN_000056b0",
            "FUN_00003d24",
            "FUN_000060cc",
            "FUN_00003dc4",
            "FUN_000022be",
            "FUN_00002108",
            "FUN_00001d80",
            "FUN_000033c0",
            "FUN_00002b10",
            "FUN_00001b10",
            "FUN_000023c8",
            "FUN_00002e48",
            "FUN_00000930",
            "FUN_00001348",
            "FUN_00001d3a",
            "FUN_00002434",
            "FUN_00005700",
            "FUN_00002798",
            "FUN_00003524",
            "FUN_00001bb8",
            "FUN_0000428c",
            "FUN_0000404c",
            "FUN_00002f74",
            "FUN_000010a0",
            "FUN_000012e2",
            "FUN_000056a0",
            "FUN_0000231c",
            "FUN_00002690",
            "FUN_00006010",
            "FUN_00001cf0",
            "FUN_00003ec4",
            "FUN_00001360",
            "FUN_00004622",
            "FUN_0000093c",
            "FUN_00003658",
            "FUN_000019c0",
            "FUN_000060b0",
            "FUN_000023d0",
            "FUN_00000a30",
            "FUN_000034c0",
            "FUN_000050e8",
            "FUN_000042a4",
            "FUN_00000514",
            "FUN_00002e9c",
            "FUN_00001960",
            "FUN_00001a3c",
            "FUN_000045ee",
            "FUN_00005404",
            "FUN_00006974",
            "FUN_00004314",
            "FUN_00004dc8",
            "FUN_00005fd8",
            "FUN_00005e10",
            "FUN_000033f4",
            "FUN_0000443c",
            "FUN_000027b0",
            "FUN_00005ebc",
            "FUN_00006192",
            "FUN_00001734",
            "FUN_00000e14",
            "FUN_0000281c",
            "FUN_00002270",
            "FUN_00005780",
            "FUN_000020cc",
            "FUN_00002396",
            "FUN_00004cb4",
            "FUN_00003478",
            "FUN_00002028",
            "FUN_000016c8",
            "FUN_00001a60",
            "FUN_0000099c",
            "FUN_00002d94",
            "FUN_00003918",
            "FUN_00003d64",
            "FUN_00004e52",
            "FUN_000010d4",
            "FUN_00000738",
            "FUN_00003e58",
            "FUN_00004e26",
            "FUN_000018bc",
            "FUN_00000f04",
            "FUN_00000610",
            "FUN_00003694",
            "FUN_00002364",
            "FUN_00001ad4",
            "FUN_00001274",
            "FUN_00002e6c",
            "FUN_00003444",
            "FUN_00003688",
            "FUN_00001392",
            "FUN_00002910",
            "FUN_00004418",
            "FUN_0000258c",
            "FUN_00002a00",
            "FUN_000043a0",
            "FUN_0000211c",
            "FUN_0000562c",
            "FUN_000020b8",
            "FUN_00002a18",
            "FUN_000054a8",
            "FUN_000007dc",
            "FUN_00001710",
            "FUN_00001034",
            "FUN_00006964",
            "FUN_0000182c",
            "FUN_00004db8",
            "FUN_000022f0",
            "FUN_00001c84",
            "FUN_000068f0"
        ]
    ],
    "locked_functions": []
}