{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_kernel_data_00000410",
            "code": "\nvoid initialize_kernel_data_00000410(void)\n\n{\n  update_kernel_data_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_kernel_data_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword updateOffset_00000428(undefined4 *result,int inputOffset)\n\n{\n  undefined4 irqInterrupts;\n  dword newOffset;\n  \n  irqInterrupts = check_irq_interrupts_00000cd0();\n  newOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    newOffset = 0xffffffff;\n  }\n  enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n  return newOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "result",
                "param_2": "inputOffset",
                "uVar1": "irqInterrupts",
                "local_c": "newOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_decrement_00000490",
            "code": "\nundefined4 copyAndDecrement_00000490(undefined4 input1,undefined4 input2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  result = copy_and_decrement_wrapper_00000e14(data1,data2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_decrement_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_variable_000004f2",
            "code": "\nundefined4 initializeVariable_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_variable_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_integer_00000514",
            "code": "\nundefined4 initialize_integer_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_integer_00000514",
                "param_1": "output_value"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *output,int input)\n\n{\n  undefined4 isValid;\n  \n  *output = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_byte_order_00000566",
            "code": "\nint extractByteOrder_00000566(int inputValue)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)inputValue;\n  byte3 = (byte)((uint)inputValue >> 8);\n  byte4 = (byte)((uint)inputValue >> 0x10);\n  byte1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_byte_order_00000566",
                "param_1": "inputValue",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "linked_list_insert_0000058e",
            "code": "\nvoid linkedListInsert_0000058e(int *head,undefined4 *newNode)\n\n{\n  if (*head == 0) {\n    *newNode = newNode;\n  }\n  else {\n    *newNode = *(undefined4 *)*head;\n    *(undefined4 **)*head = newNode;\n  }\n  *head = (int)newNode;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "linked_list_insert_0000058e",
                "param_1": "head",
                "param_2": "newNode",
                "(int)param_2": "(int)newNode"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_data_from_pointer_000005ca",
            "code": "\nundefined4 * extractDataFromPointer_000005ca(int *inputPointer)\n\n{\n  undefined4 *dataPointer;\n  \n  if (*inputPointer == 0) {\n    dataPointer = (undefined4 *)0x0;\n  }\n  else {\n    dataPointer = *(undefined4 **)*inputPointer;\n    if (dataPointer == (undefined4 *)*inputPointer) {\n      *inputPointer = 0;\n    }\n    else {\n      *(undefined4 *)*inputPointer = *dataPointer;\n    }\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_data_from_pointer_000005ca",
                "param_1": "inputPointer",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "initialize_data_00000610",
            "code": "\nundefined4 initializeData_00000610(void)\n\n{\n  int dataStartAddress;\n  int extractedValue;\n  undefined4 returnValue;\n  \n  dataStartAddress = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  extractedValue = extract_byte_order_00000566(DAT_1fff0424);\n  extractedValue = **(int **)(&DAT_1fff03e4 + extractedValue * 4);\n  if (dataStartAddress == extractedValue + -8) {\n    returnValue = 0;\n  }\n  else {\n    if ((dataStartAddress != 0) && (*(char *)(dataStartAddress + 4) == '\\t')) {\n      *(undefined *)(dataStartAddress + 4) = 10;\n    }\n    *(undefined *)(extractedValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(extractedValue + -2);\n    returnValue = 1;\n    DAT_1fff03dc = extractedValue + -8;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000610": "initialize_data_00000610",
                "iVar1": "dataStartAddress",
                "iVar2": "extractedValue",
                "uVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataPointer,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataPointer + 4)) &&\n       (extract_data_from_pointer_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataPointer + 5));\n    }\n  }\n  else if (*(byte *)(dataPointer + 4) < 9) {\n    linked_list_insert_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(dataPointer + 5) * 4,dataPointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataPointer + 5);\n  }\n  *(char *)(dataPointer + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataPointer",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_exception_and_set_flag_00000738",
            "code": "\nvoid checkExceptionAndSetFlag_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      set_e000ed04_bit_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_exception_and_set_flag_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_00000794",
            "code": "\nint * initializeData_00000794(void)\n\n{\n  int error_status;\n  int index;\n  undefined4 *data_ptr;\n  uint adjusted_ptr;\n  int count_down;\n  int loop_counter;\n  int *stack_ptr;\n  \n  check_irq_interrupts_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_data_00000698(DAT_1fff03dc,0);\n  data_ptr = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  execute_software_interrupt_handler_00000930();\n  adjusted_ptr = (int)data_ptr + index & 0xfffffffc;\n  stack_ptr = (int *)(adjusted_ptr - 4);\n  *stack_ptr = 0x77777777;\n  if (((uint)stack_ptr & 7) != 0) {\n    stack_ptr = (int *)(adjusted_ptr - 8);\n    *stack_ptr = 0x88888888;\n  }\n  stack_ptr[-1] = 0x1000000;\n  stack_ptr[-2] = index << 0xd;\n  stack_ptr[-3] = 0x795;\n  stack_ptr = stack_ptr + -4;\n  *stack_ptr = 0;\n  for (loop_counter = 3; 0 < loop_counter; loop_counter = loop_counter + -1) {\n    stack_ptr = stack_ptr + -1;\n    *stack_ptr = loop_counter;\n  }\n  stack_ptr = stack_ptr + -1;\n  *stack_ptr = error_status;\n  for (count_down = 0xb; 3 < count_down; count_down = count_down + -1) {\n    stack_ptr = stack_ptr + -1;\n    *stack_ptr = count_down;\n  }\n  stack_ptr[-1] = -3;\n  return stack_ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "extraout_r1": "error_status",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "uVar3": "adjusted_ptr",
                "iStack_1c": "count_down",
                "iStack_18": "loop_counter",
                "piStack_14": "stack_ptr"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 dataPointer,int value,int size,int alignment)\n\n{\n  uint alignedSize;\n  int counter1;\n  int counter2;\n  int *memoryPointer;\n  \n  alignedSize = alignment + size & 0xfffffffc;\n  memoryPointer = (int *)(alignedSize - 4);\n  *memoryPointer = 0x77777777;\n  if (((uint)memoryPointer & 7) != 0) {\n    memoryPointer = (int *)(alignedSize - 8);\n    *memoryPointer = 0x88888888;\n  }\n  memoryPointer[-1] = 0x1000000;\n  memoryPointer[-2] = dataPointer;\n  memoryPointer[-3] = 0x795;\n  memoryPointer = memoryPointer + -4;\n  *memoryPointer = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = counter2;\n  }\n  memoryPointer = memoryPointer + -1;\n  *memoryPointer = value;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = counter1;\n  }\n  memoryPointer[-1] = -3;\n  return memoryPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "size",
                "param_4": "alignment",
                "uVar1": "alignedSize",
                "local_14": "counter1",
                "local_10": "counter2",
                "local_c": "memoryPointer"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_elf_relocations_000008b8",
            "code": "\nint countElfRelocations_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->r_offset == 0xe7fee7fe && (currentRelocation < endRelocationArray));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->r_info) {\n  }\n  return ((int)endRelocationArray - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_elf_relocations_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "endRelocationArray"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 getStackPointer_00000900(void)\n\n{\n  undefined4 stackPointer;\n  \n  stackPointer = getMainStackPointer();\n  return stackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "stackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_value_0000091c",
            "code": "\nuint32_t getMemoryValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_value_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "execute_software_interrupt_handler_00000930",
            "code": "\nvoid executeSoftwareInterruptHandler_00000930(void)\n\n{\n  checkIRQInterruptStatus();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "execute_software_interrupt_handler_00000930",
                "check_ir_qinterrupt_status_00000cf0": "checkIRQInterruptStatus",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_e000ed04_bit_0000093c",
            "code": "\n\n\nvoid set_e000ed04_bit_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_e000ed04_bit_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_system_00000e64();\n  initialize_and_execute_functions_0000459c();\n  initialize_memory_and_handlers_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_panic_stack_pointer_00000a30",
            "code": "\nundefined * get_panic_stack_pointer_00000a30(void)\n\n{\n  int input_param;\n  \n  handle_kernel_panic(4,\"NMI HANDLER\");\n  return &panic_stack + -*(int *)(input_param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_panic_stack_pointer_00000a30",
                "in_r3": "input_param",
                "handle_kernel_panic_00000f04": "handle_kernel_panic",
                "stack0xe000ffe0": "panic_stack"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "check_ir_qinterrupts_00000cc0",
            "code": "\nundefined4 checkIRQinterrupts_00000cc0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  handle_kernel_panic_00000f04(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "check_ir_qinterrupts_00000cc0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_00000cd0",
            "code": "\nundefined4 checkIRQInterrupts_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupt_status_00000cf0",
            "code": "\nundefined4 checkIRQinterruptStatus_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupt_status_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIrqInterruptsIfPrivileged_00000d0c(uint inputValue)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    setIrqInterruptsEnabled((inputValue & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "inputValue",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "setIrqInterruptsEnabled"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_offset_00000d76",
            "code": "\nvoid clearOffset_00000d76(undefined4 offsetAddress,undefined data)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00000d44(offsetAddress,data);\n  *offsetPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_offset_00000d76",
                "param_1": "offsetAddress",
                "param_2": "data",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_registers_00000d9c",
            "code": "\nvoid clearRegisters_00000d9c(void)\n\n{\n  clear_offset_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_registers_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_00000db0",
            "code": "\nvoid initialize_and_clear_00000db0(void)\n\n{\n  initialize_data_00000dcc();\n  clear_registers_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "check_interrupts_00000dc0",
            "code": "\nvoid check_interrupts_00000dc0(void)\n\n{\n  check_ir_interrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "check_interrupts_00000dc0",
                "check_ir_qinterrupts_00000cc0": "check_ir_interrupts"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "update_kernel_data_00000df4",
            "code": "\nvoid update_kernel_data_00000df4(void)\n\n{\n  update_kernel_data_00000df4_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "update_kernel_data_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_decrement_wrapper_00000e14",
            "code": "\nundefined4 copy_and_decrement_wrapper_00000e14(undefined4 source,undefined4 destination)\n\n{\n  undefined4 result;\n  \n  result = copy_and_decrement_loop_000012e2(0x1fff0204,source,destination);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_decrement_wrapper_00000e14",
                "param_1": "source",
                "param_2": "destination",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_data_00000e38",
            "code": "\nundefined4 copy_and_return_data_00000e38(undefined4 src,undefined4 dest)\n\n{\n  copy_data_000015d0(0,src,dest);\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_data_00000e38",
                "param_1": "src",
                "param_2": "dest"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infiniteLoop_00000e58(void)\n\n{\n  checkInterrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58",
                "check_irq_interrupts_00000cd0": "checkInterrupts"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initializeSystem_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initializeSystem_00000e64Configuration();\n  updateData(0x2056,0x80);\n  updateData(0x511a,0x80);\n  updateData(0x2055,0x80);\n  setBitAtIndex(0x2056);\n  setBitAtIndex(0x511a);\n  setBitAtIndex(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "initialize_and_configure_system_00001274": "initializeSystemConfiguration",
                "update_data_00001eea": "updateData",
                "set_bit_at_index_00001ff6": "setBitAtIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 linkRegister;\n  \n  process_sensor_data_00004c84(&DAT_00006f58,linkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicCode,undefined4 errorCode)\n\n{\n  undefined4 localVar_1;\n  code *jumptable;\n  undefined4 errorCodeCopy;\n  char panicCodeCopy;\n  \n  errorCodeCopy = errorCode;\n  panicCodeCopy = panicCode;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicCode == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_sensor_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",errorCodeCopy);\n    print_process_info_0000211c();\n    process_sensor_data_00004c84(&DAT_00006f78);\n    process_sensor_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_irq_interrupts_00000cd0();\n  FUNC_00000ef8();\n  jumptable = (code *)0xf4d;\n  infinite_loop_00000e58();\n  localVar_1 = (int)&localVar_1 + 1;\n  FUNC_00002400();\n  process_sensor_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicCode",
                "param_2": "errorCode",
                "uStack_18": "localVar_1",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "local_10": "errorCodeCopy",
                "local_9": "panicCodeCopy"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_and_handlers_00000f8c",
            "code": "\nvoid initialize_memory_and_handlers_00000f8c(void)\n\n{\n  uint uVar1;\n  undefined4 *puVar2;\n  uint loop_counter;\n  int shift_value;\n  int *shift_pointer;\n  undefined4 interrupt_handler;\n  undefined4 temp_var2;\n  undefined4 temp_var1;\n  dword irq_interrupt;\n  \n  check_irq_interrupts_00000cd0();\n  irq_interrupt = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  temp_var1 = 0;\n  temp_var2 = 0xf81;\n  initialize_memory_block_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  irq_interrupt = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  temp_var1 = 0;\n  temp_var2 = 0xf5d;\n  loop_counter = 0xc;\n  initialize_memory_block_000010d4(&DAT_1fff046c,0x600,7);\n  interrupt_handler = 0xfd3;\n  uVar1 = execute_interrupt_handler();\n  uVar1 = uVar1 >> 0x1e;\n  puVar2 = (undefined4 *)(loop_counter * 0x100);\n  shift_value = (loop_counter >> 0x1d) << 0x11;\n  shift_pointer = &shift_value;\n  if ((uVar1 & uVar1 - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *puVar2 = 0;\n  puVar2[1] = 0;\n  puVar2[2] = uVar1 - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_and_handlers_00000f8c",
                "local_10": "irq_interrupt",
                "local_14": "temp_var1",
                "local_18": "temp_var2",
                "uVar3": "loop_counter",
                "uStack_1c": "interrupt_handler",
                "execute_software_interrupt_handler_00000930": "execute_interrupt_handler",
                "iStack_24": "shift_value",
                "piStack_20": "shift_pointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "set_param_values_00000fec",
            "code": "\nvoid set_param_values_00000fec(undefined4 *output_array,uint input_value)\n\n{\n  if ((input_value & input_value - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = input_value - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "set_param_values_00000fec",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_1[1]": "output_array[1]",
                "param_1[2]": "output_array[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_update_pointer_00001034",
            "code": "\nvoid findAndUpdatePointer_00001034(int **pointerList,int parameter)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(parameter + 4)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(parameter + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(parameter + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(parameter + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_update_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "parameter",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_array_offset_000010a0",
            "code": "\nint calculateArrayOffset_000010a0(int *arrayPointer)\n\n{\n  int *currentPointer;\n  \n  for (currentPointer = arrayPointer; (int *)*currentPointer == currentPointer; currentPointer = currentPointer + 1) {\n  }\n  return (int)currentPointer - (int)arrayPointer;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_array_offset_000010a0",
                "param_1": "arrayPointer",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_block_000010d4",
            "code": "\nint initializeMemoryBlock_000010d4(uint startAddress,int size,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 irqInterrupts;\n  undefined4 initializedMemory;\n  int returnValue;\n  uint alignedSize;\n  undefined4 *memoryBlockPointer;\n  int startOffset;\n  uint alignedAddress;\n  uint loopVariable;\n  short currentValue;\n  short availableSlot;\n  \n  if (byteCount < 0x10) {\n    startOffset = size;\n    alignedAddress = startAddress;\n    if ((startAddress & 3) != 0) {\n      startOffset = 4 - (startAddress & 3);\n      alignedAddress = startOffset + startAddress;\n      startOffset = size - startOffset;\n    }\n    alignedSize = startOffset - 0x30U & 0xfffffffc;\n    memoryBlockPointer = (undefined4 *)(alignedSize + alignedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedAddress = alignedAddress;\n    }\n    else {\n      for (loopVariable = alignedAddress; loopVariable < alignedSize + alignedAddress; loopVariable = loopVariable + 4) {\n        *(uint *)loopVariable = loopVariable;\n      }\n    }\n    irqInterrupts = check_irq_interrupts_00000cd0();\n    availableSlot = 0;\n    for (currentValue = 1; currentValue < 0x21; currentValue = currentValue + 1) {\n      if (*(int *)(&DAT_1fff0358 + currentValue * 4) == 0) {\n        availableSlot = currentValue;\n        break;\n      }\n    }\n    if (availableSlot == 0) {\n      enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableSlot * 4) = memoryBlockPointer;\n      *(short *)((int)memoryBlockPointer + 6) = availableSlot;\n      initializedMemory = initialize_memory_000007dc(param5,param6,alignedAddress,alignedSize);\n      *memoryBlockPointer = initializedMemory;\n      memoryBlockPointer[9] = alignedAddress;\n      memoryBlockPointer[0xb] = size;\n      memoryBlockPointer[10] = param7;\n      *(byte *)((int)memoryBlockPointer + 5) = byteCount;\n      *(undefined *)(memoryBlockPointer + 1) = 0;\n      memoryBlockPointer[2] = 0;\n      memoryBlockPointer[3] = 0;\n      memoryBlockPointer[4] = 0;\n      set_param_values_00000fec(memoryBlockPointer + 5,0);\n      memoryBlockPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_data_00000698(memoryBlockPointer,10);\n        if ((flags & 4) == 0) {\n          enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n          check_exception_and_set_flag_00000738(byteCount);\n          return (int)availableSlot;\n        }\n      }\n      else {\n        update_data_00000698(memoryBlockPointer,1);\n      }\n      enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n      returnValue = (int)availableSlot;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "param_1": "startAddress",
                "param_2": "size",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "irqInterrupts",
                "uVar2": "initializedMemory",
                "iVar3": "returnValue",
                "uVar4": "alignedSize",
                "puVar5": "memoryBlockPointer",
                "local_30": "startOffset",
                "local_2c": "alignedAddress",
                "local_10": "loopVariable",
                "local_c": "currentValue",
                "local_a": "availableSlot"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_configure_system_00001274",
            "code": "\nvoid initialize_and_configure_system_00001274(void)\n\n{\n  initialize_memory();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system_part1();\n  initialize_system_part2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_configure_system_00001274",
                "initialize_memory_0000258c": "initialize_memory",
                "initialize_system_00001c84": "initialize_system_part1",
                "initialize_system_00002396": "initialize_system_part2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "enable_interrupts_0000129c",
            "code": "\nvoid enableInterrupts_0000129c(undefined4 data)\n\n{\n  updateDataAndEnableInterrupts(data,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "enable_interrupts_0000129c",
                "param_1": "data",
                "update_data_and_enable_interrupts_00002434": "updateDataAndEnableInterrupts"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "handle_interrupt_and_store_value_000012b4",
            "code": "\nundefined4 handle_interrupt_and_store_value_000012b4(int interrupt,undefined value)\n\n{\n  undefined4 result;\n  \n  result = check_sum_and_store_value_00002364(interrupt + 4,value);\n  handle_interrupt_000024bc(interrupt);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "handle_interrupt_and_store_value_000012b4",
                "param_1": "interrupt",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_decrement_loop_000012e2",
            "code": "\nint copy_and_decrement_loop_000012e2(int input_array,undefined4 param_2,undefined4 param_3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_decrement_0000231c(input_array + 4,param_2,param_3);\n    if (result != 0) break;\n    enable_interrupts_0000129c(input_array);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_decrement_loop_000012e2",
                "param_1": "input_array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_set_bit_00001348",
            "code": "\nvoid checkAndSetBit_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setBitAtAddress();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_set_bit_00001348",
                "set_e000ed04_bit_0000093c": "setBitAtAddress"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_result_00001360",
            "code": "\nint calculateResult_00001360(uint input_1,int input_2)\n\n{\n  return input_2 * 4 + (input_1 & 0xf0000000 | (input_1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_result_00001360",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_result_to1_00001392",
            "code": "\nvoid setResultTo1_00001392(undefined4 inputParam1,undefined inputParam2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_result_00001360(inputParam1,inputParam2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_result_to1_00001392",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_kernel_data_000013b8",
            "code": "\nundefined4 updateKernelData_000013b8(int index,undefined4 config,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  update_data_if_valid_00001448(index);\n  set_result_to1_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_configuration_000014c4(index,config);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_kernel_data_000013b8",
                "param_1": "index",
                "param_2": "config",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_data_if_valid_00001448",
            "code": "\nvoid update_data_if_valid_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_data(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_data(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_data_if_valid_00001448",
                "param_1": "index",
                "update_data_00001f80": "update_data"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint value)\n\n{\n  byte *config;\n  uint configValue;\n  uint shiftedValue;\n  \n  config = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  configValue = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  config[3] = config[3] & 0xf3;\n  config[2] = (&DAT_00007001)[index * 0x20];\n  shiftedValue = configValue / (value << 4);\n  *config = (byte)(shiftedValue >> 8) & 0x1f;\n  config[1] = (byte)shiftedValue;\n  config[10] = (byte)((configValue << 2) / value + 1 >> 1) & 0x1f;\n  config[0x10] = config[0x10] | 0x88;\n  if ((config[0x10] & 0x70) == 0) {\n    config[0x13] = 0;\n  }\n  else {\n    config[0x13] = (char)(2 << (config[0x10] >> 4 & 7)) - 1;\n  }\n  config[0x15] = 1;\n  config[0x11] = 0xc0;\n  config[3] = config[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "config",
                "uVar2": "configValue",
                "uVar3": "shiftedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint length)\n\n{\n  int dataAddress;\n  uint counter;\n  \n  dataAddress = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(dataAddress + 4));\n    *(undefined *)(dataAddress + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "dataAddress",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "process_param_00001628",
            "code": "\nvoid processParam_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  checkAndSetBit();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "process_param_00001628",
                "param_1": "index",
                "check_and_set_bit_00001348": "checkAndSetBit"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_process_00001688",
            "code": "\nvoid initializeProcess_00001688(void)\n\n{\n  processParameter(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_process_00001688",
                "process_param_00001628": "processParameter"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid setOffsetToValue_000016c8(undefined4 offsetPtr,undefined inputValue)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001696(offsetPtr,inputValue);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "offsetPtr",
                "param_2": "inputValue",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_one_000016ec",
            "code": "\nvoid setOffsetToOne_000016ec(undefined4 param,undefined offset)\n\n{\n  undefined *address;\n  \n  address = (undefined *)calculateOffset(param,offset);\n  *address = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_one_000016ec",
                "param_1": "param",
                "param_2": "offset",
                "puVar1": "address",
                "calculate_offset_00001696": "calculateOffset"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 address,undefined value)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(address,value);\n  *targetAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "targetAddress"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clearMemory_00001734(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte inputValue)\n\n{\n  DAT_40064003 = inputValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "initialize_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid initializeMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "initialize_memory_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "set_offset_and_value_000017dc",
            "code": "\n\n\nvoid setOffsetAndValue_000017dc(void)\n\n{\n  set_offset_to_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "set_offset_and_value_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  setOffsetToOne(&DAT_40064001,0);\n  clearMemory(&DAT_40064000,1);\n  clearMemory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c",
                "set_offset_to_one_000016ec": "setOffsetToOne",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  update_flags_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clear_memory_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_and_update_memory_0000191c",
            "code": "\nvoid initialize_and_update_memory_0000191c(void)\n\n{\n  initialize_memory_00001778();\n  update_flags_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_and_update_memory_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  update_flags_00001748(0xa0);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_and_clear_memory_000019c0",
            "code": "\nvoid initialize_and_clear_memory_000019c0(void)\n\n{\n  initialize_memory_00001778();\n  update_flags_00001748(0x40);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_and_clear_memory_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initialize_memory_00001a3c(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to_one_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "update_settings_00001ad4",
            "code": "\nvoid updateSettings_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "update_settings_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_and_update_system_00001b10",
            "code": "\nundefined4 initialize_and_update_system_00001b10(byte input_byte)\n\n{\n  undefined4 result;\n  \n  if (input_byte < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)input_byte + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_system_000018bc();\n        break;\n      case 1:\n        initialize_and_update_memory_0000191c();\n        break;\n      case 2:\n        initialize_system_00001960();\n        break;\n      case 3:\n        initialize_and_clear_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        update_settings_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (input_byte != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_and_update_system_00001b10",
                "param_1": "input_byte",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "clear_and_update_memory_00001bb8",
            "code": "\nvoid clearAndUpdateMemory_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearMemory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearMemory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  updateFlags(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "clear_and_update_memory_00001bb8",
                "clear_memory_00001710": "clearMemory",
                "update_flags_00001748": "updateFlags"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = checkInterruptStatus();\n  clearAndUpdateMemory();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeData();\n  setOffsetAndValue();\n  initializeAndUpdateSystem(7);\n  enableInterruptsIfPrivileged(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus",
                "check_irq_interrupts_00000cd0": "checkInterruptStatus",
                "clear_and_update_memory_00001bb8": "clearAndUpdateMemory",
                "initialize_data_0000182c": "initializeData",
                "set_offset_and_value_000017dc": "setOffsetAndValue",
                "initialize_and_update_system_00001b10": "initializeAndUpdateSystem",
                "enable_irq_interrupts_if_privileged_00000d0c": "enableInterruptsIfPrivileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_set_bit_00001cf0",
            "code": "\nvoid check_and_set_bit_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_some_bit();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_set_bit_00001cf0",
                "set_e000ed04_bit_0000093c": "set_some_bit"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint input,int multiplier)\n\n{\n  return multiplier * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_offset_to_value_one_00001d3a",
            "code": "\nvoid setOffsetToValueOne_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001d08(input1,input2);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_offset_to_value_one_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_bitwise_operations_00001d5e",
            "code": "\nuint applyBitwiseOperations_00001d5e(ushort input)\n\n{\n  return input & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_bitwise_operations_00001d5e",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_and_value_00001d80",
            "code": "\nuint applyMaskAndValue_00001d80(ushort data)\n\n{\n  return data & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_and_value_00001d80",
                "param_1": "data"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lowest6_bits_00001dc0",
            "code": "\nushort extractLowest6Bits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lowest6_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_offset_00001ddc",
            "code": "\nvoid setOffset_00001ddc(undefined2 inputValue)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_00001da2(inputValue);\n  set_offset_to_value_one_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_offset_00001ddc",
                "param_1": "inputValue",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extractBits_00001e0c(int valueOffset,uint bitOffset)\n\n{\n  return *(uint *)(bitwiseAndDAT_1fff0bd8 + (((int)bitOffset >> 3) + valueOffset * 4) * 4) >> ((bitOffset bitwiseAnd 7) << 2)\n         bitwiseAnd 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "valueOffset",
                "param_2": "bitOffset",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int index,uint position,int value)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)position >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) & ~(0xf << ((position & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) | value << ((position & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "index",
                "param_2": "position",
                "param_3": "value",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_bits_with_data_extraction_00001ec4",
            "code": "\nvoid updateBitsWithDataExtraction_00001ec4(undefined4 data1,undefined4 data2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_00001e0c(data1,data2);\n  update_bits_00001e44(data1,data2,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_bits_with_data_extraction_00001ec4",
                "param_1": "data1",
                "param_2": "data2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_00001eea",
            "code": "\nundefined4 updateData_00001eea(undefined2 param1,byte param2)\n\n{\n  uint bitPosition;\n  int maskAndValue;\n  int bitIndex;\n  \n  update_data_00001f80(param1,0);\n  if ((char)param2 < '\\0') {\n    bitPosition = extract_lowest6_bits_00001dc0(param1);\n    maskAndValue = apply_mask_and_value_00001d80(param1);\n    *(uint *)(maskAndValue + 0x14) = *(uint *)(maskAndValue + 0x14) | 1 << (bitPosition & 0xff);\n  }\n  else {\n    bitPosition = extract_lowest6_bits_00001dc0(param1);\n    maskAndValue = apply_mask_and_value_00001d80(param1);\n    *(uint *)(maskAndValue + 0x14) = *(uint *)(maskAndValue + 0x14) & ~(1 << (bitPosition & 0xff));\n  }\n  maskAndValue = apply_bitwise_operations_00001d5e(param1);\n  bitIndex = extract_lowest6_bits_00001dc0(param1);\n  *(uint *)(maskAndValue + bitIndex * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "bitPosition",
                "iVar2": "maskAndValue",
                "iVar3": "bitIndex"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid updateData_00001f80(undefined2 data,undefined4 newData)\n\n{\n  int bitwiseResult;\n  int lowest6Bits;\n  undefined4 extractedBits1;\n  undefined4 extractedBits2;\n  uint currentData;\n  \n  set_offset_00001ddc(data);\n  bitwiseResult = apply_bitwise_operations_00001d5e(data);\n  lowest6Bits = extract_lowest6_bits_00001dc0(data);\n  currentData = *(uint *)(bitwiseResult + lowest6Bits * 4);\n  bitwiseResult = apply_bitwise_operations_00001d5e(data);\n  lowest6Bits = extract_lowest6_bits_00001dc0(data);\n  *(undefined4 *)(bitwiseResult + lowest6Bits * 4) = newData;\n  if ((currentData & 0xf0000) != 0) {\n    extractedBits1 = extract_bits_00001da2(data);\n    extractedBits2 = extract_lowest6_bits_00001dc0(data);\n    update_bits_with_data_extraction_00001ec4(extractedBits1,extractedBits2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "data",
                "param_2": "newData",
                "iVar1": "bitwiseResult",
                "iVar2": "lowest6Bits",
                "uVar3": "extractedBits1",
                "uVar4": "extractedBits2",
                "uVar5": "currentData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid setBitAtIndex_00001ff6(undefined2 input)\n\n{\n  uint bitIndex;\n  int maskedValue;\n  \n  bitIndex = extract_lowest6_bits_00001dc0(input);\n  maskedValue = apply_mask_and_value_00001d80(input);\n  *(int *)(maskedValue + 4) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "input",
                "uVar1": "bitIndex",
                "iVar2": "maskedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_function_00002028",
            "code": "\nvoid process_function_00002028(int data_address,undefined4 value)\n\n{\n  int extracted_value;\n  uint bitmask;\n  uint counter;\n  \n  bitmask = *(uint *)(data_address + 0xa0);\n  for (counter = 0; (int)counter < 0x20; counter = counter + 1) {\n    if (((bitmask & 1 << (counter & 0xff)) != 0) &&\n       ((*(uint *)(data_address + counter * 4) & 0xf0000) != 0)) {\n      *(int *)(data_address + 0xa0) = 1 << (counter & 0xff);\n      extracted_value = extract_bits_00001e0c(value,counter);\n      (**(code **)(&DAT_1fff0b78 + extracted_value * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + extracted_value * 0xc));\n    }\n  }\n  check_and_set_bit_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_function_00002028",
                "param_1": "data_address",
                "param_2": "value",
                "iVar1": "extracted_value",
                "uVar2": "bitmask",
                "local_c": "counter"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_process_000020b8",
            "code": "\nvoid initializeProcess_000020b8(void)\n\n{\n  process_function_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_process_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initializeMemory_000020cc(void)\n\n{\n  processMemory(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc",
                "process_function_00002028": "processMemory"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_process_000020e0",
            "code": "\nvoid initializeProcess_000020e0(void)\n\n{\n  executeProcess(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_process_000020e0",
                "process_function_00002028": "executeProcess"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_process_000020f4",
            "code": "\nvoid initializeProcess_000020f4(void)\n\n{\n  executeProcess(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_process_000020f4",
                "process_function_00002028": "executeProcess"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_data_00002108",
            "code": "\nvoid initializeData_00002108(void)\n\n{\n  processData(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_data_00002108",
                "process_function_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 formatString;\n  int stackUsage;\n  int isrPriority;\n  dword relocationOffset;\n  uint byteValue;\n  undefined4 *elfEntry;\n  undefined4 memoryValue;\n  undefined4 stackPointer;\n  int relocationsCount;\n  short loopIndex;\n  int totalStackUsage;\n  int totalProcessSize;\n  \n  formatString = 0x515f;\n  totalProcessSize = 0;\n  totalStackUsage = 0;\n  process_sensor_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  relocationsCount = count_elf_relocations_000008b8();\n  stackPointer = get_memory_value_0000091c();\n  memoryValue = get_stack_pointer_00000900();\n  process_sensor_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               relocationsCount,stackPointer,memoryValue);\n  totalProcessSize = totalProcessSize + 0x200;\n  if (0 < relocationsCount) {\n    totalStackUsage = relocationsCount + totalStackUsage;\n  }\n  for (loopIndex = 1; loopIndex < 0x21; loopIndex = loopIndex + 1) {\n    elfEntry = *(undefined4 **)(&DAT_1fff0358 + loopIndex * 4);\n    if (elfEntry != (undefined4 *)0x0) {\n      byteValue = (uint)*(byte *)(elfEntry + 1);\n      relocationOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[byteValue];\n      isrPriority = (int)&formatString + (uint)(8 < byteValue);\n      stackUsage = elfEntry[0xb];\n      totalProcessSize = stackUsage + totalProcessSize;\n      iVar1 = calculate_array_offset_000010a0(elfEntry[9]);\n      stackUsage = stackUsage - iVar1;\n      totalStackUsage = stackUsage + totalStackUsage;\n      process_sensor_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)elfEntry + 6),elfEntry[10],relocationOffset,isrPriority,\n                   *(undefined *)((int)elfEntry + 5),elfEntry[0xb],stackUsage,elfEntry[9],*elfEntry);\n    }\n  }\n  process_sensor_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalProcessSize,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "formatString",
                "local_3c": "stackUsage",
                "local_38": "isrPriority",
                "local_34": "relocationOffset",
                "local_30": "byteValue",
                "local_2c": "elfEntry",
                "local_28": "memoryValue",
                "local_24": "stackPointer",
                "local_20": "relocationsCount",
                "local_1a": "loopIndex",
                "local_18": "totalStackUsage",
                "local_14": "totalProcessSize"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = count_elf_relocations_000008b8();\n  local_24 = get_memory_value_0000091c();\n  local_28 = get_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_array_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equal_value_00002270",
            "code": "\nundefined checkEqualValue_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equal_value_00002270",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_sum_is_equal_00002294",
            "code": "\nundefined checkIfSumIsEqual_00002294(int input)\n\n{\n  undefined result;\n  int sumDifference;\n  bool isSumEqual;\n  \n  sumDifference = *(int *)(input + 4);\n  isSumEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == sumDifference;\n  if (isSumEqual) {\n    sumDifference = 1;\n  }\n  result = (undefined)sumDifference;\n  if (!isSumEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_sum_is_equal_00002294",
                "param_1": "input",
                "iVar2": "sumDifference",
                "bVar3": "isSumEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increase_and_store_value_000022be",
            "code": "\nvoid increaseAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint originalValue;\n  \n  originalValue = array[3];\n  array[3] = originalValue + 1;\n  *(undefined *)((originalValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increase_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "originalValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_byte_000022f0",
            "code": "\nundefined incrementAndReturnByte_000022f0(int *array)\n\n{\n  uint index;\n  \n  index = array[2];\n  array[2] = index + 1;\n  return *(undefined *)((index & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_byte_000022f0",
                "param_1": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_decrement_0000231c",
            "code": "\nint copy_and_decrement_0000231c(undefined4 value,undefined *destination,int length)\n\n{\n  undefined byte;\n  int equal;\n  undefined *dest_ptr;\n  int remaining_length;\n  \n  dest_ptr = destination;\n  remaining_length = length;\n  while ((remaining_length != 0 && (equal = check_equal_value_00002270(value), equal == 0))) {\n    byte = increment_and_return_byte_000022f0(value);\n    *dest_ptr = byte;\n    remaining_length = remaining_length + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return length - remaining_length;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_decrement_0000231c",
                "param_1": "value",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "byte",
                "iVar2": "equal",
                "local_20": "dest_ptr",
                "local_14": "remaining_length"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_sum_and_store_value_00002364",
            "code": "\nundefined4 checkSumAndStoreValue_00002364(undefined4 inputValue,undefined newValue)\n\n{\n  int sumCheckResult;\n  undefined4 returnValue;\n  \n  sumCheckResult = check_if_sum_is_equal_00002294(inputValue);\n  if (sumCheckResult == 0) {\n    increase_and_store_value_000022be(inputValue,newValue);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_sum_and_store_value_00002364",
                "param_1": "inputValue",
                "param_2": "newValue",
                "iVar1": "sumCheckResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined sensorDataBuffer [128];\n  \n  enableInterrupt(0);\n  displayWelcomeMessage(\"Welcome to RIOT!\");\n  returnValue = processSensorDataLoop(0,sensorDataBuffer,0x80);\n  triggerSoftwareInterrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "sensorDataBuffer",
                "execute_interrupt_000023d0": "enableInterrupt",
                "process_sensor_data_00004db8": "displayWelcomeMessage",
                "process_sensor_data_loop_00002e6c": "processSensorDataLoop",
                "software_interrupt": "triggerSoftwareInterrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid triggerSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_interrupt_000023d0",
            "code": "\nundefined4 executeInterrupt_000023d0(undefined4 interruptType)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = trigger_software_interrupt_000023c8(1,interruptType,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_interrupt_000023d0",
                "param_1": "interruptType",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_and_return_next_ptr_0000240c",
            "code": "\nundefined4 * extract_and_return_next_ptr_0000240c(undefined4 *ptr_to_ptr)\n\n{\n  undefined4 *next_ptr;\n  \n  next_ptr = (undefined4 *)*ptr_to_ptr;\n  if (next_ptr != (undefined4 *)0x0) {\n    *ptr_to_ptr = *next_ptr;\n  }\n  return next_ptr;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_and_return_next_ptr_0000240c",
                "param_1": "ptr_to_ptr",
                "puVar1": "next_ptr"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_data_and_enable_interrupts_00002434",
            "code": "\nundefined4 updateDataAndEnableInterrupts_00002434(int *dataPointer,int condition)\n\n{\n  int originalDataValue;\n  undefined4 returnValue;\n  \n  returnValue = check_irq_interrupts_00000cd0();\n  originalDataValue = DAT_1fff03dc;\n  if (*dataPointer == 0) {\n    *dataPointer = -1;\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 1;\n  }\n  else if (condition == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 0;\n  }\n  else {\n    update_data_00000698(DAT_1fff03dc,2);\n    if (*dataPointer == -1) {\n      *dataPointer = originalDataValue + 8;\n      *(undefined4 *)*dataPointer = 0;\n    }\n    else {\n      find_and_update_pointer_00001034(dataPointer,originalDataValue);\n    }\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    set_e000ed04_bit_0000093c();\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_data_and_enable_interrupts_00002434",
                "param_1": "dataPointer",
                "param_2": "condition",
                "iVar1": "originalDataValue",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_interrupt_000024bc",
            "code": "\nvoid handleInterrupt_000024bc(int *interruptStatus)\n\n{\n  undefined interruptFlag;\n  undefined4 interruptInfo;\n  int nextPtr;\n  \n  interruptInfo = check_irq_interrupts_00000cd0();\n  if (*interruptStatus == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(interruptInfo);\n  }\n  else if (*interruptStatus == -1) {\n    *interruptStatus = 0;\n    enable_irq_interrupts_if_privileged_00000d0c(interruptInfo);\n  }\n  else {\n    nextPtr = extract_and_return_next_ptr_0000240c(interruptStatus);\n    update_data_00000698(nextPtr + -8,10);\n    if (*interruptStatus == 0) {\n      *interruptStatus = -1;\n    }\n    interruptFlag = *(undefined *)(nextPtr + -3);\n    enable_irq_interrupts_if_privileged_00000d0c(interruptInfo);\n    check_exception_and_set_flag_00000738(interruptFlag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_interrupt_000024bc",
                "param_1": "interruptStatus",
                "uVar1": "interruptFlag",
                "uVar2": "interruptInfo",
                "iVar3": "nextPtr"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte address,uint data)\n\n{\n  if ((byte)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (byte)((data & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)address + -0x1fff1c00) = (byte)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "address",
                "param_2": "data",
                "char": "byte"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_0000258c",
            "code": "\n\n\nvoid initializeMemory_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  updateMemory(0xfffffffe,1);\n  updateMemory(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    updateMemory((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "index",
                "update_memory_00002538": "updateMemory"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "initialize_system_000027b0": "initialize_system_helper"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_data_with_new_date_00002600",
            "code": "\nundefined4 initializeDataWithNewDate_00002600(undefined4 inputDate)\n\n{\n  undefined4 newDate;\n  \n  newDate = calculate_new_date_000047e4(inputDate);\n  initialize_data_0000285c(newDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_data_with_new_date_00002600",
                "param_1": "inputDate",
                "uVar1": "newDate"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "process_data_00002624",
            "code": "\nundefined4 processData_00002624(undefined4 inputData)\n\n{\n  undefined4 data;\n  undefined4 result;\n  \n  data = get_data_from_address_0000281c();\n  result = 0;\n  calculate_date_time_0000443c(&data,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "inputData",
                "local_10": "data",
                "uStack_c": "result"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 startDate,undefined4 endDate,undefined4 param3)\n\n{\n  undefined4 newDate;\n  \n  newDate = calculate_new_date_000047e4(startDate);\n  DAT_1fff0d9c = endDate;\n  initialize_data_00002894(newDate,0x26f1,param3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "startDate",
                "param_2": "endDate",
                "param_3": "param3",
                "uVar1": "newDate"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_date_time_00002690",
            "code": "\nundefined4 initializeDateTime_00002690(undefined4 inputValue)\n\n{\n  undefined4 pointer;\n  undefined4 count;\n  \n  pointer = increment_pointer_000028f0();\n  count = 0;\n  calculate_date_time_0000443c(&pointer,inputValue);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_date_time_00002690",
                "param_1": "inputValue",
                "local_10": "pointer",
                "uStack_c": "count"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_system_000026c0",
            "code": "\nvoid initializeSystem_000026c0(void)\n\n{\n  resetData();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_system_000026c0",
                "reset_data_00002910": "resetData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "set_flag_bits_000026d8",
            "code": "\nvoid setFlagBits_000026d8(void)\n\n{\n  setFlagBits_000026d8Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "set_flag_bits_000026d8",
                "set_flag_bits_0000294c": "setFlagBitsHelper"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_interrupt_flag_000026e4",
            "code": "\nvoid initialize_interrupt_flag_000026e4(void)\n\n{\n  clearInterruptFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clearInterruptFlag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte offset,uint value)\n\n{\n  if (charOffset < '\\0') {\n    (&DAT_e000ed14)[offset & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)(charOffset + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "offset",
                "param_2": "value",
                "(char)param_1": "charOffset"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_for_set_bit_00002798",
            "code": "\nvoid checkForSetBit_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setFlagBit();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_for_set_bit_00002798",
                "set_e000ed04_bit_0000093c": "setFlagBit"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  setFlagBits();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_bits_0000294c": "setFlagBits"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_data_from_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_data_from_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_data_from_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "value"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int dataSize,undefined4 param1,undefined4 param2)\n\n{\n  _DAT_4003d008 = dataSize + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = param1;\n  DAT_1fff0da4 = param2;\n  update_data_00002744(0x2e,10);\n  set_bit_in_memory_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "dataSize",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_pointer_000028f0",
            "code": "\n\n\nint incrementPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_pointer_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_data_00002910",
            "code": "\n\n\nvoid resetData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_bits_0000294c",
            "code": "\n\n\nvoid setFlagBits_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_bits_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_binary_function_00002994",
            "code": "\n\n\nvoid executeBinaryFunction_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_for_set_bit_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_binary_function_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "FUNC_00002a00",
            "code": "\nvoid FUNC_00002a00(undefined4 param_1)\n\n{\n  process_and_update_data_00004cb4(param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "FUNC_00002a00"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_reboot_value_00002a18",
            "code": "\nint find_reboot_value_00002a18(int *array_ptr,undefined4 target_value)\n\n{\n  int comparison_result;\n  int *array;\n  undefined **reboot_string_ptr;\n  uint index;\n  int *current_ptr;\n  \n  array = array_ptr;\n  reboot_string_ptr = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_ptr = (&array)[index];\n    if (current_ptr != (int *)0x0) {\n      for (; *current_ptr != 0; current_ptr = current_ptr + 3) {\n        comparison_result = compare_byte_arrays_00004e52(*current_ptr,target_value);\n        if (comparison_result == 0) {\n          return current_ptr[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_reboot_value_00002a18",
                "param_1": "array_ptr",
                "param_2": "target_value",
                "iVar1": "comparison_result",
                "local_18": "array",
                "local_14": "reboot_string_ptr",
                "local_10": "index",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_sensor_data_00002a88",
            "code": "\nvoid printSensorData_00002a88(int *sensorDataArray)\n\n{\n  int *currentSensorData;\n  undefined **commandArray;\n  uint index;\n  int *currentDataEntry;\n  \n  process_sensor_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_sensor_data_00004db8(\"---------------------------------------\");\n  currentSensorData = sensorDataArray;\n  commandArray = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentDataEntry = (&currentSensorData)[index];\n    if (currentDataEntry != (int *)0x0) {\n      for (; *currentDataEntry != 0; currentDataEntry = currentDataEntry + 3) {\n        process_sensor_data_00004c84(\"%-20s %s\\n\",*currentDataEntry,currentDataEntry[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_sensor_data_00002a88",
                "param_1": "sensorDataArray",
                "local_18": "currentSensorData",
                "local_14": "commandArray",
                "local_10": "index",
                "local_c": "currentDataEntry"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_sensor_data_00002b10",
            "code": "\nvoid processSensorData_00002b10(undefined4 param1,byte *param2)\n\n{\n  int result;\n  byte *currentByte;\n  byte *sensorDataArray [3];\n  code *rebootFunction;\n  char **commandArray;\n  uint commandCount;\n  byte quoteType;\n  char *currentChar;\n  char *currentCommand;\n  char **commandPointerArray;\n  uint commandIndex;\n  int escapeCount;\n  uint quoteCount;\n  byte *currentCharacter;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  currentCharacter = param2;\n  while( true ) {\n    sensorDataArray[0] = param2;\n    sensorDataArray[1] = (byte *)param1;\n    if (0x20 < *currentCharacter) {\n      if ((*currentCharacter == 0x22) || (*currentCharacter == 0x27)) {\n        quoteType = *currentCharacter;\n        do {\n          currentByte = currentCharacter + 1;\n          if (*currentByte == 0) {\n            currentCharacter = currentByte;\n            process_sensor_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*currentByte == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharacter = currentCharacter + 2;\n            currentByte = currentCharacter;\n            if (*currentCharacter == 0) {\n              process_sensor_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharacter = currentByte;\n        } while (quoteType != *currentCharacter);\n        if (0x20 < currentCharacter[1]) {\n          process_sensor_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharacter == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharacter = currentCharacter + 1;\n            if (*currentCharacter == 0) {\n              process_sensor_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharacter = currentCharacter + 1;\n          if (*currentCharacter == 0x22) {\n            process_sensor_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharacter);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentCharacter == 0) break;\n    *currentCharacter = 0;\n    currentCharacter = currentCharacter + 1;\n  }\n  if (quoteCount != 0) {\n    commandCount = quoteCount;\n    commandArray = (char **)((int)sensorDataArray - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[quoteCount] = (char *)0x0;\n    currentCharacter = param2;\n    for (commandIndex = 0; commandPointerArray = commandArray, commandIndex < quoteCount; commandIndex = commandIndex + 1) {\n      for (; *currentCharacter == 0; currentCharacter = currentCharacter + 1) {\n      }\n      if ((*currentCharacter == 0x22) || (*currentCharacter == 0x27)) {\n        currentCharacter = currentCharacter + 1;\n      }\n      commandArray[commandIndex] = (char *)currentCharacter;\n      for (; *currentCharacter != 0; currentCharacter = currentCharacter + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*commandPointerArray != (char *)0x0)); commandPointerArray = commandPointerArray + 1) {\n      for (currentCommand = *commandPointerArray; *currentCommand != '\\0'; currentCommand = currentCommand + 1) {\n        if (*currentCommand == '\\') {\n          for (currentChar = currentCommand; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    rebootFunction = (code *)find_reboot_value_00002a18(param1,*commandArray);\n    if (rebootFunction == (code *)0x0) {\n      result = compare_byte_arrays_00004e52(&DAT_00007214,*commandArray);\n      if (result == 0) {\n        print_sensor_data_00002a88(sensorDataArray[1]);\n      }\n      else {\n        process_sensor_data_00004c84(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*rebootFunction)(quoteCount,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_sensor_data_00002b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "pbVar2": "currentByte",
                "local_48": "sensorDataArray",
                "local_3c": "rebootFunction",
                "local_38": "commandArray",
                "local_34": "commandCount",
                "local_2d": "quoteType",
                "local_2c": "currentChar",
                "local_28": "currentCommand",
                "local_24": "commandPointerArray",
                "local_20": "commandIndex",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "currentCharacter"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_sensor_data_00002d94",
            "code": "\nuint processSensorData_00002d94(undefined *sensorData,int dataLength)\n\n{\n  int sensorValue;\n  byte sensorByte;\n  bool isFirstByte;\n  undefined *currentByte;\n  \n  currentByte = sensorData;\n  while( true ) {\n    if (dataLength + -1 <= (int)currentByte - (int)sensorData) {\n      return 0xffffffff;\n    }\n    sensorValue = process_sensor_data_00004418();\n    if (sensorValue < 0) break;\n    if ((sensorValue == 0xd) || (sensorValue == 10)) {\n      *currentByte = 0;\n      FUNC_00002a00(0xd);\n      FUNC_00002a00(10);\n      isFirstByte = currentByte == sensorData;\n      if (isFirstByte) {\n        sensorData = (undefined *)0x1;\n      }\n      sensorByte = (byte)sensorData;\n      if (!isFirstByte) {\n        sensorByte = 0;\n      }\n      return (uint)sensorByte;\n    }\n    if ((sensorValue == 8) || (sensorValue == 0x7f)) {\n      if (currentByte != sensorData) {\n        currentByte = currentByte + -1;\n        *currentByte = 0;\n        FUNC_00002a00(8);\n        FUNC_00002a00(0x20);\n        FUNC_00002a00(8);\n      }\n    }\n    else {\n      *currentByte = (char)sensorValue;\n      FUNC_00002a00(sensorValue);\n      currentByte = currentByte + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_sensor_data_00002d94",
                "param_1": "sensorData",
                "param_2": "dataLength",
                "iVar1": "sensorValue",
                "bVar2": "sensorByte",
                "bVar3": "isFirstByte",
                "local_c": "currentByte"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_and_process_relocation_00002e48",
            "code": "\nvoid initializeAndProcessRelocation_00002e48(void)\n\n{\n  FUNC_00002a00(0x3e);\n  FUNC_00002a00(0x20);\n  process_relocation_entries_000041d0(*(undefined4 *)(relocationEntries[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_and_process_relocation_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationEntries",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_sensor_data_loop_00002e6c",
            "code": "\nvoid process_sensor_data_loop_00002e6c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  int sensor_data_result;\n  \n  initialize_and_process_relocation_00002e48();\n  do {\n    sensor_data_result = process_sensor_data_00002d94(input_param_2,input_param_3);\n    if (sensor_data_result == 0) {\n      process_sensor_data_00002b10(input_param_1,input_param_2);\n    }\n    initialize_and_process_relocation_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_sensor_data_loop_00002e6c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "iVar1": "sensor_data_result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_endless_loop_00002e9c",
            "code": "\nundefined4 execute_endless_loop_00002e9c(void)\n\n{\n  execute_endless_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_endless_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_information_00002eb4",
            "code": "\nundefined4 print_process_information_00002eb4(void)\n\n{\n  print_process_info_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_information_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_sensor_data_00002ecc",
            "code": "\nvoid readSensorData_00002ecc(undefined4 deviceIndex,int sensorData)\n\n{\n  undefined4 deviceName;\n  undefined4 sensorDataValue;\n  undefined sensorDataBuffer [8];\n  uint sensorDataSize;\n  \n  sensorDataSize = execute_function_00003d64(sensorData,sensorDataBuffer);\n  if ((int)sensorDataSize < 1) {\n    process_sensor_data_00004c84(\"error: failed to read from device #%i\\n\",deviceIndex);\n  }\n  else {\n    sensorDataValue = *(undefined4 *)(sensorData + 8);\n    deviceName = get_device_name_000039e8(*(undefined *)(*(int *)(sensorData + 0xc) + 8));\n    process_sensor_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceIndex,sensorDataValue,deviceName);\n    display_sensor_data_00003694(sensorDataBuffer,sensorDataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_sensor_data_00002ecc",
                "param_1": "deviceIndex",
                "param_2": "sensorData",
                "uVar1": "deviceName",
                "uVar2": "sensorDataValue",
                "auStack_1c": "sensorDataBuffer",
                "local_14": "sensorDataSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "read_and_process_sensor_data_00002f30",
            "code": "\nvoid read_and_process_sensor_data_00002f30(void)\n\n{\n  int sensor_index;\n  undefined4 *sensor_ptr;\n  \n  sensor_index = 0;\n  for (sensor_ptr = DAT_1fff0db0; sensor_ptr != (undefined4 *)0x0; sensor_ptr = (undefined4 *)*sensor_ptr) {\n    read_sensor_data_00002ecc(sensor_index,sensor_ptr);\n    process_sensor_data_00004db8(&DAT_00007380);\n    sensor_index = sensor_index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "read_and_process_sensor_data_00002f30",
                "local_10": "sensor_index",
                "local_c": "sensor_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_sensor_data_00002f74",
            "code": "\nvoid printSensorData_00002f74(void)\n\n{\n  undefined4 deviceName;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_sensor_data_00004db8(\"No devices found\");\n  }\n  else {\n    process_sensor_data_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceName = get_device_name_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_sensor_data_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceName,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_sensor_data_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceName"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_sensor_data_00002fe0",
            "code": "\nvoid process_sensor_data_00002fe0(int num_params,undefined4 *params)\n\n{\n  int result;\n  undefined4 device_id;\n  \n  if (num_params < 3) {\n    process_sensor_data_00002fe0_00004c84(\"usage: %s %s <device id>|all\\n\",*params,params[1]);\n  }\n  else {\n    result = compare_byte_arrays_00004e52(params[2],&DAT_000073d4);\n    if (result == 0) {\n      read_and_process_sensor_data_00002fe0_00002f30();\n    }\n    else {\n      device_id = parse_and_store_number_00004042(params[2]);\n      result = find_element_by_index_00003d24(device_id);\n      if (result == 0) {\n        process_sensor_data_00002fe0_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_sensor_data_00002ecc(device_id,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_sensor_data_00002fe0",
                "param_1": "num_params",
                "param_2": "params",
                "iVar1": "result",
                "uVar2": "device_id"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argumentCount,undefined4 *arguments)\n\n{\n  undefined2 uVar1;\n  undefined2 parsedValues [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int currentIndex;\n  \n  if (argumentCount < 4) {\n    printMessage(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*arguments,arguments[1]);\n  }\n  else {\n    deviceId = parseAndStoreNumber(arguments[2]);\n    deviceIndex = findDeviceByIndex(deviceId);\n    if (deviceIndex == 0) {\n      printError(\"error: undefined device given\");\n    }\n    else {\n      initializeMemory(parsedValues,0,8);\n      if (5 < argumentCount) {\n        argumentCount = 6;\n      }\n      numValues = argumentCount - 3;\n      for (currentIndex = 0; currentIndex < (int)numValues; currentIndex = currentIndex + 1) {\n        uVar1 = parseAndStoreNumber(arguments[currentIndex + 3]);\n        parsedValues[currentIndex] = uVar1;\n      }\n      printMessage(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      displayData(parsedValues,numValues & 0xff);\n      numValues = executeFunction(deviceIndex,parsedValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          printMessage(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          printMessage(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        printMessage(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argumentCount",
                "param_2": "arguments",
                "auStack_20": "parsedValues",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "currentIndex",
                "process_sensor_data_00004c84": "printMessage",
                "parse_and_store_number_00004042": "parseAndStoreNumber",
                "find_element_by_index_00003d24": "findDeviceByIndex",
                "process_sensor_data_00004db8": "printError",
                "fill_memory_00004622": "initializeMemory",
                "display_sensor_data_00003694": "displayData",
                "execute_function_00003d94": "executeFunction"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_command_0000316c",
            "code": "\nundefined4 process_command_0000316c(int command_length,undefined4 *command)\n\n{\n  int comparison_result;\n  \n  if (command_length < 2) {\n    print_sensor_data_00002f74();\n  }\n  else {\n    comparison_result = compare_byte_arrays_00004e52(command[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_sensor_data_00002fe0(command_length,command);\n    }\n    else {\n      comparison_result = compare_byte_arrays_00004e52(command[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device_0000305c(command_length,command);\n      }\n      else {\n        process_sensor_data_00004c84(\"usage: %s read|write\\n\",*command);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_command_0000316c",
                "param_1": "command_length",
                "param_2": "command",
                "iVar1": "comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_sensor_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int day,int month,int year)\n\n{\n  byte isLeapYear;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  isLeapYear = (byte)adjustedMonth;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  day = day - (uint)isLeapYear;\n  adjustedMonth = day;\n  if (day < 0) {\n    adjustedMonth = day + 3;\n  }\n  return ((((adjustedMonth >> 2) + day) - day / 100) + day / 400 +\n          *(int *)((int)weekdayOffset + (month + -1) * 4 + 0x50) + year) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "day",
                "param_2": "month",
                "param_3": "year",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayOffset"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_calculate_weekday_0000328c",
            "code": "\nundefined4 parse_and_calculate_weekday_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int weekday;\n  int index;\n  short parsed_number;\n  \n  parsed_number = parse_number_00004f84(*input_array,&index,10);\n  output_array[5] = parsed_number + -0x76c;\n  parsed_number = parse_number_00004f84(index + 1,&index,10);\n  output_array[4] = parsed_number + -1;\n  parsed_number = parse_number_00004f84(index + 1,&index,10);\n  output_array[3] = (int)parsed_number;\n  parsed_number = parse_number_00004f84(input_array[1],&index,10);\n  output_array[2] = (int)parsed_number;\n  parsed_number = parse_number_00004f84(index + 1,&index,10);\n  output_array[1] = (int)parsed_number;\n  parsed_number = parse_number_00004f84(index + 1,&index,10);\n  *output_array = (int)parsed_number;\n  weekday = calculate_weekday_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = weekday;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_weekday_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "weekday",
                "local_10": "index",
                "local_a": "parsed_number"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_datetime_00003378",
            "code": "\nundefined4 print_datetime_00003378(undefined4 *datetime)\n\n{\n  process_sensor_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*datetime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_datetime_00003378",
                "param_1": "datetime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_date_time_and_print_000033c0",
            "code": "\nbool getDateTimeAndPrint_000033c0(void)\n\n{\n  int result;\n  undefined dateTimeData [36];\n  \n  result = initialize_date_time_00002690(dateTimeData);\n  if (result != 0) {\n    process_sensor_data_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    print_datetime_00003378(dateTimeData);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_date_time_and_print_000033c0",
                "iVar1": "result",
                "auStack_2c": "dateTimeData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_if_valid_weekday_000033f4",
            "code": "\nundefined4 setAlarmIfValidWeekday_000033f4(undefined4 weekday)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined parsedData [36];\n  \n  result = parse_and_calculate_weekday_0000328c(weekday,parsedData);\n  if (result == 0) {\n    result = initialize_data_00002654(parsedData,0x31e1,0);\n    if (result == -1) {\n      process_sensor_data_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_if_valid_weekday_000033f4",
                "param_1": "weekday",
                "iVar1": "result",
                "auStack_2c": "parsedData",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_date_time_00003444",
            "code": "\nbool getAndPrintDateTime_00003444(void)\n\n{\n  int result;\n  undefined dataBuffer [36];\n  \n  result = process_data_00002624(dataBuffer);\n  if (result != 0) {\n    process_sensor_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_datetime_00003378(dataBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_date_time_00003444",
                "auStack_2c": "dataBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "validate_and_set_date_00003478",
            "code": "\nundefined4 validateAndSetDate_00003478(undefined4 inputDate)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined parsedDate [36];\n  \n  parseResult = parse_and_calculate_weekday_0000328c(inputDate,parsedDate);\n  if (parseResult == 0) {\n    parseResult = initialize_data_with_new_date_00002600(parsedDate);\n    if (parseResult == -1) {\n      process_sensor_data_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "validate_and_set_date_00003478",
                "param_1": "inputDate",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "parsedDate"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_with_new_date_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  process_sensor_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_sensor_data_00004db8(\"commands:\");\n  process_sensor_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_sensor_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_sensor_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_sensor_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_sensor_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_sensor_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_sensor_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandCount,int commandArray)\n\n{\n  int comparisonResult;\n  undefined4 returnValue;\n  \n  if (commandCount < 2) {\n    print_usage_000034c0();\n    returnValue = 1;\n  }\n  else {\n    comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"poweron\",7);\n    if (comparisonResult == 0) {\n      set_flag_bits_000026d8();\n    }\n    else {\n      comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"poweroff\",8);\n      if (comparisonResult == 0) {\n        initialize_interrupt_flag_000026e4();\n      }\n      else {\n        comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"clearalarm\",8);\n        if (comparisonResult == 0) {\n          initialize_system_000026c0();\n        }\n        else {\n          comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"getalarm\",8);\n          if (comparisonResult == 0) {\n            get_date_time_and_print_000033c0();\n          }\n          else {\n            comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"setalarm\",8);\n            if ((comparisonResult == 0) && (commandCount == 4)) {\n              set_alarm_if_valid_weekday_000033f4(commandArray + 8);\n            }\n            else {\n              comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"gettime\",7);\n              if (comparisonResult == 0) {\n                get_and_print_date_time_00003444();\n              }\n              else {\n                comparisonResult = compare_byte_arrays_00004e66(*(undefined4 *)(commandArray + 4),\"settime\",7);\n                if ((comparisonResult != 0) || (commandCount != 4)) {\n                  process_sensor_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandArray + 4));\n                  print_usage_000034c0();\n                  return 1;\n                }\n                validate_and_set_date_00003478(commandArray + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandCount",
                "param_2": "commandArray",
                "iVar1": "comparisonResult",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "endless_loop_00003658",
            "code": "\nvoid endlessLoop_00003658(void)\n\n{\n  synchronizeData(0xf);\n  synchronizeData(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "endless_loop_00003658",
                "DataSynchronizationBarrier": "synchronizeData"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_endless_loop_00003688",
            "code": "\nvoid execute_endless_loop_00003688(void)\n\n{\n  endless_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_endless_loop_00003688",
                "endless_loop_00003658": "endless_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_sensor_data_00003694",
            "code": "\nvoid displaySensorData_00003694(int dataAddress,byte dataSize)\n\n{\n  undefined4 memoryLocation;\n  char bitValue;\n  uint bitMask;\n  bool isBitSet;\n  undefined convertedString [8];\n  int stringLength;\n  char parameterValue;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataSize)) {\n    process_sensor_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_sensor_data_00004c84(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        bitValue = (char)bitMask;\n        if (!isBitSet) {\n          bitValue = '\\0';\n        }\n        if (bitValue == '\\0') goto LAB_000036ee;\n        parameterValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        parameterValue = map_parameter_value_00003918((int)*(char *)(dataAddress + 7));\n      }\n      process_sensor_data_00004c84(&DAT_000077bc);\n      if (dataSize < 2) {\n        process_sensor_data_00004c84(\"     \");\n      }\n      else {\n        process_sensor_data_00004c84(\"[%u] \",index);\n      }\n      if (parameterValue == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          process_sensor_data_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          stringLength = convert_and_return_string_00003e9e(convertedString,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          convertedString[stringLength] = 0;\n          process_sensor_data_00004c84(&DAT_000077dc,convertedString);\n        }\n        else {\n          process_sensor_data_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        process_sensor_data_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),parameterValue);\n      }\n      memoryLocation = get_memory_location_00003810(*(undefined *)(dataAddress + 6));\n      process_sensor_data_00004c84(&DAT_000077e8,memoryLocation);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_sensor_data_00003694",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "memoryLocation",
                "cVar2": "bitValue",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "convertedString",
                "local_10": "stringLength",
                "local_a": "parameterValue",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_location_00003810",
            "code": "\nundefined * getMemoryLocation_00003810(undefined inputValue)\n\n{\n  undefined *memoryLocation;\n  \n  switch(inputValue) {\n  case 2:\n    memoryLocation = &DAT_000077ec;\n    break;\n  case 3:\n    memoryLocation = &DAT_000077f0;\n    break;\n  case 4:\n    memoryLocation = &DAT_000077f4;\n    break;\n  case 5:\n    memoryLocation = &DAT_000077f8;\n    break;\n  case 6:\n    memoryLocation = &DAT_000077fc;\n    break;\n  case 7:\n    memoryLocation = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryLocation = &DAT_00007804;\n    break;\n  case 9:\n    memoryLocation = &DAT_00007808;\n    break;\n  case 10:\n    memoryLocation = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryLocation = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryLocation = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryLocation = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryLocation = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryLocation = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryLocation = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryLocation = &DAT_0000782c;\n    break;\n  default:\n    memoryLocation = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryLocation = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryLocation = &DAT_00007828;\n  }\n  return memoryLocation;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_location_00003810",
                "param_1": "inputValue",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_value_00003918",
            "code": "\nundefined4 mapParameterValue_00003918(undefined value)\n\n{\n  undefined4 mappedValue;\n  \n  switch(value) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_value_00003918",
                "param_1": "value",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_device_name_000039e8",
            "code": "\nchar * getDeviceName_000039e8(char deviceType)\n\n{\n  char *deviceName;\n  \n  switch(deviceType) {\n  case '\\0':\n    deviceName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    deviceName = \"ACT_ANY\";\n    break;\n  case 'B':\n    deviceName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    deviceName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    deviceName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    deviceName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    deviceName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    deviceName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    deviceName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    deviceName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    deviceName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    deviceName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    deviceName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    deviceName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    deviceName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    deviceName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    deviceName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    deviceName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    deviceName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    deviceName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    deviceName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    deviceName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    deviceName = \"SENSE_CO2\";\n    break;\n  default:\n    if (deviceType == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    deviceName = \"CLASS_UNKNOWN\";\n  }\n  return deviceName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_device_name_000039e8",
                "param_1": "deviceType",
                "pcVar1": "deviceName"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_by_index_00003d24",
            "code": "\nundefined4 * findElementByIndex_00003d24(int index)\n\n{\n  int count;\n  undefined4 *currentElement;\n  \n  count = 0;\n  for (currentElement = DAT_1fff0db0; (count < index && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    count = count + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_by_index_00003d24",
                "param_1": "index",
                "local_10": "count",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int input,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (input == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (***(code ***)(input + 0xc))(*(undefined4 *)(input + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "calculate_digits_00003dc4",
            "code": "\nint calculateDigits_00003dc4(int offset,uint number)\n\n{\n  uint remainder;\n  char *stringPtr;\n  uint power;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (power = 10; power <= number; power = power * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (offset != 0) {\n    stringPtr = (char *)(digitCount + offset);\n    remainder = number;\n    do {\n      stringPtr = stringPtr + -1;\n      *stringPtr = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "calculate_digits_00003dc4",
                "param_1": "offset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "stringPtr",
                "local_10": "power",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_negative_digit_count_00003e58",
            "code": "\nint calculate_negative_digit_count_00003e58(undefined *input_string,int number)\n\n{\n  int digit_count;\n  int absolute_value;\n  undefined *output_string;\n  \n  absolute_value = number;\n  output_string = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      output_string = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_value = -number;\n  }\n  digit_count = calculate_digits_00003dc4(output_string,absolute_value);\n  return -(number >> 0x1f) + digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_negative_digit_count_00003e58",
                "param_1": "input_string",
                "param_2": "number",
                "iVar1": "digit_count",
                "local_18": "absolute_value",
                "local_14": "output_string"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "convert_and_return_string_00003e9e",
            "code": "\nundefined4 convertAndReturnString_00003e9e(undefined4 inputNumber,short inputShort,undefined4 inputValue)\n\n{\n  undefined4 convertedString;\n  \n  convertedString = convert_number_to_string_00003ec4(inputNumber,(int)inputShort,inputValue);\n  return convertedString;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "convert_and_return_string_00003e9e",
                "param_1": "inputNumber",
                "param_2": "inputShort",
                "param_3": "inputValue",
                "uVar1": "convertedString"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_number_to_string_00003ec4",
            "code": "\nint convert_number_to_string_00003ec4(undefined *output_string,uint number,int decimal_places)\n\n{\n  int digit_count;\n  undefined4 digit_copy;\n  uint quotient;\n  int remainder;\n  int total_digits;\n  \n  if (decimal_places + 7 < 0 != SCARRY4(decimal_places,7)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  total_digits = 0;\n  if (decimal_places == 0) {\n    total_digits = calculate_negative_digit_count_00003e58(output_string,number);\n  }\n  else if (decimal_places < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + decimal_places * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + decimal_places * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output_string != (undefined *)0x0) {\n        *output_string = 0x2d;\n      }\n      total_digits = 1;\n    }\n    if (output_string == (undefined *)0x0) {\n      digit_count = calculate_negative_digit_count_00003e58(0,quotient);\n      total_digits = digit_count + 1 + total_digits;\n    }\n    else {\n      digit_count = calculate_negative_digit_count_00003e58(output_string + total_digits,quotient);\n      digit_count = total_digits + digit_count;\n      total_digits = digit_count + 1;\n      output_string[digit_count] = 0x2e;\n      digit_copy = calculate_negative_digit_count_00003e58(output_string + total_digits,remainder);\n      copy_and_fill_memory_00003ff4(output_string + total_digits,digit_copy,-decimal_places,0x30);\n    }\n    total_digits = -decimal_places + total_digits;\n  }\n  else {\n    total_digits = calculate_negative_digit_count_00003e58(output_string,number);\n    if (output_string != (undefined *)0x0) {\n      fill_memory_00004622(output_string + total_digits,0x30,decimal_places);\n    }\n    total_digits = decimal_places + total_digits;\n  }\n  return total_digits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_number_to_string_00003ec4",
                "param_1": "output_string",
                "param_2": "number",
                "param_3": "decimal_places",
                "iVar1": "digit_count",
                "uVar2": "digit_copy",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "total_digits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int startIndex,uint sourceIndex,uint destinationIndex,undefined fillChar)\n\n{\n  uint result;\n  \n  result = sourceIndex;\n  if ((sourceIndex < destinationIndex) && (result = destinationIndex, startIndex != 0)) {\n    copy_and_reverse_array_000045ee((destinationIndex - sourceIndex) + startIndex,startIndex,sourceIndex);\n    fill_memory_00004622(startIndex,fillChar,destinationIndex - sourceIndex);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "startIndex",
                "param_2": "sourceIndex",
                "param_3": "destinationIndex",
                "param_4": "fillChar",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_store_number_00004042",
            "code": "\nvoid parse_and_store_number_00004042(undefined4 num_to_parse)\n\n{\n  parse_number(num_to_parse,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_store_number_00004042",
                "param_1": "num_to_parse",
                "parse_number_00004f84": "parse_number"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPointer,int *paramPointer)\n\n{\n  int tempVar1;\n  int *tempVar2;\n  uint ushortValue;\n  ushort flagValue;\n  int tempVar3;\n  code *functionPointer;\n  int tempVar4;\n  uint originalValue;\n  bool isZero;\n  \n  flagValue = *(ushort *)(paramPointer + 3);\n  ushortValue = (uint)flagValue;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    tempVar1 = paramPointer[4];\n    if (tempVar1 != 0) {\n      tempVar3 = ushortValue << 0x1e;\n      isZero = tempVar3 == 0;\n      tempVar4 = *paramPointer;\n      if (isZero) {\n        tempVar3 = paramPointer[5];\n      }\n      *paramPointer = tempVar1;\n      if (!isZero) {\n        tempVar3 = 0;\n      }\n      paramPointer[2] = tempVar3;\n      for (tempVar4 = tempVar4 - tempVar1; 0 < tempVar4; tempVar4 = tempVar4 - tempVar3) {\n        tempVar3 = (*(code *)paramPointer[10])(dataPointer,paramPointer[8],tempVar1,tempVar4);\n        if (tempVar3 < 1) {\n          *(ushort *)(paramPointer + 3) = *(ushort *)(paramPointer + 3) | 0x40;\n          return 0xffffffff;\n        }\n        tempVar1 = tempVar1 + tempVar3;\n      }\n    }\n  }\n  else {\n    if ((paramPointer[1] < 1) && (paramPointer[0x10] < 1)) {\n      return 0;\n    }\n    functionPointer = (code *)paramPointer[0xb];\n    if (functionPointer == (code *)0x0) {\n      return 0;\n    }\n    originalValue = *dataPointer;\n    *dataPointer = 0;\n    if ((flagValue & 0x1000) == 0) {\n      tempVar1 = (*functionPointer)(dataPointer,paramPointer[8],ushortValue & 0x1000,1);\n      if ((tempVar1 == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n        if ((ushortValue == 0x1d) || (ushortValue == 0x16)) {\n          *dataPointer = originalValue;\n          return 0;\n        }\n        flagValue = *(ushort *)(paramPointer + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      tempVar1 = paramPointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(paramPointer + 3) << 0x1d) < 0) &&\n       (tempVar1 = tempVar1 - paramPointer[1], paramPointer[0xd] != 0)) {\n      tempVar1 = tempVar1 - paramPointer[0x10];\n    }\n    tempVar1 = (*(code *)paramPointer[0xb])(dataPointer,paramPointer[8],tempVar1,0);\n    flagValue = *(ushort *)(paramPointer + 3);\n    if ((tempVar1 == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(paramPointer + 3) = flagValue | 0x40;\n      return 0xffffffff;\n    }\n    paramPointer[1] = 0;\n    *paramPointer = paramPointer[4];\n    if (((int)((uint)flagValue << 0x13) < 0) && ((tempVar1 != -1 || (*dataPointer == 0)))) {\n      paramPointer[0x15] = tempVar1;\n    }\n    tempVar2 = (int *)paramPointer[0xd];\n    *dataPointer = originalValue;\n    if (tempVar2 != (int *)0x0) {\n      if (tempVar2 != paramPointer + 0x11) {\n        initialize_data_00004b34(dataPointer);\n      }\n      paramPointer[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPointer",
                "param_2": "paramPointer",
                "iVar1": "tempVar1",
                "piVar2": "tempVar2",
                "uVar3": "ushortValue",
                "uVar4": "flagValue",
                "iVar5": "tempVar3",
                "pcVar6": "functionPointer",
                "iVar7": "tempVar4",
                "uVar8": "originalValue",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_and_verify_data_00004158",
            "code": "\nundefined4 processAndVerifyData_00004158(int dataAddress,undefined4 *dataPointer)\n\n{\n  undefined4 returnValue;\n  \n  if (dataPointer[4] != 0) {\n    if ((dataAddress != 0) && (*(int *)(dataAddress + 0x18) == 0)) {\n      initialize_sensor_000042a4();\n    }\n    if (dataPointer == &DAT_000079b8) {\n      dataPointer = *(undefined4 **)(dataAddress + 4);\n    }\n    else if (dataPointer == (undefined4 *)&DAT_000079d8) {\n      dataPointer = *(undefined4 **)(dataAddress + 8);\n    }\n    else if (dataPointer == (undefined4 *)&DAT_00007998) {\n      dataPointer = *(undefined4 **)(dataAddress + 0xc);\n    }\n    if (*(short *)(dataPointer + 3) != 0) {\n      if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataPointer + 3) << 0x16)) {\n        FUNC_000045e8(dataPointer[0x16]);\n      }\n      returnValue = process_data_0000404c(dataAddress,dataPointer);\n      if ((int)(dataPointer[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(dataPointer + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(dataPointer[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_and_verify_data_00004158",
                "param_1": "dataAddress",
                "param_2": "dataPointer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_entries_000041d0",
            "code": "\nuint process_relocation_entries_000041d0(int base_address,undefined4 size,undefined4 data)\n\n{\n  uint result;\n  int index;\n  dword *entry;\n  int offset;\n  uint final_result;\n  int counter;\n  undefined4 *data_ptr;\n  \n  if (base_address == 0) {\n    data_ptr = &DAT_000079f8;\n    entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    final_result = 0;\n    do {\n      counter = entry[1];\n      offset = entry[2];\n      while (counter = counter + -1, -1 < counter) {\n        if ((1 < *(ushort *)(offset + 0xc)) && (index = *(short *)(offset + 0xe) + 1, index != 0)) {\n          result = process_and_verify_data_00004158(0x1fff0284,offset,data,index,data_ptr);\n          final_result = final_result | result;\n        }\n        offset = offset + 0x68;\n      }\n      entry = (dword *)*entry;\n    } while (entry != (dword *)0x0);\n    return final_result;\n  }\n  final_result = process_and_verify_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,base_address);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_entries_000041d0",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "data",
                "uVar1": "result",
                "iVar2": "index",
                "pdVar3": "entry",
                "iVar4": "offset",
                "uVar5": "final_result",
                "iVar6": "counter",
                "puVar7": "data_ptr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[6] = 0;\n  fill_memory_00004622(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[0xb] = 0x4e27;\n  memory[8] = memory;\n  memory[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocate_and_initialize_memory_00004248(undefined4 memory_location,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int memory_offset;\n  \n  memory_offset = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_00004bd0(memory_location,memory_offset + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_00004622(allocated_memory + 3,0,memory_offset + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "memory_location",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "memory_offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_sensor_0000428c",
            "code": "\nvoid initialize_sensor_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_sensor_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_sensor_000042a4",
            "code": "\nvoid initializeSensor_000042a4(int sensorData)\n\n{\n  undefined4 status;\n  \n  initialize_sensor_0000428c();\n  if (*(int *)(sensorData + 0x18) == 0) {\n    *(undefined4 *)(sensorData + 0x48) = 0;\n    *(undefined4 *)(sensorData + 0x4c) = 0;\n    *(undefined4 *)(sensorData + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(sensorData + 0x28) = &DAT_0000423d;\n    if (sensorData == 0x1fff0284) {\n      status = 1;\n    }\n    if (sensorData == 0x1fff0284) {\n      *(undefined4 *)(sensorData + 0x18) = status;\n    }\n    status = reverseAndInitializeData(sensorData);\n    *(undefined4 *)(sensorData + 4) = status;\n    status = reverseAndInitializeData(sensorData);\n    *(undefined4 *)(sensorData + 8) = status;\n    status = reverseAndInitializeData(sensorData);\n    *(undefined4 *)(sensorData + 0xc) = status;\n    initializeMemory(*(undefined4 *)(sensorData + 4),4,0);\n    initializeMemory(*(undefined4 *)(sensorData + 8),9,1);\n    initializeMemory(*(undefined4 *)(sensorData + 0xc),0x12,2);\n    *(undefined4 *)(sensorData + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_sensor_000042a4",
                "param_1": "sensorData",
                "uVar1": "status",
                "reverse_and_initialize_data_00004314": "reverseAndInitializeData",
                "initialize_memory_000041f4": "initializeMemory"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "reverse_and_initialize_data_00004314",
            "code": "\nundefined4 * reverse_and_initialize_data_00004314(undefined4 *input_array)\n\n{\n  dword allocated_address;\n  int index;\n  undefined4 *current_ptr;\n  dword *current_dword_ptr;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_sensor_000042a4(0x1fff0284);\n  }\n  current_dword_ptr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    index = current_dword_ptr[1];\n    current_ptr = (undefined4 *)current_dword_ptr[2];\n    while (index = index + -1, -1 < index) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        current_ptr[3] = 0xffff0001;\n        current_ptr[0x19] = 0;\n        FUNC_000045e4(current_ptr + 0x16);\n        initialize_data_00004280();\n        current_ptr[1] = 0;\n        current_ptr[2] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        *current_ptr = 0;\n        current_ptr[6] = 0;\n        fill_memory_00004622(current_ptr + 0x17,0,8);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*current_dword_ptr == 0) {\n      allocated_address = allocate_and_initialize_memory_00004248(input_array,4);\n      *current_dword_ptr = allocated_address;\n      if (allocated_address == 0) {\n        initialize_data_00004280();\n        *input_array = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    current_dword_ptr = (dword *)*current_dword_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "reverse_and_initialize_data_00004314",
                "param_1": "input_array",
                "dVar1": "allocated_address",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "pdVar4": "current_dword_ptr"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int dataOffset,code *callbackFunction)\n\n{\n  uint result;\n  int *ptr;\n  int count;\n  uint combinedResult;\n  int innerCount;\n  \n  ptr = (int *)(dataOffset + 0x48);\n  combinedResult = 0;\n  do {\n    innerCount = ptr[1];\n    count = ptr[2];\n    while (innerCount = innerCount + -1, -1 < innerCount) {\n      if ((1 < *(ushort *)(count + 0xc)) && (*(short *)(count + 0xe) != -1)) {\n        result = (*callbackFunction)(count);\n        combinedResult = combinedResult | result;\n      }\n      count = count + 0x68;\n    }\n    ptr = (int *)*ptr;\n  } while (ptr != (int *)0x0);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "dataOffset",
                "param_2": "callbackFunction",
                "uVar1": "result",
                "piVar2": "ptr",
                "iVar3": "count",
                "uVar4": "combinedResult",
                "iVar5": "innerCount"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_sensor_data_00004418",
            "code": "\nuint processSensorData_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **sensorData;\n  byte *sensorDataPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_sensor_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  sensorData = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_sensor_000042a4();\n  }\n  if (sensorData == (byte **)&DAT_000079b8) {\n    sensorData = *(byte ***)(offset + 4);\n  }\n  else if (sensorData == (byte **)&DAT_000079d8) {\n    sensorData = *(byte ***)(offset + 8);\n  }\n  else if (sensorData == (byte **)&DAT_00007998) {\n    sensorData = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)sensorData[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(sensorData + 3) << 0x16))) {\n    FUNC_000045e8(sensorData[0x16]);\n  }\n  sensorDataPtr = sensorData[1];\n  sensorData[1] = sensorDataPtr + -1;\n  if ((int)(sensorDataPtr + -1) < 0) {\n    result = process_and_decrement_sensor_data_00005e10(offset,sensorData);\n  }\n  else {\n    sensorDataPtr = *sensorData;\n    *sensorData = sensorDataPtr + 1;\n    result = (uint)*sensorDataPtr;\n  }\n  if ((-1 < (int)sensorData[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(sensorData + 3) << 0x16))) {\n    FUNC_000045ec(sensorData[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_sensor_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "sensorData",
                "pbVar4": "sensorDataPtr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *inputValues,uint *dateTimeResult)\n\n{\n  int divisionResult;\n  uint adjustedYear;\n  uint adjustedDays;\n  uint adjustedMonth;\n  uint adjustedDay;\n  undefined4 inputValue1;\n  undefined4 inputValue2;\n  uint leapAdjustment;\n  bool isNegative;\n  \n  inputValue1 = *inputValues;\n  inputValue2 = inputValues[1];\n  divisionResult = perform_division_00006974(inputValue1,inputValue2,0x15180,0);\n  adjustedDays = 0x15180;\n  perform_division_00006974(inputValue1,inputValue2,0x15180,0);\n  isNegative = (int)adjustedDays < 0;\n  if (isNegative) {\n    adjustedDays = adjustedDays + 0x15180;\n  }\n  if (isNegative) {\n    adjustedYear = divisionResult + 0xafa6b;\n  }\n  else {\n    adjustedYear = divisionResult + 0xafa6c;\n  }\n  dateTimeResult[2] = adjustedDays / 0xe10;\n  dateTimeResult[1] = (adjustedDays % 0xe10) / 0x3c;\n  *dateTimeResult = (adjustedDays % 0xe10) % 0x3c;\n  dateTimeResult[6] = (adjustedYear + 3) % 7;\n  adjustedDays = adjustedYear;\n  if ((int)adjustedYear < 0) {\n    adjustedDays = adjustedYear - 0x23ab0;\n  }\n  adjustedYear = (adjustedDays / 0x23ab1) * -0x23ab1 + adjustedYear;\n  adjustedMonth = ((adjustedYear / 0x8eac + adjustedYear) - adjustedYear / 0x5b4) - adjustedYear / 0x23ab0;\n  adjustedDay = adjustedMonth / 0x16d;\n  adjustedYear = (adjustedDay / 100 - adjustedMonth / 0x5b4) + adjustedYear + adjustedDay * -0x16d;\n  leapAdjustment = adjustedYear * 5 + 2;\n  adjustedMonth = leapAdjustment / 0x99;\n  if (leapAdjustment < 0x5fa) {\n    divisionResult = 2;\n  }\n  else {\n    divisionResult = -10;\n  }\n  leapAdjustment = adjustedMonth + divisionResult;\n  divisionResult = (adjustedDays / 0x23ab1) * 400 + adjustedDay;\n  if (leapAdjustment < 2) {\n    divisionResult = divisionResult + 1;\n  }\n  if (adjustedYear < 0x132) {\n    if (((adjustedDay & 3) == 0) && (adjustedDay != (adjustedDay / 100) * 100)) {\n      adjustedDays = 1;\n    }\n    else {\n      adjustedDays = (uint)(adjustedDay % 400 == 0);\n    }\n    adjustedDays = adjustedYear + 0x3b + adjustedDays;\n  }\n  else {\n    adjustedDays = adjustedYear - 0x132;\n  }\n  dateTimeResult[7] = adjustedDays;\n  dateTimeResult[3] = (adjustedYear + 1) - (adjustedMonth * 0x99 + 2) / 5;\n  dateTimeResult[4] = leapAdjustment;\n  dateTimeResult[5] = divisionResult - 0x76c;\n  dateTimeResult[8] = 0;\n  return dateTimeResult;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "inputValues",
                "param_2": "dateTimeResult",
                "iVar1": "divisionResult",
                "uVar2": "adjustedYear",
                "uVar3": "adjustedDays",
                "uVar4": "adjustedMonth",
                "uVar5": "adjustedDay",
                "uVar6": "inputValue1",
                "uVar7": "inputValue2",
                "uVar8": "leapAdjustment",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_and_execute_functions_0000459c",
            "code": "\nvoid initialize_and_execute_functions_0000459c(void)\n\n{\n  code **function_pointers;\n  int iteration_count;\n  \n  function_pointers = (code **)&DAT_00007c58;\n  for (iteration_count = 0; iteration_count != 0; iteration_count = iteration_count + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  initialize_kernel_data_00000410();\n  function_pointers = (code **)&DAT_00007c58;\n  for (iteration_count = 0; iteration_count != 0; iteration_count = iteration_count + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_and_execute_functions_0000459c",
                "ppcVar1": "function_pointers",
                "iVar2": "iteration_count"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_array_000045ee",
            "code": "\nvoid copyAndReverseArray_000045ee(undefined *sourceArray,undefined *destinationArray,int arraySize)\n\n{\n  undefined *sourcePtr;\n  undefined *destinationPtr;\n  \n  destinationPtr = destinationArray + arraySize;\n  if ((destinationArray < sourceArray) && (sourceArray < destinationPtr)) {\n    sourcePtr = sourceArray + arraySize;\n    while (sourcePtr != sourceArray) {\n      destinationPtr = destinationPtr + -1;\n      sourcePtr = sourcePtr + -1;\n      *sourcePtr = *destinationPtr;\n    }\n  }\n  else {\n    sourceArray = sourceArray + -1;\n    for (; destinationArray != destinationPtr; destinationArray = destinationArray + 1) {\n      sourceArray = sourceArray + 1;\n      *sourceArray = *destinationArray;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_array_000045ee",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "arraySize",
                "puVar1": "sourcePtr",
                "puVar2": "destinationPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *memory,undefined value,int length)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + length;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "calculate_date_00004634",
            "code": "\nvoid calculateDate_00004634(uint *dateArray,uint initialValue,undefined4 extraValue)\n\n{\n  int monthDays;\n  uint remainder;\n  uint tempValue;\n  int daysToAdd;\n  bool isNegative;\n  uint *divisionResult;\n  uint dayValue;\n  undefined4 stackTemp;\n  \n  divisionResult = dateArray;\n  dayValue = initialValue;\n  stackTemp = extraValue;\n  if (0x3b < *dateArray) {\n    divide_and_remainder_00005584(&divisionResult,*dateArray,0x3c);\n    remainder = dateArray[1] + (int)divisionResult;\n    dateArray[1] = remainder;\n    if ((int)dayValue < 0) {\n      remainder = remainder - 1;\n      *dateArray = dayValue + 0x3c;\n    }\n    else {\n      *dateArray = dayValue;\n    }\n    if ((int)dayValue < 0) {\n      dateArray[1] = remainder;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    divide_and_remainder_00005584(&divisionResult,dateArray[1],0x3c);\n    isNegative = (int)dayValue < 0;\n    tempValue = dateArray[2] + (int)divisionResult;\n    dateArray[2] = tempValue;\n    remainder = dayValue;\n    if (isNegative) {\n      remainder = dayValue + 0x3c;\n      tempValue = tempValue - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = remainder;\n    }\n    if (isNegative) {\n      dateArray[1] = remainder;\n    }\n    if (isNegative) {\n      dateArray[2] = tempValue;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    divide_and_remainder_00005584(&divisionResult,dateArray[2],0x18);\n    isNegative = (int)dayValue < 0;\n    tempValue = dateArray[3] + (int)divisionResult;\n    dateArray[3] = tempValue;\n    remainder = dayValue;\n    if (isNegative) {\n      remainder = dayValue + 0x18;\n      tempValue = tempValue - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = remainder;\n    }\n    if (isNegative) {\n      dateArray[2] = remainder;\n    }\n    if (isNegative) {\n      dateArray[3] = tempValue;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    divide_and_remainder_00005584(&divisionResult,dateArray[4],0xc);\n    isNegative = (int)dayValue < 0;\n    remainder = dateArray[5] + (int)divisionResult;\n    dateArray[5] = remainder;\n    if (isNegative) {\n      dayValue = dayValue + 0xc;\n      remainder = remainder - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[4] = dayValue;\n    }\n    if (isNegative) {\n      dateArray[5] = remainder;\n    }\n  }\n  remainder = dateArray[5];\n  if ((remainder & 3) == 0) {\n    if (remainder == (remainder / 100) * 100) {\n      if ((remainder + 0x76c) % 400 == 0) {\n        daysToAdd = 0x1d;\n      }\n      else {\n        daysToAdd = 0x1c;\n      }\n    }\n    else {\n      daysToAdd = 0x1d;\n    }\n  }\n  else {\n    daysToAdd = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      remainder = dateArray[4];\n      dateArray[4] = remainder - 1;\n      if (remainder - 1 == 0xffffffff) {\n        tempValue = dateArray[5];\n        remainder = tempValue - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = remainder;\n        if ((remainder & 3) == 0) {\n          if (remainder == (remainder / 100) * 100) {\n            if ((tempValue + 0x76b) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n      monthDays = daysToAdd;\n      if (dateArray[4] != 1) {\n        monthDays = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = monthDays + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      remainder = dateArray[4];\n      monthDays = daysToAdd;\n      if (remainder != 1) {\n        monthDays = (&DAT_000079fc)[remainder];\n      }\n      if ((int)dateArray[3] <= monthDays) break;\n      dateArray[3] = dateArray[3] - monthDays;\n      dateArray[4] = remainder + 1;\n      if (remainder + 1 == 0xc) {\n        tempValue = dateArray[5];\n        remainder = tempValue + 1;\n        dateArray[4] = 0;\n        dateArray[5] = remainder;\n        if ((remainder & 3) == 0) {\n          if (remainder % 100 == 0) {\n            if ((tempValue + 0x76d) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "calculate_date_00004634",
                "param_1": "dateArray",
                "param_2": "initialValue",
                "param_3": "extraValue",
                "iVar1": "monthDays",
                "uVar2": "remainder",
                "uVar3": "tempValue",
                "iVar4": "daysToAdd",
                "bVar5": "isNegative",
                "local_20": "divisionResult",
                "local_1c": "dayValue",
                "uStack_18": "stackTemp"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_new_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateNewDate_000047e4(int *date)\n\n{\n  longlong totalDays;\n  longlong newTotalDays;\n  int *memoryAddress;\n  uint tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int updatedTotalDays;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  int tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint resultDays;\n  bool isDivisible;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  calculate_date_00004634(date);\n  tempVar8 = date[5];\n  tempVar7 = date[3] + -1 + *(int *)(&DAT_00007a2c + date[4] * 4);\n  if (((1 < date[4]) && ((tempVar8 & 3) == 0)) &&\n     ((tempVar8 != (tempVar8 / 100) * 100 || (tempVar8 + 0x76c == ((tempVar8 + 0x76c) / 400) * 400)))) {\n    tempVar7 = tempVar7 + 1;\n  }\n  date[7] = tempVar7;\n  if (20000 < (int)&DAT_00002710 + tempVar8) {\n    updatedTotalDays = -1;\n    tempVar2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)tempVar8 < 0x47) {\n    if (tempVar8 != 0x46) {\n      for (tempVar5 = 0x45; (int)tempVar8 < (int)tempVar5; tempVar5 = tempVar5 - 1) {\n        if ((tempVar5 & 3) == 0) {\n          if (tempVar5 == (tempVar5 / 100) * 100) {\n            if ((tempVar5 + 0x76c) % 400 == 0) {\n              updatedTotalDays = 0x16e;\n            }\n            else {\n              updatedTotalDays = 0x16d;\n            }\n          }\n          else {\n            updatedTotalDays = 0x16e;\n          }\n        }\n        else {\n          updatedTotalDays = 0x16d;\n        }\n        tempVar7 = tempVar7 - updatedTotalDays;\n      }\n      if ((tempVar5 & 3) == 0) {\n        if (tempVar8 == (tempVar8 / 100) * 100) {\n          updatedTotalDays = 0x16d;\n          if ((tempVar8 + 0x76c) % 400 == 0) {\n            updatedTotalDays = 0x16e;\n          }\n        }\n        else {\n          updatedTotalDays = 0x16e;\n        }\n      }\n      else {\n        updatedTotalDays = 0x16d;\n      }\n      tempVar7 = tempVar7 - updatedTotalDays;\n    }\n  }\n  else {\n    tempVar5 = 0x46;\n    do {\n      if ((tempVar5 & 3) == 0) {\n        if (tempVar5 % 100 == 0) {\n          if ((tempVar5 + 0x76c) % 400 == 0) {\n            updatedTotalDays = 0x16e;\n          }\n          else {\n            updatedTotalDays = 0x16d;\n          }\n        }\n        else {\n          updatedTotalDays = 0x16e;\n        }\n      }\n      else {\n        updatedTotalDays = 0x16d;\n      }\n      tempVar5 = tempVar5 + 1;\n      tempVar7 = tempVar7 + updatedTotalDays;\n    } while (tempVar8 != tempVar5);\n  }\n  totalDays = (longlong)tempVar7 * 0x15180 + (longlong)(date[2] * 0xe10 + date[1] * 0x3c + *date)\n  ;\n  resultDays = (uint)totalDays;\n  updatedTotalDays = (int)((ulonglong)totalDays >> 0x20);\n  get_data_pointer_000050e8();\n  process_data_00005100();\n  tempVar5 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    tempVar8 = memoryAddress[10];\n    updatedTotalDays = (uint)totalDays + tempVar8;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar8 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar8);\n  }\n  else {\n    tempVar10 = date[8];\n    tempVar9 = tempVar10;\n    if (0 < (int)tempVar10) {\n      tempVar9 = 1;\n    }\n    if ((memoryAddress[1] == date[5] + 0x76c) || (tempVar2 = calculate_week_day_00004f98(), tempVar2 != 0)) {\n      tempVar6 = memoryAddress[0x14];\n      tempVar1 = memoryAddress[0x12];\n      tempVar4 = memoryAddress[10];\n      tempVar5 = tempVar1 - tempVar4;\n      tempVar2 = (memoryAddress[0x13] - ((int)tempVar4 >> 0x1f)) - (uint)(tempVar1 < tempVar4);\n      if (((int)((updatedTotalDays - tempVar2) - (uint)(resultDays < tempVar5)) < 0 ==\n           (SBORROW4(updatedTotalDays,tempVar2) != SBORROW4(updatedTotalDays - tempVar2,(uint)(resultDays < tempVar5)))) &&\n         (tempVar3 = (memoryAddress[0x13] - ((int)tempVar6 >> 0x1f)) - (uint)(tempVar1 < tempVar6),\n         isDivisible = resultDays < tempVar1 - tempVar6,\n         (int)((updatedTotalDays - tempVar3) - (uint)isDivisible) < 0 !=\n         (SBORROW4(updatedTotalDays,tempVar3) != SBORROW4(updatedTotalDays - tempVar3,(uint)isDivisible)))) goto LAB_00004a88;\n      tempVar1 = memoryAddress[8] - tempVar6;\n      tempVar3 = (memoryAddress[9] - ((int)tempVar6 >> 0x1f)) - (uint)((uint)memoryAddress[8] < tempVar6);\n      if (*memoryAddress != 0) {\n        if ((int)((updatedTotalDays - tempVar3) - (uint)(resultDays < tempVar1)) < 0 ==\n            (SBORROW4(updatedTotalDays,tempVar3) != SBORROW4(updatedTotalDays - tempVar3,(uint)(resultDays < tempVar1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar5 = 0;\n        if ((int)tempVar10 < 0) goto LAB_00004934;\nLAB_00004a14:\n        resultDays = tempVar9 ^ tempVar5;\n        tempVar9 = tempVar5;\n        if (resultDays == 1) {\n          if (tempVar5 == 0) {\n            updatedTotalDays = tempVar6 - tempVar4;\n          }\n          else {\n            updatedTotalDays = tempVar4 - tempVar6;\n          }\n          tempVar2 = date[3];\n          *date = *date + updatedTotalDays;\n          newTotalDays = totalDays + updatedTotalDays;\n          calculate_date_00004634(date);\n          tempVar2 = date[3] - tempVar2;\n          totalDays = totalDays + updatedTotalDays;\n          if (tempVar2 != 0) {\n            if (tempVar2 < 2) {\n              if (tempVar2 == -2 || tempVar2 + 2 < 0 != SCARRY4(tempVar2,2)) {\n                tempVar2 = 1;\n              }\n            }\n            else {\n              tempVar2 = -1;\n            }\n            updatedTotalDays = tempVar2 + date[7];\n            tempVar7 = tempVar7 + tempVar2;\n            if (updatedTotalDays < 0) {\n              tempVar5 = tempVar8 - 1;\n              if ((tempVar5 & 3) == 0) {\n                if (tempVar5 == (tempVar5 / 100) * 100) {\n                  updatedTotalDays = 0x16d;\n                  if ((tempVar8 + 0x76b) % 400 != 0) {\n                    updatedTotalDays = 0x16c;\n                  }\n                }\n                else {\n                  updatedTotalDays = 0x16d;\n                }\n              }\n              else {\n                updatedTotalDays = 0x16c;\n              }\n            }\n            else {\n              if ((tempVar8 & 3) == 0) {\n                if (tempVar8 == (tempVar8 / 100) * 100) {\n                  tempVar2 = 0x16d;\n                  if ((tempVar8 + 0x76c) % 400 == 0) {\n                    tempVar2 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar2 = 0x16e;\n                }\n              }\n              else {\n                tempVar2 = 0x16d;\n              }\n              if (tempVar2 <= updatedTotalDays) {\n                updatedTotalDays = updatedTotalDays - tempVar2;\n              }\n            }\n            date[7] = updatedTotalDays;\n            totalDays = newTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((updatedTotalDays - tempVar3) - (uint)(resultDays < tempVar1)) < 0 !=\n          (SBORROW4(updatedTotalDays,tempVar3) != SBORROW4(updatedTotalDays - tempVar3,(uint)(resultDays < tempVar1)))) {\nLAB_0000491e:\n        if ((int)((updatedTotalDays - tempVar2) - (uint)(resultDays < tempVar5)) < 0 ==\n            (SBORROW4(updatedTotalDays,tempVar2) != SBORROW4(updatedTotalDays - tempVar2,(uint)(resultDays < tempVar5))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)tempVar10) {\n        tempVar5 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar5 = tempVar9;\n      if (tempVar9 != 1) goto LAB_00004934;\n    }\n    tempVar8 = memoryAddress[0x14];\n    updatedTotalDays = (uint)totalDays + tempVar8;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar8 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar8);\n    tempVar5 = 1;\n  }\n  get_memory_address_000050f4();\n  date[8] = tempVar5;\n  date[6] = (tempVar7 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar2,updatedTotalDays);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_new_date_000047e4",
                "param_1": "date",
                "lVar1": "totalDays",
                "lVar2": "newTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "tempVar1",
                "iVar5": "tempVar2",
                "iVar6": "tempVar3",
                "iVar7": "updatedTotalDays",
                "uVar8": "tempVar4",
                "uVar9": "tempVar5",
                "uVar10": "tempVar6",
                "iVar11": "tempVar7",
                "uVar12": "tempVar8",
                "uVar13": "tempVar9",
                "uVar14": "tempVar10",
                "uVar15": "resultDays",
                "bVar16": "isDivisible"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_00004b34",
            "code": "\nvoid initializeData_00004b34(undefined4 *outputArray,int arraySize,undefined4 param3,undefined4 param4)\n\n{\n  int *ptr1;\n  int **extraOutR1;\n  int **ptr2;\n  int **ptr3;\n  int **ptr4;\n  int **ptr5;\n  bool isTrue;\n  \n  if (arraySize == 0) {\n    return;\n  }\n  ptr5 = (int **)(arraySize + -4);\n  if (*(int *)(arraySize + -4) < 0) {\n    ptr5 = (int **)((int)ptr5 + *(int *)(arraySize + -4));\n  }\n  initialize_data_00005790();\n  ptr3 = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    ptr5[1] = (int *)0x0;\n    ptr2 = extraOutR1;\n    DAT_1fff0db4 = ptr5;\n  }\n  else {\n    ptr4 = DAT_1fff0db4;\n    if (ptr5 < DAT_1fff0db4) {\n      ptr2 = (int **)*ptr5;\n      ptr3 = (int **)((int)ptr5 + (int)ptr2);\n      isTrue = DAT_1fff0db4 == ptr3;\n      if (isTrue) {\n        ptr3 = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      ptr5[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = ptr5;\n      if (isTrue) {\n        ptr3 = (int **)((int)ptr3 + (int)ptr2);\n        *ptr5 = (int *)ptr3;\n      }\n    }\n    else {\n      do {\n        ptr3 = ptr4;\n        ptr4 = (int **)ptr3[1];\n        if (ptr4 == (int **)0x0) break;\n      } while (ptr4 <= ptr5);\n      ptr2 = (int **)*ptr3;\n      if ((int **)((int)ptr3 + (int)ptr2) == ptr5) {\n        ptr2 = (int **)((int)ptr2 + (int)*ptr5);\n        *ptr3 = (int *)ptr2;\n        if (ptr4 == (int **)((int)ptr3 + (int)ptr2)) {\n          ptr1 = *ptr4;\n          ptr3[1] = ptr4[1];\n          ptr2 = (int **)((int)ptr2 + (int)ptr1);\n          *ptr3 = (int *)ptr2;\n        }\n      }\n      else if (ptr5 < (int **)((int)ptr3 + (int)ptr2)) {\n        *outputArray = 0xc;\n      }\n      else {\n        ptr2 = (int **)((int)ptr5 + (int)*ptr5);\n        isTrue = ptr4 == ptr2;\n        if (isTrue) {\n          ptr2 = (int **)*ptr4;\n          ptr4 = (int **)ptr4[1];\n        }\n        ptr5[1] = (int *)ptr4;\n        if (isTrue) {\n          ptr2 = (int **)((int)ptr2 + (int)*ptr5);\n          *ptr5 = (int *)ptr2;\n        }\n        ptr3[1] = (int *)ptr5;\n      }\n    }\n  }\n  initialize_data_0000579c(outputArray,ptr2,ptr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_00004b34",
                "param_1": "outputArray",
                "param_2": "arraySize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "ptr1",
                "extraout_r1": "extraOutR1",
                "ppiVar2": "ptr2",
                "ppiVar3": "ptr3",
                "ppiVar4": "ptr4",
                "ppiVar5": "ptr5",
                "bVar6": "isTrue"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *param_1,uint size,undefined4 default_size,undefined4 offset)\n\n{\n  uint *current;\n  int difference;\n  uint temp;\n  uint *previous;\n  uint adjusted_size;\n  \n  adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *param_1 = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    current = DAT_1fff0db4;\n    for (previous = DAT_1fff0db4; previous != (uint *)0x0; previous = (uint *)previous[1]) {\n      temp = *previous - adjusted_size;\n      if (-1 < (int)temp) {\n        if (0xb < temp) {\n          *previous = temp;\n          previous = (uint *)((int)previous + temp);\n          goto LAB_00004c34;\n        }\n        if (current == previous) {\n          DAT_1fff0db4 = (uint *)previous[1];\n        }\n        if (current != previous) {\n          current[1] = (uint)(uint *)previous[1];\n        }\n        goto LAB_00004c42;\n      }\n      current = previous;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_offset_00000428(param_1,0,current,0,offset);\n    }\n    current = (uint *)update_offset_00000428(param_1,adjusted_size);\n    if ((current != (uint *)0xffffffff) &&\n       ((previous = (uint *)((int)current + 3U & 0xfffffffc), current == previous ||\n        (difference = update_offset_00000428(param_1,(int)previous - (int)current), difference != -1)))) {\nLAB_00004c34:\n      *previous = adjusted_size;\nLAB_00004c42:\n      initialize_data_0000579c(param_1);\n      adjusted_size = (int)previous + 0xbU & 0xfffffff8;\n      difference = adjusted_size - (int)(previous + 1);\n      if (difference == 0) {\n        return adjusted_size;\n      }\n      *(uint *)((int)previous + difference) = (int)(previous + 1) - adjusted_size;\n      return adjusted_size;\n    }\n    *param_1 = 0xc;\n    initialize_data_0000579c(param_1);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_2": "size",
                "param_3": "default_size",
                "param_4": "offset",
                "puVar1": "current",
                "iVar2": "difference",
                "uVar3": "temp",
                "puVar4": "previous",
                "uVar5": "adjusted_size"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_sensor_data_00004c84",
            "code": "\nvoid process_sensor_data_00004c84(undefined4 initial_param,undefined4 secondary_param,undefined4 tertiary_param,undefined4 quaternary_param)\n\n{\n  dword data_offset;\n  undefined4 initial_value;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  initial_value = initial_param;\n  param_2_copy = secondary_param;\n  param_3_copy = tertiary_param;\n  param_4_copy = quaternary_param;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_sensor_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_sensor_data_00004c84_000057f8(data_offset,*(undefined4 *)(data_offset + 8),initial_param,&param_2_copy,initial_value,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_sensor_data_00004c84",
                "param_1": "initial_param",
                "param_2": "secondary_param",
                "param_3": "tertiary_param",
                "param_4": "quaternary_param",
                "dVar1": "data_offset",
                "uVar2": "initial_value",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_and_update_data_00004cb4",
            "code": "\nuint process_and_update_data_00004cb4(uint input_data)\n\n{\n  dword offset;\n  undefined4 *sensor_data_ptr;\n  uint remaining_iterations;\n  undefined *current_ptr;\n  undefined4 register4;\n  undefined4 register5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_sensor_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  sensor_data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_sensor_000042a4();\n  }\n  if (sensor_data_ptr == &DAT_000079b8) {\n    sensor_data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (sensor_data_ptr == (undefined4 *)&DAT_000079d8) {\n    sensor_data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (sensor_data_ptr == (undefined4 *)&DAT_00007998) {\n    sensor_data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(sensor_data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(sensor_data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(sensor_data_ptr[0x16]);\n  }\n  remaining_iterations = sensor_data_ptr[2] - 1;\n  sensor_data_ptr[2] = remaining_iterations;\n  if (((int)remaining_iterations < 0) && (((int)remaining_iterations < (int)sensor_data_ptr[6] || (remaining_iterations = input_data & 0xff, remaining_iterations == 10))))\n  {\n    input_data = process_data_00005404(offset,input_data,sensor_data_ptr,remaining_iterations,register4,register5);\n  }\n  else {\n    current_ptr = (undefined *)*sensor_data_ptr;\n    *sensor_data_ptr = current_ptr + 1;\n    *current_ptr = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(sensor_data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(sensor_data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(sensor_data_ptr[0x16]);\n  }\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_and_update_data_00004cb4",
                "param_1": "input_data",
                "dVar1": "offset",
                "puVar2": "sensor_data_ptr",
                "uVar3": "remaining_iterations",
                "puVar4": "current_ptr",
                "unaff_r4": "register4",
                "unaff_r5": "register5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_sensor_data_00004db8",
            "code": "\nundefined4 process_sensor_data_00004db8(int data_length)\n\n{\n  char current_char;\n  dword sensor_data_offset;\n  int result;\n  char *sensor_data_index;\n  char **sensor_data_ptr;\n  undefined4 return_value;\n  char *current_char_ptr;\n  \n  sensor_data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_sensor_000042a4();\n  }\n  sensor_data_ptr = *(char ***)(sensor_data_offset + 8);\n  if (*(int *)(sensor_data_offset + 0x18) == 0) {\n    initialize_sensor_000042a4(sensor_data_offset);\n  }\n  if (sensor_data_ptr == (char **)&DAT_000079b8) {\n    sensor_data_ptr = *(char ***)(sensor_data_offset + 4);\n  }\n  else if (sensor_data_ptr == (char **)&DAT_000079d8) {\n    sensor_data_ptr = *(char ***)(sensor_data_offset + 8);\n  }\n  else if (sensor_data_ptr == (char **)&DAT_00007998) {\n    sensor_data_ptr = *(char ***)(sensor_data_offset + 0xc);\n  }\n  if ((-1 < (int)sensor_data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(sensor_data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(sensor_data_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(sensor_data_ptr + 3) << 0x1c) < 0) && (sensor_data_ptr[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(sensor_data_offset,sensor_data_ptr), result == 0)) {\n    current_char_ptr = (char *)(data_length + -1);\n    do {\n      while( true ) {\n        current_char_ptr = current_char_ptr + 1;\n        current_char = *current_char_ptr;\n        sensor_data_index = sensor_data_ptr[2] + -1;\n        sensor_data_ptr[2] = sensor_data_index;\n        if (current_char == '\\0') {\n          if (-1 < (int)sensor_data_index) {\n            current_char_ptr = *sensor_data_ptr;\n            return_value = 10;\n            *sensor_data_ptr = current_char_ptr + 1;\n            *current_char_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(sensor_data_offset,10,sensor_data_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)sensor_data_index < 0) && (((int)sensor_data_index < (int)sensor_data_ptr[6] || (current_char == '\\n')))) break;\n        sensor_data_index = *sensor_data_ptr;\n        *sensor_data_ptr = sensor_data_index + 1;\n        *sensor_data_index = current_char;\n      }\n      result = process_data_00005404(sensor_data_offset,current_char,sensor_data_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)sensor_data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(sensor_data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(sensor_data_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_sensor_data_00004db8",
                "param_1": "data_length",
                "cVar1": "current_char",
                "dVar2": "sensor_data_offset",
                "iVar3": "result",
                "pcVar4": "sensor_data_index",
                "pcVar7": "current_char_ptr",
                "ppcVar5": "sensor_data_ptr",
                "uVar6": "return_value"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 inputArray,int paramAddress)\n\n{\n  int copiedValue;\n  uint updatedValue;\n  bool isCopiedPositive;\n  \n  copiedValue = copy_and_decrement_00000490(inputArray,(int)*(short *)(paramAddress + 0xe));\n  isCopiedPositive = -1 < copiedValue;\n  if (isCopiedPositive) {\n    updatedValue = *(int *)(paramAddress + 0x54) + copiedValue;\n  }\n  else {\n    updatedValue = *(ushort *)(paramAddress + 0xc) & 0xffffefff;\n  }\n  if (isCopiedPositive) {\n    *(uint *)(paramAddress + 0x54) = updatedValue;\n  }\n  if (!isCopiedPositive) {\n    *(short *)(paramAddress + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "inputArray",
                "param_2": "paramAddress",
                "iVar1": "copiedValue",
                "uVar2": "updatedValue",
                "bVar3": "isCopiedPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "initialize_and_copy_data_00004dee",
            "code": "\nundefined4 initialize_and_copy_data_00004dee(undefined4 output_data,int input_data,undefined4 source_data,undefined4 destination_data)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x17) < 0) {\n    initialize_variable(output_data,(int)*(short *)(input_data + 0xe),0,2);\n  }\n  *(ushort *)(input_data + 0xc) = *(ushort *)(input_data + 0xc) & 0xefff;\n  result = copy_and_return_data(source_data,destination_data);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "initialize_and_copy_data_00004dee",
                "param_1": "output_data",
                "param_2": "input_data",
                "param_3": "source_data",
                "param_4": "destination_data",
                "uVar1": "result",
                "initialize_variable_000004f2": "initialize_variable",
                "copy_and_return_data_00000e38": "copy_and_return_data"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "initialize_and_configure_component_00004e26",
            "code": "\nvoid initializeAndConfigureComponent_00004e26(undefined4 componentData,int componentAddress)\n\n{\n  int initializedVariable;\n  ushort updatedValue;\n  bool isInitializationFailed;\n  \n  initializedVariable = initialize_variable_000004f2(componentData,(int)*(short *)(componentAddress + 0xe));\n  isInitializationFailed = initializedVariable == -1;\n  if (isInitializationFailed) {\n    updatedValue = *(ushort *)(componentAddress + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(componentAddress + 0x54) = initializedVariable;\n    updatedValue = *(ushort *)(componentAddress + 0xc) | 0x1000;\n  }\n  if (isInitializationFailed) {\n    *(ushort *)(componentAddress + 0xc) = updatedValue;\n  }\n  if (!isInitializationFailed) {\n    *(ushort *)(componentAddress + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "initialize_and_configure_component_00004e26",
                "param_1": "componentData",
                "param_2": "componentAddress",
                "iVar1": "initializedVariable",
                "uVar2": "updatedValue",
                "bVar3": "isInitializationFailed"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *inputArray1,byte *inputArray2)\n\n{\n  byte currentByte1;\n  uint currentByte2;\n  bool isDifferent;\n  \n  do {\n    currentByte2 = (uint)*inputArray1;\n    currentByte1 = *inputArray2;\n    isDifferent = currentByte2 == 1;\n    if (currentByte2 != 0) {\n      isDifferent = currentByte2 == currentByte1;\n    }\n    inputArray1 = inputArray1 + 1;\n    inputArray2 = inputArray2 + 1;\n  } while (isDifferent);\n  return currentByte2 - currentByte1;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "bVar1": "currentByte1",
                "uVar2": "currentByte2",
                "bVar3": "isDifferent"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_byte_arrays_00004e66",
            "code": "\nint compareByteArrays_00004e66(byte *array1,int startPos,int length)\n\n{\n  byte *ptr1;\n  int difference;\n  byte *ptr2;\n  uint temp;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    ptr2 = (byte *)(startPos + -1);\n    ptr1 = array1;\n    do {\n      temp = (uint)*ptr1;\n      ptr2 = ptr2 + 1;\n      if ((temp != *ptr2) || (ptr1 + 1 == array1 + length)) break;\n      ptr1 = ptr1 + 1;\n    } while (temp != 0);\n    difference = temp - *ptr2;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_byte_arrays_00004e66",
                "param_1": "array1",
                "param_2": "startPos",
                "param_3": "length",
                "pbVar1": "ptr1",
                "iVar2": "difference",
                "pbVar3": "ptr2",
                "uVar4": "temp"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  uint isNegative;\n  uint digit;\n  int isOverflow;\n  uint maxUnsigned;\n  uint quotient;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxUnsigned = isNegative + 0x7fffffff;\n  isOverflow = 0;\n  quotient = maxUnsigned / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (isOverflow != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(maxUnsigned - base * quotient) < (int)digit)))) {\n        isOverflow = -1;\n      }\n      else {\n        result = result * base + digit;\n        isOverflow = 1;\n      }\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (isOverflow == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxUnsigned;\n    if (output == (byte **)0x0) {\n      return maxUnsigned;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (isOverflow == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "isOverflow",
                "uVar6": "maxUnsigned",
                "uVar7": "quotient",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_week_day_00004f98",
            "code": "\nundefined4 calculateWeekDay_00004f98(uint year)\n\n{\n  uint *memory;\n  undefined4 result;\n  uint weekDayIndex;\n  int additionalDays;\n  uint *weekDayTable;\n  int totalDays;\n  uint isLeapYear;\n  int tableIndex;\n  int daysToAdd;\n  uint isDivisibleBy400;\n  \n  memory = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    totalDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memory[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    weekDayTable = memory;\n    do {\n      weekDayIndex = weekDayTable[5];\n      if (*(char *)(weekDayTable + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)weekDayIndex < 0x3c) {\n            additionalDays = 0;\n          }\n          else {\n            additionalDays = 1;\n          }\n        }\n        else {\n          additionalDays = 0;\n        }\n        additionalDays = additionalDays + totalDays + weekDayIndex + -1;\n      }\n      else if (*(char *)(weekDayTable + 2) == 'D') {\n        additionalDays = totalDays + weekDayIndex;\n      }\n      else {\n        isLeapYear = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        tableIndex = 0;\n        additionalDays = totalDays;\n        while( true ) {\n          tableIndex = tableIndex + 1;\n          if ((int)weekDayTable[3] <= tableIndex) break;\n          additionalDays = additionalDays + *(int *)(&UNK_00007b98 + tableIndex * 4 + isLeapYear * 0x30);\n        }\n        daysToAdd = weekDayIndex - (additionalDays + 4U) % 7;\n        if (daysToAdd < 0) {\n          daysToAdd = daysToAdd + 7;\n        }\n        for (daysToAdd = (weekDayTable[4] - 1) * 7 + daysToAdd;\n            *(int *)(&UNK_00007b98 + tableIndex * 4 + isLeapYear * 0x30) <= daysToAdd; daysToAdd = daysToAdd + -7) {\n        }\n        additionalDays = additionalDays + daysToAdd;\n      }\n      weekDayIndex = weekDayTable[10] + additionalDays * 0x15180 + weekDayTable[6];\n      weekDayTable[8] = weekDayIndex;\n      weekDayTable[9] = (int)weekDayIndex >> 0x1f;\n      weekDayTable = weekDayTable + 10;\n    } while (memory + 0x14 != weekDayTable);\n    weekDayIndex = memory[9];\n    isDivisibleBy400 = memory[0x13];\n    *memory = (uint)((int)((weekDayIndex - isDivisibleBy400) - (uint)(memory[8] < memory[0x12])) < 0 !=\n                    (SBORROW4(weekDayIndex,isDivisibleBy400) !=\n                    SBORROW4(weekDayIndex - isDivisibleBy400,(uint)(memory[8] < memory[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_week_day_00004f98",
                "param_1": "year",
                "puVar1": "memory",
                "uVar2": "result",
                "uVar3": "weekDayIndex",
                "iVar4": "additionalDays",
                "puVar5": "weekDayTable",
                "iVar6": "totalDays",
                "uVar7": "isLeapYear",
                "iVar8": "tableIndex",
                "iVar9": "daysToAdd",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_pointer_000050e8",
            "code": "\nundefined * get_data_pointer_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_pointer_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_data_00005100",
            "code": "\nvoid processData_00005100(void)\n\n{\n  dword relOffset;\n  int memoryAddress;\n  char *matchingString;\n  int comparisonResult;\n  int returnValue;\n  undefined typeIndicator;\n  char *currentString;\n  bool foundMFlag;\n  ushort *ptrLocal3a;\n  int *ptrLocal30;\n  ushort *ptrLocal38;\n  int *ptrLocal30_2;\n  ushort hours;\n  ushort minutes;\n  ushort seconds;\n  ushort day;\n  ushort month;\n  ushort year;\n  int tmp;\n  char *tmpArr [2];\n  \n  relOffset = relocationArray[16].r_offset;\n  memoryAddress = getMemoryAddress();\n  matchingString = (char *)findMatchingString(relOffset,&DAT_00007a5c);\n  if (matchingString == (char *)0x0) {\n    relocationArray[28].r_info = (dword)&DAT_00007a5f;\n    relocationArray[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = matchingString;\n    DAT_1fff0ddc = matchingString;\n    initializeRelocationData(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = compareByteArrays(), comparisonResult != 0)) {\n    initializeRelocationData(DAT_1fff0dd4);\n    comparisonResult = findLastCharIndex(matchingString);\n    DAT_1fff0dd4 = allocateMemory(relOffset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copyString(DAT_1fff0dd4,matchingString);\n    }\n    if (*matchingString == ':') {\n      matchingString = matchingString + 1;\n    }\n    comparisonResult = processAndReverse(matchingString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&tmp);\n    if (0 < comparisonResult) {\n      currentString = matchingString + tmp;\n      if (matchingString[tmp] == '-') {\n        currentString = currentString + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (matchingString[tmp] == '+') {\n          currentString = currentString + 1;\n        }\n        comparisonResult = 1;\n      }\n      minutes = 0;\n      seconds = 0;\n      ptrLocal3a = &minutes;\n      ptrLocal30 = &tmp;\n      ptrLocal38 = &seconds;\n      ptrLocal30_2 = &tmp;\n      returnValue = processAndReverse(currentString,\"%hu%n:%hu%n:%hu%n\",&hours,&tmp,&minutes,&tmp,\n                           &seconds,&tmp);\n      if (0 < returnValue) {\n        *(uint *)(memoryAddress + 0x28) =\n             ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n        relocationArray[28].r_info = (dword)&DAT_1fff0dc7;\n        currentString = currentString + tmp;\n        comparisonResult = processAndReverse(currentString,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&tmp,ptrLocal3a,ptrLocal30,ptrLocal38,\n                             ptrLocal30_2);\n        if (comparisonResult < 1) {\n          relocationArray[29].r_offset = relocationArray[28].r_info;\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocationArray[29].r_offset = (dword)&DAT_1fff0dbc;\n          matchingString = currentString + tmp;\n          if (currentString[tmp] == '-') {\n            matchingString = matchingString + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (currentString[tmp] == '+') {\n              matchingString = matchingString + 1;\n            }\n            comparisonResult = 1;\n          }\n          hours = 0;\n          minutes = 0;\n          seconds = 0;\n          tmp = 0;\n          returnValue = processAndReverse(matchingString,\"%hu%n:%hu%n:%hu%n\",&hours,&tmp,&minutes,&tmp,\n                               &seconds,&tmp);\n          if (returnValue < 1) {\n            comparisonResult = *(int *)(memoryAddress + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n          }\n          *(int *)(memoryAddress + 0x50) = comparisonResult;\n          matchingString = matchingString + tmp;\n          foundMFlag = false;\n          comparisonResult = memoryAddress;\n          while( true ) {\n            if (*matchingString == ',') {\n              matchingString = matchingString + 1;\n            }\n            if (*matchingString == 'M') {\n              returnValue = processAndReverse(matchingString,\"M%hu%n.%hu%n.%hu%n\",&day,&tmp,&month,\n                                   &tmp,&year,&tmp);\n              if (returnValue != 3) {\n                return;\n              }\n              if (0xb < day - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)day;\n              *(uint *)(comparisonResult + 0x10) = (uint)month;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)year;\n              currentString = matchingString + tmp;\n            }\n            else {\n              if (*matchingString == 'J') {\n                matchingString = matchingString + 1;\n                typeIndicator = 0x4a;\n              }\n              else {\n                typeIndicator = 0x44;\n              }\n              year = convertStringToNumber(matchingString,tmpArr,10);\n              currentString = tmpArr[0];\n              if (tmpArr[0] == matchingString) {\n                if (foundMFlag) {\n                  *(undefined *)(memoryAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0x34) = 0xb;\n                  *(undefined4 *)(memoryAddress + 0x38) = 1;\n                  *(undefined4 *)(memoryAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memoryAddress + 8) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0xc) = 3;\n                  *(undefined4 *)(memoryAddress + 0x10) = 2;\n                  *(undefined4 *)(memoryAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = typeIndicator;\n                *(uint *)(comparisonResult + 0x14) = (uint)year;\n              }\n            }\n            hours = 2;\n            minutes = 0;\n            seconds = 0;\n            tmp = 0;\n            if (*currentString == '/') {\n              processAndReverse(currentString,&DAT_00007a85,&hours,&tmp,&minutes,&tmp,&seconds,\n                           &tmp);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds;\n            comparisonResult = comparisonResult + 0x28;\n            matchingString = currentString + tmp;\n            if (foundMFlag) break;\n            foundMFlag = true;\n          }\n          calculateWeekDay(*(undefined4 *)(memoryAddress + 4));\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memoryAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_data_00005100",
                "dVar1": "relOffset",
                "iVar2": "memoryAddress",
                "pcVar3": "matchingString",
                "iVar4": "comparisonResult",
                "iVar5": "returnValue",
                "uVar6": "typeIndicator",
                "pcVar7": "currentString",
                "bVar8": "foundMFlag",
                "puVar9": "ptrLocal3a",
                "piVar10": "ptrLocal30",
                "puVar11": "ptrLocal38",
                "piVar12": "ptrLocal30_2",
                "local_3c": "hours",
                "local_3a": "minutes",
                "local_38": "seconds",
                "local_36": "day",
                "local_34": "month",
                "local_32": "year",
                "local_30": "tmp",
                "local_2c": "tmpArr",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "convert_string_to_number_00005fd8": "convertStringToNumber",
                "find_matching_string_000056a0": "findMatchingString",
                "get_memory_address_000056b0": "getMemoryAddress",
                "compare_byte_arrays_00004e52": "compareByteArrays",
                "initialize_relocation_data_00005780": "initializeRelocationData",
                "find_last_char_index_00005ecc": "findLastCharIndex",
                "allocate_memory_00004bd0": "allocateMemory",
                "copy_string_00005ebc": "copyString",
                "process_and_reverse_00005e68": "processAndReverse",
                "calculate_week_day_00004f98": "calculateWeekDay"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int dataPtr,uint input,int *dataArray,undefined4 config)\n\n{\n  int result;\n  uint value;\n  undefined *ptr;\n  \n  if ((dataPtr != 0) && (*(int *)(dataPtr + 0x18) == 0)) {\n    initializeSensor();\n  }\n  if (dataArray == &DAT_000079b8) {\n    dataArray = *(int **)(dataPtr + 4);\n  }\n  else if (dataArray == (int *)&DAT_000079d8) {\n    dataArray = *(int **)(dataPtr + 8);\n  }\n  else if (dataArray == (int *)&DAT_00007998) {\n    dataArray = *(int **)(dataPtr + 0xc);\n  }\n  dataArray[2] = dataArray[6];\n  value = (uint)*(ushort *)(dataArray + 3);\n  result = value << 0x1c;\n  if (((result < 0) && (value = dataArray[4], value != 0)) ||\n     (result = processData_00005404Func(dataPtr,dataArray,result,value,config), result == 0)) {\n    result = *dataArray - dataArray[4];\n    input = input & 0xff;\n    if ((result < dataArray[5]) || (result = verifyAndProcessData(dataPtr,dataArray), result == 0)) {\n      dataArray[2] = dataArray[2] + -1;\n      ptr = (undefined *)*dataArray;\n      *dataArray = (int)(ptr + 1);\n      *ptr = (char)input;\n      if (dataArray[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x1f)) {\n          return input;\n        }\n        if (input != 10) {\n          return input;\n        }\n      }\n      result = verifyAndProcessData(dataPtr,dataArray);\n      if (result == 0) {\n        return input;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "dataPtr",
                "param_2": "input",
                "param_3": "dataArray",
                "param_4": "config",
                "iVar1": "result",
                "uVar2": "value",
                "puVar3": "ptr",
                "initialize_sensor_000042a4": "initializeSensor",
                "process_data_000054a8": "processDataFunc",
                "process_and_verify_data_00004158": "verifyAndProcessData"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *output,undefined4 *input)\n\n{\n  ushort firstBit;\n  dword offset;\n  ushort originalShortValue;\n  uint convertedValue;\n  uint tempValue;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_sensor_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input == &DAT_000079b8) {\n    input = *(undefined4 **)(offset + 4);\n  }\n  else if (input == (undefined4 *)&DAT_000079d8) {\n    input = *(undefined4 **)(offset + 8);\n  }\n  else if (input == (undefined4 *)&DAT_00007998) {\n    input = *(undefined4 **)(offset + 0xc);\n  }\n  convertedValue = (uint)*(ushort *)(input + 3);\n  originalShortValue = *(ushort *)(input + 3);\n  if (-1 < (int)(convertedValue << 0x1c)) {\n    if (-1 < (int)(convertedValue << 0x1b)) {\n      *output = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(convertedValue << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          initialize_data_00004b34(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_00005700(output,input);\n  }\n  firstBit = *(ushort *)(input + 3);\n  convertedValue = (uint)firstBit;\n  originalShortValue = *(ushort *)(input + 3);\n  tempValue = convertedValue & 1;\n  if ((firstBit & 1) == 0) {\n    if (-1 < (int)(convertedValue << 0x1e)) {\n      tempValue = input[5];\n    }\n    input[2] = tempValue;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((firstBit & 0x80) == 0) {\n    return convertedValue & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = originalShortValue | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "firstBit",
                "dVar2": "offset",
                "uVar3": "originalShortValue",
                "uVar4": "convertedValue",
                "uVar5": "tempValue"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *resultArray,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *resultArray = quotient;\n  resultArray[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "resultArray",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_matching_string_0000562c",
            "code": "\nint findMatchingString_0000562c(undefined4 sensor_data,char *input_string,int *index_found)\n\n{\n  char current_char;\n  int *rel_offset_array;\n  int comparison_result;\n  char *current_ptr;\n  int *piVar;\n  int difference;\n  \n  initialize_sensor();\n  current_ptr = input_string;\n  if (relation_array[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        difference = (int)current_ptr - (int)input_string;\n        rel_offset_array = (int *)relation_array[41].r_offset;\n        while( true ) {\n          piVar = rel_offset_array;\n          if (*piVar == 0) break;\n          comparison_result = compare_byte_arrays(*piVar,input_string,difference);\n          rel_offset_array = piVar + 1;\n          if ((comparison_result == 0) && (comparison_result = *piVar, *(char *)(comparison_result + difference) == '=')) {\n            *index_found = (int)((int)piVar - relation_array[41].r_offset) >> 2;\n            initialize_memory(sensor_data);\n            return comparison_result + difference + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  initialize_memory(sensor_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_matching_string_0000562c",
                "param_1": "sensor_data",
                "param_2": "input_string",
                "param_3": "index_found",
                "cVar1": "current_char",
                "piVar2": "rel_offset_array",
                "iVar3": "comparison_result",
                "pcVar4": "current_ptr",
                "piVar5": "piVar",
                "iVar6": "difference",
                "initialize_sensor_00005fec": "initialize_sensor",
                "Elf32_Rel_ARRAY_1fff0200": "relation_array",
                "compare_byte_arrays_00004e66": "compare_byte_arrays",
                "initialize_memory_00005ff8": "initialize_memory"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_matching_string_000056a0",
            "code": "\nvoid find_matching_string_000056a0(undefined4 input_string,undefined4 string_length,undefined4 result_ptr,undefined4 output_string)\n\n{\n  undefined4 string_length_copy;\n  undefined4 result_ptr_copy;\n  \n  string_length_copy = string_length;\n  result_ptr_copy = result_ptr;\n  find_matching_string_000056a0_0000562c(input_string,string_length,&string_length_copy,output_string,input_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_matching_string_000056a0",
                "param_1": "input_string",
                "param_2": "string_length",
                "param_3": "result_ptr",
                "param_4": "output_string",
                "uStack_c": "string_length_copy",
                "uStack_8": "result_ptr_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_initialize_value_000056b8",
            "code": "\nundefined4 checkAndInitializeValue_000056b8(undefined4 inputValue,int dataPtr,undefined4 *outputPtr,uint *flagPtr)\n\n{\n  int status;\n  undefined4 result;\n  undefined tempBuffer [4];\n  uint localValue;\n  \n  if ((*(short *)(dataPtr + 0xe) < 0) ||\n     (status = initialize_integer_00000514(inputValue,(int)*(short *)(dataPtr + 0xe),tempBuffer), status < 0)) {\n    *flagPtr = 0;\n    if ((int)((uint)*(ushort *)(dataPtr + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flagPtr = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_000056f8:\n  *outputPtr = result;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_initialize_value_000056b8",
                "param_1": "inputValue",
                "param_2": "dataPtr",
                "param_3": "outputPtr",
                "param_4": "flagPtr",
                "iVar1": "status",
                "uVar2": "result",
                "auStack_68": "tempBuffer",
                "local_64": "localValue"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "initialize_and_allocate_memory_00005700",
            "code": "\nvoid initializeAndAllocateMemory_00005700(int functionParam,int *arrayParam)\n\n{\n  ushort result;\n  int memoryAllocated;\n  int allocatedSize;\n  int *optionalParam;\n  \n  if (-1 < (int)((uint)*(ushort *)(arrayParam + 3) << 0x1e)) {\n    allocatedSize = functionParam;\n    optionalParam = arrayParam;\n    result = check_and_initialize_value_000056b8(functionParam,arrayParam,&allocatedSize,&optionalParam);\n    memoryAllocated = allocate_memory_00004bd0(functionParam,allocatedSize);\n    if (memoryAllocated != 0) {\n      *(undefined **)(functionParam + 0x28) = &DAT_0000423d;\n      *arrayParam = memoryAllocated;\n      *(ushort *)(arrayParam + 3) = *(ushort *)(arrayParam + 3) | 0x80;\n      arrayParam[5] = allocatedSize;\n      arrayParam[4] = memoryAllocated;\n      if ((optionalParam != (int *)0x0) &&\n         (memoryAllocated = check_input_validity_00000534(functionParam,(int)*(short *)((int)arrayParam + 0xe)), memoryAllocated != 0)) {\n        *(ushort *)(arrayParam + 3) = *(ushort *)(arrayParam + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(arrayParam + 3) = result | *(ushort *)(arrayParam + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(arrayParam + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(arrayParam + 3) = *(ushort *)(arrayParam + 3) & 0xfffc | 2;\n  }\n  *arrayParam = (int)arrayParam + 0x47;\n  arrayParam[4] = (int)arrayParam + 0x47;\n  arrayParam[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "initialize_and_allocate_memory_00005700",
                "param_1": "functionParam",
                "param_2": "arrayParam",
                "uVar1": "result",
                "iVar2": "memoryAllocated",
                "local_18": "allocatedSize",
                "local_14": "optionalParam"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_relocation_data_00005780",
            "code": "\nvoid initializeRelocationData_00005780(undefined4 data)\n\n{\n  initialize_data_00004b34(relocationArray[16].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_relocation_data_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_and_decrement_data_000057a8",
            "code": "\nint process_and_decrement_data_000057a8(undefined4 input_1,int input_2,undefined4 *data_array_ptr)\n\n{\n  int decremented_value;\n  undefined *ptr_to_store_data;\n  \n  decremented_value = data_array_ptr[2] + -1;\n  data_array_ptr[2] = decremented_value;\n  if ((decremented_value < 0) && ((decremented_value < (int)data_array_ptr[6] || (input_2 == 10)))) {\n    decremented_value = process_data_00005404();\n    return decremented_value;\n  }\n  ptr_to_store_data = (undefined *)*data_array_ptr;\n  *data_array_ptr = ptr_to_store_data + 1;\n  *ptr_to_store_data = (char)input_2;\n  return input_2;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_and_decrement_data_000057a8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_array_ptr",
                "iVar1": "decremented_value",
                "puVar2": "ptr_to_store_data"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 input_param1,undefined4 input_param2,undefined *data_array,int data_size)\n\n{\n  int result;\n  undefined *end_of_data;\n  int current_size;\n  \n  end_of_data = data_array + data_size;\n  current_size = data_size;\n  do {\n    if (data_array == end_of_data) {\n      return 0;\n    }\n    result = process_and_decrement_data_000057a8(input_param1,*data_array,input_param2,data_size,current_size);\n    data_size = result + 1;\n    data_array = data_array + 1;\n  } while (data_size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "data_array",
                "param_4": "data_size",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "current_size"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_sensor_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processSensorData_000057f8(int sensorData,undefined4 *sensorConfig,byte *dataString,int *dataCounter)\n\n{\n  int result;\n  int processResult;\n  int *dataCounterPtr;\n  bool isDigit;\n  byte *currentChar;\n  int sensorValue;\n  byte *dataPtr;\n  int *dataCounterLocal;\n  uint flagBits;\n  int decimalValue;\n  undefined4 unexpectedValue;\n  int asteriskValue;\n  int totalLength;\n  byte endFlag;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined symbolFlag;\n  undefined4 zeroFlag;\n  \n  if ((sensorData != 0) && (*(int *)(sensorData + 0x18) == 0)) {\n    initializeSensor();\n  }\n  if (sensorConfig == &DAT_000079b8) {\n    sensorConfig = *(undefined4 **)(sensorData + 4);\n  }\n  else if (sensorConfig == (undefined4 *)&DAT_000079d8) {\n    sensorConfig = *(undefined4 **)(sensorData + 8);\n  }\n  else if (sensorConfig == (undefined4 *)&DAT_00007998) {\n    sensorConfig = *(undefined4 **)(sensorData + 0xc);\n  }\n  if ((-1 < (int)(sensorConfig[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(sensorConfig + 3) << 0x16))) {\n    FUNC_000045e8(sensorConfig[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(sensorConfig + 3) << 0x1c)) || (sensorConfig[4] == 0)) &&\n     (result = processData3(sensorData,sensorConfig), result != 0)) {\n    if ((-1 < (int)(sensorConfig[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(sensorConfig + 3) << 0x16)))\n    {\n      FUNC_000045ec(sensorConfig[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  dataPtr = dataString;\n  dataCounterLocal = dataCounter;\nLAB_0000588e:\n  currentChar = dataPtr;\n  if (*currentChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  dataPtr = currentChar + 1;\n  if (*currentChar == 0x25) {\nLAB_0000589a:\n    result = (int)currentChar - (int)dataString;\n    if (result != 0) {\n      processResult = process_data_000057d2(sensorData,sensorConfig,dataString,result);\n      if (processResult == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(sensorConfig[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(sensorConfig + 3) << 0x16))) {\n          FUNC_000045ec(sensorConfig[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(sensorConfig + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + result;\n    }\n    if (*currentChar == 0) goto LAB_00005a06;\n    decimalValue = -1;\n    unexpectedValue = 0;\n    flagBits = 0;\n    asteriskValue = 0;\n    symbolFlag = 0;\n    zeroFlag = 0;\n    dataPtr = currentChar + 1;\n    while( true ) {\n      currentChar = dataPtr + 1;\n      result = findOccurrence(\"#-0+ \",*dataPtr,5);\n      if (result == 0) break;\n      flagBits = 1 << (result - 0x7bfcU & 0xff) | flagBits;\n      dataPtr = currentChar;\n    }\n    if ((int)(flagBits << 0x1b) < 0) {\n      symbolFlag = 0x20;\n    }\n    if ((int)(flagBits << 0x1c) < 0) {\n      symbolFlag = 0x2b;\n    }\n    if (*dataPtr == 0x2a) {\n      dataCounterPtr = dataCounterLocal + 1;\n      asteriskValue = *dataCounterLocal;\n      dataCounterLocal = dataCounterPtr;\n      if (asteriskValue < 0) {\n        asteriskValue = -asteriskValue;\n        flagBits = flagBits | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      result = asteriskValue;\n      currentChar = dataPtr;\n      while( true ) {\n        if (9 < *currentChar - 0x30) break;\n        result = result * 10 + (*currentChar - 0x30);\n        isDigit = true;\n        currentChar = currentChar + 1;\n      }\n      if (isDigit) {\n        asteriskValue = result;\n      }\n    }\n    if (*currentChar == 0x2e) {\n      if (currentChar[1] == 0x2a) {\n        decimalValue = *dataCounterLocal;\n        if (decimalValue < 0) {\n          decimalValue = -1;\n        }\n        currentChar = currentChar + 2;\n        dataCounterLocal = dataCounterLocal + 1;\n      }\n      else {\n        isDigit = false;\n        decimalValue = 0;\n        result = 0;\n        while( true ) {\n          currentChar = currentChar + 1;\n          if (9 < *currentChar - 0x30) break;\n          result = result * 10 + (*currentChar - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          decimalValue = result;\n        }\n      }\n    }\n    result = findOccurrence(&DAT_00007c02,*currentChar,3);\n    if (result != 0) {\n      flagBits = flagBits | 0x40 << (result - 0x7c02U & 0xff);\n      currentChar = currentChar + 1;\n    }\n    dataString = currentChar + 1;\n    endFlag = *currentChar;\n    result = findOccurrence(\"efgEFG\",endFlag,6);\n    if (result == 0) {\n      sensorValue = convertToString(sensorData,&flagBits,sensorConfig,0x57d3,&dataCounterLocal);\n      if (sensorValue == -1) goto LAB_00005a06;\n    }\n    else {\n      dataCounterLocal = (int *)(((int)dataCounterLocal + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + sensorValue;\n    dataPtr = dataString;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_sensor_data_000057f8",
                "param_1": "sensorData",
                "param_2": "sensorConfig",
                "param_3": "dataString",
                "param_4": "dataCounter",
                "iVar1": "result",
                "iVar2": "processResult",
                "piVar3": "dataCounterPtr",
                "bVar4": "isDigit",
                "pbVar5": "currentChar",
                "unaff_r7": "sensorValue",
                "pbVar6": "dataPtr",
                "local_8c": "dataCounterLocal",
                "local_88": "flagBits",
                "local_84": "decimalValue",
                "uStack_80": "unexpectedValue",
                "local_7c": "asteriskValue",
                "local_74": "totalLength",
                "local_70": "endFlag",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "symbolFlag",
                "local_30": "zeroFlag",
                "initialize_sensor_000042a4": "initializeSensor",
                "process_data_000054a8": "processData3",
                "find_first_occurrence_00006010": "findOccurrence",
                "convert_to_string_00005b34": "convertToString"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_required_length_00005a58",
            "code": "\nundefined4\ncalculateRequiredLength_00005a58(undefined4 input,uint *array,uint *length,undefined4 param,code *callback)\n\n{\n  int i;\n  undefined4 result;\n  int temp;\n  uint maxLength;\n  uint iteration;\n  bool isConditionMet;\n  \n  maxLength = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxLength = array[2];\n  }\n  *length = maxLength;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *length = maxLength + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *length = *length + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (i = 0; i < (int)(array[3] - *length); i = i + 1) {\n      temp = (*callback)(input,param,(int)array + 0x19,1);\n      if (temp == -1) goto LAB_00005afc;\n    }\n  }\n  maxLength = (uint)*(byte *)((int)array + 0x43);\n  if (maxLength != 0) {\n    maxLength = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxLength + 0x43) = 0x30;\n    *(undefined *)((int)array + maxLength + 0x44) = *(undefined *)((int)array + 0x45);\n    maxLength = maxLength + 2;\n  }\n  i = (*callback)(input,param,(int)array + 0x43,maxLength);\n  if (i == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxLength = array[3];\n    isConditionMet = (*array & 6) == 4;\n    if (isConditionMet) {\n      maxLength = maxLength - *length;\n    }\n    if (isConditionMet) {\n      maxLength = maxLength & ~((int)maxLength >> 0x1f);\n    }\n    else {\n      maxLength = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxLength = maxLength + (array[2] - array[4]);\n    }\n    for (iteration = 0; maxLength != iteration; iteration = iteration + 1) {\n      i = (*callback)(input,param,(int)array + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_required_length_00005a58",
                "param_1": "input",
                "param_2": "array",
                "param_3": "length",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "result",
                "iVar3": "temp",
                "uVar4": "maxLength",
                "uVar5": "iteration",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "convert_to_string_00005b34",
            "code": "\ncode * convertToString_00005b34(undefined4 inputValue,uint *numArray,undefined4 param_3,code *callback,uint **ptrArray\n                   )\n\n{\n  bool boolVar;\n  byte byteVar;\n  int intVar;\n  code *result;\n  char *hexDigits;\n  int loopVar;\n  char *charPtr;\n  uint value;\n  uint *ptrVar;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint length;\n  char *strPtr;\n  code *localCallback;\n  \n  byteVar = *(byte *)(numArray + 6);\n  charPtr = (char *)((int)numArray + 0x43);\n  localCallback = callback;\n  if (0x78 < byteVar) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)numArray + 0x42) = byteVar;\nLAB_00005bdc:\n    charPtr = (char *)((int)numArray + 0x42);\n    value = 1;\nLAB_00005d28:\n    numArray[4] = value;\n    *(undefined *)((int)numArray + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteVar < 99) {\n    if (byteVar == 0) goto LAB_00005d06;\n    if (byteVar == 0x58) {\n      hexDigits = \"0123456789ABCDEF\";\n      *(undefined *)((int)numArray + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteVar) {\n  case 99:\n    value = **ptrArray;\n    *ptrArray = *ptrArray + 1;\n    *(char *)((int)numArray + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *numArray;\n    ptrVar = *ptrArray;\n    if ((int)(base << 0x18) < 0) {\n      value = *ptrVar;\n      *ptrArray = ptrVar + 1;\n    }\n    else {\n      value = *ptrVar;\n      *ptrArray = ptrVar + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)numArray + 0x43) = 0x2d;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*ptrArray;\n    base = *numArray;\n    value = numArray[5];\n    *ptrArray = (uint *)(ppuVar11 + 1);\n    ptrVar = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *ptrVar = value;\n    }\n    else {\n      *(short *)ptrVar = (short)value;\n    }\nLAB_00005d06:\n    numArray[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptrVar = *ptrArray;\n    value = *numArray;\n    *ptrArray = ptrVar + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *ptrVar;\n    }\n    else {\n      value = (uint)*(ushort *)ptrVar;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    if (byteVar == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *numArray = *numArray | 0x20;\n  case 0x78:\n    hexDigits = \"0123456789abcdef\";\n    *(undefined *)((int)numArray + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *numArray;\n    value = **ptrArray;\n    *ptrArray = *ptrArray + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *numArray = base | 0x20;\n    }\n    if (value == 0) {\n      *numArray = *numArray & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*ptrArray;\n    *ptrArray = (uint *)(ppcVar12 + 1);\n    charPtr = *ppcVar12;\n    intVar = find_first_occurrence_00006010(charPtr,0,numArray[1],ppcVar12,inputValue,numArray,param_3);\n    if (intVar != 0) {\n      numArray[1] = intVar - (int)charPtr;\n    }\n    value = numArray[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)numArray + 0x43) = 0;\nLAB_00005c36:\n  length = numArray[1];\n  numArray[2] = length;\n  if (-1 < (int)length) {\n    *numArray = *numArray & 0xfffffffb;\n  }\n  strPtr = charPtr;\n  if ((value != 0) || (length != 0)) {\n    do {\n      strPtr = strPtr + -1;\n      *strPtr = hexDigits[value - base * (value / base)];\n      boolVar = base <= value;\n      value = value / base;\n    } while (boolVar);\n  }\n  if (((base == 8) && ((int)(*numArray << 0x1f) < 0)) && ((int)numArray[1] <= (int)numArray[4])) {\n    strPtr[-1] = '0';\n    strPtr = strPtr + -1;\n  }\n  numArray[4] = (int)charPtr - (int)strPtr;\n  charPtr = strPtr;\nLAB_00005c84:\n  intVar = calculate_required_length_00005a58(inputValue,numArray,&localCallback,param_3,callback);\n  if ((intVar == -1) || (intVar = (*callback)(inputValue,param_3,charPtr,numArray[4]), intVar == -1)) {\nLAB_00005c98:\n    result = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*numArray << 0x1e) < 0) {\n      for (intVar = 0; intVar < (int)(numArray[3] - (int)localCallback); intVar = intVar + 1) {\n        loopVar = (*callback)(inputValue,param_3,(int)numArray + 0x19,1);\n        if (loopVar == -1) goto LAB_00005c98;\n      }\n    }\n    result = (code *)numArray[3];\n    if ((int)(code *)numArray[3] < (int)localCallback) {\n      result = localCallback;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "convert_to_string_00005b34",
                "param_1": "inputValue",
                "param_2": "numArray",
                "param_4": "callback",
                "param_5": "ptrArray",
                "bVar1": "boolVar",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "pcVar4": "result",
                "pcVar5": "hexDigits",
                "iVar6": "loopVar",
                "pcVar7": "charPtr",
                "uVar8": "value",
                "puVar9": "ptrVar",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "strPtr",
                "local_24": "localCallback"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_and_decrement_sensor_data_00005e10",
            "code": "\nuint processAndDecrementSensorData_00005e10(int sensorDataPtr,byte **sensorDataPtrPtr)\n\n{\n  int result;\n  uint uVar2;\n  byte *sensorDataBytePtr;\n  \n  if ((sensorDataPtr != 0) && (*(int *)(sensorDataPtr + 0x18) == 0)) {\n    initializeSensor();\n  }\n  if (sensorDataPtrPtr == (byte **)&DAT_000079b8) {\n    sensorDataPtrPtr = *(byte ***)(sensorDataPtr + 4);\n  }\n  else if (sensorDataPtrPtr == (byte **)&DAT_000079d8) {\n    sensorDataPtrPtr = *(byte ***)(sensorDataPtr + 8);\n  }\n  else if (sensorDataPtrPtr == (byte **)&DAT_00007998) {\n    sensorDataPtrPtr = *(byte ***)(sensorDataPtr + 0xc);\n  }\n  result = processSensorData(sensorDataPtr,sensorDataPtrPtr);\n  if (result == 0) {\n    sensorDataPtrPtr[1] = sensorDataPtrPtr[1] + -1;\n    sensorDataBytePtr = *sensorDataPtrPtr;\n    *sensorDataPtrPtr = sensorDataBytePtr + 1;\n    uVar2 = (uint)*sensorDataBytePtr;\n  }\n  else {\n    uVar2 = 0xffffffff;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_and_decrement_sensor_data_00005e10",
                "param_1": "sensorDataPtr",
                "param_2": "sensorDataPtrPtr",
                "iVar1": "result",
                "pbVar3": "sensorDataBytePtr",
                "initialize_sensor_000042a4": "initializeSensor",
                "process_sensor_data_00006768": "processSensorData"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_and_reverse_00005e68",
            "code": "\nvoid process_and_reverse_00005e68(undefined4 input_param,undefined4 another_param,undefined4 extra_param_1,undefined4 extra_param_2)\n\n{\n  undefined4 processed_value;\n  undefined4 last_char_index;\n  undefined2 constant_value;\n  undefined2 counter;\n  undefined4 processed_value_copy;\n  undefined4 last_char_index_copy;\n  undefined *message_address;\n  undefined4 zero;\n  undefined4 zero_copy;\n  undefined4 extra_param_1_copy;\n  undefined4 extra_param_2_copy;\n  \n  constant_value = 0x204;\n  processed_value = input_param;\n  processed_value_copy = input_param;\n  extra_param_1_copy = extra_param_1;\n  extra_param_2_copy = extra_param_2;\n  last_char_index = find_last_char_index_00005ecc();\n  message_address = &LAB_00004dea_1;\n  zero = 0;\n  zero_copy = 0;\n  counter = 0xffff;\n  last_char_index_copy = last_char_index;\n  reverse_and_process_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&processed_value,another_param,&extra_param_1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_and_reverse_00005e68",
                "param_1": "input_param",
                "param_2": "another_param",
                "param_3": "extra_param_1",
                "param_4": "extra_param_2",
                "local_80": "processed_value",
                "local_7c": "last_char_index",
                "local_74": "constant_value",
                "local_72": "counter",
                "local_70": "processed_value_copy",
                "local_6c": "last_char_index_copy",
                "local_5c": "message_address",
                "local_4c": "zero",
                "local_38": "zero_copy",
                "uStack_8": "extra_param_1_copy",
                "uStack_4": "extra_param_2_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *dest,char *src)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *src;\n    *dest = currentChar;\n    src = src + 1;\n    dest = dest + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_last_char_index_00005ecc",
            "code": "\nchar * find_last_char_index_00005ecc(char *string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_last_char_index_00005ecc",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_string_to_number_00005edc",
            "code": "\nuint convertStringToNumber_00005edc(undefined4 *outputValue,byte *inputString,byte **remainingString,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  byte isNegative;\n  int isValid;\n  uint digitValue;\n  uint maxDivisor;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  maxDivisor = 0xffffffff / base;\n  result = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((isValid < 0) || (maxDivisor < result)) ||\n       ((maxDivisor == result && ((int)~(base * maxDivisor) < (int)digitValue)))) {\n      isValid = -1;\n    }\n    else {\n      result = result * base + digitValue;\n      isValid = 1;\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (isValid < 0) {\n    *outputValue = 0x22;\n    result = 0xffffffff;\n    if (remainingString == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (remainingString == (byte **)0x0) {\n      return result;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  inputString = nextByte + -1;\nLAB_00005fb8:\n  *remainingString = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_string_to_number_00005edc",
                "param_1": "outputValue",
                "param_2": "inputString",
                "param_3": "remainingString",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "isValid",
                "uVar5": "digitValue",
                "uVar6": "maxDivisor",
                "pbVar7": "currentByte",
                "pbVar8": "nextByte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "convert_string_to_number_00005fd8",
            "code": "\nvoid convertStringToNumber_00005fd8(undefined4 inputString,undefined4 outputValue,undefined4 conversionStatus)\n\n{\n  convert_string_to_number_00005edc(relocationTable[16].r_offset,inputString,outputValue,conversionStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "convert_string_to_number_00005fd8",
                "param_1": "inputString",
                "param_2": "outputValue",
                "param_3": "conversionStatus",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_sensor_00005fec",
            "code": "\nvoid initializeSensor_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_sensor_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_first_occurrence_00006010",
            "code": "\nbyte * find_first_occurrence_00006010(uint *data,uint target,uint length)\n\n{\n  byte current_byte;\n  char mask_1;\n  char mask_2;\n  char mask_3;\n  char mask_4;\n  byte *next_byte;\n  uint *curr_ptr;\n  byte *result;\n  uint offset;\n  uint length_aligned;\n  uint data_xor;\n  uint data_xor_next;\n  bool mask_5_present;\n  bool mask_6_present;\n  bool mask_7_present;\n  bool mask_8_present;\n  \n  target = target & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      curr_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = curr_ptr;\n    } while (current_byte != target);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target | target << 8;\n        offset = offset | offset << 0x10;\n        length_aligned = length & 0xfffffff8;\n        do {\n          curr_ptr = data + 2;\n          length_aligned = length_aligned - 8;\n          data_xor = *data ^ offset;\n          data_xor_next = data[1] ^ offset;\n          mask_1 = -((char)data_xor == '\\0');\n          mask_2 = -((char)(data_xor >> 8) == '\\0');\n          mask_3 = -((char)(data_xor >> 0x10) == '\\0');\n          mask_4 = -((char)(data_xor >> 0x18) == '\\0');\n          data_xor = CONCAT13(mask_4,CONCAT12(mask_3,CONCAT11(mask_2,mask_1)));\n          mask_5_present = (char)data_xor_next != '\\0';\n          mask_6_present = (char)(data_xor_next >> 8) != '\\0';\n          mask_7_present = (char)(data_xor_next >> 0x10) != '\\0';\n          mask_8_present = (char)(data_xor_next >> 0x18) != '\\0';\n          data_xor_next = CONCAT13(mask_8_present * mask_4 - !mask_8_present,\n                            CONCAT12(mask_7_present * mask_3 - !mask_7_present,\n                                     CONCAT11(mask_6_present * mask_2 - !mask_6_present,mask_5_present * mask_1 - !mask_5_present)));\n          if (data_xor_next != 0) {\n            if (data_xor == 0) {\n              result = (byte *)((int)data + 5);\n              data_xor = data_xor_next;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((data_xor & 1) == 0) {\n              mask_5_present = (data_xor & 0x100) == 0;\n              next_byte = result + 1;\n              if (mask_5_present) {\n                mask_5_present = (data_xor & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (mask_5_present) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = curr_ptr;\n        } while (length_aligned != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      curr_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target) break;\n      offset = (uint)curr_ptr & 7;\n      data = curr_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)curr_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_first_occurrence_00006010",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "mask_1",
                "cVar3": "mask_2",
                "cVar4": "mask_3",
                "cVar5": "mask_4",
                "pbVar6": "next_byte",
                "puVar7": "curr_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "length_aligned",
                "uVar11": "data_xor",
                "uVar12": "data_xor_next",
                "bVar13": "mask_5_present",
                "bVar14": "mask_6_present",
                "bVar15": "mask_7_present",
                "bVar16": "mask_8_present"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int arrayDst,undefined *arraySrc,int length)\n\n{\n  undefined *srcPtr;\n  undefined *srcEnd;\n  undefined *dstPtr;\n  \n  srcEnd = arraySrc + length;\n  dstPtr = (undefined *)(arrayDst + -1);\n  if (arraySrc != srcEnd) {\n    do {\n      srcPtr = arraySrc + 1;\n      dstPtr = dstPtr + 1;\n      *dstPtr = *arraySrc;\n      arraySrc = srcPtr;\n    } while (srcPtr != srcEnd);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "arrayDst",
                "param_2": "arraySrc",
                "param_3": "length",
                "puVar1": "srcPtr",
                "puVar2": "srcEnd",
                "puVar3": "dstPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_array_000060cc",
            "code": "\nint allocate_and_copy_array_000060cc(undefined4 data_ptr,int source_array,uint array_size,undefined4 additional_param)\n\n{\n  int result;\n  uint calculated_value;\n  \n  if (source_array != 0) {\n    if (array_size == 0) {\n      initialize_data_00004b34();\n      result = 0;\n    }\n    else {\n      calculated_value = calculate_value_00006964();\n      result = source_array;\n      if ((calculated_value < array_size) && (result = allocate_memory_00004bd0(data_ptr,array_size), result != 0)) {\n        copy_array_000060b0(result,source_array,array_size);\n        initialize_data_00004b34(data_ptr,source_array);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_00004bd0(data_ptr,array_size,array_size,additional_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_array_000060cc",
                "param_1": "data_ptr",
                "param_2": "source_array",
                "param_3": "array_size",
                "param_4": "additional_param",
                "iVar1": "result",
                "uVar2": "calculated_value"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_data_00006192",
            "code": "\nundefined4 initialize_data_00006192(undefined4 param,undefined4 *arg)\n\n{\n  if ((undefined4 *)arg[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)arg[13] != arg + 0x11) {\n      initialize_data_00006192_00004b34();\n    }\n    arg[1] = arg[16];\n    arg[13] = 0;\n    if (arg[16] != 0) {\n      *arg = arg[15];\n      return 0;\n    }\n  }\n  *arg = arg[4];\n  arg[1] = 0;\n  *(ushort *)(arg + 3) = *(ushort *)(arg + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_data_00006192",
                "param_1": "param",
                "param_2": "arg",
                "param_2[0xd]": "arg[13]",
                "param_2[0x10]": "arg[16]",
                "param_2[0xf]": "arg[15]",
                "param_2[4]": "arg[4]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "reverse_and_process_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint reverse_and_process_000061cc(undefined4 param_1,byte **byte_array_ptr,byte *byte_ptr,int **int_ptr_ptr)\n\n{\n  int result;\n  uint current_byte;\n  byte *next_byte_ptr;\n  uint next_byte;\n  int **int_ptr_ptr_local;\n  undefined data_buffer [256];\n  uint flags;\n  undefined4 conversion_base;\n  uint temp_flags;\n  int result_value;\n  int current_index;\n  undefined *temp_buffer;\n  int data_type;\n  undefined *function_ptr;\n  code *initialize_data_fn_ptr;\n  \n  result_value = 0;\n  current_index = 0;\n  function_ptr = &LAB_00006118_1;\n  initialize_data_fn_ptr = initialize_data_00006192 + 1;\n  int_ptr_ptr_local = int_ptr_ptr;\n  temp_buffer = data_buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      next_byte = (uint)*byte_ptr;\n      if (next_byte == 0) {\n        return result_value;\n      }\n      current_byte = (byte)(&DAT_00007a99)[next_byte] & 8;\n      next_byte_ptr = byte_ptr + 1;\n      if (((&DAT_00007a99)[next_byte] & 8) == 0) break;\n      while (((byte_ptr = next_byte_ptr, 0 < (int)byte_array_ptr[1] ||\n              (result = (*initialize_data_fn_ptr)(param_1,byte_array_ptr), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**byte_array_ptr] << 0x1c) < 0))) {\n        current_index = current_index + 1;\n        byte_array_ptr[1] = byte_array_ptr[1] + -1;\n        *byte_array_ptr = *byte_array_ptr + 1;\n      }\n    }\n    if (next_byte == 0x25) break;\nLAB_00006352:\n    if (((int)byte_array_ptr[1] < 1) && (result = (*initialize_data_fn_ptr)(param_1,byte_array_ptr), result != 0))\n    goto LAB_00006380;\n    if (**byte_array_ptr != next_byte) {\n      return result_value;\n    }\n    *byte_array_ptr = *byte_array_ptr + 1;\n    current_index = current_index + 1;\n    byte_array_ptr[1] = byte_array_ptr[1] + -1;\n    byte_ptr = next_byte_ptr;\n  }\n  temp_flags = current_byte;\n  flags = current_byte;\n  if (byte_ptr[1] == 0x2a) {\n    next_byte_ptr = byte_ptr + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    current_byte = (uint)*next_byte_ptr;\n    if (9 < current_byte - 0x30) break;\n    next_byte_ptr = next_byte_ptr + 1;\n    temp_flags = (temp_flags * 10 + current_byte) - 0x30;\n  }\n  result = find_first_occurrence_00006010(&DAT_00007c02,current_byte,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    next_byte_ptr = next_byte_ptr + 1;\n  }\n  byte_ptr = next_byte_ptr + 1;\n  current_byte = (uint)*next_byte_ptr;\n  if (current_byte < 0x79) {\n    if (0x57 < current_byte) {\n      switch(current_byte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        byte_ptr = (byte *)decode_data_0000687c(data_buffer,byte_ptr);\n        flags = flags | 0x40;\n        data_type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        data_type = 0;\n        break;\n      case 100:\n      case 0x75:\n        conversion_base = 10;\nLAB_000063a0:\n        if (current_byte < 0x6f) {\n          data_type = 3;\n        }\n        else {\n          data_type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        data_type = 5;\n        break;\n      case 0x69:\n        conversion_base = 0;\n        data_type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*int_ptr_ptr_local = (short)current_index;\n            int_ptr_ptr_local = int_ptr_ptr_local + 1;\n          }\n          else {\n            **int_ptr_ptr_local = current_index;\n            int_ptr_ptr_local = int_ptr_ptr_local + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        conversion_base = 8;\n        data_type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        conversion_base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        data_type = 2;\n      }\nLAB_000063ac:\n      if (((int)byte_array_ptr[1] < 1) && (result = (*initialize_data_fn_ptr)(param_1,byte_array_ptr), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**byte_array_ptr] << 0x1c) < 0) {\n          current_index = current_index + 1;\n          next_byte_ptr = byte_array_ptr[1];\n          byte_array_ptr[1] = next_byte_ptr + -1;\n          if ((int)(next_byte_ptr + -1) < 1) {\n            result = (*initialize_data_fn_ptr)(param_1,byte_array_ptr);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *byte_array_ptr = *byte_array_ptr + 1;\n          }\n        }\n      }\n      if (data_type < 3) {\n        result = process_data_000064bc(param_1,&flags,byte_array_ptr,&int_ptr_ptr_local);\n      }\n      else {\n        if (4 < data_type) goto LAB_000061f6;\n        result = decode_and_process_data_0000656c(param_1,&flags,byte_array_ptr,&int_ptr_ptr_local);\n      }\n      if (result == 1) {\n        return result_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (result_value == 0) {\nLAB_00006388:\n          result_value = -1;\n        }\n        else if ((*(ushort *)(byte_array_ptr + 3) & 0x40) != 0) {\n          result_value = -1;\n        }\n        return result_value;\n      }\n      goto LAB_000061f6;\n    }\n    next_byte_ptr = byte_ptr;\n    if (current_byte == 0x25) goto LAB_00006352;\n    if (current_byte < 0x26) {\n      if (current_byte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_byte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  data_type = 3;\n  conversion_base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "reverse_and_process_000061cc",
                "param_2": "byte_array_ptr",
                "param_3": "byte_ptr",
                "param_4": "int_ptr_ptr",
                "iVar1": "result",
                "uVar2": "current_byte",
                "pbVar3": "next_byte_ptr",
                "uVar4": "next_byte",
                "local_2b0": "int_ptr_ptr_local",
                "auStack_2ac": "data_buffer",
                "local_1ac": "flags",
                "local_1a8": "conversion_base",
                "local_1a4": "temp_flags",
                "local_1a0": "result_value",
                "local_19c": "current_index",
                "local_198": "temp_buffer",
                "local_194": "data_type",
                "local_30": "function_ptr",
                "local_2c": "initialize_data_fn_ptr"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 input,uint *params,byte **dataPointers,undefined4 *returnCode)\n\n{\n  int resultCode;\n  uint temp;\n  byte **doublePointer;\n  byte *bytePointer;\n  byte *currentBytePointer;\n  byte *nextBytePointer;\n  int counter;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    params[2] = temp;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    doublePointer = (byte **)*returnCode;\n    *returnCode = doublePointer + 1;\n    currentBytePointer = *doublePointer;\n  }\n  counter = 0;\n  do {\n    temp = params[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(params[5] + (uint)**dataPointers) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *currentBytePointer = 0;\n          }\n          params[4] = counter + params[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**dataPointers] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    nextBytePointer = currentBytePointer;\n    if (-1 < (int)(*params << 0x1b)) {\n      nextBytePointer = currentBytePointer + 1;\n      *currentBytePointer = **dataPointers;\n    }\n    bytePointer = dataPointers[1];\n    *dataPointers = *dataPointers + 1;\n    temp = params[2] - 1;\n    dataPointers[1] = bytePointer + -1;\n    counter = counter + 1;\n    params[2] = temp;\n    currentBytePointer = nextBytePointer;\n    if ((temp == 0) ||\n       (((int)(bytePointer + -1) < 1 &&\n        (resultCode = (*(code *)params[0x60])(input,dataPointers,temp,(code *)params[0x60],returnCode),\n        resultCode != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "params",
                "param_3": "dataPointers",
                "param_4": "returnCode",
                "iVar1": "resultCode",
                "uVar2": "temp",
                "ppbVar3": "doublePointer",
                "pbVar4": "bytePointer",
                "unaff_r6": "currentBytePointer",
                "pbVar5": "nextBytePointer",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "decode_and_process_data_0000656c",
            "code": "\nundefined4 decode_and_process_data_0000656c(undefined4 input_data,uint *options,byte **data_pointers,undefined4 *output_buffer)\n\n{\n  int occurrence_index;\n  undefined4 result;\n  code *decode_function;\n  uint temp_var;\n  byte *current_byte;\n  uint tmp_value;\n  undefined4 *output_ptr;\n  uint *data_ptr;\n  uint *next_data_ptr;\n  uint *start_data_ptr;\n  int unaff_r9;\n  int loop_index;\n  undefined *strings_array [4];\n  \n  strings_array[0] = &DAT_00007c2f;\n  strings_array[1] = &DAT_00007c32;\n  strings_array[2] = &DAT_00007c35;\n  decode_function = (code *)&UNK_00004f81;\n  if (options[6] != 3) {\n    decode_function = (code *)&UNK_00005fd5;\n  }\n  tmp_value = options[2];\n  temp_var = tmp_value - 1;\n  if (0x15c < temp_var) {\n    unaff_r9 = tmp_value - 0x15d;\n    tmp_value = 0x15d;\n  }\n  if (0x15c < temp_var) {\n    options[2] = tmp_value;\n  }\n  start_data_ptr = options + 7;\n  if (temp_var < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *options = *options | 0xd00;\n  loop_index = 0;\n  next_data_ptr = start_data_ptr;\n  do {\n    occurrence_index = find_first_occurrence_00006010(strings_array[loop_index],**data_pointers,2);\n    if (occurrence_index != 0) {\n      if (loop_index == 1) {\n        if (options[1] == 0) {\n          options[1] = 8;\n          *options = *options | 0x200;\n        }\n        temp_var = *options & 0xfffffaff;\nLAB_000065f4:\n        *options = temp_var;\n      }\n      else if (loop_index == 2) {\n        if ((*options & 0x600) != 0x200) goto LAB_00006624;\n        options[1] = 0x10;\n        temp_var = *options | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_var = options[2];\n      options[2] = temp_var - 1;\n      if (temp_var != 0) {\n        current_byte = *data_pointers;\n        *data_pointers = current_byte + 1;\n        data_ptr = (uint *)((int)next_data_ptr + 1);\n        *(byte *)next_data_ptr = *current_byte;\n        current_byte = data_pointers[1];\n        data_pointers[1] = current_byte + -1;\n        next_data_ptr = data_ptr;\n        if (((int)(current_byte + -1) < 1) &&\n           (occurrence_index = (*(code *)options[0x60])(input_data,data_pointers), occurrence_index != 0)) {\n          loop_index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_index = loop_index + 1;\n  } while (loop_index != 3);\n  if (options[1] == 0) {\n    options[1] = 10;\n  }\n  decode_data_0000687c(options[5],\"01234567]\" + (8 - options[1]));\n  loop_index = 0;\n  while( true ) {\n    data_ptr = next_data_ptr;\n    if (options[2] == 0) break;\n    current_byte = *data_pointers;\n    temp_var = (uint)*current_byte;\n    if (*(char *)(options[5] + temp_var) == '\\0') break;\n    if ((temp_var == 0x30) && ((int)(*options << 0x14) < 0)) {\n      loop_index = loop_index + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        options[2] = options[2] + 1;\n      }\n    }\n    else {\n      *options = *options & 0xfffff6ff;\n      data_ptr = (uint *)((int)next_data_ptr + 1);\n      *(byte *)next_data_ptr = *current_byte;\n    }\n    current_byte = data_pointers[1];\n    data_pointers[1] = current_byte + -1;\n    if ((int)(current_byte + -1) < 1) {\n      occurrence_index = (*(code *)options[0x60])(input_data,data_pointers);\n      if (occurrence_index != 0) break;\n    }\n    else {\n      *data_pointers = *data_pointers + 1;\n    }\n    options[2] = options[2] - 1;\n    next_data_ptr = data_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*options << 0x17) < 0) {\n    if (start_data_ptr < data_ptr) {\n      (*(code *)options[0x5f])(input_data,*(byte *)((int)data_ptr + -1),data_pointers);\n      data_ptr = (uint *)((int)data_ptr + -1);\n    }\n    if (data_ptr == start_data_ptr) {\n      return 1;\n    }\n  }\n  if ((*options & 0x10) == 0) {\n    *(byte *)data_ptr = 0;\n    result = (*decode_function)(input_data,start_data_ptr,0,options[1]);\n    output_ptr = (undefined4 *)*output_buffer;\n    temp_var = *options;\n    *output_buffer = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_var & 0x20) == 0) {\n      if ((int)(temp_var << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    options[3] = options[3] + 1;\n  }\n  options[4] = (uint)((int)data_ptr + options[4] + (loop_index - (int)start_data_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "decode_and_process_data_0000656c",
                "param_1": "input_data",
                "param_2": "options",
                "param_3": "data_pointers",
                "param_4": "output_buffer",
                "iVar1": "occurrence_index",
                "uVar2": "result",
                "pcVar3": "decode_function",
                "uVar4": "temp_var",
                "pbVar5": "current_byte",
                "uVar6": "tmp_value",
                "puVar7": "output_ptr",
                "puVar8": "data_ptr",
                "puVar9": "next_data_ptr",
                "puVar10": "start_data_ptr",
                "iVar11": "loop_index",
                "local_34": "strings_array"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_sensor_data_00006768",
            "code": "\nundefined4\nprocessSensorData_00006768(undefined4 *sensorData,undefined4 *dataPtr,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort tempVar4;\n  uint tempVar5;\n  \n  if ((sensorData != (undefined4 *)0x0) && (sensorData[6] == 0)) {\n    initialize_sensor_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = (undefined4 *)sensorData[1];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = (undefined4 *)sensorData[2];\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = (undefined4 *)sensorData[3];\n  }\n  tempVar4 = *(ushort *)(dataPtr + 3);\n  dataPtr[1] = 0;\n  tempVar5 = (uint)*(ushort *)(dataPtr + 3);\n  if ((int)(tempVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar5 << 0x1d) < 0) {\n    if ((undefined4 *)dataPtr[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)dataPtr[0xd] != dataPtr + 0x11) {\n        initialize_data_00004b34(sensorData);\n      }\n      dataPtr[1] = dataPtr[0x10];\n      dataPtr[0xd] = 0;\n      if (dataPtr[0x10] != 0) {\n        *dataPtr = dataPtr[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar5 << 0x1b)) {\n      *sensorData = 9;\n      tempVar4 = tempVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar5 << 0x1c) < 0) {\n      tempVar2 = process_and_verify_data_00004158(sensorData,dataPtr,tempVar5 << 0x1c,tempVar5,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      dataPtr[2] = 0;\n      *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) & 0xfff7;\n      dataPtr[6] = 0;\n    }\n    *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 4;\n  }\n  if (dataPtr[4] == 0) {\n    initialize_and_allocate_memory_00005700(sensorData,dataPtr);\n  }\n  tempVar4 = *(ushort *)(dataPtr + 3);\n  tempVar1 = *(undefined2 *)(dataPtr + 3);\n  if ((tempVar4 & 3) != 0) {\n    *(undefined2 *)(dataPtr + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(dataPtr + 3) = tempVar1;\n    if ((tempVar4 & 9) == 9) {\n      process_data_0000404c(sensorData,dataPtr);\n    }\n  }\n  tempVar3 = dataPtr[4];\n  *dataPtr = tempVar3;\n  tempVar2 = (*(code *)dataPtr[9])(sensorData,dataPtr[8],tempVar3,dataPtr[5]);\n  dataPtr[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar4 = *(ushort *)(dataPtr + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar4 = tempVar4 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    dataPtr[1] = tempVar3;\n    tempVar4 = tempVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(dataPtr + 3) = tempVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_sensor_data_00006768",
                "param_1": "sensorData",
                "param_2": "dataPtr",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_data_0000687c",
            "code": "\nbyte * decode_data_0000687c(int data_length,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint next_byte;\n  uint end_index;\n  uint start_index;\n  bool flag;\n  \n  next_byte = (uint)*data;\n  flag = next_byte == 0x5e;\n  if (flag) {\n    next_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = data_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = flag;\n  } while (index != data_length + 0xff);\n  if (next_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      end_index = next_byte;\n      *(bool *)(data_length + end_index) = !flag;\n      data = data + 1;\n      while( true ) {\n        next_byte = (uint)data[-1];\n        if (next_byte != 0x2d) break;\n        start_index = (uint)*data;\n        if ((start_index == 0x5d) || (temp_var = end_index, (int)start_index < (int)end_index)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(data_length + temp_var) = !flag;\n        } while ((int)temp_var < (int)start_index);\n        index = ~end_index + start_index;\n        if ((int)start_index <= (int)end_index) {\n          index = 0;\n        }\n        end_index = end_index + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((next_byte != 0x5d) && (result = data + -1, next_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_data_0000687c",
                "param_1": "data_length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "iVar3": "index",
                "uVar4": "next_byte",
                "uVar5": "end_index",
                "uVar6": "start_index",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_and_copy_or_create_array_000068f0",
            "code": "\nundefined4 allocate_and_copy_or_create_array_000068f0(undefined4 param_value,int *array)\n\n{\n  int new_array_ptr;\n  int array_length;\n  \n  if ((int *)array[0xd] == array + 0x11) {\n    new_array_ptr = allocate_memory(param_value,0x400);\n    if (new_array_ptr != 0) {\n      array[0xe] = 0x400;\n      array[0xd] = new_array_ptr;\n      *(undefined *)(new_array_ptr + 0x3ff) = *(undefined *)((int)array + 0x46);\n      *(undefined *)(new_array_ptr + 0x3fe) = *(undefined *)((int)array + 0x45);\n      *(undefined *)(new_array_ptr + 0x3fd) = *(undefined *)(array + 0x11);\n      *array = new_array_ptr + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    array_length = array[0xe];\n    new_array_ptr = allocate_and_copy_array(param_value,(int *)array[0xd],array_length << 1);\n    if (new_array_ptr != 0) {\n      copy_array(new_array_ptr + array_length,new_array_ptr,array_length);\n      array[0xd] = new_array_ptr;\n      array[0xe] = array_length << 1;\n      *array = new_array_ptr + array_length;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_and_copy_or_create_array_000068f0",
                "param_1": "param_value",
                "param_2": "array",
                "iVar1": "new_array_ptr",
                "iVar2": "array_length",
                "allocate_memory_00004bd0": "allocate_memory",
                "copy_array_000060b0": "copy_array",
                "allocate_and_copy_array_000060cc": "allocate_and_copy_array"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_value_00006964",
            "code": "\nint calculateValue_00006964(undefined4 undefined_param,int input_param)\n\n{\n  int result;\n  \n  result = *(int *)(input_param + -4) + -4;\n  if (*(int *)(input_param + -4) < 0) {\n    result = result + *(int *)(input_param + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_value_00006964",
                "param_1": "undefined_param",
                "param_2": "input_param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "perform_division_00006974",
            "code": "\nundefined8 perform_division_00006974(int dividend,int divisor,int remainder,int carry)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined buffer [8];\n  \n  if ((carry == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (carry < 0) {\n      result = perform_division_00006974_00006a14(-dividend,adjusted_divisor,-remainder,-carry - (uint)(remainder != 0),buffer);\n      return result;\n    }\n    result = perform_division_00006974_00006a14(-dividend,adjusted_divisor,remainder,carry,buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (carry < 0) {\n    result = perform_division_00006974_00006a14(dividend,divisor,-remainder,-carry - (uint)(remainder != 0),buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = perform_division_00006974_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "perform_division_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "carry",
                "iVar1": "adjusted_divisor",
                "uVar2": "result",
                "local_8": "buffer"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "perform_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong performDivision_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *quotient_ptr)\n\n{\n  code *unrecovered_jumptable;\n  uint quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      temp3 = divisor;\n      if (shift_amount != 0) {\n        temp3 = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = dividend_high / temp4;\n      temp1 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      quotient = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = CARRY4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = CARRY4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        unrecovered_jumptable = (code *)software_udf(0xff,0x6abc);\n        result = (*unrecovered_jumptable)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp7 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        temp3 = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_amount;\n        temp7 = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp1 = quotient / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << shift_amount;\n        quotient = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carry_flag = CARRY4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        dividend_high = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          carry_flag = CARRY4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          temp3 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            temp3 = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        temp3 = temp3 | quotient << 0x10;\n      }\n      temp6 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp6) * 0x10000;\n      quotient = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = temp4 >> LZCOUNT(divisor);\n      quotient_ptr[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = dividend;\n      quotient_ptr[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    temp3 = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount != 0) {\n      temp5 = 0x20 - shift_amount;\n      temp1 = divisor >> (temp5 & 0xff) | divisor_high << shift_amount;\n      temp7 = temp1 >> 0x10;\n      quotient = dividend_high >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | dividend_high << shift_amount;\n      temp4 = quotient / temp7;\n      temp2 = temp3 >> 0x10 | (quotient - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_amount);\n        temp3 = temp3 - 1;\n      }\n      if (quotient_ptr != (uint *)0x0) {\n        quotient = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_ptr = quotient << (temp5 & 0xff) | dividend - (uint)result >> shift_amount;\n        quotient_ptr[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp3 = 0;\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = dividend;\n      quotient_ptr[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp3,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "perform_division_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "quotient_ptr",
                "UNRECOVERED_JUMPTABLE": "unrecovered_jumptable",
                "uVar1": "quotient",
                "iVar2": "shift_amount",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 137350,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}