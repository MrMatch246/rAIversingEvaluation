{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "read_input_080006b4",
                "param_1": "input_array",
                "bVar1": "is_overflow",
                "uVar2": "current_input_byte",
                "iVar3": "read_result",
                "bVar4": "current_input_byte_index"
            },
            "code": "int read_input_080006b4(int **input_array){\n\tbool is_overflow = false;\n\tint input_index = 0;\n\tint max_input_length = *(byte *)((int)input_array + 6);\n\tif (max_input_length > 1) {\n\t\tread_input_080006b4(max_input_length, 0);\n\t}\n\t*(undefined *)((int)input_array + 0x49) = 0;\n\tif (*(byte *)((int)input_array + 5) < 4) {\n\t\twhile (true) {\n\t\t\tint read_result = (**(code **)(**input_array + 8))();\n\t\t\tif (read_result == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbyte current_input_byte_index = *(byte *)((int)input_array + 0x49);\n\t\t\tundefined current_input_byte = (**(code **)(**input_array + 0xc))();\n\t\t\t*(undefined *)((int)input_array + current_input_byte_index + 9) = current_input_byte;\n\t\t\tcurrent_input_byte_index++;\n\t\t\t*(byte *)((int)input_array + 0x49) = current_input_byte_index;\n\t\t\tif (current_input_byte_index > 0x3f) {\n\t\t\t\tis_overflow = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t*(short *)(input_array + 0x14) = *(short *)(input_array + 0x14) + 1;\n\tif (is_overflow) {\n\t\t*(short *)(input_array + 0x15) = *(short *)(input_array + 0x15) + 1;\n\t\treturn -3;\n\t}\n\treturn (int)*(char *)((int)input_array + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "read_input_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_080034da(int value, short* array)\n{\n    while (*array != -1) {\n        if (*array == value) {\n            break;\n        }\n        array = array + 6;\n    }\n    return *(int*)(array + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_080035fc",
                "param_1": "bit_field",
                "DAT_08003718": "BIT_MASK_1",
                "DAT_0800371c": "BIT_MASK_3",
                "DAT_08003720": "BIT_MASK_4",
                "DAT_08003724": "BIT_MASK_5",
                "DAT_08003728": "BIT_MASK_6",
                "DAT_0800372c": "BIT_MASK_7",
                "DAT_08003730": "BIT_MASK_8",
                "DAT_08003734": "BIT_MASK_9",
                "DAT_08003738": "BIT_MASK_10",
                "DAT_0800373c": "BIT_MASK_11",
                "DAT_08003740": "BIT_MASK_12",
                "DAT_08003744": "BIT_MASK_13",
                "DAT_08003748": "BIT_MASK_14",
                "DAT_0800374c": "bit_field_start"
            },
            "code": "void set_bits_080035fc(uint32_t *bit_field)\n{\n    uint32_t *DAT_0800374c = (uint32_t *)0x0800374c;\n    if (*bit_field == DAT_08003718)\n    {\n        *DAT_0800374c &= ~(1 << 0);\n    }\n    if (*bit_field == BIT_MASK_2)\n    {\n        *DAT_0800374c &= ~(1 << 1);\n    }\n    if (*bit_field == DAT_0800371c)\n    {\n        *DAT_0800374c &= ~(1 << 1);\n    }\n    if (*bit_field == DAT_08003720)\n    {\n        *DAT_0800374c &= ~(1 << 2);\n    }\n    if (*bit_field == DAT_08003724)\n    {\n        *DAT_0800374c &= ~(1 << 3);\n    }\n    if (*bit_field == DAT_08003728)\n    {\n        *DAT_0800374c &= ~(1 << 4);\n    }\n    if (*bit_field == DAT_0800372c)\n    {\n        *DAT_0800374c &= ~(1 << 5);\n    }\n    if (*bit_field == DAT_08003730)\n    {\n        *DAT_0800374c &= ~(1 << 1);\n    }\n    if (*bit_field == DAT_08003734)\n    {\n        *DAT_0800374c &= ~(1 << 16);\n    }\n    if (*bit_field == DAT_08003738)\n    {\n        *DAT_0800374c &= ~(1 << 17);\n    }\n    if (*bit_field == DAT_0800373c)\n    {\n        *DAT_0800374c &= ~(1 << 18);\n    }\n    if (*bit_field == DAT_08003740)\n    {\n        *DAT_0800374c &= ~(1 << 19);\n    }\n    if (*bit_field == DAT_08003744)\n    {\n        *DAT_0800374c &= ~(1 << 6);\n    }\n    if (*bit_field == DAT_08003748)\n    {\n        *DAT_0800374c &= ~(1 << 7);\n    }\n    if (*bit_field == DAT_080037185)\n    {\n        *DAT_0800374c &= ~(1 << 8);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_flag_set_08003dd0",
                "param_1": "flag_index",
                "uVar1": "flag_status",
                "PTR_DAT_08003df0": "ptr_data",
                "byte": "byte_value",
                "DAT_0800312c": "calculate_flag_status"
            },
            "code": "bool is_flag_set_08003dd0(int flag_index){\n    uint32_t ptr_offset = *(uint32_t *)(PTR_DAT_08003df0 + (uint32_t)*(uint8_t *)(flag_index + 0x44) * 4);\n    uint32_t flag_status = DAT_0800312c(ptr_offset);\n    return (flag_status & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "is_flag_set_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "parameter_1",
                "local_50": "parameter_2",
                "local_3c": "parameter_3",
                "local_38": "parameter_4",
                "local_34": "parameter_5",
                "local_30": "parameter_6",
                "local_2c": "parameter_7",
                "local_28": "parameter_8",
                "local_24": "parameter_9",
                "local_20": "parameter_10",
                "local_1c": "parameter_11",
                "local_18": "parameter_12",
                "local_14": "parameter_13",
                "DAT_08000d30": "control_register_1",
                "DAT_08000d34": "control_register_2",
                "DAT_08000d38": "data_register"
            },
            "code": "void initialize_system_08000c8c(void)\n{\n  uint32_t control_reg_1;\n  uint32_t control_reg_2;\n  uint32_t config_reg_1;\n  uint32_t config_reg_2;\n  uint32_t config_reg_3;\n  uint32_t config_reg_4;\n  uint32_t config_reg_5;\n  uint32_t config_reg_6;\n  uint32_t config_reg_7;\n  uint32_t config_reg_8;\n  uint32_t config_reg_9;\n  uint32_t config_reg_10;\n  \n  control_reg_1 = *(uint32_t *)(DAT_08000d30 + 0x40) | 0x10000000;\n  *(uint32_t *)(DAT_08000d30 + 0x40) = control_reg_1;\n  control_reg_2 = *DAT_08000d34 | 0xc000;\n  *DAT_08000d34 = control_reg_2;\n  \n  uint32_t parameter_1 = 1;\n  uint32_t parameter_2 = 0x50000;\n  uint32_t parameter_3 = 2;\n  uint32_t parameter_4 = 0x400000;\n  uint32_t parameter_5 = 8;\n  uint32_t parameter_6 = 0x150;\n  uint32_t parameter_7 = 2;\n  uint32_t parameter_8 = 7;\n  \n  FUNC_0800201c(&parameter_1);\n  FUN_08001f9c();\n  \n  uint32_t parameter_9 = 0xf;\n  uint32_t parameter_10 = 2;\n  uint32_t parameter_11 = 0;\n  uint32_t parameter_12 = 0x1400;\n  uint32_t parameter_13 = 0x1000;\n  FUN_08002488(&parameter_9, 5);\n  uint32_t uVar1 = FUN_080025e0();\n  FUN_08000ee0((uint)((ulonglong)DAT_08000d38 * (ulonglong)uVar1 >> 0x26));\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff, 0, 0);\n  return;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000f2c",
                "FUN_0800201c",
                "FUN_08000e60",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_system_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_value_and_set_flag_08000a4e",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "index",
                "uVar2": "value",
                "FUN_08004640": "calculate_index",
                "*(undefined *)(param_1 + 0xb)": "*(uint8_t *)(data_ptr + 0xb)",
                "*(undefined *)(param_1 + 0xc)": "*(uint8_t *)(data_ptr + 0xc)",
                "*(undefined *)(param_1 + 0xd)": "*(uint8_t *)(data_ptr + 0xd)",
                "*(undefined *)(param_1 + 0xe)": "*(uint8_t *)(data_ptr + 0xe)",
                "*(undefined2 *)(param_2 + (uint)bVar1 * 2)": "*(uint16_t *)(result_ptr + index * 2)",
                "*(undefined *)(param_1 + 0x49)": "*(uint8_t *)(data_ptr + 0x49)",
                "FUN_0800076c": "update_data"
            },
            "code": "uint8_t get_value_and_set_flag_08000a4e(int data_ptr, int result_ptr) {\n  uint8_t index = calculate_index(*(uint8_t *)(data_ptr + 0xb), *(uint8_t *)(data_ptr + 0xc));\n  uint16_t value = calculate_value(*(uint8_t *)(data_ptr + 0xd), *(uint8_t *)(data_ptr + 0xe));\n  *(uint16_t *)(result_ptr + index * 2) = value;\n  *(uint8_t *)(data_ptr + 0x49) = 6;\n  update_data(data_ptr);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_and_set_flag_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "run_program_08004658",
                "FUN_08000c4c": "initialize_data",
                "FUN_08000c64": "process_data",
                "FUN_08004338": "output_results",
                "DAT_08004674": "data_available",
                "do_nothing_08004646": "do_nothing"
            },
            "code": "void run_program_08004658(void)\n{\n  do_nothing();\n  initialize_data();\n  do {\n    do {\n      process_data();\n    } while (DAT_08004674 == 0);\n    output_results();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c64",
                "FUN_08004338",
                "FUN_08000c4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "run_program_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "check_parameter_080034f4",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_080034da": "get_result"
            },
            "code": "int check_parameter_080034f4(int input_param)\n{\n  int result;\n  if (input_param != -1) {\n    result = get_result();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978",
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_parameter_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_in_array_0800355e",
                "param_1": "target",
                "param_2": "array"
            },
            "code": "int find_short_in_array_0800355e(int target, short* array)\n{\n    if (target == -1) {\n        return 0;\n    }\n    while (*array != -1) {\n        if (target == *array) {\n            return 1;\n        }\n        array = array + 6;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "process_data_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr_data",
                "iVar2": "status"
            },
            "code": "void process_data_0800573c(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr_data = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  int status = perform_operation(arg1, arg2, arg3, arg3, arg3);\n  if ((status == -1) && (*(int *)ptr_data != 0)) {\n    *result = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "process_data_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "add_to_data_structure_08003e54",
                "param_1": "data",
                "param_2": "index",
                "param_3": "flag",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "index_offset",
                "PTR_DAT_08003ea0": "data_index_array",
                "PTR_DAT_08003ea4": "data_array",
                "char_value": "char_value"
            },
            "code": "void add_to_data_structure_08003e54(int data, int index, int flag, int param_4) {\n  int result = FUN_08003dd0();\n  if (data != 0 && result == 0) {\n    uint index_offset = (uint)*(byte *)(data + 0x44);\n    *(int *)(PTR_DAT_08003ea4 + index_offset * 4) = data;\n    *(int *)(PTR_DAT_08003ea0 + index_offset * 4) = index;\n    int char_value = *(char *)(data + 0x5c);\n    FUN_08000e60(char_value, 0, 1, index_offset, param_4);\n    FUN_08000ec4(char_value);\n    FUN_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + index_offset * 4), data + 0x45, 1);\n  }\n}\n",
            "called": [
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "add_to_data_structure_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr_data",
                "uVar2": "data1",
                "uStack_c": "data2",
                "uStack_8": "data3",
                "uStack_4": "data4",
                "PTR_PTR_DAT_08005008": "PTR_DATA"
            },
            "code": "void process_data_08004fdc(int data1, int data2, int data3, int data4) {\n  int ptr_data = *(int *)PTR_PTR_DAT_08005008;\n  if ((ptr_data != 0) && (*(int *)(ptr_data + 0x18) == 0)) {\n    clean_data(ptr_data);\n  }\n  process_data_08004fdc_helper(ptr_data, *(int *)(ptr_data + 8), data1, &data2, data1, &data2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "initialize_value_if_not_set_080056d4",
                "param_1": "result",
                "param_2": "value_to_set",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr_to_data",
                "iVar2": "function_result"
            },
            "code": "void initialize_value_if_not_set_080056d4(int *result, int value_to_set, int arg2, int arg3)\n{\n  undefined *ptr_to_data = PTR_DAT_080056f4;\n  *(int *)ptr_to_data = 0;\n  int function_result = FUN_080040d6(arg2, arg3, arg3, 0, value_to_set);\n  if ((function_result == -1) && (*(int *)ptr_to_data != 0)) {\n    *result = *(int *)ptr_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "initialize_value_if_not_set_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_default_value_thunk_0800410c",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_default_value_thunk_0800410c(void)\n{\n    int default_value = 1;\n    return default_value;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_default_value_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "data",
                "local_1c": "processed_data",
                "FUN_080034f4": "calculate_data",
                "PTR_DAT_08003408": "data_pointer",
                "FUN_08003380": "check_data",
                "FUN_08000f72": "process_output",
                "FUN_08000f56": "finalize_output"
            },
            "code": "void process_data_080033d8(int data){\n    int result;\n    int processed_data[5];\n    \n    processed_data[0] = calculate_data(data, PTR_DAT_08003408);\n    result = check_data(data);\n    if ((processed_data[0] != 0) && ((result == 0) || (result == 0x10))) {\n        process_output(processed_data, result);\n        finalize_output(processed_data);\n    }\n    return;\n}",
            "called": [
                "FUN_08003380",
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = FUN_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = FUN_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = FUN_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = FUN_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = FUN_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = FUN_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = FUN_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = FUN_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = FUN_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = FUN_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = FUN_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = FUN_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = FUN_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = FUN_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = FUN_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = FUN_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = FUN_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = FUN_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "set_configuration_08002488",
                "param_1": "config",
                "param_2": "num_params",
                "puVar1": "config_reg",
                "iVar2": "timeout_start",
                "iVar3": "timeout_end",
                "uVar4": "config_val",
                "DAT_080025d0": "config_reg",
                "DAT_080025d4": "config_data",
                "PTR_DAT_080025dc": "config_ptr",
                "PTR_DAT_080025d8": "config_ptr_table"
            },
            "code": "uint32_t set_configuration_08002488(uint32_t *config,uint32_t num_params){\n  uint32_t *DAT_080025d0 = DAT_080025d0;\n  uint32_t timeout_start, timeout_end;\n  uint32_t config_val = *DAT_080025d0 & 0xf;\n  if (config == NULL) {\n    return 1;\n  }\n  if (config_val < num_params) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*DAT_080025d0 & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    if ((*config & 4) != 0) {\n      DAT_080025d4[2] |= 0x1c00;\n    }\n    if ((*config & 8) != 0) {\n      DAT_080025d4[2] |= 0xe000;\n    }\n    DAT_080025d4[2] &= 0xffffff0f;\n    DAT_080025d4[2] |= config[2];\n  }\n  if ((*config & 1) != 0) {\n    uint32_t config_val2 = config[1];\n    if (config_val2 == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (config_val2 - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d4[2] &= 0xfffffffc;\n    DAT_080025d4[2] |= config_val2;\n    timeout_start = FUN_08000e30();\n    while( true ) {\n      if ((DAT_080025d4[2] & 0xc) == config[1] * 4) break;\n      timeout_end = FUN_08000e30();\n      if (5000 < (uint32_t)(timeout_end - timeout_start)) {\n        return 3;\n      }\n    }\n  }\n  DAT_080025d0 = DAT_080025d0;\n  if (num_params < (*DAT_080025d0 & 0xf)) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*DAT_080025d0 & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 4) != 0) {\n    DAT_080025d4[2] &= 0xffffe3ff;\n    DAT_080025d4[2] |= config[3];\n  }\n  if ((*config & 8) != 0) {\n    DAT_080025d4[2] &= 0xffff1fff;\n    DAT_080025d4[2] |= config[4] << 3;\n  }\n  uint32_t config_result = FUN_080023b4();\n  *(uint32_t *)PTR_DAT_080025dc = config_result >> PTR_DAT_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080023b4",
                "FUN_08000d98",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_configuration_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "copy_data_to_memory_08004544",
                "param_1": "memory_address",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4"
            },
            "code": "void copy_data_to_memory_08004544(uint32_t *memory_address, uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t data_4)\n{\n  *memory_address = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(uint8_t *)(memory_address + 1) = data_1;\n  *(uint8_t *)((int)memory_address + 5) = data_2;\n  *(uint8_t *)((int)memory_address + 6) = data_3;\n  *(uint8_t *)((int)memory_address + 7) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "copy_data_to_memory_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_data_08003cc8",
                "sVar1": "data_value",
                "puVar2": "data_pointer",
                "uVar3": "converted_value",
                "iVar4": "result_code",
                "uVar5": "function_result",
                "FUN_080034f4": "convert_data",
                "FUN_0800351e": "convert_value",
                "FUNC_08003978": "process_result"
            },
            "code": "void process_data_08003cc8(void)\n{\n  short data_value;\n  undefined *data_pointer;\n  undefined2 converted_value;\n  int result_code;\n  undefined4 function_result;\n\n  data_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  result_code = convert_data((int)data_value,PTR_DAT_08003d0c);\n  if (result_code != 0) {\n    function_result = convert_data((int)data_value,PTR_DAT_08003d0c);\n    converted_value = convert_value(function_result,PTR_DAT_08003d10);\n    data_pointer = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = converted_value;\n    *(short *)(data_pointer + 0x58) = data_value;\n    *(undefined4 *)(data_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(data_pointer + 0x54) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    process_result(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_parameters_08000fb4",
                "param_1": "parameters",
                "param_2": "mask",
                "puVar1": "param_ptr",
                "puVar2": "mask_ptr",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "bit_index",
                "uVar6": "temp_value",
                "uVar7": "current_mask_value",
                "iVar8": "byte_index",
                "uVar9": "temp_mask",
                "iVar10": "bit_shift",
                "bit_shifted_value": "bit_shifted_value",
                "current_param_value": "current_param_value",
                "param_index": "param_index"
            },
            "code": "void update_parameters_08000fb4(uint *parameters, uint *mask)\n{\n    uint *param_ptr;\n    uint *mask_ptr;\n    uint bit_mask;\n    uint bit_value;\n    uint bit_index;\n    uint temp_value;\n    uint temp_mask;\n    int byte_index;\n    int bit_shift;\n    uint bit_shifted_value;\n    uint current_param_value;\n    uint current_mask_value;\n    int param_index;\n    \n    for (bit_index = 0; bit_index < 16; bit_index++) {\n        bit_mask = 1 << (bit_index & 0xff);\n        bit_value = bit_mask & *mask;\n        if (bit_mask == bit_value) {\n            if ((mask[1] == 2) || (mask[1] == 0x12)) {\n                byte_index = (bit_index >> 3) + 8;\n                bit_shift = (bit_index & 7) << 2;\n                temp_value = mask[4] << bit_shift;\n                temp_mask = ~(0xf << bit_shift);\n                parameters[byte_index] = (parameters[byte_index] & temp_mask) | temp_value;\n            }\n            bit_shifted_value = (mask[1] & 3) << (bit_index << 1);\n            temp_mask = ~(3 << (bit_index & 0xff));\n            current_param_value = *parameters;\n            *parameters = current_param_value & temp_mask | bit_shifted_value;\n            current_mask_value = mask[1];\n            if (((current_mask_value - 1 < 2) || (current_mask_value == 0x11)) || (current_mask_value == 0x12)) {\n                bit_shifted_value = mask[3] << (bit_index << 1);\n                parameters[2] = (parameters[2] & temp_mask) | bit_shifted_value;\n                bit_shifted_value = ((mask[1] << 0x1b) >> 0x1f) << (bit_index & 0xff);\n                parameters[1] = (parameters[1] & ~bit_mask) | bit_shifted_value;\n            }\n            bit_shifted_value = mask[2] << (bit_index << 1);\n            parameters[3] = (parameters[3] & temp_mask) | bit_shifted_value;\n            if ((mask[1] & 0x10000000) != 0) {\n                *(uint *)(DAT_0800118c + 0x44) = *(uint *)(DAT_0800118c + 0x44) | 0x4000;\n                bit_shift = (bit_index & 3) << 2;\n                if (parameters == DAT_08001190) {\n                    param_index = 0;\n                }\n                else if (parameters == DAT_08001194) {\n                    param_index = 1;\n                }\n                else if (parameters == DAT_08001194 + 0x100) {\n                    param_index = 2;\n                }\n                else if (parameters == DAT_08001194 + 0x200) {\n                    param_index = 3;\n                }\n                else if (parameters == DAT_08001194 + 0x300) {\n                    param_index = 4;\n                }\n                else if (parameters == DAT_08001194 + 0x400) {\n                    param_index = 5;\n                }\n                else if (parameters == DAT_08001194 + 0x500) {\n                    param_index = 6;\n                }\n                else if (parameters == DAT_08001194 + 0x600) {\n                    param_index = 7;\n                }\n                else if (parameters == DAT_08001194 + 0x700) {\n                    param_index = 8;\n                }\n                else if (parameters == DAT_08001194 + 0x800) {\n                    param_index = 9;\n                }\n                else {\n                    param_index = 10;\n                }\n                temp_mask = ~bit_value;\n                current_param_value = *DAT_08001188 & temp_mask;\n                bit_shifted_value = param_index << bit_shift;\n                if ((mask[1] & 0x10000) != 0) {\n                    current_param_value |= bit_value;\n                }\n                *DAT_08001188 = current_param_value;\n                current_mask_value = DAT_08001188[1] & temp_mask;\n                bit_shifted_value <<= 1;\n                if ((mask[1] & 0x20000) != 0) {\n                    current_mask_value |= bit_value;\n                }\n                DAT_08001188[1] = current_mask_value;\n                current_param_value = DAT_08001188[2] & temp_mask;\n                bit_shifted_value <<= 1;\n                if ((mask[1] & 0x100000) != 0) {\n                    current_param_value |= bit_value;\n                }\n                DAT_08001188[2] = current_param_value;\n                current_param_value = DAT_08001188[3] & temp_mask;\n                bit_shifted_value <<= 1;\n                if ((mask[1] & 0x200000) != 0) {\n                    current_param_value |= bit_value;\n                }\n                DAT_08001188[3] = current_param_value;\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "update_parameters_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "input_ptr",
                "puVar3": "output_ptr"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  uint32_t *input_ptr = *input;\n  if ((input_ptr[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((input_ptr[5] & 4) != 0) {\n      uint8_t *output_ptr = (uint8_t *)input[9];\n      input[9] = (uint32_t *)(output_ptr + 1);\n      *(char *)output_ptr = (char)input_ptr[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      uint8_t *output_ptr = (uint8_t *)input[9];\n      input[9] = (uint32_t *)(output_ptr + 1);\n      *(char *)output_ptr = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_080038d0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    do_something_else_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_0800160c",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "set_param_08002d72_08002d72",
                "param_1": "param_ptr",
                "param_array": "param_array",
                "param_char": "param_char"
            },
            "code": "int set_param_08002d72_08002d72(int *param_array)\n{\n    if (param_array != NULL) {\n        int param_char = *(char *)(param_array + 0x39);\n        if (param_char == 0) {\n            *(undefined *)(param_array + 0xe) = 0;\n            do_nothing_08002d70();\n        }\n        *(undefined *)((int)param_array + 0x39) = 0x24;\n        int *param_1 = (int *)*param_array;\n        param_1[3] &= 0xffffdfff;\n        FUNC_080029c8(param_array);\n        param_1[4] &= 0xffffb7ff;\n        param_1[5] &= 0xffffffd5;\n        param_1[3] |= 0x2000;\n        param_array[0xf] = 0;\n        *(undefined *)((int)param_array + 0x39) = 0x20;\n        *(undefined *)((int)param_array + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_param_08002d72_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "validate_input_080007f0",
                "param_1": "input",
                "param_2": "increment",
                "param_3": "limit",
                "param_4": "value",
                "bVar1": "found",
                "bVar2": "temp_byte",
                "cVar3": "char1",
                "cVar4": "char2",
                "iVar5": "result",
                "uVar6": "i",
                "iVar7": "val1"
            },
            "code": "int validate_input_080007f0(int input, int increment, uint limit, int value) {\n  bool found = false;\n  uint i = 0;\n  while (i <= 7) {\n    if ((byte)PTR_DAT_080008c8[i] == input) {\n      found = true;\n      break;\n    }\n    i++;\n  }\n  if (!found) {\n    return 0;\n  }\n  *(short *)(increment + 84) += 1;\n  switch(*(byte *)(increment + 10)) {\n    case 1:\n    case 2:\n    case 15:\n      return calculate_value(increment + 11, increment + 13, limit, value);\n    case 3:\n    case 4:\n    case 16:\n      int val1 = calculate_value(increment + 11, increment + 13, limit, value);\n      int val2 = calculate_value(increment + 15, increment + 17);\n      if (*(byte *)(increment + 96) < (byte)(val1 + val2)) {\n        return 2;\n      }\n      return 0;\n    case 5:\n      int val3 = calculate_value(increment + 11, increment + 13, limit, value);\n      if ((uint)*(byte *)(increment + 96) < (uint)(val3 << 0x14) >> 0x18) {\n        return 2;\n      }\n      return 0;\n    case 6:\n      int val4 = calculate_value(increment + 11, increment + 13, limit, value);\n      if (*(byte *)(increment + 96) < val4) {\n        return 2;\n      }\n      return 0;\n    default:\n      return 0;\n  }\n}\n\nint calculate_value(int value1, int value2, uint limit, int value) {\n  int val1 = FUN_08004640(*(undefined *)(value1), *(undefined *)(value1 + 1), limit, value, value2);\n  int val2 = FUN_08004640(*(undefined *)(value2), *(undefined *)(value2 + 1));\n  return ((uint)(val1 << 0xc) >> 0x10) + ((uint)(val2 << 0xc) >> 0x10) & 0xff;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "validate_input_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "output",
                "param_2": "input_offset",
                "sVar1": "data",
                "puVar2": "pointer",
                "iVar3": "result",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "FUN_08005718": "process_error",
                "PTR_DAT_080056b0": "pointer_data"
            },
            "code": "void process_data_0800562a(int *output, int input_offset, undefined4 param_3, undefined4 param_4)\n{\n    short data;\n    undefined *pointer;\n    int result;\n    undefined4 unaff_r4;\n    undefined4 unaff_r5;\n    undefined4 in_lr;\n\n    data = *(short *)(input_offset + 0xe);\n    if ((int)((uint)*(ushort *)(input_offset + 0xc) << 0x17) < 0) {\n        process_error(output, (int)data, 0, 2);\n    }\n    *(ushort *)(input_offset + 0xc) = *(ushort *)(input_offset + 0xc) & 0xefff;\n    pointer = PTR_DAT_080056b0;\n    *(undefined4 *)PTR_DAT_080056b0 = 0;\n    result = process_data_0800562a_internal((int)data, param_3, param_4, param_4, param_4, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (*(int *)pointer != 0)) {\n        *output = *(int *)pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "print_if_param1_is_1_080044d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_080044f8": "PTR_DATA",
                "DAT_080044f4": "DATA"
            },
            "code": "void print_if_param1_is_1_080044d8(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    print(PTR_DAT_080044f8, DAT_080044f4, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "print_if_param1_is_1_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "param_1": "input",
                "uVar1": "result",
                "PTR_DAT_08003e14": "ptr_data",
                "DAT_0800312c": "dat_0800312c"
            },
            "code": "bool is_valid_input_08003df4(int input) {\n  uint32_t ptr = PTR_DAT_08003e14 + (uint32_t)*(byte *)(input + 0x44) * 4;\n  uint32_t result = FUN_0800312c(*(uint32_t *)ptr);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_first_empty_slot_08005400",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "end_slot",
                "piVar2": "current_slot",
                "iVar3": "slot",
                "ppiVar4": "slot_list",
                "PTR_PTR_DAT_08005474": "slot_list_address",
                "FUN_080053a0": "initialize_slots",
                "short": "short_int",
                "allocate_memory": "FUN_08005374",
                "*param_1": "*error_code",
                "NULL": "NULL"
            },
            "code": "int* find_first_empty_slot_08005400(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int** slot = *(int***)0x08005474;\n    if (*(int*)(slot + 6) == 0)\n        initialize_slots(slot);\n    while (slot[2] != NULL) {\n        int* current_slot = slot[2];\n        int* end_slot = current_slot + *(short*)(current_slot + 6) * 0x1a;\n        while (current_slot < end_slot) {\n            if (*(short*)(current_slot + 6) == 0) {\n                reset_slot(current_slot, param_4);\n                return current_slot;\n            }\n            current_slot += 0x1a;\n        }\n        slot = (int**)slot[0];\n    }\n    int* new_slot = (int*)allocate_memory(error_code, 4);\n    if (new_slot == NULL)\n        return NULL;\n    slot[2] = new_slot;\n    return new_slot;\n}\n\nvoid initialize_slots(int** slot)\n{\n    // Initialize the slots\n}\n\nvoid reset_slot(int* slot, undefined4 param_4)\n{\n    *(short*)(slot + 6) = 0xffff;\n    *(short*)(slot + 12) = 1;\n    slot[0x19] = 0;\n    *slot = 0;\n    slot[2] = 0;\n    slot[1] = 0;\n    slot[4] = 0;\n    slot[5] = 0;\n    slot[6] = 0;\n    FUN_080048cc(slot + 0x17, 0, 8, 1, param_4);\n    slot[0xd] = 0;\n    slot[0xe] = 0;\n    slot[0x12] = 0;\n    slot[0x13] = 0;\n}\n",
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_first_empty_slot_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_integers_08003582",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_integers_08003582(int num1, int num2)\n{\n    if (num1 != num2) {\n        if (num1 == 0) {\n            return num2;\n        }\n        if (num2 == 0) {\n            return num1;\n        }\n        num1 = 0;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_integers_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "execute_function_08005760",
                "PTR_DAT_080057fc": "ptr_data_1",
                "PTR_DAT_08005800": "ptr_data_2",
                "PTR_DAT_08005804": "ptr_data_3",
                "PTR_DAT_08005808": "ptr_data_4",
                "PTR_DAT_0800580c": "ptr_data_5",
                "PTR_DAT_08005810": "ptr_data_6",
                "PTR_DAT_08005814": "ptr_data_7",
                "PTR_DAT_08005818": "ptr_data_8",
                "PTR_DAT_0800581c": "ptr_data_9",
                "PTR_DAT_08005820": "ptr_data_10",
                "PTR_DAT_08005824": "ptr_data_11",
                "PTR_DAT_08005828": "ptr_data_12"
            },
            "code": "void execute_function_08005760(void)\n{\n    code *function_pointer;\n    function_pointer = execute_function_08005760;\n    execute_subroutine();\n    int* PTR_DAT_080057fc = (int*)PTR_DAT_080057fc;\n    int* PTR_DAT_08005800 = (int*)PTR_DAT_08005800;\n    int* PTR_DAT_08005804 = (int*)PTR_DAT_08005804;\n    int* PTR_DAT_08005808 = (int*)PTR_DAT_08005808;\n    int* PTR_DAT_0800580c = (int*)PTR_DAT_0800580c;\n    int* PTR_DAT_08005810 = (int*)PTR_DAT_08005810;\n    int* PTR_DAT_08005814 = (int*)PTR_DAT_08005814;\n    int* PTR_DAT_08005818 = (int*)PTR_DAT_08005818;\n    int* PTR_DAT_0800581c = (int*)PTR_DAT_0800581c;\n    int* PTR_DAT_08005820 = (int*)PTR_DAT_08005820;\n    int* PTR_DAT_08005824 = (int*)PTR_DAT_08005824;\n    int* PTR_DAT_08005828 = (int*)PTR_DAT_08005828;\n    if (-1 < *PTR_DAT_080057fc << 0x1f) {\n        *PTR_DAT_080057fc = 1;\n    }\n    if (-1 < *PTR_DAT_08005800 << 0x1f) {\n        *PTR_DAT_08005800 = 1;\n    }\n    if (-1 < *PTR_DAT_08005804 << 0x1f) {\n        *PTR_DAT_08005804 = 1;\n    }\n    if (-1 < *PTR_DAT_08005808 << 0x1f) {\n        *PTR_DAT_08005808 = 1;\n    }\n    if (-1 < *PTR_DAT_0800580c << 0x1f) {\n        *PTR_DAT_0800580c = 1;\n    }\n    if (-1 < *PTR_DAT_08005810 << 0x1f) {\n        *PTR_DAT_08005810 = 1;\n    }\n    if (-1 < *PTR_DAT_08005814 << 0x1f) {\n        *PTR_DAT_08005814 = 1;\n    }\n    if (-1 < *PTR_DAT_08005818 << 0x1f) {\n        *PTR_DAT_08005818 = 1;\n    }\n    if (-1 < *PTR_DAT_0800581c << 0x1f) {\n        *PTR_DAT_0800581c = 1;\n    }\n    if (-1 < *PTR_DAT_08005820 << 0x1f) {\n        *PTR_DAT_08005820 = 1;\n    }\n    if (-1 < *PTR_DAT_08005824 << 0x1f) {\n        *PTR_DAT_08005824 = 1;\n    }\n    if (-1 < *PTR_DAT_08005828 << 0x1f) {\n        *PTR_DAT_08005828 = 1;\n    }\n    (*function_pointer)();\n}\n",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "execute_function_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_to_one_08004678",
                "param_1": "number",
                "cVar1": "bits_set_to_one_count"
            },
            "code": "char count_bits_set_to_one_08004678(uint number) {\n  char bits_set_to_one_count = 0;\n  while (number != 1) {\n    bits_set_to_one_count++;\n    number = number >> 1;\n  }\n  return bits_set_to_one_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "param",
                "iVar1": "function_result",
                "FUN_0800387c": "get_function_result",
                "is_valid": "is_function_valid",
                "call_valid_function": "call_valid_function"
            },
            "code": "void check_and_call_function_08003900(undefined4 param_1)\\n{\\n    int function_result = get_function_result();\\n    char is_valid = *(char *)(function_result + 0x5f);\\n    if (is_valid == \"\\0\") {\\n        call_valid_function(param_1);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_at_position_08000f0c",
                "param_1": "position",
                "DAT_08000f28": "data_array"
            },
            "code": "void set_bit_at_position_08000f0c(uint position) {\n  if (position >= 0) {\n    int* data = (int *)(DAT_08000f28 + ((position >> 5) + 0x60) * 4);\n    *data = 1 << (position & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_position_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "bVar1": "byte1",
                "cVar2": "char1",
                "bVar3": "byte2",
                "bVar4": "byte3",
                "uVar5": "uVar1",
                "uVar6": "uVar2"
            },
            "code": "int process_data_08000998(int data_ptr, int data_len, undefined4 param_3, undefined4 param_4)\n{\n  byte byte1;\n  char char1;\n  byte byte2;\n  byte byte3;\n  uint uVar1;\n  uint uVar2;\n  byte1 = get_byte(data_ptr + 0xb);\n  byte2 = get_byte(data_ptr + 0xd);\n  set_byte(data_ptr + 0xb, byte2 << 1);\n  set_undefined(data_ptr + 0x49, 3);\n  for (uVar1 = (uint)byte1; uVar1 < (uint)byte1 + (uint)byte2; uVar1 = (uVar1 + 1) & 0xff)\n  {\n    byte3 = get_byte(data_ptr + 0x49);\n    set_char(data_ptr + (uint)byte3 + 9, (char)((ushort)get_word(data_len + uVar1 * 2) >> 8));\n    uVar2 = (byte3 + 1) & 0xff;\n    char1 = (char)uVar2;\n    set_char(data_ptr + 0x49, char1);\n    set_undefined(data_ptr + uVar2 + 9, get_byte(data_len + uVar1 * 2));\n    set_char(data_ptr + 0x49, char1 + '\\x01');\n  }\n  char1 = get_char(data_ptr + 0x49);\n  finalize_process(data_ptr);\n  return (int)(char)(char1 + '\\x02');\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "execute_function_080055d0",
                "param_1": "function_index",
                "puVar1": "error_ptr",
                "uVar2": "function_arg",
                "piVar3": "function_pointers",
                "iVar4": "result",
                "pcVar5": "function",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "function_pointers_ptr"
            },
            "code": "int execute_function_080055d0(uint function_index) {\n  int *function_pointers = *(int **)function_pointers_ptr_ptr;\n  if (function_index > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int function_pointer = function_pointers[17 + function_index];\n  if (function_pointer != 0) {\n    void (*function)(uint) = (void (*)(uint))function_pointer;\n    if (function != (void (*)(uint))1) {\n      if (function == (void (*)(uint))-1) {\n        *function_pointers = 22;\n        return 1;\n      }\n      function_pointers[17 + function_index] = 0;\n      function(function_index);\n    }\n    return 0;\n  }\n  void *function_pointers_ptr = function_pointers_ptr_ptr;\n  uint function_arg = thunk_FUN_0800410c(function_pointers);\n  void *error_ptr = error_ptr_ptr;\n  *(uint *)error_ptr = 0;\n  int result = FUN_080040fc(function_arg, function_index, function_index, 0, function_pointers_ptr, unaff_r4, unaff_r5, in_lr);\n  if (result == -1 && (*(int *)error_ptr != 0)) {\n    *function_pointers = *(int *)error_ptr;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "execute_function_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "checkAndSetParam_080056f8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "puVar1": "ptrToData",
                "iVar2": "result"
            },
            "code": "void checkAndSetParam_080056f8(int *outputParam, undefined4 inputParam)\n{\n  undefined *ptrToData = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int result = calculateInput(inputParam);\n  if ((result == -1) && (*(int *)ptrToData != 0)) {\n    *outputParam = *(int *)ptrToData;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "checkAndSetParam_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_and_set_flag_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_header_offset",
                "param_3": "flag_ptr",
                "param_4": "result_ptr",
                "iVar1": "result",
                "uVar2": "flag",
                "auStack_4c": "flags_buffer",
                "local_48": "flags"
            },
            "code": "int check_permissions_and_set_flag_080054b4(undefined4 file_descriptor, int file_header_offset, undefined4 *flag_ptr, uint *result_ptr) {\n  int permissions = *(short *)(file_header_offset + 0xe);\n  uint flags = 0;\n  if (permissions < 0 || FUN_080056d4(file_descriptor, permissions, &flags) < 0) {\n    *result_ptr = 0;\n    if ((int)((uint)*(ushort *)(file_header_offset + 0xc) << 0x18) < 0) {\n      *flag_ptr = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *result_ptr = (flags & 0xf000) == 0x2000;\n  }\n  *flag_ptr = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flag_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_to_b"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint32_t *ptr_to_b = input[0xb];\n    \n    if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n        if ((ptr_to_b == (uint32_t *)0x4) || ((ptr_to_b == (uint32_t *)0x8 || (ptr_to_b == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08001718();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_080015b6();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_080015b6();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    uint32_t *ptr_to_9 = input[9];\n                    input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n                    (*input)[4] = (uint32_t)*(byte *)ptr_to_9;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint32_t *ptr_to_9 = input[9];\n            input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n            (*input)[4] = (uint32_t)*(byte *)ptr_to_9;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "check_params_and_call_function_08004560",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_08004544": "call_function_with_zero_params"
            },
            "code": "void check_params_and_call_function_08004560(int param1, int param2) {\n    if ((param1 == 1) && (param2 == 0xffff)) {\n        call_function_with_zero_params(PTR_DAT_08004588, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "check_params_and_call_function_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "decode_and_modify_08000a7a",
                "param_1": "data_address",
                "param_2": "output_address",
                "param_3": "param_1",
                "param_4": "param_2",
                "iVar1": "offset1_result",
                "iVar2": "offset2_result",
                "uVar3": "i",
                "uVar4": "bit_offset",
                "uVar5": "bit_index",
                "uVar6": "shifted_index",
                "uVar7": "byte_offset",
                "mask": "bit_mask",
                "bit_value": "is_bit_set",
                "output": "output_ptr"
            },
            "code": "int decode_and_modify_08000a7a(int data_address, int output_address, int param_1, int param_2)\n{\n  int offset1 = *(undefined *)(data_address + 0xb);\n  int offset2 = *(undefined *)(data_address + 0xc);\n  int iVar1 = FUN_08004640(offset1, offset2, param_1, param_2, param_2);\n  int offset3 = *(undefined *)(data_address + 0xd);\n  int offset4 = *(undefined *)(data_address + 0xe);\n  int iVar2 = FUN_08004640(offset3, offset4);\n  uint bit_offset = 0;\n  uint byte_offset = 7;\n  for (uint i = 0; (int)i < iVar2; i++) {\n    uint shifted_index = (i + iVar1) * 0x100000 >> 0x18;\n    uint bit_index = i + iVar1 & 0xf;\n    uint mask = (uint)*(byte *)(data_address + byte_offset + 9);\n    bool bit_value = (mask >> bit_offset & 1U) == 0;\n    uint* output = (uint*)(output_address + shifted_index * 2);\n    if (bit_value) {\n      *output = (1 << bit_index) | *output;\n    }\n    else {\n      *output = ~((ushort)(1 << bit_index)) & *output;\n    }\n    bit_offset = bit_offset + 1 & 0xff;\n    if (7 < bit_offset) {\n      byte_offset = byte_offset + 1 & 0xff;\n      bit_offset = 0;\n    }\n  }\n  *(undefined *)(data_address + 0x49) = 6;\n  FUN_0800076c(data_address);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_modify_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "encode_string_08004cb0",
                "param_1": "input",
                "param_2": "output_length",
                "param_3": "output_buffer",
                "param_4": "unknown",
                "param_5": "output_writer",
                "iVar1": "result",
                "uVar2": "padding",
                "uVar3": "written_length",
                "bVar4": "has_extra_padding",
                "max_length": "max_length",
                "has_padding": "has_padding",
                "remaining_length": "remaining_length"
            },
            "code": "undefined4 encode_string_08004cb0(undefined4 input, uint *output_length, uint *output_buffer, undefined4 unknown, code *output_writer)\\n\\\n    {\\n\\\n        int i;\\n\\\n        uint max_length = param_2[4];\\n\\\n        if ((int)param_2[4] < (int)param_2[2]) {\\n\\\n            max_length = param_2[2];\\n\\\n        }\\n\\\n        *param_3 = max_length;\\n\\\n        if (*(char *)((int)param_2 + 0x43) != \"\\0\") {\\n\\\n            *param_3 = max_length + 1;\\n\\\n        }\\n\\\n        if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n            *param_3 = *param_3 + 2;\\n\\\n        }\\n\\\n        uint padding = *param_2 & 6;\\n\\\n        if (padding == 0) {\\n\\\n            for (; (int)padding < (int)(param_2[3] - *param_3); padding++) {\\n\\\n                int result = (*output_writer)(input, unknown, (int)param_2 + 0x19, 1);\\n\\\n                if (result == -1) {\\n\\\n                    return 0xffffffff;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        uint has_padding = (uint)*(byte *)((int)param_2 + 0x43);\\n\\\n        if (has_padding != 0) {\\n\\\n            has_padding = 1;\\n\\\n        }\\n\\\n        if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n            *(undefined *)((int)param_2 + has_padding + 0x43) = 0x30;\\n\\\n            *(undefined *)((int)param_2 + has_padding + 0x44) = *(undefined *)((int)param_2 + 0x45);\\n\\\n            has_padding += 2;\\n\\\n        }\\n\\\n        int result = (*output_writer)(input, unknown, (int)param_2 + 0x43, has_padding);\\n\\\n        if (result != -1) {\\n\\\n            uint remaining_length = param_2[3];\\n\\\n            bool has_extra_padding = (*param_2 & 6) == 4;\\n\\\n            if (has_extra_padding) {\\n\\\n                remaining_length = remaining_length - *param_3;\\n\\\n            }\\n\\\n            if (has_extra_padding) {\\n\\\n                remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\\n\\\n            }\\n\\\n            else {\\n\\\n                remaining_length = 0;\\n\\\n            }\\n\\\n            if ((int)param_2[4] < (int)param_2[2]) {\\n\\\n                remaining_length = remaining_length + (param_2[2] - param_2[4]);\\n\\\n            }\\n\\\n            uint written_length = 0;\\n\\\n            while (true) {\\n\\\n                if (remaining_length == written_length) {\\n\\\n                    return 0;\\n\\\n                }\\n\\\n                result = (*output_writer)(input, unknown, (int)param_2 + 0x1a, 1);\\n\\\n                if (result == -1) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                written_length++;\\n\\\n            }\\n\\\n        }\\n\\\n        return 0xffffffff;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "encode_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_function_if_not_null_08003594",
                "PTR_DAT_080035a4": "function_pointer",
                "PTR_DAT_080035a8": "arg_pointer",
                "code": "function_pointer_type",
                "undefined4": "arg_type"
            },
            "code": "void execute_function_if_not_null_08003594(void)\n{\n  code** PTR_DAT_080035a4 = *(code**)(PTR_DAT_080035a4);\n  if (PTR_DAT_080035a4 != NULL)\n  {\n    code* function = *PTR_DAT_080035a4;\n    undefined4 arg = *(undefined4*)(PTR_DAT_080035a8);\n    function(arg);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clear_flags_on_struct_08002940",
                "param_1": "struct_ptr",
                "*(uint *)(*param_1 + 0xc)": "*flag_1_ptr",
                "*(uint *)(*param_1 + 0x14)": "*flag_2_ptr",
                "*(undefined *)((int)param_1 + 0x3a)": "*char_ptr"
            },
            "code": "void clear_flags_on_struct_08002940(int *struct_ptr) {\n  uint *flag_1_ptr = (uint *)(*struct_ptr + 0xc);\n  *flag_1_ptr &= 0xfffffedf;\n  uint *flag_2_ptr = (uint *)(*struct_ptr + 0x14);\n  *flag_2_ptr &= 0xfffffffe;\n  char *char_ptr = (char *)(struct_ptr + 0x3a);\n  *char_ptr = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_flags_on_struct_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "execute_task_08004204",
                "FUN_0800346c": "initialize_system"
            },
            "code": "void execute_task_08004204(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "execute_task_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "execute_program_08003476",
                "FUN_08000e18": "initialize_system",
                "FUN_08000f4e": "load_data",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void execute_program_08003476(void)\n{\n  initialize_system();\n  load_data();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08003474",
                "FUN_08000f4e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "execute_program_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_at_address_based_on_index_08004444",
                "param_1": "address",
                "param_2": "index",
                "PTR_DAT_0800445c": "data_pointer",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void set_value_at_address_based_on_index_08004444(int address, uint index)\n{\n    const uint MAX_INDEX = 0x60;\n    const uint WORD_SIZE = 2;\n    const uint OFFSET = 0x12e;\n    const uint MAX_VALUE = 0xffff;\n    undefined2 value;\n    if (index < MAX_INDEX) {\n        value = *(undefined2 *)(PTR_DAT_0800445c + index * WORD_SIZE);\n    }\n    else {\n        value = MAX_VALUE;\n    }\n    *(undefined2 *)(address + OFFSET) = value;\n    code *UNRECOVERED_JUMPTABLE;\n    (*UNRECOVERED_JUMPTABLE)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "run_initialization_0800346c",
                "FUN_08000e30": "initialize_system"
            },
            "code": "void run_initialization_0800346c(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "run_initialization_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "ptr",
                "bVar3": "is_ptr"
            },
            "code": "void initialize_data_080053a0(int data)\n{\n    if (*(int *)(data + 0x18) == 0)\n    {\n        *(int *)(data + 0x48) = 0;\n        *(int *)(data + 0x4c) = 0;\n        *(int *)(data + 0x50) = 0;\n        int ptr = *(int *)PTR_PTR_DAT_080053f8;\n        *(int *)(data + 0x28) = PTR_LAB_08005320_1_080053fc;\n        bool is_ptr = data == ptr;\n        if (is_ptr)\n        {\n            ptr = 1;\n        }\n        if (is_ptr)\n        {\n            *(int *)(data + 0x18) = ptr;\n        }\n        int uVar1 = FUN_08005400();\n        *(int *)(data + 4) = uVar1;\n        uVar1 = FUN_08005400(data);\n        *(int *)(data + 8) = uVar1;\n        uVar1 = FUN_08005400(data);\n        *(int *)(data + 0xc) = uVar1;\n        FUN_0800532c(*(int *)(data + 4), 4, 0);\n        FUN_0800532c(*(int *)(data + 8), 9, 1);\n        FUN_0800532c(*(int *)(data + 0xc), 0x12, 2);\n        *(int *)(data + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_08004a34",
                "FUN_08004a84",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = FUN_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "value << (bit_position & 0xff)"
            },
            "code": "void set_bit_080028d4(uint32_t *data, uint8_t bit_position, uint32_t value){\n    uint32_t mask = ~(4 << (bit_position & 0xff));\n    *data = (*data & mask) | (value << (bit_position & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_data_and_return_080040ec",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "num_iterations",
                "param_4": "result_ptr",
                "FUN_08003d18": "process_data",
                "PTR_": "data_ptr_",
                "DAT_": "data_"
            },
            "code": "void process_data_and_return_080040ec(void *DAT_ptr, int DAT_size, int num_iterations, int *result_ptr)\n{\n  process_data(DAT_ptr, DAT_size, num_iterations, result_ptr, result_ptr);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_data_and_return_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_params_and_update_08001460",
                "param_1": "param_list",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr1"
            },
            "code": "int check_params_and_update_08001460(uint **param_list, uint *param1, int param2, uint *param3)\n{\n    int result;\n    uint *ptr1;\n    if (*(char *)((int)param_list + 0x3d) == '(')\n    {\n        if (param1 == NULL)\n        {\n            result = 1;\n        }\n        else if (param2 == 0)\n        {\n            result = 1;\n        }\n        else if (*(char *)(param_list + 0xf) == '\\x01')\n        {\n            result = 2;\n        }\n        else\n        {\n            *(undefined *)(param_list + 0xf) = 1;\n            ptr1 = *param_list;\n            if ((*ptr1 & 1) == 0)\n            {\n                *ptr1 = *ptr1 | 1;\n            }\n            **param_list = **param_list & 0xfffff7ff;\n            *(undefined *)((int)param_list + 0x3d) = 0x29;\n            *(undefined *)((int)param_list + 0x3e) = 0x20;\n            result = 0;\n            param_list[0x10] = NULL;\n            param_list[9] = param1;\n            *(short *)((int)param_list + 0x2a) = (short)param2;\n            param_list[0xb] = param3;\n            *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n            *(undefined *)(param_list + 0xf) = 0;\n            (*param_list)[1] = (*param_list)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "check_params_and_update_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_data_08003880",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "data_len",
                "param_4": "param_4",
                "iVar1": "data_offset",
                "FUN_0800387c": "get_data_offset",
                "code": "code_ptr",
                "process_data_helper": "process_data_helper"
            },
            "code": "void process_data_08003880(int data_ptr, int flag, int data_len, undefined4 param_4)\n{\n  int data_offset;\n  data_offset = get_data_offset();\n  if (data_len == *(int *)(data_ptr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(data_offset + 0x88) = 0;\n      *(undefined *)(data_offset + 0x5e) = 0;\n      if (*(code **)(data_offset + 100) != (code *)0x0) {\n        (**(code **)(data_offset + 100))();\n      }\n      process_data_08003880_helper(data_ptr, data_offset + 0x68, *(undefined *)(data_offset + 0x88), 8);\n      return;\n    }\n    *(undefined *)(data_offset + 0x5e) = 1;\n    process_data_08003880_helper(data_ptr, data_offset + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_data_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "clear_bit_and_set_flag_08002f4c",
                "param_1": "input_ptr",
                "PTR_": "data_",
                "DAT_": "flag_",
                "uint": "uint32_t",
                "undefined": "char",
                "FUN_08003f48": "call_another_function"
            },
            "code": "int clear_bit_and_set_flag_08002f4c(int *input_ptr) {\n    uint32_t *PTR_ptr = (uint32_t *)(*input_ptr + 0xc);\n    uint32_t PTR_value = *PTR_ptr & 0xffffffbf;\n    *PTR_ptr = PTR_value;\n    char *DAT_ptr = (char *)(input_ptr + 0x39);\n    *DAT_ptr = 0x20;\n    call_another_function();\n    return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_bit_and_set_flag_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_values_080035bc",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flags_and_values_080035bc(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_080035f0;\n  *DAT_080035f0 |= 0x1;\n  flag_ptr[2] = 0;\n  *flag_ptr &= 0xfef6ffff;\n  flag_ptr[1] = DAT_080035f4;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "shifted_value",
                "FUN_080025e0": "get_initial_value",
                "PTR_DAT_08002608": "PTR_SHIFTED_INDICES",
                "DAT_08002604": "global_data"
            },
            "code": "uint calculate_shifted_value_080025ec(void)\n{\n  uint value = get_initial_value();\n  uint shifted_index = (*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08002608[shifted_index];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_data_08000c4c",
                "FUN_080005e4": "set_default_values",
                "FUN_08000600": "initialize_memory"
            },
            "code": "void initialize_data_08000c4c(void)\n{\n    set_default_values(0);\n    initialize_memory(PTR_DAT_08000c60, 0x4b00);\n    return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_data_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "index"
            },
            "code": "int process_data_08004a60(undefined4 param1, undefined4 param2, undefined* data, int length){\n                    int index = 0;\n                    undefined* current = data;\n                    while(index != length){\n                        if(current == (data + length)){\n                            return 0;\n                        }\n                        int result = process_byte(param1, *current, param2, length, index);\n                        index = result + 1;\n                        current++;\n                    }\n                    return index;\n                }",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "*param_1": "*output",
                "*param_2": "*input",
                "uVar1": "result",
                "uVar2": "flag",
                "iVar3": "data_ptr",
                "PTR_PTR_DAT_0800519c": "data_ptr_ptr",
                "PTR_DAT_080051a0": "input_type_a",
                "PTR_DAT_080051a4": "input_type_b",
                "PTR_DAT_080051a8": "input_type_c",
                "FUN_080053a0": "clear_data",
                "FUN_080048dc": "process_output"
            },
            "code": "uint process_data_080050d0(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flag;\n  int data_ptr;\n  data_ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    clear_data(data_ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_080051a0) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a4) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a8) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flag = *(ushort *)(input + 3);\n  result = (uint)flag;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto set_flag;\n    }\n    if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)input[0xd] != input + 0x11) {\n        process_output(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\nset_flag:\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    process_output(output, input);\n  }\n  flag = *(ushort *)(input + 3);\n  result = flag & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)((uint)flag << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flag = *(ushort *)(input + 3);\n    result = (int)(short)flag & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "new_block",
                "uVar2": "result",
                "puVar3": "free_block",
                "iVar4": "padding_size",
                "uVar5": "block_size",
                "puVar6": "prev_free_block",
                "puVar7": "free_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *error_code, uint size)\n{\n    uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n    if (aligned_size < 0xc) {\n        aligned_size = 0xc;\n    }\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\n        *error_code = 0xc;\n    }\n    else {\n        do_nothing_0800557c();\n        uint *free_block = *(uint **)PTR_DAT_08004a2c;\n        uint *prev_free_block = *(uint **)PTR_DAT_08004a2c;\n        while (free_block != (uint *)0x0) {\n            uint block_size = *free_block - aligned_size;\n            if (-1 < (int)block_size) {\n                if (block_size < 0xc) {\n                    if (prev_free_block == free_block) {\n                        aligned_size = prev_free_block[1];\n                    }\n                    else {\n                        aligned_size = free_block[1];\n                    }\n                    if (prev_free_block == free_block) {\n                        *(uint *)PTR_DAT_08004a2c = aligned_size;\n                        free_block = prev_free_block;\n                    }\n                    else {\n                        prev_free_block[1] = aligned_size;\n                    }\n                }\n                else {\n                    *free_block = block_size;\n                    *(uint *)((int)free_block + block_size) = aligned_size;\n                    free_block = (uint *)((int)free_block + block_size);\n                }\n                goto LAB_080049dc;\n            }\n            prev_free_block = free_block;\n            free_block = (uint *)free_block[1];\n        }\n        if (*(int *)PTR_DAT_08004a30 == 0) {\n            uint new_block = FUN_0800500c(error_code);\n            *(undefined4 *)PTR_DAT_08004a30 = new_block;\n        }\n        free_block = (uint *)FUN_0800500c(error_code, aligned_size);\n        if ((free_block != (uint *)0xffffffff) &&\n            ((prev_free_block = (uint *)((int)free_block + 3U & 0xfffffffc), free_block == prev_free_block ||\n             (iVar4 = FUN_0800500c(error_code,(int)prev_free_block - (int)free_block), iVar4 != -1)))) {\n            *prev_free_block = aligned_size;\n            LAB_080049dc:\n            do_nothing_0800557e(error_code);\n            aligned_size = (int)prev_free_block + 0xbU & 0xfffffff8;\n            int padding_size = aligned_size - (int)(prev_free_block + 1);\n            if (padding_size != 0) {\n                *(int *)((int)prev_free_block + padding_size) = -padding_size;\n                return aligned_size;\n            }\n            return aligned_size;\n        }\n        *error_code = 0xc;\n        do_nothing_0800557e(error_code);\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_and_modify_params_08002d0c",
                "param_1": "param_array",
                "param_2": "num_params",
                "param_3": "expected_value",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "result",
                "mask": "mask"
            },
            "code": "uint32_t check_and_modify_params_08002d0c(uint32_t **param_array, uint32_t num_params, bool expected_value, int param4, uint32_t param5)\n{\n  uint32_t mask;\n  uint32_t result;\n  \n  do {\n    mask = num_params & ~**param_array;\n    result = mask == 0;\n    if (result != expected_value) {\n      return 0;\n    }\n  } while ((param5 == UINT32_MAX) || ((param5 != 0) && (FUN_08000e30() - param4 <= param5)));\n  \n  (*param_array)[3] &= 0xfffffe5f;\n  (*param_array)[5] &= 0xfffffffe;\n  *((uint8_t *)param_array + 0x39) = 0x20;\n  *((uint8_t *)param_array + 0x3a) = 0x20;\n  *((uint32_t *)(param_array + 0xe)) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_and_modify_params_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "string_ptr",
                "puVar1": "current_char_ptr",
                "current_char": "current_char",
                "string_length": "string_length",
                "string_length_remaining": "string_length_remaining"
            },
            "code": "int process_string_08001904(uint **string_ptr) {\n  uint *current_char_ptr;\n  char current_char;\n  short string_length;\n  short string_length_remaining;\n\n  current_char = *(char *)((int)string_ptr + 0x3d);\n  if (current_char == '\"') {\n    string_length = *(ushort *)((int)string_ptr + 0x2a);\n    if (string_length < 4) {\n      if (string_length < 2) {\n        **string_ptr &= 0xfffffbff;\n        (*string_ptr)[1] &= 0xfffff8ff;\n        current_char_ptr = string_ptr[9];\n        string_ptr[9] = (uint *)((int)current_char_ptr + 1);\n        *(char *)current_char_ptr = (char)(*string_ptr)[4];\n        string_length_remaining = *(short *)((int)string_ptr + 0x2a) - 1;\n        *(undefined *)((int)string_ptr + 0x3d) = 0x20;\n        string_ptr[0xc] = (uint *)0x0;\n        current_char = *(char *)((int)string_ptr + 0x3e);\n        if (current_char == '@') {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      current_char_ptr = string_ptr[9];\n      string_ptr[9] = (uint *)((int)current_char_ptr + 1);\n      *(char *)current_char_ptr = (char)(*string_ptr)[4];\n      string_length_remaining = *(short *)((int)string_ptr + 0x2a) - 1;\n      if (string_length_remaining == 3) {\n        (*string_ptr)[1] &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_string_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "print_data_08000c64",
                "in_r3": "input_register",
                "PTR_DAT_08000c78": "data_array_1",
                "PTR_DAT_08000c74": "data_array_2"
            },
            "code": "void print_data_08000c64(void)\n{\n    undefined4 input_register;\n    int data_size = 0x10;\n    FUN_08000b54(PTR_DAT_08000c78, PTR_DAT_08000c74, data_size, input_register, input_register);\n    return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "print_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "control",
                "puVar3": "current_data",
                "uVar4": "flag",
                "uVar5": "flags"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n  uint *current_data = *data;\n  uint flags = *current_data;\n  uint control = current_data[3];\n  \n  if ((((flags & 0xf) == 0) && ((flags & 0x20) != 0)) && ((control & 0x20) != 0)) {\n    process_case1(data);\n    return;\n  }\n  \n  if (((flags & 0xf) == 0) || ((current_data[5] & 1) == 0 && ((control & 0x120) == 0)))) {\n    if (((flags & 0x80) != 0) && ((control & 0x80) != 0)) {\n      process_case2(data);\n      return;\n    }\n    if (((flags & 0x40) != 0) && ((control & 0x40) != 0)) {\n      process_case3(data);\n    }\n  }\n  else {\n    if (((flags & 1) != 0) && ((control & 0x100) != 0)) {\n      (*data)[15] = (uint *)((*data)[15] | 1);\n    }\n    if (((flags & 4) != 0) && ((current_data[5] & 1) != 0)) {\n      (*data)[15] = (uint *)((*data)[15] | 2);\n    }\n    if (((flags & 2) != 0) && ((current_data[5] & 1) != 0)) {\n      (*data)[15] = (uint *)((*data)[15] | 4);\n    }\n    if (((flags & 8) != 0) && ((current_data[5] & 1) != 0)) {\n      (*data)[15] = (uint *)((*data)[15] | 8);\n    }\n    if ((*data)[15] != (uint *)0x0) {\n      if (((flags & 0x20) != 0) && ((control & 0x20) != 0)) {\n        process_case1(data);\n      }\n      if (((*data)[15] & 8) == 0) && (((*data)[0] & 0x40) == 0)) {\n        do_nothing(data);\n        (*data)[15] = (uint *)0x0;\n        return;\n      }\n      process_case4(data);\n      current_data = *data;\n      if ((current_data[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      current_data[5] = current_data[5] & 0xffffffbf;\n      if ((*data)[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      (*data)[13][20] = (uint)&LAB_0800311c_1_08003118;\n      int result = process_data_08002ffc((*data)[13]);\n      if (result != 0) {\n        (*(code *)(*data)[13][20])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002940",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input_number",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_0800387c(int input_number)\n{\n  int result = input_number - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "get_result_0800351e",
                "param_1": "input",
                "uVar1": "result",
                "FUN_08003506": "calculate_result"
            },
            "code": "int get_result_0800351e(int input) {\n  int result;\n  if (input != 0) {\n    result = calculate_result();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "get_result_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "encode_string_08002f66",
                "param_1": "input_array",
                "pbVar1": "output_byte",
                "sVar2": "s",
                "puVar3": "output_char",
                "input_int": "input_value",
                "output_short": "output_short",
                "input_char": "input_char",
                "sVar1": "remaining_chars"
            },
            "code": "int encode_string_08002f66(int *input_array)\n{\n    char *input_char = (char *)((int)input_array + 0x3a);\n    ushort *output_short = (ushort *)input_array[10];\n    int input_int = *(int *)(*input_array + 4);\n    int sVar1 = *(short *)((int)input_array + 0x2e);\n\n    if (*input_char != '\"') {\n        return 2;\n    }\n\n    if (input_array[2] == 0x1000) {\n        if (input_array[4] == 0) {\n            *output_short = (ushort)((uint)(input_int << 0x17) >> 0x17);\n            input_array[10] += 2;\n        }\n        else {\n            *output_short = (ushort)input_int & 0xff;\n            input_array[10]++;\n        }\n    }\n    else if (input_array[4] == 0) {\n        *output_short = (char)input_int;\n        input_array[10]++;\n    }\n    else {\n        *output_short = (byte)input_int & 0x7f;\n        input_array[10]++;\n    }\n\n    sVar1--;\n    *(short *)((int)input_array + 0x2e) = sVar1;\n\n    if (sVar1 != 0) {\n        return 0;\n    }\n\n    *(uint *)(*input_array + 0xc) &= 0xfffffedf;\n    *(uint *)(*input_array + 0x14) &= 0xfffffffe;\n    *input_char = 0x20;\n    FUN_08003f24();\n\n    return 0;\n}\n",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "encode_string_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "process_data_080034b6",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_size",
                "param_4": "data_dest",
                "FUN_08001198": "copy_data"
            },
            "code": "void process_data_080034b6(undefined4 data_ptr, undefined2 data_type, int data_size, undefined4 data_dest)\n{\n  if (data_size == 0) {\n    copy_data(data_ptr, data_type, 0, data_dest, data_dest);\n    return;\n  }\n  copy_data(data_ptr, data_type, 1, data_dest, data_dest);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "process_data_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "process_data_08003eac",
                "param_1": "data_pointer",
                "param_2": "data_value",
                "bVar1": "data_index",
                "PTR_DAT_08003ef4": "data_array",
                "PTR_DAT_08003ef8": "data_pointer_array",
                "FUN_08000e60": "send_data",
                "FUN_08000ec4": "send_data",
                "PTR_DAT_08003efc": "func_value_array",
                "char_value": "char_value",
                "ushort_value": "ushort_value",
                "data_value": "data_value",
                "final_value": "final_value"
            },
            "code": "void process_data_08003eac(int data_pointer, uint32_t data_value) {\n  if (data_pointer != 0) {\n    uint8_t data_index = *(uint8_t *)(data_pointer + 0x44);\n    uint32_t *PTR_DAT_08003ef4 = (uint32_t *)PTR_DAT_08003ef4;\n    int *PTR_DAT_08003ef8 = (int *)PTR_DAT_08003ef8;\n    PTR_DAT_08003ef4[data_index] = data_value;\n    PTR_DAT_08003ef8[data_index] = data_pointer;\n    uint8_t char_value = *(uint8_t *)(data_pointer + 0x5c);\n    send_data(char_value, 0, 2);\n    send_data(char_value, 1, 0);\n    uint32_t func_value = *(uint32_t *)(PTR_DAT_08003efc + (uint)data_index * 4);\n    uint32_t *ushort_value = (uint32_t *)(data_pointer + 0x68);\n    uint32_t *data_value = (uint32_t *)(data_pointer + 0x6e);\n    uint32_t final_value = *ushort_value + *data_value;\n    process(func_value, final_value, 1);\n  }\n}\n",
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "process_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "get_data_08003e18",
                "param_1": "data_ptr",
                "param_2": "output",
                "param_3": "output_size",
                "param_4": "default_value",
                "iVar1": "result",
                "FUN_08003dd0": "get_data_helper"
            },
            "code": "int get_data_08003e18(int data_ptr, char *output, int output_size, int default_value) {\n  if (data_ptr == 0) {\n    return -1;\n  }\n  int result = get_data_08003e18_helper();\n  if (result == 0) {\n    *output = *(char *)(data_ptr + 0x45);\n    copy_data(*(int *)(PTR_DAT_08003e50 + (uint)*(char *)(data_ptr + 0x44) * 4), data_ptr + 0x45, 1, PTR_DAT_08003e50, default_value);\n    return 0;\n  }\n  return -1;\n}\n",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "get_data_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_pointer_to_22_080040fc",
                "PTR_DAT_08004108": "pointer_to_dat"
            },
            "code": "void set_pointer_to_22_080040fc() {\n    int *PTR_DAT_08004108 = (int *)PTR_DAT_08004108;\n    *PTR_DAT_08004108 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_pointer_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "uVar1": "data",
                "iVar2": "return_value"
            },
            "code": "int process_data_08002dd0(int *data_ptr, ushort *data_buffer, int buffer_size, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (buffer_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_ptr + 9) = (short)buffer_size;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          return_value = process_buffer(data_ptr, 0x80, 0, uVar1, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          return_value = process_buffer(data_ptr, 0x80, 0, uVar1, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      return_value = process_buffer(data_ptr, 0x40, 0, uVar1, param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_and_call_func_08004860",
                "param_1": "data",
                "param_2": "length",
                "param_3": "output1",
                "param_4": "output2",
                "uStack_8": "input3",
                "uStack_4": "input4",
                "PTR_PTR_DAT_08004880": "DATA_PTR_PTR_08004880",
                "FUNC_08004a84": "FUNC_08004a84"
            },
            "code": "void process_data_and_call_func_08004860(void* data, int length, int* output1, int* output2) {\n  int input1 = *(int*)PTR_PTR_DAT_08004880;\n  int input2 = *(int*)data;\n  int input3 = length;\n  int input4 = 0;\n  FUNC_08004a84(input1, input2, input3, output1, input4, output2);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "process_data_and_call_func_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "process_data_08004622",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "flag",
                "param_4": "code_ptr",
                "FUN_080045c8": "process_sub_data"
            },
            "code": "void process_data_08004622(undefined4 *data_ptr, uint data_length, uint flag, undefined4 code_ptr) {\n    if (flag != 0) {\n        process_sub_data(data_ptr, data_length, flag & 0xff);\n        return;\n    }\n    (**(code **)*data_ptr)(data_ptr, data_length & 0xff, 0, *(code **)*data_ptr, code_ptr);\n    return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "process_data_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "data",
                "local_4c": "local_array",
                "iVar1": "result",
                "uVar2": "flags",
                "FUN_080034f4": "get_first_value",
                "PTR_DAT_08003468": "PTR_DAT_08003468",
                "FUN_0800339c": "get_second_value",
                "FUN_0800354a": "get_third_value",
                "FUN_08002864": "process_array",
                "FUN_080028f0": "process_array_with_flags",
                "FUN_0800268e": "finalize_process"
            },
            "code": "void process_data_08003414(int data)\n{\n  int result;\n  uint flags;\n  int local_array[16];\n  \n  local_array[0] = get_first_value(data, PTR_DAT_08003468);\n  if ((local_array[0] != 0) &&\n     ((((result = get_second_value(data), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flags = get_third_value(data, PTR_DAT_08003468);\n    if ((flags & 0x100000) == 0) {\n      process_array(local_array,result);\n    }\n    else {\n      process_array_with_flags(local_array,result);\n    }\n    finalize_process(local_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "initialize_param_08005718",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "iVar2": "func_result"
            },
            "code": "void initialize_param_08005718(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *ptr = PTR_DAT_08005738;\n  *(undefined4 *)ptr = 0;\n  int func_result = execute_func(arg2, arg3, arg4, arg4, arg4);\n  if ((func_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": false,
            "current_name": "initialize_param_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "get_flag_value_080011c0",
                "param_1": "flag_data",
                "*(char *)((int)param_1 + 0x3e)": "flag_data[0x3e]",
                "param_1[0x14]": "flag_data[0x14]",
                "*(uint *)(*param_1 + 0x10)": "flag_value",
                "param_1[0x11]": "flag_data[0x11]",
                "*(char *)((int)param_1 + 0x3d)": "flag_data[0x3d]"
            },
            "code": "uint8_t get_flag_value_080011c0(int *flag_data)\n{\n    uint8_t flag_value;\n    if (flag_data[0x3e] == '@') {\n        if (flag_data[0x14] == 0) {\n            flag_value = flag_data[0x11] & 0xfe;\n        }\n        else {\n            flag_value = flag_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (flag_data[4] == 0x4000) {\n        if (flag_data[0x3d] == '!') {\n            flag_value = flag_data[0x11] & 0xfe;\n        }\n        else {\n            flag_value = flag_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (flag_data[0x14] == 0) {\n        flag_value = (flag_data[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (flag_data[0x14] == 1) {\n        flag_value = (flag_data[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "get_flag_value_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "calculate_result_08000b54",
                "param_1": "param_array",
                "param_2": "input_array",
                "param_3": "input_value",
                "bVar1": "result_byte",
                "iVar2": "result_int",
                "unaff_r5": "array_index",
                "iVar3": "function_result"
            },
            "code": "int calculate_result_08000b54(int **param_array, int *input_array, int input_value) {\n  byte result_byte;\n  int result_int;\n  uint array_index;\n  int function_result;\n  \n  param_array[19] = input_array;\n  *(char *)(param_array + 24) = (char)input_value;\n  if (*(byte *)((int)param_array + 5) < 4) {\n    result_byte = (**(code **)(**param_array + 8))();\n    array_index = (uint)result_byte;\n  }\n  if (array_index == 0) {\n    function_result = 0;\n  }\n  else if ((int)array_index < 8) {\n    function_result = 0;\n  }\n  else {\n    function_result = FUN_080006b4(param_array);\n    *(char *)(param_array + 2) = (char)function_result;\n    if (*(char *)((int)param_array + 9) == *(char *)(param_array + 1)) {\n      result_int = FUN_080007f0(param_array);\n      if (result_int < 1) {\n        result_int = FUN_08004204();\n        param_array[23] = (int *)((uint)*(ushort *)((int)param_array + 86) + result_int);\n        *(undefined *)(param_array + 2) = 0;\n        switch(*(undefined *)((int)param_array + 10)) {\n        case 1:\n        case 2:\n          function_result = FUN_080008e2(param_array, input_array, input_value);\n          break;\n        case 3:\n        case 4:\n          function_result = FUN_08000998(param_array, input_array, input_value);\n          break;\n        case 5:\n          function_result = FUN_08000a00(param_array, input_array, input_value);\n          break;\n        case 6:\n          function_result = FUN_08000a4e(param_array, input_array, input_value);\n          break;\n        case 15:\n          function_result = FUN_08000a7a(param_array, input_array, input_value);\n          break;\n        case 16:\n          function_result = FUN_08000b04(param_array, input_array, input_value);\n        }\n      }\n      else {\n        if (result_int != 0xff) {\n          FUN_080008cc(param_array, result_int);\n          FUN_0800076c(param_array);\n        }\n        *(char *)(param_array + 2) = (char)result_int;\n        function_result = (int)(char)result_int;\n      }\n    }\n    else {\n      function_result = 0;\n    }\n  }\n  return function_result;\n}",
            "called": [
                "FUN_08000a00",
                "FUN_080006b4",
                "FUN_080008cc",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "calculate_result_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_function_if_not_null_0800376e",
                "iVar1": "function_address",
                "FUN_08003750": "get_function_address"
            },
            "code": "void execute_function_if_not_null_0800376e(void)\n{\n    int function_address = get_function_address();\n    if (*(code **)(function_address + 0x44) != (code *)0x0) {\n        (**(code **)(function_address + 0x44))();\n    }\n    return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_value_08000d98",
                "param_1": "value_to_set",
                "iVar1": "result",
                "PTR_DAT_08000ddc": "dividend_ptr",
                "PTR_DAT_08000dd8": "divisor_ptr",
                "divisor": "divisor_value"
            },
            "code": "int check_and_set_value_08000d98(uint value_to_set) {\n    uint divisor = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n    int result = FUN_08000ee0(divisor);\n    if (result != 0) {\n        return 1;\n    }\n    if (value_to_set > 0xf) {\n        return 1;\n    }\n    FUN_08000e60(0xffffffff, value_to_set, 0);\n    *(uint *)PTR_DAT_08000de0 = value_to_set;\n    return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "random_number",
                "iVar2": "data_status",
                "iVar3": "data_pointer",
                "PTR_DAT_08003f88": "data_pointer_array",
                "PTR_DAT_08003f8c": "data_processing_functions",
                "PTR_DAT_08003f90": "data_address_array"
            },
            "code": "void process_data_08003f48()\n{\n  uint32_t random_number = generate_random_number();\n  int32_t data_pointer = *(int32_t *)(PTR_DAT_08003f88 + random_number * 4);\n  if ((random_number < 10) && (data_pointer != -1)) {\n    int32_t data_address = *(int32_t *)(PTR_DAT_08003f90 + (uint32_t)*(uint8_t *)(data_pointer + 0x44) * 4);\n    int32_t data_length = *(int32_t *)(data_pointer + 0x68) + (uint32_t)*(uint16_t *)(data_pointer + 0x6e);\n    process_data_08003f48_block(data_address, data_length);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "process_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "execute_function_0800340c",
                "FUN_080035fc": "call_another_function"
            },
            "code": "void execute_function_0800340c(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "execute_function_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_short_value_0800352e",
                "param_1": "target_value",
                "param_2": "short_array",
                "*param_2": "*short_array"
            },
            "code": "unsigned int find_short_value_0800352e(int target_value, short *short_array)\n{\n    while (true) {\n        if (*short_array == -1) {\n            return 0xffffffff;\n        }\n        if (*short_array == target_value) {\n            break;\n        }\n        short_array += 6;\n    }\n    return *(unsigned int *)(short_array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "imported": false,
            "current_name": "find_short_value_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input",
                "iVar1": "result",
                "puVar2": "output_ptr",
                "puVar3": "input_ptr",
                "do_nothing_08001aac": "do_nothing",
                "FUN_08003900": "process_data",
                "FUN_08000f8c": "check_input",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB_08001f3c_1_08001bf4",
                "DAT_08001bf8": "DAT_08001bf8"
            },
            "code": "void process_input_08001ab0(uint **input){\n  int input_length = *(byte *)((int)input + 0x3d) - 0x29;\n  if (input_length < 2) {\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input &= 0xfffff7ff;\n  uint *input_ptr = *input;\n  if ((input_ptr[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = NULL;\n      if ((input_ptr[5] & 0x40) != 0) {\n        uint *output_ptr = input[9];\n        input[9] = (uint *)((int)output_ptr + 1);\n        *(char *)output_ptr = (char)input_ptr[4];\n      }\n      **input &= 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((input_ptr[5] & 0x40) != 0) {\n        uint *output_ptr = input[9];\n        input[9] = (uint *)((int)output_ptr + 1);\n        *(char *)output_ptr = (char)input_ptr[4];\n      }\n      process_data(input);\n    }\n  }\n  else {\n    input_ptr[1] &= 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n      input[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int result = FUN_08000f8c(input[0xe]);\n      if (result != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          uint *output_ptr = input[9];\n          input[9] = (uint *)((int)output_ptr + 1);\n          *(char *)output_ptr = (char)(*input)[4];\n        }\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0x14])();\n      }\n    }\n    else {\n      input[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int result = FUN_08000f8c(input[0xd]);\n      if (result != 0) {\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = PTR_LAB_08001bf8;\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    process_output(input);\n  }\n  return;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "set_flag_and_check_status_08001f9c",
                "iVar1": "start_time",
                "iVar2": "interval_end_time",
                "status_data": "DAT_0800200c",
                "status_data_flag": "DAT_08002018",
                "status_ptr": "PTR_0800200c",
                "sub_status_ptr": "PTR_08002014"
            },
            "code": "int set_flag_and_check_status_08001f9c(){\n                    int start_time = get_current_time();\n                    uint* status_ptr = (uint*)(status_data + 0x40);\n                    *status_ptr |= 0x10000000;\n                    *status_data = 1;\n                    int interval_start_time = get_current_time();\n                    do {\n                        uint* sub_status_ptr = (uint*)(status_data + 0x14 + 0x4);\n                        if((*sub_status_ptr & 0x10000) != 0) {\n                            *status_data_flag = 1;\n                            return 0;\n                        }\n                        int interval_end_time = get_current_time();\n                    } while((interval_end_time - interval_start_time) < 0x3e9);\n                    return 3;\n                }",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_status_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "call_function_08000d8e",
                "FUN_080034ce": "execute_subroutine"
            },
            "code": "void call_function_08000d8e(void)\n{\n  execute_subroutine();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "call_function_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "execute_function_08004638",
                "FUN_08004622": "call_another_function"
            },
            "code": "void execute_function_08004638(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_to_buffer_080008cc",
                "param_1": "buffer_address",
                "param_2": "data",
                "undefined": "byte",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void copy_data_to_buffer_080008cc(int buffer_address, byte data){\n    *(undefined *)(buffer_address + 9) = *(undefined *)(buffer_address + 4);\n    *(byte *)(buffer_address + 10) = *(byte *)(buffer_address + 10) ^ 0x80;\n    *(undefined *)(buffer_address + 0xb) = data;\n    *(undefined *)(buffer_address + 0x49) = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60",
                "FUN_080050d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "update_value_at_offset_08005608",
                "param_1": "base_address",
                "param_2": "offset",
                "iVar1": "value_at_offset",
                "uVar2": "new_value",
                "bVar3": "is_value_valid"
            },
            "code": "void update_value_at_offset_08005608(int base_address, int offset) {\n  int value_at_offset = get_value_at_offset(base_address, *(short *)(offset + 0xe));\n  bool is_value_valid = value_at_offset >= 0;\n  uint new_value;\n  if (is_value_valid) {\n    new_value = *(int *)(offset + 0x54) + value_at_offset;\n  }\n  else {\n    new_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_value_valid) {\n    *(uint *)(offset + 0x54) = new_value;\n  }\n  if (!is_value_valid) {\n    *(short *)(offset + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "update_value_at_offset_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[30]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0x14)": "*input_array[3]",
                "*(uint *)(*param_1 + 0xc)": "*input_array[3]"
            },
            "code": "int validate_input_08002efa(int *input_array, int array_length, int param_3)\n{\n    int return_value = 0;\n    if (input_array[10] != ' ')\n    {\n        return_value = 2;\n    }\n    else if (array_length == 0 || param_3 == 0)\n    {\n        return_value = 1;\n    }\n    else if (input_array[14] != 1)\n    {\n        input_array[10] = array_length;\n        input_array[11] = param_3;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[30] = param_3;\n        input_array[58] = 34;\n        input_array[14] |= 1u;\n        *input_array[3] |= 0x120u;\n        return_value = 0;\n    }\n    else\n    {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_for_null_pointers_0800377c",
                "PTR_DAT_08003794": "data_pointer",
                "pointer1": "data_pointer",
                "pointer2": "data_pointer + 0x24",
                "FUN_080026ce": "call_error_function"
            },
            "code": "void check_for_null_pointers_0800377c(void)\n{\n  if (*pointer1 != NULL) {\n    call_error_function();\n  }\n  if (*pointer2 != NULL) {\n    call_error_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_for_null_pointers_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "check_and_reset_flag_0800268e",
                "param_1": "input_array",
                "puVar1": "input_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "flag_ptr",
                "*(undefined *)(param_1 + 0xe)": "*(input_array + 0xe)"
            },
            "code": "void check_and_reset_flag_0800268e(uint **input_array)\n{\n  uint *input_ptr;\n  char *flag_ptr = (char *)input_array + 0x39;\n  *flag_ptr = 2;\n  input_ptr = *input_array;\n  if ((input_ptr[8] & 0x1111) == 0) {\n    if ((input_ptr[8] & 0x444) == 0) {\n      *input_ptr = *input_ptr & 0xfffffffe;\n    }\n  }\n  reset_array(input_array);\n  *flag_ptr = 0;\n  *(input_array + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "check_and_reset_flag_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "decode_data_080008e2",
                "param_1": "data_ptr",
                "param_2": "key_ptr",
                "param_3": "unk_param_1",
                "param_4": "unk_param_2",
                "iVar1": "offset",
                "uVar2": "data_len",
                "uVar3": "i",
                "uVar4": "bit_index",
                "cVar5": "bit_mask",
                "iVar6": "bit_mask_ptr"
            },
            "code": "int decode_data_080008e2(int data_ptr, int key_ptr, int unk_param_1, int unk_param_2) {\n  int offset = get_offset(*(undefined *)(data_ptr + 0xb), *(undefined *)(data_ptr + 0xc), unk_param_1, unk_param_2, unk_param_2);\n  uint data_len = get_offset(*(undefined *)(data_ptr + 0xd), *(undefined *)(data_ptr + 0xe));\n  char bit_mask = (char)((data_len << 0x15) >> 0x18);\n  if ((data_len & 7) != 0) {\n    bit_mask++;\n  }\n  *(char *)(data_ptr + 0xb) = bit_mask;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  uint bit_index = 0;\n  for (uint i = 0; i < data_len; i++) {\n    if (((int)(uint)*(ushort *)(key_ptr + ((i + offset) * 0x100000 >> 0x18) * 2) >> (i + offset & 0xf) & 1U) == 0) {\n      int bit_mask_ptr = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(bit_mask_ptr + 9) &= ~(byte)(1 << bit_index);\n    }\n    else {\n      int bit_mask_ptr = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(bit_mask_ptr + 9) |= (byte)(1 << bit_index);\n    }\n    bit_index++;\n    if (bit_index > 7) {\n      *(char *)(data_ptr + 0x49)++;\n      bit_index = 0;\n    }\n  }\n  if ((data_len & 7) != 0) {\n    *(char *)(data_ptr + 0x49)++;\n  }\n  char ret_val = *(char *)(data_ptr + 0x49);\n  finalize_decode(data_ptr);\n  return (int)(char)(ret_val + 2);\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "output",
                "param_2": "input",
                "param_3": "base",
                "local_15": "buffer",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "buffer_ptr",
                "cVar1": "digit"
            },
            "code": "uint32_t convert_base_080045c8(int *output, uint32_t input, uint32_t base) {\n  char digit;\n  uint32_t quotient;\n  uint32_t remainder;\n  char buffer[9];\n  buffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  char* buffer_ptr = buffer + 1;\n  do {\n    quotient = input / base;\n    remainder = (input & 0xff) - ((int16_t)quotient * (int16_t)base & 0xffU) & 0xff;\n    buffer_ptr--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *buffer_ptr = digit;\n    input = quotient;\n  } while (quotient != 0);\n  uint32_t result;\n  if (buffer_ptr == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint32_t buffer_size = strlen(buffer_ptr);\n    result = FUN_08000218(buffer_ptr);\n    result = (**(code **)(*output + 4))(output, buffer_ptr, buffer_size);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "check_param_08003d18",
                "param_1": "param1",
                "param_2": "param2",
                "iVar2": "start_time",
                "sVar1": "data",
                "iVar3": "result",
                "uVar4": "index",
                "PTR_DAT_08003dc0": "PTR_DATA1",
                "PTR_DAT_08003dc4": "PTR_DATA2",
                "PTR_DAT_08003dc8": "PTR_DATA3",
                "PTR_DAT_08003dcc": "PTR_DATA4",
                "FUN_08000e30": "get_current_time",
                "FUN_080034f4": "check_data",
                "FUN_08003cc8": "log_error",
                "FUN_08002dd0": "process_data"
            },
            "code": "uint check_param_08003d18(uint param1, uint param2)\n{\n  int start_time = get_current_time();\n  short data = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int result = FUN_080034f4((int)data,PTR_DAT_08003dc4);\n  if (result == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 && ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 || (result = FUN_080034f4((int)data,PTR_DAT_08003dc4),**(int **)(PTR_DAT_08003dc8 + index * 4)) != result)))) {\n    index = (index + 1) & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (FUN_08003cc8(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    result = FUN_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4),param1,param2 & 0xffff,1000);\n    if (result == 0) {\n      return param2;\n    }\n    int end_time = get_current_time();\n  } while ((uint)(end_time - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "check_param_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_bytes_08004640",
                "param_1": "byte1",
                "param_2": "byte2"
            },
            "code": "uint combine_bytes_08004640(int byte1, uint byte2)\n{\n  return byte2 | byte1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a00",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_bytes_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "FUN_08000de4": "initialize_network",
                "FUN_08000c8c": "initialize_database"
            },
            "code": "void initialize_system_080034ce(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "initialize_system_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "copy_second_param_to_first_param_080047fe",
                "param_1": "destination",
                "param_2": "source",
                "FUN_08004844": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_second_param_to_first_param_080047fe(void* destination, void* source)\n{\n  memcpy(destination, source, sizeof(destination));\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "copy_second_param_to_first_param_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "set_flags_08001256",
                "param_1": "params",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t set_flags_08001256(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\"') && ((params[20] != (uint32_t *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint32_t *)0x0) && (params[4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      params[20] = (uint32_t *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (params[12] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_pointer_start",
                "puVar2": "function_pointer_end",
                "puVar3": "current_function_pointer",
                "iVar4": "function_pointer_count",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n    undefined *function_pointer_start;\n    undefined *function_pointer_end;\n    undefined *current_function_pointer;\n    int function_pointer_count;\n    int i;\n\n    function_pointer_start = PTR_DAT_080048bc;\n    function_pointer_count = (int)PTR_DAT_080048c0 - (int)PTR_DAT_080048bc;\n\n    for (i = 0; i < function_pointer_count >> 2; i++) {\n        current_function_pointer = *(undefined **)(function_pointer_start + i * 4);\n        (**(code **)current_function_pointer)();\n    }\n\n    do_nothing_080059f8();\n\n    function_pointer_end = PTR_DAT_080048c8;\n\n    for (i = 0; i < (int)function_pointer_end - (int)function_pointer_start >> 2; i++) {\n        current_function_pointer = *(undefined **)(function_pointer_start + i * 4);\n        (**(code **)current_function_pointer)();\n    }\n\n    return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_and_execute_08004648",
                "FUN_08000e3c": "initialize_data_structures",
                "FUN_08000d8e": "execute_algorithm"
            },
            "code": "void initialize_and_execute_08004648(void)\n{\n  initialize_data_structures(3);\n  execute_algorithm();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "process_input_08000600",
                "param_1": "input_data",
                "param_2": "input_length",
                "cVar1": "input_type",
                "iVar2": "return_value",
                "*param_1": "data_ptr"
            },
            "code": "void process_input_08000600(int **input_data, int input_length){\n    char input_type;\n    int *data_ptr;\n    input_type = *(char *)((int)input_data + 5);\n    if (input_type == '\\x02') {\n        data_ptr = (int *)PTR_DAT_08000668;\n    }\n    else if (input_type == '\\x03') {\n        data_ptr = (int *)PTR_DAT_08000668;\n    }\n    else if (input_type == '\\x01') {\n        data_ptr = (int *)PTR_DAT_08000668;\n    }\n    else {\n        data_ptr = (int *)PTR_DAT_08000668;\n    }\n    process_data(data_ptr, input_length, 6);\n    if (1 < *(byte *)((int)input_data + 6)) {\n        process_data(*(byte *)((int)input_data + 6), 1);\n        process_data(*(undefined *)((int)input_data + 6), 0);\n    }\n    do {\n        int return_value = (**(code **)(**input_data + 0xc))();\n    } while (-1 < return_value);\n    *(undefined *)((int)input_data + 0x49) = 0;\n    *(undefined *)((int)input_data + 0x4a) = 0;\n    *(undefined2 *)(input_data + 0x15) = 0;\n    *(undefined2 *)((int)input_data + 0x52) = 0;\n    *(undefined2 *)(input_data + 0x14) = 0;\n    return;\n}",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "process_input_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void* function_pointer){\n\t(*(void(*)())function_pointer)();\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint calculate_crc16_08000728(uint data_start, uint data_length)\n{\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_length; i++)\n  {\n    crc ^= *(byte *)(data_start + i + 9);\n    for (byte j = 1; j < 9; j++)\n    {\n      uint lsb = crc & 1;\n      crc >>= 1;\n      if (lsb != 0)\n      {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_result_0800354a",
                "param_1": "input_parameter",
                "uVar1": "result",
                "FUN_0800352e": "calculate_result"
            },
            "code": "int get_result_0800354a(int input_parameter)\n{\n  int result;\n  if (input_parameter == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_0800339c"
            ],
            "imported": false,
            "current_name": "get_result_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_param_value_0800124a",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*ptr",
                "param_1[0x11]": "param_array[0x11]",
                "0xff": "0xff",
                "undefined4": "int"
            },
            "code": "int set_param_value_0800124a(int *param_array)\n{\n    uint8_t value = param_array[0x11] & 0xff;\n    uint32_t* ptr = (uint32_t*)(param_array + 0x10);\n    *ptr = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_param_value_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "find_offset_08004094",
                "param_1": "base_offset",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer",
                "PTR_DAT_080040c4": "global_variable_1",
                "PTR_DAT_080040c8": "global_variable_2",
                "PTR_DAT_080040cc": "global_variable_3"
            },
            "code": "int find_offset_08004094(int base_offset)\n{\n  int current_offset;\n  undefined *stack_pointer;\n  \n  if (*PTR_DAT_080040c4 == 0) {\n    *PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  current_offset = *PTR_DAT_080040c4;\n  stack_pointer = (undefined *)(base_offset + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *PTR_DAT_080040c4 = stack_pointer;\n    return current_offset;\n  }\n  *PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "find_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_uint_at_offset_080033c8",
                "DAT_080033d4": "data",
                "PTR_080033d4": "data_pointer",
                "uint": "unsigned_int",
                "*": "pointer_to",
                "bit_mask": "mask"
            },
            "code": "void clear_bit_in_uint_at_offset_080033c8(void)\n{\n    uint* DAT_080033d4 = (uint*)(DAT_080033d4 + 0x40);\n    uint bit_mask = 0xdfffffff;\n    *DAT_080033d4 = *DAT_080033d4 & bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_at_offset_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "DAT_08003350": "flag_base_address",
                "DAT_08003354": "flag_return_value_0",
                "DAT_08003358": "flag_return_value_1",
                "DAT_0800335c": "flag_return_value_2",
                "DAT_08003360": "flag_return_value_3",
                "DAT_08003364": "flag_return_value_4",
                "DAT_08003368": "flag_return_value_5",
                "DAT_0800336c": "flag_return_value_6",
                "DAT_08003370": "flag_return_value_7",
                "DAT_08003374": "flag_return_value_8",
                "DAT_08003378": "flag_return_value_9",
                "DAT_0800337c": "flag_return_value_10"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag)\n{\n    uint32_t* flag_ptr = (uint32_t*)(DAT_08003350 + 0x30);\n    switch(flag) {\n        case 0:\n            *flag_ptr |= 0x01;\n            return DAT_08003354;\n        case 1:\n            *flag_ptr |= 0x02;\n            return DAT_08003358;\n        case 2:\n            *flag_ptr |= 0x04;\n            return DAT_0800335c;\n        case 3:\n            *flag_ptr |= 0x08;\n            return DAT_08003360;\n        case 4:\n            *flag_ptr |= 0x10;\n            return DAT_08003364;\n        case 5:\n            *flag_ptr |= 0x20;\n            return DAT_08003368;\n        case 6:\n            *flag_ptr |= 0x40;\n            return DAT_0800336c;\n        case 7:\n            *flag_ptr |= 0x80;\n            return DAT_08003370;\n        case 8:\n            *flag_ptr |= 0x100;\n            return DAT_08003374;\n        case 9:\n            *flag_ptr |= 0x200;\n            return DAT_08003378;\n        case 10:\n            *flag_ptr |= 0x400;\n            return DAT_0800337c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08000682": "call_func"
            },
            "code": "void check_param_08000690(int param1, int param2, undefined4 param3, undefined4 param4) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        call_func(PTR_DAT_080006b0, 1, 0, 0, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "processInput_080054fc",
                "param_1": "inputLength",
                "param_2": "inputArray",
                "uVar1": "flag",
                "iVar2": "count",
                "local_18": "outputLength",
                "local_14": "outputArray",
                "PTR_LAB_08005320_1_08005578": "label"
            },
            "code": "void processInput_080054fc(int inputLength, int *inputArray)\n{\n  ushort flag;\n  int count;\n  int outputLength;\n  int *outputArray;\n\n  if (-1 < (int)((uint)*(ushort *)(inputArray + 3) << 0x1e)) {\n    outputLength = inputLength;\n    outputArray = inputArray;\n    flag = getFlag(inputLength,inputArray,&outputLength,&outputArray);\n    count = getCount(inputLength,outputLength);\n    if (count != 0) {\n      *(undefined **)(inputLength + 0x28) = PTR_LAB_08005320_1_08005578;\n      *inputArray = count;\n      *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 0x80;\n      inputArray[5] = outputLength;\n      inputArray[4] = count;\n      if ((outputArray != (int *)0x0) &&\n         (count = findIndex(inputLength,(int)*(short *)((int)inputArray + 0xe)), count != 0)) {\n        *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(inputArray + 3) = flag | *(ushort *)(inputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(inputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfffc | 2;\n  }\n  *inputArray = (int)inputArray + 0x47;\n  inputArray[4] = (int)inputArray + 0x47;\n  inputArray[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_08004978",
                "FUN_080054b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "processInput_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_byte_08001420",
                "param_1": "array_ptr",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "*pbVar1": "*byte_ptr",
                "*uint_ptr": "*uint_ptr"
            },
            "code": "int increment_byte_08001420(int *array_ptr)\n{\n    short *short_ptr = (short *)((int)array_ptr + 0x2a);\n    if (*short_ptr != 0)\n    {\n        byte *byte_ptr = (byte *)array_ptr[9];\n        array_ptr[9] = (int)(byte_ptr + 1);\n        uint *uint_ptr = (uint *)(*array_ptr + 0x10);\n        *uint_ptr = (uint)*byte_ptr;\n        *short_ptr = *short_ptr - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "enable_flags_08000de4",
                "DAT_08000e14": "flags_ptr",
                "FUN_08000e3c": "call_function_1",
                "FUN_08000d98": "call_function_2",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int enable_flags_08000de4(void)\n{\n  uint *DAT_08000e14;\n  DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  call_function_1(3);\n  call_function_2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000d98",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "enable_flags_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "check_and_perform_action_080026ce",
                "param_1": "data",
                "iVar1": "current_data",
                "flag1": "flag1",
                "flag2": "flag2",
                "*(uint *)(iVar1 + 0x10)": "flag1",
                "*(uint *)(iVar1 + 0xc)": "flag2",
                "*(undefined4 *)(iVar1 + 0x10)": "current_data",
                "*(undefined *)(param_1 + 6)": "data[6]",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(data + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(data + 0x1c)"
            },
            "code": "void check_and_perform_action_080026ce(int *data)\n{\n    int current_data = *data;\n    int flag1 = *(uint *)(current_data + 0x10);\n    int flag2 = *(uint *)(current_data + 0xc);\n\n    if ((flag1 & 2) && (flag2 & 2)) {\n        *(undefined4 *)(current_data + 0x10) = 0xfffffffd;\n        *(undefined *)(data + 6) = 1;\n        if ((*(uint *)(*data + 0x18) & 3) == 0) {\n            perform_action_1(data);\n            do_nothing(data);\n        }\n        else {\n            do_nothing_2(data);\n        }\n        *(undefined *)(data + 6) = 0;\n    }\n    if ((flag1 & 4) && (flag2 & 4)) {\n        *(undefined4 *)(current_data + 0x10) = 0xfffffffb;\n        *(undefined *)(data + 6) = 2;\n        if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n            perform_action_1(data);\n            do_nothing(data);\n        }\n        else {\n            do_nothing_2(data);\n        }\n        *(undefined *)(data + 6) = 0;\n    }\n    if ((flag1 & 8) && (flag2 & 8)) {\n        *(undefined4 *)(current_data + 0x10) = 0xfffffff7;\n        *(undefined *)(data + 6) = 4;\n        if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n            perform_action_1(data);\n            do_nothing(data);\n        }\n        else {\n            do_nothing_2(data);\n        }\n        *(undefined *)(data + 6) = 0;\n    }\n    if ((flag1 & 0x10) && (flag2 & 0x10)) {\n        *(undefined4 *)(current_data + 0x10) = 0xffffffef;\n        *(undefined *)(data + 6) = 8;\n        if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n            perform_action_1(data);\n            do_nothing(data);\n        }\n        else {\n            do_nothing_2(data);\n        }\n        *(undefined *)(data + 6) = 0;\n    }\n    if ((flag1 & 1) && (flag2 & 1)) {\n        *(undefined4 *)(current_data + 0x10) = 0xfffffffe;\n        perform_action_3(data);\n    }\n    if ((flag1 & 0x80) && (flag2 & 0x80)) {\n        *(undefined4 *)(current_data + 0x10) = 0xffffff7f;\n        do_nothing_4(data);\n    }\n    if ((flag1 & 0x40) && (flag2 & 0x40)) {\n        *(undefined4 *)(current_data + 0x10) = 0xffffffbf;\n        do_nothing_5(data);\n    }\n    if ((flag1 & 0x20) && (flag2 & 0x20)) {\n        *(undefined4 *)(current_data + 0x10) = 0xffffffdf;\n        do_nothing_6(data);\n    }\n}\n",
            "called": [
                "FUN_080026c8",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_0800293e",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "check_and_perform_action_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "str",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000218(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "check_conditions_0800339c",
                "param_1": "value1",
                "param_2": "ptr_data",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "shift_amount"
            },
            "code": "uint8_t check_conditions_0800339c(uint32_t value1, uint8_t *ptr_data, uint32_t value2, uint32_t value3, uint32_t value4) {\n    int32_t result = FUN_0800354a(value1, ptr_data, value3, value4, value4);\n    uint8_t shift_amount = (uint8_t) ((result << 12) >> 27);\n    if (shift_amount == 3) {\n        return 8;\n    }\n    if (shift_amount == 4) {\n        return 0xc;\n    }\n    if (shift_amount == 2) {\n        return 4;\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "check_conditions_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "encode_bits_08000e60",
                "param_1": "bit_offset",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift_amount",
                "uVar2": "bit_count",
                "DAT_08000ebc": "data_ptr",
                "DAT_08000ec0": "output_ptr",
                "char": "byte"
            },
            "code": "void encode_bits_08000e60(uint bit_offset, uint mask, uint data) {\n  uint shift_amount = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint bit_count = 7 - shift_amount;\n  if (bit_count > 3) {\n    bit_count = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount -= 3;\n  }\n  uint shifted_data = (mask & (1 << (bit_count & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)bit_offset < 0) {\n    *(char *)(DAT_08000ec0 + (bit_offset & 0xf)) = (char)(shifted_data << 4);\n  }\n  else {\n    *(char *)(bit_offset + 0xe000e400) = (char)(shifted_data << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003eac",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "encode_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "code": "int process_data_0800165a(int *data_ptr, int param_2, int param_3, int param_4) {\n  int flag = *(int *)(*data_ptr + 0x18);\n  int value;\n  if ((flag & 0x80) == 0) {\n    value = *(int *)(data_ptr + 3);\n  }\n  else {\n    value = *(int *)(data_ptr + 6);\n  }\n  call_function(data_ptr, (flag & 4) == 0, value, flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "data_length",
                "bVar2": "num_iterations",
                "cVar3": "result",
                "uVar4": "processed_data",
                "uVar5": "i"
            },
            "code": "int process_data_08000b04(int data_ptr, int result_ptr) {\n  byte data_length = *(byte *)(data_ptr + 0xc);\n  byte num_iterations = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = num_iterations;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (uint i = 0; i < num_iterations; i++) {\n    undefined2 processed_data = process_byte_pair(*(undefined *)(i * 2 + data_ptr + 0x10), *(undefined *)(data_ptr + (i + 4) * 2 + 9));\n    *(undefined2 *)(result_ptr + (data_length + i) * 2) = processed_data;\n  }\n  char result = *(char *)(data_ptr + 0x49);\n  finalize_processing(data_ptr);\n  return (int)(char)(result + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_and_update_0800262c",
                "param_1": "param_ptr",
                "*(uint *)(*param_1 + 0xc)": "*flags_ptr",
                "*(uint *)(*param_1 + 8)": "*status_ptr",
                "FUN_08003594": "call_function_1",
                "DAT_08002688": "DAT_08002688",
                "*(undefined4 *)(DAT_08002688 + 0x14)": "*(uint32_t *)(DAT_08002688 + 0x14)",
                "*(undefined *)((int)param_1 + 0x1d)": "*(uint8_t *)((int)param_ptr + 0x1d)"
            },
            "code": "void check_and_update_0800262c(int *param_ptr)\n{\n  uint32_t *flags_ptr = (uint32_t *)(*param_ptr + 0xc);\n  uint32_t *status_ptr = (uint32_t *)(*param_ptr + 8);\n  if ((*flags_ptr & 0x100) && (*status_ptr & 0x1000)) {\n    call_function_1();\n    *flags_ptr &= 0xff | 0xfffffe7f;\n  }\n  if ((*flags_ptr & 0x200) && (*status_ptr & 0x2000)) {\n    do_nothing(param_ptr);\n    *flags_ptr &= 0xff | 0xfffffd7f;\n  }\n  *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n  *(uint8_t *)((int)param_ptr + 0x1d) = 1;\n  return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_and_call_function_08004388",
                "param_1": "function_parameter_1",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "iVar2": "num_flags_set",
                "UNRECOVERED_JUMPTABLE": "function_index",
                "bVar1": "flag_2_value",
                "PTR_DAT_0800445c": "global_variable_5",
                "uRam08004434": "global_variable_1",
                "uRam08004440": "global_variable_2",
                "uRam0800443c": "global_variable_3",
                "uRam0000012e": "global_variable_4"
            },
            "code": "void set_flags_and_call_function_08004388(int param_1, int flag_1, byte flag_2) {\n    int num_flags_set = 0;\n    int function_index;\n    int flag_1_value = 0;\n    int flag_2_value = flag_2 & 7;\n    if (flag_2_value == 4) {\n        num_flags_set = 7;\n    }\n    else if (flag_2_value == 6) {\n        num_flags_set = 8;\n    }\n    else if (flag_2_value == 2) {\n        num_flags_set = 6;\n    }\n    if ((flag_2 & 0x30) == 0x30) {\n        *(int *)(param_1 + 0x128) = 0x600;\n        num_flags_set++;\n    }\n    else if ((flag_2 & 0x20) == 0) {\n        *(int *)(param_1 + 0x128) = 0;\n    }\n    else {\n        *(int *)(param_1 + 0x128) = 0x400;\n        num_flags_set++;\n    }\n    if ((flag_2 & 8) == 0) {\n        *(int *)(param_1 + 0x124) = 0;\n    }\n    else {\n        *(int *)(param_1 + 0x124) = 0x2000;\n    }\n    if (num_flags_set == 8) {\n        *(int *)(param_1 + 0x120) = 0;\n    }\n    else if (num_flags_set == 9) {\n        *(int *)(param_1 + 0x120) = 0x1000;\n    }\n    else {\n        num_flags_set = 0;\n    }\n    if (num_flags_set != 0) {\n        set_function_param_1(param_1 + 0xd4);\n        set_function_param_2(param_1 + 0xd4, global_variable_1);\n        return;\n    }\n    function_index = 0x8004432;\n    set_function_param_1(global_variable_2);\n    set_function_param_2(299, global_variable_3);\n    if (extraout_r1 < 0x60) {\n        global_variable_4 = *(short *)(PTR_DAT_0800445c + extraout_r1 * 2);\n    }\n    else {\n        global_variable_4 = 0xffff;\n    }\n    (*(code *)function_index)();\n    return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_08004808",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "data_len",
                "piVar3": "params_ptr",
                "piVar4": "temp_params_ptr",
                "uVar5": "data_flags",
                "uVar6": "data_type",
                "iVar7": "start_index",
                "pcVar8": "function_ptr",
                "iVar9": "temp_value",
                "uVar10": "temp_data",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "flag",
                "uVar12": "temp_data_ptr"
            },
            "code": "void process_data_080051ac(void)\n{\n    uint *data_ptr;\n    int data_len;\n    int *params_ptr;\n    int *temp_params_ptr;\n    uint data_flags;\n    ushort data_type;\n    int start_index;\n    code *function_ptr;\n    int temp_value;\n    uint temp_data;\n    code *jump_table;\n    bool flag;\n    undefined8 temp_data_ptr;\n\n    initialize(6);\n    jump_table = (code *)0x80051bb;\n    temp_data_ptr = get_data(1);\n    params_ptr = (int *)((ulonglong)temp_data_ptr >> 0x20);\n    data_ptr = (uint *)temp_data_ptr;\n    data_type = *(ushort *)(params_ptr + 3);\n    data_flags = (uint)data_type;\n    if ((int)(data_flags << 0x1c) < 0) {\n        start_index = params_ptr[4];\n        if (start_index != 0) {\n            temp_value = data_flags << 0x1e;\n            flag = temp_value == 0;\n            temp_params_ptr = *params_ptr;\n            if (flag) {\n                temp_value = params_ptr[5];\n            }\n            *params_ptr = start_index;\n            if (!flag) {\n                temp_value = 0;\n            }\n            params_ptr[2] = temp_value;\n            for (temp_params_ptr = temp_params_ptr - start_index; 0 < temp_params_ptr; temp_params_ptr = temp_params_ptr - temp_value) {\n                temp_value = (*(code *)params_ptr[10])(data_ptr, params_ptr[8], start_index, temp_params_ptr);\n                if (temp_value < 1) {\n                    data_type = *(ushort *)(params_ptr + 3);\n                    goto LAB_080052b2;\n                }\n                start_index = start_index + temp_value;\n            }\n        }\n    }\n    else if (((0 < params_ptr[1]) || (0 < params_ptr[0x10])) && (function_ptr = (code *)params_ptr[0xb], function_ptr != (code *)0x0)) {\n        temp_data = *data_ptr;\n        *data_ptr = 0;\n        if ((data_flags & 0x1000) == 0) {\n            temp_value = (*function_ptr)(data_ptr, params_ptr[8], data_flags & 0x1000, 1);\n            if ((temp_value == -1) && (data_flags = *data_ptr, data_flags != 0)) {\n                if ((data_flags != 0x1d) && (data_flags != 0x16)) {\n                    *(ushort *)(params_ptr + 3) = *(ushort *)(params_ptr + 3) | 0x40;\n                    (*jump_table)();\n                    return;\n                }\n                *data_ptr = temp_data;\n                goto LAB_080051d6;\n            }\n        }\n        else {\n            temp_value = params_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(params_ptr + 3) << 0x1d) < 0) && (temp_value = temp_value - params_ptr[1], params_ptr[0xd] != 0)) {\n            temp_value = temp_value - params_ptr[0x10];\n        }\n        temp_value = (*(code *)params_ptr[0xb])(data_ptr, params_ptr[8], temp_value, 0);\n        data_type = *(ushort *)(params_ptr + 3);\n        if ((temp_value == -1) && ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f)))) {\n            goto LAB_080052b2;\n        }\n        params_ptr[1] = 0;\n        *params_ptr = params_ptr[4];\n        if (((int)((uint)data_type << 0x13) < 0) && ((temp_value != -1 || (*data_ptr == 0)))) {\n            params_ptr[0x15] = temp_value;\n        }\n        int *temp_ptr = (int *)params_ptr[0xd];\n        *data_ptr = temp_data;\n        if (temp_ptr != (int *)0x0) {\n            if (temp_ptr != params_ptr + 0x11) {\n                free(temp_ptr);\n            }\n            params_ptr[0xd] = 0;\n            (*jump_table)();\n            return;\n        }\n    }\nLAB_080051d6:\n    (*jump_table)(0);\n    return;\n}",
            "called": [
                "FUN_080040f8",
                "FUN_080055d0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data",
                "param_2": "metadata",
                "uVar1": "result",
                "iVar2": "metadata4",
                "piVar3": "p_metadata",
                "uVar4": "temp_uint",
                "uVar5": "metadata3",
                "iVar6": "temp_int",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "pcVar7": "function_pointer",
                "iVar8": "loop_counter",
                "uVar9": "temp_uint_2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "boolean"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data, int *metadata)\n{\n    uint32_t result;\n    int metadata4 = metadata[4];\n    if (metadata4 != 0)\n    {\n        if (data != NULL && data[6] == 0)\n        {\n            initialize_data();\n        }\n        if (metadata == (int *)PTR_DAT_08005314)\n        {\n            metadata = (int *)data[1];\n        }\n        else if (metadata == (int *)PTR_DAT_08005318)\n        {\n            metadata = (int *)data[2];\n        }\n        else if (metadata == (int *)PTR_DAT_0800531c)\n        {\n            metadata = (int *)data[3];\n        }\n        ushort metadata3 = *(ushort *)(metadata + 3);\n        uint32_t metadata3_as_uint = (uint32_t)metadata3;\n        if ((int)(metadata3_as_uint << 0x1c) < 0)\n        {\n            // do something\n        }\n        else if (((0 < metadata[1]) || (0 < metadata[0x10])) && (metadata[0xb] != (int)NULL))\n        {\n            // do something else\n        }\n        else\n        {\n            // do something else\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "process_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "some_value",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_array + 12)"
            },
            "code": "int process_input_08002eb2(int *input_array, int array_length, int some_value) {\n    if (input_array[9] != ' ') {\n        return 2;\n    }\n    if (array_length == 0) {\n        return 1;\n    }\n    if (some_value == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[8] = array_length;\n        input_array[9] = (short)some_value;\n        input_array[11] = (short)some_value;\n        input_array[15] = 0;\n        input_array[9] = 0x21;\n        input_array[14] = 0;\n        *(unsigned int *)(*input_array + 12) = *(unsigned int *)(*input_array + 12) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "process_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_and_clear_data_08000d3c",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_data_08000d3c(void)\n{\n  int i;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (i = 0; PTR_DATA_END > PTR_DATA_START + i; i += 4) {\n    *(undefined4 *)(PTR_DATA_START + i) = *(undefined4 *)(DATA_START + i);\n  }\n  for (data_ptr = (undefined4 *)PTR_DATA_CLEAR_START; data_ptr < PTR_DATA_CLEAR_END; data_ptr++) {\n    *data_ptr = 0;\n  }\n  call_function_1();\n  call_function_2();\n  jump_table = (code *)0x8000d72;\n  call_function_3(jump_table);\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004884",
                "FUN_08004658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_data_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = FUN_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = FUN_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = FUN_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = FUN_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        FUN_08000fb4(uVar10,&local_2c);\n        uVar10 = FUN_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_08002d72",
                "FUN_080031fc",
                "FUN_08003582",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "set_bit_to_zero_0800316c",
                "param_1": "bit_index",
                "param_2": "memory_block",
                "uVar1": "shifted_index",
                "*(uint *)(param_2 + uVar1 * 4)": "target_word",
                "mask": "mask"
            },
            "code": "void set_bit_to_zero_0800316c(uint bit_index, int* memory_block) {\n    uint shifted_index = (bit_index << 0x18) >> 0x1c;\n    uint* target_word = memory_block + shifted_index;\n    uint mask = ~(1 << (bit_index & 0xf));\n    *target_word = *target_word & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_negative_one_080040d0",
                "undefined4": "int32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int32_t return_negative_one_080040d0() {\n\tint32_t result = -1;\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "return_negative_one_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_flags_080040d6",
                "param_1": "memory_address",
                "param_2": "flags",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(memory_address + 4)"
            },
            "code": "void set_memory_flags_080040d6(int* memory_address, int flags) {\n    *(int *)(memory_address + 4) = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_flags_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_2",
                "pbVar2": "buffer",
                "pbVar3": "buffer_1"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_buffer){\n  int buffer_index = (int)(*input_buffer)[2] - 1;\n  (*input_buffer)[2] = (byte *)buffer_index;\n  if(buffer_index >= -1 || (buffer_index >= (int)(*input_buffer)[6] && input_byte != 0xa)){\n    byte *buffer = *input_buffer;\n    *input_buffer = buffer + 1;\n    *buffer = input_byte;\n    return (uint)input_byte;\n  }\n  if(input_length != 0 && *(int *)(input_length + 0x18) == 0){\n    handle_error();\n  }\n  if(input_buffer == (byte **)input_ptr_1){\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if(input_buffer == (byte **)input_ptr_2){\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if(input_buffer == (byte **)input_ptr_3){\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  (*input_buffer)[2] = (*input_buffer)[6];\n  byte *buffer_1 = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  int buffer_2 = (int)buffer_1 << 0x1c;\n  if((buffer_2 < 0 && (buffer_1 = (*input_buffer)[4]) != (byte *)0x0) || (buffer_2 = handle_input(input_length, input_buffer, buffer_2, buffer_1, buffer), buffer_2 == 0)){\n    buffer_2 = (int)(*input_buffer) - (int)(*input_buffer)[4];\n    uint input_byte_uint = (uint)input_byte;\n    if(buffer_2 < (int)(*input_buffer)[5] || (buffer_2 = handle_input(input_length, input_buffer), buffer_2 == 0)){\n      (*input_buffer)[2] = (byte *)((int)(*input_buffer)[2] - 1);\n      byte *buffer = *input_buffer;\n      *input_buffer = buffer + 1;\n      *buffer = input_byte;\n      if((byte *)(buffer_2 + 1) != (*input_buffer)[5]){\n        if((uint)*(ushort *)(input_buffer + 3) << 0x1f < 0){\n          return input_byte_uint;\n        }\n        if(input_byte != 10){\n          return input_byte_uint;\n        }\n      }\n      buffer_2 = handle_input(input_length, input_buffer);\n      if(buffer_2 == 0){\n        return input_byte_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080052cc",
                "FUN_080053a0",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_concatenated_values_080002d0",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "concatenated_values"
            },
            "code": "uint64_t get_concatenated_values_080002d0(int first_value, int second_value, int third_value, int fourth_value) {\n  if ((fourth_value == 0) && (third_value == 0)) {\n    if (second_value != 0 || first_value != 0) {\n      second_value = -1;\n      first_value = -1;\n    }\n    return CONCAT44(second_value, first_value);\n  }\n  uint64_t concatenated_values = FUNC_08000300();\n  return concatenated_values;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_number_in_array_08003f00",
                "param_1": "number_to_find",
                "uVar1": "index_of_number",
                "PTR_DAT_08003f20": "array_ptr"
            },
            "code": "unsigned int find_number_in_array_08003f00(int number_to_find) {\n  unsigned int index_of_number = 0;\n  const int* PTR_DAT_08003f20 = PTR_DAT_08003f20;\n  if (number_to_find == 0) {\n    index_of_number = 10;\n  }\n  else {\n    while (index_of_number <= 9) {\n      if (number_to_find == PTR_DAT_08003f20[index_of_number]) {\n        return index_of_number;\n      }\n      index_of_number++;\n    }\n  }\n  return index_of_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_number_in_array_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_string_08001440",
                "param_1": "string_ptr",
                "puVar1": "char_ptr",
                "*puVar1": "*char_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int increment_string_08001440(int *string_ptr)\n{\n  int *count_ptr = string_ptr + 0x2a;\n  if (*(short *)count_ptr != 0) {\n    char *char_ptr = (char *)string_ptr[9];\n    string_ptr[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)*(int *)(*string_ptr + 0x10);\n    *(short *)count_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_string_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_buffer_08000230",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "byte_to_find",
                "bVar1": "buffer_value_byte",
                "cVar2": "buffer_value_byte_1",
                "cVar3": "buffer_value_byte_2",
                "cVar4": "buffer_value_byte_3",
                "cVar5": "buffer_value_byte_4",
                "pbVar6": "result_pointer",
                "puVar7": "buffer_pointer",
                "pbVar8": "result_pointer_aligned",
                "uVar9": "buffer_offset",
                "uVar10": "buffer_size_aligned",
                "uVar11": "buffer_value",
                "uVar12": "buffer_value_2",
                "bVar13": "buffer_value_2_byte",
                "bVar14": "buffer_value_2_byte_1",
                "bVar15": "buffer_value_2_byte_2",
                "bVar16": "buffer_value_2_byte_3"
            },
            "code": "byte* find_byte_in_buffer_08000230(uint* buffer, uint buffer_size, uint byte_to_find) {\n    byte* result = NULL;\n    buffer_size = buffer_size & 0xff;\n    if ((int)buffer_size < 0x10) {\n        while (buffer_size--) {\n            if (*(byte*)buffer == byte_to_find) {\n                result = (byte*)buffer;\n                break;\n            }\n            buffer++;\n        }\n    } else {\n        uint buffer_offset = (uint)buffer & 7;\n        uint byte_to_find_32 = byte_to_find | byte_to_find << 8 | byte_to_find << 16 | byte_to_find << 24;\n        while (true) {\n            if (buffer_offset == 0) {\n                uint buffer_size_aligned = buffer_size & 0xfffffff8;\n                while (buffer_size_aligned) {\n                    uint buffer_value = *buffer ^ byte_to_find_32;\n                    uint buffer_value_2 = buffer[1] ^ byte_to_find_32;\n                    if (buffer_value | buffer_value_2) {\n                        if (!(buffer_value & 0xff)) {\n                            result = (byte*)buffer + 0x04;\n                        } else if (!(buffer_value & 0xff00)) {\n                            result = (byte*)buffer + 0x03;\n                        } else if (!(buffer_value & 0xff0000)) {\n                            result = (byte*)buffer + 0x02;\n                        } else if (!(buffer_value & 0xff000000)) {\n                            result = (byte*)buffer + 0x01;\n                        } else if (!(buffer_value_2 & 0xff)) {\n                            result = (byte*)buffer + 0x08;\n                        } else if (!(buffer_value_2 & 0xff00)) {\n                            result = (byte*)buffer + 0x07;\n                        } else if (!(buffer_value_2 & 0xff0000)) {\n                            result = (byte*)buffer + 0x06;\n                        } else if (!(buffer_value_2 & 0xff000000)) {\n                            result = (byte*)buffer + 0x05;\n                        }\n                        break;\n                    }\n                    buffer += 2;\n                    buffer_size_aligned -= 8;\n                }\n                buffer_size = buffer_size & 7;\n                if (buffer_size) {\n                    while (buffer_size--) {\n                        if (*(byte*)buffer == byte_to_find) {\n                            result = (byte*)buffer;\n                            break;\n                        }\n                        buffer++;\n                    }\n                }\n                break;\n            }\n            buffer_size--;\n            if (*(byte*)buffer == byte_to_find) {\n                result = (byte*)buffer;\n                break;\n            }\n            buffer_offset = (uint)(buffer++) & 7;\n            if (!buffer_size) {\n                break;\n            }\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_in_buffer_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "update_flags_if_condition_met_08001684",
                "param_1": "params",
                "PTR_DAT_08001714": "flag_value",
                "DAT_08001714": "flag_value"
            },
            "code": "int update_flags_if_condition_met_08001684(uint **params){\n\tuint *flag_ptr = params[11];\n\tchar flag_char = *(char *)((int)params + 0x3d);\n\tif ((flag_ptr == (uint *)0x4 || flag_ptr == (uint *)0x8) && (flag_char == '(')){\n\t\tflag_ptr = PTR_DAT_08001714;\n\t\t(*params)[1] &= 0xfffff8ff;\n\t\t(*params)[5] = 0xfffffbff;\n\t\t**params &= 0xfffffbff;\n\t\tparams[12] = NULL;\n\t\t*(char *)((int)params + 0x3d) = 0x20;\n\t\t*(char *)((int)params + 0x3e) = 0;\n\t\tFUN_080038d0();\n\t}\n\telse if (flag_char == '!'){\n\t\tflag_ptr = PTR_DAT_08001714;\n\t\tparams[12] = (uint *)0x21;\n\t\t*(char *)((int)params + 0x3d) = 0x20;\n\t\t*(char *)((int)params + 0x3e) = 0;\n\t\t(*params)[1] &= 0xfffff8ff;\n\t\t(*params)[5] = 0xfffffbff;\n\t\t**params &= 0xfffffbff;\n\t\tdo_nothing_080015ba();\n\t}\n\telse{\n\t\t(*params)[5] = 0xfffffbff;\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "update_flags_if_condition_met_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_for_flag_08000f8c",
                "param_1": "flag",
                "PTR_": "",
                "DAT_": "",
                "uint": "unsigned int",
                "0x35": "53",
                "0x15": "21"
            },
            "code": "int check_for_flag_08000f8c(uint **flag)\n{\n    if (*flag[0x35] != '\\x02') {\n        flag[0x15] = (uint *)0x80;\n        return 1;\n    }\n    *flag[0x35] = 5;\n    **flag = **flag & 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_for_flag_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_initialized_flag_and_return_function_pointer_if_not_null_080001ac",
                "param_1": "function_pointer",
                "*PTR_DAT_080001c4": "*initialized_flag_pointer",
                "DAT_080001c8": "non_zero_constant",
                "PTR_FUN_080001cc": "function_pointer_to_return"
            },
            "code": "undefined* check_initialized_flag_and_return_function_pointer_if_not_null_080001ac(undefined* function_pointer)\\n{\\n    if (*PTR_DAT_080001c4 == \"\\0\") {\\n        if (DAT_080001c8 != 0) {\\n            function_pointer = PTR_FUN_080001cc;\\n        }\\n        *PTR_DAT_080001c4 = 1;\\n    }\\n    return function_pointer;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_flag_and_return_function_pointer_if_not_null_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0() {\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080048cc(char *array, char value, int size) {\n  char *end_of_array = array + size;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005400",
                "FUN_0800532c",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "return_zero_080040e4"
            },
            "code": "int return_zero_080040e4(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "return_zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_value_08003506",
                "param_1": "value",
                "param_2": "list"
            },
            "code": "int find_short_value_08003506(int value, short *list)\n{\n  while( true ) {\n    if (*(int *)(list + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(list + 2) == value) break;\n    list = list + 6;\n  }\n  return (int)*list;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_value_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "value_pointer"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int* PTR_DAT_080025e8 = (int*)PTR_DAT_080025e8;\n    int value = *PTR_DAT_080025e8;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "returnZero_080040e8"
            },
            "code": "int returnZero_080040e8(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "returnZero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_in_array_08000a00",
                "param_1": "array_start",
                "param_2": "array_end",
                "param_3": "bit_to_set",
                "param_4": "bit_value",
                "uVar1": "bit_index",
                "uVar2": "array_index"
            },
            "code": "int set_bit_in_array_08000a00(int array_start, int array_end, int bit_to_set, int bit_value) {\n  uint bit_index = calculate_bit_index(*(undefined *)(array_start + 0xb),*(undefined *)(array_start + 0xc),bit_to_set,bit_value,bit_value);\n  uint array_index = (bit_index << 0x14) >> 0x18;\n  if (*(char *)(array_start + 0xd) == -1) {\n    *(ushort *)(array_end + array_index * 2) = (ushort)(1 << (bit_index & 0xf)) | *(ushort *)(array_end + array_index * 2);\n  }\n  else {\n    *(ushort *)(array_end + array_index * 2) = *(ushort *)(array_end + array_index * 2) & ~(ushort)(1 << (bit_index & 0xf));\n  }\n  *(undefined *)(array_start + 0x49) = 6;\n  function_0800076c(array_start);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "process_data_080047c0",
                "param_1": "data_address",
                "iVar1": "index",
                "PTR_DAT_080047ec": "PTR_DAT",
                "FUN_08005760": "initialize",
                "FUN_08004678": "get_random_index"
            },
            "code": "void process_data_080047c0(int data_address)\n{\n  int index = *(int *)(data_address + 8);\n  if (index != 0) {\n    void (*function_pointer)() = *(void (**)(void))(data_address + 0xc);\n    function_pointer();\n    return;\n  }\n  initialize();\n  int random_index = get_random_index();\n  int value = *(int *)(PTR_DAT_080047ec_080047ec + random_index * 0x14 + 0xc);\n  if (value != 0) {\n    process_data_080047c0(data_address);\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "process_data_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_08005374",
                "param_1": "num_blocks",
                "param_2": "block_size",
                "puVar1": "block_ptr",
                "iVar2": "total_size"
            },
            "code": "undefined4* allocate_memory_08005374(int num_blocks, int block_size)\n{\n  undefined4* block_ptr;\n  int total_size = (num_blocks - 1) * 0x68;\n  block_ptr = (undefined4*)allocate_memory_08005374(total_size + 0x74);\n  if (block_ptr != (undefined4*)0x0) {\n    *block_ptr = 0;\n    block_ptr[1] = num_blocks;\n    block_ptr[2] = block_ptr + 3;\n    memset(block_ptr + 3, 0, total_size + 0x68);\n  }\n  return block_ptr;\n}",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = FUN_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08003750(int input) {\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "process_input_080014ec",
                "param_1": "input_buffer",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_buffer",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t process_input_080014ec(uint32_t **input_buffer, uint32_t *input_data, int input_size, uint32_t *output_buffer)\n{\n  uint32_t result;\n  uint32_t *ptr;\n  \n  if ((*input_buffer)[0x3d] == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if ((*input_buffer)[0xf] == 0x01) {\n      result = 2;\n    }\n    else {\n      (*input_buffer)[0xf] = 1;\n      ptr = *input_buffer;\n      if ((*ptr & 1) == 0) {\n        *ptr |= 1;\n      }\n      **input_buffer &= 0xfffff7ff;\n      (*input_buffer)[0x3d] = '*';\n      (*input_buffer)[0x3e] = ' ';\n      result = 0;\n      input_buffer[0x10] = NULL;\n      input_buffer[9] = input_data;\n      *(uint16_t *)((int)input_buffer + 0x2a) = input_size;\n      input_buffer[0xb] = output_buffer;\n      *(uint16_t *)(input_buffer + 10) = *(uint16_t *)((int)input_buffer + 0x2a);\n      (*input_buffer)[1] |= 0x700;\n      (*input_buffer)[0xf] = 0;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "process_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_into_linked_list_080048dc",
                "param_1": "error_code",
                "param_2": "element",
                "param_3": "element_size",
                "param_4": "linked_list_head",
                "puVar1": "pointer_to_linked_list_head",
                "piVar2": "previous_node",
                "extraout_r1": "previous_node",
                "ppiVar3": "previous_node",
                "ppiVar4": "current_node",
                "ppiVar5": "next_node",
                "ppiVar6": "previous_node",
                "ppiVar7": "element"
            },
            "code": "void insert_into_linked_list_080048dc(int* error_code, int* element, int element_size, int** linked_list_head) {\n    if (element_size == 0) {\n        return;\n    }\n    int** current_node = linked_list_head;\n    int** next_node = *linked_list_head;\n    if (next_node == NULL) {\n        element[1] = NULL;\n        *current_node = element;\n        int** previous_node = current_node;\n    } else if (element < next_node) {\n        int** previous_node = *element;\n        int** new_node = element + (int)previous_node;\n        bool is_next_node_head = next_node == new_node;\n        if (is_next_node_head) {\n            next_node = *next_node;\n            next_node = next_node[1];\n        }\n        element[1] = next_node;\n        if (is_next_node_head) {\n            new_node = new_node + (int)previous_node;\n            *element = new_node;\n        }\n        *current_node = element;\n    } else {\n        while (next_node != NULL && next_node <= element) {\n            int** previous_node = next_node;\n            next_node = next_node[1];\n        }\n        int** previous_node = *previous_node;\n        if (element + (int)previous_node == next_node) {\n            previous_node = previous_node + (int)*element;\n            if (next_node == previous_node + 1) {\n                int* next_node_element = *next_node;\n                next_node = next_node[1];\n                previous_node[1] = next_node;\n                previous_node = previous_node + (int)next_node_element;\n                *previous_node = previous_node;\n            }\n        }\n        else if (element < element + (int)previous_node) {\n            *error_code = 0xc;\n        } else {\n            int** new_node = element + (int)*element;\n            bool is_next_node_head = next_node == new_node;\n            if (is_next_node_head) {\n                int** next_node_element = *next_node;\n                next_node = next_node[1];\n                element = element + (int)next_node_element;\n            }\n            element[1] = next_node;\n            if (is_next_node_head) {\n                element = element + (int)*element;\n                *element = element;\n            }\n            previous_node[1] = element;\n        }\n    }\n    do_nothing_0800557e(error_code, previous_node, next_node, NULL);\n    return;\n}",
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080051ac",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_function_08003754",
                "param_1": "param",
                "iVar1": "function_ptr"
            },
            "code": "void execute_function_08003754(int param)\n{\n  int function_ptr;\n  \n  function_ptr = get_function_pointer();\n  if ((*(code **)(function_ptr + 0x48) != (code *)0x0) && (*(char *)(param + 0x18) == '\\x01')) {\n    (**(code **)(function_ptr + 0x48))(function_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flag_08001578",
                "param_1": "data_pointer",
                "puVar1": "data",
                "*puVar1": "*data",
                "*param_1": "**data_pointer"
            },
            "code": "int set_bit_and_flag_08001578(uint **data_pointer)\n{\n  uint *data = *data_pointer;\n  if (*(char *)((int)data_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data_pointer + 0x3d) = 0x28;\n  if ((*data & 1) == 0) {\n    *data |= 1;\n  }\n  **data |= 0x400;\n  (*data_pointer)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "get_return_value_08004844",
                "param_1": "input_value",
                "param_2": "ptr_data",
                "DAT_0800485c": "DAT_0800485c",
                "CONCAT44": "CONCAT44"
            },
            "code": "unsigned long long get_return_value_08004844(unsigned int input_value, uint64_t ptr_data) {\n  if (DAT_0800485c != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (uint64_t)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "get_return_value_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_from_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031f8": "data_1",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10"
            },
            "code": "int get_data_from_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_from_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_if_valid_080047d0",
                "iVar1": "random_index",
                "PTR_DAT_080047ec": "ptr_dat",
                "*ptr": "ptr_value",
                "FUN_080047c0": "do_something"
            },
            "code": "void check_if_valid_080047d0() {\n  int random_index = get_random_index();\n  int* ptr = (int*)(PTR_DAT_080047ec + random_index * 0x14 + 0xc);\n  if (*ptr != 0) {\n    do_something();\n  }\n  return;\n}",
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_if_valid_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "do_nothing_loop_080040f8"
            },
            "code": "void do_nothing_loop_080040f8(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": false,
            "current_name": "do_nothing_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "process_input_0800500c",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "pointer_to_data",
                "iVar2": "result"
            },
            "code": "void process_input_0800500c(int *output_value, undefined4 input_value)\n{\n  undefined *pointer_to_data = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  int result = perform_calculation(input_value);\n  if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "process_input_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "input_parameter",
                "DAT_0800247c": "data_address",
                "DAT_08002480": "error_code_1",
                "DAT_08002484": "error_code_2",
                "uVar1": "control_bits",
                "uVar2": "frequency_multiplier",
                "status_register": "status_register",
                "frequency": "frequency",
                "carry_check": "carry_check"
            },
            "code": "uint calculate_frequency_080023b4(void)\n{\n    uint frequency = 0;\n    uint control_register = *(uint *)(DAT_0800247c + 8);\n    uint status_register = *(uint *)(DAT_0800247c + 4);\n    uint frequency_multiplier = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    uint carry_check = (uint)(frequency_multiplier * 0x20 < frequency_multiplier) * -0x3f - (uint)(frequency_multiplier * 0x7c0 < frequency_multiplier * 0x1f);\n    if ((control_register & 0xc) == 4) {\n        return DAT_08002484;\n    }\n    else if ((control_register & 0xc) != 8) {\n        return DAT_08002480;\n    }\n    else {\n        if ((status_register & 0x400000) == 0) {\n            frequency_multiplier = FUN_080002d0(frequency_multiplier * 16000000, ((carry_check + (uint)CARRY4(frequency_multiplier * 0x3d08, frequency_multiplier)) * 0x400 | frequency_multiplier * 0x3d09 >> 0x16), frequency, 0, in_r3);\n        }\n        else {\n            frequency_multiplier = FUN_080002d0(frequency_multiplier * 8000000, (carry_check * 8 + (uint)CARRY4(frequency_multiplier * 0x3d08, frequency_multiplier)) * 0x200, frequency, 0, in_r3);\n        }\n        return frequency_multiplier / ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n    }\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_frequency_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_flags_080011a4",
                "param_1": "flag_value",
                "DAT_080011bc": "data_ptr",
                "execute_function": "FUN_080047d0",
                "*flags_ptr": "flags_value"
            },
            "code": "void update_flags_080011a4(uint flag_value)\n{\n    uint* flags_ptr = (uint*)(DAT_080011bc + 0x14);\n    if((*flags_ptr & flag_value) != 0)\n    {\n        *flags_ptr = flag_value;\n        execute_function();\n    }\n    return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_flags_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_and_update_flags_08001e68",
                "param_1": "data",
                "puVar2": "ptr_data",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "DAT_08001f38": "FLAG_MASK1",
                "0x100": "BIT_FLAG",
                "0x10200": "FLAG_MASK2",
                "0x10400": "FLAG_MASK3",
                "0x10800": "FLAG_MASK4",
                "*(char *)((int)param_1 + 0x3d)": "c",
                "*(char *)((int)param_1 + 0x3e)": "char_after_c",
                "*(short *)((int)param_1 + 0x2a)": "short_val",
                "0x21": "VALUE_21",
                "FUN_08001684": "perform_action",
                "4": "FLAG_VALUE3",
                "\\n": "NEWLINE_CHAR",
                "0x200": "BIT_9",
                "8": "FLAG_VALUE4",
                "0": "FLAG_INDEX",
                "0xfffffeff": "INITIAL_FLAG_VALUE1",
                "0xfffffdff": "INITIAL_FLAG_VALUE2",
                "0xfffffbff": "INITIAL_FLAG_VALUE3",
                "0xfffff7ff": "INITIAL_FLAG_VALUE4",
                "0x0": "NULL_POINTER",
                "FUN_08001ab0": "perform_final_action"
            },
            "code": "void check_and_update_flags_08001e68(uint **data)\n{\n  uint *ptr_data = *data;\n  uint flag1 = ptr_data[5];\n  uint flag2 = ptr_data[1];\n  \n  if (((flag1 & DAT_08001f38) != 0) && ((flag2 & 0x100) != 0)) {\n    data[FLAG_INDEX] = (uint *)((uint)data[FLAG_INDEX] | FLAG_VALUE1);\n    ptr_data[5] = 0xfffffeff;\n  }\n  if (((flag1 & FLAG_MASK2) != 0) && ((flag2 & 0x100) != 0)) {\n    data[FLAG_INDEX] = (uint *)((uint)data[FLAG_INDEX] | FLAG_VALUE2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((flag1 & FLAG_MASK3) != 0) && ((flag2 & 0x100) != 0)) {\n    char c = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == SPACE_CHAR) && (*(short *)((int)data + 0x2a) == 0)) && (((c == EXCLAMATION_CHAR || (c == RIGHT_PAREN_CHAR)) || ((c == LEFT_PAREN_CHAR && (data[0xc] == (uint *)0x21)))))) {\n      perform_action(data);\n    }\n    else {\n      data[FLAG_INDEX] = (uint *)((uint)data[FLAG_INDEX] | FLAG_VALUE3);\n      if (*(char *)((int)data + 0x3e) == NEWLINE_CHAR) {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & FLAG_MASK4) != 0) && ((flag2 & 0x100) != 0)) {\n    data[FLAG_INDEX] = (uint *)((uint)data[FLAG_INDEX] | FLAG_VALUE4);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (data[FLAG_INDEX] != (uint *)0x0) {\n    perform_final_action(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "data_ptr",
                "DAT_08001902": "do_nothing_08001902",
                "DAT_080015b8": "do_nothing_080015b8"
            },
            "code": "int process_data_080019a0(uint **data)\n{\n  uint *data_ptr;\n  int data_length = *(short *)((int)data + 0x2a);\n  \n  if (data_length == 4) {\n    (*data)[1] &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_length == 3) {\n    (*data)[1] &= 0xfffffbff;\n    **data &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_length == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data &= 0xfffffbff;\n      **data |= 0x100;\n    }\n    else {\n      **data |= 0x200;\n    }\n    data_ptr = data[9];\n    data[9] = (uint *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) -= 1;\n    data_ptr = data[9];\n    data[9] = (uint *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) -= 1;\n    (*data)[1] &= 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      DAT_08001902();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      DAT_080015b8();\n    }\n  }\n  else {\n    data_ptr = data[9];\n    data[9] = (uint *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_less_than_10_08003f24",
                "uVar1": "function_index",
                "FUN_08003f00": "get_function_index"
            },
            "code": "void execute_function_if_less_than_10_08003f24(void)\n{\n  uint function_index = get_function_index();\n  if (function_index < 10) {\n    (**(code **)(PTR_DAT_08003f40 + function_index * 4))(*(undefined4 *)(PTR_DAT_08003f44 + function_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_080046b4(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *data_ptr = PTR_DAT_08004754;\n    if (param_1 != 1)\n    {\n        return;\n    }\n    if (param_2 == 0xffff)\n    {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xc) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3c] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5c) = 0;\n        data_ptr[100] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8c] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xa0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xac) = 0;\n        data_ptr[0xb4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xc0) = 0;\n        data_ptr[200] = 0x28;\n        *(undefined4 *)(data_ptr + 0xd4) = 0;\n        data_ptr[0xdc] = 0x28;\n        *(undefined4 *)(data_ptr + 0xe8) = 0;\n        data_ptr[0xf0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xfc) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[300] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        FUN_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data_ptr, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "puVar2": "output_ptr",
                "cVar1": "current_char",
                "remaining_count": "remaining_count",
                "data_ptr": "data_ptr",
                "status_ptr": "status_ptr",
                "*puVar2": "*output_ptr",
                "*(char *)((int)param_1 + 0x3d)": "current_char",
                "*(short *)((int)param_1 + 0x2a)": "*remaining_count",
                "param_1[9]": "data[9]",
                "*(undefined4 *)(*param_1 + 0x10)": "*(uint32_t *)(*data + 0x10)",
                "*(uint *)(*param_1 + 4)": "*(uint32_t *)(*data + 4)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)data + 0x3d)",
                "do_nothing_0800160c()": "do_nothing_0800160c()"
            },
            "code": "int process_data_0800160e(int *data)\n{\n  char current_char;\n  uint16_t *remaining_count;\n  uint32_t *data_ptr;\n  uint32_t *status_ptr;\n  uint8_t *output_ptr;\n\n  current_char = *(char *)((int)data + 0x3d);\n  remaining_count = (uint16_t *)((int)data + 0x2a);\n\n  if (*remaining_count != 0) {\n    output_ptr = (uint8_t *)data[9];\n    data[9] = (int)(output_ptr + 1);\n    *output_ptr = (uint8_t)*(uint32_t *)(*data + 0x10);\n    *remaining_count = *remaining_count - 1;\n    if ((*remaining_count == 0) && (current_char == '*')) {\n      status_ptr = (uint32_t *)(*data + 4);\n      *status_ptr &= 0xfffffbff;\n      data[0xc] = 0x22;\n      *(uint8_t *)((int)data + 0x3d) = 0x28;\n      do_nothing_0800160c();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_pointer_value_08000e18",
                "PTR_DAT_08000e28": "pointer_to_updated_value",
                "PTR_DAT_08000e2c": "pointer_to_byte_value"
            },
            "code": "void update_pointer_value_08000e18(void)\n{\n    uint8_t byte_value = *PTR_DAT_08000e2c;\n    int* pointer_to_int_value = (int*)PTR_DAT_08000e28;\n    uint* pointer_to_uint_value = (uint*)PTR_DAT_08000e28;\n    *pointer_to_uint_value = byte_value + *pointer_to_int_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "update_pointer_value_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "calculate_bit_08003486",
                "param_1": "bit_position",
                "param_2": "output",
                "param_3": "input1",
                "uVar1": "calculated_value",
                "local_24": "mask",
                "local_20": "input1",
                "local_1c": "input2",
                "local_18": "shift",
                "FUN_080031fc": "calculate"
            },
            "code": "void calculate_bit_08003486(uint bit_position, uint* output, uint input1, uint input2)\n{\n  uint mask = 1 << (bit_position & 0xf) & 0xffff;\n  uint shift = (bit_position << 0x18) >> 0x1c;\n  uint calculated_value = calculate(shift);\n  *output = mask & calculated_value;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "calculate_bit_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "check_and_update_status_08005662",
                "param_1": "id",
                "param_2": "status_info",
                "iVar1": "result",
                "uVar2": "status",
                "bVar3": "is_error"
            },
            "code": "void check_and_update_status_08005662(int id, int* status_info)\n{\n  int result = get_status(id, (int)*(short *)(status_info + 0xe));\n  bool is_error = result == -1;\n  ushort status = *(ushort *)(status_info + 0xc);\n  if (is_error) {\n    status &= 0xefff;\n  }\n  else {\n    *(int *)(status_info + 0x54) = result;\n    status |= 0x1000;\n  }\n  *(ushort *)(status_info + 0xc) = status;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_status_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "new_index",
                "local_9": "new_data"
            },
            "code": "void update_data_080042ac(int data_ptr)\n{\n    int result = 0;\n    ushort new_index = 0;\n    undefined new_data;\n    result = get_data(data_ptr, &new_data);\n    if ((result == 0) && (new_index = *(short *)(data_ptr + 100) + 1U & 0x3f, new_index != *(ushort *)(data_ptr + 0x66))) {\n        *(undefined *)(*(int *)(data_ptr + 0x60) + (uint)*(ushort *)(data_ptr + 100)) = new_data;\n        *(ushort *)(data_ptr + 100) = new_index;\n    }\n    return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "PTR_DAT_08003d00": "status_ptr",
                "PTR_DAT_08003d01": "data_ptr",
                "PTR_DAT_08003d02": "flag2_ptr",
                "PTR_DAT_08003d03": "counter2_ptr",
                "PTR_DAT_08003d04": "status2_ptr",
                "PTR_DAT_08003d05": "data2_ptr",
                "PTR_DAT_08003d06": "byte_ptr",
                "PTR_DAT_08003d07": "counter_ptr"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *PTR_DAT_08003d07;\n  uint32_t *PTR_DAT_08003d00;\n  uint32_t *PTR_DAT_08003d01;\n  uint32_t *PTR_DAT_08003d02;\n  uint32_t *PTR_DAT_08003d03;\n  uint32_t *PTR_DAT_08003d04;\n  uint32_t *PTR_DAT_08003d05;\n  uint8_t *PTR_DAT_08003d06;\n\n  flag_ptr = input[11];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    PTR_DAT_08003d07 = input[10];\n    PTR_DAT_08003d00 = input[12];\n    PTR_DAT_08003d01 = *input;\n    PTR_DAT_08003d02 = input[9];\n    PTR_DAT_08003d03 = input[8];\n    PTR_DAT_08003d04 = input[13];\n    PTR_DAT_08003d05 = input[1];\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        PTR_DAT_08003d01[1] &= 0xfffff8ff;\n        *PTR_DAT_08003d01 |= 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        PTR_DAT_08003d01[1] &= 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      PTR_DAT_08003d06 = (uint8_t *)PTR_DAT_08003d02;\n      input[9] = (uint32_t *)((int)PTR_DAT_08003d02 + 1);\n      PTR_DAT_08003d01[4] = (uint32_t)*PTR_DAT_08003d06;\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_if_param_is_four_08000f2c",
                "param_1": "param",
                "*DAT_08000f48": "*flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_08000f2c(int param) {\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "bit_index",
                "PTR_08000edc": "array_start_ptr",
                "DAT_08000edc": "array_start"
            },
            "code": "void set_bit_in_array_08000ec4(uint bit_index)\n{\n  if (bit_index >= 0) {\n    int array_index = bit_index >> 5;\n    int bit_offset = bit_index & 0x1f;\n    int* array_ptr = (int*)(DAT_08000edc + array_index * 4);\n    *array_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "check_and_call_function_08004338",
                "DAT_0800435c": "flag",
                "PTR_DAT_08004360": "data_ptr",
                "FUN_08004240": "call_function"
            },
            "code": "void check_and_call_function_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    call_function(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_call_080005e0",
                "0x3f": "SYSCALL_NUMBER"
            },
            "code": "void trigger_system_call_080005e0(void)\n{\n  software_interrupt(SYSCALL_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_call_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "check_and_call_function_080005e4",
                "param_1": "arg1",
                "param_4": "arg4",
                "uVar1": "result",
                "FUN_080005e0": "call_function"
            },
            "code": "int check_and_call_function_080005e4(int arg1, int arg4) {\n  int result;\n  if (*(int *)PTR_DAT_080005fc != 0) {\n    return 0;\n  }\n  result = call_function(1, arg1, 0, 0, arg4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "process_input_0800076c",
                "param_1": "input_data",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "processed_data",
                "iVar2": "result",
                "uVar3": "current_index"
            },
            "code": "void process_input_0800076c(int **input_data, uint8_t data_length, uint32_t param_3, uint32_t param_4) {\n    uint8_t current_index = (*input_data)[0x49];\n    uint16_t processed_data = process_data(input_data, current_index, param_3, param_4);\n    (*input_data)[current_index + 9] = processed_data >> 8;\n    current_index = (current_index + 1) & 0xff;\n    (*input_data)[current_index + 9] = processed_data;\n    (*input_data)[0x49] = current_index + 1;\n    if ((*input_data)[6] > 1) {\n        perform_operation((*input_data)[6], 1);\n    }\n    if ((*input_data)[5] < 4) {\n        (**(code **)(*input_data)[0])(*input_data, (int)*input_data + 9, (undefined *)(*input_data + 0x49));\n    }\n    if ((*input_data)[6] > 1) {\n        perform_operation((*input_data)[6], 0);\n    }\n    if ((*input_data)[5] < 4) {\n        int result;\n        do {\n            result = (**(code **)(*input_data)[0xc])();\n        } while (result >= -1);\n    }\n    (*input_data)[0x49] = 0;\n    int processed_result = process_result();\n    input_data[0x17] = (int *)(processed_result + (*input_data)[0x56]);\n    (*input_data)[0x52]++;\n}\n",
            "called": [
                "FUN_08004204",
                "FUN_08000728",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a00",
                "FUN_08000b54",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "process_input_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_offset_08004460",
                "param_1": "base_address",
                "param_2": "offset",
                "uVar1": "value",
                "PTR_DAT_08004478": "PTR_DATA"
            },
            "code": "void set_value_at_offset_08004460(int base_address, uint offset) {\n  undefined2 value;\n  if (offset < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_parameter_08001198",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_high_word",
                "*(int *)(param_1 + 0x18)": "*(int *)(object_address + 0x18)"
            },
            "code": "void set_parameter_08001198(int object_address, int value, int is_high_word)\n{\n  if (is_high_word == 0) {\n    *(int *)(object_address + 0x18) = value;\n    return;\n  }\n  *(int *)(object_address + 0x18) = value << 0x10;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_parameter_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "param_1": "num",
                "param_2": "bit_index",
                "PTR_": "ptr",
                "DAT_": "masked_num"
            },
            "code": "uint get_bit_08003138(uint num, int bit_index)\n{\n    uint* PTR_ = (uint*)(bit_index + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = num & 0xf;\n    uint bit = (*PTR_) >> DAT_ & 1;\n    return bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_08002848",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "(*bit_array)",
                "uint": "uint32_t",
                "&(1 << (param_2 & 0xff))": "(1 << (bit_position & 0xff))",
                "~(1 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "shifted_value"
            },
            "code": "void set_bit_08002848(uint32_t *bit_array, uint8_t bit_position, uint8_t bit_value) {\n  uint32_t mask = ~(1 << (bit_position & 0xff));\n  uint32_t shifted_value = bit_value << (bit_position & 0xff);\n  *bit_array = (*bit_array & mask) | shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combineBytes_0800312c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combineBytes_0800312c(int address)\n{\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "imported": false,
            "current_name": "combineBytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bit_080028f0",
                "param_1": "data",
                "param_2": "bit_position",
                "puVar1": "data_ptr"
            },
            "code": "int clear_bit_080028f0(uint **data, int bit_position) {\n  uint *data_ptr = *data;\n  FUN_080028d4(data_ptr, bit_position, 0);\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[17] = data_ptr[17] & 0xffff7fff;\n  }\n  data_ptr = *data;\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr = *data_ptr & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_to_value"
            },
            "code": "uint32_t get_value_from_pointer_08000e30() {\n    uint32_t* PTR_DAT_08000e38 = (uint32_t*) PTR_DAT_08000e38;\n    return *PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_0800201c",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "initialize_object_08000f56",
                "param_1": "object_address",
                "*(undefined *)(param_1 + 4)": "*(char *)(object_address + 4)",
                "FUN_080033c8": "call_initialization_function",
                "*(undefined4 *)(param_1 + 0x10)": "*(int *)(object_address + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(char *)(object_address + 5)"
            },
            "code": "int initialize_object_08000f56(int object_address)\n{\n  if (object_address != 0) {\n    *(char *)(object_address + 4) = 2;\n    call_initialization_function();\n    *(int *)(object_address + 0x10) = 0;\n    *(char *)(object_address + 4) = 0;\n    *(char *)(object_address + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "initialize_object_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "buffer_ptr": "buffer",
                "first_char": "first_char",
                "data_type": "data_type",
                "value": "value",
                "byte_ptr": "byte_ptr",
                "counter": "counter"
            },
            "code": "int process_data_0800295c(int *data)\n{\n  char first_char = *(char *)(data + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int data_type = data[2];\n  int *buffer_ptr = (int *)(*data);\n  if (data_type == 0x1000) {\n    short value = *(short *)(data[8]);\n    *(uint *)(buffer_ptr + 1) = value & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    char *byte_ptr = (char *)(data[8]);\n    data[8] = (int)(byte_ptr + 1);\n    *(uint *)(buffer_ptr + 1) = (uint)*byte_ptr;\n  }\n  short counter = *(short *)(data + 0x26) - 1;\n  *(short *)(data + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(buffer_ptr + 3) = *(uint *)(buffer_ptr + 3) & 0xffffff7f;\n    *(uint *)(buffer_ptr + 3) = *(uint *)(buffer_ptr + 3) | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "iVar1": "result"
            },
            "code": "int check_value_08003380(int a, int b, int c, int d) {\n  int result = FUN_0800354a(a, PTR_DAT_08003398, c, d, d);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_array",
                "iVar1": "result",
                "puVar2": "data_pointer",
                "iVar3": "data_value"
            },
            "code": "void process_data_08004110(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_array)\n{\n  int data_value;\n  undefined *data_pointer;\n  int result;\n  \n  if (data_index < 0x60) {\n    data_value = (int)*(short *)(PTR_DAT_080041a8 + data_index * 2);\n    data_pointer = PTR_DAT_080041a8;\n  }\n  else {\n    data_value = -1;\n    data_pointer = data_array;\n  }\n  if (data_value != -1) {\n    result = FUN_08003138(data_value, PTR_DAT_080041ac, param_3, data_pointer, data_array);\n    if (result != 0) {\n      result = FUN_0800355e(data_value, PTR_DAT_080041b0);\n      if (result == 0) {\n        result = FUN_0800355e(data_value, PTR_DAT_080041b4);\n        if (result != 0) {\n          FUN_08003414(data_value);\n        }\n      }\n      else {\n        FUN_080033d8(data_value);\n      }\n      FUN_0800316c(data_value, PTR_DAT_080041ac);\n    }\n    switch(param_2) {\n    case 0:\n      FUN_08003486(data_value, 0);\n      break;\n    case 1:\n      FUN_08003486(data_value, 1, 0);\n      break;\n    case 2:\n      FUN_08003486(data_value, 0, 1);\n      break;\n    case 3:\n      FUN_08003486(data_value, 0, 2);\n    }\n    FUN_0800314e(data_value, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003486"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "validate_input_and_set_values_08000ee0",
                "param_1": "input",
                "puVar1": "values_ptr"
            },
            "code": "int validate_input_and_set_values_08000ee0(int input) {\n  int *values_ptr = DAT_08000f04;\n  if (input - 1U < 0x1000000) {\n    values_ptr[1] = input - 1U;\n    *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n    values_ptr[2] = 0;\n    *values_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_values_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "input_array",
                "pbVar2": "byte_pointer",
                "cVar1": "current_char"
            },
            "code": "int process_input_080015bc(int *input_array) {\n  char current_char;\n  byte *byte_pointer;\n  current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte_pointer = (byte *)input_array[9];\n    input_array[9] = (int)(byte_pointer + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      perform_nothing_operation();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "memory_address",
                "param_2": "data",
                "param_3": "max_data_size",
                "param_4": "data_type",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_data_0800066c(int memory_address, int data, int max_data_size, int data_type) {\n    *(int *)(memory_address + 4) = data;\n    if (max_data_size > 3) {\n        max_data_size = 0;\n    }\n    *(char *)(memory_address + 5) = (char)max_data_size;\n    *(int *)(memory_address + 6) = data_type;\n    *(short *)(memory_address + 0x56) = 1000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "add_to_buffer_080042e8",
                "param_1": "buffer_addr",
                "param_2": "data",
                "bVar1": "index_byte",
                "bVar2": "index_byte_mod",
                "iVar3": "buffer_index"
            },
            "code": "int add_to_buffer_080042e8(int buffer_addr, char data) {\n    *(char *)(buffer_addr + 0x10) = 1;\n    int buffer_index = *(unsigned short *)(buffer_addr + 0x140) + 1;\n    char index_byte = (char)buffer_index;\n    char index_byte_mod = index_byte & 0x7f;\n    if (buffer_index == 0) {\n        index_byte_mod = -(-index_byte & 0x7f);\n    }\n    do {\n    } while (*(unsigned short *)(buffer_addr + 0x142) == (unsigned short)index_byte_mod);\n    *(char *)(*(int *)(buffer_addr + 0x13c) + (unsigned int)*(unsigned short *)(buffer_addr + 0x140)) = data;\n    *(unsigned short *)(buffer_addr + 0x140) = (unsigned short)index_byte_mod;\n    int result = FUN_08003df4(buffer_addr + 0xd4);\n    if (result == 0) {\n        FUN_08003eac(buffer_addr + 0xd4, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "add_to_buffer_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_valid_080038d0",
                "param_1": "function_ptr",
                "iVar1": "obj_ptr"
            },
            "code": "void execute_function_if_valid_080038d0(code* function_ptr){\n  int obj_ptr = get_object_ptr();\n  if(function_ptr != nullptr && *(char*)(obj_ptr + 0x5e) == '\\x01' && *(char*)(obj_ptr + 0x2c) != ' '){\n    (*function_ptr)(obj_ptr + 0x68);\n  }\n  cleanup(obj_ptr);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c"
            },
            "code": "int return_one_0800410c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "calculate_shifted_value_0800260c",
                "uVar1": "shifted_value",
                "FUN_080025e0": "get_function_result",
                "PTR_DAT_08002628": "data_array",
                "DAT_08002624": "data_array"
            },
            "code": "uint calculate_shifted_value_0800260c(void)\n{\n  uint shifted_value;\n  uint function_result = get_function_result();\n  uint shift_amount = *(int *)(PTR_DAT_08002628 + 8) << 0x10;\n  uint shift_index = shift_amount >> 0x1d;\n  shifted_value = function_result >> shift_index;\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x138)": "offset_1",
                "*(short *)(param_1 + 0x13a)": "offset_2",
                "result": "result"
            },
            "code": "ushort calculate_offset_08004240(int base_address)\n{\n    ushort offset_1 = *(short *)(base_address + 0x138);\n    ushort offset_2 = *(short *)(base_address + 0x13a);\n    ushort result = (offset_1 + 0x40) - offset_2 & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "decode_and_print_080041bc",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "decoded_index",
                "uVar2": "decoded_value",
                "puVar3": "short_data",
                "uVar4": "short_value"
            },
            "code": "void decode_and_print_080041bc(uint index, undefined4 value1, undefined4 value2, undefined *data)\n{\n  int decoded_index;\n  undefined4 decoded_value;\n  uint short_value;\n  undefined *short_data;\n\n  if (index < 0x60) {\n    short_value = (uint)*(short *)(PTR_DAT_080041fc + index * 2);\n    short_data = PTR_DAT_080041fc;\n  }\n  else {\n    short_value = 0xffffffff;\n    short_data = data;\n  }\n\n  if ((short_value != 0xffffffff) && (decoded_index = FUN_08003138(short_value, PTR_DAT_08004200, value2, short_data, data), decoded_index != 0)) {\n    decoded_value = FUN_0800318c((short_value << 0x18) >> 0x1c);\n    FUN_080034b6(decoded_value, 1 << (short_value & 0xf) & 0xffff, value1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003138",
                "FUN_0800318c",
                "FUN_080034b6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_080006b4",
                "FUN_08000600",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "decode_and_print_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_data_struct_08004364",
                "param_1": "data_struct_ptr",
                "PTR_": "data_struct_",
                "DAT_": "data_"
            },
            "code": "void initialize_data_struct_08004364(int PTR_ptr)\n{\n    int* PTR_start = (int*)(PTR_ptr + 0x134);\n    int* PTR_end = (int*)(PTR_ptr + 0x13c);\n    *PTR_start = PTR_ptr + 0x11;\n    *PTR_end = PTR_ptr + 0x51;\n    short* PTR_mid1 = (short*)(PTR_ptr + 0x138);\n    short* PTR_mid2 = (short*)(PTR_ptr + 0x140);\n    *PTR_mid1 = 0;\n    *PTR_mid2 = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_program_08000682",
                "param_1": "program_input",
                "FUN_0800066c": "initialize_program"
            },
            "code": "undefined4 execute_program_08000682(undefined4 param_1)\n{\n  initialize_program();\n  return param_1;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "execute_program_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_parameter_08000e3c",
                "param_1": "parameter",
                "PTR_08000e5c": "ptr",
                "DAT_08000e5c": "ptr_base"
            },
            "code": "void set_parameter_08000e3c(uint parameter)\n{\n    uint* PTR_08000e5c = (uint*)(DAT_08000e5c + 0xc);\n    uint mask = 0xf8ff;\n    uint value = (parameter & 7) << 8 | (*PTR_08000e5c & mask) | 0x5fa0000;\n    *PTR_08000e5c = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_parameter_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "clear_flags_and_set_bit_08002864",
                "param_1": "ptr_param",
                "param_2": "flag",
                "puVar2": "ptr_data",
                "bVar1": "is_valid_flag"
            },
            "code": "uint32_t clear_flags_and_set_bit_08002864(uint32_t **ptr_param, uint32_t flag) {\n    uint32_t *ptr_data = *ptr_param;\n    bool is_valid_flag = false;\n\n    clear_flags(ptr_data, flag, 0);\n\n    if (ptr_data == PTR_DAT_080028d0 || ptr_data == PTR_DAT_080028d0 + 0x100) {\n        is_valid_flag = true;\n    }\n\n    if (is_valid_flag && (ptr_data[8] & 0x1111) == 0 && (ptr_data[8] & 0x444) == 0) {\n        ptr_data[0x11] &= 0xffff7fff;\n    }\n\n    if ((ptr_data[8] & 0x1111) == 0 && (ptr_data[8] & 0x444) == 0) {\n        *ptr_data &= 0xfffffffe;\n    }\n\n    *(uint8_t *)((int)ptr_param + 0x39) = 1;\n    return 0;\n}\n",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_flags_and_set_bit_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_params_0800532c",
                "param_1": "params",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr",
                "FUN_080048cc": "set_memory"
            },
            "code": "void initialize_params_0800532c(undefined4 *params, undefined2 param2, undefined2 param3)\n{\n    params[0] = 0;\n    params[1] = 0;\n    params[2] = 0;\n    *(undefined2 *)(params + 3) = param2;\n    params[0x19] = 0;\n    *(undefined2 *)((int)params + 0xe) = param3;\n    params[4] = 0;\n    params[5] = 0;\n    params[6] = 0;\n    set_memory(params + 0x17, 0, 8);\n    params[9] = DAT_08005364;\n    params[10] = PTR_FUN_0800562a_1_08005368;\n    params[0xb] = PTR_FUN_08005662_1_0800536c;\n    undefined *ptr = PTR_LAB_08005686_1_08005370;\n    params[8] = params;\n    params[0xc] = ptr;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_params_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_at_position_0800314e",
                "param_1": "position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "element",
                "1 << (param_1 & 0xf)": "1 << bit_position"
            },
            "code": "void set_bit_at_position_0800314e(uint position, int* array) {\n  uint index = (position << 0x18) >> 0x1c;\n  uint* element = (uint*)(array + index * 4);\n  uint bit_position = position & 0xf;\n  *element = *element | (1 << bit_position);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_array_0800447c",
                "param_1": "array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "*param_1": "function_pointer",
                "PTR_PTR_FUN_080042e8_1_080044c8": "function_pointer_080042e8_1_080044c8",
                "PTR_DAT_080044cc": "pointer_dat_080044cc",
                "FUN_08004444": "call_function_08004444",
                "FUN_08004460": "call_function_08004460",
                "*(undefined2 *)((int)param_1 + 0x12e)": "value_from_pointer_dat_080044d0",
                "PTR_DAT_080044d0": "pointer_dat_080044d0",
                "*(undefined2 *)(param_1 + 0x4b)": "value_from_pointer_dat_080044d4",
                "PTR_DAT_080044d4": "pointer_dat_080044d4",
                "FUN_0800351e": "get_value_from_pointer_dat_0800351e",
                "FUN_08004364": "call_function_08004364"
            },
            "code": "undefined4 *initialize_array_0800447c(undefined4 *array, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  array[1] = 0;\n  array[2] = 1000;\n  *array = PTR_PTR_FUN_080042e8_1_080044c8;\n  if (array == (undefined4 *)PTR_DAT_080044cc) {\n    call_function_08004444(array, 0x4c, param_3, PTR_DAT_080044cc, param_4);\n    call_function_08004460(array, 0x4d);\n  }\n  else {\n    undefined2 uVar1 = get_value_from_PTR_DAT_080044d0(param_2);\n    *(undefined2 *)((int)array + 0x12e) = uVar1;\n    uVar1 = get_value_from_PTR_DAT_080044d4(param_2);\n    *(undefined2 *)(array + 0x4b) = uVar1;\n  }\n  call_function_08004364(array);\n  return array;\n}",
            "called": [
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364",
                "FUN_08004460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_array_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "error_code",
                "param_2": "line_number",
                "param_3": "file_name",
                "param_4": "assertion_code",
                "uVar1": "assertion_message_address",
                "puVar2": "assertion_message",
                "uVar3": "time",
                "uVar4": "code",
                "PTR_PTR_DAT_08004834": "function_pointers",
                "PTR_s___function__08004838": "assertion_message_text",
                "PTR_s_assertion___s__failed__file___s__0800483c": "assertion_error_message",
                "FUN_08004860": "print_assertion_error",
                "PTR_s__08004840": "default_assertion_message"
            },
            "code": "void assertion_failed_08004808(undefined4 error_code, undefined4 line_number, undefined* file_name, undefined4 assertion_code) {\n  undefined4 assertion_message_address = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  undefined* assertion_message = PTR_s___function__08004838;\n  undefined4 code = assertion_code;\n  if (file_name == (undefined*)0x0) goto END;\n  do {\n    print_assertion_error(assertion_message_address, PTR_s___function__08004838, assertion_code, error_code, line_number, file_name, assertion_message, code);\n    undefined8 time = get_time();\n    line_number = (undefined4)((ulonglong)time >> 0x20);\n    assertion_message_address = (undefined4)time;\nEND:\n    file_name = default_file_name;\n    assertion_message = PTR_s__08004840;\n  } while(true);\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "**param_1": "bit_value",
                "*(undefined *)(param_1 + 1)": "*(uint8_t *)(bit_array + 1)",
                "uint": "uint32_t",
                "undefined4": "uint32_t",
                "&(1 << (param_2 & 0xff))": "(1u << (bit_index & 0xff))",
                "~(1 << (param_2 & 0xff))": "~(1u << (bit_index & 0xff))"
            },
            "code": "uint32_t clear_bit_08000f72(uint32_t **bit_array, uint32_t bit_index) {\n\tuint32_t mask = ~(1u << (bit_index & 0xff));\n\t**bit_array &= mask;\n\t*(uint8_t *)(bit_array + 1) = 1u;\n\treturn 0u;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data_ptr",
                "iVar1": "data",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "DAT_08001e60": "FLAGS_1",
                "DAT_08001e4c": "FLAGS_2",
                "DAT_08001e54": "FLAGS_3",
                "DAT_08001e64": "FLAGS_4",
                "DAT_08001e5c": "FLAGS_5",
                "DAT_08001e58": "FLAGS_6",
                "DAT_08001e50": "FLAGS_7"
            },
            "code": "void process_data_08001d00(int *data_ptr) {\n  int data = *data_ptr;\n  uint var1 = *(uint *)(data + 0x18);\n  uint var2 = *(uint *)(data + 0x14);\n  uint var3 = *(uint *)(data + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((DAT_08001e60 & var2) == 0) || ((var3 & 0x200) == 0)) {\n        if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n          execute_task_1(data_ptr);\n        }\n      }\n      else {\n        execute_task_2(data_ptr);\n      }\n    }\n    else {\n      execute_task_3(data_ptr);\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_task_4(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_task_5(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_task_6(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_task_7(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n      execute_task_8();\n      return;\n    }\n    if (((DAT_08001e50 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      execute_task_9(data_ptr);\n      return;\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_task_10(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_task_11(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_task_12(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_task_13(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_08001420",
                "FUN_08001256",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800171a",
                "FUN_08001440",
                "FUN_0800160e",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_080019a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08001d00"
        }
    },
    "used_tokens": 174524,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_08004fdc",
            "FUN_080056d4",
            "thunk_FUN_0800410c",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08005760",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_080028d4",
            "FUN_080040ec",
            "FUN_08001460",
            "FUN_08003880",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_080025ec",
            "FUN_08000c4c",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_0800377c",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_080034ce",
            "FUN_080047fe",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_08000600",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08000690",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08000d3c",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08001684",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_080047c0",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ]
    ],
    "locked_functions": []
}