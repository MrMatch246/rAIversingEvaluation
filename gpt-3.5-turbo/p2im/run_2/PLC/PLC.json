{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputParam)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data_pointer,uint target_byte,uint data_length)\n\n{\n  byte current_byte;\n  char is_null_or_zero_byte;\n  char is_null_or_zero_byte_shifted8;\n  char is_null_or_zero_byte_shifted16;\n  char is_null_or_zero_byte_shifted24;\n  byte *current_pointer;\n  uint *current_uint_pointer;\n  byte *return_pointer;\n  uint alignment_offset;\n  uint data_length_aligned;\n  uint data_xor_1;\n  uint data_xor_2;\n  bool is_non_zero_byte;\n  bool is_non_zero_byte_shifted8;\n  bool is_non_zero_byte_shifted16;\n  bool is_non_zero_byte_shifted24;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      current_uint_pointer = (uint *)((int)data_pointer + 1);\n      current_byte = *(byte *)data_pointer;\n      data_length = data_length - 1;\n      data_pointer = current_uint_pointer;\n    } while (current_byte != target_byte);\n  }\n  else {\n    alignment_offset = (uint)data_pointer & 7;\n    while( true ) {\n      if (alignment_offset == 0) {\n        alignment_offset = target_byte | target_byte << 8;\n        alignment_offset = alignment_offset | alignment_offset << 0x10;\n        data_length_aligned = data_length & 0xfffffff8;\n        do {\n          current_uint_pointer = data_pointer + 2;\n          data_length_aligned = data_length_aligned - 8;\n          data_xor_1 = *data_pointer ^ alignment_offset;\n          data_xor_2 = data_pointer[1] ^ alignment_offset;\n          is_null_or_zero_byte = -((char)data_xor_1 == '\\0');\n          is_null_or_zero_byte_shifted8 = -((char)(data_xor_1 >> 8) == '\\0');\n          is_null_or_zero_byte_shifted16 = -((char)(data_xor_1 >> 0x10) == '\\0');\n          is_null_or_zero_byte_shifted24 = -((char)(data_xor_1 >> 0x18) == '\\0');\n          data_xor_1 = CONCAT13(is_null_or_zero_byte_shifted24,CONCAT12(is_null_or_zero_byte_shifted16,CONCAT11(is_null_or_zero_byte_shifted8,is_null_or_zero_byte)));\n          is_non_zero_byte = (char)data_xor_2 != '\\0';\n          is_non_zero_byte_shifted8 = (char)(data_xor_2 >> 8) != '\\0';\n          is_non_zero_byte_shifted16 = (char)(data_xor_2 >> 0x10) != '\\0';\n          is_non_zero_byte_shifted24 = (char)(data_xor_2 >> 0x18) != '\\0';\n          data_xor_2 = CONCAT13(is_non_zero_byte_shifted24 * is_null_or_zero_byte_shifted24 - !is_non_zero_byte_shifted24,\n                            CONCAT12(is_non_zero_byte_shifted16 * is_null_or_zero_byte_shifted16 - !is_non_zero_byte_shifted16,\n                                     CONCAT11(is_non_zero_byte_shifted8 * is_null_or_zero_byte_shifted8 - !is_non_zero_byte_shifted8,is_non_zero_byte * is_null_or_zero_byte - !is_non_zero_byte)));\n          if (data_xor_2 != 0) {\n            if (data_xor_1 == 0) {\n              return_pointer = (byte *)((int)data_pointer + 5);\n              data_xor_1 = data_xor_2;\n            }\n            else {\n              return_pointer = (byte *)((int)data_pointer + 1);\n            }\n            if ((data_xor_1 & 1) == 0) {\n              is_non_zero_byte = (data_xor_1 & 0x100) == 0;\n              current_pointer = return_pointer + 1;\n              if (is_non_zero_byte) {\n                is_non_zero_byte = (data_xor_1 & 0x18000) == 0;\n                current_pointer = return_pointer + 2;\n              }\n              return_pointer = current_pointer;\n              if (is_non_zero_byte) {\n                return_pointer = return_pointer + 1;\n              }\n            }\n            return return_pointer + -1;\n          }\n          data_pointer = current_uint_pointer;\n        } while (data_length_aligned != 0);\n        data_length = data_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_uint_pointer = (uint *)((int)data_pointer + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data_pointer == target_byte) break;\n      alignment_offset = (uint)current_uint_pointer & 7;\n      data_pointer = current_uint_pointer;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_uint_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data_pointer",
                "param_2": "target_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "is_null_or_zero_byte",
                "cVar3": "is_null_or_zero_byte_shifted8",
                "cVar4": "is_null_or_zero_byte_shifted16",
                "cVar5": "is_null_or_zero_byte_shifted24",
                "pbVar6": "current_pointer",
                "puVar7": "current_uint_pointer",
                "pbVar8": "return_pointer",
                "uVar9": "alignment_offset",
                "uVar10": "data_length_aligned",
                "uVar11": "data_xor_1",
                "uVar12": "data_xor_2",
                "bVar13": "is_non_zero_byte",
                "bVar14": "is_non_zero_byte_shifted8",
                "bVar15": "is_non_zero_byte_shifted16",
                "bVar16": "is_non_zero_byte_shifted24"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "process_parameters_080002d0",
            "code": "\nundefined8 process_parameters_080002d0(int input_param_1,int input_param_2,int input_param_3,int input_param_4)\n\n{\n  undefined8 result;\n  \n  if ((input_param_4 == 0) && (input_param_3 == 0)) {\n    if (input_param_2 != 0 || input_param_1 != 0) {\n      input_param_2 = -1;\n      input_param_1 = -1;\n    }\n    return combine_values(input_param_2,input_param_1);\n  }\n  result = perform_calculation();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "process_parameters_080002d0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "CONCAT44": "combine_values",
                "divide_remainder_08000300": "perform_calculation"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_remainder_08000300(uint dividend,uint dividend_low,uint divisor,uint divisor_low,uint *quotient_and_remainder)\n\n{\n  ulonglong result;\n  uint quotient_high;\n  uint quotient_low;\n  uint remainder_high;\n  uint remainder_low;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (divisor_low == 0) {\n    if (dividend_low < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_low = dividend >> (0x20U - shift_amount & 0xff) | dividend_low << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp3 = divisor >> 0x10;\n      temp1 = dividend_low / temp3;\n      remainder_low = dividend >> 0x10 | (dividend_low - temp3 * temp1) * 0x10000;\n      remainder_high = temp1 * (divisor & 0xffff);\n      quotient_low = temp1;\n      if (remainder_low <= remainder_high && remainder_high - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        quotient_low = temp1 - 1;\n        if ((carry_flag == false) && (remainder_low <= remainder_high && remainder_high - remainder_low != 0)) {\n          quotient_low = temp1 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      temp1 = (remainder_low - remainder_high) / temp3;\n      remainder_low = dividend & 0xffff | ((remainder_low - remainder_high) - temp3 * temp1) * 0x10000;\n      temp3 = temp1 * (divisor & 0xffff);\n      remainder_high = temp1;\n      if (remainder_low <= temp3 && temp3 - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        remainder_high = temp1 - 1;\n        if ((carry_flag == false) && (remainder_low <= temp3 && temp3 - remainder_low != 0)) {\n          remainder_high = temp1 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      remainder_low = remainder_low - temp3;\n      remainder_high = remainder_high | quotient_low << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_low = dividend_low - divisor;\n        remainder_low = divisor >> 0x10;\n        temp4 = divisor & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        remainder_low = divisor >> 0x10;\n        remainder_high = dividend_low >> (0x20U - shift_amount & 0xff);\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_low << shift_amount;\n        quotient_low = remainder_high / remainder_low;\n        temp4 = divisor & 0xffff;\n        temp3 = temp2 >> 0x10 | (remainder_high - remainder_low * quotient_low) * 0x10000;\n        temp1 = quotient_low * temp4;\n        dividend = dividend << shift_amount;\n        remainder_high = quotient_low;\n        if (temp3 <= temp1 && temp1 - temp3 != 0) {\n          carry_flag = CARRY4(temp3,divisor);\n          temp3 = temp3 + divisor;\n          remainder_high = quotient_low - 1;\n          if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n            remainder_high = quotient_low - 2;\n            temp3 = temp3 + divisor;\n          }\n        }\n        quotient_high = (temp3 - temp1) / remainder_low;\n        dividend_low = temp2 & 0xffff | ((temp3 - temp1) - remainder_low * quotient_high) * 0x10000;\n        temp1 = quotient_high * temp4;\n        quotient_low = quotient_high;\n        if (dividend_low <= temp1 && temp1 - dividend_low != 0) {\n          carry_flag = CARRY4(dividend_low,divisor);\n          dividend_low = dividend_low + divisor;\n          quotient_low = quotient_high - 1;\n          if ((carry_flag == false) && (dividend_low <= temp1 && temp1 - dividend_low != 0)) {\n            quotient_low = quotient_high - 2;\n            dividend_low = dividend_low + divisor;\n          }\n        }\n        dividend_low = dividend_low - temp1;\n        quotient_low = quotient_low | remainder_high << 0x10;\n      }\n      temp2 = dividend_low / remainder_low;\n      temp3 = dividend >> 0x10 | (dividend_low - remainder_low * temp2) * 0x10000;\n      remainder_high = temp4 * temp2;\n      temp1 = temp2;\n      if (temp3 <= remainder_high && remainder_high - temp3 != 0) {\n        carry_flag = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp1 = temp2 - 1;\n        if ((carry_flag == false) && (temp3 <= remainder_high && remainder_high - temp3 != 0)) {\n          temp1 = temp2 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - remainder_high) / remainder_low;\n      remainder_low = dividend & 0xffff | ((temp3 - remainder_high) - remainder_low * temp2) * 0x10000;\n      temp4 = temp4 * temp2;\n      remainder_high = temp2;\n      if (remainder_low <= temp4 && temp4 - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,divisor);\n        remainder_low = remainder_low + divisor;\n        remainder_high = temp2 - 1;\n        if ((carry_flag == false) && (remainder_low <= temp4 && temp4 - remainder_low != 0)) {\n          remainder_high = temp2 - 2;\n          remainder_low = remainder_low + divisor;\n        }\n      }\n      remainder_low = remainder_low - temp4;\n      remainder_high = remainder_high | temp1 << 0x10;\n    }\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = remainder_low >> shift_amount;\n      quotient_and_remainder[1] = 0;\n      return CONCAT44(quotient_low,remainder_high);\n    }\n  }\n  else if (dividend_low < divisor_low) {\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_low;\n      return 0;\n    }\n    remainder_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_low);\n    if (shift_amount != 0) {\n      temp3 = 0x20 - shift_amount;\n      quotient_low = divisor >> (temp3 & 0xff) | divisor_low << shift_amount;\n      temp4 = quotient_low >> 0x10;\n      remainder_high = dividend_low >> (temp3 & 0xff);\n      quotient_high = dividend >> (temp3 & 0xff) | dividend_low << shift_amount;\n      temp2 = remainder_high / temp4;\n      temp1 = quotient_high >> 0x10 | (remainder_high - temp4 * temp2) * 0x10000;\n      remainder_low = temp2 * (quotient_low & 0xffff);\n      dividend = dividend << shift_amount;\n      remainder_high = temp2;\n      if (temp1 <= remainder_low && remainder_low - temp1 != 0) {\n        carry_flag = CARRY4(temp1,quotient_low);\n        temp1 = temp1 + quotient_low;\n        remainder_high = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= remainder_low && remainder_low - temp1 != 0)) {\n          remainder_high = temp2 - 2;\n          temp1 = temp1 + quotient_low;\n        }\n      }\n      temp2 = (temp1 - remainder_low) / temp4;\n      temp1 = quotient_high & 0xffff | ((temp1 - remainder_low) - temp4 * temp2) * 0x10000;\n      temp4 = temp2 * (quotient_low & 0xffff);\n      remainder_low = temp2;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,quotient_low);\n        temp1 = temp1 + quotient_low;\n        remainder_low = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          remainder_low = temp2 - 2;\n          temp1 = temp1 + quotient_low;\n        }\n      }\n      remainder_low = remainder_low | remainder_high << 0x10;\n      result = (ulonglong)remainder_low * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp1 - temp4,dividend) < result) {\n        result = result - CONCAT44(quotient_low,divisor << shift_amount);\n        remainder_low = remainder_low - 1;\n      }\n      if (quotient_and_remainder != (uint *)0x0) {\n        remainder_high = ((temp1 - temp4) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_and_remainder = remainder_high << (temp3 & 0xff) | dividend - (uint)result >> shift_amount;\n        quotient_and_remainder[1] = remainder_high >> shift_amount;\n      }\n      return (ulonglong)remainder_low;\n    }\n    if ((divisor_low < dividend_low) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_low = (dividend_low - divisor_low) - (uint)carry_flag;\n      remainder_high = 1;\n    }\n    else {\n      remainder_high = 0;\n    }\n    quotient_low = 0;\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_low;\n      return (ulonglong)remainder_high;\n    }\n  }\n  return CONCAT44(quotient_low,remainder_high);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_low",
                "param_3": "divisor",
                "param_4": "divisor_low",
                "param_5": "quotient_and_remainder",
                "uVar1": "result",
                "uVar2": "quotient_high",
                "uVar3": "quotient_low",
                "uVar4": "remainder_high",
                "uVar5": "remainder_low",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "bVar11": "carry_flag",
                "iVar10": "shift_amount"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_software_interrupt_080005e0",
            "code": "\nvoid executeSoftwareInterrupt_080005e0(void)\n\n{\n  executeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_interrupt_080005e4",
            "code": "\nundefined4 execute_interrupt_080005e4(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_080005e0(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_interrupt_080005e4",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_and_process_parameters_08000600",
            "code": "\nvoid initialize_and_process_parameters_08000600(int **parameter,undefined4 value)\n\n{\n  char parameter_value;\n  int result;\n  \n  parameter_value = *(char *)((int)parameter + 5);\n  if (parameter_value == '\\x02') {\n    *parameter = &DAT_20000338;\n  }\n  else if (parameter_value == '\\x03') {\n    *parameter = &DAT_20000338;\n  }\n  else if (parameter_value == '\\x01') {\n    *parameter = &DAT_20000338;\n  }\n  else {\n    *parameter = &DAT_20000338;\n  }\n  initialize_serial(*parameter,value,6);\n  if (1 < *(byte *)((int)parameter + 6)) {\n    process_parameter(*(byte *)((int)parameter + 6),1);\n    update_param_value_if_bit_set(*(undefined *)((int)parameter + 6),0);\n  }\n  do {\n    result = (**(code **)(**parameter + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)parameter + 0x49) = 0;\n  *(undefined *)((int)parameter + 0x4a) = 0;\n  *(undefined2 *)(parameter + 0x15) = 0;\n  *(undefined2 *)((int)parameter + 0x52) = 0;\n  *(undefined2 *)(parameter + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_and_process_parameters_08000600",
                "param_1": "parameter",
                "param_2": "value",
                "cVar1": "parameter_value",
                "iVar2": "result",
                "initialize_serial_08004388": "initialize_serial",
                "process_parameter_08004110": "process_parameter",
                "update_param_value_if_bit_set_080041bc": "update_param_value_if_bit_set"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataPointer,undefined value,int limit,undefined data)\n\n{\n  *(undefined *)(dataPointer + 4) = value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(dataPointer + 5) = (char)limit;\n  *(undefined *)(dataPointer + 6) = data;\n  *(undefined2 *)(dataPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "data"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_param)\n\n{\n  initialize_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_param",
                "initialize_data_0800066c": "initialize_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_and_initialize_08000690",
            "code": "\nvoid check_and_initialize_08000690(int value1,int value2,undefined4 value3,undefined4 value4)\n\n{\n  if (value1 != 1) {\n    return;\n  }\n  if (value2 == 0xffff) {\n    initialize_and_return_08000682(&DAT_20000124,1,0,0,value4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_and_initialize_08000690",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "update_values_080006b4",
            "code": "\nint update_values_080006b4(int **input_array)\n\n{\n  bool is_exceeding_limit;\n  undefined updated_value;\n  int result;\n  byte index;\n  \n  if (1 < *(byte *)((int)input_array + 6)) {\n    update_param_value(*(byte *)((int)input_array + 6),0);\n  }\n  *(undefined *)((int)input_array + 0x49) = 0;\n  if (*(byte *)((int)input_array + 5) < 4) {\n    is_exceeding_limit = false;\n    while (result = (**(code **)(**input_array + 8))(), result != 0) {\n      index = *(byte *)((int)input_array + 0x49);\n      updated_value = (**(code **)(**input_array + 0xc))();\n      *(undefined *)((int)input_array + index + 9) = updated_value;\n      index = *(char *)((int)input_array + 0x49) + 1;\n      *(byte *)((int)input_array + 0x49) = index;\n      if (0x3f < index) {\n        is_exceeding_limit = true;\n      }\n    }\n  }\n  else {\n    is_exceeding_limit = false;\n  }\n  *(short *)(input_array + 0x14) = *(short *)(input_array + 0x14) + 1;\n  if (is_exceeding_limit) {\n    *(short *)(input_array + 0x15) = *(short *)(input_array + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)input_array + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "update_values_080006b4",
                "param_1": "input_array",
                "bVar1": "is_exceeding_limit",
                "uVar2": "updated_value",
                "iVar3": "result",
                "bVar4": "index",
                "update_param_value_if_bit_set_080041bc": "update_param_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculateChecksum_08000728(int data_start,int data_length)\n\n{\n  byte bit_index;\n  uint checksum;\n  uint bit;\n  uint index;\n  \n  checksum = 0xffff;\n  for (index = 0; (int)index < data_length; index = index + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_start + index + 9);\n    for (bit_index = 1; bit_index < 9; bit_index = bit_index + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "index",
                "bVar1": "bit_index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_and_parameters_0800076c",
            "code": "\nvoid updateChecksumAndParameters_0800076c(int **inputParam,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksum;\n  int returnValue;\n  uint paramValue;\n  \n  paramValue = (uint)*(byte *)((int)inputParam + 0x49);\n  checksum = calculateChecksum(inputParam,paramValue,param3,param4,param4);\n  *(char *)((int)inputParam + paramValue + 9) = (char)((ushort)checksum >> 8);\n  paramValue = paramValue + 1 & 0xff;\n  *(char *)((int)inputParam + paramValue + 9) = (char)checksum;\n  *(char *)((int)inputParam + 0x49) = (char)paramValue + '\\x01';\n  if (1 < *(byte *)((int)inputParam + 6)) {\n    updateParamValueIfBitSet(*(byte *)((int)inputParam + 6),1);\n  }\n  if (*(byte *)((int)inputParam + 5) < 4) {\n    (**(code **)(**inputParam + 4))(*inputParam,(int)inputParam + 9,*(undefined *)((int)inputParam + 0x49));\n  }\n  if (1 < *(byte *)((int)inputParam + 6)) {\n    updateParamValueIfBitSet(*(byte *)((int)inputParam + 6),0);\n  }\n  if (*(byte *)((int)inputParam + 5) < 4) {\n    do {\n      returnValue = (**(code **)(**inputParam + 0xc))();\n    } while (-1 < returnValue);\n  }\n  *(undefined *)((int)inputParam + 0x49) = 0;\n  returnValue = initializeGlobalVariable();\n  inputParam[0x17] = (int *)(returnValue + (uint)*(ushort *)((int)inputParam + 0x56));\n  *(short *)((int)inputParam + 0x52) = *(short *)((int)inputParam + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_and_parameters_0800076c",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "checksum",
                "iVar2": "returnValue",
                "uVar3": "paramValue",
                "calculate_checksum_08000728": "calculateChecksum",
                "update_param_value_if_bit_set_080041bc": "updateParamValueIfBitSet",
                "initialize_global_variable_08004204": "initializeGlobalVariable"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_conditions_080007f0",
            "code": "\nundefined4 check_conditions_080007f0(int address,undefined4 value,uint param_3,undefined4 param_4)\n\n{\n  bool isFound;\n  byte combinedByte;\n  char combinedValue1;\n  char combinedValue2;\n  int result1;\n  uint counter;\n  int value1;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      isFound = false;\nLAB_0800080a:\n      if (!isFound) {\n        *(short *)(address + 0x54) = *(short *)(address + 0x54) + 1;\n        return 1;\n      }\n      value1 = *(byte *)(address + 10) - 1;\n      switch(*(byte *)(address + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        combinedValue1 = combine_values_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param_3,\n                             value1,param_4);\n        combinedValue2 = combine_values_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n        if (*(byte *)(address + 0x60) < (byte)(combinedValue2 + combinedValue1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        value1 = combine_values_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param_3,\n                             value1,param_4);\n        if ((uint)*(byte *)(address + 0x60) < (uint)(value1 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combinedByte = combine_values_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param_3,\n                             value1,param_4);\n        if (*(byte *)(address + 0x60) < combinedByte) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    param_3 = (uint)*(byte *)(address + 10);\n    if ((byte)(&DAT_08005a10)[counter] == param_3) {\n      isFound = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  value1 = combine_values_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param_3,value1,\n                       param_4);\n  result1 = combine_values_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n  if ((uint)*(byte *)(address + 0x60) <\n      (((uint)(value1 << 0xc) >> 0x10) + ((uint)(result1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_conditions_080007f0",
                "param_1": "address",
                "param_2": "value",
                "bVar1": "isFound",
                "bVar2": "combinedByte",
                "cVar3": "combinedValue1",
                "cVar4": "combinedValue2",
                "iVar5": "result1",
                "uVar6": "counter",
                "iVar7": "value1"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_data_and_set_flag_080008cc",
            "code": "\nvoid copyDataAndSetFlag_080008cc(int dataPointer,undefined newData)\n\n{\n  *(undefined *)(dataPointer + 9) = *(undefined *)(dataPointer + 4);\n  *(byte *)(dataPointer + 10) = *(byte *)(dataPointer + 10) ^ 0x80;\n  *(undefined *)(dataPointer + 0xb) = newData;\n  *(undefined *)(dataPointer + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_data_and_set_flag_080008cc",
                "param_1": "dataPointer",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "combine_and_update_values_080008e2",
            "code": "\nint combineAndUpdateValues_080008e2(int ptr1,int ptr2,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue;\n  uint combinedValue2;\n  uint count;\n  uint bitIndex;\n  char shiftedValue;\n  int address;\n  \n  combinedValue = combine_values_08004640(*(undefined *)(ptr1 + 0xb),*(undefined *)(ptr1 + 0xc),param3,param4,\n                       param4);\n  combinedValue2 = combine_values_08004640(*(undefined *)(ptr1 + 0xd),*(undefined *)(ptr1 + 0xe));\n  shiftedValue = (char)((combinedValue2 << 0x15) >> 0x18);\n  if ((combinedValue2 & 7) != 0) {\n    shiftedValue = shiftedValue + '\\x01';\n  }\n  *(char *)(ptr1 + 0xb) = shiftedValue;\n  *(undefined *)(ptr1 + 0x49) = 3;\n  bitIndex = 0;\n  for (count = 0; (int)count < (int)combinedValue2; count = count + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(ptr2 + ((count + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (count + combinedValue & 0xf) & 1U) == 0) {\n      address = (uint)*(byte *)(ptr1 + 0x49) + ptr1;\n      *(byte *)(address + 9) = *(byte *)(address + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      address = (uint)*(byte *)(ptr1 + 0x49) + ptr1;\n      *(byte *)(address + 9) = *(byte *)(address + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(ptr1 + 0x49) = *(char *)(ptr1 + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((combinedValue2 & 7) != 0) {\n    *(char *)(ptr1 + 0x49) = *(char *)(ptr1 + 0x49) + '\\x01';\n  }\n  shiftedValue = *(char *)(ptr1 + 0x49);\n  update_checksum_and_parameters_0800076c(ptr1);\n  return (int)(char)(shiftedValue + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "combine_and_update_values_080008e2",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue",
                "uVar2": "combinedValue2",
                "uVar3": "count",
                "uVar4": "bitIndex",
                "cVar5": "shiftedValue",
                "iVar6": "address"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_values_08000998",
            "code": "\nint process_values_08000998(int input_array,int data_array,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_value;\n  char char_value;\n  byte combined_value_1;\n  byte combined_value_2;\n  uint loop_variable;\n  uint next_index;\n  \n  combined_value_1 = combine_values_08004640(*(undefined *)(input_array + 0xb),*(undefined *)(input_array + 0xc),param_3,param_4,\n                       param_4);\n  combined_value_2 = combine_values_08004640(*(undefined *)(input_array + 0xd),*(undefined *)(input_array + 0xe));\n  *(byte *)(input_array + 0xb) = combined_value_2 << 1;\n  *(undefined *)(input_array + 0x49) = 3;\n  for (loop_variable = (uint)combined_value_1; loop_variable < (uint)combined_value_1 + (uint)combined_value_2; loop_variable = loop_variable + 1 & 0xff) {\n    byte_value = *(byte *)(input_array + 0x49);\n    *(char *)(input_array + (uint)byte_value + 9) = (char)((ushort)*(undefined2 *)(data_array + loop_variable * 2) >> 8)\n    ;\n    next_index = byte_value + 1 & 0xff;\n    char_value = (char)next_index;\n    *(char *)(input_array + 0x49) = char_value;\n    *(undefined *)(input_array + next_index + 9) = *(undefined *)(data_array + loop_variable * 2);\n    *(char *)(input_array + 0x49) = char_value + '\\x01';\n  }\n  char_value = *(char *)(input_array + 0x49);\n  update_checksum_and_parameters(input_array);\n  return (int)(char)(char_value + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_values_08000998",
                "param_1": "input_array",
                "param_2": "data_array",
                "bVar1": "byte_value",
                "cVar2": "char_value",
                "bVar3": "combined_value_1",
                "bVar4": "combined_value_2",
                "uVar5": "loop_variable",
                "uVar6": "next_index",
                "update_checksum_and_parameters_0800076c": "update_checksum_and_parameters"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_values_08000a00",
            "code": "\nundefined4 update_values_08000a00(int input_address,int output_address,undefined4 value_1,undefined4 value_2)\n\n{\n  uint combined_value;\n  uint shifted_index;\n  \n  combined_value = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),value_1,value_2,\n                       value_2);\n  shifted_index = (combined_value << 0x14) >> 0x18;\n  if (*(char *)(input_address + 0xd) == -1) {\n    *(ushort *)(output_address + shifted_index * 2) =\n         (ushort)(1 << (combined_value & 0xf)) | *(ushort *)(output_address + shifted_index * 2);\n  }\n  else {\n    *(ushort *)(output_address + shifted_index * 2) =\n         *(ushort *)(output_address + shifted_index * 2) & ~(ushort)(1 << (combined_value & 0xf));\n  }\n  *(undefined *)(input_address + 0x49) = 6;\n  update_checksum_and_parameters_0800076c(input_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_values_08000a00",
                "param_1": "input_address",
                "param_2": "output_address",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "combined_value",
                "uVar2": "shifted_index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_values_and_store_08000a4e",
            "code": "\nundefined4 updateValuesAndStore_08000a4e(int inputPtr,int outputPtr)\n\n{\n  byte combinedValue1;\n  undefined2 combinedValue2;\n  \n  combinedValue1 = combine_values_08004640(*(undefined *)(inputPtr + 0xb),*(undefined *)(inputPtr + 0xc));\n  combinedValue2 = combine_values_08004640(*(undefined *)(inputPtr + 0xd),*(undefined *)(inputPtr + 0xe));\n  *(undefined2 *)(outputPtr + (uint)combinedValue1 * 2) = combinedValue2;\n  *(undefined *)(inputPtr + 0x49) = 6;\n  update_checksum_and_parameters_0800076c(inputPtr);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_values_and_store_08000a4e",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "bVar1": "combinedValue1",
                "uVar2": "combinedValue2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_values_08000a7a",
            "code": "\nundefined4 update_values_08000a7a(int input_address,int output_address,undefined4 param_3,undefined4 param_4)\n\n{\n  int combined_value_1;\n  int combined_value_2;\n  uint counter;\n  uint bit_counter;\n  uint offset;\n  uint address_offset;\n  uint var_offset;\n  \n  combined_value_1 = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),param_3,param_4,\n                       param_4);\n  combined_value_2 = combine_values_08004640(*(undefined *)(input_address + 0xd),*(undefined *)(input_address + 0xe));\n  bit_counter = 0;\n  var_offset = 7;\n  for (counter = 0; (int)counter < combined_value_2; counter = counter + 1 & 0xffff) {\n    address_offset = (counter + combined_value_1) * 0x100000 >> 0x18;\n    offset = counter + combined_value_1 & 0xf;\n    if (((int)(uint)*(byte *)(input_address + var_offset + 9) >> bit_counter & 1U) == 0) {\n      *(ushort *)(output_address + address_offset * 2) = *(ushort *)(output_address + address_offset * 2) & ~(ushort)(1 << offset);\n    }\n    else {\n      *(ushort *)(output_address + address_offset * 2) = (ushort)(1 << offset) | *(ushort *)(output_address + address_offset * 2);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      var_offset = var_offset + 1 & 0xff;\n      bit_counter = 0;\n    }\n  }\n  *(undefined *)(input_address + 0x49) = 6;\n  update_checksum_and_parameters_0800076c(input_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_values_08000a7a",
                "param_1": "input_address",
                "param_2": "output_address",
                "iVar1": "combined_value_1",
                "iVar2": "combined_value_2",
                "uVar3": "counter",
                "uVar4": "bit_counter",
                "uVar5": "offset",
                "uVar6": "address_offset",
                "uVar7": "var_offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "combine_and_update_values_08000b04",
            "code": "\nint combine_and_update_values_08000b04(int memory_address,int output_address)\n\n{\n  byte value1;\n  byte value2;\n  char updated_value;\n  undefined2 combined_value;\n  uint index;\n  \n  value1 = *(byte *)(memory_address + 0xc);\n  value2 = *(byte *)(memory_address + 0xe);\n  *(undefined *)(memory_address + 0xd) = 0;\n  *(byte *)(memory_address + 0xe) = value2;\n  *(undefined *)(memory_address + 0x49) = 6;\n  for (index = 0; index < value2; index = index + 1 & 0xff) {\n    combined_value = combine_values_08004640(*(undefined *)(index * 2 + memory_address + 0x10),\n                         *(undefined *)(memory_address + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (value1 + index) * 2) = combined_value;\n  }\n  updated_value = *(char *)(memory_address + 0x49);\n  update_checksum_and_parameters_0800076c(memory_address);\n  return (int)(char)(updated_value + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "combine_and_update_values_08000b04",
                "param_1": "memory_address",
                "param_2": "output_address",
                "bVar1": "value1",
                "bVar2": "value2",
                "cVar3": "updated_value",
                "uVar4": "combined_value",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "update_values_and_return_08000b54",
            "code": "\nint update_values_and_return_08000b54(int **ptr_values,int *ptr_parameters,undefined4 param_value)\n\n{\n  byte result_byte;\n  int result_integer;\n  uint comparison_result;\n  int updated_value;\n  \n  ptr_values[0x13] = ptr_parameters;\n  *(char *)(ptr_values + 0x18) = (char)param_value;\n  if (*(byte *)((int)ptr_values + 5) < 4) {\n    result_byte = (**(code **)(**ptr_values + 8))();\n    comparison_result = (uint)result_byte;\n  }\n  if (comparison_result == 0) {\n    updated_value = 0;\n  }\n  else if ((int)comparison_result < 8) {\n    updated_value = 0;\n  }\n  else {\n    updated_value = update_values_080006b4(ptr_values);\n    *(char *)(ptr_values + 2) = (char)updated_value;\n    if (*(char *)((int)ptr_values + 9) == *(char *)(ptr_values + 1)) {\n      result_integer = check_conditions_080007f0(ptr_values);\n      if (result_integer < 1) {\n        result_integer = initialize_global_variable_08004204();\n        ptr_values[0x17] = (int *)((uint)*(ushort *)((int)ptr_values + 0x56) + result_integer);\n        *(undefined *)(ptr_values + 2) = 0;\n        switch(*(undefined *)((int)ptr_values + 10)) {\n        case 1:\n        case 2:\n          updated_value = combine_and_update_values_080008e2(ptr_values,ptr_parameters,param_value);\n          break;\n        case 3:\n        case 4:\n          updated_value = process_values_08000998(ptr_values,ptr_parameters,param_value);\n          break;\n        case 5:\n          updated_value = update_values_08000a00(ptr_values,ptr_parameters,param_value);\n          break;\n        case 6:\n          updated_value = update_values_and_store_08000a4e(ptr_values,ptr_parameters,param_value);\n          break;\n        case 0xf:\n          updated_value = update_values_08000a7a(ptr_values,ptr_parameters,param_value);\n          break;\n        case 0x10:\n          updated_value = combine_and_update_values_08000b04(ptr_values,ptr_parameters,param_value);\n        }\n      }\n      else {\n        if (result_integer != 0xff) {\n          copy_data_and_set_flag_080008cc(ptr_values,result_integer);\n          update_checksum_and_parameters_0800076c(ptr_values);\n        }\n        *(char *)(ptr_values + 2) = (char)result_integer;\n        updated_value = (int)(char)result_integer;\n      }\n    }\n    else {\n      updated_value = 0;\n    }\n  }\n  return updated_value;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "update_values_and_return_08000b54",
                "param_1": "ptr_values",
                "param_2": "ptr_parameters",
                "param_3": "param_value",
                "bVar1": "result_byte",
                "iVar2": "result_integer",
                "unaff_r5": "comparison_result",
                "iVar3": "updated_value"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_and_process_parameters_08000c4c",
            "code": "\nvoid initializeAndProcessParameters_08000c4c(void)\n\n{\n  executeInterrupt(0);\n  initializeAndProcessParameters_08000c4c(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_and_process_parameters_08000c4c",
                "execute_interrupt_080005e4": "executeInterrupt",
                "initialize_and_process_parameters_08000600": "initializeAndProcessParameters"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "update_values_08000c64",
            "code": "\nvoid update_values_08000c64(void)\n\n{\n  undefined4 param_1;\n  \n  update_values_08000c64_and_return_08000b54(&DAT_20000124,&DAT_20000004,0x10,param_1,param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "update_values_08000c64",
                "in_r3": "param_1"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag_value;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 variable3;\n  undefined4 variable4;\n  undefined4 variable5;\n  undefined4 variable6;\n  undefined4 variable7;\n  undefined4 variable8;\n  undefined4 variable9;\n  undefined4 variable10;\n  undefined4 variable11;\n  undefined4 variable12;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag_value = 1;\n  variable1 = 0x50000;\n  variable2 = 2;\n  variable3 = 0x400000;\n  variable4 = 8;\n  variable5 = 0x150;\n  variable6 = 2;\n  variable7 = 7;\n  check_and_modify_parameters_0800201c(&flag_value);\n  check_global_variables_08001f9c();\n  variable8 = 0xf;\n  variable9 = 2;\n  variable10 = 0;\n  variable11 = 0x1400;\n  variable12 = 0x1000;\n  initialize_and_delay_08002488(&variable8,5);\n  uVar1 = get_dat_value_080025e0();\n  initialize_parameter_08000ee0(uVar1 / 1000);\n  set_flag_08000f2c(4);\n  update_data_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "flag_value",
                "local_50": "variable1",
                "local_3c": "variable2",
                "local_38": "variable3",
                "local_34": "variable4",
                "local_30": "variable5",
                "local_2c": "variable6",
                "local_28": "variable7",
                "local_24": "variable8",
                "local_20": "variable9",
                "local_1c": "variable10",
                "local_18": "variable11",
                "local_14": "variable12"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  run_constant_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  initialize_system_08000d8e_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_data_08000d98",
            "code": "\nundefined4 initializeData_08000d98(uint inputValue)\n\n{\n  int result;\n  \n  result = initialize_parameter_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  updateData(0xffffffff,inputValue,0);\n  DAT_20000028 = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_data_08000d98",
                "param_1": "inputValue",
                "iVar1": "result",
                "update_data_08000e60": "updateData"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_and_update_08000de4",
            "code": "\n\n\nundefined4 initialize_and_update_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_flags(3);\n  initialize_data(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_and_update_08000de4",
                "update_flags_08000e3c": "update_flags",
                "initialize_data_08000d98": "initialize_data"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "add_da_tto_ptr_08000e18",
            "code": "\nvoid addDATtoPTR_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "add_da_tto_ptr_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_global_variable_value_08000e30",
            "code": "\nundefined4 get_global_variable_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_global_variable_value_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_flags_08000e3c",
            "code": "\n\n\nvoid updateFlags_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_flags_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_data_08000e60",
            "code": "\n\n\nvoid updateData_08000e60(uint inputIndex,uint inputValue,uint outputValue)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (inputValue & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & outputValue;\n  if ((int)inputIndex < 0) {\n    *(char *)((inputIndex & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(inputIndex + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_data_08000e60",
                "param_1": "inputIndex",
                "param_2": "inputValue",
                "param_3": "outputValue",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_parameter_08000ee0",
            "code": "\n\n\nundefined4 initializeParameter_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_parameter_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_memory_08000f0c",
            "code": "\nvoid setBitInMemory_08000f0c(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_memory_08000f0c",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "set_flag_08000f2c",
            "code": "\n\n\nvoid setFlag_08000f2c(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_main_function_08000f4e",
            "code": "\nvoid execute_main_function_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_main_function_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_data_08000f56",
            "code": "\nundefined4 initializeData_08000f56(int data)\n\n{\n  if (data != 0) {\n    *(undefined *)(data + 4) = 2;\n    clear_flag_080033c8();\n    *(undefined4 *)(data + 0x10) = 0;\n    *(undefined *)(data + 4) = 0;\n    *(undefined *)(data + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_data_08000f56",
                "param_1": "data"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **inputPointer,uint bitPosition)\n\n{\n  **inputPointer = **inputPointer & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(inputPointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "inputPointer",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_parameter_08000f8c",
            "code": "\nundefined4 updateParameter_08000f8c(uint **paramPointer)\n\n{\n  if (*(char *)((int)paramPointer + 0x35) != '\\x02') {\n    paramPointer[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramPointer + 0x35) = 5;\n  **paramPointer = **paramPointer & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_parameter_08000f8c",
                "param_1": "paramPointer",
                "param_1[0x15]": "paramPointer[21]"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registers,uint *flags)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int index1;\n  uint index2;\n  int index3;\n  \n  for (temp3 = 0; temp3 < 0x10; temp3 = temp3 + 1) {\n    temp2 = 1 << (temp3 & 0xff);\n    temp4 = temp2 & *flags;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == temp4) {\n      if ((flags[1] == 2) || (flags[1] == 0x12)) {\n        index1 = (temp3 >> 3) + 8;\n        index3 = (temp3 & 7) << 2;\n        registers[index1] = registers[index1] & ~(0xf << index3) | flags[4] << index3;\n      }\n      index2 = temp3 << 1;\n      temp1 = ~(3 << (index2 & 0xff));\n      *registers = *registers & temp1 | (flags[1] & 3) << (index2 & 0xff);\n      temp5 = flags[1];\n      if (((temp5 - 1 < 2) || (temp5 == 0x11)) || (temp5 == 0x12)) {\n        registers[2] = registers[2] & temp1 | flags[3] << (index2 & 0xff);\n        registers[1] = registers[1] & ~temp2 | ((flags[1] << 0x1b) >> 0x1f) << (temp3 & 0xff);\n      }\n      registers[3] = temp1 & registers[3] | flags[2] << (index2 & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index3 = (temp3 & 3) << 2;\n        if (registers == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registers == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registers == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registers == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registers == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registers == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registers == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registers == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registers == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registers == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((temp3 >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((temp3 >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index3) | index1 << index3;\n        temp1 = ~temp4;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((flags[1] & 0x10000) != 0) {\n          temp2 = temp4 | _DAT_40013c00;\n        }\n        temp5 = temp1 & _DAT_40013c04;\n        if ((flags[1] & 0x20000) != 0) {\n          temp5 = temp4 | _DAT_40013c04;\n        }\n        index2 = temp1 & _DAT_40013c08;\n        if ((flags[1] & 0x100000) != 0) {\n          index2 = temp4 | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = temp5;\n        _DAT_40013c08 = index2;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((flags[1] & 0x200000) != 0) {\n          temp1 = temp4 | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registers",
                "param_2": "flags",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "index1",
                "uVar7": "index2",
                "iVar8": "index3"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid set_param_value_08001198(int data_address,int new_value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(data_address + 0x18) = new_value << 0x10;\n    return;\n  }\n  *(int *)(data_address + 0x18) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "data_address",
                "param_2": "new_value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_and_perform_analysis_080011a4",
            "code": "\n\n\nvoid update_and_perform_analysis_080011a4(uint flags)\n\n{\n  if ((_DAT_40013c14 & flags) != 0) {\n    _DAT_40013c14 = flags;\n    perform_analysis();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_and_perform_analysis_080011a4",
                "param_1": "flags",
                "perform_analysis_if_set_bits_080047d0": "perform_analysis"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_value_080011c0",
            "code": "\nundefined4 updateFlagValue_080011c0(int *inputData)\n\n{\n  if (*(char *)((int)inputData + 0x3e) == '@') {\n    if (condition2 == 0) {\n      *(uint *)(*inputData + 0x10) = dataValue & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = dataValue & 0xffU | 1;\n    }\n  }\n  else if (condition4 == 0x4000) {\n    if (*(char *)((int)inputData + 0x3d) == '!') {\n      *(uint *)(*inputData + 0x10) = dataValue & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = dataValue & 0xffU | 1;\n    }\n  }\n  else if (condition2 == 0) {\n    *(uint *)(*inputData + 0x10) = (uint)(dataValue << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition2 == 1) {\n    *(uint *)(*inputData + 0x10) = (uint)(dataValue << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_value_080011c0",
                "param_1": "inputData",
                "param_1[0x14]": "condition2",
                "param_1[0x11]": "dataValue",
                "param_1[4]": "condition4"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "store_byte_from_parameter_0800124a",
            "code": "\nundefined4 storeByteFromParameter_0800124a(int *ptrToIntegerArray)\n\n{\n  *(uint *)(*ptrToIntegerArray + 0x10) = ptrToIntegerArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "store_byte_from_parameter_0800124a",
                "param_1": "ptrToIntegerArray"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flag_conditions_08001256",
            "code": "\nundefined4 processFlagConditions_08001256(uint **arguments)\n\n{\n  uint *currentValue;\n  \n  currentValue = arguments[0xb];\n  if ((*(char *)((int)arguments + 0x3d) == '\\\"') &&\n     ((flag != (uint *)0x0 || (*(char *)((int)arguments + 0x3e) != '@')))) {\n    if ((flag == (uint *)0x0) && (constant == (uint *)0xc000)) {\n      **arguments = **arguments | 0x100;\n      flag = (uint *)((int)flag + 1);\n    }\n    else {\n      if (*(short *)((int)arguments + 0x2a) == 0) {\n        **arguments = **arguments | 0x200;\n      }\n      else if (*(short *)((int)arguments + 0x2a) == 1) {\n        if (currentValue == (uint *)0xffff0000) {\n          **arguments = **arguments & 0xfffffbff;\n          currentValue = *arguments;\n          if ((currentValue[1] & 0x800) == 0) {\n            *currentValue = *currentValue | 0x200;\n          }\n          else {\n            *currentValue = *currentValue & 0xfffffbff;\n          }\n        }\n        else if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) ||\n                (specialValue3 == (uint *)0x12)) {\n          **arguments = **arguments & 0xfffffbff;\n          **arguments = **arguments | 0x200;\n        }\n        else if (arguments[0xb] == (uint *)0x2) {\n          **arguments = **arguments | 0x400;\n        }\n        else {\n          **arguments = **arguments & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)arguments + 0x2a) == 2) {\n        if (arguments[0xb] == (uint *)0x2) {\n          **arguments = **arguments | 0x400;\n        }\n        else {\n          **arguments = **arguments & 0xfffffbff;\n          **arguments = **arguments | 0x800;\n        }\n        currentValue = *arguments;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      else {\n        **arguments = **arguments | 0x400;\n        currentValue = *arguments;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      flag = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flag_conditions_08001256",
                "param_1": "arguments",
                "puVar1": "currentValue",
                "param_1[0x14]": "flag",
                "param_1[4]": "constant",
                "param_1[0xc]": "specialValue3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_value_08001420",
            "code": "\nundefined4 updateValue_08001420(int *parameters)\n\n{\n  byte *byteArrayPtr;\n  \n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    byteArrayPtr = (byte *)parameters[9];\n    parameters[9] = (int)(byteArrayPtr + 1);\n    *(uint *)(*parameters + 0x10) = (uint)*byteArrayPtr;\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_value_08001420",
                "param_1": "parameters",
                "pbVar1": "byteArrayPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_element_08001440",
            "code": "\nundefined4 updateArrayElement_08001440(int *array)\n\n{\n  undefined *nextElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    nextElement = (undefined *)currentElement;\n    currentElement = (int)(nextElement + 1);\n    *nextElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_element_08001440",
                "param_1": "array",
                "puVar1": "nextElement",
                "param_1[9]": "currentElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "parse_input_08001460",
            "code": "\nundefined4 parse_input_08001460(uint **input,uint *param_2,int param_3,uint *param_4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input + 0x3d) == '(') {\n    if (param_2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input + 0xf) = 1;\n      ptr = *input;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input = **input & 0xfffff7ff;\n      *(undefined *)((int)input + 0x3d) = 0x29;\n      *(undefined *)((int)input + 0x3e) = 0x20;\n      result = 0;\n      input[0x10] = (uint *)0x0;\n      input[9] = param_2;\n      *(short *)((int)input + 0x2a) = (short)param_3;\n      input[0xb] = param_4;\n      *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n      *(undefined *)(input + 0xf) = 0;\n      (*input)[1] = (*input)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "parse_input_08001460",
                "param_1": "input",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "initialize_parameter_080014ec",
            "code": "\nundefined4 initializeParameter_080014ec(uint **parameters,uint *inputArray,int arraySize,uint *outputArray)\n\n{\n  undefined4 returnValue;\n  uint *pointer;\n  \n  if (*(char *)((int)parameters + 0x3d) == '(') {\n    if (inputArray == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (arraySize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(parameters + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(parameters + 0xf) = 1;\n      pointer = *parameters;\n      if ((*pointer & 1) == 0) {\n        *pointer = *pointer | 1;\n      }\n      **parameters = **parameters & 0xfffff7ff;\n      *(undefined *)((int)parameters + 0x3d) = 0x2a;\n      *(undefined *)((int)parameters + 0x3e) = 0x20;\n      returnValue = 0;\n      parameters[0x10] = (uint *)0x0;\n      parameters[9] = inputArray;\n      *(short *)((int)parameters + 0x2a) = (short)arraySize;\n      parameters[0xb] = outputArray;\n      *(undefined2 *)(parameters + 10) = *(undefined2 *)((int)parameters + 0x2a);\n      *(undefined *)(parameters + 0xf) = 0;\n      (*parameters)[1] = (*parameters)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "initialize_parameter_080014ec",
                "param_1": "parameters",
                "param_2": "inputArray",
                "param_3": "arraySize",
                "param_4": "outputArray",
                "uVar1": "returnValue",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initializeData_08001578(uint **dataPointer)\n\n{\n  uint *firstDataPointer;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  firstDataPointer = *dataPointer;\n  if ((*firstDataPointer & 1) == 0) {\n    *firstDataPointer = *firstDataPointer | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "dataPointer",
                "puVar1": "firstDataPointer"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_input_080015bc",
            "code": "\nundefined4 processInput_080015bc(int *inputArray)\n\n{\n  char currentChar;\n  byte *bytePtr;\n  \n  currentChar = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePtr = (byte *)inputArray[9];\n    inputArray[9] = (int)(bytePtr + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePtr;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (currentChar == ')')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      inputArray[0xc] = 0x21;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "inputArray",
                "cVar1": "currentChar",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "update_data_0800160e",
            "code": "\nundefined4 updateData_0800160e(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      value = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "update_data_0800160e",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_input_0800165a",
            "code": "\nundefined4 processInput_0800165a(int *inputArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  uint value;\n  \n  value = *(uint *)(*inputArray + 0x18);\n  if ((value & 0x80) == 0) {\n    result = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    result = *(undefined2 *)(inputArray + 6);\n  }\n  process_input_08003880(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,result,value,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_input_0800165a",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "process_parameter_08001684",
            "code": "\nundefined4 process_parameter_08001684(uint **param)\n\n{\n  if (((param[11] == (uint *)0x4) || (param[11] == (uint *)0x8)) &&\n     (*(char *)(param_addr + 0x3d) == '(')) {\n    param[11] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)(param_addr + 0x3d) = 0x20;\n    *(undefined *)(param_addr + 0x3e) = 0;\n    initialize_and_execute;\n  }\n  else if (*(char *)(param_addr + 0x3d) == '!') {\n    param[11] = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)(param_addr + 0x3d) = 0x20;\n    *(undefined *)(param_addr + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "process_parameter_08001684",
                "param_1": "param",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]",
                "(int)param_1": "param_addr",
                "initialize_and_execute_function_080038d0()": "initialize_and_execute"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_input_0800171a",
            "code": "\nundefined4 process_input_0800171a(uint **input_data)\n\n{\n  char character;\n  uint *ptr;\n  \n  character = *(char *)((int)input_data + 0x3d);\n  ptr = ptr_array1[11];\n  if ((*(short *)(input_data + 10) == 0) && (character == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      ptr_array1[12] = (uint *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      ptr_array1[12] = (uint *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      if (ptr_array1[20] == (uint *)0x0) {\n        if (ptr_array1[19] == (uint *)0x1) {\n          (*input_data)[4] = param_1[18] & 0xff;\n          ptr_array1[20] = (uint *)((int)ptr_array1[20] + 2);\n        }\n        else {\n          (*input_data)[4] = (uint)((int)input_data[0x12] << 0x10) >> 0x18;\n          ptr_array1[20] = (uint *)((int)ptr_array1[20] + 1);\n        }\n      }\n      else if (ptr_array1[20] == (uint *)0x1) {\n        (*input_data)[4] = param_1[18] & 0xff;\n        ptr_array1[20] = (uint *)((int)ptr_array1[20] + 1);\n      }\n      else if (ptr_array1[20] == (uint *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\\\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          ptr = ptr_array1[9];\n          ptr_array1[9] = (uint *)((int)ptr + 1);\n          (*input_data)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = ptr_array1[9];\n      ptr_array1[9] = (uint *)((int)ptr + 1);\n      (*input_data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input_data",
                "cVar1": "character",
                "puVar2": "ptr",
                "param_1[0xb]": "ptr_array1[11]",
                "param_1[0xc]": "ptr_array1[12]",
                "param_1[0x14]": "ptr_array1[20]",
                "param_1[0x13]": "ptr_array1[19]",
                "(uint)param_1[0x12]": "param_1[18]",
                "param_1[9]": "ptr_array1[9]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_data_08001864",
            "code": "\nundefined4 processData_08001864(uint **data)\n\n{\n  uint *ptrValue;\n  \n  ptrValue = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) || (ptrValue == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        data[0xc] = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data",
                "puVar1": "ptrValue",
                "param_1[0xb]": "data[0xb]",
                "param_1[0xc]": "data[0xc]",
                "param_1[9]": "data[9]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_param_08001904",
            "code": "\nundefined4 processParam_08001904(uint **paramList)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)paramList + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)paramList + 0x2a) < 4) {\n      if (*(ushort *)((int)paramList + 0x2a) < 2) {\n        **paramList = **paramList & 0xfffffbff;\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        tempPtr = paramPtr9;\n        paramPtr9 = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*paramList)[4];\n        *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        paramList[0xc] = (uint *)0x0;\n        if (*(char *)((int)paramList + 0x3e) == '@') {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPtr = paramPtr9;\n      paramPtr9 = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*paramList)[4];\n      *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n      if (*(short *)((int)paramList + 0x2a) == 3) {\n        (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "paramList",
                "puVar1": "tempPtr",
                "param_1[9]": "paramPtr9"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "modify_param_080019a0",
            "code": "\nundefined4 modifyParam_080019a0(uint **param)\n\n{\n  uint *pointerVar;\n  \n  if (*(short *)((int)param + 0x2a) == 4) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    pointerVar = param[9];\n    param[9] = (uint *)((int)pointerVar + 1);\n    *(char *)pointerVar = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 3) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    pointerVar = param[9];\n    param[9] = (uint *)((int)pointerVar + 1);\n    *(char *)pointerVar = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 2) {\n    if ((int)param[0xb] - 1U < 2) {\n      **param = **param & 0xfffffbff;\n      **param = **param | 0x100;\n    }\n    else {\n      **param = **param | 0x200;\n    }\n    pointerVar = param[9];\n    param[9] = (uint *)((int)pointerVar + 1);\n    *(char *)pointerVar = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    pointerVar = param[9];\n    param[9] = (uint *)((int)pointerVar + 1);\n    *(char *)pointerVar = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    (*param)[1] = (*param)[1] & 0xfffffcff;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    param[0xc] = (uint *)0x0;\n    if (*(char *)((int)param + 0x3e) == '@') {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    pointerVar = param[9];\n    param[9] = (uint *)((int)pointerVar + 1);\n    *(char *)pointerVar = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "modify_param_080019a0",
                "param_1": "param",
                "puVar1": "pointerVar",
                "param_1[9]": "param[9]",
                "param_1[0xb]": "param[0xb]",
                "param_1[0xc]": "param[0xc]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_08001ab0",
            "code": "\nvoid initialize_08001ab0(uint **parameters)\n\n{\n  int index;\n  uint *pointer_1;\n  uint *pointer_2;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  pointer_2 = *parameters;\n  if ((pointer_2[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((pointer_2[5] & 0x40) != 0) {\n        pointer_1 = parameters[9];\n        parameters[9] = (uint *)((int)pointer_1 + 1);\n        *(char *)pointer_1 = (char)pointer_2[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_08001aac(parameters);\n    }\n    else {\n      if ((pointer_2[5] & 0x40) != 0) {\n        pointer_1 = parameters[9];\n        parameters[9] = (uint *)((int)pointer_1 + 1);\n        *(char *)pointer_1 = (char)pointer_2[4];\n      }\n      initialize_08001ab0_if_data_not_set_08003900(parameters);\n    }\n  }\n  else {\n    pointer_2[1] = pointer_2[1] & 0xfffff7ff;\n    if (*(char *)((int)parameters[0xd] + 0x35) == '\\x01') {\n      parameters[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      index = update_parameter_08000f8c(parameters[0xe]);\n      if (index != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          pointer_2 = parameters[9];\n          parameters[9] = (uint *)((int)pointer_2 + 1);\n          *(char *)pointer_2 = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xe][0x14])();\n      }\n    }\n    else {\n      parameters[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      index = update_parameter_08000f8c(parameters[0xd]);\n      if (index != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_08001ab0_and_execute_function_080038d0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_08001ab0",
                "param_1": "parameters",
                "iVar1": "index",
                "puVar2": "pointer_1",
                "puVar3": "pointer_2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_08001bfc",
            "code": "\nundefined4 processParam_08001bfc(uint **param)\n\n{\n  char character;\n  uint *ptr1;\n  uint *ptr2;\n  \n  character = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptr1 = *param;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = param[9];\n      param[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptr1 = param[9];\n      param[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      initialize_and_execute_function_080038d0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    initialize_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_08001bfc",
                "param_1": "param",
                "cVar1": "character",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_flags_08001d00",
            "code": "\nvoid process_flags_08001d00(int *flags)\n\n{\n  int ptr_flags;\n  uint flag_conditions;\n  uint flag_values;\n  uint input_conditions;\n  \n  ptr_flags = *flags;\n  input_conditions = *(uint *)(ptr_flags + 0x18);\n  flag_conditions = *(uint *)(ptr_flags + 0x14);\n  flag_values = *(uint *)(ptr_flags + 4);\n  if ((*(char *)((int)flags + 0x3e) == '\\x10') || (*(char *)((int)flags + 0x3e) == '@')) {\n    if (((flag_conditions & 0x10001) == 0) || ((flag_values & 0x200) == 0)) {\n      if (((flag_conditions & 0x10008) == 0) || ((flag_values & 0x200) == 0)) {\n        if (((flag_conditions & 0x10002) != 0) && ((flag_values & 0x200) != 0)) {\n          process_flag_conditions_08001256(flags);\n        }\n      }\n      else {\n        store_byte_from_parameter_0800124a(flags);\n      }\n    }\n    else {\n      update_flag_value_080011c0(flags);\n    }\n    if ((input_conditions & 0x100004) == 0) {\n      if ((((flag_conditions & 0x10040) != 0) && ((flag_values & 0x400) != 0)) && ((flag_conditions & 0x10004) == 0)) {\n        process_param_08001904(flags);\n        return;\n      }\n      if (((flag_conditions & 0x10004) != 0) && ((flag_values & 0x200) != 0)) {\n        modify_param_080019a0(flags);\n        return;\n      }\n    }\n    else {\n      if ((((flag_conditions & 0x10080) != 0) && ((flag_values & 0x400) != 0)) && ((flag_conditions & 0x10004) == 0)) {\n        process_input_0800171a(flags);\n        return;\n      }\n      if (((flag_conditions & 0x10004) != 0) && ((flag_values & 0x200) != 0)) {\n        process_data_08001864(flags);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_conditions & 0x10002) != 0) && ((flag_values & 0x200) != 0)) {\n      process_input_0800165a();\n      return;\n    }\n    if (((flag_conditions & 0x10010) != 0) && ((flag_values & 0x200) != 0)) {\n      process_param_08001bfc(flags);\n      return;\n    }\n    if ((input_conditions & 0x100004) == 0) {\n      if ((((flag_conditions & 0x10040) != 0) && ((flag_values & 0x400) != 0)) && ((flag_conditions & 0x10004) == 0)) {\n        update_data_0800160e(flags);\n        return;\n      }\n      if (((flag_conditions & 0x10004) != 0) && ((flag_values & 0x200) != 0)) {\n        update_array_element_08001440(flags);\n      }\n    }\n    else {\n      if ((((flag_conditions & 0x10080) != 0) && ((flag_values & 0x400) != 0)) && ((flag_conditions & 0x10004) == 0)) {\n        process_input_080015bc(flags);\n        return;\n      }\n      if (((flag_conditions & 0x10004) != 0) && ((flag_values & 0x200) != 0)) {\n        update_value_08001420(flags);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_flags_08001d00",
                "param_1": "flags",
                "iVar1": "ptr_flags",
                "uVar2": "flag_conditions",
                "uVar3": "flag_values",
                "uVar4": "input_conditions"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "verify_and_process_parameters_08001e68",
            "code": "\nvoid verify_and_process_parameters_08001e68(uint **parameters)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *parameters;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      process_parameter_08001684(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    initialize_08001ab0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "verify_and_process_parameters_08001e68",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_global_variables_08001f9c",
            "code": "\n\n\nundefined4 check_global_variables_08001f9c(void)\n\n{\n  int initial_value;\n  int current_value;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initial_value = get_global_variable_value_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initial_value = get_global_variable_value_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_value = get_global_variable_value_08000e30();\n      } while ((uint)(current_value - initial_value) < 0x3e9);\n      return 3;\n    }\n    current_value = get_global_variable_value_08000e30();\n  } while ((uint)(current_value - initial_value) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_global_variables_08001f9c",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_modify_parameters_0800201c",
            "code": "\n\n\nundefined4 checkAndModifyParameters_0800201c(uint *params)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 result;\n  bool isVar4True;\n  \n  if (params == (uint *)0x0) {\n    return 1;\n  }\n  if ((*params & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (params[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (params[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (params[1] == 0) {\n        initialValue = get_global_variable_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentValue = get_global_variable_value_08000e30();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = get_global_variable_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentValue = get_global_variable_value_08000e30();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*params & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (params[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | params[4] << 3;\n    }\n    else if (params[3] == 0) {\n      _DAT_42470000 = 0;\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | params[4] << 3;\n    }\n  }\n  if ((*params & 8) != 0) {\n    if (params[5] == 0) {\n      _DAT_42470e80 = 0;\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*params & 4) != 0) {\n    isVar4True = (_DAT_40023840 & 0x10000000) == 0;\n    if (isVar4True) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (params[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (params[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (params[2] == 0) {\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = get_global_variable_value_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentValue = get_global_variable_value_08000e30();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isVar4True) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (params[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (params[6] == 2) {\n    _DAT_42470060 = 0;\n    initialValue = get_global_variable_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             params[7] | params[8] | params[9] << 6 | ((params[10] >> 1) - 1) * 0x10000 |\n             params[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        initialValue = get_global_variable_value_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_global_variable_value_08000e30();\n        } while ((uint)(currentValue - initialValue) < 3);\n        return 3;\n      }\n      currentValue = get_global_variable_value_08000e30();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    initialValue = get_global_variable_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_global_variable_value_08000e30();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_modify_parameters_0800201c",
                "param_1": "params",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "isVar4True"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_time_delay_080023b4",
            "code": "\n\n\nuint calculateTimeDelay_080023b4(void)\n\n{\n  undefined4 inputParameter;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = process_parameters_080002d0(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,inputParameter);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = process_parameters_080002d0(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,inputParameter);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_time_delay_080023b4",
                "in_r3": "inputParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_and_delay_08002488",
            "code": "\n\n\nundefined4 initialize_and_delay_08002488(uint *settings,uint num_settings)\n\n{\n  int start_time;\n  int current_time;\n  uint time_delay;\n  \n  if (settings == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < num_settings) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)num_settings);\n    if (num_settings != (num_settings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    if ((*settings & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*settings & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | settings[2];\n  }\n  if ((*settings & 1) != 0) {\n    time_delay = settings[1];\n    if (time_delay == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (time_delay - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = time_delay | _DAT_40023808 & 0xfffffffc;\n    start_time = get_global_value();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == settings[1] * 4) break;\n      current_time = get_global_value();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (num_settings < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)num_settings);\n    if (num_settings != (num_settings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | settings[3];\n  }\n  if ((*settings & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | settings[4] << 3;\n  }\n  time_delay = calculate_delay();\n  DAT_2000002c = time_delay >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_data(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_and_delay_08002488",
                "param_1": "settings",
                "param_2": "num_settings",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "time_delay",
                "get_global_variable_value_08000e30": "get_global_value",
                "calculate_time_delay_080023b4": "calculate_delay",
                "initialize_data_08000d98": "initialize_data"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_dat_value_080025e0",
            "code": "\nundefined4 get_dat_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_dat_value_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_shifted_dat_value_080025ec",
            "code": "\n\n\nuint get_shifted_dat_value_080025ec(void)\n\n{\n  uint datValue;\n  \n  datValue = get_dat_value();\n  return datValue >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_shifted_dat_value_080025ec",
                "uVar1": "datValue",
                "get_dat_value_080025e0": "get_dat_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_data_0800260c",
            "code": "\n\n\nuint get_shifted_data_0800260c(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_data_0800260c",
                "uVar1": "data_value",
                "get_dat_value_080025e0": "get_data_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "execute_action_0800262c",
            "code": "\n\n\nvoid execute_action_0800262c(int *action_data)\n\n{\n  if (((*(uint *)(*action_data + 0xc) & 0x100) != 0) && ((*(uint *)(*action_data + 8) & 0x1000) != 0)) {\n    execute_callback_08003594();\n    *(uint *)(*action_data + 0xc) = *(uint *)(*action_data + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*action_data + 0xc) & 0x200) != 0) && ((*(uint *)(*action_data + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(action_data);\n    *(uint *)(*action_data + 0xc) = *(uint *)(*action_data + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)action_data + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "execute_action_0800262c",
                "param_1": "action_data"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "clear_bits_and_update_flags_0800268e",
            "code": "\nvoid clearBitsAndUpdateFlags_0800268e(uint **inputArray)\n\n{\n  uint *firstElement;\n  \n  *(undefined *)((int)inputArray + 0x39) = 2;\n  firstElement = *inputArray;\n  if ((firstElement[8] & 0x1111) == 0) {\n    if ((firstElement[8] & 0x444) == 0) {\n      *firstElement = *firstElement & 0xfffffffe;\n    }\n  }\n  clearBitsBasedOnValue(inputArray);\n  *(undefined *)((int)inputArray + 0x39) = 0;\n  *(undefined *)(inputArray + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "clear_bits_and_update_flags_0800268e",
                "param_1": "inputArray",
                "puVar1": "firstElement",
                "clear_bits_based_on_value_0800340c": "clearBitsBasedOnValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid processFlags_080026ce(int *flags)\n\n{\n  int ptr;\n  \n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 2) != 0) && ((*(uint *)(ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 6) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      executeFlagFunction();\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 4) != 0) && ((*(uint *)(ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 6) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      executeFlagFunction(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 8) != 0) && ((*(uint *)(ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 6) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      executeFlagFunction(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x10) != 0) && ((*(uint *)(ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 6) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      executeFlagFunction(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 1) != 0) && ((*(uint *)(ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n    executeSubtraction(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x80) != 0) && ((*(uint *)(ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n    FUNC_0800293e(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x40) != 0) && ((*(uint *)(ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n    FUNC_080026cc(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x20) != 0) && ((*(uint *)(ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n    FUNC_0800293c(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flags",
                "iVar1": "ptr",
                "execute_function_if_flag_set_08003754": "executeFlagFunction",
                "execute_subtraction_0800376e": "executeSubtraction"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bitwise_flags_08002848",
            "code": "\nvoid updateBitwiseFlags_08002848(int pointerToData,uint bitPosition,int newValue)\n\n{\n  *(uint *)(pointerToData + 0x20) = *(uint *)(pointerToData + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(pointerToData + 0x20) = *(uint *)(pointerToData + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bitwise_flags_08002848",
                "param_1": "pointerToData",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_flags_and_set_bits_08002864",
            "code": "\nundefined4 update_flags_and_set_bits_08002864(uint **bits_ptr,undefined4 flag_value)\n\n{\n  bool is_special_address;\n  uint *ptr_value;\n  \n  update_bitwise_flags_08002848(*bits_ptr,flag_value,0);\n  ptr_value = *bits_ptr;\n  if (ptr_value == (uint *)0x40010000) {\n    is_special_address = true;\n  }\n  else if (ptr_value == (uint *)0x40010400) {\n    is_special_address = true;\n  }\n  else {\n    is_special_address = false;\n  }\n  if (((is_special_address) && ((ptr_value[8] & 0x1111) == 0)) && ((ptr_value[8] & 0x444) == 0)) {\n    ptr_value[0x11] = ptr_value[0x11] & 0xffff7fff;\n  }\n  ptr_value = *bits_ptr;\n  if (((ptr_value[8] & 0x1111) == 0) && ((ptr_value[8] & 0x444) == 0)) {\n    *ptr_value = *ptr_value & 0xfffffffe;\n  }\n  *(undefined *)((int)bits_ptr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_flags_and_set_bits_08002864",
                "param_1": "bits_ptr",
                "param_2": "flag_value",
                "bVar1": "is_special_address",
                "puVar2": "ptr_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bits_080028d4",
            "code": "\nvoid updateBits_080028d4(int baseAddress,uint offset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (offset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (offset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bits_080028d4",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_and_check_bits_080028f0",
            "code": "\nundefined4 updateAndCheckBits_080028f0(uint **bitArray,undefined4 bitValue)\n\n{\n  uint *ptrBitArray;\n  \n  update_bits_080028d4(*bitArray,bitValue,0);\n  ptrBitArray = *bitArray;\n  if (((ptrBitArray[8] & 0x1111) == 0) && ((ptrBitArray[8] & 0x444) == 0)) {\n    ptrBitArray[0x11] = ptrBitArray[0x11] & 0xffff7fff;\n  }\n  ptrBitArray = *bitArray;\n  if (((ptrBitArray[8] & 0x1111) == 0) && ((ptrBitArray[8] & 0x444) == 0)) {\n    *ptrBitArray = *ptrBitArray & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_and_check_bits_080028f0",
                "param_1": "bitArray",
                "param_2": "bitValue",
                "puVar1": "ptrBitArray"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "update_data_fields_08002940",
            "code": "\nvoid updateDataFields_08002940(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "update_data_fields_08002940",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 processData_0800295c(int *inputData)\n\n{\n  short remainingIterations;\n  byte *currentByte;\n  \n  if (*(char *)((int)inputData + 0x39) != '!') {\n    return 2;\n  }\n  if (flag == 0x1000) {\n    *(uint *)(*inputData + 4) = *(ushort *)bytePointer & 0x1ff;\n    if (isFlagged == 0) {\n      bytePointer = bytePointer + 2;\n    }\n    else {\n      bytePointer = bytePointer + 1;\n    }\n  }\n  else {\n    currentByte = (byte *)bytePointer;\n    bytePointer = (int)(currentByte + 1);\n    *(uint *)(*inputData + 4) = (uint)*currentByte;\n  }\n  remainingIterations = *(short *)((int)inputData + 0x26) + -1;\n  *(short *)((int)inputData + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffff7f;\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "inputData",
                "sVar1": "remainingIterations",
                "pbVar2": "currentByte",
                "param_1[2]": "flag",
                "param_1[4]": "isFlagged",
                "param_1[8]": "bytePointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_new_values_080029c8",
            "code": "\nvoid calculateNewValues_080029c8(int *inputArray)\n\n{\n  int firstValue;\n  int secondValue;\n  int thirdValue;\n  int fourthValue;\n  int fifthValue;\n  int sixthValue;\n  int seventhValue;\n  int eighthValue;\n  int ninthValue;\n  int addressValue;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       *(uint *)(*inputArray + 0xc) & 0xffff69f3 | inputArray[2] | inputArray[4] | inputArray[5] | inputArray[7];\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  if (inputArray[7] == 0x8000) {\n    addressValue = *inputArray;\n    if ((addressValue != 0x40011000) && (addressValue != 0x40011400)) {\n      firstValue = get_shifted_dat_value_080025ec();\n      sixthValue = inputArray[1];\n      secondValue = get_shifted_dat_value_080025ec();\n      seventhValue = inputArray[1];\n      thirdValue = get_shifted_dat_value_080025ec();\n      eighthValue = inputArray[1];\n      fourthValue = get_shifted_dat_value_080025ec();\n      ninthValue = inputArray[1];\n      fifthValue = get_shifted_dat_value_080025ec();\n      *(uint *)(addressValue + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(fourthValue * 0x19) / (uint)(ninthValue << 1) +\n                          (int)(((ulonglong)(uint)(fifthValue * 0x19) /\n                                (ulonglong)(uint)(inputArray[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(secondValue * 0x19) / (uint)(seventhValue << 1) +\n             (int)(((ulonglong)(uint)(thirdValue * 0x19) / (ulonglong)(uint)(eighthValue << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(sixthValue << 1)) / 100) * 0x10;\n      return;\n    }\n    firstValue = get_shifted_data_0800260c();\n    sixthValue = inputArray[1];\n    secondValue = get_shifted_data_0800260c();\n    seventhValue = inputArray[1];\n    thirdValue = get_shifted_data_0800260c();\n    eighthValue = inputArray[1];\n    fourthValue = get_shifted_data_0800260c();\n    ninthValue = inputArray[1];\n    fifthValue = get_shifted_data_0800260c();\n    *(uint *)(addressValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(fourthValue * 0x19) / (uint)(ninthValue << 1) +\n                        (int)(((ulonglong)(uint)(fifthValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(secondValue * 0x19) / (uint)(seventhValue << 1) +\n           (int)(((ulonglong)(uint)(thirdValue * 0x19) / (ulonglong)(uint)(eighthValue << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(sixthValue << 1)) / 100) * 0x10;\n    return;\n  }\n  addressValue = *inputArray;\n  if ((addressValue != 0x40011000) && (addressValue != 0x40011400)) {\n    firstValue = get_shifted_dat_value_080025ec();\n    sixthValue = inputArray[1];\n    secondValue = get_shifted_dat_value_080025ec();\n    seventhValue = inputArray[1];\n    thirdValue = get_shifted_dat_value_080025ec();\n    eighthValue = inputArray[1];\n    fourthValue = get_shifted_dat_value_080025ec();\n    ninthValue = inputArray[1];\n    fifthValue = get_shifted_dat_value_080025ec();\n    *(uint *)(addressValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(fourthValue * 0x19) / (uint)(ninthValue << 2) +\n                        (int)(((ulonglong)(uint)(fifthValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(secondValue * 0x19) / (uint)(seventhValue << 2) +\n           (int)(((ulonglong)(uint)(thirdValue * 0x19) / (ulonglong)(uint)(eighthValue << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(sixthValue << 2)) / 100) * 0x10;\n    return;\n  }\n  firstValue = get_shifted_data_0800260c();\n  sixthValue = inputArray[1];\n  secondValue = get_shifted_data_0800260c();\n  seventhValue = inputArray[1];\n  thirdValue = get_shifted_data_0800260c();\n  eighthValue = inputArray[1];\n  fourthValue = get_shifted_data_0800260c();\n  ninthValue = inputArray[1];\n  fifthValue = get_shifted_data_0800260c();\n  *(uint *)(addressValue + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(fourthValue * 0x19) / (uint)(ninthValue << 2) +\n                      (int)(((ulonglong)(uint)(fifthValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(secondValue * 0x19) / (uint)(seventhValue << 2) +\n         (int)(((ulonglong)(uint)(thirdValue * 0x19) / (ulonglong)(uint)(eighthValue << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(sixthValue << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_new_values_080029c8",
                "param_1": "inputArray",
                "iVar1": "firstValue",
                "iVar2": "secondValue",
                "iVar3": "thirdValue",
                "iVar4": "fourthValue",
                "iVar5": "fifthValue",
                "iVar6": "sixthValue",
                "iVar7": "seventhValue",
                "iVar8": "eighthValue",
                "iVar9": "ninthValue",
                "iVar10": "addressValue"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "validate_parameters_08002d0c",
            "code": "\nundefined4 validateParameters_08002d0c(uint **ptr_array,uint mask_value,uint comparison_result,int value_to_compare,uint max_difference)\n\n{\n  int global_value;\n  \n  do {\n    if (((mask_value & ~**ptr_array) == 0) != comparison_result) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (global_value = get_global_variable_value_08000e30(), (uint)(global_value - value_to_compare) <= max_difference))));\n  (*ptr_array)[3] = (*ptr_array)[3] & 0xfffffe5f;\n  (*ptr_array)[5] = (*ptr_array)[5] & 0xfffffffe;\n  *(undefined *)((int)ptr_array + 0x39) = 0x20;\n  *(undefined *)((int)ptr_array + 0x3a) = 0x20;\n  *(undefined *)(ptr_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "validate_parameters_08002d0c",
                "param_1": "ptr_array",
                "param_2": "mask_value",
                "param_3": "comparison_result",
                "param_4": "value_to_compare",
                "param_5": "max_difference",
                "iVar1": "global_value"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_data_structure_08002d72",
            "code": "\nundefined4 initialize_data_structure_08002d72(int *data_structure)\n\n{\n  if (data_structure != (int *)0x0) {\n    if (*(char *)((int)data_structure + 0x39) == '\\0') {\n      *(undefined *)(data_structure + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)data_structure + 0x39) = 0x24;\n    *(uint *)(*data_structure + 0xc) = *(uint *)(*data_structure + 0xc) & 0xffffdfff;\n    calculate_new_values;\n    *(uint *)(*data_structure + 0x10) = *(uint *)(*data_structure + 0x10) & 0xffffb7ff;\n    *(uint *)(*data_structure + 0x14) = *(uint *)(*data_structure + 0x14) & 0xffffffd5;\n    *(uint *)(*data_structure + 0xc) = *(uint *)(*data_structure + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data_structure + 0x39) = 0x20;\n    *(undefined *)((int)data_structure + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_data_structure_08002d72",
                "param_1": "data_structure",
                "calculate_new_values_080029c8(param_1)": "calculate_new_values",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *ptrData,ushort *ptrValues,int count,undefined4 param)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)ptrData + 0x39) == ' ') {\n    if (ptrValues == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (count == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(ptrData + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(ptrData + 0xe) = 1;\n      ptrData[0xf] = 0;\n      *(undefined *)((int)ptrData + 0x39) = 0x21;\n      returnValue = get_global_variable_value_08000e30();\n      *(short *)(ptrData + 9) = (short)count;\n      *(short *)((int)ptrData + 0x26) = (short)count;\n      while (*(short *)((int)ptrData + 0x26) != 0) {\n        *(short *)((int)ptrData + 0x26) = *(short *)((int)ptrData + 0x26) + -1;\n        if (ptrData[2] == 0x1000) {\n          result = validate_parameters_08002d0c(ptrData,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*ptrData + 4) = *ptrValues & 0x1ff;\n          if (ptrData[4] == 0) {\n            ptrValues = ptrValues + 1;\n          }\n          else {\n            ptrValues = (ushort *)((int)ptrValues + 1);\n          }\n        }\n        else {\n          result = validate_parameters_08002d0c(ptrData,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*ptrData + 4) = (uint)*(byte *)ptrValues;\n          ptrValues = (ushort *)((int)ptrValues + 1);\n        }\n      }\n      result = validate_parameters_08002d0c(ptrData,0x40,0,returnValue,param);\n      if (result == 0) {\n        *(undefined *)((int)ptrData + 0x39) = 0x20;\n        *(undefined *)(ptrData + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "ptrData",
                "param_2": "ptrValues",
                "param_3": "count",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_inputs_08002eb2",
            "code": "\nundefined4 validate_inputs_08002eb2(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array_index_8 = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    input_array_index_0xf = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_inputs_08002eb2",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "input_array_index_8",
                "param_1[0xf]": "input_array_index_0xf"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "initialize_data_08002efa",
            "code": "\nundefined4 initializeData_08002efa(int *data_ptr,int value1,int value2)\n\n{\n  if (*(char *)((int)data_ptr + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    data_ptr[10] = value1;\n    *(short *)(data_ptr + 0xb) = (short)value2;\n    *(short *)((int)data_ptr + 0x2e) = (short)value2;\n    data_ptr[15] = 0;\n    *(undefined *)((int)data_ptr + 0x3a) = 0x22;\n    *(undefined *)(data_ptr + 0xe) = 0;\n    *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) | 1;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "initialize_data_08002efa",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "data_ptr[10]",
                "param_1[0xf]": "data_ptr[15]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "validate_and_execute_data_08002f4c",
            "code": "\nundefined4 validate_and_execute_data_08002f4c(int *data_ptr)\n\n{\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)data_ptr + 0x39) = 0x20;\n  execute_data_validation_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "validate_and_execute_data_08002f4c",
                "param_1": "data_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *binaryData)\n\n{\n  byte *bytePtr;\n  short remainingIterations;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)binaryData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (binaryData[2] == 0x1000) {\n    if (binaryData[4] == 0) {\n      *(ushort *)binaryData[10] = (ushort)((uint)(*(int *)(*binaryData + 4) << 0x17) >> 0x17);\n      binaryData[10] = binaryData[10] + 2;\n    }\n    else {\n      *(ushort *)binaryData[10] = (ushort)*(undefined4 *)(*binaryData + 4) & 0xff;\n      binaryData[10] = binaryData[10] + 1;\n    }\n  }\n  else if (binaryData[4] == 0) {\n    undefinedPtr = (undefined *)binaryData[10];\n    binaryData[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*binaryData + 4);\n  }\n  else {\n    bytePtr = (byte *)binaryData[10];\n    binaryData[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*binaryData + 4) & 0x7f;\n  }\n  remainingIterations = *(short *)((int)binaryData + 0x2e) + -1;\n  *(short *)((int)binaryData + 0x2e) = remainingIterations;\n  if (remainingIterations != 0) {\n    return 0;\n  }\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xfffffedf;\n  *(uint *)(*binaryData + 0x14) = *(uint *)(*binaryData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)binaryData + 0x3a) = 0x20;\n  execute_function_based_on_index_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "binaryData",
                "pbVar1": "bytePtr",
                "sVar2": "remainingIterations",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **data)\n\n{\n  int result;\n  uint value2;\n  uint *ptr;\n  uint value4;\n  uint value5;\n  \n  ptr = *data;\n  value5 = *ptr;\n  value2 = ptr[3];\n  if ((((value5 & 0xf) == 0) && ((value5 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    process_binary_data_08002f66(data);\n    return;\n  }\n  if (((value5 & 0xf) == 0) || ((value4 = ptr[5] & 1, value4 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value5 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      process_data_08002ffc_0800295c(data);\n      return;\n    }\n    if (((value5 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      validate_and_execute_data_08002f4c(data);\n    }\n  }\n  else {\n    if (((value5 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value5 & 4) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value5 & 2) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value5 & 8) != 0) && (value4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value5 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        process_binary_data_08002f66(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08003f94(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_data_fields_08002940(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      data[0xd][0x14] = (uint)&LAB_0800311c_1;\n      result = update_parameter_08000f8c(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "value4",
                "uVar5": "value5"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint getBitValue_08003138(uint value,int offset)\n\n{\n  return *(uint *)(offset + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "value",
                "param_2": "offset"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid setBitInArray_0800314e(uint bitIndex,int arrayPtr)\n\n{\n  uint byteOffset;\n  \n  byteOffset = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(arrayPtr + byteOffset * 4) = *(uint *)(arrayPtr + byteOffset * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bitIndex",
                "param_2": "arrayPtr",
                "uVar1": "byteOffset"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_array_element_0800316c",
            "code": "\nvoid updateArrayElement_0800316c(uint input,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (input << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) & ~(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_array_element_0800316c",
                "param_1": "input",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 inputIndex)\n\n{\n  switch(inputIndex) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "inputIndex"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_permission_080031fc",
            "code": "\n\n\nundefined4 setMemoryPermission_080031fc(undefined4 permissionLevel)\n\n{\n  undefined4 baseAddress;\n  \n  switch(permissionLevel) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    baseAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    baseAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    baseAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    baseAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    baseAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    baseAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    baseAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    baseAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    baseAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    baseAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    baseAddress = 0x40022800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_permission_080031fc",
                "param_1": "permissionLevel",
                "uVar1": "baseAddress"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_value_and_return_08003380",
            "code": "\nundefined4 check_value_and_return_08003380(undefined4 input_value,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  int result;\n  \n  result = find_value_or_negative_0800354a(input_value,&DAT_08005a18,data_2,data_3,data_3);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_value_and_return_08003380",
                "param_1": "input_value",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "find_value_and_get_result_0800339c",
            "code": "\nundefined4 find_value_and_get_result_0800339c(undefined4 input_value,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = find_value_or_negative_0800354a(input_value,&DAT_08005a3c,arg3,arg4,arg4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "find_value_and_get_result_0800339c",
                "param_1": "input_value",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_flag_080033c8",
            "code": "\n\n\nvoid clearFlag_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_flag_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "initialize_data_if_param_valid_080033d8",
            "code": "\nvoid initialize_data_if_param_valid_080033d8(undefined4 param)\n\n{\n  int result;\n  int data_array [5];\n  \n  data_array[0] = check_param_080034f4(param,&DAT_08005a18);\n  if ((data_array[0] != 0) && ((result = check_value_and_return_08003380(param), result == 0 || (result == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(data_array,result);\n    initialize_data_08000f56(data_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "initialize_data_if_param_valid_080033d8",
                "param_1": "param",
                "iVar1": "result",
                "local_1c": "data_array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "clear_bits_based_on_value_0800340c",
            "code": "\nvoid clearBitsBasedOnValue_0800340c(void)\n\n{\n  clearBitsAccordingToValue();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "clear_bits_based_on_value_0800340c",
                "clear_bits_according_to_value_080035fc": "clearBitsAccordingToValue"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_param_08003414",
            "code": "\nvoid processParam_08003414(undefined4 inputParam)\n\n{\n  int valueResult;\n  uint valueOrNegative;\n  int paramValues [16];\n  \n  paramValues[0] = check_param_080034f4(inputParam,&DAT_08005a3c);\n  if ((paramValues[0] != 0) &&\n     ((((valueResult = find_value_and_get_result_0800339c(inputParam), valueResult == 0 || (valueResult == 4)) || (valueResult == 8)) ||\n      ((valueResult == 0xc || (valueResult == 0x18)))))) {\n    valueOrNegative = find_value_or_negative_0800354a(inputParam,&DAT_08005a3c);\n    if ((valueOrNegative & 0x100000) == 0) {\n      update_flags_and_set_bits_08002864(paramValues,valueResult);\n    }\n    else {\n      update_and_check_bits_080028f0(paramValues,valueResult);\n    }\n    clear_bits_and_update_flags_0800268e(paramValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_param_08003414",
                "param_1": "inputParam",
                "iVar1": "valueResult",
                "uVar2": "valueOrNegative",
                "local_4c": "paramValues"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_global_variable_0800346c",
            "code": "\nvoid initialize_global_variable_0800346c(void)\n\n{\n  read_global_variable();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_global_variable_0800346c",
                "get_global_variable_value_08000e30": "read_global_variable"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_and_execute_08003476",
            "code": "\nvoid initialize_and_execute_08003476(void)\n\n{\n  initialize_data_structures();\n  execute_main_function();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_and_execute_08003476",
                "add_da_tto_ptr_08000e18": "initialize_data_structures",
                "execute_main_function_08000f4e": "execute_main_function"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "set_memory_permission_and_update_registers_08003486",
            "code": "\nvoid set_memory_permission_and_update_registers_08003486(uint input,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 permission;\n  uint bit_mask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 constant2;\n  \n  permission = set_memory_permission_080031fc((input << 0x18) >> 0x1c);\n  bit_mask = 1 << (input & 0xf) & 0xffff;\n  constant2 = 2;\n  value1 = arg1;\n  value2 = arg2;\n  update_registers_08000fb4(permission,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "set_memory_permission_and_update_registers_08003486",
                "param_1": "input",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "permission",
                "local_24": "bit_mask",
                "local_20": "value1",
                "local_1c": "value2",
                "local_18": "constant2"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "update_param_value_080034b6",
            "code": "\nvoid updateParamValue_080034b6(undefined4 paramA,undefined2 paramB,int paramC,undefined4 paramD)\n\n{\n  if (paramC == 0) {\n    setParamValue(paramA,paramB,0,paramD,paramD);\n    return;\n  }\n  setParamValue(paramA,paramB,1,paramD,paramD);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "update_param_value_080034b6",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "paramC",
                "param_4": "paramD",
                "set_param_value_08001198": "setParamValue"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initialize_system_080034ce(void)\n\n{\n  initialize_and_update();\n  initialize_system_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "initialize_and_update_08000de4": "initialize_and_update",
                "initialize_system_08000c8c": "initialize_system"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_in_array_080034da",
            "code": "\nundefined4 find_value_in_array_080034da(int value,short *next_element)\n\n{\n  while( true ) {\n    if (*next_element == -1) {\n      return 0;\n    }\n    if (*next_element == value) break;\n    next_element = next_element + 6;\n  }\n  return *(undefined4 *)(next_element + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value",
                "param_2": "next_element"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_param_080034f4",
            "code": "\nundefined4 check_param_080034f4(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value != -1) {\n    result = find_value_in_array_080034da();\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_param_080034f4",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_index_08003506",
            "code": "\nint find_value_index_08003506(int target_value,short *value_array)\n\n{\n  while( true ) {\n    if (*(int *)(value_array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(value_array + 2) == target_value) value_found;\n    value_array = value_array + 6;\n  }\n  return (int)*value_array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_index_08003506",
                "param_1": "target_value",
                "param_2": "value_array",
                "break": "value_found"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_index_or_fail_0800351e",
            "code": "\nundefined4 find_value_index_or_fail_0800351e(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value != 0) {\n    value_index = find_value_index_08003506();\n    return value_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_index_or_fail_0800351e",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_in_array_0800352e",
            "code": "\nundefined4 find_value_in_array_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_value_or_negative_0800354a",
            "code": "\nundefined4 find_value_or_negative_0800354a(int input_value)\n\n{\n  undefined4 result_value;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result_value = find_value_in_array_0800352e();\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_value_or_negative_0800354a",
                "param_1": "input_value",
                "uVar1": "result_value"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_0800355e",
            "code": "\nundefined4 find_value_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_0800355e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_non_zero_08003582",
            "code": "\nint compareAndReturnNonZero_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (callbackType *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594",
                "code": "callbackType"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_memory_080035bc",
            "code": "\n\n\nvoid initializeMemory_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_memory_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "clear_bits_according_to_value_080035fc",
            "code": "\n\n\nvoid clearBitsAccordingToValue_080035fc(int *value)\n\n{\n  if (*value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "clear_bits_according_to_value_080035fc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input)\n\n{\n  result input + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input",
                "return": "result"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_function_if_flag_set_08003754",
            "code": "\nvoid executeFunctionIfFlagSet_08003754(int functionArgument)\n\n{\n  int pointerToFunction;\n  \n  pointerToFunction = getFunctionPointer();\n  if ((*(code **)(pointerToFunction + 0x48) != (code *)0x0) && (*(character *)(functionArgument + 0x18) == '\\x01')) {\n    (**(code **)(pointerToFunction + 0x48))(pointerToFunction,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_function_if_flag_set_08003754",
                "param_1": "functionArgument",
                "iVar1": "pointerToFunction",
                "subtract_four_08003750": "getFunctionPointer",
                "char": "character"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subtraction_0800376e",
            "code": "\nvoid executeSubtraction_0800376e(void)\n\n{\n  int result;\n  \n  result = getSubtractor();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subtraction_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "getSubtractor"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "process_flags_0800377c",
            "code": "\nvoid process_flags_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "process_flags_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_input_08003880",
            "code": "\nvoid processInput_08003880(int inputParam,int flagParam,int checkParam,undefined4 undefinedParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (checkParam == *(int *)(inputParam + 0xc)) {\n    if (flagParam == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      parseInput(inputParam,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    initializeParameter(inputParam,result + 0x68,0x20,8,undefinedParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_input_08003880",
                "param_1": "inputParam",
                "param_2": "flagParam",
                "param_3": "checkParam",
                "param_4": "undefinedParam",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "parse_input_08001460": "parseInput",
                "initialize_parameter_080014ec": "initializeParameter"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "initialize_and_execute_function_080038d0",
            "code": "\nvoid initialize_and_execute_function_080038d0(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = perform_calculation();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "initialize_and_execute_function_080038d0",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_0800387c": "perform_calculation",
                "initialize_data_08001578": "initialize_data"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "initialize_if_data_not_set_08003900",
            "code": "\nvoid initialize_if_data_not_set_08003900(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initialize_data_08001578(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "initialize_if_data_not_set_08003900",
                "param_1": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "initialize_uart_pins_08003978",
            "code": "\n\n\nvoid initialize_uart_pins_08003978(int *uart_pins)\n\n{\n  int uart_pin_1_status;\n  int uart_pin_2_status;\n  undefined4 permission_value;\n  uint pin_value;\n  uint uart_pin_2_shifted;\n  uint uart_pin_2_combined;\n  uint uart_pin_2_upper;\n  undefined4 uart_pin_1_upper;\n  uint uart_pin_2_lower;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin_1_status = check_uart_pin_status((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n    uart_pin_2_status = check_uart_pin_status((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n    if ((uart_pin_2_status == 0) || (uart_pin_1_status == 0)) {\n      print_error_message(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin_2_status);\n    }\n    else {\n      uart_pin_1_status = compare_uart_pins(uart_pin_1_status);\n      *uart_pins = uart_pin_1_status;\n      if (uart_pin_1_status == 0) {\n        print_error_message(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin_1_status == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)(uart_pins + 0x17) = 0x25;\n        }\n        else if (uart_pin_1_status == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)(uart_pins + 0x17) = 0x26;\n        }\n        else if (uart_pin_1_status == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)(uart_pins + 0x17) = 0x27;\n        }\n        else if (uart_pin_1_status == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uart_pins + 0x11) = 3;\n          *(undefined *)(uart_pins + 0x17) = 0x34;\n        }\n        else if (uart_pin_1_status == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uart_pins + 0x11) = 4;\n          *(undefined *)(uart_pins + 0x17) = 0x35;\n        }\n        else if (uart_pin_1_status == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uart_pins + 0x11) = 5;\n          *(undefined *)(uart_pins + 0x17) = 0x47;\n        }\n        else if (uart_pin_1_status == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uart_pins + 0x11) = 6;\n          *(undefined *)(uart_pins + 0x17) = 0x52;\n        }\n        else if (uart_pin_1_status == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uart_pins + 0x11) = 7;\n          *(undefined *)(uart_pins + 0x17) = 0x53;\n        }\n        permission_value = set_memory_permission((uint)((int)*(short *)((int)uart_pins + 0x5a) << 0x18) >> 0x1c);\n        pin_value = find_pin_value((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n        uart_pin_2_shifted = 1 << (*(ushort *)((int)uart_pins + 0x5a) & 0xf) & 0xffff;\n        uart_pin_2_combined = (pin_value >> 3 & 1) << 4 | pin_value & 7;\n        uart_pin_2_upper = (pin_value << 0x1a) >> 0x1e;\n        uart_pin_2_lower = (pin_value << 0x11) >> 0x19;\n        uart_pin_1_upper = 3;\n        update_registers(permission_value,&uart_pin_2_shifted);\n        permission_value = set_memory_permission((uint)((int)*(short *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        pin_value = find_pin_value((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n        uart_pin_2_shifted = 1 << (*(ushort *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        uart_pin_2_combined = (pin_value >> 3 & 1) << 4 | pin_value & 7;\n        uart_pin_2_upper = (pin_value << 0x1a) >> 0x1e;\n        update_registers(permission_value,&uart_pin_2_shifted);\n        (&DAT_200002b4)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        initialize_data_structure(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "initialize_uart_pins_08003978",
                "param_1": "uart_pins",
                "iVar1": "uart_pin_1_status",
                "iVar2": "uart_pin_2_status",
                "uVar3": "permission_value",
                "uVar4": "pin_value",
                "local_2c": "uart_pin_2_shifted",
                "local_28": "uart_pin_2_combined",
                "local_24": "uart_pin_2_upper",
                "local_20": "uart_pin_1_upper",
                "local_1c": "uart_pin_2_lower",
                "check_param_080034f4": "check_uart_pin_status",
                "process_data_08004fdc": "print_error_message",
                "compare_and_return_non_zero_08003582": "compare_uart_pins",
                "set_memory_permission_080031fc": "set_memory_permission",
                "find_value_or_negative_0800354a": "find_pin_value",
                "update_registers_08000fb4": "update_registers",
                "initialize_data_structure_08002d72": "initialize_data_structure"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int param_check_result;\n  undefined4 value_index;\n  \n  param_check_result = check_param_080034f4(0x38,&DAT_08005ca0);\n  if (param_check_result != 0) {\n    value_index = check_param_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_index_or_fail_0800351e(value_index,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    initialize_pins(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "param_check_result",
                "uVar2": "value_index",
                "initialize_uart_pins_08003978": "initialize_pins"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_and_verify_data_08003d18",
            "code": "\nuint process_and_verify_data_08003d18(undefined4 input_data,uint data_size)\n\n{\n  int global_variable_value;\n  int param_check_result;\n  uint loop_index;\n  \n  global_variable_value = get_global_variable_value_08000e30();\n  param_check_result = check_param_080034f4(0x38,&DAT_08005ca0);\n  if (param_check_result == 0) {\n    return 0;\n  }\n  for (loop_index = 0;\n      (loop_index < 10 &&\n      (((&DAT_200002b4)[loop_index] == 0 ||\n       (param_check_result = check_param_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[loop_index] != param_check_result))));\n      loop_index = loop_index + 1 & 0xff) {\n  }\n  if (9 < loop_index) {\n    if ((9 < DAT_20000074) && (initialize_uart_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    loop_index = (uint)DAT_20000074;\n  }\n  do {\n    param_check_result = process_data_08002dd0((&DAT_200002b4)[loop_index],input_data,data_size & 0xffff,1000);\n    if (param_check_result == 0) {\n      return data_size;\n    }\n    param_check_result = get_global_variable_value_08000e30();\n  } while ((uint)(param_check_result - global_variable_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_and_verify_data_08003d18",
                "param_1": "input_data",
                "param_2": "data_size",
                "iVar1": "global_variable_value",
                "iVar2": "param_check_result",
                "uVar3": "loop_index"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_condition_08003dd0",
            "code": "\nbool check_condition_08003dd0(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200002b4)[*(index *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_condition_08003dd0",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_0800312c": "combine_bytes",
                "byte": "index"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_valid_08003df4",
            "code": "\nbool isFlagValid_08003df4(int flagValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byteValue *)(flagValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_valid_08003df4",
                "param_1": "flagValue",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes",
                "byte": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_and_initialize_data_08003e18",
            "code": "\nundefined4 extract_and_initialize_data_08003e18(int input_value,undefined *output_data,undefined4 length,undefined4 other_param)\n\n{\n  int condition_check;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  condition_check = check_condition_08003dd0();\n  if (condition_check == 0) {\n    *output_data = *(undefined *)(input_value + 0x45);\n    initialize_data((&DAT_200002b4)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200002b4,other_param);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_and_initialize_data_08003e18",
                "param_1": "input_value",
                "param_2": "output_data",
                "param_3": "length",
                "param_4": "other_param",
                "iVar1": "condition_check",
                "initialize_data_08002efa": "initialize_data"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_08003e54",
            "code": "\nvoid updateData_08003e54(int dataAddress,undefined4 newValue,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  int conditionResult;\n  uint byteValue;\n  \n  if (dataAddress != 0) {\n    conditionResult = checkCondition();\n    if (conditionResult == 0) {\n      byteValue = (uint)*(byte *)(dataAddress + 0x44);\n      *(undefined4 *)(&DAT_20000214 + byteValue * 4) = newValue;\n      *(int *)(&DAT_2000023c + byteValue * 4) = dataAddress;\n      updateData_08003e54Function((int)*(char *)(dataAddress + 0x5c),0,1,byteValue,unusedParam2);\n      setBitFunction((int)*(char *)(dataAddress + 0x5c));\n      initializeDataFunction((&DAT_200002b4)[*(byte *)(dataAddress + 0x44)],dataAddress + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "iVar1": "conditionResult",
                "uVar2": "byteValue",
                "check_condition_08003dd0": "checkCondition",
                "update_data_08000e60": "updateDataFunction",
                "set_bit_08000ec4": "setBitFunction",
                "initialize_data_08002efa": "initializeDataFunction"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid updateData_08003eac(int inputPointer,undefined4 newValue)\n\n{\n  byte dataIndex;\n  \n  if (inputPointer != 0) {\n    dataIndex = *(byte *)(inputPointer + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)dataIndex * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)dataIndex * 4) = inputPointer;\n    updateData_08003eacInArray((int)*(char *)(inputPointer + 0x5c),0,2);\n    setBit((int)*(char *)(inputPointer + 0x5c));\n    validateInputs((&DAT_200002b4)[*(byte *)(inputPointer + 0x44)],\n                 *(int *)(inputPointer + 0x68) + (uint)*(ushort *)(inputPointer + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "bVar1": "dataIndex",
                "update_data_08000e60": "updateDataInArray",
                "set_bit_08000ec4": "setBit",
                "validate_inputs_08002eb2": "validateInputs"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_in_array_08003f00",
            "code": "\nuint find_index_in_array_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_in_array_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_based_on_index_08003f24",
            "code": "\nvoid executeFunctionBasedOnIndex_08003f24(void)\n\n{\n  uint index;\n  \n  index = findIndexInArray();\n  if (index < 10) {\n    (**(code **)(&DAT_20000214 + index * 4))(*(undefined4 *)(&DAT_2000023c + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_based_on_index_08003f24",
                "uVar1": "index",
                "find_index_in_array_08003f00": "findIndexInArray"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "execute_data_validation_08003f48",
            "code": "\nvoid executeDataValidation_08003f48(void)\n\n{\n  uint index;\n  int result;\n  int dataPointer;\n  \n  index = find_index_in_array_08003f00();\n  dataPointer = *(int *)(&DAT_2000028c + index * 4);\n  if ((index < 10) && (result = (**(code **)(&DAT_20000264 + index * 4))(dataPointer), result != -1)) {\n    validate_inputs_08002eb2((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 0x68) + (uint)*(ushort *)(dataPointer + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "execute_data_validation_08003f48",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "dataPointer"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "get_memory_block_08004094",
            "code": "\nundefined * getMemoryBlock_08004094(int size)\n\n{\n  undefined *block;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  block = DAT_200002dc;\n  if (DAT_200002dc + size <= stackBase) {\n    DAT_200002dc = DAT_200002dc + size;\n    return block;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "get_memory_block_08004094",
                "param_1": "size",
                "puVar1": "block",
                "&stack0x00000000": "stackBase"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_negative_one_080040d0",
            "code": "\nundefined4 get_negative_one_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_negative_one_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "verify_system_status_080040e0",
            "code": "\nundefined4 verify_system_status_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "verify_system_status_080040e0"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nundefined4 initialize_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_program_080040e8",
            "code": "\nvoid initialize_program_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_program_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_and_verify_data_080040ec",
            "code": "\nvoid process_and_verify_data_080040ec(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_and_verify_data_080040ec_08003d18(input_2,input_3,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_and_verify_data_080040ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "check_success_0800410c",
            "code": "\nbool check_success_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "check_success_0800410c",
                "undefined4": "bool",
                "return": "result"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_parameter_08004110",
            "code": "\nvoid process_parameter_08004110(uint index,undefined4 mode,undefined4 permission,undefined *data)\n\n{\n  int bit_value;\n  undefined *base_address;\n  int element_index;\n  \n  if (index < 0x60) {\n    element_index = (int)*(short *)(&DAT_08005d3c + index * 2);\n    base_address = &DAT_08005d3c;\n  }\n  else {\n    element_index = -1;\n    base_address = data;\n  }\n  if (element_index != -1) {\n    bit_value = get_bit_value_08003138(element_index,&DAT_200002e0,permission,base_address,data);\n    if (bit_value != 0) {\n      bit_value = find_value_0800355e(element_index,&DAT_08005a18);\n      if (bit_value == 0) {\n        bit_value = find_value_0800355e(element_index,&DAT_08005a3c);\n        if (bit_value != 0) {\n          process_param_08003414(element_index);\n        }\n      }\n      else {\n        initialize_data_if_param_valid_080033d8(element_index);\n      }\n      update_array_element_0800316c(element_index,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      set_memory_permission_and_update_registers_08003486(element_index,0);\n      break;\n    case 1:\n      set_memory_permission_and_update_registers_08003486(element_index,1,0);\n      break;\n    case 2:\n      set_memory_permission_and_update_registers_08003486(element_index,0,1);\n      break;\n    case 3:\n      set_memory_permission_and_update_registers_08003486(element_index,0,2);\n    }\n    set_bit_in_array_0800314e(element_index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_parameter_08004110",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "permission",
                "param_4": "data",
                "iVar1": "bit_value",
                "puVar2": "base_address",
                "iVar3": "element_index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "update_param_value_if_bit_set_080041bc",
            "code": "\nvoid update_param_value_if_bit_set_080041bc(uint param_index,undefined4 value,undefined4 param_count,undefined *data)\n\n{\n  int bit_value;\n  undefined4 memory_address;\n  undefined *short_data;\n  uint bit_mask;\n  \n  if (param_index < 0x60) {\n    bit_mask = (uint)*(short *)(&DAT_08005d3c + param_index * 2);\n    short_data = &DAT_08005d3c;\n  }\n  else {\n    bit_mask = 0xffffffff;\n    short_data = data;\n  }\n  if ((bit_mask != 0xffffffff) &&\n     (bit_value = get_bit_value_08003138(bit_mask,&DAT_2000030c,param_count,short_data,data), bit_value != 0)) {\n    memory_address = get_memory_address_0800318c((bit_mask << 0x18) >> 0x1c);\n    update_param_value_080034b6(memory_address,1 << (bit_mask & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "update_param_value_if_bit_set_080041bc",
                "param_1": "param_index",
                "param_2": "value",
                "param_3": "param_count",
                "param_4": "data",
                "iVar1": "bit_value",
                "uVar2": "memory_address",
                "puVar3": "short_data",
                "uVar4": "bit_mask"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_global_variable_08004204",
            "code": "\nvoid initializeGlobalVariable_08004204(void)\n\n{\n  initialize_global_variable_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_global_variable_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculateOffset_08004240(int address)\n\n{\n  return (*(short *)(address + 0x138) + 0x40) - *(short *)(address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "address"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid updateData_080042ac(int inputData)\n\n{\n  int result;\n  ushort newValue;\n  undefined extractedValue;\n  \n  result = extract_and_initialize_data_08003e18(inputData,&extractedValue);\n  if ((result == 0) &&\n     (newValue = *(short *)(inputData + 100) + 1U & 0x3f, newValue != *(ushort *)(inputData + 0x66))) {\n    *(undefined *)(*(int *)(inputData + 0x60) + (uint)*(ushort *)(inputData + 100)) = extractedValue;\n    *(ushort *)(inputData + 100) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "inputData",
                "iVar1": "result",
                "uVar2": "newValue",
                "local_9": "extractedValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "update_data_080042e8",
            "code": "\nundefined4 updateData_080042e8(int inputParam,undefined inputByte)\n\n{\n  byte byteVar1;\n  byte byteVar2;\n  int intVar3;\n  \n  *(undefined *)(inputParam + 0x10) = 1;\n  intVar3 = *(ushort *)(inputParam + 0x140) + 1;\n  byteVar1 = (byte)intVar3;\n  byteVar2 = byteVar1 & 0x7f;\n  if (intVar3 == 0) {\n    byteVar2 = -(-byteVar1 & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(inputParam + 0x142) == (ushort)byteVar2);\n  *(undefined *)(*(int *)(inputParam + 0x13c) + (uint)*(ushort *)(inputParam + 0x140)) = inputByte;\n  *(ushort *)(inputParam + 0x140) = (ushort)byteVar2;\n  intVar3 = is_flag_valid_08003df4(inputParam + 0xd4);\n  if (intVar3 == 0) {\n    update_data_08003eac(inputParam + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "update_data_080042e8",
                "param_1": "inputParam",
                "param_2": "inputByte",
                "bVar1": "byteVar1",
                "bVar2": "byteVar2",
                "iVar3": "intVar3"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_08004364",
            "code": "\nvoid initializeData_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_08004388",
            "code": "\nvoid initializeSerial_08004388(int serialPort,undefined4 baudRate,byte settings)\n\n{\n  uint status;\n  byte settingMask;\n  int settingCount;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x144) = settings;\n  settingMask = settings & 7;\n  if (settingMask == 4) {\n    settingCount = 7;\n  }\n  else if (settingMask == 6) {\n    settingCount = 8;\n  }\n  else if (settingMask == 2) {\n    settingCount = 6;\n  }\n  else {\n    settingCount = 0;\n  }\n  if ((settings & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    settingCount = settingCount + 1;\n  }\n  else if ((settings & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    settingCount = settingCount + 1;\n  }\n  if ((settings & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (settingCount == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (settingCount == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    settingCount = 0;\n  }\n  if (settingCount != 0) {\n    initialize_uart_pins_08003978(serialPort + 0xd4);\n    update_data_08003e54(serialPort + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  process_assertion_failure_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (status < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + status * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_08004388",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "settings",
                "extraout_r1": "status",
                "bVar1": "settingMask",
                "iVar2": "settingCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_return_value_08004444",
            "code": "\nvoid setReturnValue_08004444(int resultAddress,uint value)\n\n{\n  undefined2 returnValue;\n  code *jumpTable;\n  \n  if (value < 0x60) {\n    returnValue = *(undefined2 *)(&DAT_08005d3c + value * 2);\n  }\n  else {\n    returnValue = 0xffff;\n  }\n  *(undefined2 *)(resultAddress + 0x12e) = returnValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_return_value_08004444",
                "param_1": "resultAddress",
                "param_2": "value",
                "uVar1": "returnValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "update_value_08004460",
            "code": "\nvoid updateValue_08004460(int baseAddress,uint index)\n\n{\n  undefined2 newValue;\n  \n  if (index < 0x60) {\n    newValue = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    newValue = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 300) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "update_value_08004460",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_data_0800447c",
            "code": "\nundefined4 *\ninitializeData_0800447c(undefined4 *functionParams,undefined4 searchValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 valueIndex;\n  \n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  *functionParams = &PTR_FUN_080042e8_1_08005ed4;\n  if (functionParams == &DAT_20000338) {\n    setReturnValue(&DAT_20000338,0x4c,param3,&DAT_20000338,param4);\n    updateValue(&DAT_20000338,0x4d);\n  }\n  else {\n    valueIndex = findValueIndexOrFail(searchValue,&DAT_08005c10);\n    *(undefined2 *)((int)functionParams + 0x12e) = valueIndex;\n    valueIndex = findValueIndexOrFail(searchValue,&DAT_08005ca0);\n    *(undefined2 *)(functionParams + 0x4b) = valueIndex;\n  }\n  initializeData_0800447c(functionParams);\n  return functionParams;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_data_0800447c",
                "param_1": "functionParams",
                "param_2": "searchValue",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "valueIndex",
                "set_return_value_08004444": "setReturnValue",
                "update_value_08004460": "updateValue",
                "find_value_index_or_fail_0800351e": "findValueIndexOrFail",
                "initialize_data_08004364": "initializeData"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_data_if_param1_equals_1_080044d8",
            "code": "\nvoid initialize_data_if_param1_equals_1_080044d8(int check_value,int flag_value,undefined4 resource_value,undefined4 parameter_value)\n\n{\n  if (check_value != 1) {\n    return;\n  }\n  if (flag_value == 0xffff) {\n    initialize_data(&DAT_20000338,0x40004800,resource_value,0xffff,parameter_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_data_if_param1_equals_1_080044d8",
                "param_1": "check_value",
                "param_2": "flag_value",
                "param_3": "resource_value",
                "param_4": "parameter_value",
                "initialize_data_0800447c": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *outputData,undefined param2,undefined param3,undefined param4,\n                 undefined param5)\n\n{\n  *outputData = &DAT_08005f28;\n  *(undefined *)(outputData + 1) = param2;\n  *(undefined *)((int)outputData + 5) = param3;\n  *(undefined *)((int)outputData + 6) = param4;\n  *(undefined *)((int)outputData + 7) = param5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "outputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_if_condition_08004560",
            "code": "\nvoid initialize_if_condition_08004560(int input_value_1,int input_value_2)\n\n{\n  if ((input_value_1 == 1) && (input_value_2 == 0xffff)) {\n    initialize_data_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_if_condition_08004560",
                "param_1": "input_value_1",
                "param_2": "input_value_2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_system_08004648",
            "code": "\nvoid initialize_system_08004648(void)\n\n{\n  update_flags(3);\n  initialize_system_08004648();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_system_08004648",
                "update_flags_08000e3c": "update_flags",
                "initialize_system_08000d8e": "initialize_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "run_constant_loop_08004658",
            "code": "\nvoid run_constant_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_and_process_parameters();\n  do {\n    update_values();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "run_constant_loop_08004658",
                "initialize_and_process_parameters_08000c4c": "initialize_and_process_parameters",
                "update_values_08000c64": "update_values"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int condition,int value,undefined4 unused,undefined4 unused)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftLeft(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,unused);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "unused",
                "shift_left_080047fe": "shiftLeft"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "perform_analysis_080047c0",
            "code": "\nvoid performAnalysis_080047c0(int input)\n\n{\n  int result;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  do_analysis_08005760();\n  result = count_set_bits_08004678();\n  if ((&DAT_20000494)[result * 5] != 0) {\n    performAnalysis_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "perform_analysis_080047c0",
                "param_1": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "perform_analysis_if_set_bits_080047d0",
            "code": "\nvoid perform_analysis_if_set_bits_080047d0(void)\n\n{\n  int bitCount;\n  \n  bitCount = count_set_bits();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    perform_analysis_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "perform_analysis_if_set_bits_080047d0",
                "iVar1": "bitCount",
                "count_set_bits_08004678": "count_set_bits"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_080047fe",
            "code": "\nvoid shift_left_080047fe(undefined4 target,undefined4 source)\n\n{\n  shift_left_080047fe_u_int64_08004844(source,target);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_080047fe",
                "param_1": "target",
                "param_2": "source"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "process_assertion_failure_08004808",
            "code": "\nvoid processAssertionFailure_08004808(undefined4 message,undefined4 file,char *line,undefined4 functionName)\n\n{\n  undefined4 assertionData;\n  char *messagePart;\n  undefined8 executionResult;\n  undefined4 additionalData;\n  \n  assertionData = *(undefined4 *)(DAT_200000a0 + 0xc);\n  additionalData = functionName;\n  if (line == (char *)0x0) goto LAB_0800482c;\n  messagePart = \", function: \";\n  do {\n    process_and_store_data_08004860(assertionData,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,message,file\n                 ,messagePart,line,additionalData);\n    executionResult = execute_with_analysis_080051ac();\n    file = (undefined4)((ulonglong)executionResult >> 0x20);\n    assertionData = (undefined4)executionResult;\nLAB_0800482c:\n    line = \"\";\n    messagePart = line;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "process_assertion_failure_08004808",
                "param_1": "message",
                "param_2": "file",
                "param_3": "line",
                "param_4": "functionName",
                "uVar1": "assertionData",
                "uVar4": "additionalData",
                "pcVar2": "messagePart",
                "uVar3": "executionResult"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left_u_int64_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftLeftUInt64_08004844(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left_u_int64_08004844",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_and_store_data_08004860",
            "code": "\nvoid process_and_store_data_08004860(undefined4 data_param,undefined4 processing_param,undefined4 stack_param_1,undefined4 stack_param_2)\n\n{\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  \n  stack_variable_1 = stack_param_1;\n  stack_variable_2 = stack_param_2;\n  process_data_08004a84(DAT_200000a0,data_param,processing_param,&stack_variable_1,data_param,&stack_variable_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_and_store_data_08004860",
                "param_1": "data_param",
                "param_2": "processing_param",
                "param_3": "stack_param_1",
                "param_4": "stack_param_2",
                "uStack_8": "stack_variable_1",
                "uStack_4": "stack_variable_2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "memset_array_080048cc",
            "code": "\nvoid memsetArray_080048cc(undefined *array,undefined value,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = array + length;\n  for (; array != endPtr; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "memset_array_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_data_080048dc",
            "code": "\nvoid updateData_080048dc(undefined4 *data,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *pointer1;\n  int **extractedData;\n  int **pointer2;\n  int **pointer3;\n  int **pointer4;\n  int **pointer5;\n  bool flag;\n  \n  if (size == 0) {\n    return;\n  }\n  pointer5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    pointer5 = (int **)((int)pointer5 + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  pointer3 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    pointer5[1] = (int *)0x0;\n    pointer2 = extractedData;\n    DAT_200005c8 = pointer5;\n  }\n  else {\n    pointer3 = DAT_200005c8;\n    if (pointer5 < DAT_200005c8) {\n      pointer2 = (int **)*pointer5;\n      pointer3 = (int **)((int)pointer5 + (int)pointer2);\n      flag = DAT_200005c8 == pointer3;\n      if (flag) {\n        pointer3 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      pointer5[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = pointer5;\n      if (flag) {\n        pointer3 = (int **)((int)pointer3 + (int)pointer2);\n        *pointer5 = (int *)pointer3;\n      }\n    }\n    else {\n      do {\n        pointer4 = pointer3;\n        pointer3 = (int **)pointer4[1];\n        if (pointer3 == (int **)0x0) break;\n      } while (pointer3 <= pointer5);\n      pointer2 = (int **)*pointer4;\n      if ((int **)((int)pointer4 + (int)pointer2) == pointer5) {\n        pointer2 = (int **)((int)pointer2 + (int)*pointer5);\n        *pointer4 = (int *)pointer2;\n        if (pointer3 == (int **)((int)pointer4 + (int)pointer2)) {\n          pointer1 = *pointer3;\n          pointer3 = (int **)pointer3[1];\n          pointer4[1] = (int *)pointer3;\n          pointer2 = (int **)((int)pointer2 + (int)pointer1);\n          *pointer4 = (int *)pointer2;\n        }\n      }\n      else if (pointer5 < (int **)((int)pointer4 + (int)pointer2)) {\n        *data = 0xc;\n      }\n      else {\n        pointer2 = (int **)((int)pointer5 + (int)*pointer5);\n        flag = pointer3 == pointer2;\n        if (flag) {\n          pointer2 = (int **)*pointer3;\n          pointer3 = (int **)pointer3[1];\n        }\n        pointer5[1] = (int *)pointer3;\n        if (flag) {\n          pointer2 = (int **)((int)pointer2 + (int)*pointer5);\n          *pointer5 = (int *)pointer2;\n        }\n        pointer4[1] = (int *)pointer5;\n      }\n    }\n  }\n  FUNC_0800557e(data,pointer2,pointer3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_data_080048dc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "pointer1",
                "extraout_r1": "extractedData",
                "ppiVar2": "pointer2",
                "ppiVar3": "pointer3",
                "ppiVar4": "pointer4",
                "ppiVar5": "pointer5",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_and_init_memory_block_08004978",
            "code": "\nuint allocate_and_init_memory_block_08004978(undefined4 *result,uint requested_size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *next_block;\n  uint block_difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < requested_size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    previous_block = DAT_200005c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      block_difference = *next_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *next_block = block_difference;\n          *(uint *)((int)next_block + block_difference) = allocated_size;\n          previous_block = (uint *)((int)next_block + block_difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = allocate_memory_block_0800500c(result);\n    }\n    current_block = (uint *)allocate_memory_block_0800500c(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (offset = allocate_memory_block_0800500c(result,(int)previous_block - (int)current_block), offset != -1)))) {\n      *previous_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_block + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_block + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_0800557e(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_and_init_memory_block_08004978",
                "param_1": "result",
                "param_2": "requested_size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "next_block",
                "uVar4": "block_difference",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_data_08004a34",
            "code": "\nuint process_data_08004a34(int input_parameter,byte byte_value,byte **byte_ptr_ptr)\n\n{\n  int temp_var;\n  byte *byte_ptr_2;\n  byte *byte_ptr_3;\n  uint return_value;\n  \n  byte_ptr_2 = byte_ptr_ptr[2] + -1;\n  byte_ptr_ptr[2] = byte_ptr_2;\n  if ((-1 < (int)byte_ptr_2) ||\n     (((int)byte_ptr_ptr[6] <= (int)byte_ptr_2 && (byte_ptr_2 = (byte *)(uint)byte_value, byte_ptr_2 != (byte *)0xa))))\n  {\n    byte_ptr_2 = *byte_ptr_ptr;\n    *byte_ptr_ptr = byte_ptr_2 + 1;\n    *byte_ptr_2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_parameter != 0) && (*(int *)(input_parameter + 0x18) == 0)) {\n    initialize_data_structures_080053a0();\n  }\n  if (byte_ptr_ptr == (byte **)&DAT_08005fc0) {\n    byte_ptr_ptr = *(byte ***)(input_parameter + 4);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_08005fe0) {\n    byte_ptr_ptr = *(byte ***)(input_parameter + 8);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_08005fa0) {\n    byte_ptr_ptr = *(byte ***)(input_parameter + 0xc);\n  }\n  byte_ptr_ptr[2] = byte_ptr_ptr[6];\n  byte_ptr_3 = (byte *)(uint)*(ushort *)(byte_ptr_ptr + 3);\n  temp_var = (int)byte_ptr_3 << 0x1c;\n  if (((temp_var < 0) && (byte_ptr_3 = byte_ptr_ptr[4], byte_ptr_3 != (byte *)0x0)) ||\n     (temp_var = process_data_08004a34_080050d0(input_parameter,byte_ptr_ptr,temp_var,byte_ptr_3,byte_ptr_2), temp_var == 0)) {\n    temp_var = (int)*byte_ptr_ptr - (int)byte_ptr_ptr[4];\n    return_value = (uint)byte_value;\n    if ((temp_var < (int)byte_ptr_ptr[5]) || (temp_var = process_data_08004a34_080052cc(input_parameter,byte_ptr_ptr), temp_var == 0)) {\n      byte_ptr_ptr[2] = byte_ptr_ptr[2] + -1;\n      byte_ptr_2 = *byte_ptr_ptr;\n      *byte_ptr_ptr = byte_ptr_2 + 1;\n      *byte_ptr_2 = byte_value;\n      if ((byte *)(temp_var + 1) != byte_ptr_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_ptr_ptr + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      temp_var = process_data_08004a34_080052cc(input_parameter,byte_ptr_ptr);\n      if (temp_var == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_data_08004a34",
                "param_1": "input_parameter",
                "param_2": "byte_value",
                "param_3": "byte_ptr_ptr",
                "iVar1": "temp_var",
                "pbVar2": "byte_ptr_2",
                "pbVar3": "byte_ptr_3",
                "uVar4": "return_value"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_data_08004a60",
            "code": "\nint process_data_08004a60(undefined4 input_param,undefined4 output_param,undefined *data_ptr,int data_len)\n\n{\n  int result;\n  undefined *end_ptr;\n  int loop_counter;\n  \n  end_ptr = data_ptr + data_len;\n  loop_counter = data_len;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = process_data_08004a60_08004a34(input_param,*data_ptr,output_param,data_len,loop_counter);\n    data_len = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (data_len != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "data_ptr",
                "param_4": "data_len",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "loop_counter"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint processData_08004a84(int arg1,undefined4 *arg2,byte *arg3,int *arg4)\n\n{\n  int result;\n  int *ptr;\n  bool found;\n  byte *currentByte;\n  byte *nextByte;\n  int unaff_r9;\n  int iter;\n  int *local_ptr;\n  uint flags;\n  int num;\n  undefined4 unaff_80;\n  int val;\n  int total;\n  byte ch;\n  undefined unaff_6f;\n  undefined unaff_6e;\n  undefined unaff_45;\n  undefined4 unaff_30;\n  \n  local_ptr = arg4;\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    initialize_data_structures_080053a0();\n  }\n  if (arg2 == &DAT_08005fc0) {\n    arg2 = *(undefined4 **)(arg1 + 4);\n  }\n  else if (arg2 == (undefined4 *)&DAT_08005fe0) {\n    arg2 = *(undefined4 **)(arg1 + 8);\n  }\n  else if (arg2 == (undefined4 *)&DAT_08005fa0) {\n    arg2 = *(undefined4 **)(arg1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x1c)) || (arg2[4] == 0)) &&\n     (iter = process_data_080050d0(arg1,arg2), iter != 0)) {\n    return -1;\n  }\n  total = 0;\n  unaff_6f = 0x20;\n  unaff_6e = 0x30;\n  currentByte = arg3;\nLAB_08004ac6:\n  nextByte = currentByte;\n  if (*nextByte != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  currentByte = nextByte + 1;\n  if (*nextByte != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iter = (int)nextByte - (int)arg3;\n  if (iter != 0) {\n    result = process_data_08004a60(arg1,arg2,arg3,iter);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(arg2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total;\n    }\n    total = total + iter;\n  }\n  if (*nextByte == 0) goto LAB_08004c70;\n  flags = 0;\n  val = 0;\n  num = -1;\n  unaff_80 = 0;\n  unaff_45 = 0;\n  unaff_30 = 0;\n  currentByte = nextByte + 1;\n  while( true ) {\n    iter = find_byte_sequence_08000230(\"#-0+ \",*currentByte);\n    arg3 = currentByte + 1;\n    if (iter == 0) break;\n    flags = 1 << (iter + 0xf7ffa094U & 0xff) | flags;\n    currentByte = arg3;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    unaff_45 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    unaff_45 = 0x2b;\n  }\n  if (*currentByte == 0x2a) {\n    ptr = local_ptr + 1;\n    iter = *local_ptr;\n    local_ptr = ptr;\n    if (iter < 0) {\n      val = -iter;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    found = false;\n    iter = val;\n    arg3 = currentByte;\n    while( true ) {\n      if (9 < *arg3 - 0x30) break;\n      iter = iter * 10 + (*arg3 - 0x30);\n      found = true;\n      arg3 = arg3 + 1;\n    }\n    if (!found) goto LAB_08004bae;\n  }\n  val = iter;\nLAB_08004bae:\n  if (*arg3 == 0x2e) {\n    if (arg3[1] == 0x2a) {\n      num = *local_ptr;\n      if (num < 0) {\n        num = -1;\n      }\n      arg3 = arg3 + 2;\n      local_ptr = local_ptr + 1;\n    }\n    else {\n      found = false;\n      num = 0;\n      iter = 0;\n      while( true ) {\n        arg3 = arg3 + 1;\n        if (9 < *arg3 - 0x30) break;\n        iter = iter * 10 + (*arg3 - 0x30);\n        found = true;\n      }\n      if (found) {\n        num = iter;\n      }\n    }\n  }\n  iter = find_byte_sequence_08000230(&DAT_08005f72,*arg3,3);\n  if (iter != 0) {\n    flags = flags | 0x40 << (iter + 0xf7ffa08eU & 0xff);\n    arg3 = arg3 + 1;\n  }\n  ch = *arg3;\n  arg3 = arg3 + 1;\n  iter = find_byte_sequence_08000230(\"efgEFG\",ch,6);\n  if (iter == 0) {\n    unaff_r9 = decode_and_process_data_08004d9c(arg1,&flags,arg2,0x8004a61,&local_ptr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    local_ptr = (int *)(((int)local_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total = total + unaff_r9;\n  currentByte = arg3;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "found",
                "pbVar4": "currentByte",
                "pbVar5": "nextByte",
                "iVar6": "iter",
                "local_8c": "local_ptr",
                "local_88": "flags",
                "local_84": "num",
                "local_80": "unaff_80",
                "local_7c": "val",
                "local_74": "total",
                "local_70": "ch",
                "local_6f": "unaff_6f",
                "local_6e": "unaff_6e",
                "local_45": "unaff_45",
                "local_30": "unaff_30"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 input,uint *array,uint *outputSize,undefined4 param_4,code *callbackFunc)\n\n{\n  int index1;\n  int index2;\n  uint maxSize;\n  uint counter;\n  bool flag;\n  \n  maxSize = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxSize = array[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index1 = 0; index1 < (int)(array[3] - *outputSize); index1 = index1 + 1) {\n      index2 = (*callbackFunc)(input,param_4,(int)array + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)array + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)array + maxSize + 0x44) = *(undefined *)((int)array + 0x45);\n    maxSize = maxSize + 2;\n  }\n  index1 = (*callbackFunc)(input,param_4,(int)array + 0x43,maxSize);\n  if (index1 != -1) {\n    maxSize = array[3];\n    flag = (*array & 6) == 4;\n    if (flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxSize = maxSize + (array[2] - array[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxSize == counter) {\n        return 0;\n      }\n      index1 = (*callbackFunc)(input,param_4,(int)array + 0x1a,1);\n      if (index1 == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "array",
                "param_3": "outputSize",
                "param_5": "callbackFunc",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxSize",
                "uVar4": "counter",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decode_and_process_data_08004d9c",
            "code": "\nuint decode_and_process_data_08004d9c(undefined4 input1,uint *inputArray,undefined4 input2,code *callbackFunction,uint **outputArray)\n\n{\n  byte byteValue;\n  int index;\n  uint *ptr;\n  int tempIndex;\n  char *charPtr1;\n  uint tempValue1;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint tempValue2;\n  uint tempValue3;\n  char *newCharPtr;\n  char *charPtr2;\n  uint localArray [2];\n  \n  byteValue = *(byte *)(inputArray + 6);\n  charPtr2 = (char *)((int)inputArray + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)inputArray + 0x45) = 0x58;\n          charPtr1 = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          tempValue1 = *inputArray;\n          ptr = *outputArray;\n          *outputArray = ptr + 1;\n          if (((tempValue1 & 0x80) == 0) && ((int)(tempValue1 << 0x19) < 0)) {\n            tempValue2 = (uint)*(ushort *)ptr;\n          }\n          else {\n            tempValue2 = *ptr;\n          }\n          if ((int)(tempValue1 << 0x1f) < 0) {\n            *inputArray = tempValue1 | 0x20;\n          }\n          if (tempValue2 == 0) {\n            *inputArray = *inputArray & 0xffffffdf;\n          }\n          tempValue1 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)inputArray + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          tempValue2 = *inputArray;\n          ptr = *outputArray;\n          if ((tempValue2 & 0x80) == 0) {\n            *outputArray = ptr + 1;\n            if ((tempValue2 & 0x40) == 0) goto LAB_08004dec;\n            tempValue2 = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *outputArray = ptr + 1;\nLAB_08004dec:\n            tempValue2 = *ptr;\n          }\n          if ((int)tempValue2 < 0) {\n            tempValue2 = -tempValue2;\n            *(undefined *)((int)inputArray + 0x43) = 0x2d;\n          }\n          charPtr1 = \"0123456789ABCDEF\";\n          tempValue1 = 10;\n        }\n        tempValue3 = inputArray[1];\n        inputArray[2] = tempValue3;\n        newCharPtr = charPtr2;\n        if ((int)tempValue3 < 0) {\n          if (tempValue2 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)inputArray + 0x42) = *charPtr1;\n          newCharPtr = (char *)((int)inputArray + 0x42);\n        }\n        else {\n          *inputArray = *inputArray & 0xfffffffb;\n          if (tempValue2 == 0) {\n            if (tempValue3 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              tempValue3 = tempValue2 / tempValue1;\n              newCharPtr = newCharPtr + -1;\n              *newCharPtr = charPtr1[tempValue2 - tempValue1 * tempValue3];\n              tempValue2 = tempValue3;\n            } while (tempValue3 != 0);\n          }\n        }\n        if (((tempValue1 == 8) && ((int)(*inputArray << 0x1f) < 0)) && ((int)inputArray[1] <= (int)inputArray[4]))\n        {\n          newCharPtr[-1] = '0';\n          newCharPtr = newCharPtr + -1;\n        }\n        inputArray[4] = (int)charPtr2 - (int)newCharPtr;\n        charPtr2 = newCharPtr;\n        goto LAB_08004ec2;\n      }\n      ptr = *outputArray;\n      *outputArray = ptr + 1;\n      *(char *)((int)inputArray + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      charPtr2 = (char *)((int)inputArray + 0x42);\n      tempValue2 = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            tempValue2 = *inputArray;\n            ptr = *outputArray;\n            if ((tempValue2 & 0x80) == 0) {\n              *outputArray = ptr + 1;\n              if ((tempValue2 & 0x40) == 0) goto LAB_08004e60;\n              tempValue2 = (uint)*(ushort *)ptr;\n            }\n            else {\n              *outputArray = ptr + 1;\nLAB_08004e60:\n              tempValue2 = *ptr;\n            }\n            charPtr1 = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              tempValue1 = 8;\n            }\n            else {\n              tempValue1 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *inputArray = *inputArray | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)inputArray + 0x45) = 0x78;\n            charPtr1 = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)inputArray + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*outputArray;\n      *outputArray = (uint *)(ppcVar8 + 1);\n      charPtr2 = *ppcVar8;\n      index = find_byte_sequence_08000230(charPtr2,0,inputArray[1]);\n      if (index != 0) {\n        inputArray[1] = index - (int)charPtr2;\n      }\n      tempValue2 = inputArray[1];\n    }\n    inputArray[4] = tempValue2;\n    *(undefined *)((int)inputArray + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  tempValue2 = *inputArray;\n  ppuVar7 = (uint **)*outputArray;\n  tempValue1 = inputArray[5];\n  if ((tempValue2 & 0x80) == 0) {\n    *outputArray = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((tempValue2 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)tempValue1;\n  }\n  else {\n    *outputArray = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_08004f42:\n    *ptr = tempValue1;\n  }\nLAB_08004f56:\n  inputArray[4] = 0;\nLAB_08004ec2:\n  index = process_data_08004cb0(input1,inputArray,localArray,input2,callbackFunction);\n  if ((index == -1) || (index = (*callbackFunction)(input1,input2,charPtr2,inputArray[4]), index == -1)) {\nLAB_08004ed6:\n    tempValue2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*inputArray << 0x1e) < 0) {\n      for (index = 0; index < (int)(inputArray[3] - localArray[0]); index = index + 1) {\n        tempIndex = (*callbackFunction)(input1,input2,(int)inputArray + 0x19,1);\n        if (tempIndex == -1) goto LAB_08004ed6;\n      }\n    }\n    tempValue2 = inputArray[3];\n    if ((int)inputArray[3] < (int)localArray[0]) {\n      tempValue2 = localArray[0];\n    }\n  }\n  return tempValue2;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "decode_and_process_data_08004d9c",
                "param_1": "input1",
                "param_2": "inputArray",
                "param_3": "input2",
                "param_4": "callbackFunction",
                "param_5": "outputArray",
                "bVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "tempIndex",
                "pcVar5": "charPtr1",
                "uVar6": "tempValue1",
                "uVar9": "tempValue2",
                "uVar10": "tempValue3",
                "pcVar11": "newCharPtr",
                "pcVar12": "charPtr2",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "process_data_08004fdc",
            "code": "\nvoid processData_08004fdc(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int dataPointer;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  dataPointer = DAT_200000a0;\n  param1Copy = inputParam1;\n  param2Copy = inputParam2;\n  param3Copy = inputParam3;\n  param4Copy = inputParam4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structures_080053a0(DAT_200000a0);\n  }\n  process_data_08004a84(dataPointer,*(undefined4 *)(dataPointer + 8),inputParam1,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "dataPointer",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_memory_block_0800500c",
            "code": "\nvoid allocateMemoryBlock_0800500c(int *resultPointer,undefined4 blockSize)\n\n{\n  int memoryBlock;\n  \n  DAT_20000674 = 0;\n  memoryBlock = get_memory_block_08004094(blockSize);\n  if ((memoryBlock == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_memory_block_0800500c",
                "param_1": "resultPointer",
                "param_2": "blockSize",
                "iVar1": "memoryBlock"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint processData_080050d0(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  int dataPointer;\n  uint result;\n  ushort value;\n  \n  dataPointer = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structures_080053a0(DAT_200000a0);\n  }\n  if (inputParam == &DAT_08005fc0) {\n    inputParam = *(undefined4 **)(dataPointer + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_08005fe0) {\n    inputParam = *(undefined4 **)(dataPointer + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_08005fa0) {\n    inputParam = *(undefined4 **)(dataPointer + 0xc);\n  }\n  value = *(ushort *)(inputParam + 3);\n  result = (uint)value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          updateData(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    allocateAndInitBlock(outputParam,inputParam);\n  }\n  value = *(ushort *)(inputParam + 3);\n  result = value & 1;\n  if ((value & 1) == 0) {\n    if (-1 < (int)((uint)value << 0x1e)) {\n      result = inputParam[5];\n    }\n    inputParam[2] = result;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] == 0) {\n    value = *(ushort *)(inputParam + 3);\n    result = (int)(short)value & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(inputParam + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "dataPointer",
                "uVar2": "result",
                "uVar3": "value",
                "update_data_080048dc": "updateData",
                "allocate_and_initialize_block_080054fc": "allocateAndInitBlock"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_block_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "execute_with_analysis_080051ac",
            "code": "\nvoid executeWithAnalysis_080051ac(void)\n\n{\n  uint *ptr_data;\n  int offset;\n  int *ptr_array;\n  int *ptr_array_2;\n  uint ushort_value;\n  ushort ushort_value_2;\n  int temp_var;\n  code *func_pointer;\n  int temp_var_2;\n  uint temp_value;\n  code *jump_table;\n  bool condition;\n  undefined8 result;\n  \n  analyze_and_execute_080055d0(6);\n  jump_table = (code *)0x80051bb;\n  result = infinite_loop_080040f8(1);\n  ptr_array = (int *)((ulonglong)result >> 0x20);\n  ptr_data = (uint *)result;\n  ushort_value_2 = *(ushort *)(ptr_array + 3);\n  ushort_value = (uint)ushort_value_2;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    offset = ptr_array[4];\n    if (offset != 0) {\n      temp_var = ushort_value << 0x1e;\n      condition = temp_var == 0;\n      temp_var_2 = *ptr_array;\n      if (condition) {\n        temp_var = ptr_array[5];\n      }\n      *ptr_array = offset;\n      if (!condition) {\n        temp_var = 0;\n      }\n      ptr_array[2] = temp_var;\n      for (temp_var_2 = temp_var_2 - offset; 0 < temp_var_2; temp_var_2 = temp_var_2 - temp_var) {\n        temp_var = (*(code *)ptr_array[10])(ptr_data,ptr_array[8],offset,temp_var_2);\n        if (temp_var < 1) {\n          ushort_value_2 = *(ushort *)(ptr_array + 3);\n          goto LAB_080052b2;\n        }\n        offset = offset + temp_var;\n      }\n    }\n  }\n  else if (((0 < ptr_array[1]) || (0 < ptr_array[0x10])) &&\n          (func_pointer = (code *)ptr_array[0xb], func_pointer != (code *)0x0)) {\n    temp_value = *ptr_data;\n    *ptr_data = 0;\n    if ((ushort_value_2 & 0x1000) == 0) {\n      offset = (*func_pointer)(ptr_data,ptr_array[8],ushort_value & 0x1000,1);\n      if ((offset == -1) && (ushort_value = *ptr_data, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(ptr_array + 3) = *(ushort *)(ptr_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *ptr_data = temp_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      offset = ptr_array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr_array + 3) << 0x1d) < 0) &&\n       (offset = offset - ptr_array[1], ptr_array[0xd] != 0)) {\n      offset = offset - ptr_array[0x10];\n    }\n    offset = (*(code *)ptr_array[0xb])(ptr_data,ptr_array[8],offset,0);\n    ushort_value_2 = *(ushort *)(ptr_array + 3);\n    if ((offset == -1) &&\n       ((0x1d < *ptr_data || (-1 < (int)((0x20400001U >> (*ptr_data & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(ptr_array + 3) = ushort_value_2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    ptr_array[1] = 0;\n    *ptr_array = ptr_array[4];\n    if (((int)((uint)ushort_value_2 << 0x13) < 0) && ((offset != -1 || (*ptr_data == 0)))) {\n      ptr_array[0x15] = offset;\n    }\n    ptr_array_2 = (int *)ptr_array[0xd];\n    *ptr_data = temp_value;\n    if (ptr_array_2 != (int *)0x0) {\n      if (ptr_array_2 != ptr_array + 0x11) {\n        update_data_080048dc(ptr_data);\n      }\n      ptr_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "execute_with_analysis_080051ac",
                "puVar1": "ptr_data",
                "iVar2": "offset",
                "piVar3": "ptr_array",
                "piVar4": "ptr_array_2",
                "uVar5": "ushort_value",
                "uVar6": "ushort_value_2",
                "iVar7": "temp_var",
                "pcVar8": "func_pointer",
                "iVar9": "temp_var_2",
                "uVar10": "temp_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "condition",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *inputArray,int *paramArray)\n\n{\n  undefined4 returnValue;\n  int array1Value;\n  int *array2Value;\n  uint ushortValue;\n  ushort ushortVar;\n  int iVar;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *functionPtr;\n  int loopCounter;\n  uint tempValue;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (paramArray[4] != 0) {\n    if ((inputArray != (uint *)0x0) && (inputArray[6] == 0)) {\n      initialize_data_structures_080053a0();\n    }\n    if (paramArray == &DAT_08005fc0) {\n      paramArray = (int *)inputArray[1];\n    }\n    else if (paramArray == (int *)&DAT_08005fe0) {\n      paramArray = (int *)inputArray[2];\n    }\n    else if (paramArray == (int *)&DAT_08005fa0) {\n      paramArray = (int *)inputArray[3];\n    }\n    if (*(short *)(paramArray + 3) != 0) {\n      ushortVar = *(ushort *)(paramArray + 3);\n      ushortValue = (uint)ushortVar;\n      if ((int)(ushortValue << 0x1c) < 0) {\n        array1Value = paramArray[4];\n        if (array1Value != 0) {\n          iVar = ushortValue << 0x1e;\n          bVar10 = iVar == 0;\n          loopCounter = *paramArray;\n          if (bVar10) {\n            iVar = paramArray[5];\n          }\n          *paramArray = array1Value;\n          if (!bVar10) {\n            iVar = 0;\n          }\n          paramArray[2] = iVar;\n          for (loopCounter = loopCounter - array1Value; 0 < loopCounter; loopCounter = loopCounter - iVar) {\n            iVar = (*(code *)paramArray[10])(inputArray,paramArray[8],array1Value,loopCounter,unaff_r4,unaff_r5);\n            if (iVar < 1) {\n              ushortVar = *(ushort *)(paramArray + 3);\n              goto LAB_080052b2;\n            }\n            array1Value = array1Value + iVar;\n          }\n        }\n      }\n      else if (((0 < paramArray[1]) || (0 < paramArray[0x10])) &&\n              (functionPtr = (code *)paramArray[0xb], functionPtr != (code *)0x0)) {\n        tempValue = *inputArray;\n        *inputArray = 0;\n        if ((ushortVar & 0x1000) == 0) {\n          array1Value = (*functionPtr)(inputArray,paramArray[8],ushortValue & 0x1000,1);\n          if ((array1Value == -1) && (ushortValue = *inputArray, ushortValue != 0)) {\n            if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n              *(ushort *)(paramArray + 3) = *(ushort *)(paramArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n              return returnValue;\n            }\n            *inputArray = tempValue;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          array1Value = paramArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(paramArray + 3) << 0x1d) < 0) &&\n           (array1Value = array1Value - paramArray[1], paramArray[0xd] != 0)) {\n          array1Value = array1Value - paramArray[0x10];\n        }\n        array1Value = (*(code *)paramArray[0xb])(inputArray,paramArray[8],array1Value,0);\n        ushortVar = *(ushort *)(paramArray + 3);\n        if ((array1Value == -1) &&\n           ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(paramArray + 3) = ushortVar | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return returnValue;\n        }\n        paramArray[1] = 0;\n        *paramArray = paramArray[4];\n        if (((int)((uint)ushortVar << 0x13) < 0) && ((array1Value != -1 || (*inputArray == 0)))) {\n          paramArray[0x15] = array1Value;\n        }\n        array2Value = (int *)paramArray[0xd];\n        *inputArray = tempValue;\n        if (array2Value != (int *)0x0) {\n          if (array2Value != paramArray + 0x11) {\n            update_data_080048dc(inputArray);\n          }\n          paramArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "inputArray",
                "param_2": "paramArray",
                "uVar1": "returnValue",
                "iVar2": "array1Value",
                "piVar3": "array2Value",
                "uVar4": "ushortValue",
                "uVar5": "ushortVar",
                "iVar6": "iVar",
                "pcVar7": "functionPtr",
                "iVar8": "loopCounter",
                "uVar9": "tempValue"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_data_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_parameters_0800532c",
            "code": "\nvoid initializeParameters_0800532c(undefined4 *parameters,undefined2 value1,undefined2 value2)\n\n{\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  *(undefined2 *)(parameters + 3) = value1;\n  parameters[0x19] = 0;\n  *(undefined2 *)((int)parameters + 0xe) = value2;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  memset_array_080048cc(parameters + 0x17,0,8);\n  parameters[9] = 0x8005609;\n  parameters[10] = 0x800562b;\n  parameters[0xb] = 0x8005663;\n  parameters[8] = parameters;\n  parameters[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_parameters_0800532c",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_and_initialize_memory_block_08005374",
            "code": "\nundefined4 * allocate_and_initialize_memory_block_08005374(undefined4 data_pointer,int block_size)\n\n{\n  undefined4 *allocated_block;\n  int block_offset;\n  \n  block_offset = (block_size + -1) * 0x68;\n  allocated_block = (undefined4 *)allocate_and_init_memory_block_08004978(data_pointer,block_offset + 0x74);\n  if (allocated_block != (undefined4 *)0x0) {\n    *allocated_block = 0;\n    allocated_block[1] = block_size;\n    allocated_block[2] = allocated_block + 3;\n    memset_array_080048cc(allocated_block + 3,0,block_offset + 0x68);\n  }\n  return allocated_block;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_memory_block_08005374",
                "param_1": "data_pointer",
                "param_2": "block_size",
                "puVar1": "allocated_block",
                "iVar2": "block_offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_structures_080053a0",
            "code": "\nvoid initialize_data_structures_080053a0(undefined4 *data_struct_ptr)\n\n{\n  undefined4 result;\n  undefined4 *base_address_ptr;\n  \n  if (data_struct_ptr[6] == 0) {\n    data_struct_ptr[0x12] = 0;\n    data_struct_ptr[0x13] = 0;\n    data_struct_ptr[0x14] = 0;\n    base_address_ptr = &DAT_200000a4;\n    data_struct_ptr[10] = &LAB_08005320_1;\n    if (data_struct_ptr == &DAT_200000a4) {\n      base_address_ptr = (undefined4 *)0x1;\n    }\n    if (data_struct_ptr == &DAT_200000a4) {\n      data_struct_ptr[6] = base_address_ptr;\n    }\n    result = initialize_data_08005400();\n    data_struct_ptr[1] = result;\n    result = initialize_data_08005400(data_struct_ptr);\n    data_struct_ptr[2] = result;\n    result = initialize_data_08005400(data_struct_ptr);\n    data_struct_ptr[3] = result;\n    initialize_parameters_0800532c(data_struct_ptr[1],4,0);\n    initialize_parameters_0800532c(data_struct_ptr[2],9,1);\n    initialize_parameters_0800532c(data_struct_ptr[3],0x12,2);\n    data_struct_ptr[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_structures_080053a0",
                "param_1": "data_struct_ptr",
                "uVar1": "result",
                "puVar2": "base_address_ptr"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_08005400",
            "code": "\nint * initializeData_08005400(undefined4 *outputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *startPointer;\n  int *currentPointer;\n  int **dataPointer;\n  \n  if (DAT_200000bc == 0) {\n    initialize_data_structures_080053a0(&DAT_200000a4);\n  }\n  dataPointer = (int **)&DAT_200000ec;\n  do {\n    currentPointer = dataPointer[2];\n    startPointer = dataPointer[1];\n    while (startPointer = (int *)((int)startPointer + -1), -1 < (int)startPointer) {\n      if (*(short *)(currentPointer + 3) == 0) {\n        *(undefined2 *)((int)currentPointer + 0xe) = 0xffff;\n        *(undefined2 *)(currentPointer + 3) = 1;\n        currentPointer[0x19] = 0;\n        *currentPointer = 0;\n        currentPointer[2] = 0;\n        currentPointer[1] = 0;\n        currentPointer[4] = 0;\n        currentPointer[5] = 0;\n        currentPointer[6] = 0;\n        memset_array_080048cc(currentPointer + 0x17,0,8,1,param4);\n        currentPointer[0xd] = 0;\n        currentPointer[0xe] = 0;\n        currentPointer[0x12] = 0;\n        currentPointer[0x13] = 0;\n        return currentPointer;\n      }\n      currentPointer = currentPointer + 0x1a;\n    }\n    if (*dataPointer == (int *)0x0) {\n      startPointer = (int *)allocate_and_initialize_memory_block_08005374(outputData,4);\n      *dataPointer = startPointer;\n      if (startPointer == (int *)0x0) {\n        *outputData = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataPointer = (int **)*dataPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_08005400",
                "param_1": "outputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "startPointer",
                "piVar2": "currentPointer",
                "ppiVar3": "dataPointer"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        memset_array_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_memory_and_set_flags_080054b4",
            "code": "\nundefined4 checkMemoryAndSetFlags_080054b4(undefined4 input,int address,undefined4 *output,uint *flags)\n\n{\n  int result;\n  undefined4 status;\n  undefined stackData [4];\n  uint localData;\n  \n  if ((*(short *)(address + 0xe) < 0) ||\n     (result = initialize_memory_080056d4(input,(int)*(short *)(address + 0xe),stackData), result < 0)) {\n    *flags = 0;\n    if ((int)((uint)*(ushort *)(address + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *flags = (uint)((localData & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_080054f4:\n  *output = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_memory_and_set_flags_080054b4",
                "param_1": "input",
                "param_2": "address",
                "param_3": "output",
                "param_4": "flags",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_4c": "stackData",
                "local_48": "localData"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "allocate_and_initialize_block_080054fc",
            "code": "\nvoid allocateAndInitializeBlock_080054fc(int blockPtr,int *blockInfo)\n\n{\n  ushort flag;\n  int allocatedBlock;\n  int param1Copy;\n  int *param2Copy;\n  \n  if (-1 < (int)((uint)*(ushort *)(blockInfo + 3) << 0x1e)) {\n    param1Copy = blockPtr;\n    param2Copy = blockInfo;\n    flag = check_memory_and_set_flags_080054b4(blockPtr,blockInfo,&param1Copy,&param2Copy);\n    allocatedBlock = allocate_and_init_memory_block_08004978(blockPtr,param1Copy);\n    if (allocatedBlock != 0) {\n      *(undefined **)(blockPtr + 0x28) = &LAB_08005320_1;\n      *blockInfo = allocatedBlock;\n      *(ushort *)(blockInfo + 3) = *(ushort *)(blockInfo + 3) | 0x80;\n      blockInfo[5] = param1Copy;\n      blockInfo[4] = allocatedBlock;\n      if ((param2Copy != (int *)0x0) &&\n         (allocatedBlock = verify_and_set_system_status_080056f8(blockPtr,(int)*(short *)((int)blockInfo + 0xe)), allocatedBlock != 0)) {\n        *(ushort *)(blockInfo + 3) = *(ushort *)(blockInfo + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(blockInfo + 3) = flag | *(ushort *)(blockInfo + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(blockInfo + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(blockInfo + 3) = *(ushort *)(blockInfo + 3) & 0xfffc | 2;\n  }\n  *blockInfo = (int)blockInfo + 0x47;\n  blockInfo[4] = (int)blockInfo + 0x47;\n  blockInfo[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "allocate_and_initialize_block_080054fc",
                "param_1": "blockPtr",
                "param_2": "blockInfo",
                "uVar1": "flag",
                "iVar2": "allocatedBlock",
                "local_18": "param1Copy",
                "local_14": "param2Copy"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "analyze_and_execute_080055d0",
            "code": "\nint analyze_and_execute_080055d0(uint input_value)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int current_value;\n  code *function_ptr;\n  undefined4 extra_param_1;\n  undefined4 extra_param_2;\n  undefined4 return_address;\n  undefined4 *data_ptr_ptr;\n  \n  data_ptr = DAT_200000a0;\n  data_ptr_ptr = &DAT_200000a0;\n  if (0x1f < input_value) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  current_value = DAT_200000a0[0x11];\n  if ((current_value != 0) && (function_ptr = *(code **)(current_value + input_value * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(current_value + input_value * 4) = 0;\n      (*function_ptr)(input_value);\n    }\n    return 0;\n  }\n  result = check_success(DAT_200000a0);\n  DAT_20000674 = 0;\n  current_value = initialize_data(result,input_value,input_value,0,data_ptr_ptr,extra_param_1,extra_param_2,return_address);\n  if ((current_value == -1) && (DAT_20000674 != 0)) {\n    *data_ptr = DAT_20000674;\n  }\n  return current_value;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "analyze_and_execute_080055d0",
                "param_1": "input_value",
                "piVar1": "data_ptr",
                "uVar2": "result",
                "iVar3": "current_value",
                "pcVar4": "function_ptr",
                "unaff_r4": "extra_param_1",
                "unaff_r5": "extra_param_2",
                "in_lr": "return_address",
                "puVar5": "data_ptr_ptr",
                "initialize_data_080040fc": "initialize_data",
                "thunk_check_success_0800410c": "check_success"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_return_value_thunk_0800410c",
            "code": "\nuint32 getReturnValue_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_return_value_thunk_0800410c",
                "undefined4": "uint32"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_value_based_on_condition_08005608",
            "code": "\nvoid updateValueBasedOnCondition_08005608(undefined4 param1,int param2)\n\n{\n  int errorCode;\n  uint updatedValue;\n  bool isError;\n  \n  errorCode = initializeAndStoreError(param1,(int)*(short *)(param2 + 0xe));\n  isError = -1 < errorCode;\n  if (isError) {\n    updatedValue = *(int *)(param2 + 0x54) + errorCode;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isError) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isError) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_value_based_on_condition_08005608",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "errorCode",
                "uVar2": "updatedValue",
                "bVar3": "isError",
                "initialize_and_store_error_0800573c": "initializeAndStoreError"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_0800562a",
            "code": "\nvoid processData_0800562a(int *dataPtr,int structPtr,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 tempLR;\n  \n  if ((int)((uint)*(ushort *)(structPtr + 0xc) << 0x17) < 0) {\n    initialize_with_error_checking_08005718(dataPtr,(int)*(short *)(structPtr + 0xe),0,2);\n  }\n  *(ushort *)(structPtr + 0xc) = *(ushort *)(structPtr + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_and_verify_data_080040ec((int)*(short *)(structPtr + 0xe),paramA,paramB,paramB,paramB,temp4,\n                       temp5,tempLR);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *dataPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "dataPtr",
                "param_2": "structPtr",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "unaff_r4": "temp4",
                "unaff_r5": "temp5",
                "in_lr": "tempLR"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_and_check_errors_08005662",
            "code": "\nvoid initializeAndCheckErrors_08005662(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isError;\n  \n  result = initialize_with_error_checking_08005718(param1,(int)*(short *)(param2 + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_and_check_errors_08005662",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_memory_080056d4",
            "code": "\nvoid initializeMemory_080056d4(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int memoryInitializationResult;\n  \n  DAT_20000674 = 0;\n  memoryInitializationResult = initialize_memory_080040d6(value1,value2,value2,0,value3);\n  if ((memoryInitializationResult == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_memory_080056d4",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "memoryInitializationResult"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "verify_and_set_system_status_080056f8",
            "code": "\nvoid verify_and_set_system_status_080056f8(int *output,undefined4 input)\n\n{\n  int system_status;\n  \n  DAT_20000674 = 0;\n  system_status = verify_system_status_080040e0(input);\n  if ((system_status == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "verify_and_set_system_status_080056f8",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "system_status"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_with_error_checking_08005718",
            "code": "\nvoid initializeWithErrorChecking_08005718(int *outputPointer,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int status;\n  \n  DAT_20000674 = 0;\n  status = initialize_080040e4(inputParam1,inputParam2,inputParam3,inputParam3,inputParam3);\n  if ((status == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_with_error_checking_08005718",
                "param_1": "outputPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "status"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_and_store_error_0800573c",
            "code": "\nvoid initialize_and_store_error_0800573c(int *error_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int initialize_result;\n  \n  DAT_20000674 = 0;\n  initialize_result = initialize_program_080040e8(param_2,param_3,param_4,param_4,param_4);\n  if ((initialize_result == -1) && (DAT_20000674 != 0)) {\n    *error_ptr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_and_store_error_0800573c",
                "param_1": "error_ptr",
                "iVar1": "initialize_result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "do_analysis_08005760",
            "code": "\nvoid doAnalysis_08005760(void)\n\n{\n  code *jumptable;\n  \n  jumptable = doAnalysis_08005760;\n  execute_with_analysis_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "do_analysis_08005760",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 122707,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}