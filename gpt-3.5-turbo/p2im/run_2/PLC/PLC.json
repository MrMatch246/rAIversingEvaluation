{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "decode_and_set_flag_080006b4",
                "param_1": "input",
                "bVar1": "is_overflow",
                "uVar2": "byte_value",
                "iVar3": "loop_result",
                "bVar4": "counter"
            },
            "code": "int decode_and_set_flag_080006b4(int **input)\n{\n  bool is_overflow;\n  undefined byte_value;\n  int loop_result;\n  byte counter;\n  if (input[0][2] > 1) {\n    decode_and_set_flag_080006b4_080041bc(input[0][2], 0);\n  }\n  input[0][73] = 0;\n  if (input[0][1] < 4) {\n    is_overflow = false;\n    while (loop_result = (**(code **)(**input + 8))(), loop_result != 0) {\n      counter = input[0][73];\n      byte_value = (**(code **)(**input + 0xc))();\n      input[0][counter + 9] = byte_value;\n      counter = input[0][73] + 1;\n      input[0][73] = counter;\n      if (counter > 63) {\n        is_overflow = true;\n      }\n    }\n  }\n  else {\n    is_overflow = false;\n  }\n  input[0][20] = input[0][20] + 1;\n  if (is_overflow) {\n    input[0][21] = input[0][21] + 1;\n    return -3;\n  }\n  return (int)input[0][73];\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_080034da(int value_to_find, short *array) {\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value_to_find) {\n      break;\n    }\n    array = array + 6;\n  }\n  return *(int *)(array + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_080035fc",
                "param_1": "value",
                "DAT_08003718": "PTR_DAT_08003718",
                "DAT_0800371c": "PTR_DAT_0800371C",
                "DAT_08003720": "PTR_DAT_08003720",
                "DAT_08003724": "PTR_DAT_08003724",
                "DAT_08003728": "PTR_DAT_08003728",
                "DAT_0800372c": "PTR_DAT_0800372C",
                "DAT_08003730": "PTR_DAT_08003730",
                "DAT_08003734": "PTR_DAT_08003734",
                "DAT_08003738": "PTR_DAT_08003738",
                "DAT_0800373c": "PTR_DAT_0800373C",
                "DAT_08003740": "PTR_DAT_08003740",
                "DAT_08003744": "PTR_DAT_08003744",
                "DAT_08003748": "PTR_DAT_08003748"
            },
            "code": "void set_bits_080035fc(uint32_t *value) {\n    uint32_t *data_ptr = (uint32_t*)DAT_0800374c;\n    if (*value == DAT_08003718) {\n        data_ptr[0x44 / 4] &= 0xFFFFFFFE;\n    }\n    if (*value == 0x40000000) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFFE;\n    }\n    if (*value == DAT_0800371c) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFFD;\n    }\n    if (*value == DAT_08003720) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFFBU;\n    }\n    if (*value == DAT_08003724) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFF7U;\n    }\n    if (*value == DAT_08003728) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFEFU;\n    }\n    if (*value == DAT_0800372c) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFDFU;\n    }\n    if (*value == DAT_08003730) {\n        data_ptr[0x44 / 4] &= 0xFFFFFFFDU;\n    }\n    if (*value == DAT_08003734) {\n        data_ptr[0x44 / 4] &= 0xFFFEFFFFU;\n    }\n    if (*value == DAT_08003738) {\n        data_ptr[0x44 / 4] &= 0xFFFDFFFFU;\n    }\n    if (*value == DAT_0800373c) {\n        data_ptr[0x44 / 4] &= 0xFFFBFFFFU;\n    }\n    if (*value == DAT_08003740) {\n        data_ptr[0x40 / 4] &= 0xFFFFFFBFU;\n    }\n    if (*value == DAT_08003744) {\n        data_ptr[0x40 / 4] &= 0xFFFFFF7FU;\n    }\n    if (*value == DAT_08003748) {\n        data_ptr[0x40 / 4] &= 0xFFFFFEFFU;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_combination_valid_08003dd0",
                "param_1": "combination_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_08003df0": "combination_offsets_table",
                "byte": "combination_byte",
                "get_combination_offset": "get_combination_offset",
                "combine_bytes_at_offsets_0800312c": "combine_bytes_at_offsets"
            },
            "code": "bool is_combination_valid_08003dd0(int combination_index) {\n  uint16_t combined_bytes = combine_bytes_at_offsets(get_combination_offset(combination_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "is_combination_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "set_bits_and_check_input_08000c8c",
                "local_54": "param_1",
                "local_50": "param_2",
                "local_3c": "param_3",
                "local_38": "param_4",
                "local_34": "param_5",
                "local_30": "param_6",
                "local_2c": "param_7",
                "local_28": "param_8",
                "local_24": "local_var_1",
                "local_20": "local_var_2",
                "local_1c": "local_var_3",
                "local_18": "local_var_4",
                "local_14": "local_var_5",
                "input_size_multiplier": "local_var_6"
            },
            "code": "void set_bits_and_check_input_08000c8c(void)\n{\n  uint input_size_multiplier = get_value_from_pointer(DAT_08000d38) >> 0x26;\n  set_bits_in_memory(0xffffffff, 0, 0);\n  set_bit_in_memory(DAT_08000d30 + 0x40, 0x10000000);\n  set_bit_in_memory(DAT_08000d34, 0xc000);\n  set_input_params_and_process(1, 0x50000, 2, 0x400000, 8, 0x150, 2, 7);\n  check_for_flag();\n  process_input_params_and_check_input(0xf, 2, 0, 0x1400, 0x1000, input_size_multiplier);\n}\n",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_bits_and_check_input_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "set_value_at_index_08000a4e",
                "param_1": "input_array",
                "param_2": "index",
                "bVar1": "byte_value",
                "uVar2": "combined_value"
            },
            "code": "uint8_t set_value_at_index_08000a4e(uint8_t* input_array, uint8_t index, uint16_t value) {\n    uint8_t byte_value = combine_bytes(*(uint8_t*)(input_array + 0xb), *(uint8_t*)(input_array + 0xc));\n    uint16_t combined_value = combine_bytes(*(uint8_t*)(input_array + 0xd), *(uint8_t*)(input_array + 0xe));\n    *(uint16_t*)(input_array + index * 2) = combined_value;\n    *(uint8_t*)(input_array + 0x49) = 6;\n    calculate_crc_and_set_flag(input_array);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "initialize_device_and_set_flags_08004658",
                "do_nothing_08004646": "do_nothing",
                "initialize_device_08000c4c": "initialize_device",
                "decode_and_set_flags_08000c64": "decode_and_set_flags",
                "DAT_08004674": "flag",
                "check_and_calculate_shift_amount_08004338": "calculate_shift_amount"
            },
            "code": "void initialize_device_and_set_flags_08004658(void)\n{\n  do_nothing();\n  initialize_device();\n  do {\n    do {\n      decode_and_set_DAT_08004674s();\n    } while (DAT_08004674 == 0);\n    calculate_shift_amount();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "initialize_device_and_set_flags_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_value_if_not_negative_080034f4",
                "param_1": "value",
                "uVar1": "found_value",
                "find_value_in_array_080034da": "search_array"
            },
            "code": "int find_value_if_not_negative_080034f4(int value) {\n  int found_value;\n  if (value != -1) {\n    found_value = search_array();\n    return found_value;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_value_if_not_negative_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_0800355e",
                "param_1": "needle",
                "param_2": "haystack",
                "*param_2": "*haystack"
            },
            "code": "int find_short_0800355e(int needle, short *haystack)\n{\n    if (needle == -1) {\n        return 0;\n    }\n    while (*haystack != -1) {\n        if (needle == *haystack) {\n            return 1;\n        }\n        haystack += 6;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "find_and_set_zero_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "zero"
            },
            "code": "void find_and_set_zero_0800573c(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *ptr = PTR_DAT_0800575c;\n    *(undefined4 *)ptr = 0;\n    int zero = get_zero_080040e8(arg1, arg2, arg3, arg3, arg3);\n    if (zero == -1 && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "find_and_set_zero_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "validate_combination_08003e54",
                "param_1": "combination_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "is_valid",
                "uVar2": "combination_index",
                "bit_position": "bit_position"
            },
            "code": "void validate_combination_08003e54(int combination_address, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int is_valid = is_combination_valid();\n    if (combination_address != 0 && is_valid == 0) {\n        uint combination_index = (uint)*(byte *)(combination_address + 0x44);\n        *(undefined4 *)(PTR_DAT_08003ea0 + combination_index * 4) = param_2;\n        *(int *)(PTR_DAT_08003ea4 + combination_index * 4) = combination_address;\n        int bit_position = (int)*(char *)(combination_address + 0x5c);\n        set_bits_in_memory_08000e60(bit_position, 0, 1, combination_index, param_4);\n        FUNC_08000ec4(bit_position);\n        check_params_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + combination_index * 4), combination_address + 0x45, 1);\n    }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "validate_combination_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr",
                "uVar2": "data1",
                "uStack_c": "data2",
                "uStack_8": "data3",
                "uStack_4": "data4",
                "PTR_PTR_DAT_08005008": "PTR_DATA",
                "FUNC_080053a0": "cleanup",
                "FUNC_08004a84": "perform_operation"
            },
            "code": "void process_data_08004fdc(int data1, int data2, int data3, int data4)\n{\n  int ptr = *(int *)PTR_PTR_DAT_08005008;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  perform_operation(ptr, *(int *)(ptr + 8), data1, &data2, data3, &data2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_080053a0(iVar1);\n  }\n  FUNC_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "set_memory_region_permissions_080056d4",
                "param_1": "result",
                "param_2": "start_addr",
                "param_3": "size",
                "param_4": "perm",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void set_memory_region_permissions_080056d4(int *result, unsigned int start_addr, unsigned int size, unsigned int perm, unsigned int zero){\n  unsigned int *ptr = PTR_DAT_080056f4;\n  *ptr = 0;\n  int status = set_memory_region_permissions_080056d4_080040d6(start_addr, size, size, perm, zero);\n  if (status == -1 && *ptr != 0){\n    *result = *ptr;\n  }\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "set_memory_region_permissions_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_default_value_thunk_0800410c",
                "undefined4": "int"
            },
            "code": "int get_default_value_thunk_0800410c(void)\n{\n  int default_value = 1;\n  return default_value;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_default_value_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "clear_bit_and_reset_memory_080033d8",
                "param_1": "value",
                "local_1c": "array",
                "find_value_if_not_negative_080034f4": "find_non_negative_value",
                "get_array_value_08003380": "get_array_value",
                "clear_bit_08000f72": "clear_bit",
                "reset_memory_location_08000f56": "reset_memory_location"
            },
            "code": "void clear_bit_and_reset_memory_080033d8(int value)\n{\n  int array[5];\n  array[0] = find_non_negative_value(value, PTR_DAT_08003408);\n  if ((array[0] != 0) && ((get_array_value(value) == 0) || (get_array_value(value) == 0x10)))) {\n    clear_bit(array,get_array_value(value));\n    reset_memory_location(array);\n  }\n  return;\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "clear_bit_and_reset_memory_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = get_shifted_value_from_pointer_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = get_shifted_value_from_pointer_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = get_shifted_value_from_pointer_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = get_shifted_value_from_pointer_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = get_shifted_value_from_pointer_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = get_shifted_value_from_pointer_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_shifted_value_from_pointer_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = get_shifted_value_from_pointer_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = get_shifted_value_from_pointer_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = get_shifted_value_from_pointer_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = get_shifted_value_from_pointer_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_shifted_value_from_pointer_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = get_shifted_value_from_pointer_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = get_shifted_value_from_pointer_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = get_shifted_value_from_pointer_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = get_shifted_value_from_pointer_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = get_shifted_value_from_pointer_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = get_shifted_value_from_pointer_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = get_shifted_value_from_pointer_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = get_shifted_value_from_pointer_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "process_input_08002488",
                "param_1": "input",
                "param_2": "input_length",
                "puVar1": "frequency_table",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "calculated_frequency",
                "max_frequency": "max_frequency"
            },
            "code": "uint32_t process_input_08002488(uint32_t *input, uint32_t input_length)\n{\n  uint32_t *frequency_table = DAT_080025d0;\n  uint32_t max_frequency = *frequency_table & 0xf;\n  if (input == NULL) {\n    return 1;\n  }\n  if (max_frequency < input_length) {\n    *(char *)frequency_table = (char)input_length;\n    if (input_length != (*frequency_table & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*input & 2) != 0) {\n    if ((*input & 4) != 0) {\n      DAT_080025d4[2] |= 0x1c00;\n    }\n    if ((*input & 8) != 0) {\n      DAT_080025d4[2] |= 0xe000;\n    }\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffff0f) | input[2];\n  }\n  if ((*input & 1) != 0) {\n    uint32_t current_frequency = input[1];\n    if (current_frequency == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (current_frequency - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d4[2] = current_frequency | (DAT_080025d4[2] & 0xfffffffc);\n    uint32_t start_time = get_current_time_08000e30();\n    while ((DAT_080025d4[2] & 0xc) != input[1] * 4) {\n      uint32_t current_time = get_current_time_08000e30();\n      if (current_time - start_time > 5000) {\n        return 3;\n      }\n    }\n  }\n  if (input_length < max_frequency) {\n    *(char *)frequency_table = (char)input_length;\n    if (input_length != (*frequency_table & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*input & 4) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffe3ff) | input[3];\n  }\n  if ((*input & 8) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffff1fff) | (input[4] << 3);\n  }\n  uint32_t calculated_frequency = calculate_frequency_080023b4();\n  *(uint32_t *)PTR_DAT_080025dc = calculated_frequency >> PTR_DAT_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  check_input_and_set_bits_08000d98(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "process_input_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "assign_pointer_to_array_element_08004544",
                "param_1": "array_pointer",
                "param_2": "element_1",
                "param_3": "element_2",
                "param_4": "element_3",
                "param_5": "element_4"
            },
            "code": "void assign_pointer_to_array_element_08004544(undefined4 *array_pointer, undefined element_1, undefined element_2, undefined element_3, undefined element_4)\n{\n  *array_pointer = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(array_pointer + 1) = element_1;\n  *(undefined *)((int)array_pointer + 5) = element_2;\n  *(undefined *)((int)array_pointer + 6) = element_3;\n  *(undefined *)((int)array_pointer + 7) = element_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "assign_pointer_to_array_element_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_value_08003cc8",
                "sVar1": "current_value",
                "puVar2": "data_pointer",
                "uVar3": "processed_value",
                "iVar4": "found_value",
                "uVar5": "value"
            },
            "code": "void process_value_08003cc8(void)\n{\n  short current_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  int found_value = find_value_if_not_negative(current_value, PTR_DAT_08003d0c);\n  if (found_value != 0) {\n    undefined4 value = find_value_if_not_negative(current_value, PTR_DAT_08003d0c);\n    undefined2 processed_value = get_processed_value(value, PTR_DAT_08003d10);\n    undefined *data_pointer = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = processed_value;\n    *(short *)(data_pointer + 0x58) = current_value;\n    *(undefined4 *)(data_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(data_pointer + 0x54) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    process_data(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_value_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data_1",
                "param_2": "data_2",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "bit_index",
                "uVar6": "data_value_1",
                "uVar7": "data_value_3",
                "uVar9": "data_value_2",
                "iVar8": "int_value_1",
                "iVar10": "int_value_2"
            },
            "code": "void update_data_08000fb4(uint *data_1, uint *data_2)\n{\n  uint *data_ptr_1;\n  uint *data_ptr_2;\n  uint bit_mask;\n  uint bit_value;\n  uint bit_index;\n  uint data_value_1;\n  uint data_value_2;\n  uint data_value_3;\n  uint data_value_4;\n  int int_value_1;\n  int int_value_2;\n  for (bit_index = 0; bit_index < 0x10; bit_index++) {\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_value = bit_mask & *data_2;\n    if (bit_mask == bit_value) {\n      if ((data_2[1] == 2) || (data_2[1] == 0x12)) {\n        int_value_1 = (bit_index >> 3) + 8;\n        int_value_2 = (bit_index & 7) << 2;\n        data_1[int_value_1] = data_1[int_value_1] & ~(0xf << int_value_2) | data_2[4] << int_value_2;\n      }\n      data_value_1 = bit_index << 1;\n      bit_mask = ~(3 << (data_value_1 & 0xff));\n      *data_1 = *data_1 & bit_mask | (data_2[1] & 3) << (data_value_1 & 0xff);\n      data_value_3 = data_2[1];\n      if (((data_value_3 - 1 < 2) || (data_value_3 == 0x11)) || (data_value_3 == 0x12)) {\n        data_1[2] = data_1[2] & bit_mask | data_2[3] << (data_value_1 & 0xff);\n        data_1[1] = data_1[1] & ~bit_mask | ((data_2[1] << 0x1b) >> 0x1f) << (bit_index & 0xff);\n      }\n      data_1[3] = bit_mask & data_1[3] | data_2[2] << (data_value_1 & 0xff);\n      if ((data_2[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        int_value_2 = (bit_index & 3) << 2;\n        if (data_1 == PTR_DAT_08001190) {\n          int_value_1 = 0;\n        }\n        else if (data_1 == PTR_DAT_08001194) {\n          int_value_1 = 1;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x100) {\n          int_value_1 = 2;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x200) {\n          int_value_1 = 3;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x300) {\n          int_value_1 = 4;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x400) {\n          int_value_1 = 5;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x500) {\n          int_value_1 = 6;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x600) {\n          int_value_1 = 7;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x700) {\n          int_value_1 = 8;\n        }\n        else if (data_1 == PTR_DAT_08001194 + 0x800) {\n          int_value_1 = 9;\n        }\n        else {\n          int_value_1 = 10;\n        }\n        *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) =\n             *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) & ~(0xf << int_value_2) | int_value_1 << int_value_2;\n        data_ptr_1 = PTR_DAT_08001188;\n        bit_mask = ~bit_value;\n        data_value_2 = *PTR_DAT_08001188 & bit_mask;\n        if ((data_2[1] & 0x10000) != 0) {\n          data_value_2 = bit_value | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = data_value_2;\n        data_ptr_2 = PTR_DAT_08001188;\n        data_value_2 = bit_mask & data_ptr_1[1];\n        if ((data_2[1] & 0x20000) != 0) {\n          data_value_2 = bit_value | data_ptr_1[1];\n        }\n        PTR_DAT_08001188[1] = data_value_2;\n        data_ptr_1 = PTR_DAT_08001188;\n        data_value_2 = bit_mask & data_ptr_2[2];\n        if ((data_2[1] & 0x100000) != 0) {\n          data_value_2 = bit_value | data_ptr_2[2];\n        }\n        PTR_DAT_08001188[2] = data_value_2;\n        bit_mask = bit_mask & data_ptr_1[3];\n        if ((data_2[1] & 0x200000) != 0) {\n          bit_mask = bit_value | data_ptr_1[3];\n        }\n        PTR_DAT_08001188[3] = bit_mask;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "input_ptr",
                "puVar3": "input_ptr_9"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] &= 0xfffff8ff;\n  **input |= 1;\n  **input &= 0xfffffbff;\n  uint32_t *input_ptr = *input;\n  if ((input_ptr[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((input_ptr[5] & 4) != 0) {\n      uint32_t *input_ptr_9 = input[9];\n      input[9] = (uint32_t *)((int)input_ptr_9 + 1);\n      *(char *)input_ptr_9 = (char)input_ptr[4];\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      input_ptr = input[9];\n      input[9] = (uint32_t *)((int)input_ptr + 1);\n      *(char *)input_ptr = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_FUN_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      execute_function_if_flag_set_and_not_space_080038d0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    process_input_08001bfc_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_device_08002d72",
                "param_1": "device_ptr",
                "do_nothing_08002d70": "do_nothing",
                "PTR_": "device_ptr",
                "DAT_": "data_"
            },
            "code": "int initialize_device_08002d72(int *PTR_) {\n    if (PTR_ != NULL) {\n        if (*(char *)((int)PTR_ + 0x39) == '\\0') {\n            *(undefined *)(PTR_ + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)PTR_ + 0x39) = 0x24;\n        *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\n        call_init_function(PTR_);\n        *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\n        *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\n        *(uint *)(*PTR_ + 0xc) |= 0x2000;\n        PTR_[0xf] = 0;\n        *(undefined *)((int)PTR_ + 0x39) = 0x20;\n        *(undefined *)((int)PTR_ + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "initialize_device_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_param_080007f0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "is_param_found",
                "bVar2": "byte_value",
                "cVar3": "char_value1",
                "cVar4": "char_value2",
                "iVar5": "int_value1",
                "iVar7": "int_value2",
                "uVar6": "uint_value1"
            },
            "code": "int check_param_080007f0(int param1, int param2, uint param3, int param4) {\n    bool is_param_found;\n    byte byte_value;\n    char char_value1;\n    char char_value2;\n    int int_value1;\n    uint uint_value1;\n    int int_value2;\n\n    uint_value1 = 0;\n    do {\n        if (7 < uint_value1) {\n            is_param_found = false;\n            goto LAB_0800080a;\n            if (!is_param_found) {\n                *(short *)(param1 + 0x54) = *(short *)(param1 + 0x54) + 1;\n                return 1;\n            }\n            int_value2 = *(byte *)(param1 + 10) - 1;\n            switch(*(byte *)(param1 + 10)) {\n                case 1:\n                case 2:\n                case 0xf:\n                    goto switchD_08000816_caseD_1;\n                case 3:\n                case 4:\n                case 0x10:\n                    char_value1 = combine_bytes(*(undefined *)(param1 + 0xb), *(undefined *)(param1 + 0xc), param3, int_value2, param4);\n                    char_value2 = combine_bytes(*(undefined *)(param1 + 0xd), *(undefined *)(param1 + 0xe));\n                    if (*(byte *)(param1 + 0x60) < (byte)(char_value2 + char_value1)) {\n                        return 2;\n                    }\n                    return 0;\n                case 5:\n                    int_value2 = combine_bytes(*(undefined *)(param1 + 0xb), *(undefined *)(param1 + 0xc), param3, int_value2, param4);\n                    if ((uint)*(byte *)(param1 + 0x60) < (uint)(int_value2 << 0x14) >> 0x18) {\n                        return 2;\n                    }\n                    return 0;\n                case 6:\n                    byte_value = combine_bytes(*(undefined *)(param1 + 0xb), *(undefined *)(param1 + 0xc), param3, int_value2, param4);\n                    if (*(byte *)(param1 + 0x60) < byte_value) {\n                        return 2;\n                    }\n                    return 0;\n                default:\n                    return 0;\n            }\n        }\n        param3 = (uint)*(byte *)(param1 + 10);\n        if ((byte)PTR_DAT_080008c8[uint_value1] == param3) {\n            is_param_found = true;\n            goto LAB_0800080a;\n        }\n        uint_value1 = uint_value1 + 1 & 0xff;\n    } while(true);\nswitchD_08000816_caseD_1:\n    int_value2 = combine_bytes(*(undefined *)(param1 + 0xb), *(undefined *)(param1 + 0xc), param3, int_value2, param4);\n    int_value1 = combine_bytes(*(undefined *)(param1 + 0xd), *(undefined *)(param1 + 0xe));\n    if ((uint)*(byte *)(param1 + 0x60) < (((uint)(int_value2 << 0xc) >> 0x10) + ((uint)(int_value1 << 0xc) >> 0x10) & 0xff)) {\n        return 2;\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_param_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "initialize_parameters_0800562a",
                "param_1": "output",
                "param_2": "search_result_address",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "sVar1": "parameter_1",
                "puVar2": "pointer_to_dat",
                "iVar3": "set_parameters_result",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr"
            },
            "code": "void initialize_parameters_0800562a(int *output, int search_result_address, int constant_1, int constant_2) {\n  short parameter_1 = *(short *)(search_result_address + 0xe);\n  *(ushort *)(search_result_address + 0xc) = *(ushort *)(search_result_address + 0xc) & 0xefff;\n  int set_parameters_result = set_parameters_from_search_result(parameter_1, constant_1, constant_2, constant_2, constant_2);\n  if (set_parameters_result == -1 && *(int *)PTR_DAT_080056b0 != 0) {\n    *output = *(int *)PTR_DAT_080056b0;\n  }\n}\n",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "initialize_parameters_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_struct_if_param1_equals_one_080044d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void initialize_struct_if_param1_equals_one_080044d8(int param1, int param2, undefined4 param3, undefined4 param4) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        initialize_struct_0800447c(PTR_DAT_080044f8, DAT_080044f4, param3, 0xffff, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_struct_if_param1_equals_one_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_combination_valid_08003df4",
                "param_1": "index",
                "uVar1": "combined_bytes"
            },
            "code": "bool is_combination_valid_08003df4(int index)\n{\n  uint16_t combined_bytes = combine_bytes_at_offsets(*(uint32_t *)(PTR_DAT_08003e14 + (uint32_t)*(uint8_t *)(index + 0x44) * 4));\n  return (combined_bytes & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_combination_valid_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "allocate_and_initialize_memory_block_08005400",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "fill_value",
                "param_4": "padding_size",
                "piVar1": "current_block_ptr",
                "piVar2": "memory_block_ptr",
                "iVar3": "first_block",
                "ppiVar4": "next_block_ptr_ptr",
                "PTR_PTR_DAT_08005474": "first_block_ptr_ptr"
            },
            "code": "int* allocate_and_initialize_memory_block_08005400(undefined4 *error_code, undefined4 size, undefined4 fill_value, undefined4 padding_size)\\n\\\n{\\n\\\n    int *memory_block_ptr;\\n\\\n    int *current_block_ptr;\\n\\\n    int **next_block_ptr_ptr;\\n\\\n    int **PTR_PTR_DAT_08005474 = (int **)PTR_PTR_DAT_08005474;\\n\\\n    int first_block = *(int *)PTR_PTR_DAT_08005474;\\n\\\n    if (*(int *)(first_block + 0x18) == 0)\\n\\\n    {\\n\\\n        initialize_memory_block_080053a0(first_block);\\n\\\n    }\\n\\\n    next_block_ptr_ptr = (int **)(first_block + 0x48);\\n\\\n    do\\n\\\n    {\\n\\\n        current_block_ptr = next_block_ptr_ptr[1];\\n\\\n        memory_block_ptr = next_block_ptr_ptr[2];\\n\\\n        while (current_block_ptr = (int *)((int)current_block_ptr + -1), -1 < (int)current_block_ptr)\\n\\\n        {\\n\\\n            if (*(short *)(memory_block_ptr + 3) == 0)\\n\\\n            {\\n\\\n                *(undefined2 *)((int)memory_block_ptr + 0xe) = 0xffff;\\n\\\n                *(undefined2 *)(memory_block_ptr + 3) = 1;\\n\\\n                memory_block_ptr[0x19] = 0;\\n\\\n                *memory_block_ptr = 0;\\n\\\n                memory_block_ptr[2] = 0;\\n\\\n                memory_block_ptr[1] = 0;\\n\\\n                memory_block_ptr[4] = 0;\\n\\\n                memory_block_ptr[5] = 0;\\n\\\n                memory_block_ptr[6] = 0;\\n\\\n                fill_with_value_080048cc(memory_block_ptr + 0x17, fill_value, 8, 1, padding_size);\\n\\\n                memory_block_ptr[0xd] = 0;\\n\\\n                memory_block_ptr[0xe] = 0;\\n\\\n                memory_block_ptr[0x12] = 0;\\n\\\n                memory_block_ptr[0x13] = 0;\\n\\\n                return memory_block_ptr;\\n\\\n            }\\n\\\n            memory_block_ptr = memory_block_ptr + 0x1a;\\n\\\n        }\\n\\\n        if (*next_block_ptr_ptr == (int *)0x0)\\n\\\n        {\\n\\\n            current_block_ptr = (int *)allocate_memory_block_with_padding_08005374(error_code, size);\\n\\\n            *next_block_ptr_ptr = current_block_ptr;\\n\\\n            if (current_block_ptr == (int *)0x0)\\n\\\n            {\\n\\\n                *error_code = 0xc;\\n\\\n                return (int *)0x0;\\n\\\n            }\\n\\\n        }\\n\\\n        next_block_ptr_ptr = (int **)*next_block_ptr_ptr;\\n\\\n    } while (true);\\n\\\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_memory_block_with_padding_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_08003582",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int compare_and_return_08003582(int a, int b) {\n  if (a != b) {\n    if (a == 0) {\n      return b;\n    }\n    if (b == 0) {\n      return a;\n    }\n    a = 0;\n  }\n  return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_return_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "execute_and_update_flags_08005760",
                "UNRECOVERED_JUMPTABLE": "function_ptr",
                "PTR_DAT_080057fc": "flag_1",
                "PTR_DAT_08005800": "flag_2",
                "PTR_DAT_08005804": "flag_3",
                "PTR_DAT_08005808": "flag_4",
                "PTR_DAT_0800580c": "flag_5",
                "PTR_DAT_08005810": "flag_6",
                "PTR_DAT_08005814": "flag_7",
                "PTR_DAT_08005818": "flag_8",
                "PTR_DAT_0800581c": "flag_9",
                "PTR_DAT_08005820": "flag_10",
                "PTR_DAT_08005824": "flag_11",
                "PTR_DAT_08005828": "flag_12",
                "execute_function_080051ac": "execute_function"
            },
            "code": "void execute_and_update_flags_08005760(void)\n{\n  code *function_ptr;\n  function_ptr = execute_and_update_flags_08005760;\n  execute_function();\n  if (*(int *)PTR_DAT_080057fc << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_080057fc = 1;\n  }\n  if (*(int *)PTR_DAT_08005800 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005800 = 1;\n  }\n  if (*(int *)PTR_DAT_08005804 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005804 = 1;\n  }\n  if (*(int *)PTR_DAT_08005808 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005808 = 1;\n  }\n  if (*(int *)PTR_DAT_0800580c << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_0800580c = 1;\n  }\n  if (*(int *)PTR_DAT_08005810 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005810 = 1;\n  }\n  if (*(int *)PTR_DAT_08005814 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005814 = 1;\n  }\n  if (*(int *)PTR_DAT_08005818 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005818 = 1;\n  }\n  if (*(int *)PTR_DAT_0800581c << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_0800581c = 1;\n  }\n  if (*(int *)PTR_DAT_08005820 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005820 = 1;\n  }\n  if (*(int *)PTR_DAT_08005824 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005824 = 1;\n  }\n  if (*(int *)PTR_DAT_08005828 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_08005828 = 1;\n  }\n  if (*(int *)PTR_DAT_080057fc3 << 0x1f >= -1) {\n    *(undefined4 *)PTR_DAT_080057fc3 = 1;\n  }\n  function_ptr();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "execute_and_update_flags_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08004678(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    num = num >> 1;\n    bit_count++;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_input_and_set_flag_08003900",
                "param_1": "input",
                "iVar1": "input_offset",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void check_input_and_set_flag_08003900(int input) {\n  int input_offset = subtract_four_from_input();\n  if (*(char *)(input_offset + 0x5f) == '\\0') {\n    set_bit_and_flags(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flag_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_at_index_08000f0c",
                "param_1": "index",
                "DAT_08000f28": "data_start_address"
            },
            "code": "void set_bit_at_index_08000f0c(uint index) {\n  if (index >= 0) {\n    int* data = (int*)(DAT_08000f28 + ((index >> 5) + 0x60) * 4);\n    int bit_index = index & 0x1f;\n    *data = 1 << bit_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "calculate_data_and_set_flag_08000998",
                "param_1": "data_buffer",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "byte1",
                "cVar2": "char1",
                "bVar3": "byte2",
                "bVar4": "byte3",
                "uVar5": "uint1",
                "uVar6": "uint2"
            },
            "code": "int calculate_data_and_set_flag_08000998(int data_buffer, int data_length, undefined4 param_3, undefined4 param_4)\n{\n  byte byte1;\n  char char1;\n  byte byte2;\n  byte byte3;\n  uint uint1;\n  uint uint2;\n  \n  byte1 = combine_bytes(*(undefined *)(data_buffer + 0xb),*(undefined *)(data_buffer + 0xc),param_3,param_4,param_4);\n  byte2 = combine_bytes(*(undefined *)(data_buffer + 0xd),*(undefined *)(data_buffer + 0xe));\n  *(byte *)(data_buffer + 0xb) = byte2 << 1;\n  *(undefined *)(data_buffer + 0x49) = 3;\n  for (uint1 = (uint)byte1; uint1 < (uint)byte1 + (uint)byte2; uint1 = uint1 + 1 & 0xff) {\n    byte3 = *(byte *)(data_buffer + 0x49);\n    *(char *)(data_buffer + (uint)byte3 + 9) = (char)((ushort)*(undefined2 *)(data_length + uint1 * 2) >> 8);\n    uint2 = byte3 + 1 & 0xff;\n    char1 = (char)uint2;\n    *(char *)(data_buffer + 0x49) = char1;\n    *(undefined *)(data_buffer + uint2 + 9) = *(undefined *)(data_length + uint1 * 2);\n    *(char *)(data_buffer + 0x49) = char1 + '\\x01';\n  }\n  char1 = *(char *)(data_buffer + 0x49);\n  calculate_crc_and_set_flag(data_buffer);\n  return (int)(char)(char1 + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "calculate_data_and_set_flag_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "execute_code_080055d0",
                "param_1": "code_index",
                "puVar1": "default_value_ptr",
                "uVar2": "default_value",
                "piVar3": "error_code_ptr",
                "iVar4": "result",
                "pcVar5": "code_ptr",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "pointer_ptr",
                "PTR_PTR_DAT_080055dc": "error_code_array_ptr_ptr",
                "PTR_DAT_08005600": "pointer_ptr",
                "get_default_value_thunk_0800410c": "get_default_value",
                "initialize_pointer_080040fc": "initialize_pointer"
            },
            "code": "int execute_code_080055d0(uint code_index) {\n    int *error_code_ptr = *(int **)PTR_PTR_DAT_080055dc;\n    if (code_index > 0x1f) {\n        *error_code_ptr = 0x16;\n        return -1;\n    }\n    int *code_array = error_code_ptr[0x11];\n    if ((code_array != 0) && (code *code_ptr = *(code **)(code_array + code_index * 4), code_ptr != (code *)0x0)) {\n        if (code_ptr != (code *)0x1) {\n            if (code_ptr == (code *)0xffffffff) {\n                *error_code_ptr = 0x16;\n                return 1;\n            }\n            *(code_array + code_index * 4) = 0;\n            (*code_ptr)(code_index);\n        }\n        return 0;\n    }\n    undefined *default_value_ptr = PTR_PTR_DAT_080055dc;\n    undefined4 default_value = get_default_value_thunk_0800410c(error_code_ptr);\n    undefined *PTR_DAT_08005600 = PTR_DAT_08005600;\n    *(undefined4 *)PTR_DAT_08005600 = 0;\n    int result = initialize_pointer_080040fc(default_value, code_index, code_index, 0, default_value_ptr, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (*(int *)PTR_DAT_08005600 != 0)) {\n        *error_code_ptr = *(int *)PTR_DAT_08005600;\n    }\n    return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "execute_code_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "validate_and_assign_value_080056f8",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr_data",
                "iVar2": "returned_value"
            },
            "code": "void validate_and_assign_value_080056f8(int *output_value, undefined4 input_value)\n{\n  undefined *ptr_data = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int returned_value = return_one_080040e0(input_value);\n  if ((returned_value == -1) && (*(int *)ptr_data != 0)) {\n    *output_value = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "validate_and_assign_value_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_memory_permissions_080054b4",
                "param_1": "base_address",
                "param_2": "segment_size",
                "param_3": "permission_flags",
                "param_4": "result",
                "iVar1": "set_memory_result",
                "uVar2": "permission",
                "auStack_4c": "flags",
                "local_48": "flags2"
            },
            "code": "int check_memory_permissions_080054b4(unsigned int base_address, int segment_size, unsigned int *permission_flags, unsigned int *result) {\n    int set_memory_result;\n    unsigned int flags;\n    if (*(short *)(segment_size + 0xE) < 0 || (set_memory_result = set_memory_region_permissions_080056d4(base_address, (int)*(short *)(segment_size + 0xE), &flags)) < 0) {\n        *result = 0;\n        if ((int)((unsigned int)*(unsigned short *)(segment_size + 0xC) << 0x18) < 0) {\n            *permission_flags = 0x40;\n            goto LAB_080054f4;\n        }\n    }\n    else {\n        *result = (unsigned int)((flags & 0xF000) == 0x2000);\n    }\n    *permission_flags = 0x400;\nLAB_080054f4:\n    return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_memory_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_to_0xb"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  uint32_t *ptr_to_0xb = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr_to_0xb == (uint32_t *)0x4) || ((ptr_to_0xb == (uint32_t *)0x8 || (ptr_to_0xb == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          uint32_t *temp_ptr = input[9];\n          input[9] = (uint32_t *)((int)temp_ptr + 1);\n          (*input)[4] = (uint32_t)*(byte *)temp_ptr;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint32_t *temp_ptr = input[9];\n      input[9] = (uint32_t *)((int)temp_ptr + 1);\n      (*input)[4] = (uint32_t)*(byte *)temp_ptr;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "assign_pointer_to_array_element_if_condition_met_08004560",
                "param_1": "param1",
                "param_2": "param2",
                "assign_pointer_to_array_element_08004544": "assign_pointer_to_array_element"
            },
            "code": "void assign_pointer_to_array_element_if_condition_met_08004560(int param1, int param2)\n{\n  if ((param1 == 1) && (param2 == 0xffff)) {\n    assign_pointer_to_array_element(PTR_DAT_08004588, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "assign_pointer_to_array_element_if_condition_met_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_in_buffer_08000a7a",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "flags",
                "param_4": "crc_flag",
                "iVar1": "start_index",
                "iVar2": "end_index",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_position",
                "uVar6": "buffer_index",
                "uVar7": "flag_index"
            },
            "code": "uint8_t set_bits_in_buffer_08000a7a(uint8_t* buffer, uint16_t buffer_size, uint8_t flags, uint8_t crc_flag) {\n  uint16_t start_index = combine_bytes(*(buffer + 0xb), *(buffer + 0xc), flags, crc_flag, crc_flag);\n  uint16_t end_index = combine_bytes(*(buffer + 0xd), *(buffer + 0xe));\n  uint8_t bit_index = 0;\n  uint8_t flag_index = 7;\n  for (uint16_t i = 0; i < end_index; i++) {\n    uint8_t buffer_index = (i + start_index) * 0x100000 >> 0x18;\n    uint8_t bit_position = i + start_index & 0xf;\n    if (((uint8_t)(uint32_t)*(uint8_t*)(buffer + flag_index + 9) >> bit_index & 1U) == 0) {\n      *(uint16_t*)(buffer + buffer_index * 2) = *(uint16_t*)(buffer + buffer_index * 2) & ~(uint16_t)(1 << bit_position);\n    }\n    else {\n      *(uint16_t*)(buffer + buffer_index * 2) = (uint16_t)(1 << bit_position) | *(uint16_t*)(buffer + buffer_index * 2);\n    }\n    bit_index = bit_index + 1 & 0xff;\n    if (7 < bit_index) {\n      flag_index = flag_index + 1 & 0xff;\n      bit_index = 0;\n    }\n  }\n  *(uint8_t*)(buffer + 0x49) = 6;\n  calculate_crc_and_set_flag(buffer);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_in_buffer_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "count_chars_08004cb0",
                "param_1": "input",
                "param_2": "start_pos",
                "param_3": "end_pos",
                "param_4": "pad_char",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_pos",
                "uVar3": "char_count",
                "bVar4": "is_char_count_four"
            },
            "code": "undefined4 count_chars_08004cb0(uint32_t input, uint32_t *start_pos, uint32_t *end_pos, uint32_t pad_char, code *callback)\\n\\\n{\\n\\\n    int status = 0;\\n\\\n    uint32_t max_pos = start_pos[4] < start_pos[2] ? start_pos[2] : start_pos[4];\\n\\\n    *end_pos = max_pos;\\n\\\n    if (*(char *)((int)start_pos + 0x43) != \"\\0\") {\\n\\\n        *end_pos += 1;\\n\\\n    }\\n\\\n    if ((int)(input << 0x1a) < 0) {\\n\\\n        *end_pos += 2;\\n\\\n    }\\n\\\n    uint32_t char_count = input & 6;\\n\\\n    if (char_count == 0) {\\n\\\n        for (; (int)char_count < (int)(start_pos[3] - *end_pos); char_count++) {\\n\\\n            status = (*callback)(pad_char, 0, (int)start_pos + 0x19, 1);\\n\\\n            if (status == -1) {\\n\\\n                return 0xffffffff;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    char_count = (uint32_t)*(byte *)((int)start_pos + 0x43);\\n\\\n    if (char_count != 0) {\\n\\\n        char_count = 1;\\n\\\n    }\\n\\\n    if ((int)(input << 0x1a) < 0) {\\n\\\n        *(undefined *)((int)start_pos + char_count + 0x43) = 0x30;\\n\\\n        *(undefined *)((int)start_pos + char_count + 0x44) = *(undefined *)((int)start_pos + 0x45);\\n\\\n        char_count += 2;\\n\\\n    }\\n\\\n    status = (*callback)(pad_char, 0, (int)start_pos + 0x43, char_count);\\n\\\n    if (status != -1) {\\n\\\n        uint32_t char_diff = start_pos[3];\\n\\\n        bool is_char_count_four = (input & 6) == 4;\\n\\\n        if (is_char_count_four) {\\n\\\n            char_diff -= *end_pos;\\n\\\n        }\\n\\\n        if (is_char_count_four) {\\n\\\n            char_diff &= ~((int)char_diff >> 0x1f);\\n\\\n        }\\n\\\n        else {\\n\\\n            char_diff = 0;\\n\\\n        }\\n\\\n        if (start_pos[4] < start_pos[2]) {\\n\\\n            char_diff += (start_pos[2] - start_pos[4]);\\n\\\n        }\\n\\\n        uint32_t i = 0;\\n\\\n        while (i != char_diff) {\\n\\\n            status = (*callback)(pad_char, 0, (int)start_pos + 0x1a, 1);\\n\\\n            if (status == -1) {\\n\\\n                break;\\n\\\n            }\\n\\\n            i++;\\n\\\n        }\\n\\\n        if (i == char_diff) {\\n\\\n            return 0;\\n\\\n        }\\n\\\n    }\\n\\\n    return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "count_chars_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_present_08003594",
                "PTR_DAT_080035a4": "code_pointer",
                "PTR_DAT_080035a8": "parameter_pointer",
                "code": "code_function",
                "undefined4": "parameter_type",
                "function": "code_function"
            },
            "code": "void execute_code_if_present_08003594(void)\n{\n    code* code_ptr = *(code**)PTR_DAT_080035a4;\n    if (code_ptr != NULL)\n    {\n        code function = *code_ptr;\n        undefined4 parameter = *(undefined4*)PTR_DAT_080035a8;\n        function(parameter);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_present_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "*param_1": "*flag_ptr",
                "uint": "uint32_t",
                "PTR_": "",
                "DAT_": "",
                "param_1": "flag_ptr",
                "ptr1": "ptr1",
                "ptr2": "ptr2",
                "flag_char_ptr": "flag_char_ptr"
            },
            "code": "void clear_flags_08002940(int *flag_ptr)\n{\n  uint32_t *ptr1 = (uint32_t *)(*flag_ptr + 0xc);\n  uint32_t *ptr2 = (uint32_t *)(*flag_ptr + 0x14);\n  *ptr1 &= 0xfffffedf;\n  *ptr2 &= 0xfffffffe;\n  char *flag_char_ptr = (char *)flag_ptr + 0x3a;\n  *flag_char_ptr = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_value_and_return_08004204"
            },
            "code": "void get_value_and_return_08004204(void)\n{\n  get_value_and_return_08004204_0800346c();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "update_and_return_08003476",
                "update_data_08000e18": "update_data",
                "do_nothing_and_return_08000f4e": "do_nothing_and_return",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void update_and_return_08003476(void)\n{\n  update_data();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "update_and_return_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_08004444",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_08004444(int address, uint index)\n{\n    undefined2 value;\n    code *jump_table;\n\n    if (index < 0x60) {\n        value = *(undefined2 *)(PTR_DAT_0800445c + index * 2);\n    }\n    else {\n        value = 0xffff;\n    }\n    *(undefined2 *)(address + 0x12e) = value;\n\n    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n    /* WARNING: Treating indirect jump as call */\n    (*jump_table)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_value_and_return_0800346c",
                "get_value_from_pointer_08000e30": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_0800346c(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_value_and_return_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_memory_block_080053a0",
                "param_1": "block_address",
                "uVar1": "allocated_memory",
                "iVar2": "current_address",
                "bVar3": "is_current_address_same_as_block_address"
            },
            "code": "void initialize_memory_block_080053a0(int block_address)\n{\n    undefined4 allocated_memory;\n    int current_address;\n    bool is_current_address_same_as_block_address;\n    \n    if (*(int *)(block_address + 0x18) == 0) {\n        *(undefined4 *)(block_address + 0x48) = 0;\n        *(undefined4 *)(block_address + 0x4c) = 0;\n        *(undefined4 *)(block_address + 0x50) = 0;\n        \n        current_address = *(int *)PTR_PTR_DAT_080053f8;\n        is_current_address_same_as_block_address = block_address == current_address;\n        if (is_current_address_same_as_block_address) {\n            current_address = 1;\n        }\n        if (is_current_address_same_as_block_address) {\n            *(int *)(block_address + 0x18) = current_address;\n        }\n        \n        allocated_memory = allocate_and_initialize_memory_block_080053a0_08005400();\n        *(undefined4 *)(block_address + 4) = allocated_memory;\n        allocated_memory = allocate_and_initialize_memory_block_080053a0_08005400(block_address);\n        *(undefined4 *)(block_address + 8) = allocated_memory;\n        allocated_memory = allocate_and_initialize_memory_block_080053a0_08005400(block_address);\n        *(undefined4 *)(block_address + 0xc) = allocated_memory;\n        \n        initialize_data_0800532c(*(undefined4 *)(block_address + 4), 4, 0);\n        initialize_data_0800532c(*(undefined4 *)(block_address + 8), 9, 1);\n        initialize_data_0800532c(*(undefined4 *)(block_address + 0xc), 0x12, 2);\n        \n        *(undefined4 *)(block_address + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = get_value_from_pointer_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "buffer",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*buffer",
                "4": "1",
                "&": "and",
                "~": "not",
                "|": "or",
                "<<": "shift_left",
                "uint": "uint32_t"
            },
            "code": "void set_bit_080028d4(uint32_t* buffer, uint8_t bit_position, uint8_t bit_value){\n    uint32_t mask = ~(1 << bit_position);\n    *buffer &= mask;\n    *buffer |= bit_value << bit_position;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "set_parameters_from_search_result_080040ec",
                "param_1": "search_result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "find_and_set_parameters_08003d18": "find_and_set_parameters"
            },
            "code": "void set_parameters_from_search_result_080040ec(int search_result, int param_2, int param_3, int param_4) {\n  find_and_set_parameters(search_result, param_2, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "set_parameters_from_search_result_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "input_buffer",
                "param_2": "input_length",
                "param_3": "max_len",
                "param_4": "output_buffer",
                "uVar1": "status",
                "puVar2": "input_data"
            },
            "code": "uint32_t validate_input_08001460(uint32_t **input_buffer, uint32_t *input_length, int32_t max_len, uint32_t *output_buffer)\n{\n  uint32_t status;\n  uint32_t *input_data;\n  if (*(char *)((int)input_buffer + 0x3d) == '(') {\n    if (input_length == NULL) {\n      status = 1;\n    }\n    else if (max_len == 0) {\n      status = 1;\n    }\n    else if (*(char *)(input_buffer + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xf) = 1;\n      input_data = *input_buffer;\n      if ((*input_data & 1) == 0) {\n        *input_data = *input_data | 1;\n      }\n      **input_buffer = **input_buffer & 0xfffff7ff;\n      *(undefined *)((int)input_buffer + 0x3d) = 0x29;\n      *(undefined *)((int)input_buffer + 0x3e) = 0x20;\n      status = 0;\n      input_buffer[0x10] = NULL;\n      input_buffer[9] = input_length;\n      *(short *)((int)input_buffer + 0x2a) = (short)max_len;\n      input_buffer[0xb] = output_buffer;\n      *(undefined2 *)(input_buffer + 10) = *(undefined2 *)((int)input_buffer + 0x2a);\n      *(undefined *)(input_buffer + 0xf) = 0;\n      (*input_buffer)[1] = (*input_buffer)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_input_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "validate_user_input_08003880",
                "param_1": "user_input_address",
                "param_2": "validation_result_address",
                "param_3": "validation_flag_address",
                "param_4": "validation_parameter",
                "iVar1": "subtracted_input"
            },
            "code": "void validate_user_input_08003880(int user_input_address, int validation_result_address, int validation_flag_address, undefined4 validation_parameter) {\n  int subtracted_input = subtract_four_from_input();\n  if (validation_flag_address == *(int *)(user_input_address + 0xc)) {\n    if (validation_result_address == 0) {\n      *(undefined *)(subtracted_input + 0x88) = 0;\n      *(undefined *)(subtracted_input + 0x5e) = 0;\n      if (*(code **)(subtracted_input + 100) != (code *)0x0) {\n        (**(code **)(subtracted_input + 100))();\n      }\n      validate_input_08001460(user_input_address, subtracted_input + 0x68, *(undefined *)(subtracted_input + 0x88), 8);\n      return;\n    }\n    *(undefined *)(subtracted_input + 0x5e) = 1;\n    check_input_080014ec(user_input_address, subtracted_input + 0x68, 0x20, 8, validation_parameter);\n  }\n  return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "validate_user_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_flag_and_validate_input_08002f4c",
                "param_1": "input_ptr",
                "*(uint *)(*param_1 + 0xc)": "*flag_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "*flag_char_ptr",
                "validate_input_if_valid_08003f48": "validate_input_if_valid"
            },
            "code": "int set_flag_and_validate_input_08002f4c(int *input_ptr){\n    uint32_t *flag_ptr = (uint32_t *)(*input_ptr + 0xc);\n    *flag_ptr &= 0xffffffbf;\n    char *flag_char_ptr = (char *)(input_ptr + 0x39);\n    *flag_char_ptr = 0x20;\n    validate_input_if_valid();\n    return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flag_and_validate_input_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_values_080035bc",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flags_and_values_080035bc(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  flag_ptr[2] = 0;\n  *flag_ptr &= 0xfef6ffff;\n  flag_ptr[1] = DAT_080035f4;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_shifted_value_from_pointer_080025ec",
                "PTR_DAT_08002608": "pointer_array",
                "DAT_08002604": "data_pointer",
                "get_value_from_pointer_080025e0": "get_value_from_pointer",
                "uVar1": "value",
                "index": "shift_index",
                "shifted_value": "shifted_value"
            },
            "code": "uint get_shifted_value_from_pointer_080025ec(void) {\n    uint value = get_value_from_pointer();\n    uint shift_amount = *(int *)(DAT_08002604 + 8) << 0x13;\n    uint index = shift_amount >> 0x1d;\n    uint shifted_value = value >> PTR_DAT_08002608[index];\n    return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_device_08000c4c",
                "PTR_DAT_08000c60": "device_data",
                "call_interrupt_if_not_triggered_080005e4": "call_interrupt_if_not_triggered",
                "setup_device_08000600": "setup_device"
            },
            "code": "void initialize_device_08000c4c(void)\n{\n  call_interrupt_if_not_triggered(0);\n  setup_device(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_device_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_input_08004a60",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input",
                "param_4": "size",
                "puVar2": "end",
                "iVar1": "index"
            },
            "code": "int process_input_08004a60(int arg1, int arg2, char *input, int size) {\n  int index = 0;\n  char *end = input + size;\n  while (input != end) {\n    if (index == 0) {\n      index = process_input_08004a60_08004a34(arg1, *input, arg2, size, index);\n    }\n    else {\n      index = process_input_08004a60_08004a34(arg1, *input, arg2, size, index + 1);\n    }\n    input++;\n  }\n  return index;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "*param_1": "*output",
                "*param_2": "*input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "ptr",
                "PTR_PTR_DAT_0800519c": "PTR_PTR_DATA",
                "PTR_DAT_080051a0": "PTR_DATA_1",
                "PTR_DAT_080051a4": "PTR_DATA_2",
                "PTR_DAT_080051a8": "PTR_DATA_3"
            },
            "code": "uint process_data_080050d0(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_080051a0) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a4) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a8) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)input[0xd] != input + 0x11) {\n        add_element(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_assign_memory(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_element_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_assign_memory_block_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "out_block_start_address",
                "param_2": "block_size",
                "puVar1": "unused_pointer",
                "uVar2": "new_block_start_address",
                "puVar3": "current_block",
                "iVar4": "block_size_diff",
                "uVar5": "block_size_diff",
                "puVar6": "previous_block",
                "puVar7": "current_block",
                "uVar8": "aligned_block_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *out_block_start_address, uint block_size)\n{\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *out_block_start_address = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint* current_block = *(uint **)PTR_DAT_08004a2c;\n    uint* previous_block = *(uint **)PTR_DAT_08004a2c;\n    while (current_block != (uint *)0x0) {\n      uint block_size_diff = *current_block - aligned_block_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (previous_block == current_block) {\n            aligned_block_size = previous_block[1];\n          }\n          else {\n            aligned_block_size = current_block[1];\n          }\n          if (previous_block == current_block) {\n            *(uint *)PTR_DAT_08004a2c = aligned_block_size;\n            current_block = previous_block;\n          }\n          else {\n            previous_block[1] = aligned_block_size;\n          }\n        }\n        else {\n          *current_block = block_size_diff;\n          *(uint *)((int)current_block + block_size_diff) = aligned_block_size;\n          current_block = (uint *)((int)current_block + block_size_diff);\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint new_block_start_address = processOffset_0800500c(out_block_start_address);\n      *(undefined4 *)PTR_DAT_08004a30 = new_block_start_address;\n    }\n    current_block = (uint *)processOffset_0800500c(out_block_start_address, aligned_block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (block_size_diff = processOffset_0800500c(out_block_start_address,(int)previous_block - (int)current_block), block_size_diff != -1)))) {\n      *previous_block = aligned_block_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_block_start_address);\n      uint aligned_block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int block_size_diff = aligned_block_end - (int)(previous_block + 1);\n      if (block_size_diff != 0) {\n        *(int *)((int)previous_block + block_size_diff) = -block_size_diff;\n        return aligned_block_end;\n      }\n      return aligned_block_end;\n    }\n    *out_block_start_address = 0xc;\n    do_nothing_0800557e(out_block_start_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_parameters_08002d0c",
                "param_1": "params",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "value",
                "param_5": "max_distance",
                "iVar1": "distance"
            },
            "code": "uint32_t check_parameters_08002d0c(uint32_t **params, uint32_t mask, bool expected_result, int value, uint32_t max_distance)\n{\n  int distance;\n  do {\n    if (((mask & ~**params) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_distance == 0xffffffff) || ((max_distance != 0 && (distance = get_value_from_pointer_08000e30(), (uint32_t)(distance - value) <= max_distance))));\n  (*params)[3] &= 0xfffffe5f;\n  (*params)[5] &= 0xfffffffe;\n  *(uint8_t *)((int)params + 0x39) = 0x20;\n  *(uint8_t *)((int)params + 0x3a) = 0x20;\n  *(uint32_t *)(params + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_parameters_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "string_ptr",
                "puVar1": "current_char_ptr",
                "DAT_08001902": "do_nothing_08001902",
                "DAT_080015b8": "do_nothing_080015b8"
            },
            "code": "uint32_t process_string_08001904(uint32_t **string_ptr)\n{\n  uint32_t *current_char_ptr;\n  uint16_t string_length = (*string_ptr)[10];\n  char current_char = (char)(*string_ptr)[4];\n  char next_char = (char)(*string_ptr)[5];\n  if (current_char == '\"') {\n    if (string_length < 4) {\n      if (string_length < 2) {\n        (*string_ptr)[0] &= 0xfffffbff;\n        (*string_ptr)[1] &= 0xfffff8ff;\n        current_char_ptr = string_ptr[9];\n        string_ptr[9] = (uint32_t *)((int)current_char_ptr + 1);\n        *(char *)current_char_ptr = current_char;\n        (*string_ptr)[10]--;\n        (*string_ptr)[61] = 0x20;\n        string_ptr[12] = (uint32_t *)0x0;\n        if (next_char == '@') {\n          (*string_ptr)[62] = 0;\n          DAT_08001902();\n        }\n        else {\n          (*string_ptr)[62] = 0;\n          DAT_080015b8();\n        }\n      }\n    }\n    else {\n      current_char_ptr = string_ptr[9];\n      string_ptr[9] = (uint32_t *)((int)current_char_ptr + 1);\n      *(char *)current_char_ptr = current_char;\n      (*string_ptr)[10]--;\n      if (string_length == 3) {\n        (*string_ptr)[1] &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_string_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "decode_and_set_flags_08000c64",
                "in_r3": "arg2",
                "decode_data_and_set_flags_08000b54": "decode_data_and_set_flags",
                "PTR_DAT_08000c78": "PTR_1",
                "PTR_DAT_08000c74": "PTR_2"
            },
            "code": "void decode_and_set_flags_08000c64(void)\n{\n  undefined4 arg1;\n  undefined4 arg2;\n  int size = 0x10;\n  decode_data_and_set_flags(PTR_DAT_08000c78, PTR_DAT_08000c74, size, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "decode_and_set_flags_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_input_08002ffc",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "second_flags",
                "uVar4": "is_flag_set",
                "uVar5": "flags",
                "puVar3": "data"
            },
            "code": "void process_input_08002ffc(uint **input_data)\n{\n    uint *data = *input_data;\n    uint flags = *data;\n    uint second_flags = data[3];\n    \n    if ((flags & 0xf) == 0 && (flags & 0x20) && (second_flags & 0x20)) {\n        write_data(input_data);\n        return;\n    }\n    \n    if ((flags & 0xf) == 0 || ((data[5] & 1) == 0 && (second_flags & 0x120) == 0)) {\n        if ((flags & 0x80) && (second_flags & 0x80)) {\n            process_data(input_data);\n            return;\n        }\n        if ((flags & 0x40) && (second_flags & 0x40)) {\n            set_flag_and_validate_input(input_data);\n        }\n    }\n    else {\n        if ((flags & 1) && (second_flags & 0x100)) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n        }\n        if ((flags & 4) && (data[5] & 1)) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n        }\n        if ((flags & 2) && (data[5] & 1)) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n        }\n        if ((flags & 8) && (data[5] & 1)) {\n            input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n        }\n        if (input_data[0xf] != (uint *)0x0) {\n            if ((flags & 0x20) && (second_flags & 0x20)) {\n                write_data(input_data);\n            }\n            if ((input_data[0xf] & 8) == 0 && (data[5] & 0x40) == 0) {\n                do_nothing(input_data);\n                input_data[0xf] = (uint *)0x0;\n                return;\n            }\n            clear_flags(input_data);\n            uint *data = *input_data;\n            if ((data[5] & 0x40) == 0) {\n                do_nothing(input_data);\n                return;\n            }\n            data[5] &= 0xffffffbf;\n            if (input_data[0xd] == (uint *)0x0) {\n                do_nothing(input_data);\n                return;\n            }\n            input_data[0xd][0x14] = (uint *)LABEL_0800311c_1_08003118;\n            int result = set_flag_and_clear_bit(input_data[0xd]);\n            if (result != 0) {\n                (*(code *)input_data[0xd][0x14])();\n                return;\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input_value",
                "return": "result"
            },
            "code": "int subtract_four_from_input_0800387c(int input_value) {\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "get_value_0800351e",
                "param_1": "id",
                "uVar1": "value",
                "find_value_by_id_08003506": "find_value_by_id"
            },
            "code": "int get_value_0800351e(int id) {\n\tif (id != 0) {\n\t\tint value = find_value_by_id();\n\t\treturn value;\n\t}\n\treturn -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "get_value_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "writeData_08002f66",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "length",
                "puVar3": "bytePtr",
                "value": "value",
                "execute_parameter_function_if_index_less_than_10_08003f24": "executeFunction"
            },
            "code": "uint8_t writeData_08002f66(int *data)\n{\n  uint8_t *bytePtr;\n  uint16_t length;\n  uint16_t *shortPtr;\n  uint32_t *intPtr;\n  uint32_t value;\n  if (*(char *)((int)data + 0x3a) != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      value = *(int *)(*data + 4) << 0x17;\n      value = value >> 0x17;\n      shortPtr = (uint16_t *)data[10];\n      *shortPtr = (uint16_t)value;\n      data[10] += 2;\n    }\n    else {\n      value = *(uint32_t *)(*data + 4);\n      value = value & 0xff;\n      shortPtr = (uint16_t *)data[10];\n      *shortPtr = (uint16_t)value;\n      data[10]++;\n    }\n  }\n  else if (data[4] == 0) {\n    bytePtr = (uint8_t *)data[10];\n    *bytePtr = *(uint32_t *)(*data + 4);\n    data[10]++;\n  }\n  else {\n    bytePtr = (uint8_t *)data[10];\n    value = *(uint32_t *)(*data + 4);\n    *bytePtr = (uint8_t)value;\n    *bytePtr = *bytePtr & 0x7f;\n    data[10]++;\n  }\n  length = *(uint16_t *)((int)data + 0x2e);\n  length--;\n  *(uint16_t *)((int)data + 0x2e) = length;\n  if (length != 0) {\n    return 0;\n  }\n  intPtr = (uint32_t *)*data;\n  *intPtr = *intPtr & 0xfffffedf;\n  intPtr = (uint32_t *)(*data + 0x14);\n  *intPtr = *intPtr & 0xfffffffe;\n  *(uint8_t *)((int)data + 0x3a) = 0x20;\n  execute_parameter_function_if_index_less_than_10_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "writeData_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_param_flag_if_not_zero_080034b6",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "set_param_08001198": "set_parameter"
            },
            "code": "void set_param_flag_if_not_zero_080034b6(undefined4 input_param_1, undefined2 input_param_2, int input_param_3, undefined4 input_param_4)\n{\n  if (input_param_3 == 0) {\n    set_param_08001198(input_param_1, input_param_2, 0, input_param_4, input_param_4);\n    return;\n  }\n  set_param_08001198(input_param_1, input_param_2, 1, input_param_4, input_param_4);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "set_param_flag_if_not_zero_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_address",
                "param_2": "new_value",
                "bVar1": "data_index",
                "PTR_DAT_08003ef4": "data_array_address",
                "PTR_DAT_08003ef8": "data_index_array_address",
                "validate_input_08002eb2": "validate_input",
                "PTR_DAT_08003efc": "data_validation_address"
            },
            "code": "void update_data_08003eac(int data_address, unsigned int new_value) {\n    if (data_address != 0) {\n        byte data_index = *(byte *)(data_address + 0x44);\n        *(unsigned int *)(PTR_DAT_08003ef4 + (uint)data_index * 4) = new_value;\n        *(int *)(PTR_DAT_08003ef8 + (uint)data_index * 4) = data_address;\n        set_bits_in_memory((int)*(char *)(data_address + 0x5c), 0, 2);\n        call_function((int)*(char *)(data_address + 0x5c));\n        validate_input(*(unsigned int *)(PTR_DAT_08003efc + (uint)data_index * 4), *(int *)(data_address + 0x68) + (uint)*(unsigned short *)(data_address + 0x6e), 1);\n    }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "validate_combination_08003e18",
                "param_1": "combination_length",
                "param_2": "combination",
                "iVar1": "is_valid_combination"
            },
            "code": "int validate_combination_08003e18(int combination_length, undefined *combination, undefined4 param_3, undefined4 param_4) {\n  int is_valid_combination = is_combination_valid();\n  if (combination_length == 0) {\n    return -1;\n  }\n  if (is_valid_combination == 0) {\n    *combination = *(undefined *)(combination_length + 0x45);\n    check_params(*(undefined4 *)(PTR_DAT_08003e50 + (uint)*(byte *)(combination_length + 0x44) * 4), combination_length + 0x45,1,PTR_DAT_08003e50,param_4);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "validate_combination_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "initialize_pointer_080040fc",
                "PTR_DAT_08004108": "pointer_to_data"
            },
            "code": "void initialize_pointer_080040fc()\n{\n    int* PTR_DAT_08004108 = PTR_DAT_08004108;\n    *PTR_DAT_08004108 = 22;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "initialize_pointer_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "check_and_set_parameters_08002dd0",
                "param_1": "param_array",
                "param_2": "data_array",
                "param_3": "data_array_size",
                "param_4": "param_4",
                "uVar1": "value_from_pointer",
                "iVar2": "return_value"
            },
            "code": "int check_and_set_parameters_08002dd0(int *param_array, ushort *data_array, int data_array_size, undefined4 param_4) {\n  undefined4 value_from_pointer = get_value_from_pointer_08000e30();\n  int return_value = 0;\n  if (*(char *)((int)param_array + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0 || data_array_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(param_array + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xe) = 1;\n      param_array[0xf] = 0;\n      *(undefined *)((int)param_array + 0x39) = 0x21;\n      *(short *)(param_array + 9) = (short)data_array_size;\n      *(short *)((int)param_array + 0x26) = (short)data_array_size;\n      while (*(short *)((int)param_array + 0x26) != 0) {\n        *(short *)((int)param_array + 0x26) = *(short *)((int)param_array + 0x26) + -1;\n        if (param_array[2] == 0x1000) {\n          return_value = check_parameters_08002d0c(param_array, 0x80, 0, value_from_pointer, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*param_array + 4) = *data_array & 0x1ff;\n          if (param_array[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          return_value = check_parameters_08002d0c(param_array, 0x80, 0, value_from_pointer, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*param_array + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      return_value = check_parameters_08002d0c(param_array, 0x40, 0, value_from_pointer, param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)param_array + 0x39) = 0x20;\n        *(undefined *)(param_array + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "check_and_set_parameters_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uStack_8": "temp1",
                "uStack_4": "temp2",
                "PTR_PTR_DAT_08004880": "PTR_PTR_DATA",
                "FUNC_08004a84": "call_data_processing"
            },
            "code": "void process_data_08004860(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n    undefined4 temp1;\n    undefined4 temp2;\n    \n    temp1 = data3;\n    temp2 = data4;\n    \n    call_data_processing(*(undefined4 *)PTR_PTR_DAT_08004880, data1, data2, &temp1, data1, &temp1);\n    \n    return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "process_data_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "convert_or_call_08004622",
                "param_1": "function_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "convert_to_base_080045c8": "convert_to_base"
            },
            "code": "void convert_or_call_08004622(void* function_ptr, uint32_t* arg1, uint32_t arg2, uint32_t arg3, uint32_t arg4) {\n  if (arg3 != 0) {\n    convert_to_base(arg1, arg2, arg3 & 0xff);\n    return;\n  }\n  (**(void (**)(void*, uint32_t, uint32_t, void*, uint32_t))function_ptr)(arg1, arg2 & 0xff, 0, function_ptr, arg4);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "convert_or_call_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "update_bits_if_valid_value_found_08003414",
                "param_1": "param",
                "local_4c": "bit_array",
                "iVar1": "index",
                "uVar2": "value",
                "find_value_if_not_negative_080034f4": "find_value_if_not_negative",
                "PTR_DAT_08003468": "PTR_DAT",
                "get_result_from_array_0800339c": "get_result_from_array",
                "get_value_from_array_0800354a": "get_value_from_array",
                "update_bit_and_check_if_full_08002864": "update_bit_and_check_if_full",
                "set_and_check_bit_080028f0": "set_and_check_bit",
                "update_bits_0800268e": "update_bits"
            },
            "code": "void update_bits_if_valid_value_found_08003414(int param)\n{\n  int index;\n  uint value;\n  int bit_array[16];\n  \n  index = find_value_if_not_negative(param, PTR_DAT_08003468_08003468);\n  if ((index != 0) && ((((value = get_result_from_array(param), value == 0 || (value == 4)) || (value == 8)) || ((value == 0xc || (value == 0x18)))))) {\n    if ((get_value_from_array(param, PTR_DAT_08003468_08003468) & 0x100000) == 0) {\n      update_bit_and_check_if_full(bit_array, value);\n    }\n    else {\n      set_and_check_bit(bit_array, value);\n    }\n    update_bits(bit_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bits_if_valid_value_found_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "initialize_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void initialize_08005718(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *data_ptr;\n  int return_value;\n  data_ptr = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  return_value = returnZero_080040e4(arg1, arg2, arg3, arg3, arg3);\n  if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "initialize_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "get_status_080011c0",
                "param_1": "status_ptr",
                "*(char *)((int)param_1 + 0x3e)": "status_char",
                "param_1[0x14]": "status_value",
                "*(uint *)(*param_1 + 0x10)": "status",
                "param_1[0x11]": "status_data",
                "*(char *)((int)param_1 + 0x3d)": "status_char2"
            },
            "code": "uint8_t get_status_080011c0(uint32_t *status_ptr)\n{\n    uint32_t *ptr = status_ptr;\n    uint8_t status = 0;\n    if (*(char *)((int)ptr + 0x3e) == '@') {\n        if (ptr[0x14] == 0) {\n            *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xfe;\n        }\n        else {\n            *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (ptr[4] == 0x4000) {\n        if (*(char *)((int)ptr + 0x3d) == '!') {\n            *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xfe;\n        }\n        else {\n            *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (ptr[0x14] == 0) {\n        *(uint *)(*ptr + 0x10) = (uint)(ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (ptr[0x14] == 1) {\n        *(uint *)(*ptr + 0x10) = (uint)(ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "get_status_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "decode_data_and_set_flags_08000b54",
                "param_1": "data",
                "param_2": "param",
                "param_3": "flag",
                "bVar1": "result_byte",
                "iVar2": "check_result",
                "unaff_r5": "byte_count",
                "iVar3": "result_int"
            },
            "code": "int decode_data_and_set_flags_08000b54(int **data, int *param, int flag)\n{\n    byte result_byte;\n    int result_int;\n    uint byte_count;\n    \n    data[19] = param;\n    *(char *)(data + 24) = (char)flag;\n    \n    if (*(byte *)((int)data + 5) < 4) {\n        result_byte = (**(code **)(**data + 8))();\n        byte_count = (uint)result_byte;\n    }\n    \n    if (byte_count == 0 || (int)byte_count < 8) {\n        result_int = 0;\n    }\n    else {\n        result_int = decode_and_set_flag_080006b4(data);\n        *(char *)(data + 2) = (char)result_int;\n        \n        if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n            int check_result = check_param_080007f0(data);\n            \n            if (check_result < 1) {\n                int value_result = get_value_and_return_08004204();\n                data[23] = (int *)((uint)*(ushort *)((int)data + 86) + value_result);\n                *(undefined *)(data + 2) = 0;\n                \n                switch(*(undefined *)((int)data + 10)) {\n                    case 1:\n                    case 2:\n                        result_int = process_data_080008e2(data, param, flag);\n                        break;\n                    case 3:\n                    case 4:\n                        result_int = calculate_data_and_set_flag_08000998(data, param, flag);\n                        break;\n                    case 5:\n                        result_int = update_data_08000a00(data, param, flag);\n                        break;\n                    case 6:\n                        result_int = set_value_at_index_08000a4e(data, param, flag);\n                        break;\n                    case 15:\n                        result_int = set_bits_in_buffer_08000a7a(data, param, flag);\n                        break;\n                    case 16:\n                        result_int = convert_data_to_int16_array_08000b04(data, param, flag);\n                        break;\n                }\n            }\n            else {\n                if (check_result != 0xff) {\n                    copy_data_080008cc(data, check_result);\n                    calculate_crc_and_set_flag_0800076c(data);\n                }\n                *(char *)(data + 2) = (char)check_result;\n                result_int = (int)(char)check_result;\n            }\n        }\n        else {\n            result_int = 0;\n        }\n    }\n    return result_int;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "decode_data_and_set_flags_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_function_if_not_null_0800376e",
                "iVar1": "input",
                "subtract_four_from_input_08003750": "subtract_four_from_input",
                "function_pointer": "function_pointer"
            },
            "code": "void execute_function_if_not_null_0800376e(void)\n{\n  int input = subtract_four_from_input();\n  code* function_pointer = *(code**)(input + 0x44);\n  if (function_pointer != NULL) {\n    (*function_pointer)();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_input_and_set_bits_08000d98",
                "param_1": "input_value",
                "iVar1": "is_input_valid"
            },
            "code": "int check_input_and_set_bits_08000d98(uint input_value)\n{\n    int is_input_valid = check_input_size_08000ee0(*(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8));\n    if (is_input_valid) {\n        return 1;\n    }\n    if (input_value > 0xf) {\n        return 1;\n    }\n    set_bits_in_memory_08000e60(0xffffffff, input_value, 0);\n    *(uint *)PTR_DAT_08000de0 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_input_and_set_bits_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "validate_input_if_valid_08003f48",
                "find_param_index_08003f00": "find_param_index",
                "uVar1": "param_index",
                "iVar2": "param_value",
                "iVar3": "param_address"
            },
            "code": "void validate_input_if_valid_08003f48(uint param_index){\n  uint index = find_param_index(param_index);\n  int param_address = *(int *)(PTR_DAT_08003f88 + index * 4);\n  if ((index < 10) && (param_value = (**(code **)(PTR_DAT_08003f8c + index * 4))(param_address), param_value != -1)) {\n    validate_input_08002eb2(*(undefined4 *)(PTR_DAT_08003f90 + (uint)*(byte *)(param_address + 0x44) * 4), *(int *)(param_address + 0x68) + (uint)*(ushort *)(param_address + 0x6e),1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "validate_input_if_valid_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "set_bits_0800340c",
                "set_bits_080035fc": "set_bits_helper"
            },
            "code": "void set_bits_0800340c() {\n  set_bits_0800340c_helper();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "set_bits_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_value_in_array_0800352e(int value, short *array)\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array += 6;\n  }\n  return *(unsigned int *)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input",
                "iVar1": "flag_set",
                "puVar2": "flag_ptr",
                "puVar3": "input_ptr"
            },
            "code": "void process_input_08001ab0(uint **input)\n{\n    int input_length = *(byte *)((int)input + 0x3d) - 0x29;\n    if (input_length < 2) {\n        input[0xc] = NULL;\n        *(undefined *)((int)input + 0x3d) = 0x28;\n    }\n    else {\n        if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n            *(undefined *)((int)input + 0x3d) = 0x20;\n        }\n        input[0xc] = NULL;\n        *(undefined *)((int)input + 0x3e) = 0;\n    }\n    **input = **input & 0xfffff7ff;\n    uint *input_ptr = *input;\n    if ((input_ptr[1] & 0x800) == 0) {\n        if (*(char *)((int)input + 0x3d) == '`') {\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            input[0x10] = NULL;\n            if ((input_ptr[5] & 0x40) != 0) {\n                uint *flag_ptr = input[9];\n                input[9] = (uint *)((int)flag_ptr + 1);\n                *(char *)flag_ptr = (char)input_ptr[4];\n            }\n            **input = **input & 0xfffffffe;\n            do_nothing(input);\n        }\n        else {\n            if ((input_ptr[5] & 0x40) != 0) {\n                uint *flag_ptr = input[9];\n                input[9] = (uint *)((int)flag_ptr + 1);\n                *(char *)flag_ptr = (char)input_ptr[4];\n            }\n            check_input_and_set_flag(input);\n        }\n    }\n    else {\n        input_ptr[1] = input_ptr[1] & 0xfffff7ff;\n        if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n            input[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n            int flag_set = set_flag_and_clear_bit(input[0xe]);\n            if (flag_set != 0) {\n                if (((*input)[5] & 0x40) != 0) {\n                    uint *flag_ptr = input[9];\n                    input[9] = (uint *)((int)flag_ptr + 1);\n                    *(char *)flag_ptr = (char)(*input)[4];\n                }\n                **input = **input & 0xfffffffe;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                (*(code *)input[0xe][0x14])();\n            }\n        }\n        else {\n            input[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n            int flag_set = set_flag_and_clear_bit(input[0xd]);\n            if (flag_set != 0) {\n                **input = **input & 0xfffffffe;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                (*(code *)input[0xd][0x14])();\n            }\n        }\n    }\n    if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n        input[0xb] = DAT_08001bf8;\n        input[0xc] = NULL;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        *(undefined *)((int)input + 0x3e) = 0;\n        execute_function_if_flag_set_and_not_space(input);\n    }\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "check_for_flag_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "DAT_0800200c": "flag_data",
                "DAT_08002010": "flag_status",
                "get_value_from_pointer_08000e30": "get_current_time",
                "PTR_08002014": "flag_check_data",
                "DAT_08002018": "flag_check_status"
            },
            "code": "int check_for_flag_08001f9c(void)\n{\n    int start_time = get_current_time();\n    int current_time;\n    int flag_check = 0x10000000;\n    int *flag_ptr = (int *)(DAT_0800200c + 0x40);\n    *flag_ptr |= flag_check;\n    *DAT_08002010 = 1;\n    do {\n        if ((*(uint *)(DAT_08002014 + 4) & 0x10000) != 0) {\n            *DAT_08002018 = 1;\n            current_time = get_current_time();\n            do {\n                if ((*(uint *)(DAT_08002014 + 4) & 0x20000) != 0) {\n                    return 0;\n                }\n                current_time = get_current_time();\n            } while (current_time - start_time < 1001);\n            return 3;\n        }\n        current_time = get_current_time();\n    } while (current_time - start_time < 1001);\n    return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_for_flag_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "set_flags_and_check_input_08000d8e",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flags_and_check_input_08000d8e() {\n  set_flags_and_check_input_08000d8e_080034ce();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_flags_and_check_input_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "convert_or_call_08004638"
            },
            "code": "void convert_or_call_08004638() {\n  convert_or_call_08004638_08004622();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "convert_or_call_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_080008cc",
                "param_1": "data_address",
                "param_2": "data_value",
                "*(undefined *)(param_1 + 4)": "source",
                "*(undefined *)(param_1 + 9)": "destination",
                "*(byte *)(param_1 + 10)": "flag",
                "*(undefined *)(param_1 + 11)": "data",
                "*(undefined *)(param_1 + 73)": "status"
            },
            "code": "void copy_data_080008cc(int data_address, char data_value) {\n    char* source = (char*)(data_address + 4);\n    char* destination = (char*)(data_address + 9);\n    *destination = *source;\n    char* flag = (char*)(data_address + 10);\n    *flag ^= 0x80;\n    char* data = (char*)(data_address + 11);\n    *data = data_value;\n    char* status = (char*)(data_address + 73);\n    *status = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_memory_block_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_byte_sequence_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_byte_sequence_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_byte_sequence_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "set_value_at_index_and_update_counter_08005608",
                "param_1": "value",
                "param_2": "data_structure",
                "iVar1": "index",
                "uVar2": "updated_counter",
                "bVar3": "index_found"
            },
            "code": "void set_value_at_index_and_update_counter_08005608(int value, int* data_structure) {\n  int index = find_and_set_zero(value, (int)*(short *)(data_structure + 0xe));\n  bool index_found = index >= 0;\n  uint updated_counter;\n  if (index_found) {\n    updated_counter = *(int *)(data_structure + 0x54) + index;\n  }\n  else {\n    updated_counter = *(ushort *)(data_structure + 0xc) & 0xffffefff;\n  }\n  if (index_found) {\n    *(uint *)(data_structure + 0x54) = updated_counter;\n  }\n  if (!index_found) {\n    *(short *)(data_structure + 0xc) = (short)updated_counter;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_index_and_update_counter_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "check_params_08002efa",
                "param_1": "param_arr",
                "param_2": "param1",
                "param_3": "param2"
            },
            "code": "int check_params_08002efa(int *param_arr, int param1, int param2)\n{\n    if (*(char *)((int)param_arr + 0x3a) != ' ')\n    {\n        return 2;\n    }\n    if (param1 == 0 || param2 == 0)\n    {\n        return 1;\n    }\n    if (*(char *)(param_arr + 0xe) != '\\x01')\n    {\n        param_arr[10] = param1;\n        *(short *)(param_arr + 0xb) = (short)param2;\n        *(short *)((int)param_arr + 0x2e) = (short)param2;\n        param_arr[0xf] = 0;\n        *(undefined *)((int)param_arr + 0x3a) = 0x22;\n        *(undefined *)(param_arr + 0xe) = 0;\n        *(uint *)(*param_arr + 0x14) |= 1;\n        *(uint *)(*param_arr + 0xc) |= 0x120;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "check_params_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "checkFlags_0800377c",
                "PTR_DAT_08003794": "flag1_ptr",
                "PTR_DAT_08003794 + 0x24": "flag2_ptr",
                "process_flags_080026ce": "processFlags"
            },
            "code": "void checkFlags_0800377c(void)\n{\n  int* flag1 = (int*)PTR_DAT_08003794;\n  int* flag2 = (int*)(PTR_DAT_08003794 + 0x24);\n  if (*flag1 != 0) {\n    process_flags_080026ce();\n  }\n  if (*flag2 != 0) {\n    process_flags_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "checkFlags_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "update_bits_0800268e",
                "param_1": "bits",
                "puVar1": "bit_array",
                "DAT_0800340c": "set_bits",
                "bitmask": "0x1111",
                "bitmask2": "0x444"
            },
            "code": "void update_bits_0800268e(uint **bits)\n{\n  uint *bit_array = *bits;\n  uint bitmask = 0x1111;\n  uint bitmask2 = 0x444;\n  *(undefined *)((int)bits + 0x39) = 2;\n  if ((bit_array[8] & bitmask) == 0)\n  {\n    if ((bit_array[8] & bitmask2) == 0)\n    {\n      *bit_array = *bit_array & 0xfffffffe;\n    }\n  }\n  DAT_0800340c(bits);\n  *(undefined *)((int)bits + 0x39) = 0;\n  *(undefined *)(bits + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_bits_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "param_3": "size1",
                "param_4": "size2",
                "iVar1": "offset",
                "uVar2": "data_size",
                "cVar5": "bit",
                "iVar6": "byte_ptr",
                "uVar3": "i",
                "uVar4": "byte_offset"
            },
            "code": "int process_data_080008e2(int data_ptr, int flag_ptr, unsigned int size1, unsigned int size2){\n  int offset = combine_bytes(*(unsigned char *)(data_ptr + 0xb), *(unsigned char *)(data_ptr + 0xc), size1, size2, size2);\n  unsigned int data_size = combine_bytes(*(unsigned char *)(data_ptr + 0xd), *(unsigned char *)(data_ptr + 0xe));\n  char bit = (char)((data_size << 0x15) >> 0x18);\n  if ((data_size & 7) != 0) {\n    bit++;\n  }\n  *(char *)(data_ptr + 0xb) = bit;\n  *(unsigned char *)(data_ptr + 0x49) = 3;\n  unsigned int byte_offset = 0;\n  for (unsigned int i = 0; i < data_size; i++) {\n    if (((unsigned short)*(unsigned short *)(flag_ptr + ((i + offset) * 0x100000 >> 0x18) * 2) >> (i + offset & 0xf) & 1U) == 0) {\n      int byte_ptr = *(unsigned char *)(data_ptr + 0x49) + data_ptr;\n      *(unsigned char *)(byte_ptr + 9) = *(unsigned char *)(byte_ptr + 9) & ~(unsigned char)(1 << byte_offset);\n    }\n    else {\n      int byte_ptr = *(unsigned char *)(data_ptr + 0x49) + data_ptr;\n      *(unsigned char *)(byte_ptr + 9) = *(unsigned char *)(byte_ptr + 9) | (unsigned char)(1 << byte_offset);\n    }\n    byte_offset++;\n    if (byte_offset > 7) {\n      *(char *)(data_ptr + 0x49)++;\n      byte_offset = 0;\n    }\n  }\n  if ((data_size & 7) != 0) {\n    *(char *)(data_ptr + 0x49)++;\n  }\n  bit = *(char *)(data_ptr + 0x49);\n  calculate_crc_and_set_flag(data_ptr);\n  return (int)(char)(bit + 2);\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_to_base_080045c8",
                "param_1": "base10_num",
                "param_2": "num_digits",
                "param_3": "new_base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "digit_ptr",
                "cVar1": "digit",
                "local_15": "digits"
            },
            "code": "undefined4 convert_to_base_080045c8(int *base10_num,uint num_digits,uint new_base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char *digit_ptr;\n\n  char digits[num_digits + 1];\n  digits[num_digits] = 0;\n\n  if ((int)new_base < 2) {\n    new_base = 10;\n  }\n\n  digit_ptr = digits + num_digits - 1;\n\n  do {\n    quotient = base10_num / new_base;\n    remainder = (base10_num & 0xff) - ((int)(short)quotient * (int)(short)new_base & 0xffU) & 0xff;\n    digit_ptr--;\n    digit = (char)remainder;\n    \n    if (remainder < 10) {\n      digit += '0';\n    } else {\n      digit += '7';\n    }\n    \n    *digit_ptr = digit;\n    base10_num = quotient;\n  } while (quotient != 0);\n\n  if (digit_ptr == (char *)0x0) {\n    result = 0;\n  } else {\n    result = find_end_of_string_08000218(digit_ptr);\n    result = (**(code **)(*param_1 + 4))(param_1,digit_ptr,result);\n  }\n\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_to_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "find_and_set_parameters_08003d18",
                "param_1": "value",
                "param_2": "parameter1",
                "sVar1": "shortValue",
                "iVar2": "oldValue",
                "iVar3": "foundValue",
                "uVar4": "index",
                "PTR_DAT_08003dc0": "PTR_DATA",
                "PTR_DAT_08003dc4": "PTR_DATA2",
                "PTR_DAT_08003dc8": "PTR_DATA3",
                "PTR_DAT_08003dcc": "PTR_DATA4"
            },
            "code": "uint find_and_set_parameters_08003d18(uint value, uint parameter1, uint parameter2)\n{\n  uint oldValue = get_value_from_pointer();\n  short shortValue = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int foundValue = find_value_if_not_negative((int)shortValue, PTR_DAT_08003dc4);\n  if (foundValue == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 &&\n         ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 ||\n          (foundValue = find_value_if_not_negative((int)shortValue, PTR_DAT_08003dc4),\n          **(int **)(PTR_DAT_08003dc8 + index * 4) != foundValue))))) {\n    index = index + 1 & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (process_value(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    foundValue = check_and_set_parameters(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4), value, parameter2 & 0xffff, 1000);\n    if (foundValue == 0) {\n      return parameter2;\n    }\n    foundValue = get_value_from_pointer();\n  } while ((uint)(foundValue - oldValue) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "find_and_set_parameters_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_bytes_08004640",
                "param_1": "byte1",
                "param_2": "byte2"
            },
            "code": "uint combine_bytes_08004640(int byte1, uint byte2) {\n\treturn byte2 | byte1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_bytes_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "set_flags_and_check_input_080034ce",
                "set_bits_and_flags_08000de4": "set_bits_and_flags",
                "set_bits_and_check_input_08000c8c": "set_bits_and_check_input"
            },
            "code": "void set_flags_and_check_input_080034ce(void)\n{\n  set_bits_and_flags();\n  set_bits_and_check_input();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "set_flags_and_check_input_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "calculate_result_and_swap_params_080047fe",
                "param_1": "input",
                "param_2": "result"
            },
            "code": "void calculate_result_and_swap_params_080047fe(int result, int input) {\n  calculate_result_08004844(input, result);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "calculate_result_and_swap_params_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "process_data_08001256",
                "param_1": "data",
                "puVar1": "state",
                "(int)param_1": "(int)data",
                "*(char *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)data + 0x3d)",
                "param_1[0x14]": "data[20]",
                "*(char *)((int)param_1 + 0x3e)": "*(uint8_t *)((int)data + 0x3e)",
                "param_1[4]": "data[4]",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)data + 0x2a)",
                "puVar1[1]": "state[1]",
                "*puVar1": "*state"
            },
            "code": "uint32_t process_data_08001256(uint32_t **data)\n{\n  uint32_t *state = data[11];\n  if (data[20] != NULL || data[12] != '@') {\n    if (data[20] == NULL && data[4] == 49152) {\n      **data |= 256;\n      data[20]++;\n    }\n    else {\n      uint16_t mode = *(uint16_t *)((int)data + 42);\n      if (mode == 0) {\n        **data |= 512;\n      }\n      else if (mode == 1) {\n        if (state == (uint32_t *)-65536) {\n          **data &= 4294966783;\n          state = *data;\n          if ((state[1] & 2048) == 0) {\n            *state |= 512;\n          }\n          else {\n            *state &= 4294966783;\n          }\n        }\n        else if ((state == (uint32_t *)4 || state == (uint32_t *)8) || data[13] == (uint32_t *)18) {\n          **data &= 4294966783;\n          **data |= 512;\n        }\n        else if (data[11] == (uint32_t *)2) {\n          **data |= 1024;\n        }\n        else {\n          **data &= 4294966783;\n        }\n      }\n      else if (mode == 2) {\n        if (data[11] == (uint32_t *)2) {\n          **data |= 1024;\n        }\n        else {\n          **data &= 4294966783;\n          **data |= 2048;\n        }\n        state = *data;\n        if ((state[1] & 2048) != 0) {\n          state[1] |= 4096;\n        }\n      }\n      else {\n        **data |= 1024;\n        state = *data;\n        if ((state[1] & 2048) != 0) {\n          state[1] |= 4096;\n        }\n      }\n      data[20] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_ptr_start",
                "puVar2": "function_ptr_end",
                "puVar3": "current_function_ptr",
                "iVar4": "num_functions",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884() {\n  undefined *function_ptr_start;\n  undefined *function_ptr_end;\n  undefined *current_function_ptr;\n  int num_functions;\n  int i;\n  function_ptr_start = PTR_DAT_080048bc;\n  num_functions = (int)PTR_DAT_080048c0 - (int)PTR_DAT_080048bc;\n  for (i = 0; i != num_functions >> 2; i++) {\n    current_function_ptr = *(undefined **)(function_ptr_start + i * 4);\n    (**(code **)current_function_ptr)();\n  }\n  do_nothing_080059f8();\n  function_ptr_end = PTR_DAT_080048c8;\n  function_ptr_start = PTR_DAT_080048c4;\n  num_functions = (int)function_ptr_end - (int)function_ptr_start >> 2;\n  for (i = 0; i != num_functions; i++) {\n    current_function_ptr = *(undefined **)(function_ptr_start + i * 4);\n    (**(code **)current_function_ptr)();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "set_bit_and_check_input_08004648",
                "set_bit_in_register_08000e3c": "set_bit_in_register",
                "set_flags_and_check_input_08000d8e": "set_flags_and_check_input"
            },
            "code": "void set_bit_and_check_input_08004648(void)\n{\n  set_bit_in_register(3);\n  set_flags_and_check_input();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_input_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "setup_device_08000600",
                "param_1": "device_ptr",
                "param_2": "device_type",
                "cVar1": "device_state",
                "iVar2": "device_state",
                "*param_1": "*device_ptr",
                "PTR_DAT_08000668": "ptr_dat_08000668"
            },
            "code": "void setup_device_08000600(int **device_ptr, int device_type, int device_id) {\n  char device_state = *(char *)((int)device_ptr + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (device_state == '\\x02' || device_state == '\\x03' || device_state == '\\x01') {\n    *device_ptr = PTR_DAT_08000668;\n  }\n  else {\n    *device_ptr = PTR_DAT_08000668;\n  }\n  setup_device_08000600_08004388(*device_ptr, device_type, device_id);\n  if (*(byte *)((int)device_ptr + 6) > 1) {\n    update_bit_at_index_08004110(*(byte *)((int)device_ptr + 6), 1);\n    decode_and_set_flag_080041bc(*(undefined *)((int)device_ptr + 6), 0);\n  }\n  do {\n    int device_state = (**(code **)(**device_ptr + 0xc))();\n  } while (device_state >= 0);\n  *(undefined *)((int)device_ptr + 0x49) = 0;\n  *(undefined *)((int)device_ptr + 0x4a) = 0;\n  *(undefined2 *)(device_ptr + 0x15) = 0;\n  *(undefined2 *)((int)device_ptr + 0x52) = 0;\n  *(undefined2 *)(device_ptr + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "setup_device_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "execute_function_pointer_080045be",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_080045be(void (*function_pointer)())\n{\n    (*function_pointer)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_ccitt_08000728",
                "param_1": "data_start_index",
                "param_2": "data_length",
                "uVar2": "crc_register",
                "uVar3": "crc_bit",
                "uVar4": "i",
                "bVar1": "j",
                "polynomial": "polynomial",
                "byte": "byte",
                "uint": "uint",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint calculate_crc16_ccitt_08000728(int data_start_index, int data_length)\n{\n  byte current_byte;\n  uint crc_register;\n  uint polynomial = 0xa001;\n  crc_register = 0xffff;\n  for (int i = 0; i < data_length; i++) {\n    current_byte = *(byte *)(data_start_index + i + 9);\n    crc_register ^= current_byte;\n    for (int j = 1; j < 9; j++) {\n      if (crc_register & 1) {\n        crc_register = (crc_register >> 1) ^ polynomial;\n      } else {\n        crc_register >>= 1;\n      }\n    }\n  }\n  return (crc_register & 0xff) << 8 | crc_register >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_value_from_array_0800354a",
                "param_1": "index",
                "uVar1": "value",
                "find_value_in_array_0800352e": "find_value_in_array"
            },
            "code": "int get_value_from_array_0800354a(int index){\n  if (index == -1) {\n    return -1;\n  }\n  int value = find_value_in_array();\n  return value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "get_value_from_array_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_param_value_0800124a",
                "param_1": "param_array",
                "PTR_": "",
                "DAT_": "",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*param_ptr",
                "param_1[0x11]": "param_array[param_index]",
                "0xff": "0xff",
                "undefined4": "int",
                "return 0;": "return 0;"
            },
            "code": "int set_param_value_0800124a(int *param_array)\n{\n  int param_index = 0x11;\n  int offset = 0x10;\n  int *param_ptr = param_array + offset;\n  int value = param_array[param_index] & 0xff;\n  *param_ptr = value;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_param_value_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "calculateOffset_08004094",
                "param_1": "baseAddress",
                "iVar1": "currentAddress",
                "puVar2": "nextAddress"
            },
            "code": "int calculateOffset_08004094(int baseAddress) {\n  int currentAddress = *(int *)PTR_DAT_080040c4;\n  undefined *nextAddress = (undefined *)(baseAddress + currentAddress);\n  if (nextAddress <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = nextAddress;\n    return currentAddress;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "calculateOffset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_memory_location_080033c8",
                "DAT_080033d4": "memory_location",
                "PTR_": "",
                "uint": "uint32_t",
                "*": "",
                "bit_mask": "bit_mask",
                "*memory_location": "memory_location",
                "&": "",
                "=": "",
                "&=": "",
                "0x40": "0x40"
            },
            "code": "void clear_bit_in_memory_location_080033c8(void)\n{\n    uint32_t* DAT_080033d4 = (uint32_t*) (DAT_080033d4 + 0x40);\n    uint32_t bit_mask = 0xdfffffff;\n    *DAT_080033d4 &= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_memory_location_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_bit_080031fc",
                "param_1": "bit_position",
                "uVar1": "return_value",
                "DAT_08003350": "data_ptr",
                "DAT_08003354": "return_value_0",
                "DAT_08003358": "return_value_1",
                "DAT_0800335c": "return_value_2",
                "DAT_08003360": "return_value_3",
                "DAT_08003364": "return_value_4",
                "DAT_08003368": "return_value_5",
                "DAT_0800336c": "return_value_6",
                "DAT_08003370": "return_value_7",
                "DAT_08003374": "return_value_8",
                "DAT_08003378": "return_value_9",
                "DAT_0800337c": "return_value_10"
            },
            "code": "uint32_t set_bit_080031fc(uint32_t bit_position)\n{\n    uint32_t* DAT_08003350 = (uint32_t*)0x08003350;\n    uint32_t bit_mask = 1 << bit_position;\n    *DAT_08003350 |= bit_mask;\n\n    switch(bit_position) {\n        case 0: return 0x08003354;\n        case 1: return 0x08003358;\n        case 2: return 0x0800335c;\n        case 3: return 0x08003360;\n        case 4: return 0x08003364;\n        case 5: return 0x08003368;\n        case 6: return 0x0800336c;\n        case 7: return 0x08003370;\n        case 8: return 0x08003374;\n        case 9: return 0x08003378;\n        case 10: return 0x0800337c;\n        default: return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_bit_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_if_param_equals_one_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_data_08000682": "initialize_data"
            },
            "code": "void initialize_if_param_equals_one_08000690(int param1, int param2, undefined4 param3, undefined4 param4) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        initialize_data(PTR_DAT_080006b0, 1, 0, 0, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_equals_one_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "allocate_and_assign_memory_block_080054fc",
                "param_1": "process_id",
                "param_2": "memory_block_info",
                "uVar1": "memory_permissions",
                "iVar2": "allocated_address",
                "local_18": "requested_size",
                "local_14": "local_memory_block_info"
            },
            "code": "void allocate_and_assign_memory_block_080054fc(int process_id, int *memory_block_info)\n{\n  ushort memory_permissions;\n  int allocated_address;\n  int requested_size;\n  int *local_memory_block_info;\n\n  if ((int)((uint)*(ushort *)(memory_block_info + 3) << 0x1e) >= 0)\n  {\n    local_memory_block_info = memory_block_info;\n    requested_size = memory_block_info[5];\n    memory_permissions = check_memory_permissions(process_id, memory_block_info, &requested_size, &local_memory_block_info);\n    allocated_address = allocate_memory_block(process_id, requested_size);\n    if (allocated_address != 0)\n    {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08005320_1_08005578;\n      *memory_block_info = allocated_address;\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 0x80;\n      memory_block_info[5] = requested_size;\n      memory_block_info[4] = allocated_address;\n      if ((local_memory_block_info != (int *)0x0) && (validate_and_assign_value(process_id, (int)*(short *)((int)memory_block_info + 0xe)) != 0))\n      {\n        *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block_info + 3) = memory_permissions | *(ushort *)(memory_block_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block_info + 3) << 0x16 >= 0)\n    {\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 2;\n    }\n  }\n  *memory_block_info = (int)memory_block_info + 0x47;\n  memory_block_info[4] = (int)memory_block_info + 0x47;\n  memory_block_info[5] = 1;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "allocate_and_assign_memory_block_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_byte_in_array_08001420",
                "param_1": "array_ptr",
                "pbVar1": "byte_ptr",
                "*pbVar1": "*byte_ptr",
                "*param_1": "*array_ptr",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int increment_byte_in_array_08001420(int *array_ptr)\n{\n  int *current_index_ptr = array_ptr + 9;\n  short *remaining_count_ptr = (short *)(array_ptr + 0x2a);\n  \n  if (*remaining_count_ptr != 0) {\n    byte *byte_ptr = (byte *)*current_index_ptr;\n    *current_index_ptr = (int)(byte_ptr + 1);\n    *(uint *)(*array_ptr + 0x10) = (uint)*byte_ptr;\n    *remaining_count_ptr = *remaining_count_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_byte_in_array_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_bits_and_flags_08000de4",
                "puVar1": "data_pointer",
                "DAT_08000e14": "data_pointer_1",
                "set_bit_in_register_08000e3c": "set_bit_in_register",
                "check_input_and_set_bits_08000d98": "check_input_and_set_bits",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_bits_and_flags_08000de4() {\n    uint *data_pointer;\n    data_pointer = DAT_08000e14;\n    *data_pointer |= 0x200;\n    *data_pointer |= 0x400;\n    *data_pointer |= 0x100;\n    set_bit_in_register(3);\n    check_input_and_set_bits(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_bits_and_flags_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flag_data",
                "iVar1": "ptr",
                "execute_function_if_flag_set_08003754": "execute_on_flag_set_1",
                "do_nothing_080026ca": "do_nothing",
                "do_nothing_080026c8": "do_nothing_2",
                "execute_function_if_not_null_0800376e": "execute_on_not_null",
                "do_nothing_0800293e": "do_nothing_3",
                "do_nothing_080026cc": "do_nothing_4"
            },
            "code": "void process_flags_080026ce(int* flag_data)\n{\n    int* ptr1 = flag_data;\n    if (((*(uint*)(ptr1[0] + 0x10) & 2) != 0) && ((*(uint*)(ptr1[0] + 0xc) & 2) != 0))\n    {\n        *(undefined4*)(ptr1[0] + 0x10) = 0xfffffffd;\n        *(undefined*)(ptr1 + 6) = 1;\n        if ((*(uint*)(*ptr1 + 0x18) & 3) == 0)\n        {\n            execute_on_flag_set_1();\n            do_nothing(ptr1);\n        }\n        else\n        {\n            do_nothing_2(ptr1);\n        }\n        *(undefined*)(ptr1 + 6) = 0;\n    }\n    int* ptr2 = flag_data;\n    if (((*(uint*)(ptr2[0] + 0x10) & 4) != 0) && ((*(uint*)(ptr2[0] + 0xc) & 4) != 0))\n    {\n        *(undefined4*)(ptr2[0] + 0x10) = 0xfffffffb;\n        *(undefined*)(ptr2 + 6) = 2;\n        if ((*(uint*)(*ptr2 + 0x18) & 0x300) == 0)\n        {\n            execute_on_flag_set_1(ptr2);\n            do_nothing(ptr2);\n        }\n        else\n        {\n            do_nothing_2(ptr2);\n        }\n        *(undefined*)(ptr2 + 6) = 0;\n    }\n    int* ptr3 = flag_data;\n    if (((*(uint*)(ptr3[0] + 0x10) & 8) != 0) && ((*(uint*)(ptr3[0] + 0xc) & 8) != 0))\n    {\n        *(undefined4*)(ptr3[0] + 0x10) = 0xfffffff7;\n        *(undefined*)(ptr3 + 6) = 4;\n        if ((*(uint*)(*ptr3 + 0x1c) & 3) == 0)\n        {\n            execute_on_flag_set_1(ptr3);\n            do_nothing(ptr3);\n        }\n        else\n        {\n            do_nothing_2(ptr3);\n        }\n        *(undefined*)(ptr3 + 6) = 0;\n    }\n    int* ptr4 = flag_data;\n    if (((*(uint*)(ptr4[0] + 0x10) & 0x10) != 0) && ((*(uint*)(ptr4[0] + 0xc) & 0x10) != 0))\n    {\n        *(undefined4*)(ptr4[0] + 0x10) = 0xffffffef;\n        *(undefined*)(ptr4 + 6) = 8;\n        if ((*(uint*)(*ptr4 + 0x1c) & 0x300) == 0)\n        {\n            execute_on_flag_set_1(ptr4);\n            do_nothing(ptr4);\n        }\n        else\n        {\n            do_nothing_2(ptr4);\n        }\n        *(undefined*)(ptr4 + 6) = 0;\n    }\n    int* ptr5 = flag_data;\n    if (((*(uint*)(ptr5[0] + 0x10) & 1) != 0) && ((*(uint*)(ptr5[0] + 0xc) & 1) != 0))\n    {\n        *(undefined4*)(ptr5[0] + 0x10) = 0xfffffffe;\n        execute_on_not_null(ptr5);\n    }\n    int* ptr6 = flag_data;\n    if (((*(uint*)(ptr6[0] + 0x10) & 0x80) != 0) && ((*(uint*)(ptr6[0] + 0xc) & 0x80) != 0))\n    {\n        *(undefined4*)(ptr6[0] + 0x10) = 0xffffff7f;\n        do_nothing_3(ptr6);\n    }\n    int* ptr7 = flag_data;\n    if (((*(uint*)(ptr7[0] + 0x10) & 0x40) != 0) && ((*(uint*)(ptr7[0] + 0xc) & 0x40) != 0))\n    {\n        *(undefined4*)(ptr7[0] + 0x10) = 0xffffffbf;\n        do_nothing_4(ptr7);\n    }\n    int* ptr8 = flag_data;\n    if (((*(uint*)(ptr8[0] + 0x10) & 0x20) != 0) && ((*(uint*)(ptr8[0] + 0xc) & 0x20) != 0))\n    {\n        *(undefined4*)(ptr8[0] + 0x10) = 0xffffffdf;\n        do_nothing_3(ptr8);\n    }\n}",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "str_pointer",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000218(char* str){\n    char* current_char = str;\n    while(*current_char != \"\\0\"){\n        current_char++;\n    }\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_result_from_array_0800339c",
                "param_1": "array_value",
                "param_2": "array_pointer",
                "param_3": "array_length",
                "param_4": "param_4",
                "iVar1": "array_value_result",
                "uVar2": "result"
            },
            "code": "int get_result_from_array_0800339c(int array_value, int* array_pointer, int array_length, int param_4, int param_5) {\n  int array_value_result = get_value_from_array_0800354a(array_value, array_pointer, array_length, param_4, param_5);\n  int result = (array_value_result << 12) >> 27;\n  if (result == 3) {\n    return 8;\n  }\n  if (result != 4) {\n    if (result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "get_result_from_array_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_bits_in_memory_08000e60",
                "param_1": "memory_address",
                "param_2": "bit_pattern",
                "param_3": "bit_mask",
                "uVar1": "bits_to_shift",
                "uVar2": "bits_remaining",
                "DAT_08000ebc": "data_segment_1",
                "DAT_08000ec0": "data_segment_2"
            },
            "code": "void set_bits_in_memory_08000e60(uint memory_address, uint bit_pattern, uint bit_mask) {\n  uint bits_to_shift = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint bits_remaining = 7 - bits_to_shift;\n  if (bits_remaining > 3) {\n    bits_remaining = 4;\n  }\n  if (bits_to_shift + 4 < 7) {\n    bits_to_shift = 0;\n  }\n  else {\n    bits_to_shift = bits_to_shift - 3;\n  }\n  uint shifted_bits = (bit_pattern & (1 << (bits_remaining & 0xff)) - 1U) << (bits_to_shift & 0xff) | (1 << (bits_to_shift & 0xff)) - 1U & bit_mask;\n  if ((int)memory_address < 0) {\n    *(char *)(DAT_08000ec0 + (memory_address & 0xf)) = (char)(shifted_bits << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(shifted_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "validate_user_input_0800165a",
                "param_1": "memory_location",
                "param_2": "is_flag_set",
                "param_3": "input_value",
                "param_4": "return_value",
                "uVar1": "input_value_to_use",
                "uVar2": "memory_value_uint"
            },
            "code": "int validate_user_input_0800165a(int *memory_location, int is_flag_set, int input_value, int memory_value, int return_value) {\n  uint memory_value_uint = *(uint *)(*memory_location + 0x18);\n  int input_value_to_use;\n  if ((memory_value_uint & 0x80) == 0) {\n    input_value_to_use = *(int *)(memory_location + 3);\n  }\n  else {\n    input_value_to_use = *(int *)(memory_location + 6);\n  }\n  validate_user_input_0800165a_08003880(memory_location, (memory_value_uint & 4) == 0, input_value_to_use, memory_value_uint, return_value);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "validate_user_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "convert_data_to_int16_array_08000b04",
                "param_1": "data_address",
                "param_2": "array_address",
                "bVar1": "num_bytes",
                "bVar2": "byte_index",
                "cVar3": "crc_flag",
                "uVar4": "combined_bytes",
                "uVar5": "loop_counter"
            },
            "code": "int convert_data_to_int16_array_08000b04(int data_address,int array_address)\n{\n  byte num_bytes;\n  byte byte_index;\n  char crc_flag;\n  undefined2 combined_bytes;\n  uint loop_counter;\n  \n  num_bytes = *(byte *)(data_address + 0xe);\n  byte_index = *(byte *)(data_address + 0xc);\n  *(undefined *)(data_address + 0xd) = 0;\n  *(byte *)(data_address + 0xe) = num_bytes;\n  *(undefined *)(data_address + 0x49) = 6;\n  for (loop_counter = 0; loop_counter < num_bytes; loop_counter++) {\n    combined_bytes = combine_bytes_08004640(*(undefined *)(loop_counter * 2 + data_address + 0x10),\n                         *(undefined *)(data_address + (loop_counter + 4) * 2 + 9));\n    *(undefined2 *)(array_address + (byte_index + loop_counter) * 2) = combined_bytes;\n  }\n  crc_flag = *(char *)(data_address + 0x49);\n  calculate_crc_and_set_flag_0800076c(data_address);\n  return (int)(char)(crc_flag + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "convert_data_to_int16_array_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "execute_if_flag_set_0800262c",
                "param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag1",
                "*(uint *)(*param_1 + 8)": "flag2",
                "execute_code_if_present_08003594": "execute_code_if_present",
                "DAT_08002688": "DAT",
                "*(undefined4 *)(DAT_08002688 + 0x14)": "some_variable",
                "*(undefined *)((int)param_1 + 0x1d)": "some_other_variable",
                "do_nothing_0800268c": "do_nothing"
            },
            "code": "void execute_if_flag_set_0800262c(int *flag_ptr)\n{\n    uint flag1 = *(uint *)(*flag_ptr + 0xc);\n    uint flag2 = *(uint *)(*flag_ptr + 8);\n    if ((flag1 & 0x100) && (flag2 & 0x1000)) {\n        execute_code_if_present_08003594();\n        *(uint *)(*flag_ptr + 0xc) = (flag1 & 0xff) | 0xfffffe7f;\n    }\n    if ((flag1 & 0x200) && (flag2 & 0x2000)) {\n        do_nothing_0800268c(flag_ptr);\n        *(uint *)(*flag_ptr + 0xc) = (flag1 & 0xff) | 0xfffffd7f;\n    }\n    *(undefined4 *)(DAT_08002688_08002688 + 0x14) = 0x20000;\n    *(undefined *)((int)flag_ptr + 0x1d) = 1;\n}\n",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_flag_set_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "setup_device_08004388",
                "param_1": "device_id",
                "param_2": "device_type",
                "param_3": "device_flags",
                "bVar1": "device_flag_bits",
                "iVar2": "num_device_flags_set",
                "UNRECOVERED_JUMPTABLE": "device_function",
                "uRam08004434": "device_config",
                "FUNC_08003978": "setup_device_components",
                "validate_combination_08003e54": "validate_device_configuration",
                "uRam08004440": "device_function_arg",
                "uRam0800443c": "device_data_table",
                "uRam0000012e": "device_data_value"
            },
            "code": "void setup_device_08004388(int device_id, uint32_t device_type, byte device_flags) {\n  uint32_t extraout_r1;\n  byte device_flag_bits;\n  int num_device_flags_set = 0;\n  uint32_t device_permissions = 0;\n  uint32_t device_access_mode = 0;\n  uint32_t device_security_level = 0;\n  if (device_flags & 0x07 == 0x04) {\n    num_device_flags_set = 7;\n  }\n  else if (device_flags & 0x07 == 0x06) {\n    num_device_flags_set = 8;\n  }\n  else if (device_flags & 0x07 == 0x02) {\n    num_device_flags_set = 6;\n  }\n  else {\n    num_device_flags_set = 0;\n  }\n  if (device_flags & 0x30 == 0x30) {\n    device_permissions = 0x600;\n    num_device_flags_set++;\n  }\n  else if (!(device_flags & 0x20)) {\n    device_permissions = 0;\n  }\n  else {\n    device_permissions = 0x400;\n    num_device_flags_set++;\n  }\n  if (!(device_flags & 0x08)) {\n    device_access_mode = 0;\n  }\n  else {\n    device_access_mode = 0x2000;\n  }\n  if (num_device_flags_set == 8) {\n    device_security_level = 0;\n  }\n  else if (num_device_flags_set == 9) {\n    device_security_level = 0x1000;\n  }\n  else {\n    num_device_flags_set = 0;\n  }\n  if (num_device_flags_set != 0) {\n    setup_device_08004388_components(device_id + 0xd4);\n    validate_device_configuration(device_id + 0xd4, device_config);\n    return;\n  }\n  uint32_t* device_function = (uint32_t*)0x8004432;\n  process_and_execute_function(device_function, 299, device_function_arg);\n  if (extraout_r1 < 0x60) {\n    uint16_t* device_data = (uint16_t*)(device_data_table + extraout_r1 * 2);\n    device_data_value = *device_data;\n  }\n  else {\n    device_data_value = 0xffff;\n  }\n  (*device_function)();\n  return;\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "setup_device_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "execute_function_080051ac",
                "puVar1": "puFunctionPointer",
                "iVar2": "intVariable1",
                "piVar3": "piFunctionPointer1",
                "piVar4": "piFunctionPointer2",
                "uVar5": "uintVariable1",
                "uVar6": "ushortVariable1",
                "iVar7": "intVariable2",
                "pcVar8": "functionPointerVariable1",
                "iVar9": "intVariable3",
                "uVar10": "uintVariable2",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTableVariable1",
                "bVar11": "boolVariable1",
                "uVar12": "undefinedVariable1"
            },
            "code": "void execute_function_080051ac(void)\n{\n  uint *puFunctionPointer;\n  int intVariable1;\n  int *piFunctionPointer1;\n  int *piFunctionPointer2;\n  uint uintVariable1;\n  ushort ushortVariable1;\n  int intVariable2;\n  code *functionPointerVariable1;\n  int intVariable3;\n  uint uintVariable2;\n  code *unrecoveredJumpTableVariable1;\n  bool boolVariable1;\n  undefined8 undefinedVariable1;\n  execute_code_080055d0(6);\n  unrecoveredJumpTableVariable1 = (code *)0x80051bb;\n  undefinedVariable1 = infinite_loop_080040f8(1);\n  piFunctionPointer1 = (int *)((ulonglong)undefinedVariable1 >> 0x20);\n  puFunctionPointer = (uint *)undefinedVariable1;\n  ushortVariable1 = *(ushort *)(piFunctionPointer1 + 3);\n  uintVariable1 = (uint)ushortVariable1;\n  if ((int)(uintVariable1 << 0x1c) < 0) {\n    intVariable1 = piFunctionPointer1[4];\n    if (intVariable1 != 0) {\n      intVariable2 = uintVariable1 << 0x1e;\n      boolVariable1 = intVariable2 == 0;\n      intVariable3 = *piFunctionPointer1;\n      if (boolVariable1) {\n        intVariable2 = piFunctionPointer1[5];\n      }\n      *piFunctionPointer1 = intVariable1;\n      if (!boolVariable1) {\n        intVariable2 = 0;\n      }\n      piFunctionPointer1[2] = intVariable2;\n      for (intVariable3 = intVariable3 - intVariable1; 0 < intVariable3; intVariable3 = intVariable3 - intVariable2) {\n        intVariable2 = (*(code *)piFunctionPointer1[10])(puFunctionPointer,piFunctionPointer1[8],intVariable1,intVariable3);\n        if (intVariable2 < 1) {\n          ushortVariable1 = *(ushort *)(piFunctionPointer1 + 3);\n          goto LAB_080052b2;\n        }\n        intVariable1 = intVariable1 + intVariable2;\n      }\n    }\n  }\n  else if (((0 < piFunctionPointer1[1]) || (0 < piFunctionPointer1[0x10])) &&\n          (functionPointerVariable1 = (code *)piFunctionPointer1[0xb], functionPointerVariable1 != (code *)0x0)) {\n    uintVariable2 = *puFunctionPointer;\n    *puFunctionPointer = 0;\n    if ((ushortVariable1 & 0x1000) == 0) {\n      intVariable1 = (*functionPointerVariable1)(puFunctionPointer,piFunctionPointer1[8],uintVariable1 & 0x1000,1);\n      if ((intVariable1 == -1) && (uintVariable1 = *puFunctionPointer, uintVariable1 != 0)) {\n        if ((uintVariable1 != 0x1d) && (uintVariable1 != 0x16)) {\n          *(ushort *)(piFunctionPointer1 + 3) = *(ushort *)(piFunctionPointer1 + 3) | 0x40;\n                    (*unrecoveredJumpTableVariable1)();\n          return;\n        }\n        *puFunctionPointer = uintVariable2;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      intVariable1 = piFunctionPointer1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(piFunctionPointer1 + 3) << 0x1d) < 0) &&\n       (intVariable1 = intVariable1 - piFunctionPointer1[1], piFunctionPointer1[0xd] != 0)) {\n      intVariable1 = intVariable1 - piFunctionPointer1[0x10];\n    }\n    intVariable1 = (*(code *)piFunctionPointer1[0xb])(puFunctionPointer,piFunctionPointer1[8],intVariable1,0);\n    ushortVariable1 = *(ushort *)(piFunctionPointer1 + 3);\n    if ((intVariable1 == -1) &&\n       ((0x1d < *puFunctionPointer || (-1 < (int)((DAT_080052c8 >> (*puFunctionPointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(piFunctionPointer1 + 3) = ushortVariable1 | 0x40;\n                    (*unrecoveredJumpTableVariable1)(0xffffffff);\n      return;\n    }\n    piFunctionPointer1[1] = 0;\n    *piFunctionPointer1 = piFunctionPointer1[4];\n    if (((int)((uint)ushortVariable1 << 0x13) < 0) && ((intVariable1 != -1 || (*puFunctionPointer == 0)))) {\n      piFunctionPointer1[0x15] = intVariable1;\n    }\n    piFunctionPointer2 = (int *)piFunctionPointer1[0xd];\n    *puFunctionPointer = uintVariable2;\n    if (piFunctionPointer2 != (int *)0x0) {\n      if (piFunctionPointer2 != piFunctionPointer1 + 0x11) {\n        add_element_080048dc(puFunctionPointer);\n      }\n      piFunctionPointer1[0xd] = 0;\n                    (*unrecoveredJumpTableVariable1)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    (*unrecoveredJumpTableVariable1)(0);\n  return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "execute_function_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data_array",
                "param_2": "param_array",
                "uVar1": "return_value",
                "iVar2": "array_index_1",
                "piVar3": "array_index_2",
                "uVar4": "uVar4",
                "uVar5": "uVar5",
                "iVar6": "array_index_3",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "pcVar7": "function_pointer_1",
                "iVar8": "array_index_4",
                "uVar9": "uVar9",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "bVar10"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data_array, int *param_array)\n{\n    uint32_t return_value;\n    int array_index_1;\n    int *array_index_2;\n    uint32_t uVar4;\n    uint16_t uVar5;\n    int array_index_3;\n    uint32_t unaff_r4;\n    uint32_t unaff_r5;\n    code *function_pointer_1;\n    int array_index_4;\n    uint32_t uVar9;\n    code *UNRECOVERED_JUMPTABLE_00;\n    bool bVar10;\n\n    if (param_array[4] != 0) {\n        if ((data_array != (uint32_t *)0x0) && (data_array[6] == 0)) {\n            initialize_function_080053a0();\n        }\n        if (param_array == (int *)PTR_DAT_08005314) {\n            param_array = (int *)data_array[1];\n        }\n        else if (param_array == (int *)PTR_DAT_08005318) {\n            param_array = (int *)data_array[2];\n        }\n        else if (param_array == (int *)PTR_DAT_0800531c) {\n            param_array = (int *)data_array[3];\n        }\n        if (*(uint16_t *)(param_array + 3) != 0) {\n            uVar5 = *(uint16_t *)(param_array + 3);\n            array_index_1 = (int)uVar5;\n            if ((int)(array_index_1 << 0x1c) < 0) {\n                array_index_2 = &param_array[4];\n                if (*array_index_2 != 0) {\n                    array_index_3 = array_index_1 << 0x1e;\n                    bVar10 = array_index_3 == 0;\n                    array_index_4 = *param_array;\n                    if (bVar10) {\n                        array_index_3 = param_array[5];\n                    }\n                    *param_array = *array_index_2;\n                    if (!bVar10) {\n                        array_index_3 = 0;\n                    }\n                    param_array[2] = array_index_3;\n                    for (array_index_4 = array_index_4 - *array_index_2; 0 < array_index_4; array_index_4 = array_index_4 - array_index_3) {\n                        array_index_3 = (*(code *)param_array[10])(data_array, param_array[8], *array_index_2, array_index_4, unaff_r4, unaff_r5);\n                        if (array_index_3 < 1) {\n                            uVar5 = *(uint16_t *)(param_array + 3);\n                            goto LAB_080052b2;\n                        }\n                        *array_index_2 = *array_index_2 + array_index_3;\n                    }\n                }\n            }\n            else if (((0 < param_array[1]) || (0 < param_array[0x10])) && ((function_pointer_1 = (code *)param_array[0xb]), function_pointer_1 != (code *)0x0)) {\n                uVar9 = *data_array;\n                *data_array = 0;\n                if ((uVar5 & 0x1000) == 0) {\n                    array_index_1 = (*function_pointer_1)(data_array, param_array[8], uVar5 & 0x1000, 1);\n                    if ((array_index_1 == -1) && ((uVar4 = *data_array, uVar4 != 0))) {\n                        if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n                            *(uint16_t *)(param_array + 3) = *(uint16_t *)(param_array + 3) | 0x40;\n                            UNRECOVERED_JUMPTABLE_00 = (code *)0xffffffff;\n                            goto LAB_0800527c;\n                        }\n                        *data_array = uVar9;\n                        goto LAB_080051d6;\n                    }\n                }\n                else {\n                    array_index_1 = param_array[0x15];\n                }\n                if (((int)((uint)*(uint16_t *)(param_array + 3) << 0x1d) < 0) && ((array_index_1 = array_index_1 - param_array[1], param_array[0xd] != 0))) {\n                    array_index_1 = array_index_1 - param_array[0x10];\n                }\n                array_index_1 = (*(code *)param_array[0xb])(data_array, param_array[8], array_index_1, 0);\n                uVar5 = *(uint16_t *)(param_array + 3);\n                if ((array_index_1 == -1) && ((0x1d < *data_array || (-1 < (int)((DAT_080052c8 >> (*data_array & 0xff)) << 0x1f)))) {\n                    goto LAB_080052b2;\n                }\n                param_array[1] = 0;\n                *param_array = param_array[4];\n                if (((int)((uint)uVar5 << 0x13) < 0) && ((array_index_1 != -1 || (*data_array == 0)))) {\n                    param_array[0x15] = array_index_1;\n                }\n                array_index_2 = (int *)param_array[0xd];\n                *data_array = uVar9;\n                if (array_index_2 != (int *)0x0) {\n                    if (array_index_2 != &param_array[0x11]) {\n                        add_element_080048dc(data_array);\n                    }\n                    param_array[0xd] = 0;\n                    UNRECOVERED_JUMPTABLE_00 = (code *)0;\n                    goto LAB_08005252;\n                }\n            }\nLAB_080051d6:\n            UNRECOVERED_JUMPTABLE_00 = (code *)0;\n            goto LAB_080051d8;\n        }\n    }\n    return_value = 0;\n    goto LAB_080052e6;\n\nLAB_080051d8:\n    return_value = (*UNRECOVERED_JUMPTABLE_00)(0);\n    goto LAB_080052e6;\n\nLAB_080052b2:\n    *(uint16_t *)(param_array + 3) = uVar5 | 0x40;\nLAB_080052bc:\n    UNRECOVERED_JUMPTABLE_00 = (code *)0xffffffff;\n    return_value = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n    goto LAB_080052e6;\n\nLAB_08005252:\n    return_value = (*UNRECOVERED_JUMPTABLE_00)();\n    goto LAB_080052e6;\n\nLAB_0800527c:\n    return_value = (*UNRECOVERED_JUMPTABLE_00)();\nLAB_080052e6:\n    return return_value;\n}\n",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_element_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "element_value",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int validate_input_08002eb2(int *input_array, int array_length, int element_value)\n{\n  if (input_array[9] != ' ') {\n    return 2;\n  }\n  if (array_length == 0) {\n    return 1;\n  }\n  if (element_value == 0) {\n    return 1;\n  }\n  if (input_array[14] != 1) {\n    input_array[8] = array_length;\n    input_array[9] = (short)element_value;\n    input_array[11] = (short)element_value;\n    input_array[15] = 0;\n    input_array[9] = 0x21;\n    input_array[14] = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_and_execute_device_08000d3c",
                "iVar1": "index",
                "puVar2": "ptr_to_data",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void initialize_and_execute_device_08000d3c(void)\n{\n  int index;\n  undefined4 *ptr_to_data;\n  code *jumptable;\n  for (index = 0; ptr_to_data = (undefined4 *)PTR_DAT_08000d84,\n      PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index = index + 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (; ptr_to_data < PTR_DAT_08000d88; ptr_to_data = ptr_to_data + 1) {\n    *ptr_to_data = 0;\n  }\n  set_flags_and_values();\n  execute_functions();\n  jumptable = (code *)0x8000d72;\n  initialize_device_and_set_flags();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_execute_device_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = find_value_if_not_negative_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = find_value_if_not_negative_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      process_data_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = compare_and_return_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        process_data_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = get_value_from_array_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        update_data_08000fb4(uVar10,&local_2c);\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = get_value_from_array_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        update_data_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "index",
                "target": "target",
                "mask": "mask"
            },
            "code": "void update_bit_0800316c(uint bit_position, int* bit_array){\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* target = (uint*)(bit_array + index * 4);\n    uint mask = ~(1 << (bit_position & 0xf));\n    *target = *target & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "returnMaxValue_080040d0"
            },
            "code": "unsigned int returnMaxValue_080040d0(void)\n{\n    unsigned int maxValue = 0xFFFFFFFF;\n    return maxValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_region_permissions_080040d6",
                "param_1": "memory_region_address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(memory_region_address + 4)"
            },
            "code": "void set_memory_region_permissions_080040d6(int* memory_region_address, int permissions) {\n    *(int *)(memory_region_address + 4) = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_region_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "input_value"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_buffer) {\n  int buffer_offset;\n  byte *current_byte;\n  byte *next_byte;\n  uint input_value;\n  \n  current_byte = (*input_buffer)[2] - 1;\n  (*input_buffer)[2] = current_byte;\n  if ((current_byte >= -1) || ((int)(*input_buffer)[6] <= (int)current_byte && current_byte != (byte *)0xa)) {\n    next_byte = *input_buffer;\n    *input_buffer = next_byte + 1;\n    *next_byte = input_byte;\n    return (uint)input_byte;\n  }\n  if (input_length != 0 && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_memory_block_080053a0();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080050c4) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050c8) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050cc) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  (*input_buffer)[2] = (*input_buffer)[6];\n  next_byte = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_offset = (int)next_byte << 0x1c;\n  if (((buffer_offset < 0) && (next_byte = input_buffer[4], next_byte != (byte *)0x0)) || (buffer_offset = process_data_080050d0(input_length, input_buffer, buffer_offset, next_byte, current_byte), buffer_offset == 0)) {\n    buffer_offset = (int)*input_buffer - (int)input_buffer[4];\n    input_value = (uint)input_byte;\n    if ((buffer_offset < (int)input_buffer[5]) || (buffer_offset = process_data_080052cc(input_length,input_buffer), buffer_offset == 0)) {\n      (*input_buffer)[2] = (*input_buffer)[2] - 1;\n      next_byte = *input_buffer;\n      *input_buffer = next_byte + 1;\n      *next_byte = input_byte;\n      if ((byte *)(buffer_offset + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return input_value;\n        }\n        if (input_value != 10) {\n          return input_value;\n        }\n      }\n      buffer_offset = process_data_080052cc(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return input_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_concatenated_values_080002d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "code": "uint64_t get_concatenated_values_080002d0(int value1, int value2, int value3, int value4) {\n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value2 = -1;\n      value1 = -1;\n    }\n    return ((uint64_t)value2 << 32) | value1;\n  }\n  uint64_t result = some_other_function();\n  return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_param_index_08003f00",
                "param_1": "param_value",
                "uVar1": "index"
            },
            "code": "uint find_param_index_08003f00(int param_value) {\n  uint index;\n  if (param_value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 9) {\n        return index;\n      }\n      if (param_value == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_param_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_copy_08001440",
                "param_1": "ptr_param_1",
                "puVar1": "ptr_char_1"
            },
            "code": "int increment_and_copy_08001440(int *ptr_param_1)\n{\n    short *ptr_short_1 = (short *)((int)ptr_param_1 + 0x2a);\n    if (*ptr_short_1 != 0) {\n        char *ptr_char_1 = (char *)ptr_param_1[9];\n        ptr_param_1[9] = (int)(ptr_char_1 + 1);\n        *ptr_char_1 = (char)*(int *)(*ptr_param_1 + 0x10);\n        *ptr_short_1 = *ptr_short_1 - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_copy_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "data_size",
                "bVar1": "current_byte",
                "cVar2": "byte_0",
                "cVar3": "byte_8",
                "cVar4": "byte_16",
                "cVar5": "byte_24",
                "pbVar6": "next_byte",
                "puVar7": "next_data",
                "pbVar8": "next_byte",
                "uVar9": "data_offset",
                "uVar10": "data_size_aligned",
                "uVar11": "data_word",
                "uVar12": "data_word_1",
                "bVar13": "byte_0_1",
                "bVar14": "byte_8_1",
                "bVar15": "byte_16_1",
                "bVar16": "byte_24_1"
            },
            "code": "byte* find_byte_sequence_08000230(uint* data, uint target_byte, uint data_size) {\n  byte* result = nullptr;\n  data_size = data_size & 0xff;\n  if ((int)data_size < 0x10) {\n    do {\n      if (data_size == 0) {\n        return result;\n      }\n      uint* next_data = (uint*)((int)data + 1);\n      byte current_byte = *(byte*)data;\n      data_size--;\n      data = next_data;\n    } while (current_byte != target_byte);\n    result = (byte*)((int)data - 1);\n  }\n  else {\n    uint data_offset = (uint)data & 7;\n    uint target_word = target_byte | target_byte << 8 | target_byte << 16 | target_byte << 24;\n    while (true) {\n      if (data_offset == 0) {\n        uint data_size_aligned = data_size & 0xfffffff8;\n        do {\n          uint* next_data = data + 2;\n          data_size_aligned -= 8;\n          uint data_word = *data ^ target_word;\n          uint data_word_1 = data[1] ^ target_word;\n          bool byte_0 = (char)data_word == 0;\n          bool byte_8 = (char)(data_word >> 8) == 0;\n          bool byte_16 = (char)(data_word >> 16) == 0;\n          bool byte_24 = (char)(data_word >> 24) == 0;\n          data_word = byte_24 << 24 | byte_16 << 16 | byte_8 << 8 | byte_0;\n          bool byte_0_1 = (char)data_word_1 == 0;\n          bool byte_8_1 = (char)(data_word_1 >> 8) == 0;\n          bool byte_16_1 = (char)(data_word_1 >> 16) == 0;\n          bool byte_24_1 = (char)(data_word_1 >> 24) == 0;\n          data_word_1 = byte_24_1 << 24 | byte_16_1 << 16 | byte_8_1 << 8 | byte_0_1;\n          if (data_word_1 != 0) {\n            if (data_word == 0) {\n              byte* next_byte = (byte*)((int)data + 5);\n              data_word = data_word_1;\n            }\n            else {\n              byte* next_byte = (byte*)((int)data + 1);\n            }\n            if ((data_word & 1) == 0) {\n              bool byte_8_2 = (data_word & 0x100) == 0;\n              byte* next_byte = byte_8_2 ? (byte*)((int)next_byte + 2) : next_byte + 1;\n              if ((data_word & 0x18000) == 0) {\n                next_byte++;\n              }\n            }\n            result = next_byte - 1;\n            break;\n          }\n          data = next_data;\n        } while (data_size_aligned != 0);\n        data_size = data_size & 7;\n      }\n      uint* next_data = (uint*)((int)data + 1);\n      data_size--;\n      if (*(byte*)data == target_byte) {\n        result = (byte*)((int)data - data_offset);\n        break;\n      }\n      data_offset = (uint)next_data & 7;\n      data = next_data;\n      if (data_size == 0) {\n        break;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "process_input_08001684",
                "param_1": "input_params",
                "PTR_08001714": "DAT_08001714",
                "flag_value": "flag_value",
                "flag_type": "flag_type"
            },
            "code": "int process_input_08001684(uint **input_params) {\n    uint *flag_value = input_params[0xb];\n    char *flag_type = (char *)((int)input_params + 0x3d);\n    if ((*flag_value == (uint *)0x4) || (*flag_value == (uint *)0x8)) {\n        if (*flag_type == '(') {\n            flag_value = PTR_08001714;\n            (*input_params)[1] &= 0xfffff8ff;\n            (*input_params)[5] = 0xfffffbff;\n            **input_params &= 0xfffffbff;\n            input_params[0xc] = (uint *)0x0;\n            *flag_type = 0x20;\n            *(flag_type + 1) = 0;\n            execute_function_if_flag_set_and_not_space_080038d0();\n        }\n    }\n    else if (*flag_type == '!') {\n        flag_value = PTR_08001714;\n        input_params[0xc] = (uint *)0x21;\n        *flag_type = 0x20;\n        *(flag_type + 1) = 0;\n        (*input_params)[1] &= 0xfffff8ff;\n        (*input_params)[5] = 0xfffffbff;\n        **input_params &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else {\n        (*input_params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "process_input_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "set_flag_and_clear_bit_08000f8c",
                "param_1": "flag_ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int set_flag_and_clear_bit_08000f8c(uint **flag_ptr) {\n    char *flag = (char *)((int)flag_ptr + 0x35);\n    if (*flag != '\\x02') {\n        flag_ptr[0x15] = (uint *)0x80;\n        return 1;\n    }\n    *flag = 5;\n    **flag_ptr &= 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "set_flag_and_clear_bit_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_if_initialized_080001ac",
                "param_1": "param",
                "*PTR_DAT_080001c4": "is_initialized",
                "DAT_080001c8": "has_initialized",
                "PTR_FUN_080001cc": "initializing_function_pointer"
            },
            "code": "int* check_if_initialized_080001ac(int* param) {\n    if (**PTR_DAT_080001c4 == 0) {\n        if (DAT_080001c8 != 0) {\n            param = PTR_FUN_080001cc;\n        }\n        **PTR_DAT_080001c4 = 1;\n    }\n    return param;\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0(){\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_with_value_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_memory"
            },
            "code": "void fill_with_value_080048cc(void *memory, int value, int size) {\n  void *end_memory = memory + size;\n  for (; memory != end_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": false,
            "current_name": "fill_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "returnZero_080040e4"
            },
            "code": "int returnZero_080040e4(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "returnZero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_value_by_id_08003506",
                "param_1": "id",
                "param_2": "data_array",
                "*param_2": "*data_array"
            },
            "code": "int find_value_by_id_08003506(int id, short *data_array)\n{\n    while (true)\n    {\n        if (*(int *)(data_array + 2) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(data_array + 2) == id)\n        {\n            break;\n        }\n        data_array = data_array + 6;\n    }\n    return (int)*data_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_value_by_id_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "value_ptr"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int *PTR_DAT_080025e8 = PTR_DAT_080025e8;\n    int value = *PTR_DAT_080025e8;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "get_zero_080040e8"
            },
            "code": "int get_zero_080040e8() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "get_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "param_1": "data_buffer",
                "param_2": "memory_buffer",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "combined_bytes",
                "uVar2": "memory_index"
            },
            "code": "uint16_t update_data_08000a00(uint8_t *data_buffer, uint16_t *memory_buffer, uint32_t param_3, uint32_t param_4)\n{\n    uint32_t combined_bytes = combine_bytes(*(data_buffer + 0xb), *(data_buffer + 0xc), param_3, param_4, param_4);\n    uint8_t shift_amount = combined_bytes & 0xf;\n    uint8_t memory_index = (combined_bytes << 0x14) >> 0x18;\n    if (*(int8_t *)(data_buffer + 0xd) == -1)\n    {\n        *(memory_buffer + memory_index) = (1 << shift_amount) | *(memory_buffer + memory_index);\n    }\n    else\n    {\n        *(memory_buffer + memory_index) = *(memory_buffer + memory_index) & ~(1 << shift_amount);\n    }\n    *(data_buffer + 0x49) = 6;\n    calculate_crc_and_set_flag(data_buffer);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "update_data_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_or_count_bits_080047c0",
                "param_1": "input_val",
                "execute_and_update_flags_08005760": "execute_and_update_flags",
                "count_bits_set_08004678": "count_bits_set",
                "iVar1": "bits_set"
            },
            "code": "void execute_or_count_bits_080047c0(int input_val)\n{\n  int bits_set;\n  if (*(int *)(input_val + 8) != 0) {\n    (**(code **)(input_val + 0xc))();\n    return;\n  }\n  execute_and_update_flags();\n  bits_set = count_bits_set();\n  if (*(int *)(PTR_DAT_080047ec + bits_set * 0x14 + 0xc) != 0) {\n    execute_or_count_bits_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_or_count_bits_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_block_with_padding_08005374",
                "param_1": "base_address",
                "param_2": "num_blocks",
                "puVar1": "block_address",
                "iVar2": "block_size"
            },
            "code": "undefined4* allocate_memory_block_with_padding_08005374(undefined4 base_address, int num_blocks) {\n  undefined4* block_address;\n  int block_size = (num_blocks - 1) * BLOCK_SIZE;\n  block_address = (undefined4*) allocate_memory_block_08004978(base_address, block_size + HEADER_SIZE);\n  if (block_address != (undefined4*)0) {\n    *block_address = 0;\n    block_address[1] = num_blocks;\n    block_address[2] = block_address + 3;\n    fill_with_value_080048cc(block_address + 3, 0, block_size);\n  }\n  return block_address;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_with_padding_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_byte_sequence_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = count_chars_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input_num"
            },
            "code": "int subtract_four_from_input_08003750(int input_num) {\n    return input_num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "check_input_080014ec",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int check_input_080014ec(uint **input_ptr, uint *input_data, int input_size, uint *output_data)\n{\n    int result = 0;\n    uint *ptr;\n\n    if (*((*input_ptr) + 0x3d) == '(')\n    {\n        if (input_data == NULL)\n        {\n            result = 1;\n        }\n        else if (input_size == 0)\n        {\n            result = 1;\n        }\n        else if (*((*input_ptr) + 0xf) == 1)\n        {\n            result = 2;\n        }\n        else\n        {\n            *((char *)(*input_ptr) + 0x3d) = '*';\n            *((char *)(*input_ptr) + 0x3e) = ' ';\n            result = 0;\n            (*input_ptr)[0x10] = NULL;\n            (*input_ptr)[9] = input_data;\n            *((short *)(*input_ptr) + 0x14) = (short)input_size;\n            (*input_ptr)[0xb] = output_data;\n            *((short *)(*input_ptr) + 0xa) = *((short *)(*input_ptr) + 0x14);\n            *((char *)(*input_ptr) + 0xf) = 0;\n            (*input_ptr)[1] |= 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "check_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "add_element_080048dc",
                "param_1": "linked_list",
                "param_2": "value_to_add",
                "param_3": "error_code",
                "param_4": "unused_param",
                "puVar1": "pointer_to_linked_list",
                "piVar2": "current_element_value",
                "extraout_r1": "previous_element",
                "ppiVar3": "new_element",
                "ppiVar4": "current_element",
                "ppiVar5": "current_element_pointer",
                "ppiVar6": "previous_element_pointer",
                "ppiVar7": "new_element_pointer",
                "bVar8": "is_same_element"
            },
            "code": "void add_element_080048dc(int* linked_list, int value_to_add, int error_code, int unused_param)\\n\\\n    {\\n\\\n        int** head = (int**)(linked_list - 1);\\n\\\n        if(value_to_add == 0) {\\n\\\n            return;\\n\\\n        }\\n\\\n        if (*head == NULL) {\\n\\\n            *head = (int*)malloc(8);\\n\\\n            **head = value_to_add;\\n\\\n            (*head)[1] = NULL;\\n\\\n        }\\n\\\n        else {\\n\\\n            int** current = *head;\\n\\\n            int** previous = NULL;\\n\\\n            while (current != NULL && **current < value_to_add) {\\n\\\n                previous = current;\\n\\\n                current = (int**)(*current)[1];\\n\\\n            }\\n\\\n            if (previous == NULL) {\\n\\\n                *head = (int*)malloc(8);\\n\\\n                **head = value_to_add;\\n\\\n                (*head)[1] = current;\\n\\\n            }\\n\\\n            else if (current == NULL || **current > value_to_add) {\\n\\\n                previous[1] = (int*)malloc(8);\\n\\\n                *previous[1] = value_to_add;\\n\\\n                previous[1][1] = current;\\n\\\n            }\\n\\\n            else {\\n\\\n                *error_code = 0xc;\\n\\\n            }\\n\\\n        }\\n\\\n        do_nothing_0800557e(error_code, *head, NULL, unused_param);\\n\\\n        return;\\n\\\n    }",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "add_element_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_function_if_flag_set_08003754",
                "param_1": "input_num",
                "iVar1": "function_ptr",
                "subtract_four_from_input_08003750": "subtract_four_from_input"
            },
            "code": "void execute_function_if_flag_set_08003754(int input_num) {\n  int function_ptr = subtract_four_from_input();\n  if ((*(code **)(function_ptr + 0x48) != (code *)0x0) && (*(char *)(input_num + 0x18) == '\\x01')) {\n    (**(code **)(function_ptr + 0x48))(function_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_flag_set_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flags_08001578",
                "param_1": "bit_array_ptr",
                "puVar1": "bit_array",
                "PTR_DAT_08004000_00000010": "bit_array[0]",
                "PTR_DAT_08004000_00000011": "bit_array[1]"
            },
            "code": "uint32_t set_bit_and_flags_08001578(uint32_t **bit_array_ptr)\n{\n  uint32_t *bit_array = *bit_array_ptr;\n  if (bit_array[15] != ' ') {\n    return 2;\n  }\n  bit_array[15] = '(';\n  if ((PTR_DAT_08004000_00000010 & 1) == 0) {\n    PTR_DAT_08004000_00000010 |= 1;\n  }\n  **bit_array_ptr |= 0x400;\n  (*bit_array_ptr)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "is_dat_zero",
                "param_2": "input_value",
                "DAT_0800485c": "dat_value"
            },
            "code": "longlong calculate_result_08004844(undefined4 is_dat_zero, uint input_value) {\n  if (DAT_0800485c != 0) {\n    return CONCAT44(is_dat_zero,2);\n  }\n  return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_at_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10",
                "DAT_080031f8": "data_1"
            },
            "code": "undefined4 get_data_at_index_0800318c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_at_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "checkAndExecuteIfSetBitCountNotZero_080047d0",
                "iVar1": "setBitCount",
                "count_bits_set_08004678": "countBitsSet",
                "PTR_DAT_080047ec": "ptrDat",
                "execute_or_count_bits_080047c0": "executeOrCountBits",
                "*ptr": "dereferencedPtr"
            },
            "code": "void checkAndExecuteIfSetBitCountNotZero_080047d0(void)\n{\n  int setBitCount = countBitsSet();\n  int* ptr = PTR_DAT_080047ec + setBitCount * 0x14 + 0xc;\n  if (*ptr != 0) {\n    executeOrCountBits();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "checkAndExecuteIfSetBitCountNotZero_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "code": "void infinite_loop_080040f8(void)\n{\n  while(true)\n  {\n    // Infinite loop\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "infinite_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "processOffset_0800500c",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPtr",
                "iVar2": "offsetValue"
            },
            "code": "void processOffset_0800500c(int *output, undefined4 input) {\n  undefined *dataPtr;\n  int offsetValue;\n  dataPtr = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  offsetValue = calculateOffset_08004094(input);\n  if ((offsetValue == -1) && (*(int *)dataPtr != 0)) {\n    *output = *(int *)dataPtr;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "processOffset_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "input_register_3",
                "DAT_0800247c": "data_address_1",
                "uVar1": "system_clock_frequency",
                "uVar2": "pll_multiplier",
                "DAT_08002484": "default_frequency",
                "DAT_08002480": "fallback_frequency"
            },
            "code": "uint calculate_frequency_080023b4(void)\n{\n  uint sys_clk_freq = *(uint *)(DAT_0800247c + 8) & 0xc;\n  uint frequency = 0;\n  if (sys_clk_freq == 4)\n  {\n    frequency = DAT_08002484;\n  }\n  else if (sys_clk_freq == 8)\n  {\n    uint pll_mul = *(uint *)(DAT_0800247c + 4) & 0x3f;\n    if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0)\n    {\n      uint pll_input_freq = pll_mul * 16000000;\n      uint pll_output_freq = (((uint)(pll_mul * 0x20 < pll_mul) * -0x3f - (uint)(pll_mul * 0x7c0 < pll_mul * 0x1f)) * 8 + (uint)CARRY4(pll_mul * 0x3d08, pll_mul)) * 0x400 | pll_mul * 0x3d09 >> 0x16;\n      frequency = get_concatenated_values_080002d0(pll_input_freq, pll_output_freq, 0, in_r3);\n    }\n    else\n    {\n      uint pll_input_freq = pll_mul * 8000000;\n      uint pll_output_freq = (((uint)(pll_mul * 0x20 < pll_mul) * -0x3f - (uint)(pll_mul * 0x7c0 < pll_mul * 0x1f)) * 8 + (uint)CARRY4(pll_mul * 0x3d08, pll_mul)) * 0x200;\n      frequency = get_concatenated_values_080002d0(pll_input_freq, pll_output_freq, 0, in_r3);\n    }\n    frequency = frequency / ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  }\n  else\n  {\n    frequency = DAT_08002480;\n  }\n  return frequency;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_frequency_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "set_and_check_if_bit_count_not_zero_080011a4",
                "param_1": "bit_mask",
                "DAT_080011bc": "data_ptr",
                "PTR_080047d0": "check_and_execute_if_bit_count_not_zero"
            },
            "code": "void set_and_check_if_bit_count_not_zero_080011a4(uint bit_mask) {\n  uint* DAT_080011bc = (uint*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & bit_mask) != 0) {\n    *DAT_080011bc = bit_mask;\n    PTR_080047d0();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "set_and_check_if_bit_count_not_zero_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "process_input_08001e68",
                "param_1": "input",
                "puVar2": "input_ptr",
                "uVar3": "flags",
                "uVar4": "control",
                "DAT_08001f38": "FLAG_1",
                "0x100": "CONTROL_FLAG",
                "0x10200": "FLAG_2",
                "0x10400": "FLAG_3",
                "0x10800": "FLAG_4"
            },
            "code": "void process_input_08001e68(uint **input)\n{\n  uint *input_ptr = *input;\n  uint flags = input_ptr[5];\n  uint control = input_ptr[1];\n  \n  if (((flags & DAT_08001f38) != 0) && ((control & CONTROL_FLAG) != 0)) {\n    input[0x10] = (uint *)((uint)input[0x10] | 1);\n    input_ptr[5] = 0xfffffeff;\n  }\n  if (((flags & FLAG_2) != 0) && ((control & CONTROL_FLAG) != 0)) {\n    input[0x10] = (uint *)((uint)input[0x10] | 2);\n    (*input)[5] = 0xfffffdff;\n  }\n  if (((flags & FLAG_3) != 0) && ((control & CONTROL_FLAG) != 0)) {\n    char c = *(char *)((int)input + 0x3d);\n    if (((*(char *)((int)input + 0x3e) == ' ') && (*(short *)((int)input + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (input[0xc] == (uint *)0x21)))))) {\n      process_input_08001e68_08001684(input);\n    }\n    else {\n      input[0x10] = (uint *)((uint)input[0x10] | 4);\n      if (*(char *)((int)input + 0x3e) == '\\x10') {\n        **input = **input | 0x200;\n      }\n      (*input)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags & FLAG_4) != 0) && ((control & CONTROL_FLAG) != 0)) {\n    input[0x10] = (uint *)((uint)input[0x10] | 8);\n    (*input)[5] = 0xfffff7ff;\n  }\n  if (input[0x10] != (uint *)0x0) {\n    process_input_08001e68_08001ab0(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "current_buffer",
                "current_state": "current_state",
                "current_data": "current_data"
            },
            "code": "uint32_t process_data_080019a0(uint32_t **data)\n{\n  uint32_t *current_data = *data;\n  uint16_t current_state = (uint16_t)current_data[10];\n\n  if (current_state == 4) {\n    current_data[1] &= 0xfffffbff;\n    uint8_t *current_buffer = (uint8_t *)current_data[9];\n    current_data[9] = (uint32_t *)(current_buffer + 1);\n    current_buffer[0] = (uint8_t)current_data[4];\n    current_data[10] -= 1;\n  }\n  else if (current_state == 3) {\n    current_data[1] &= 0xfffffbff;\n    **data &= 0xfffffbff;\n    uint8_t *current_buffer = (uint8_t *)current_data[9];\n    current_data[9] = (uint32_t *)(current_buffer + 1);\n    current_buffer[0] = (uint8_t)current_data[4];\n    current_data[10] -= 1;\n  }\n  else if (current_state == 2) {\n    if ((current_data[11] - 1U) < 2) {\n      **data &= 0xfffffbff;\n      **data |= 0x100;\n    }\n    else {\n      **data |= 0x200;\n    }\n    uint8_t *current_buffer = (uint8_t *)current_data[9];\n    current_data[9] = (uint32_t *)(current_buffer + 1);\n    current_buffer[0] = (uint8_t)current_data[4];\n    current_data[10] -= 1;\n    current_buffer = (uint8_t *)current_data[9];\n    current_data[9] = (uint32_t *)(current_buffer + 1);\n    current_buffer[0] = (uint8_t)current_data[4];\n    current_data[10] -= 1;\n    current_data[1] &= 0xfffffcff;\n    *(uint8_t *)((int)current_data + 0x3d) = 0x20;\n    current_data[12] = (uint32_t *)0x0;\n    if (*(uint8_t *)((int)current_data + 0x3e) == '@') {\n      *(uint8_t *)((int)current_data + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(uint8_t *)((int)current_data + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    uint8_t *current_buffer = (uint8_t *)current_data[9];\n    current_data[9] = (uint32_t *)(current_buffer + 1);\n    current_buffer[0] = (uint8_t)current_data[4];\n    current_data[10] -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_parameter_function_if_index_less_than_10_08003f24",
                "uVar1": "parameter_index",
                "PTR_DAT_08003f40": "PARAMETER_FUNCTION_PTR_START",
                "PTR_DAT_08003f44": "PARAMETER_VALUE_START"
            },
            "code": "void execute_parameter_function_if_index_less_than_10_08003f24(void)\n{\n  uint parameter_index = find_parameter_index();\n  if (parameter_index < 10) {\n    void (*parameter_function)(int) = *(void (**)(int))(PTR_DAT_08003f40 + parameter_index * 4);\n    int parameter_value = *(int*)(PTR_DAT_08003f44 + parameter_index * 4);\n    parameter_function(parameter_value);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_parameter_function_if_index_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_data_if_param2_is_0xFFFF_080046b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_if_param2_is_0xFFFF_080046b4(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    undefined *data_ptr = PTR_DAT_08004754;\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xFFFF) {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xC) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3C] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5C) = 0;\n        data_ptr[0x64] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8C] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xA0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xAC) = 0;\n        data_ptr[0xB4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xC0) = 0;\n        data_ptr[0xC8] = 0x28;\n        *(undefined4 *)(data_ptr + 0xD4) = 0;\n        data_ptr[0xDC] = 0x28;\n        *(undefined4 *)(data_ptr + 0xE8) = 0;\n        data_ptr[0xF0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xFC) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[0x12C] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        calculate_result_and_swap_params_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data_ptr, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_param2_is_0xFFFF_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "add_to_buffer_0800160e",
                "param_1": "buffer_ptr",
                "cVar1": "current_char",
                "puVar2": "buffer",
                "DAT_0800160c": "do_nothing",
                "PTR_080482e0": "undefined4_ptr",
                "PTR_080482e4": "uint_ptr",
                "PTR_080482e8": "undefined_ptr"
            },
            "code": "int add_to_buffer_0800160e(int *buffer_ptr)\n{\n    char current_char = *(char *)((int)buffer_ptr + 0x3d);\n    int buffer_size = *(short *)((int)buffer_ptr + 0x2a);\n    if (buffer_size != 0)\n    {\n        undefined *buffer = (undefined *)buffer_ptr[9];\n        buffer_ptr[9] = (int)(buffer + 1);\n        *buffer = (char)*(undefined4 *)(*buffer_ptr + 0x10);\n        *(short *)((int)buffer_ptr + 0x2a) = buffer_size - 1;\n        if ((*(short *)((int)buffer_ptr + 0x2a) == 0) && (current_char == '*'))\n        {\n            *(uint *)(*buffer_ptr + 4) = *(uint *)(*buffer_ptr + 4) & 0xfffffbff;\n            buffer_ptr[0xc] = 0x22;\n            *(undefined *)((int)buffer_ptr + 0x3d) = 0x28;\n            DAT_0800160c_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "add_to_buffer_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_data_08000e18",
                "PTR_DAT_08000e28": "data_ptr",
                "PTR_DAT_08000e2c": "byte_ptr"
            },
            "code": "void update_data_08000e18(void)\n{\n  uint8_t* PTR_DAT_08000e2c = (uint8_t*)PTR_DAT_08000e2c;\n  uint32_t* int_ptr = (uint32_t*)PTR_DAT_08000e28;\n  uint32_t int_val = *int_ptr;\n  uint8_t byte_val = *PTR_DAT_08000e2c;\n  uint32_t result = int_val + byte_val;\n  *int_ptr = result;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "update_data_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "set_bit_and_update_data_08003486",
                "param_1": "bit_position",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "bit_value",
                "local_24": "bit_mask",
                "local_20": "data_value1",
                "local_1c": "data_value2",
                "local_18": "constant_value",
                "update_data_08000fb4": "update_data_08000fb4"
            },
            "code": "void set_bit_and_update_data_08003486(uint bit_position, undefined4 data1, undefined4 data2) {\n  undefined4 bit_value = set_bit_080031fc((bit_position << 0x18) >> 0x1c);\n  uint bit_mask = 1 << (bit_position & 0xf) & 0xffff;\n  undefined4 constant_value = 2;\n  undefined4 data_value1 = data1;\n  undefined4 data_value2 = data2;\n  update_data_08000fb4(bit_value, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_data_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "initialize_data_08005662",
                "param_1": "data",
                "param_2": "param",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "is_error",
                "initialize_08005718": "initialize_function"
            },
            "code": "void initialize_data_08005662(int data, int param)\n{\n  int result;\n  ushort flags;\n  bool is_error;\n  result = initialize_function(data, (int)*(short *)(param + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    flags = *(ushort *)(param + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param + 0x54) = result;\n    flags = *(ushort *)(param + 0xc) | 0x1000;\n  }\n  *(ushort *)(param + 0xc) = flags;\n}\n",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "validate_and_update_combination_080042ac",
                "param_1": "combination",
                "iVar1": "is_valid",
                "uVar2": "incremented_index",
                "local_9": "local_character"
            },
            "code": "void validate_and_update_combination_080042ac(int combination)\n{\n  int is_valid;\n  ushort incremented_index;\n  undefined local_character;\n  is_valid = validate_combination(combination, &local_character);\n  if ((is_valid == 0) && (incremented_index = *(short *)(combination + 100) + 1U & 0x3f, incremented_index != *(ushort *)(combination + 0x66))) {\n    *(undefined *)(*(int *)(combination + 0x60) + (uint)*(ushort *)(combination + 100)) = local_character;\n    *(ushort *)(combination + 100) = incremented_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_update_combination_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input_array",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input_array)\n{\n  uint32_t *ptr1;\n  ptr1 = input_array[11];\n  if (*(char *)((int)input_array + 0x3d) == '!') {\n    if (*(uint16_t *)((int)input_array + 0x2a) == 0) {\n      if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        **input_array = **input_array | 0x200;\n        input_array[12] = (uint32_t *)0x0;\n        *(char *)((int)input_array + 0x3d) = ' ';\n        if (*(char *)((int)input_array + 0x3e) == '@') {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        input_array[12] = (uint32_t *)0x11;\n        *(char *)((int)input_array + 0x3e) = 0;\n        *(char *)((int)input_array + 0x3d) = ' ';\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      ptr1 = input_array[9];\n      input_array[9] = (uint32_t *)((int)ptr1 + 1);\n      (*input_array)[4] = (uint32_t)*(char *)ptr1;\n      *(uint16_t *)((int)input_array + 0x2a) = *(uint16_t *)((int)input_array + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "check_param_08000f2c",
                "param_1": "param",
                "*DAT_08000f48": "*data_flag"
            },
            "code": "void check_param_08000f2c(int param){\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_param_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "FUNC_08000ec4"
            },
            "code": "\nvoid FUNC_08000ec4(uint param_1)\n\n{\n  if (-1 < (int)param_1) {\n    *(int *)(DAT_08000edc + (param_1 >> 5) * 4) = 1 << (param_1 & 0x1f);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "FUNC_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "check_and_calculate_shift_amount_08004338",
                "DAT_0800435c": "is_shift_amount_calculated",
                "PTR_DAT_08004360": "PTR_SHIFT_AMOUNT",
                "calculate_shift_amount_08004240": "calculate_shift_amount"
            },
            "code": "void check_and_calculate_shift_amount_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    calculate_shift_amount(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "check_and_calculate_shift_amount_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_software_interrupt_080005e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "software_interrupt": "software_interrupt",
                "0x3f": "SYSTEM_CALL_NUMBER"
            },
            "code": "void trigger_software_interrupt_080005e0(void)\n{\n  software_interrupt(SYSTEM_CALL_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "call_interrupt_if_not_triggered_080005e4",
                "param_1": "arg1",
                "param_4": "arg4",
                "uVar1": "interrupt_result"
            },
            "code": "int call_interrupt_if_not_triggered_080005e4(int arg1, int arg4){\n  int is_triggered = *(int *)PTR_DAT_080005fc;\n  if (is_triggered != 0) {\n    return 0;\n  }\n  int interrupt_result = trigger_software_interrupt_080005e0(1, arg1, 0, 0, arg4);\n  return interrupt_result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "call_interrupt_if_not_triggered_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "calculate_crc_and_set_flag_0800076c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "flag",
                "param_4": "crc_seed",
                "uVar1": "crc",
                "iVar2": "result",
                "uVar3": "data_byte",
                "calculate_crc16_ccitt_08000728": "calculate_crc16_ccitt",
                "decode_and_set_flag_080041bc": "decode_and_set_flag",
                "**(code **)(**param_1 + 4)": "*(code **)(*data)[4]",
                "**(code **)(**param_1 + 0xc)": "*(code **)(*data)[0xc]",
                "get_value_and_return_08004204": "get_value_and_return"
            },
            "code": "void calculate_crc_and_set_flag_0800076c(int **data, int data_length, int flag, int crc_seed) {\n    int current_index = (int)*data + 0x49;\n    uint8_t data_byte = (uint8_t)**(data + 1);\n    uint16_t crc = calculate_crc16_ccitt(data, data_byte, data_length, flag, crc_seed);\n    *(char *)(current_index + 9) = (char)(crc >> 8);\n    *(char *)(++current_index + 9) = (char)crc;\n    *(char *)(int)(*data + 0x49) = (char)(++data_byte);\n    if (data[0][5] < 4) {\n        (**(code **)(*data)[4])(*data, (int)*data + 9, *(undefined *)(current_index));\n    }\n    if (data[0][6] > 1) {\n        decode_and_set_flag_080041bc(data[0][6], 0);\n    }\n    if (data[0][5] < 4) {\n        do {\n            int result = (**(code **)(*data)[0xc])();\n        } while (result >= 0);\n    }\n    *(undefined *)(int)(*data + 0x49) = 0;\n    int value = get_value_and_return_08004204();\n    data[0x17] = (int *)(value + (uint16_t)*(short *)((int)*data + 0x56));\n    *(short *)((int)*data + 0x52) = *(short *)((int)*data + 0x52) + 1;\n}\n",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "calculate_crc_and_set_flag_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_offset_08004460",
                "param_1": "base_address",
                "param_2": "offset",
                "uVar1": "value"
            },
            "code": "void set_value_at_offset_08004460(int base_address, uint offset) {\n  undefined2 value;\n  if (offset < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_param_08001198",
                "param_1": "address",
                "param_2": "value",
                "param_3": "condition"
            },
            "code": "void set_param_08001198(int address, int value, int condition) {\n  if (condition == 0) {\n    *(int *)(address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_param_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_from_uint_at_index_08003138",
                "param_1": "num",
                "param_2": "index",
                "* (uint *)": "ptr",
                ">>": "right_shift",
                "&": "bitwise_and",
                "uint": "unsigned int",
                "PTR_": "PTR_ (no renaming)",
                "DAT_": "DAT_ (no renaming)"
            },
            "code": "uint get_bit_from_uint_at_index_08003138(uint num, int index) {\n    uint* ptr = (uint*)(index + ((num << 0x18) >> 0x1c) * 4);\n    uint masked_num = num & 0xf;\n    uint result = *ptr >> masked_num & 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_at_index_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "param_3": "new_bit_value",
                "PTR_": "",
                "DAT_": "",
                "*": ""
            },
            "code": "void update_bit_08002848(uint32_t* bit_array, uint8_t bit_position, uint8_t new_bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    *bit_array &= mask;\n    *bit_array |= new_bit_value << (bit_position & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "update_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_bytes_at_offsets_0800312c",
                "param_1": "base_address",
                "*(byte *)(param_1 + 0x3a)": "byte_at_offset_3a",
                "*(byte *)(param_1 + 0x39)": "byte_at_offset_39"
            },
            "code": "byte combine_bytes_at_offsets_0800312c(int base_address)\n{\n    byte byte_at_offset_3a = *(byte *)(base_address + 0x3a);\n    byte byte_at_offset_39 = *(byte *)(base_address + 0x39);\n    return byte_at_offset_3a | byte_at_offset_39;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": false,
            "current_name": "combine_bytes_at_offsets_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "set_and_check_bit_080028f0",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "bit_array_ptr"
            },
            "code": "int set_and_check_bit_080028f0(uint **bit_array, int bit_position)\n{\n  uint *bit_array_ptr = *bit_array;\n  set_bit(bit_array_ptr, bit_position, 0);\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    bit_array_ptr[17] &= 0xffff7fff;\n  }\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    *bit_array_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_and_check_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "value_ptr"
            },
            "code": "int get_value_from_pointer_08000e30() {\n    int *PTR_DAT_08000e38 = PTR_DAT_08000e38;\n    int value = *PTR_DAT_08000e38;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "reset_memory_location_08000f56",
                "param_1": "ptr_param",
                "*(undefined *)(param_1 + 4)": "*(unsigned char *)(ptr_param + 4)",
                "clear_bit_in_memory_location_080033c8": "clear_bit_in_memory_location",
                "*(undefined4 *)(param_1 + 0x10)": "*(int *)(ptr_param + 16)",
                "*(undefined *)(param_1 + 5)": "*(unsigned char *)(ptr_param + 5)"
            },
            "code": "int reset_memory_location_08000f56(int ptr_param) {\n  if (ptr_param != 0) {\n    *(unsigned char *)(ptr_param + 4) = 2;\n    clear_bit_in_memory_location();\n    *(int *)(ptr_param + 16) = 0;\n    *(unsigned char *)(ptr_param + 4) = 0;\n    *(unsigned char *)(ptr_param + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "reset_memory_location_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data_ptr",
                "sVar1": "data_count",
                "pbVar2": "source_ptr",
                "first_char": "first_char",
                "data_type": "data_type",
                "target_ptr": "target_ptr",
                "source_ptr": "source_ptr",
                "data_count": "data_count",
                "flag_ptr": "flag_ptr"
            },
            "code": "int process_data_0800295c(int *data_ptr) {\n    char first_char = *(char *)((int)data_ptr + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int data_type = data_ptr[2];\n    uint *target_ptr = (uint *)(*data_ptr + 4);\n    if (data_type == 0x1000) {\n        *target_ptr = *(ushort *)data_ptr[8] & 0x1ff;\n        if (data_ptr[4] == 0) {\n            data_ptr[8] = data_ptr[8] + 2;\n        }\n        else {\n            data_ptr[8] = data_ptr[8] + 1;\n        }\n    }\n    else {\n        byte *source_ptr = (byte *)data_ptr[8];\n        data_ptr[8] = (int)(source_ptr + 1);\n        *target_ptr = (uint)*source_ptr;\n    }\n    short data_count = *(short *)((int)data_ptr + 0x26) + -1;\n    *(short *)((int)data_ptr + 0x26) = data_count;\n    if (data_count == 0) {\n        uint *flag_ptr = (uint *)(*data_ptr + 0xc);\n        *flag_ptr &= 0xffffff7f;\n        *flag_ptr |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "get_array_value_08003380",
                "param_1": "index",
                "param_2": "array",
                "param_3": "size",
                "param_4": "param_4",
                "iVar1": "value",
                "PTR_DAT_08003398": "PTR_DAT_08003398",
                "DAT_08003398": "DAT_08003398"
            },
            "code": "int get_array_value_08003380(int index, int* array, int size, int param_4, int param_5) {\n    int value = array[index];\n    if ((value << 12) >> 27 != 2) {\n        return 0;\n    }\n    return 16;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "get_array_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_bit_at_index_08004110",
                "param_1": "index",
                "param_2": "bit_value",
                "param_3": "bit_mask",
                "param_4": "data_mask",
                "iVar1": "bit_index",
                "iVar3": "short_value",
                "puVar2": "short_array",
                "PTR_DAT_080041a8": "short_array",
                "PTR_DAT_080041ac": "bit_mask",
                "PTR_DAT_080041b0": "data_array",
                "PTR_DAT_080041b4": "data_mask",
                "PTR_DAT_080041b8": "data_mask"
            },
            "code": "void update_bit_at_index_08004110(uint index, uint bit_value, uint PTR_DAT_080041ac, uint* PTR_DAT_080041b0, uint* PTR_DAT_080041b4) {\n  if (index < 0x60) {\n    uint short_value = (uint)*(short*)(PTR_DAT_080041a8 + index * 2);\n    uint* PTR_DAT_080041a8 = PTR_DAT_080041b0;\n  }\n  else {\n    short_value = -1;\n    PTR_DAT_080041a8 = PTR_DAT_080041b4;\n  }\n  if (short_value != -1) {\n    uint bit_index = get_bit_index(short_value, PTR_DAT_080041ac, PTR_DAT_080041b0, PTR_DAT_080041b4);\n    if (bit_index != 0) {\n      uint value_index = find_short(short_value, PTR_DAT_080041b0);\n      if (value_index == 0) {\n        value_index = find_short(short_value, PTR_DAT_080041b4);\n        if (value_index != 0) {\n          update_bits_if_valid_value_found(short_value);\n        }\n      }\n      else {\n        clear_bit_and_reset_memory(short_value);\n      }\n      update_bit(short_value, PTR_DAT_080041ac);\n    }\n    switch (bit_value) {\n      case 0:\n        set_bit_and_update_data(short_value, 0);\n        break;\n      case 1:\n        set_bit_and_update_data(short_value, 1, 0);\n        break;\n      case 2:\n        set_bit_and_update_data(short_value, 0, 1);\n        break;\n      case 3:\n        set_bit_and_update_data(short_value, 0, 2);\n    }\n    set_bit(short_value, PTR_DAT_080041b4);\n  }\n}\n",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_input_size_08000ee0",
                "param_1": "input_size",
                "puVar1": "size_ptr",
                "DAT_08000f04": "size_ptr",
                "DAT_08000f08": "data_ptr"
            },
            "code": "int check_input_size_08000ee0(unsigned int input_size) {\n    unsigned int *DAT_08000f04 = DAT_08000f04;\n    if (input_size - 1U < 0x1000000) {\n        DAT_08000f04[1] = input_size - 1U;\n        *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n        DAT_08000f04[2] = 0;\n        *DAT_08000f04 = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_input_size_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "current_char",
                "pbVar2": "byte_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)data + 0x2a)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data + 0x3d)",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*data + 0x10)",
                "param_1[9]": "data[9]",
                "*(uint *)(*param_1 + 4)": "*(uint *)(*data + 4)",
                "param_1[0xc]": "data[0xc]",
                "do_nothing_080015ba()": "do_nothing()"
            },
            "code": "int process_data_080015bc(int *data) {\n  char current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte *byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "data_length",
                "param_4": "data_type",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_data_0800066c(int data_address, char data_value, int data_length, char data_type) {\n  *(char *)(data_address + 4) = data_value;\n  if (3 < data_length) {\n    data_length = 0;\n  }\n  *(char *)(data_address + 5) = data_length;\n  *(char *)(data_address + 6) = data_type;\n  *(short *)(data_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "validate_combination_080042e8",
                "param_1": "combination",
                "param_2": "new_value",
                "bVar1": "combination_size_byte",
                "bVar2": "combination_size_byte_masked",
                "iVar3": "combination_size",
                "PTR_LAB_0800420c_1_08004334": "PTR_LAB_0800420c_1_08004334",
                "is_combination_valid_08003df4": "is_combination_valid",
                "update_data_08003eac": "update_data"
            },
            "code": "int validate_combination_080042e8(int combination[], char new_value) {\n    combination[4] = 1;\n    int combination_size = *(unsigned short *)(combination + 320) + 1;\n    byte combination_size_byte = (byte)combination_size;\n    byte combination_size_byte_masked = combination_size_byte & 0x7f;\n    if (combination_size == 0) {\n        combination_size_byte_masked = -(-combination_size_byte & 0x7f);\n    }\n    while (*(unsigned short *)(combination + 322) == (unsigned short)combination_size_byte_masked);\n    *(char *)(*(int *)(combination + 316) + (unsigned int)*(unsigned short *)(combination + 320)) = new_value;\n    *(unsigned short *)(combination + 320) = (unsigned short)combination_size_byte_masked;\n    int is_valid = is_combination_valid(combination + 212);\n    if (is_valid == 0) {\n        update_data(combination + 212, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "validate_combination_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_flag_set_and_not_space_080038d0",
                "param_1": "char param_1",
                "iVar1": "int subtracted_value",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "*(code **)(iVar1 + 0x60)": "*(code **)(subtracted_value + 0x60)",
                "*(char *)(iVar1 + 0x5e)": "*(char *)(subtracted_value + 0x5e)",
                "*(char *)(iVar1 + 0x2c)": "*(char *)(subtracted_value + 0x2c)",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void execute_function_if_flag_set_and_not_space_080038d0(char param_1)\n{\n  int subtracted_value = subtract_four_from_input();\n  if (((*(code **)(subtracted_value + 0x60) != (code *)0x0) && (*(char *)(subtracted_value + 0x5e) == '\\x01')) && (*(char *)(subtracted_value + 0x2c) != ' '))\n  {\n    (**(code **)(subtracted_value + 0x60))(subtracted_value + 0x68);\n  }\n  set_bit_and_flags(param_1);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_flag_set_and_not_space_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_0800410c() {\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_shifted_value_from_pointer_0800260c",
                "uVar1": "value",
                "PTR_DAT_08002628": "shift_data",
                "DAT_08002624": "pointer_data"
            },
            "code": "unsigned int get_shifted_value_from_pointer_0800260c() {\n  unsigned int value = get_value_from_pointer();\n  unsigned int shift_index = (*(int *)(DAT_08002624 + 8) << 16) >> 29;\n  unsigned int shift_amount = PTR_DAT_08002628[shift_index];\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_shift_amount_08004240",
                "param_1": "memory_address",
                "*(short *)(param_1 + 0x138)": "first_value",
                "*(short *)(param_1 + 0x13a)": "second_value",
                "sum": "sum",
                "(ushort)(sum - *second_value) & 0x3f": "result"
            },
            "code": "ushort calculate_shift_amount_08004240(int memory_address) {\n    short* first_value = (short*)(memory_address + 0x138);\n    short* second_value = (short*)(memory_address + 0x13a);\n    short sum = *first_value + 0x40;\n    ushort result = (ushort)(sum - *second_value) & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "decode_and_set_flag_080041bc",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "data_ptr",
                "iVar1": "bit_set",
                "uVar2": "bit_mask",
                "puVar3": "data_array_ptr",
                "uVar4": "decoded_data",
                "PTR_DAT_080041fc": "DATA_ARRAY_PTR",
                "PTR_DAT_08004200": "BIT_ARRAY_PTR",
                "get_bit_from_uint_at_index_08003138": "get_bit_from_uint_at_index",
                "get_data_at_index_0800318c": "get_data_at_index",
                "set_param_flag_if_not_zero_080034b6": "set_param_flag_if_not_zero"
            },
            "code": "void decode_and_set_flag_080041bc(uint8_t index, uint32_t flag, uint32_t data, uint8_t* data_ptr) {\n  uint32_t bit_mask;\n  uint32_t decoded_data;\n  uint8_t* data_array_ptr;\n  if (index < 0x60) {\n    data_array_ptr = (uint8_t*) PTR_DAT_080041fc;\n    decoded_data = (uint32_t)*(uint16_t*)(data_array_ptr + index * 2);\n  }\n  else {\n    decoded_data = 0xffffffff;\n    data_array_ptr = data_ptr;\n  }\n  if ((decoded_data != 0xffffffff) && get_bit_from_uint_at_index(decoded_data, PTR_DAT_08004200, data, data_array_ptr, data_ptr)) {\n    bit_mask = get_data_at_index((decoded_data << 0x18) >> 0x1c);\n    set_param_flag_if_not_zero(bit_mask, 1 << (decoded_data & 0xf) & 0xffff, flag);\n  }\n  return;\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_address",
                "PTR_": "pointer_to_",
                "DAT_": "data_at_",
                "*": "value_at_"
            },
            "code": "void initialize_struct_08004364(int struct_address)\n{\n  int* PTR_offset_0x134 = (int*)(struct_address + 0x134);\n  *PTR_offset_0x134 = struct_address + 0x11;\n\n  short* PTR_offset_0x138 = (short*)(struct_address + 0x138);\n  *PTR_offset_0x138 = 0;\n\n  short* PTR_offset_0x13a = (short*)(struct_address + 0x13a);\n  *PTR_offset_0x13a = 0;\n\n  int* PTR_offset_0x13c = (int*)(struct_address + 0x13c);\n  *PTR_offset_0x13c = struct_address + 0x51;\n\n  short* PTR_offset_0x140 = (short*)(struct_address + 0x140);\n  *PTR_offset_0x140 = 0;\n\n  short* PTR_offset_0x142 = (short*)(struct_address + 0x142);\n  *PTR_offset_0x142 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "initialize_data_08000682",
                "param_1": "data",
                "set_data_0800066c": "set_data"
            },
            "code": "void initialize_data_08000682() {\n  set_data();\n}\n",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "initialize_data_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_bit_in_register_08000e3c",
                "param_1": "input_value",
                "*(uint *)(DAT_08000e5c + 0xc)": "register_value",
                "uint": "unsigned int",
                "bit_mask": "0xf8ff",
                "new_value": "new_register_value",
                "register_ptr": "register_pointer"
            },
            "code": "void set_bit_in_register_08000e3c(uint input_value){\n    uint* register_ptr = (uint*)(DAT_08000e5c + 0xc);\n    uint *(uint *)(DAT_08000e5c + 0xc) = *register_ptr;\n    uint bit_mask = 0xf8ff;\n    uint new_value = (input_value & 7) << 8 | (*(uint *)(DAT_08000e5c + 0xc) & bit_mask) | 0x5fa0000;\n    *register_ptr = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "update_bit_and_check_if_full_08002864",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar2": "array_ptr",
                "bVar1": "is_full"
            },
            "code": "uint32_t update_bit_and_check_if_full_08002864(uint32_t** bit_array, uint32_t bit_index)\n{\n  bool is_full = false;\n  uint32_t* array_ptr = *bit_array;\n  update_bit(array_ptr, bit_index, 0);\n  if ((array_ptr == PTR_DAT_080028d0) || (array_ptr == (PTR_DAT_080028d0 + 0x100))) {\n    is_full = true;\n  }\n  if (((is_full) && ((array_ptr[8] & 0x1111) == 0)) && ((array_ptr[8] & 0x444) == 0)) {\n    array_ptr[0x11] = array_ptr[0x11] & 0xffff7fff;\n  }\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    *array_ptr = *array_ptr & 0xfffffffe;\n  }\n  *(uint8_t*)((int)bit_array + 0x39) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_bit_and_check_if_full_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "pointer1"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 value1, undefined2 value2) {\n    undefined *pointer1;\n    *data = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[25] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    fill_with_value_080048cc(data + 23, 0, 8);\n    data[9] = DAT_08005364;\n    data[10] = PTR_initialize_parameters_0800562a_1_08005368;\n    data[11] = PTR_initialize_data_08005662_1_0800536c;\n    pointer1 = PTR_LAB_08005686_1_08005370;\n    data[8] = data;\n    data[12] = pointer1;\n    return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_0800314e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "array",
                "DAT_": "constant"
            },
            "code": "void set_bit_0800314e(uint bit_position, int* PTR_){\n    uint PTR__index = (bit_position << 0x18) >> 0x1c;\n    uint* target_element = PTR_ + PTR__index;\n    uint bit_offset = bit_position & 0xf;\n    *target_element = *target_element | 1 << bit_offset;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_struct_0800447c",
                "param_1": "struct_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value1",
                "PTR_PTR_FUN_080042e8_1_080044c8": "PTR_PTR_INITIALIZE_FUN",
                "PTR_DAT_080044cc": "PTR_DAT_080044cc",
                "set_value_08004444": "set_value",
                "set_value_at_offset_08004460": "set_value_at_offset",
                "get_value_0800351e": "get_value",
                "initialize_struct_08004364": "initialize"
            },
            "code": "undefined4* initialize_struct_0800447c(undefined4* struct_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    // Set initial values\n    struct_ptr[1] = 0;\n    struct_ptr[2] = 1000;\n    *struct_ptr = PTR_PTR_FUN_080042e8_1_080044c8;\n\n    // If struct_ptr is PTR_DAT_080044cc, set value and offset\n    if (struct_ptr == (undefined4*)PTR_DAT_080044cc)\n    {\n        set_value(struct_ptr, 0x4c, param_3, PTR_DAT_080044cc, param_4);\n        set_value_at_offset(struct_ptr, 0x4d);\n    }\n    // Else, set values\n    else\n    {\n        undefined2 value1 = get_value(param_2, PTR_DAT_080044d0);\n        *(undefined2*)((int)struct_ptr + 0x12e) = value1;\n        undefined2 value2 = get_value(param_2, PTR_DAT_080044d4);\n        *(undefined2*)(struct_ptr + 0x4b) = value2;\n    }\n\n    // Initialize struct\n    initialize(struct_ptr);\n\n    return struct_ptr;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_struct_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "process_and_execute_function_08004808",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar1": "var1",
                "puVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4"
            },
            "code": "void process_and_execute_function_08004808(undefined4 arg1, undefined4 arg2, undefined* data, undefined4 arg4) {\n  undefined4 var1 = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  undefined *var2 = PTR_s___function__08004838;\n  undefined4 var4 = arg4;\n  if (data != (undefined *)0x0) {\n    do {\n      process_data_08004860(var1, PTR_s_assertion___s__failed__file___s__0800483c, arg4, arg1, arg2, var2, data, var4);\n      undefined8 var3 = execute_function_080051ac();\n      arg2 = (undefined4)((ulonglong)var3 >> 0x20);\n      var1 = (undefined4)var3;\n    } while(true);\n  }\n}\n\n",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_and_execute_function_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "data",
                "param_2": "bit_position",
                "**param_1": "*data",
                "*(undefined *)(param_1 + 1)": "*(char *)(data + 1)"
            },
            "code": "int clear_bit_08000f72(uint **data, uint bit_position) {\n    **data &= ~(1u << (bit_position & 0xff));\n    *(char *)(data + 1) = 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input",
                "iVar1": "input_ptr",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "DAT_08001e60": "DATA1",
                "DAT_08001e4c": "DATA2",
                "DAT_08001e54": "DATA3",
                "DAT_08001e64": "DATA4",
                "DAT_08001e5c": "DATA5",
                "DAT_08001e58": "DATA6",
                "DAT_08001e50": "DATA7",
                "process_data_08001256": "process_data",
                "set_param_value_0800124a": "set_param_value",
                "get_status_080011c0": "get_status",
                "process_string_08001904": "process_string",
                "process_data_080019a0": "process_data",
                "process_input_0800171a": "process_input",
                "process_input_08001864": "process_input",
                "validate_user_input_0800165a": "validate_user_input",
                "process_input_08001bfc": "process_input",
                "add_to_buffer_0800160e": "add_to_buffer",
                "increment_and_copy_08001440": "increment_and_copy",
                "process_data_080015bc": "process_data",
                "increment_byte_in_array_08001420": "increment_byte_in_array"
            },
            "code": "void process_input_08001d00(int *input)\n{\n  int input_ptr = *input;\n  uint value1 = *(uint *)(input_ptr + 0x18);\n  uint value2 = *(uint *)(input_ptr + 0x14);\n  uint value3 = *(uint *)(input_ptr + 4);\n  \n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((value2 & 0x10001) == 0) || ((value3 & 0x200) == 0)) {\n      if (((DAT_08001e60 & value2) == 0) || ((value3 & 0x200) == 0)) {\n        if (((DAT_08001e4c & value2) != 0) && ((value3 & 0x200) != 0)) {\n          process_data(input);\n        }\n      }\n      else {\n        set_param_value(input);\n      }\n    }\n    else {\n      get_status(input);\n    }\n    if ((DAT_08001e54 & value1) == 0) {\n      if ((((DAT_08001e64 & value2) != 0) && ((value3 & 0x400) != 0)) && ((DAT_08001e5c & value2) == 0)) {\n        process_string(input);\n        return;\n      }\n      if (((DAT_08001e5c & value2) != 0) && ((value3 & 0x200) != 0)) {\n        process_data(input);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & value2) != 0) && ((value3 & 0x400) != 0)) && ((DAT_08001e5c & value2) == 0)) {\n        process_input_08001d00(input);\n        return;\n      }\n      if (((DAT_08001e5c & value2) != 0) && ((value3 & 0x200) != 0)) {\n        process_input_08001d00(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & value2) != 0) && ((value3 & 0x200) != 0)) {\n      validate_user_input();\n      return;\n    }\n    if (((DAT_08001e50 & value2) != 0) && ((value3 & 0x200) != 0)) {\n      process_input_08001d00(input);\n      return;\n    }\n    if ((DAT_08001e54 & value1) == 0) {\n      if ((((DAT_08001e64 & value2) != 0) && ((value3 & 0x400) != 0)) && ((DAT_08001e5c & value2) == 0)) {\n        add_to_buffer(input);\n        return;\n      }\n      if (((DAT_08001e5c & value2) != 0) && ((value3 & 0x200) != 0)) {\n        increment_and_copy(input);\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & value2) != 0) && ((value3 & 0x400) != 0)) && ((DAT_08001e5c & value2) == 0)) {\n        process_data(input);\n        return;\n      }\n      if (((DAT_08001e5c & value2) != 0) && ((value3 & 0x200) != 0)) {\n        increment_byte_in_array(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001d00"
        }
    },
    "used_tokens": 175581,
    "layers": [
        [
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_0800355e",
            "thunk_FUN_0800410c",
            "FUN_08004544",
            "FUN_08000fb4",
            "FUN_08002d72",
            "FUN_08003582",
            "FUN_08004678",
            "FUN_08000f0c",
            "FUN_0800171a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004444",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_080035bc",
            "FUN_08001904",
            "FUN_0800387c",
            "FUN_080040fc",
            "FUN_08004860",
            "FUN_080011c0",
            "FUN_0800352e",
            "FUN_080008cc",
            "FUN_08002efa",
            "FUN_08004640",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08001420",
            "FUN_08000218",
            "FUN_08000e60",
            "FUN_08002eb2",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080040f8",
            "FUN_080019a0",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_080005e0",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_08000e30",
            "FUN_0800295c",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08000e3c",
            "FUN_0800314e",
            "FUN_08000f72"
        ],
        [
            "FUN_08003dd0",
            "FUN_080034f4",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08004560",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08005718",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_080047fe",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003754",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08003f24",
            "FUN_08003486",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08002f4c",
            "FUN_08004978",
            "FUN_08002f66",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002ffc",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ]
    ],
    "locked_functions": []
}