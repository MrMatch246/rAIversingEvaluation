{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "readSerialData_080006b4",
                "this": "modbusInstance",
                "bVar1": "bufferOverflow",
                "iVar2": "currentByte",
                "bVar3": "bufferIndex",
                "u8txenpin": "transmitEnablePin",
                "digitalWrite": "digitalWrite",
                "u8BufferSize": "bufferSize",
                "u8serno": "serialNumber",
                "port": "serialPort",
                "au8Buffer": "buffer",
                "u16InCnt": "inputCount",
                "u16errCnt": "errorCount"
            },
            "code": "int8_t __thiscall Modbus::readSerialData_080006b4(Modbus *modbusInstance) {\n  bool bufferOverflow = false;\n  int currentByte;\n  byte bufferIndex;\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, LOW);\n  }\n  modbusInstance->bufferSize = 0;\n  if (modbusInstance->serialNumber < 4) {\n    while (currentByte = (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[2])(), currentByte != 0) {\n      bufferIndex = modbusInstance->bufferSize;\n      currentByte = (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[3])();\n      modbusInstance->buffer[bufferIndex] = (uint8_t)currentByte;\n      bufferIndex = modbusInstance->bufferSize + 1;\n      modbusInstance->bufferSize = bufferIndex;\n      if (bufferIndex > 63) {\n        bufferOverflow = true;\n      }\n    }\n  }\n  modbusInstance->inputCount++;\n  if (bufferOverflow) {\n    modbusInstance->errorCount++;\n    return -3;\n  }\n  return modbusInstance->bufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readSerialData_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_peripheral_from_pin_080034da",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "void* find_peripheral_from_pin_080034da(PinName_conflict pin, PinMap_conflict* pin_map) {\n    while (true) {\n        if (pin_map->pin == NC) {\n            return (void*)0x0;\n        }\n        if (pin_map->pin == pin) {\n            break;\n        }\n        pin_map++;\n    }\n    return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_from_pin_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "update_TIM_instance_status_080035fc",
                "htim": "timer",
                "uint": "uint32_t",
                "DAT_08003718": "TIMER_1",
                "DAT_0800371c": "TIMER_2",
                "DAT_08003720": "TIMER_3",
                "DAT_08003724": "TIMER_4",
                "DAT_08003728": "TIMER_5",
                "DAT_0800372c": "TIMER_6",
                "DAT_08003730": "TIMER_7",
                "DAT_08003734": "TIMER_8",
                "DAT_08003738": "TIMER_9",
                "DAT_0800373c": "TIMER_10",
                "DAT_08003740": "TIMER_11",
                "DAT_08003744": "TIMER_12",
                "DAT_08003748": "TIMER_13",
                "DAT_0800374c": "TIMER_BASE_ADDRESS",
                "Instance": "timer_instance",
                "*timer_reg": "timer_register",
                "*interrupt_reg": "interrupt_register"
            },
            "code": "void update_TIM_instance_status_080035fc(TIM_HandleTypeDef *timer)\n{\n    uint32_t *timer_reg = (uint32_t *)(DAT_0800374c + 0x40);\n    uint32_t *interrupt_reg = (uint32_t *)(DAT_0800374c + 0x44);\n\n    if (timer->Instance == DAT_08003718) {\n        *interrupt_reg &= 0xfffffffe;\n    }\n    if (timer->Instance == (TIM_TypeDef *)0x40000000) {\n        *timer_reg &= 0xfffffffe;\n    }\n    if (timer->Instance == DAT_0800371c) {\n        *timer_reg &= 0xfffffffd;\n    }\n    if (timer->Instance == DAT_08003720) {\n        *timer_reg &= 0xfffffffb;\n    }\n    if (timer->Instance == DAT_08003724) {\n        *timer_reg &= 0xfffffff7;\n    }\n    if (timer->Instance == DAT_08003728) {\n        *timer_reg &= 0xffffffef;\n    }\n    if (timer->Instance == DAT_0800372c) {\n        *timer_reg &= 0xffffffdf;\n    }\n    if (timer->Instance == DAT_08003730) {\n        *interrupt_reg &= 0xfffffffd;\n    }\n    if (timer->Instance == DAT_08003734) {\n        *interrupt_reg &= 0xfffeffff;\n    }\n    if (timer->Instance == DAT_08003738) {\n        *interrupt_reg &= 0xfffdffff;\n    }\n    if (timer->Instance == DAT_0800373c) {\n        *interrupt_reg &= 0xfffbffff;\n    }\n    if (timer->Instance == DAT_08003740) {\n        *timer_reg &= 0xffffffbf;\n    }\n    if (timer->Instance == DAT_08003744) {\n        *timer_reg &= 0xffffff7f;\n    }\n    if (timer->Instance == DAT_08003748) {\n        *timer_reg &= 0xfffffeff;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "update_TIM_instance_status_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_uart_transmit_complete_08003dd0",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003df0": "uart_handlers"
            },
            "code": "bool is_uart_transmit_complete_08003dd0(serial_t *serial) {\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003df0 + (uint)serial->index * 4);\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n  return (uart_state & 0x22U) == 0x22;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_clocks_08000c8c",
                "RCC_OscInitStruct": "osc_init",
                "RCC_ClkInitStruct": "clk_init",
                "uVar1": "hclk_freq",
                "tmpreg": "ahbclk_divider",
                "tmpreg_1": "apb1clk_divider",
                "DAT_08000d30": "RCC_BASE",
                "DAT_08000d34": "FLASH_BASE",
                "RCC_OscInitStruct.OscillatorType": "osc_init.OscillatorType",
                "RCC_OscInitStruct.HSEState": "osc_init.HSEState",
                "RCC_OscInitStruct.PLL.PLLState": "osc_init.PLL.PLLState",
                "RCC_OscInitStruct.PLL.PLLSource": "osc_init.PLL.PLLSource",
                "RCC_OscInitStruct.PLL.PLLM": "osc_init.PLL.PLLM",
                "RCC_OscInitStruct.PLL.PLLN": "osc_init.PLL.PLLN",
                "RCC_OscInitStruct.PLL.PLLP": "osc_init.PLL.PLLP",
                "RCC_OscInitStruct.PLL.PLLQ": "osc_init.PLL.PLLQ",
                "RCC_ClkInitStruct.ClockType": "clk_init.ClockType",
                "RCC_ClkInitStruct.SYSCLKSource": "clk_init.SYSCLKSource",
                "RCC_ClkInitStruct.AHBCLKDivider": "clk_init.AHBCLKDivider",
                "RCC_ClkInitStruct.APB1CLKDivider": "clk_init.APB1CLKDivider",
                "RCC_ClkInitStruct.APB2CLKDivider": "clk_init.APB2CLKDivider",
                "HAL_RCC_OscConfig": "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive": "HAL_PWREx_EnableOverDrive",
                "HAL_RCC_ClockConfig": "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig": "HAL_SYSTICK_CLKSourceConfig",
                "SysTick_IRQn": "SysTick_IRQn"
            },
            "code": "void initialize_clocks_08000c8c(void)\n{\n  uint32_t hclk_freq, systick_freq;\n  uint32_t ahbclk_divider = 0;\n  uint32_t apb1clk_divider = RCC_HCLK_DIV16;\n  uint32_t apb2clk_divider = RCC_HCLK_DIV8;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  // Enable HSE and PLL\n  SET_BIT(RCC->CR, RCC_CR_HSEON);\n  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET);\n  SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC_HSE);\n  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLM, RCC_PLLM_DIV8);\n  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLN, RCC_PLLN_MUL336);\n  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLP, RCC_PLLP_DIV2);\n  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLQ, RCC_PLLQ_DIV7);\n  SET_BIT(RCC->CR, RCC_CR_PLLON);\n  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET);\n  // Configure system clocks\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  osc_init.HSEState = RCC_HSE_ON;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  osc_init.PLL.PLLM = RCC_PLLM_DIV8;\n  osc_init.PLL.PLLN = RCC_PLLN_MUL336;\n  osc_init.PLL.PLLP = RCC_PLLP_DIV2;\n  osc_init.PLL.PLLQ = RCC_PLLQ_DIV7;\n  HAL_RCC_OscConfig(&osc_init);\n  HAL_PWREx_EnableOverDrive();\n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = ahbclk_divider;\n  clk_init.APB1CLKDivider = apb1clk_divider;\n  clk_init.APB2CLKDivider = apb2clk_divider;\n  HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_5);\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  systick_freq = hclk_freq / SYSTICK_CLOCK_DIVIDER;\n  HAL_SYSTICK_Config(systick_freq);\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive",
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "set_register_values_08000a4e",
                "this": "modbus_instance",
                "regs": "register_values",
                "u8size": "register_count",
                "uVar1": "register_address",
                "uVar2": "register_value"
            },
            "code": "int8_t __thiscall Modbus::set_register_values_08000a4e(Modbus *modbus_instance,uint16_t *register_values,uint8_t register_count)\n{\n  uint16_t register_address;\n  uint16_t register_value;\n  register_address = makeWord(modbus_instance->au8Buffer[2],modbus_instance->au8Buffer[3]);\n  register_value = makeWord(modbus_instance->au8Buffer[4],modbus_instance->au8Buffer[5]);\n  register_values[(byte)register_address] = register_value;\n  modbus_instance->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus_instance);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_register_values_08000a4e"
        },
        "FUN_08004774": {
            "renaming": {
                "FUN_08004774": "handle_GPIO_interrupt_08004774",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void handle_GPIO_interrupt_08004774(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004774",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08004774"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "main_loop_08004658",
                "loop": "process_loop",
                "DAT_08004674": "data"
            },
            "code": "int main_loop_08004658(void)\n{\n  initVariant();\n  setup();\n  while(1) {\n    while (DAT_08004674 == 0) {\n      process_loop();\n    }\n    serialEventRun();\n  }\n}",
            "called": [
                "loop",
                "initVariant",
                "setup",
                "serialEventRun"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_peripheral_080034f4",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral"
            },
            "code": "void * find_peripheral_080034f4(PinName_conflict pin, PinMap_conflict *pin_map) {\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_080034f4(pin, pin_map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "uart_debug_init",
                "uart_init",
                "dac_stop",
                "uart_debug_write",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_peripheral_080034f4"
        },
        "FUN_0800476a": {
            "renaming": {
                "FUN_0800476a": "handle_GPIO_EXTI_IRQ_0800476a",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void handle_GPIO_EXTI_IRQ_0800476a(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800476a",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_IRQ_0800476a"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "is_valid_pin_0800355e",
                "pin": "pin",
                "map": "pin_map",
                "PinName_conflict": "PinName_conflict",
                "PinMap_conflict": "PinMap_conflict",
                "NC": "NC",
                "false": "false",
                "true": "true"
            },
            "code": "_Bool is_valid_pin_0800355e(PinName_conflict pin, PinMap_conflict *pin_map) {\\n\"\n                      \"    if (pin == NC) {\\n\"\n                      \"        return false;\\n\"\n                      \"    }\\n\"\n                      \"    while (true) {\\n\"\n                      \"        if (pin_map->pin == NC) {\\n\"\n                      \"            return false;\\n\"\n                      \"        }\\n\"\n                      \"        if (pin == pin_map->pin) {\\n\"\n                      \"            break;\\n\"\n                      \"        }\\n\"\n                      \"        pin_map++;\\n\"\n                      \"    }\\n\"\n                      \"    return true;\\n\"\n                      \"}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_valid_pin_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "read_file_0800573c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800573c(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int read_result;\n  int *errno_ptr = PTR_errno_0800575c;\n  *errno_ptr = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*errno_ptr != 0)) {\n    *error_code = *errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "register_serial_rx_callback_08003e54",
                "obj": "serial",
                "callback": "rx_callback_func",
                "bVar1": "index",
                "uVar2": "rx_active",
                "PTR_rx_callback_08003ea0": "callback_functions",
                "PTR_rx_callback_obj_08003ea4": "serial_objects",
                "PTR_uart_handlers_08003ea8": "uart_handlers"
            },
            "code": "void register_serial_rx_callback_08003e54(serial_t *serial, _func_void_serial_t_ptr *rx_callback_func) {\n\tif (serial != NULL) {\n\t\tuint8_t rx_active = serial_rx_active(serial);\n\t\tif (rx_active == 0) {\n\t\t\tuint8_t index = serial->index;\n\t\t\tPTR_rx_callback_08003ea0[index] = rx_callback_func;\n\t\t\tPTR_rx_callback_obj_08003ea4[index] = serial;\n\t\t\tHAL_NVIC_SetPriority(serial->irq,0,1);\n\t\t\tHAL_NVIC_EnableIRQ(serial->irq);\n\t\t\tHAL_UART_Receive_IT(PTR_uart_handlers_08003ea8[index], &serial->recv, 1);\n\t\t}\n\t}\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "register_serial_rx_callback_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "print_formatted_string_08004fdc",
                "__format": "format",
                "PTR__impure_ptr_08005008": "impure_ptr_value",
                "pcVar2": "format_string",
                "uStack_c": "arg1",
                "uStack_8": "arg2",
                "uStack_4": "arg3"
            },
            "code": "int print_formatted_string_08004fdc(char *format, ...)\n{\n  int PTR__impure_ptr_08005008 = *(int *)PTR__impure_ptr_08005008;\n  char *format_string = format;\n  undefined4 arg1 = 0;\n  undefined4 arg2 = 0;\n  undefined4 arg3 = 0;\n  if ((PTR__impure_ptr_08005008 != 0) && (*(int *)(PTR__impure_ptr_08005008 + 0x18) == 0)) {\n    __sinit(PTR__impure_ptr_08005008);\n  }\n  int result = _vfprint_formatted_string_08004fdc_r(PTR__impure_ptr_08005008, *(undefined4 *)(PTR__impure_ptr_08005008 + 8), format_string, &arg1, format_string, &arg2);\n  return result;\n}",
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "get_file_status_080056d4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "errno_ptr",
                "iVar2": "status_code"
            },
            "code": "void get_file_status_080056d4(int *error_code, int file_descriptor, stat *file_status)\n{\n  undefined *errno_ptr;\n  int status_code;\n  errno_ptr = PTR_errno_080056f4;\n  *(undefined4 *)PTR_errno_080056f4 = 0;\n  status_code = _fstat(file_descriptor, file_status);\n  if ((status_code == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_080056d4"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "stop_and_deinitialize_dac_channel_080033d8",
                "pin": "pin_name",
                "Channel": "channel",
                "DacHandle": "dac_handle",
                "PTR_PinMap_DAC_08003408": "PTR_PinMap_DAC_08003408",
                "get_dac_channel": "get_dac_channel"
            },
            "code": "void stop_and_deinitialize_dac_channel_080033d8(PinName_conflict pin)\n{\n  uint32_t channel;\n  DAC_HandleTypeDef dac_handle;\n  dac_handle.Instance = (DAC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_DAC_08003408);\n  if ((dac_handle.Instance != (DAC_TypeDef *)0x0) && ((channel = get_dac_channel(pin), channel == 0 || (channel == 0x10)))) {\n    HAL_DAC_Stop(&dac_handle, channel);\n    HAL_DAC_DeInit(&dac_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_DAC_Stop",
                "HAL_DAC_DeInit",
                "get_dac_channel",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_and_deinitialize_dac_channel_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(UART_HandleTypeDef *huart)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  uint32_t uVar7;\n  uint32_t uVar8;\n  uint32_t uVar9;\n  uint32_t uVar10;\n  uint32_t uVar11;\n  USART_TypeDef *pUVar12;\n  \n  huart->Instance->CR2 = huart->Instance->CR2 & 0xffffcfff | (huart->Init).StopBits;\n  huart->Instance->CR1 =\n       huart->Instance->CR1 & 0xffff69f3 |\n       (huart->Init).WordLength | (huart->Init).Parity | (huart->Init).Mode |\n       (huart->Init).OverSampling;\n  huart->Instance->CR3 = huart->Instance->CR3 & 0xfffffcff | (huart->Init).HwFlowCtl;\n  if ((huart->Init).OverSampling == 0x8000) {\n    pUVar12 = huart->Instance;\n    if ((pUVar12 != (USART_TypeDef *)0x40011000) && (pUVar12 != (USART_TypeDef *)0x40011400)) {\n      uVar3 = HAL_RCC_GetPCLK1Freq();\n      uVar2 = DAT_08002d08;\n      uVar8 = (huart->Init).BaudRate;\n      uVar1 = (ulonglong)DAT_08002d08;\n      uVar4 = HAL_RCC_GetPCLK1Freq();\n      uVar9 = (huart->Init).BaudRate;\n      uVar5 = HAL_RCC_GetPCLK1Freq();\n      uVar10 = (huart->Init).BaudRate;\n      uVar6 = HAL_RCC_GetPCLK1Freq();\n      uVar11 = (huart->Init).BaudRate;\n      uVar7 = HAL_RCC_GetPCLK1Freq();\n      pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                   (ulonglong)\n                                   (((uVar6 * 0x19) / (uVar11 << 1) +\n                                    (uint)((ulonglong)uVar2 *\n                                           ((ulonglong)(uVar7 * 0x19) /\n                                           (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100\n                                    ) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                     ((uint)((ulonglong)uVar2 *\n                             (ulonglong)\n                             (((uVar4 * 0x19) / (uVar9 << 1) +\n                              (uint)((ulonglong)uVar2 *\n                                     ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25)\n                              * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                     (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                     0x10;\n      return;\n    }\n    uVar3 = HAL_RCC_GetPCLK2Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK2Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK2Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK2Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK2Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 1) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 1)) >> 0x25) * -100)\n                                  * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 1) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 1)) >> 0x25) *\n                            -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 1)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  pUVar12 = huart->Instance;\n  if ((pUVar12 != DAT_08002d04) && (pUVar12 != (USART_TypeDef *)&DAT_08002d04[0x24].CR2)) {\n    uVar3 = HAL_RCC_GetPCLK1Freq();\n    uVar2 = DAT_08002d08;\n    uVar8 = (huart->Init).BaudRate;\n    uVar1 = (ulonglong)DAT_08002d08;\n    uVar4 = HAL_RCC_GetPCLK1Freq();\n    uVar9 = (huart->Init).BaudRate;\n    uVar5 = HAL_RCC_GetPCLK1Freq();\n    uVar10 = (huart->Init).BaudRate;\n    uVar6 = HAL_RCC_GetPCLK1Freq();\n    uVar11 = (huart->Init).BaudRate;\n    uVar7 = HAL_RCC_GetPCLK1Freq();\n    pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                                 (ulonglong)\n                                 (((uVar6 * 0x19) / (uVar11 << 2) +\n                                  (uint)((ulonglong)uVar2 *\n                                         ((ulonglong)(uVar7 * 0x19) /\n                                         (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100)\n                                  * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                   ((uint)((ulonglong)uVar2 *\n                           (ulonglong)\n                           (((uVar4 * 0x19) / (uVar9 << 2) +\n                            (uint)((ulonglong)uVar2 *\n                                   ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                            -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                   (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                   0x10;\n    return;\n  }\n  uVar3 = HAL_RCC_GetPCLK2Freq();\n  uVar2 = DAT_08002d08;\n  uVar8 = (huart->Init).BaudRate;\n  uVar1 = (ulonglong)DAT_08002d08;\n  uVar4 = HAL_RCC_GetPCLK2Freq();\n  uVar9 = (huart->Init).BaudRate;\n  uVar5 = HAL_RCC_GetPCLK2Freq();\n  uVar10 = (huart->Init).BaudRate;\n  uVar6 = HAL_RCC_GetPCLK2Freq();\n  uVar11 = (huart->Init).BaudRate;\n  uVar7 = HAL_RCC_GetPCLK2Freq();\n  pUVar12->BRR = ((uint)((int)((ulonglong)uVar2 *\n                               (ulonglong)\n                               (((uVar6 * 0x19) / (uVar11 << 2) +\n                                (uint)((ulonglong)uVar2 *\n                                       ((ulonglong)(uVar7 * 0x19) /\n                                       (ulonglong)((huart->Init).BaudRate << 2)) >> 0x25) * -100) *\n                                0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n                 ((uint)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uVar4 * 0x19) / (uVar9 << 2) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uVar5 * 0x19) / (ulonglong)(uVar10 << 2)) >> 0x25) *\n                          -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n                 (uint)(uVar1 * ((ulonglong)(uVar3 * 0x19) / (ulonglong)(uVar8 << 2)) >> 0x25) *\n                 0x10;\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "set_clock_08002488",
                "RCC_ClkInitStruct_conflict": "RCC_ClkInitTypeDef_conflict",
                "RCC_ClkInitStruct": "clock_init_struct",
                "FLatency": "latency",
                "puVar1": "rcc_cfgr",
                "uVar2": "sysclk_freq",
                "uVar3": "current_tick",
                "uVar4": "sysclk_source"
            },
            "code": "HAL_StatusTypeDef set_clock_08002488(RCC_ClkInitTypeDef_conflict *clock_init_struct, uint32_t latency) {\n  uint32_t *rcc_cfgr = DAT_080025d4;\n  if (clock_init_struct == NULL) {\n    return HAL_ERROR;\n  }\n  if (((*DAT_080025d0 & 0xf) < latency) &&\n     (*(char *)DAT_080025d0 = (char)latency, latency != (*DAT_080025d0 & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_AHB) != 0) {\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_APB1) != 0) {\n      rcc_cfgr[2] |= 0x1c00;\n    }\n    if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_APB2) != 0) {\n      rcc_cfgr[2] |= 0xe000;\n    }\n    rcc_cfgr[2] = (rcc_cfgr[2] & 0xffffff0f) | clock_init_struct->AHBCLKDivider;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n    uint32_t sysclk_source = clock_init_struct->SYSCLKSource;\n    if (sysclk_source == RCC_SYSCLKSOURCE_PLLCLK) {\n      if ((rcc_cfgr & RCC_CFGR_SWS_PLL) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if (sysclk_source == RCC_SYSCLKSOURCE_HSE) {\n      if ((rcc_cfgr & RCC_CFGR_SWS_HSE) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((rcc_cfgr & RCC_CFGR_SWS_HSI) == 0) {\n      return HAL_ERROR;\n    }\n    rcc_cfgr[2] = sysclk_source | (rcc_cfgr[2] & 0xfffffffc);\n    uint32_t start_tick = HAL_GetTick();\n    while ((rcc_cfgr[2] & RCC_CFGR_SWS) != (sysclk_source << 2)) {\n      uint32_t current_tick = HAL_GetTick();\n      if (5000 < current_tick - start_tick) {\n        return HAL_TIMEOUT;\n      }\n    }\n  }\n  if ((latency < (*DAT_080025d0 & 0xf)) &&\n     (*(char *)DAT_080025d0 = (char)latency, latency != (*DAT_080025d0 & 0xf))) {\n    return HAL_ERROR;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_APB1) != 0) {\n    rcc_cfgr[2] = (rcc_cfgr[2] & 0xffffe3ff) | clock_init_struct->APB1CLKDivider;\n  }\n  if ((clock_init_struct->ClockType & RCC_CLOCKTYPE_APB2) != 0) {\n    rcc_cfgr[2] = (rcc_cfgr[2] & 0xffff1fff) | (clock_init_struct->APB2CLKDivider << 3);\n  }\n  uint32_t sysclk_freq = HAL_RCC_GetSysClockFreq();\n  *(uint32_t *)PTR_SystemCoreClock_080025dc = sysclk_freq >> PTR_AHBPrescTable_080025d8[(rcc_cfgr[2] << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_08002488"
        },
        "FUN_08004788": {
            "renaming": {
                "FUN_08004788": "handle_GPIO_EXTI_08004788",
                "PTR_": "",
                "DAT_": "",
                "0x10": "GPIO_PIN_4"
            },
            "code": "void handle_GPIO_EXTI_08004788(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004788",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_08004788"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "create_ip_address_08004544",
                "this": "ip_address",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "super_Printable": "printable",
                "_vptr_Printable": "vptr",
                "_address": "address",
                "bytes": "byte_array"
            },
            "code": "typedef struct {\n    Printable printable;\n    Address address;\n} IP_Address;\n\nIP_Address * create_ip_address_08004544(IP_Address *this, uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n    this->printable.vptr = (_func_int_varargs **)PTR_DAT_0800455c;\n    this->address.bytes[0] = first_octet;\n    this->address.bytes[1] = second_octet;\n    this->address.bytes[2] = third_octet;\n    this->address.bytes[3] = fourth_octet;\n    return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_ip_address_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "initialize_uart_debug_08003cc8",
                "pin": "uart_tx_pin",
                "obj": "serial_pointer",
                "PVar1": "uart_rx_pin",
                "pvVar2": "peripheral"
            },
            "code": "void initialize_uart_debug_08003cc8(void)\n{\n  PinName_conflict uart_tx_pin = *(PinName_conflict *)(PTR_digitalPin_08003d08 + 0x9a);\n  void *peripheral = pinmap_peripheral(uart_tx_pin,(PinMap_conflict *)PTR_PinMap_UART_TX_08003d0c);\n  if (peripheral != (void *)0x0) {\n    PinName_conflict uart_rx_pin = pinmap_pin(peripheral,(PinMap_conflict *)PTR_PinMap_UART_RX_08003d10);\n    undefined *serial_pointer = PTR_serial_debug_08003d14;\n    *(PinName_conflict *)(PTR_serial_debug_08003d14 + 0x5a) = uart_rx_pin;\n    *(PinName_conflict *)(serial_pointer + 0x58) = uart_tx_pin;\n    *(undefined4 *)(serial_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(serial_pointer + 0x54) = 0;\n    *(undefined4 *)(serial_pointer + 0x4c) = 0;\n    *(undefined4 *)(serial_pointer + 0x50) = 0;\n    uart_init((serial_t *)serial_pointer);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "uart_init",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "gpio_init_pins_08000fb4",
                "GPIOx": "gpio",
                "GPIO_Init": "init",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "mask",
                "uVar4": "pin_mask",
                "uVar5": "i",
                "uVar6": "pin_mask_match",
                "uVar7": "mode",
                "uVar9": "shift",
                "iVar8": "gpio_index",
                "iVar10": "alternate_shift",
                "tmpreg": "tmp_reg",
                "DAT_0800118c": "ptr_data1",
                "DAT_08001184": "ptr_data2"
            },
            "code": "void gpio_init_pins_08000fb4(GPIO_TypeDef *gpio, GPIO_InitTypeDef *init)\n{\n    uint32_t pin_mask;\n    uint32_t alternate_mask;\n    uint32_t mode_mask;\n    uint32_t speed_mask;\n    uint32_t pull_mask;\n    uint32_t af_index;\n    uint32_t tmp_reg;\n    for (uint32_t i = 0; i < 16; i++) {\n        pin_mask = 1 << i;\n        if ((pin_mask & init->Pin) == pin_mask) {\n            if ((init->Mode == GPIO_MODE_AF_PP) || (init->Mode == GPIO_MODE_AF_OD)) {\n                af_index = i >> 3;\n                alternate_mask = ~(0xF << ((i & 0x7) << 2));\n                gpio->AFR[af_index] = (gpio->AFR[af_index] & alternate_mask) | (init->Alternate << ((i & 0x7) << 2));\n            }\n            mode_mask = ~(3 << (i << 1));\n            gpio->MODER = (gpio->MODER & mode_mask) | ((init->Mode & 3) << (i << 1));\n            if (((init->Mode - 1) < 2) || (init->Mode == GPIO_MODE_ANALOG) || (init->Mode == GPIO_MODE_AF_PP) || (init->Mode == GPIO_MODE_AF_OD)) {\n                speed_mask = ~(3 << (i << 1));\n                gpio->OSPEEDR = (gpio->OSPEEDR & speed_mask) | (init->Speed << (i << 1));\n                gpio->OTYPER = (gpio->OTYPER & ~pin_mask) | (((init->Mode << 0x1B) >> 0x1F) << i);\n            }\n            pull_mask = ~(3 << (i << 1));\n            gpio->PUPDR = (gpio->PUPDR & pull_mask) | (init->Pull << (i << 1));\n            if ((init->Mode & GPIO_MODE_IT_RISING_FALLING) != 0) {\n                tmp_reg = *(uint32_t *)(0x0800118C + 0x44);\n                tmp_reg |= 0x4000;\n                *(uint32_t *)(0x0800118C + ((i >> 2) + 2) * 4) = (*(uint32_t *)(0x0800118C + ((i >> 2) + 2) * 4) & ~(0xF << ((i & 0x3) << 2))) | (((gpio == GPIOA) ? 0 : (gpio == GPIOB) ? 1 : (gpio == (GPIO_TypeDef *)&GPIOB->BSRR) ? 2 : (gpio == (GPIO_TypeDef *)&GPIOB->OSPEEDR) ? 3 : (gpio == (GPIO_TypeDef *)&GPIOB->AFR[0]) ? 4 : (gpio == (GPIO_TypeDef *)&GPIOB->IDR) ? 5 : (gpio == GPIOC) ? 6 : (gpio == (GPIO_TypeDef *)&GPIOC->BSRR) ? 7 : (gpio == (GPIO_TypeDef *)&GPIOC->OSPEEDR) ? 8 : (gpio == (GPIO_TypeDef *)&GPIOC->AFR[0]) ? 9 : 10) << ((i & 0x3) << 2));\n                *(uint32_t *)(0x08001188 + 4 * (i >> 4)) = (*(uint32_t *)(0x08001188 + 4 * (i >> 4)) & ~(0x3 << ((i & 0xF) << 1))) | ((init->Mode & GPIO_MODE_IT_RISING) != 0 ? 0x1 : ((init->Mode & GPIO_MODE_IT_FALLING) != 0 ? 0x2 : 0x0)) << ((i & 0xF) << 1);\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "gpio_init_pins_08000fb4"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "i2c_handler_08001bfc",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "puVar3": "buffer_ptr",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef i2c_handler_08001bfc(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state;\n  I2C_TypeDef *instance;\n  uint8_t *buffer_ptr;\n  uint32_t tmpreg;\n  \n  state = handle->State;\n  instance = handle->Instance;\n  instance->CR2 = instance->CR2 & 0xfffff8ff;\n  instance->CR1 = instance->CR1 | 1;\n  instance->CR1 = instance->CR1 & 0xfffffbff;\n  \n  if ((instance->CR2 & 0x800) != 0) {\n    if ((handle->State == HAL_I2C_STATE_BUSY_RX) || (handle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      handle->XferCount = (uint16_t)handle->hdmarx->Instance->NDTR;\n    }\n    else {\n      handle->XferCount = (uint16_t)handle->hdmatx->Instance->NDTR;\n    }\n  }\n  if (handle->XferCount != 0) {\n    if ((instance->SR1 & 4) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)instance->DR;\n      handle->XferCount = handle->XferCount - 1;\n    }\n    if ((instance->SR1 & 0x40) != 0) {\n      buffer_ptr = handle->pBuffPtr;\n      handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)instance->DR;\n      handle->XferCount = handle->XferCount - 1;\n    }\n    handle->ErrorCode = handle->ErrorCode | 4;\n  }\n  if (handle->ErrorCode == 0) {\n    if (((state == HAL_I2C_STATE_LISTEN) || (state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->XferOptions = DAT_08001cfc;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(handle);\n    }\n    else if ((handle->PreviousState == 0x22) || (state == HAL_I2C_STATE_BUSY_RX)) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(handle);\n    }\n  }\n  else {\n    I2C_ITError(handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handler_08001bfc"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "huart": "uart_handler",
                "gState": "global_state",
                "Lock": "lock",
                "ErrorCode": "error_code",
                "RxState": "receive_state",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_MspInit": "initialize_uart_msp"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002d72(UART_HandleTypeDef *uart_handler)\n{\n  if (uart_handler != NULL) {\n    if (uart_handler->gState == HAL_UART_STATE_RESET) {\n      uart_handler->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handler);\n    }\n    uart_handler->gState = HAL_UART_STATE_BUSY;\n    uart_handler->Instance->CR1 &= 0xffffdfff;\n    UART_SetConfig(uart_handler);\n    uart_handler->Instance->CR2 &= 0xffffb7ff;\n    uart_handler->Instance->CR3 &= 0xffffffd5;\n    uart_handler->Instance->CR1 |= 0x2000;\n    uart_handler->ErrorCode = 0;\n    uart_handler->gState = HAL_UART_STATE_READY;\n    uart_handler->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "__thiscall Modbus::FUN_080007f0": "checkModbusRequest",
                "bVar1": "isSupportedFunction",
                "uVar2": "startingAddress",
                "uVar3": "quantityOfRegisters",
                "uVar4": "i",
                "this": "this",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "u8regsize": "maxRegisterSize",
                "makeWord": "makeWord",
                "FUN_080007f0": "checkModbusRequest_080007f0"
            },
            "code": "uint8_t __thiscall Modbus::checkModbusRequest_080007f0(Modbus *this)\n{\n  bool isSupportedFunction = false;\n  uint8_t errorCode = 0;\n  uint8_t functionCode = this->au8Buffer[1];\n  uint16_t startingAddress = makeWord(this->au8Buffer[2], this->au8Buffer[3]);\n  uint16_t quantityOfRegisters = makeWord(this->au8Buffer[4], this->au8Buffer[5]);\n  uint8_t maxRegisterSize = this->u8regsize;\n  \n  for (uint8_t i = 0; i < 8; i++) {\n    if (PTR_fctsupported_080008c8[i] == functionCode) {\n      isSupportedFunction = true;\n      break;\n    }\n  }\n  \n  if (!isSupportedFunction) {\n    return errorCode;\n  }\n  \n  switch (functionCode) {\n    case 0x01:\n    case 0x02:\n    case 0x0F:\n      errorCode = 0;\n      break;\n    case 0x03:\n    case 0x04:\n    case 0x10:\n      if (maxRegisterSize < (startingAddress + quantityOfRegisters)) {\n        errorCode = 2;\n      }\n      break;\n    case 0x05:\n      if (maxRegisterSize < startingAddress) {\n        errorCode = 2;\n      }\n      break;\n    case 0x06:\n      if (maxRegisterSize < startingAddress + 1) {\n        errorCode = 2;\n      }\n      break;\n    default:\n      errorCode = 0;\n      break;\n  }\n  \n  if (errorCode != 0) {\n    this->u16errCnt++;\n  }\n  \n  return errorCode;\n}\n",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkModbusRequest_080007f0"
        },
        "FUN_0800477e": {
            "renaming": {
                "FUN_0800477e": "handle_GPIO_interrupt_0800477e"
            },
            "code": "void handle_GPIO_interrupt_0800477e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800477e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800477e"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "write_to_file_0800562a",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "buffer_length",
                "param_4": "unused_parameter",
                "*(ushort *)(param_2 + 0xc)": "offset",
                "*(short *)(param_2 + 0xe)": "buffer_offset"
            },
            "code": "void write_to_file_0800562a(int file_descriptor,int buffer_address,int buffer_length,int unused_parameter)\n{\n  int offset = (int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17);\n  if (offset < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  _write_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),buffer_length,unused_parameter);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_serial_080044d8",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PTR_Serial3_080044f8": "serial_3",
                "DAT_080044f4": "serial_data"
            },
            "code": "void initialize_serial_080044d8(int should_initialize, int priority_level)\n{\n    if (should_initialize != 1) {\n        return;\n    }\n    if (priority_level == 0xffff) {\n        HardwareSerial::HardwareSerial(&PTR_Serial3_080044f8, DAT_080044f4);\n    }\n    return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [
                "_GLOBAL__sub_I_Serial3"
            ],
            "imported": false,
            "current_name": "initialize_serial_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_uart_transmit_complete_08003df4",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_08003e14": "PTR_uart_handlers",
                "uint8_t": "bool",
                "HAL_UART_StateTypeDef": "HAL_UART_State",
                "*(UART_HandleTypeDef **)": "*",
                "index": "serial_index"
            },
            "code": "bool is_uart_transmit_complete_08003df4(serial_t *serial) {\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08003e14_08003e14 + (uint)serial->index * 4);\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n  return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_empty_slot_08005400",
                "param_1": "error_code_ptr",
                "piVar1": "first_slot",
                "piVar2": "current_slot",
                "iVar3": "global_impure_ptr",
                "ppiVar4": "slot_array"
            },
            "code": "int* find_empty_slot_08005400(undefined4 *error_code_ptr) {\n  int *current_slot;\n  int *first_slot;\n  int global_impure_ptr = *(int *)PTR__global_impure_ptr_08005474;\n  if (*(int *)(global_impure_ptr + 0x18) == 0) {\n    __sinit(global_impure_ptr);\n  }\n  int **slot_array = (int **)(global_impure_ptr + 0x48);\n  do {\n    first_slot = slot_array[1];\n    current_slot = slot_array[2];\n    while (first_slot = (int *)((int)first_slot - 1), -1 < (int)first_slot) {\n      if (*(short *)(current_slot + 3) == 0) {\n        *(undefined2 *)((int)current_slot + 0xe) = 0xffff;\n        *(undefined2 *)(current_slot + 3) = 1;\n        current_slot[0x19] = 0;\n        *current_slot = 0;\n        current_slot[2] = 0;\n        current_slot[1] = 0;\n        current_slot[4] = 0;\n        current_slot[5] = 0;\n        current_slot[6] = 0;\n        memset(current_slot + 0x17,0,8);\n        current_slot[0xd] = 0;\n        current_slot[0xe] = 0;\n        current_slot[0x12] = 0;\n        current_slot[0x13] = 0;\n        return current_slot;\n      }\n      current_slot = current_slot + 0x1a;\n    }\n    if (*slot_array == (int *)0x0) {\n      first_slot = (int *)__sfmoreglue(error_code_ptr,4);\n      *slot_array = first_slot;\n      if (first_slot == (int *)0x0) {\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    slot_array = (int **)*slot_array;\n  } while(true);\n}",
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "find_empty_slot_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "get_non_null_pointer_08003582",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void * get_non_null_pointer_08003582(void *ptr1, void *ptr2)\n{\n  if (ptr1 != ptr2) {\n    if (ptr1 == NULL) {\n      return ptr2;\n    }\n    if (ptr2 == NULL) {\n      return ptr1;\n    }\n    ptr1 = NULL;\n  }\n  return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_non_null_pointer_08003582"
        },
        "FUN_08004792": {
            "renaming": {
                "FUN_08004792": "handle_GPIO_EXTI_interrupts_08004792",
                "uVar1": "pin",
                "HAL_GPIO_EXTI_IRQHandler": "handle_GPIO_EXTI_IRQHandler",
                "uint16_t": "InterruptPinType",
                "interrupt_pin": "interruptPin"
            },
            "code": "void handle_GPIO_EXTI_interrupts_08004792(void)\n{\n  uint16_t interrupt_pin;\n  for (uint16_t pin = 0x20; pin < 0x201; pin = pin << 1) {\n    interrupt_pin = (uint16_t)pin;\n    HAL_GPIO_EXTI_IRQHandler(interrupt_pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004792",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_interrupts_08004792"
        },
        "FUN_08005760": {
            "renaming": {
                "std::FUN_08005760": "abort_program",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_08005760": "abort_program_08005760"
            },
            "code": "void abort_program_08005760(void)\n{\n    abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_to_one_08004678",
                "pin": "input_pin",
                "uVar1": "pin",
                "uVar2": "bit_count"
            },
            "code": "uint8_t count_bits_set_to_one_08004678(uint16_t input_pin)\n{\n  uint16_t pin = input_pin;\n  uint8_t bit_count = 0;\n  while (pin != 1) {\n    bit_count++;\n    pin >>= 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "enable_i2c_listen_mode_08003900",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void enable_i2c_listen_mode_08003900(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_obj;\n  i2c_obj = get_i2c_object(i2c_handle);\n  if (i2c_obj->is_master == 0) {\n    HAL_I2C_EnableListen_IT(i2c_handle);\n  }\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_mode_08003900"
        },
        "FUN_08005768": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005768": "set_flags_of_pointers",
                "FUN_08005768": "set_flags_of_pointers_08005768"
            },
            "code": "void set_flags_of_pointers_08005768(void)\n{\n    if (-1 < *(int *)PTR_id_080057fc << 0x1f) {\n        *(undefined4 *)PTR_id_080057fc = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005800 << 0x1f) {\n        *(undefined4 *)PTR_id_08005800 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005804 << 0x1f) {\n        *(undefined4 *)PTR_id_08005804 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005808 << 0x1f) {\n        *(undefined4 *)PTR_id_08005808 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800580c << 0x1f) {\n        *(undefined4 *)PTR_id_0800580c = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005810 << 0x1f) {\n        *(undefined4 *)PTR_id_08005810 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005814 << 0x1f) {\n        *(undefined4 *)PTR_id_08005814 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005818 << 0x1f) {\n        *(undefined4 *)PTR_id_08005818 = 1;\n    }\n    if (-1 < *(int *)PTR_id_0800581c << 0x1f) {\n        *(undefined4 *)PTR_id_0800581c = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005820 << 0x1f) {\n        *(undefined4 *)PTR_id_08005820 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005824 << 0x1f) {\n        *(undefined4 *)PTR_id_08005824 = 1;\n    }\n    if (-1 < *(int *)PTR_id_08005828 << 0x1f) {\n        *(undefined4 *)PTR_id_08005828 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005768",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_of_pointers_08005768"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_irq_handler_08000f0c",
                "IRQn": "irq_num",
                "uVar1": "irq_index",
                "DAT_08000f28": "irq_word_base"
            },
            "code": "void set_irq_handler_08000f0c(IRQn_Type_conflict irq_num) {\n  uint32_t irq_index = (uint32_t)irq_num;\n  if (irq_index >= 0) {\n    uint32_t irq_word_offset = (irq_index >> 5) + 0x60;\n    uint32_t* irq_word_ptr = (uint32_t*)(DAT_08000f28 + irq_word_offset * 4);\n    uint32_t irq_bit_mask = 1 << (irq_index & 0x1f);\n    *irq_word_ptr = irq_bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_irq_handler_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "__thiscall Modbus::FUN_08000998": "build_response_packet",
                "this": "self",
                "regs": "register_values",
                "u8size": "num_registers",
                "bVar1": "buffer_index",
                "uVar2": "next_buffer_index",
                "uVar3": "starting_register_high_byte",
                "uVar4": "num_bytes_high_byte",
                "uVar5": "i",
                "uVar6": "next_buffer_index",
                "FUN_08000998": "build_response_packet_08000998"
            },
            "code": "int8_t __thiscall Modbus::build_response_packet_08000998(Modbus *this, uint16_t *register_values, uint8_t num_registers) {\n  byte starting_register_high_byte = this->au8Buffer[2];\n  byte starting_register_low_byte = this->au8Buffer[3];\n  byte num_bytes_high_byte = this->au8Buffer[4];\n  byte num_bytes_low_byte = this->au8Buffer[5];\n  this->au8Buffer[2] = num_bytes_high_byte << 1;\n  this->u8BufferSize = 3;\n  for (uint i = (uint)starting_register_high_byte; i < (uint)starting_register_high_byte + (uint)num_bytes_high_byte; i++) {\n    byte buffer_index = this->u8BufferSize;\n    this->au8Buffer[buffer_index] = (uint8_t)(register_values[i] >> 8);\n    byte next_buffer_index = buffer_index + 1;\n    this->au8Buffer[next_buffer_index] = *(uint8_t *)(register_values + i);\n    this->u8BufferSize = next_buffer_index + 1;\n  }\n  uint8_t response_packet_size = this->u8BufferSize;\n  sendTxBuffer(this);\n  return response_packet_size + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "build_response_packet_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "initialize_uart_08003f94",
                "huart": "uart_handler",
                "tmpval": "temporary_value"
            },
            "code": "void initialize_uart_08003f94(UART_HandleTypeDef *uart_handler)\n{\n  uint32_t temporary_value;\n  //Code for initializing UART\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "initialize_uart_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "signal_handler_080055d0",
                "__sig": "signal",
                "iVar1": "return_value",
                "_FUN_080055d0_r": "signal_handler_r"
            },
            "code": "int signal_handler_080055d0(int signal) {\n  int return_value;\n  return_value = signal_handler_080055d0_r(*(undefined4 *)PTR__impure_ptr_080055dc, signal);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "check_if_terminal_080056f8",
                "param_1": "return_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_080056f8(int *return_code, int file_descriptor)\n{\n  undefined *errno_ptr;\n  int is_terminal;\n  errno_ptr = PTR_errno_08005714;\n  *(undefined4 *)PTR_errno_08005714 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)errno_ptr != 0)) {\n    *return_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_file_type_and_permissions_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "file_type",
                "param_4": "file_permissions",
                "iVar1": "status",
                "uVar2": "file_type_val",
                "auStack_4c": "temp_stack_var",
                "local_48": "permissions_val"
            },
            "code": "int check_file_type_and_permissions_080054b4(undefined4 file_descriptor, int file_info, undefined4 *file_type, uint *file_permissions) {\n    int status;\n    undefined4 file_type_val;\n    undefined temp_stack_var [4];\n    uint permissions_val;\n    \n    if ((*(short *)(file_info + 0xe) < 0) ||\n        (status = _fstat_r(file_descriptor, (int)*(short *)(file_info + 0xe), temp_stack_var), status < 0)) {\n        *file_permissions = 0;\n        if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n            file_type_val = 0x40;\n            goto LAB_080054f4;\n        }\n    }\n    else {\n        permissions_val = (uint)((permissions_val & 0xf000) == 0x2000);\n    }\n    file_type_val = 0x400;\nLAB_080054f4:\n    *file_type = file_type_val;\n    return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_type_and_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "handleI2CState_0800171a",
                "*hi2c": "*i2cHandle",
                "HVar1": "i2cState",
                "pbVar2": "bufferPtr",
                "uVar3": "transferOptions"
            },
            "code": "HAL_StatusTypeDef handleI2CState_0800171a(I2C_HandleTypeDef *i2cHandle) {\n  HAL_I2C_StateTypeDef i2cState = i2cHandle->State;\n  uint32_t transferOptions = i2cHandle->XferOptions;\n  if (i2cHandle->XferSize == 0 && i2cState == HAL_I2C_STATE_BUSY_TX) {\n    if (transferOptions == 4 || transferOptions == 8 || transferOptions == 0xffff0000) {\n      i2cHandle->Instance->CR2 &= 0xfffff8ff;\n      i2cHandle->Instance->CR1 |= 0x200;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2cHandle);\n      } else {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    } else {\n      i2cHandle->Instance->CR2 &= 0xfffff8ff;\n      i2cHandle->PreviousState = 0x11;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2cHandle);\n    }\n  } else if (i2cState == HAL_I2C_STATE_BUSY_TX || (i2cHandle->Mode == HAL_I2C_MODE_MEM && i2cState == HAL_I2C_STATE_BUSY_RX)) {\n    if (i2cHandle->XferCount == 0) {\n      i2cHandle->Instance->CR2 &= 0xfffffbff;\n    } else if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2cHandle->EventCount == 0) {\n        if (i2cHandle->MemaddSize == 1) {\n          i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n          i2cHandle->EventCount += 2;\n        } else {\n          i2cHandle->Instance->DR = (i2cHandle->Memaddress << 0x10) >> 0x18;\n          i2cHandle->EventCount++;\n        }\n      } else if (i2cHandle->EventCount == 1) {\n        i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n        i2cHandle->EventCount++;\n      } else if (i2cHandle->EventCount == 2) {\n        if (i2cState == HAL_I2C_STATE_BUSY_RX) {\n          i2cHandle->Instance->CR1 |= 0x100;\n        } else if (i2cState == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = bufferPtr + 1;\n          i2cHandle->Instance->DR = (uint)*bufferPtr;\n          i2cHandle->XferCount--;\n        }\n      }\n    } else {\n      uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPtr;\n      i2cHandle->XferCount--;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CState_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "initializeIPAddress_08004560",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level"
            },
            "code": "void initializeIPAddress_08004560(int should_initialize, int priority_level) {\n  if (should_initialize == 1 && priority_level == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08004588, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "decode_and_set_registers_08000a7a",
                "this": "modbus_instance",
                "regs": "registers",
                "u8size": "num_registers",
                "uVar1": "start_address",
                "uVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_index"
            },
            "code": "int8_t __thiscall decode_and_set_registers_08000a7a(Modbus *modbus_instance, uint16_t *registers, uint8_t num_registers) {\n  uint16_t start_address = makeWord(modbus_instance->au8Buffer[2], modbus_instance->au8Buffer[3]);\n  uint16_t num_bits = makeWord(modbus_instance->au8Buffer[4], modbus_instance->au8Buffer[5]);\n  uint bit_index = 0;\n  uint byte_index = 7;\n  for (uint i = 0; i < num_bits; i++) {\n    uint byte_offset = (i + start_address) * 0x100000 >> 0x18;\n    uint bit_offset = (i + start_address) & 0xf;\n    if (((int)(uint)modbus_instance->au8Buffer[byte_index] >> bit_index & 1U) == 0) {\n      registers[byte_offset] &= ~(uint16_t)(1 << bit_offset);\n    }\n    else {\n      registers[byte_offset] |= (uint16_t)(1 << bit_offset);\n    }\n    bit_index = (bit_index + 1) % 8;\n    if (bit_index == 0) {\n      byte_index = (byte_index + 1) % 256;\n    }\n  }\n  modbus_instance->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus_instance);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decode_and_set_registers_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "encode_string_08004cb0",
                "param_1": "input",
                "param_2": "output_length",
                "param_3": "output_buffer",
                "param_4": "unused",
                "param_5": "write_to_output",
                "iVar1": "index",
                "uVar2": "max_output_length",
                "uVar3": "output_buffer_offset",
                "bVar4": "is_output_buffer_offset_4",
                "output_buffer_start": "output_buffer_offset",
                "output_buffer_offset": "output_buffer_offset",
                "output_length": "output_length",
                "max_output_length": "max_output_length",
                "max_input_length": "max_input_length",
                "input_offset": "input_offset",
                "result": "result"
            },
            "code": "undefined4 encode_string_08004cb0(undefined4 input, uint *output_length, uint *output_buffer, undefined4 unused, code *write_to_output)\\n\\\n    {\\n\\\n        int index;\\n\\\n        uint max_output_length = param_2[4];\\n\\\n        if (max_output_length < param_2[2]) {\\n\\\n            max_output_length = param_2[2];\\n\\\n        }\\n\\\n        *output_length = max_output_length;\\n\\\n        if (*(char *)((int)param_2 + 0x43) != \"\\0\") {\\n\\\n            *output_length = max_output_length + 1;\\n\\\n        }\\n\\\n        if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n            *output_length = *output_length + 2;\\n\\\n        }\\n\\\n        uint output_buffer_start = *param_2 & 6;\\n\\\n        if (output_buffer_start == 0) {\\n\\\n            for (; (int)output_buffer_start < (int)(param_2[3] - *output_length); output_buffer_start++) {\\n\\\n                int result = (*write_to_output)(input, unused, (int)param_2 + 0x19, 1);\\n\\\n                if (result == -1) {\\n\\\n                    return 0xffffffff;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        uint output_buffer_offset = (uint)*(byte *)((int)param_2 + 0x43);\\n\\\n        if (output_buffer_offset != 0) {\\n\\\n            output_buffer_offset = 1;\\n\\\n        }\\n\\\n        if ((int)(*param_2 << 0x1a) < 0) {\\n\\\n            *(undefined *)((int)param_2 + output_buffer_offset + 0x43) = 0x30;\\n\\\n            *(undefined *)((int)param_2 + output_buffer_offset + 0x44) = *(undefined *)((int)param_2 + 0x45);\\n\\\n            output_buffer_offset += 2;\\n\\\n        }\\n\\\n        int result = (*write_to_output)(input, unused, (int)param_2 + 0x43, output_buffer_offset);\\n\\\n        if (result != -1) {\\n\\\n            uint max_input_length = param_2[3];\\n\\\n            bool is_output_buffer_offset_4 = (*param_2 & 6) == 4;\\n\\\n            if (is_output_buffer_offset_4) {\\n\\\n                max_input_length = max_input_length - *output_length;\\n\\\n            }\\n\\\n            if (is_output_buffer_offset_4) {\\n\\\n                max_input_length = max_input_length & ~((int)max_input_length >> 0x1f);\\n\\\n            }\\n\\\n            else {\\n\\\n                max_input_length = 0;\\n\\\n            }\\n\\\n            if (max_output_length < param_2[2]) {\\n\\\n                max_input_length = max_input_length + (param_2[2] - param_2[4]);\\n\\\n            }\\n\\\n            uint input_offset = 0;\\n\\\n            while(true) {\\n\\\n                if (max_input_length == input_offset) {\\n\\\n                    return 0;\\n\\\n                }\\n\\\n                int result = (*write_to_output)(input, unused, (int)param_2 + 0x1a, 1);\\n\\\n                if (result == -1) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                input_offset++;\\n\\\n            }\\n\\\n        }\\n\\\n        return 0xffffffff;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "encode_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "call_RTC_user_callback_08003594",
                "hrtc": "rtc_handle",
                "PTR_RTCUserCallback_080035a4": "user_callback_ptr",
                "PTR_callbackUserData_080035a8": "user_data_ptr"
            },
            "code": "void call_RTC_user_callback_08003594(RTC_HandleTypeDef *rtc_handle)\n{\n  code* user_callback = *(code**)PTR_RTCUserCallback_080035a4;\n  if (user_callback != (code*)0x0) {\n    (*user_callback)(*(undefined4*)PTR_callbackUserData_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "call_RTC_user_callback_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "reset_uart_08002940",
                "huart": "uart_handle",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receive_state",
                "HAL_UART_STATE_READY": "ready_state"
            },
            "code": "void reset_uart_08002940(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~(1 << 13);\n  uart_handle->Instance->CR3 &= ~(1 << 0);\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_current_milliseconds_08004204",
                "uVar1": "current_milliseconds"
            },
            "code": "uint32_t get_current_milliseconds_08004204(void)\n{\n  uint32_t current_milliseconds = GetCurrentMilli();\n  return current_milliseconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "sendTxBuffer",
                "poll"
            ],
            "imported": false,
            "current_name": "get_current_milliseconds_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "handleSysTick_08003476",
                "noOsSystickHandler": "handleNoOsSystick"
            },
            "code": "void handleSysTick_08003476(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystick();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "handleSysTick_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_rx_pin_08004444",
                "_rx": "rx_pin_index",
                "PVar1": "rx_pin",
                "PTR_digitalPin_0800445c": "digital_pin_ptr"
            },
            "code": "void __thiscall HardwareSerial::set_rx_pin_08004444(HardwareSerial *this, uint32_t rx_pin_index) {\n  PinName rx_pin;\n  if (rx_pin_index < 0x60) {\n    rx_pin = *(PinName *)(PTR_digitalPin_0800445c + rx_pin_index * 2);\n  }\n  else {\n    rx_pin = NC;\n  }\n  (this->_serial).pin_rx = rx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08004444"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "kill_process_if_running_080055e0",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_080055e0(int *error_code, int process_id, int signal) {\n  undefined *errno_ptr;\n  int kill_result;\n  errno_ptr = PTR_errno_08005600;\n  *(undefined4 *)PTR_errno_08005600 = 0;\n  kill_result = _kill(process_id, signal);\n  if ((kill_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_080055e0"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_current_tick_0800346c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_0800346c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data",
                "uVar1": "return_value",
                "iVar2": "global_impure_ptr",
                "bVar3": "is_global_impure_ptr",
                "PTR__global_impure_ptr_080053f8": "PTR_global_impure_ptr",
                "DAT_080053fc": "DAT_constant",
                "__sfp": "get_sfp",
                "std_isra_0": "set_value"
            },
            "code": "void initialize_data_080053a0(int data)\n{\n    if (*(int *)(data + 0x18) == 0)\n    {\n        int global_impure_ptr = *(int *)PTR__global_impure_ptr_080053f8;\n        bool is_global_impure_ptr = (data == global_impure_ptr);\n        if (is_global_impure_ptr)\n        {\n            *(int *)(data + 0x18) = 1;\n        }\n        *(int *)(data + 0x48) = 0;\n        *(int *)(data + 0x4c) = 0;\n        *(int *)(data + 0x50) = 0;\n        *(int *)(data + 0x28) = DAT_080053fc;\n        int sfp1 = __sfp();\n        int sfp2 = __sfp(data);\n        int sfp3 = __sfp(data);\n        std_isra_0(sfp1, 4, 0);\n        std_isra_0(sfp2, 9, 1);\n        std_isra_0(sfp3, 0x12, 2);\n        *(int *)(data + 0x18) = 1;\n    }\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "__swbuf_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "_fflush_r",
                "__sfp",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_08003918": {
            "renaming": {
                "FUN_08003918": "handle_i2c_event_interrupt_08003918",
                "PTR_i2c_handles_08003924": "i2c_handles"
            },
            "code": "void handle_i2c_event_interrupt_08003918(void)\n{\n  HAL_I2C_EV_IRQHandler(*(I2C_HandleTypeDef **)PTR_i2c_handles_08003924);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003918",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08003918"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nHAL_StatusTypeDef FUNC_0800201c(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_080022d0;\n  if (RCC_OscInitStruct == (RCC_OscInitTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar3 = HAL_GetTick();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_080022d4 = 0;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022d0 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_080022d8 = 0;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      uVar3 = HAL_GetTick();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar3 = HAL_GetTick();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    HVar2 = HAL_OK;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    HVar2 = HAL_ERROR;\n  }\n  else if (uVar3 == 2) {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLM |\n             (RCC_OscInitStruct->PLL).PLLN << 6 |\n             (((RCC_OscInitStruct->PLL).PLLP >> 1) - 1) * 0x10000 |\n             (RCC_OscInitStruct->PLL).PLLQ << 0x18;\n        *DAT_080023b0 = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    HVar2 = HAL_TIMEOUT;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_channel_state_080028d4",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "new_state",
                "CCER": "channel_capture_enable_register",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_channel_state_080028d4(TIM_TypeDef *timer, uint32_t channel, uint32_t new_state) {\n    uint32_t mask = ~(4 << (channel & 0xff));\n    uint32_t shifted_state = new_state << (channel & 0xff);\n    timer->CCER = (timer->CCER & mask) | shifted_state;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "set_channel_state_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "send_data_via_uart_080040ec",
                "file_UNUSED": "file_unused",
                "ptr": "data_ptr",
                "len": "data_len",
                "sVar1": "data_size"
            },
            "code": "uint32_t send_data_via_uart_080040ec(int file_unused, char *data_ptr, int data_len) {\n  size_t data_size;\n  data_size = uart_debug_send_data((uint8_t *)data_ptr, data_len);\n  return data_size;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_data_via_uart_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "i2c_slave_tx_08001460",
                "hi2c": "i2c_handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "xfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef i2c_slave_tx_08001460(I2C_HandleTypeDef *i2c_handle,uint8_t *data,uint16_t size,uint32_t xfer_options)\n{\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmpreg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 = i2c_instance->CR1 | 1;\n      }\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = xfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "i2c_slave_tx_08001460"
        },
        "FUN_08004298": {
            "renaming": {
                "FUN_08004298": "waitForTransmissionCompletion_08004298",
                "this": "serial",
                "_written": "hasDataToTransmit",
                "_serial": "transmissionState",
                "tx_head": "transmitHead",
                "tx_tail": "transmitTail"
            },
            "code": "void __thiscall HardwareSerial::waitForTransmissionCompletion_08004298(HardwareSerial *serial) {\n  if (serial->hasDataToTransmit()) {\n    do {\n    } while (serial->isTransmitting());\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004298",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmissionCompletion_08004298"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "i2c_transfer_08003880",
                "hi2c": "handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "tx_rx_buffer",
                "_func_void": "_func_void",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT": "HAL_I2C_Slave_Sequential_Receive_IT",
                "ushort": "ushort"
            },
            "code": "void i2c_transfer_08003880(I2C_HandleTypeDef *handle, uint8_t transfer_direction, uint16_t address_match_code) {\\n  i2c_t *i2c_obj = get_i2c_object(handle);\\n  if ((uint)address_match_code == (handle->Init).OwnAddress1) {\\n    if (transfer_direction == \"\\0\") {\\n      i2c_obj->tx_rx_buffer_size = \"\\0\";\\n      i2c_obj->slave_mode = \"\\0\";\\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\\n        (*i2c_obj->on_slave_transmit)();\\n      }\\n      HAL_I2C_Slave_Sequential_Transmit_IT(handle, i2c_obj->tx_rx_buffer, (ushort)i2c_obj->tx_rx_buffer_size, 8);\\n      return;\\n    }\\n    i2c_obj->slave_mode = \"\\x01\";\\n    HAL_I2C_Slave_Sequential_Receive_IT(handle, i2c_obj->tx_rx_buffer, 0x20, 8);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08003880"
        },
        "FUN_08003fd4": {
            "renaming": {
                "FUN_08003fd4": "handle_UART_interrupt_08003fd4",
                "HAL_NVIC_ClearPendingIRQ": "clear_UART_interrupt",
                "HAL_UART_IRQHandler": "handle_UART_event",
                "USART1_IRQn": "uart_interrupt_num",
                "PTR_uart_handlers_08003fe8": "uart_handlers"
            },
            "code": "void handle_UART_interrupt_08003fd4(void)\n{\n  clear_UART_interrupt();\n  handle_UART_event(*PTR_uart_handlers_08003fe8);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd4",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08003fd4"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "resetUartState_08002f4c",
                "huart": "uart",
                "Instance": "instance",
                "CR1": "controlRegister1",
                "gState": "globalState",
                "HAL_UART_STATE_READY": "UART_STATE_READY",
                "HAL_UART_TxCpltCallback": "UART_TxCpltCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef resetUartState_08002f4c(UART_HandleTypeDef *uart)\n{\n  uart->Instance->CR1 &= ~(1 << 6);\n  uart->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "resetUartState_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "initialize_device_080035bc",
                "puVar1": "device_config",
                "DAT_080035f0": "device_config_ptr",
                "DAT_080035f4": "device_config_1",
                "DAT_080035f8": "device_config_2"
            },
            "code": "void initialize_device_080035bc(void)\n{\n  uint32_t *device_config;\n  device_config = DAT_080035f0;\n  *device_config = *device_config | 0x1;\n  device_config[2] = 0;\n  *device_config = *device_config & 0xfef6ffff;\n  device_config[1] = DAT_080035f4;\n  *device_config = *device_config & 0xfffbffff;\n  device_config[3] = 0;\n  *(uint32_t *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_device_080035bc"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_modbus_slave_08000c4c",
                "PTR_slave_08000c60": "slave_modbus_ptr",
                "startForkserver": "start_forkserver",
                "Modbus::begin": "Modbus::begin"
            },
            "code": "void initialize_modbus_slave_08000c4c(void)\n{\n  start_forkserver(0);\n  Modbus::begin((Modbus *)PTR_slave_08000c60,0x4b00);\n  return;\n}",
            "called": [
                "begin",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_modbus_slave_08000c4c"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec",
                "uVar1": "HCLK_frequency",
                "DAT_08002604": "data_08002604",
                "PTR_APBPrescTable_08002608": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler_ratio": "APB_prescaler_ratio",
                "HCLK_frequency_divided_by_APB_prescaler": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_080025ec(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint32_t APB_prescaler_ratio = PTR_APBPrescTable_08002608[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_ratio;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_080025ec"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "handle_timer_interrupt_080037fc",
                "PTR_timer_handles_0800380c": "PTR_timer_handles",
                "TIM_HandleTypeDef": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_080037fc(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_0800380c_0800380c + 0x18);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037fc"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "write_to_stream_08004a60",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar2": "buffer_end",
                "iVar1": "result",
                "iVar3": "bytes_written"
            },
            "code": "int write_to_stream_08004a60(int file_descriptor, FILE *stream, void *buffer, int buffer_size) {\n  int bytes_written = 0;\n  void *buffer_end = buffer + buffer_size;\n  while (buffer != buffer_end) {\n    if (buffer == buffer_end) {\n      return 0;\n    }\n    int result = __sfputc_r(file_descriptor, *buffer, stream, buffer_size, bytes_written);\n    buffer_size = result + 1;\n    buffer++;\n  }\n  return result;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "streamStatusCheck_080050d0",
                "param_1": "status",
                "param_2": "stream",
                "uVar1": "streamStatusValue",
                "uVar2": "streamStatus",
                "iVar3": "impurePtr",
                "__sinit": "streamInit",
                "PTR__impure_ptr_0800519c": "impurePtrPtr",
                "PTR___sf_fake_stdin_080051a0": "fakeStdinPtr",
                "PTR___sf_fake_stdout_080051a4": "fakeStdoutPtr",
                "PTR___sf_fake_stderr_080051a8": "fakeStderrPtr"
            },
            "code": "uint streamStatusCheck_080050d0(uint *status, uint *stream)\n{\n  uint streamStatus = *(ushort *)(stream + 3);\n  uint streamStatusValue = (uint)streamStatus;\n  if (-1 < (int)(streamStatusValue << 0x1c)) {\n    if (-1 < (int)(streamStatusValue << 0x1b)) {\n      *status = 9;\n      goto LAB_08005100;\n    }\n    if ((uint)(streamStatusValue << 0x1d) < 0) {\n      if ((uint *)stream[0xd] != (uint *)0x0) {\n        if ((uint *)stream[0xd] != stream + 0x11) {\n          free(status);\n        }\n        stream[0xd] = 0;\n      }\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) & 0xffdb;\n      stream[1] = 0;\n      *stream = stream[4];\n    }\n    *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 8;\n  }\n  if ((stream[4] == 0) && ((streamStatus & 0x280) != 0x200)) {\n    __smakebuf_r(status, stream);\n  }\n  streamStatus = *(ushort *)(stream + 3);\n  streamStatusValue = streamStatus & 1;\n  if ((streamStatus & 1) == 0) {\n    if (-1 < (int)((uint)streamStatus << 0x1e)) {\n      streamStatusValue = stream[5];\n    }\n    stream[2] = streamStatusValue;\n  }\n  else {\n    stream[2] = 0;\n    stream[6] = -stream[5];\n  }\n  if (stream[4] == 0) {\n    streamStatus = *(ushort *)(stream + 3);\n    streamStatusValue = (int)(short)streamStatus & 0x80;\n    if (streamStatusValue != 0) {\n      *(ushort *)(stream + 3) = streamStatus | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    streamStatusValue = 0;\n  }\n  return streamStatusValue;\n}",
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "streamStatusCheck_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "allocation_status",
                "param_2": "requested_size",
                "puVar1": "current_brk",
                "uVar2": "new_brk",
                "puVar3": "current_free_list",
                "iVar4": "remaining_space",
                "uVar5": "remaining_size",
                "puVar6": "previous_free_list",
                "puVar7": "current_free_list",
                "uVar8": "aligned_requested_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *allocation_status, uint requested_size)\n{\n  uint aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_requested_size < 0xc) {\n    aligned_requested_size = 0xc;\n  }\n  if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n    *allocation_status = 0xc;\n  }\n  else {\n    __malloc_lock();\n    void *current_brk = PTR___malloc_sbrk_start_08004a30;\n    uint *current_free_list = *(uint **)PTR___malloc_free_list_08004a2c;\n    uint *previous_free_list = *(uint **)PTR___malloc_free_list_08004a2c;\n    while (current_free_list != (uint *)0x0) {\n      uint remaining_size = *current_free_list - aligned_requested_size;\n      if (-1 < (int)remaining_size) {\n        if (remaining_size < 0xc) {\n          if (previous_free_list == current_free_list) {\n            aligned_requested_size = previous_free_list[1];\n          }\n          else {\n            aligned_requested_size = current_free_list[1];\n          }\n          if (previous_free_list == current_free_list) {\n            *(uint *)PTR___malloc_free_list_08004a2c = aligned_requested_size;\n            current_free_list = previous_free_list;\n          }\n          else {\n            previous_free_list[1] = aligned_requested_size;\n          }\n        }\n        else {\n          *current_free_list = remaining_size;\n          *(uint *)((int)current_free_list + remaining_size) = aligned_requested_size;\n          current_free_list = (uint *)((int)current_free_list + remaining_size);\n        }\n        goto LAB_080049dc;\n      }\n      previous_free_list = current_free_list;\n      current_free_list = (uint *)current_free_list[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08004a30 == 0) {\n      uint new_brk = _sbrk_r(allocation_status);\n      *(undefined4 *)current_brk = new_brk;\n    }\n    current_free_list = (uint *)_sbrk_r(allocation_status, aligned_requested_size);\n    if ((current_free_list != (uint *)0xffffffff) &&\n       ((previous_free_list = (uint *)((int)current_free_list + 3U & 0xfffffffc), current_free_list == previous_free_list ||\n        (_sbrk_r(allocation_status,(int)previous_free_list - (int)current_free_list) != -1)))) {\n      *previous_free_list = aligned_requested_size;\nLAB_080049dc:\n      __malloc_unlock(allocation_status);\n      uint aligned_current_free_list = (int)previous_free_list + 0xbU & 0xfffffff8;\n      int remaining_space = aligned_current_free_list - (int)(previous_free_list + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_free_list + remaining_space) = -remaining_space;\n        return aligned_current_free_list;\n      }\n      return aligned_current_free_list;\n    }\n    *allocation_status = 0xc;\n    __malloc_unlock(allocation_status);\n  }\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_flag_status_08002d0c",
                "*huart": "*uart_handler",
                "huart": "uart_handler",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "tick_start",
                "Timeout": "timeout",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_flag_status_08002d0c(UART_HandleTypeDef *uart_handler, uint32_t flag, FlagStatus status, uint32_t tick_start, uint32_t timeout) {\n    uint32_t current_tick;\n    while ((timeout == 0xffffffff) || (timeout != 0 && ((current_tick = HAL_GetTick()) - tick_start <= timeout))) {\n        if (((flag & ~uart_handler->Instance->SR) == 0) != (bool)status) {\n            return HAL_OK;\n        }\n    }\n    uart_handler->Instance->CR1 &= 0xfffffe5f;\n    uart_handler->Instance->CR3 &= 0xfffffffe;\n    uart_handler->gState = HAL_UART_STATE_READY;\n    uart_handler->RxState = HAL_UART_STATE_READY;\n    uart_handler->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_flag_status_08002d0c"
        },
        "FUN_0800404c": {
            "renaming": {
                "FUN_0800404c": "handle_UART_interrupt_0800404c",
                "USART6_IRQn": "USART6_Interrupt",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14)": "uart_handler"
            },
            "code": "void handle_UART_interrupt_0800404c(UART_HandleTypeDef **(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14)){\n  HAL_NVIC_ClearPendingIRQ(USART6_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004060 + 0x14));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800404c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_0800404c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "receive_data_from_i2c_08001904",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef receive_data_from_i2c_08001904(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2c_handle->XferCount < 4) {\n      if (i2c_handle->XferCount < 2) {\n        i2c_handle->Instance->CR1 &= ~(1 << 10);\n        i2c_handle->Instance->CR2 &= ~(3 << 9);\n        buffer_pointer = i2c_handle->pBuffPtr;\n        i2c_handle->pBuffPtr = buffer_pointer + 1;\n        *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n        i2c_handle->XferCount = i2c_handle->XferCount - 1;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->PreviousState = 0;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2c_handle);\n        }\n      }\n    }\n    else {\n      buffer_pointer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_pointer + 1;\n      *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n      if (i2c_handle->XferCount == 3) {\n        i2c_handle->Instance->CR2 &= ~(1 << 10);\n      }\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_from_i2c_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "poll_modbus_slave_data_08000c64",
                "PTR_slave_08000c78": "modbus_slave_ptr",
                "PTR_au16data_08000c74": "modbus_data_ptr",
                "\\x10": "16"
            },
            "code": "void poll_modbus_slave_data_08000c64(void)\n{\n    Modbus::poll((Modbus *)PTR_slave_08000c78, (uint16_t *)PTR_au16data_08000c74, 16);\n    return;\n}",
            "called": [
                "poll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "poll_modbus_slave_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_uart_data_08002ffc",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_register",
                "pUVar3": "usart_instance",
                "uVar4": "dma_abort_callback_set",
                "uVar5": "sr_register",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "USART_TypeDef": "USART_TypeDef",
                "uint": "uint32_t",
                "UART_Receive_IT": "UART_Receive_IT",
                "UART_Transmit_IT": "UART_Transmit_IT",
                "UART_EndTransmit_IT": "UART_EndTransmit_IT",
                "huart->Instance": "uart_handle->Instance",
                "huart->ErrorCode": "uart_handle->ErrorCode",
                "huart->hdmarx": "uart_handle->hdmarx",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer": "UART_EndRxTransfer",
                "DMA_HandleTypeDef": "DMA_HandleTypeDef",
                "DAT_08003118": "uart_dma_abort_callback",
                "HAL_DMA_Abort_IT": "HAL_DMA_Abort_IT",
                "HAL_OK": "HAL_OK"
            },
            "code": "void process_uart_data_08002ffc(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr_register;\n  USART_TypeDef *usart_instance;\n  uint32_t cr1_register;\n  uint32_t cr3_register;\n  uint32_t error_code;\n  uint8_t dma_abort_callback_set = 0;\n  usart_instance = uart_handle->Instance;\n  sr_register = usart_instance->SR;\n  cr1_register = usart_instance->CR1;\n  cr3_register = usart_instance->CR3;\n  if ((sr_register & 0x1F) == 0x20 && (cr1_register & 0x20)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n  if ((sr_register & 0xF) == 0 || ((cr3_register & 1) == 0 && (cr1_register & 0x120) == 0)) {\n    if ((sr_register & 0x80) && (cr1_register & 0x80)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if ((sr_register & 0x40) && (cr1_register & 0x40)) {\n      UART_EndTransmit_IT(uart_handle);\n      return;\n    }\n  } else {\n    error_code = 0;\n    if ((sr_register & 0x1) && (cr1_register & 0x100)) {\n      error_code |= 0x1;\n    }\n    if ((sr_register & 0x4) && (cr3_register & 1)) {\n      error_code |= 0x2;\n    }\n    if ((sr_register & 0x2) && (cr3_register & 1)) {\n      error_code |= 0x4;\n    }\n    if ((sr_register & 0x8) && (cr3_register & 1)) {\n      error_code |= 0x8;\n    }\n    if (error_code != 0) {\n      if ((sr_register & 0x20) && (cr1_register & 0x20)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if ((error_code & 0x8) == 0 && (cr3_register & 0x40) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      if ((cr3_register & 0x40) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      cr3_register &= ~0x40;\n      if (uart_handle->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      dma_abort_callback_set = 1;\n      uart_handle->hdmarx->XferAbortCallback = DAT_08003118;\n      status = HAL_DMA_Abort_IT(uart_handle->hdmarx);\n      if (status != HAL_OK) {\n        uart_handle->hdmarx->XferAbortCallback(uart_handle->hdmarx);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "UART_EndRxTransfer",
                "HAL_UART_ErrorCallback",
                "UART_EndTransmit_IT",
                "UART_Transmit_IT",
                "UART_Receive_IT",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [
                "UART4_IRQHandler",
                "USART2_IRQHandler",
                "UART7_IRQHandler",
                "USART3_IRQHandler",
                "USART6_IRQHandler",
                "USART1_IRQHandler",
                "UART5_IRQHandler",
                "UART8_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_uart_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "get_i2c_t_from_i2c_handle_0800387c",
                "hi2c": "i2c_handle"
            },
            "code": "i2c_t * get_i2c_t_from_i2c_handle_0800387c(I2C_HandleTypeDef *i2c_handle)\n{\n    int event_count_offset = -1 * sizeof(i2c_handle->EventCount);\n    return (i2c_t *)((char*)i2c_handle + event_count_offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_t_from_i2c_handle_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_pin_for_peripheral_0800351e",
                "map": "pin_map",
                "PVar1": "pin_name"
            },
            "code": "PinName_conflict find_pin_for_peripheral_0800351e(void *peripheral, PinMap_conflict *pin_map) {\n  PinName_conflict pin_name;\n  if (peripheral != NULL) {\n    pin_name = pinmap_find_pin(peripheral, pin_map);\n    return pin_name;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "find_pin_for_peripheral_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "receiveData_08002f66",
                "huart": "uart",
                "pbVar1": "rxBuffer",
                "uVar2": "remainingData",
                "puVar3": "rxBuffer",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "HAL_UART_STATE_READY": "HAL_OK",
                "HAL_UART_RxCpltCallback": "callback",
                "RxState": "uart->RxState",
                "Init": "uart->Init",
                "WordLength": "(uart->Init).WordLength",
                "Parity": "(uart->Init).Parity",
                "pRxBuffPtr": "uart->pRxBuffPtr",
                "Instance": "uart->Instance",
                "DR": "uart->Instance->DR",
                "RxXferCount": "uart->RxXferCount",
                "CR1": "uart->Instance->CR1",
                "CR3": "uart->Instance->CR3"
            },
            "code": "HAL_StatusTypeDef receiveData_08002f66(UART_HandleTypeDef *uart)\n{\n  uint8_t *rxBuffer;\n  uint16_t remainingData;\n  uint16_t receivedData;\n\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n\n  remainingData = uart->RxXferCount - 1;\n\n  if ((uart->Init).WordLength == 0x1000) {\n    if ((uart->Init).Parity == 0) {\n      receivedData = (uint16_t)((uart->Instance->DR << 0x17) >> 0x17);\n      rxBuffer = (uint8_t *)uart->pRxBuffPtr;\n      *(uint16_t *)rxBuffer = receivedData;\n      uart->pRxBuffPtr += 2;\n    }\n    else {\n      receivedData = (uint16_t)(uart->Instance->DR & 0xff);\n      rxBuffer = (uint8_t *)uart->pRxBuffPtr;\n      *(uint16_t *)rxBuffer = receivedData;\n      uart->pRxBuffPtr += 1;\n    }\n  }\n  else if ((uart->Init).Parity == 0) {\n    receivedData = (uint16_t)(uart->Instance->DR & 0xff);\n    rxBuffer = (uint8_t *)uart->pRxBuffPtr;\n    *rxBuffer = (uint8_t)receivedData;\n    uart->pRxBuffPtr += 1;\n  }\n  else {\n    receivedData = (uint16_t)(uart->Instance->DR & 0x7f);\n    rxBuffer = (uint8_t *)uart->pRxBuffPtr;\n    *rxBuffer = (uint8_t)receivedData;\n    uart->pRxBuffPtr += 1;\n  }\n\n  if (remainingData != 0) {\n    return HAL_OK;\n  }\n\n  uart->Instance->CR1 &= 0xfffffedf;\n  uart->Instance->CR3 &= 0xfffffffe;\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receiveData_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_gpio_pin_state_080034b6",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "val": "gpio_pin_state",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "HAL_GPIO_WritePin": "HAL_GPIO_WritePin",
                "GPIO_PIN_RESET": "GPIO_PIN_RESET",
                "GPIO_PIN_SET": "GPIO_PIN_SET"
            },
            "code": "void set_gpio_pin_state_080034b6(GPIO_TypeDef *gpio_port, uint32_t gpio_pin, uint32_t gpio_pin_state) {\n  if (gpio_pin_state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)gpio_pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "setup_serial_communication_08003eac",
                "obj": "serial_object",
                "callback": "callback_function",
                "bVar1": "index",
                "PTR_tx_callback_08003ef4": "tx_callback_ptr",
                "PTR_tx_callback_obj_08003ef8": "tx_callback_obj_ptr",
                "PTR_uart_handlers_08003efc": "uart_handler_ptr"
            },
            "code": "void setup_serial_communication_08003eac(serial_t *serial_object, _func_int_serial_t_ptr *callback_function) {\n  if (serial_object != NULL) {\n    uint8_t index = serial_object->index;\n    _func_int_serial_t_ptr **PTR_tx_callback_08003ef4 = (PTR_tx_callback_08003ef4 + (uint32_t)index * 4);\n    *PTR_tx_callback_08003ef4 = callback_function;\n    serial_t **PTR_tx_callback_obj_08003ef8 = (PTR_tx_callback_obj_08003ef8 + (uint32_t)index * 4);\n    *PTR_tx_callback_obj_08003ef8 = serial_object;\n    HAL_NVIC_SetPriority(serial_object->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_object->irq);\n    UART_HandleTypeDef **PTR_uart_handlers_08003efc = (PTR_uart_handlers_08003efc + (uint32_t)index * 4);\n    HAL_UART_Transmit_IT(*PTR_uart_handlers_08003efc, serial_object->tx_buff + serial_object->tx_tail, 1);\n  }\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setup_serial_communication_08003eac"
        },
        "FUN_08004064": {
            "renaming": {
                "FUN_08004064": "handle_UART7_interrupt_08004064",
                "UART7_IRQn": "uart_7_interrupt",
                "PTR_uart_handlers_08004078": "uart_handlers_ptr"
            },
            "code": "void handle_UART7_interrupt_08004064(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART7_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004078 + 0x18);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004064",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART7_interrupt_08004064"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "read_serial_data_08003e18",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "rx_active",
                "PTR_uart_handlers_08003e50": "PTR_uart_handlers",
                "DAT_08003e54": "DAT_08003e54"
            },
            "code": "int read_serial_data_08003e18(serial_t *serial_obj, uchar *received_char) {\\n  uint8_t rx_active;\\n  if (serial_obj == (serial_t *)0x0) {\\n    return -1;\\n  }\\n  rx_active = serial_rx_active(serial_obj);\\n  if (rx_active == \"\\0\") {\\n    *received_char = serial_obj->recv;\\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003e50_08003e50 + (uint)serial_obj->index * 4), &serial_obj->recv,1);\\n    return 0;\\n  }\\n  return -1;\\n}",
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "read_serial_data_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_errno_080040fc",
                "pid_UNUSED": "pid",
                "sig_UNUSED": "sig",
                "PTR_errno_08004108": "PTR_errno"
            },
            "code": "int set_errno_080040fc(int pid, int sig) {\n  *(undefined4 *)PTR_errno_08004108_08004108 = 0x16;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "transmit_data_08002dd0",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef transmit_data_08002dd0(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  \n  if (huart->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  \n  if (data == NULL || size == 0 || huart->Lock == HAL_LOCKED) {\n    return HAL_ERROR;\n  }\n  \n  huart->Lock = HAL_LOCKED;\n  huart->ErrorCode = 0;\n  huart->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n  huart->TxXferSize = size;\n  huart->TxXferCount = size;\n  \n  while (huart->TxXferCount != 0) {\n    huart->TxXferCount--;\n    if ((huart->Init).WordLength == UART_WORDLENGTH_9B) {\n      status = UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      huart->Instance->DR = *(uint16_t *)data & 0x1FF;\n      if ((huart->Init).Parity == UART_PARITY_NONE) {\n        data += 2;\n      }\n      else {\n        data++;\n      }\n    }\n    else {\n      status = UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      huart->Instance->DR = (uint32_t)*data;\n      data++;\n    }\n  }\n  \n  status = UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, start_time, timeout);\n  huart->gState = HAL_UART_STATE_READY;\n  huart->Lock = HAL_UNLOCKED;\n  \n  if (status != HAL_OK) {\n    return HAL_TIMEOUT;\n  }\n  \n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "transmit_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "convertFormatAndPrint_08004860",
                "__stream": "file",
                "__format": "format",
                "iVar1": "result",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "uStack_8": "args",
                "uStack_4": "stream",
                "PTR__impure_ptr_08004880": "PTR__impure_ptr_08004880"
            },
            "code": "int convertFormatAndPrint_08004860(FILE* file, char* format, ...)\n{\n    int result;\n    va_list args;\n    va_start(args, format);\n    result = vfprintf(file, format, args);\n    va_end(args);\n    return result;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "convertFormatAndPrint_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "__thiscall Print::FUN_08004622": "printNumber",
                "this": "print",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08004622": "printNumber_08004622"
            },
            "code": "size_t Print::printNumber_08004622(Print *print, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = printNumber_08004622(print, number, (uint8_t)base);\n    return size;\n  }\n  size = (**print->_vptr_Print)(print, number & 0xff);\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "stop_pwm_signal_08003414",
                "pin": "pin_name",
                "Channel": "channel_number",
                "uVar1": "pin_function_value",
                "timHandle": "timer_handle"
            },
            "code": "void stop_pwm_signal_08003414(PinName_conflict pin)\n{\n  uint32_t channel_number;\n  uint32_t pin_function_value;\n  TIM_HandleTypeDef timer_handle;\n  \n  timer_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_PWM_08003468);\n  if ((timer_handle.Instance != (TIM_TypeDef *)0x0) && (((channel_number = get_pwm_channel(pin), channel_number == 0 || (channel_number == 4)) || (channel_number == 8)) || ((channel_number == 0xc || (channel_number == 0x18)))))\n  {\n    pin_function_value = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_08003468);\n    if ((pin_function_value & 0x100000) == 0)\n    {\n      HAL_TIM_PWM_Stop(&timer_handle,channel_number);\n    }\n    else\n    {\n      HAL_TIMEx_PWMN_Stop(&timer_handle,channel_number);\n    }\n    HAL_TIM_PWM_DeInit(&timer_handle);\n  }\n  return;\n}",
            "called": [
                "get_pwm_channel",
                "HAL_TIM_PWM_DeInit",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "seek_file_08005718",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08005718(int *error_code, int file_descriptor, int offset, int whence) {\n  int seek_result;\n  int *error_ptr = PTR_errno_08005738;\n  *error_ptr = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if (seek_result == -1 && *error_ptr != 0) {\n    *error_code = *error_ptr;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "i2c_addressing_080011c0",
                "hi2c": "i2c_handle",
                "Mode": "mode",
                "EventCount": "event_count",
                "Instance": "instance",
                "DR": "device_register",
                "Devaddress": "device_address",
                "Init": "init_handle",
                "AddressingMode": "addressing_mode",
                "State": "state"
            },
            "code": "HAL_StatusTypeDef i2c_addressing_080011c0(I2C_HandleTypeDef *i2c_handle)\n{\n    uint16_t addressing_mode = (i2c_handle->Init).AddressingMode;\n    uint16_t event_count = i2c_handle->EventCount;\n    uint16_t device_address = i2c_handle->Devaddress;\n    uint16_t device_register = 0;\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        device_register = (event_count == 0) ? (device_address & 0xfe) : (device_address & 0xff | 1);\n    }\n    else if (addressing_mode == 0x4000) {\n        device_register = (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) ? (device_address & 0xfe) : (device_address & 0xff | 1);\n    }\n    else if (event_count == 0) {\n        device_register = ((device_address << 0x10) >> 0x17 & 6) | 0xf0;\n    }\n    else if (event_count == 1) {\n        device_register = ((device_address << 0x10) >> 0x17 & 6) | 0xf1;\n    }\n    i2c_handle->Instance->DR = device_register;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_addressing_080011c0"
        },
        "FUN_080047f0": {
            "renaming": {
                "FUN_080047f0": "initialize_static_variables_080047f0"
            },
            "code": "void initialize_static_variables_080047f0(void)\n{\n    __static_initialization_and_destruction_0(1,0xffff);\n    return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080047f0"
        },
        "FUN_0800502c": {
            "renaming": {
                "FUN_0800502c": "send_char_to_stream_0800502c",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "uVar2": "short_value",
                "puVar3": "buffer_pointer"
            },
            "code": "uint send_char_to_stream_0800502c(int stream, uint character, int *buffer, undefined4 buffer_size)\n{\n  int status;\n  uint short_value;\n  undefined *buffer_pointer;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize_stream();\n  }\n  \n  if (buffer == (int *)DAT___sf_fake_stdin_080050c4) {\n    buffer = *(int **)(stream + 4);\n  }\n  else if (buffer == (int *)DAT___sf_fake_stdout_080050c8) {\n    buffer = *(int **)(stream + 8);\n  }\n  else if (buffer == (int *)DAT___sf_fake_stderr_080050cc) {\n    buffer = *(int **)(stream + 0xc);\n  }\n  \n  buffer[2] = buffer[6];\n  short_value = (uint)*(ushort *)(buffer + 3);\n  status = short_value << 0x1c;\n  \n  if (((status < 0) && (short_value = buffer[4], short_value != 0)) ||\n     (status = setup_stream(stream, buffer, status, short_value, buffer_size), status == 0)) {\n    status = *buffer - buffer[4];\n    character = character & 0xff;\n    if ((status < buffer[5]) || (status = flush_stream(stream, buffer), status == 0)) {\n      buffer[2] = buffer[2] + -1;\n      buffer_pointer = (undefined *)*buffer;\n      *buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (status + 1 != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      status = flush_stream(stream, buffer);\n      if (status == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800502c",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "send_char_to_stream_0800502c"
        },
        "FUN_08000b54": {
            "renaming": {
                "__thiscall Modbus::FUN_08000b54": "process_Modbus_request",
                "this": "modbus",
                "regs": "registers",
                "u8size": "register_size",
                "uVar1": "receive_buffer",
                "u8exception": "exception_code",
                "uVar2": "port_data",
                "uVar3": "current_time",
                "unaff_r5": "port_data",
                "FUN_08000b54": "process_Modbus_request_08000b54"
            },
            "code": "int8_t __thiscall process_Modbus_request_08000b54(Modbus *modbus, uint16_t *registers, uint8_t register_size) {\n    uint8_t exception_code;\n    uint8_t receive_buffer;\n    uint32_t current_time;\n    uint port_data;\n\n    modbus->registers = registers;\n    modbus->register_size = register_size;\n\n    if (modbus->serial_number < 4) {\n        port_data = (*(modbus->port->super_Stream).super_Print._vptr_Print[2])();\n        port_data &= 0xff;\n    }\n\n    if (port_data == 0 || (int)port_data < 8) {\n        receive_buffer = 0;\n    }\n    else {\n        receive_buffer = get_receive_buffer(modbus);\n        modbus->last_error = receive_buffer;\n\n        if (modbus->buffer[0] == modbus->id) {\n            exception_code = validate_request(modbus);\n\n            if (exception_code == 0) {\n                current_time = millis();\n                modbus->timeout = modbus->time_out + current_time;\n                modbus->last_error = 0;\n                switch (modbus->buffer[1]) {\n                    case 0x01:\n                    case 0x02:\n                        receive_buffer = process_FC1(modbus, registers, register_size);\n                        break;\n                    case 0x03:\n                    case 0x04:\n                        receive_buffer = process_FC3(modbus, registers, register_size);\n                        break;\n                    case 0x05:\n                        receive_buffer = process_FC5(modbus, registers, register_size);\n                        break;\n                    case 0x06:\n                        receive_buffer = process_FC6(modbus, registers, register_size);\n                        break;\n                    case 0x0f:\n                        receive_buffer = process_FC15(modbus, registers, register_size);\n                        break;\n                    case 0x10:\n                        receive_buffer = process_FC16(modbus, registers, register_size);\n                        break;\n                }\n            }\n            else {\n                if (exception_code != 0xff) {\n                    build_exception(modbus, exception_code);\n                    send_transmit_buffer(modbus);\n                }\n                modbus->last_error = exception_code;\n                receive_buffer = exception_code;\n            }\n        }\n        else {\n            receive_buffer = 0;\n        }\n    }\n    return receive_buffer;\n}",
            "called": [
                "process_FC5",
                "getRxBuffer",
                "validateRequest",
                "process_FC3",
                "millis",
                "sendTxBuffer",
                "process_FC1",
                "buildException",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "process_Modbus_request_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "handle_timer_interrupt_0800376e",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_0800376e(TIM_HandleTypeDef *timer_handle){\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "configureSysTick_08000d98",
                "TickPriority": "tickPriority",
                "uVar1": "systickStatus",
                "PTR_SystemCoreClock_08000ddc": "clockFrequency",
                "PTR_uwTickFreq_08000dd8": "tickFrequency",
                "systickConfig": "systickConfig",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "SysTick_IRQn": "SysTick_IRQn",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "PTR_uwTickPrio_08000de0": "PTR_uwTickPrio_08000de0",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08000d98(uint32_t tickPriority)\n{\n    uint32_t PTR_SystemCoreClock_08000ddc = *(uint *)PTR_SystemCoreClock_08000ddc;\n    uint32_t PTR_uwTickFreq_08000dd8 = *(byte *)PTR_uwTickFreq_08000dd8;\n    uint32_t systickConfig = PTR_SystemCoreClock_08000ddc / (1000 / PTR_uwTickFreq_08000dd8);\n    uint32_t systickStatus = HAL_SYSTICK_Config(systickConfig);\n\n    if (systickStatus != 0 || tickPriority > 0xF) {\n        return HAL_ERROR;\n    }\n\n    HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n    *(uint32_t *)PTR_uwTickPrio_08000de0 = tickPriority;\n\n    return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "transmit_data_over_uart_08003f48",
                "huart": "uart_handler",
                "bVar1": "uart_index_value",
                "uVar2": "index",
                "iVar4": "callback_obj_index",
                "iVar3": "callback_result"
            },
            "code": "void transmit_data_over_uart_08003f48(UART_HandleTypeDef *uart_handler)\n{\n  byte uart_index_value;\n  int callback_obj_index;\n  int callback_result;\n  uint index;\n  \n  uart_index_value = get_uart_index(uart_handler);\n  index = (uint)uart_index_value;\n  callback_obj_index = *(int *)(PTR_tx_callback_obj_08003f88 + index * 4);\n  if ((index < 10) &&\n     (callback_result = (**(code **)(PTR_tx_callback_08003f8c + index * 4))(callback_obj_index), callback_result != -1)) {\n    HAL_UART_Transmit_IT\n              (*(UART_HandleTypeDef **)\n                (PTR_uart_handlers_08003f90 + (uint)*(byte *)(callback_obj_index + 0x44) * 4),\n               (uint8_t *)(*(int *)(callback_obj_index + 0x68) + (uint)*(ushort *)(callback_obj_index + 0x6e)),1);\n  }\n  return;\n}",
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_over_uart_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_0800340c(TIM_HandleTypeDef *timer_handle) {\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_pin_function_0800352e",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_0800352e(PinName_conflict target_pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == target_pin) break;\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800352e"
        },
        "FUN_0800582c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800582c": "set_ctype_flags",
                "FUN_0800582c": "set_ctype_flags_0800582c"
            },
            "code": "void set_ctype_flags_0800582c() {\n  if (*(int *)PTR_id_080058c0 < 0) {\n    *(undefined4 *)PTR_id_080058c0 = 1;\n  }\n  if (*(int *)PTR_id_080058c4 < 0) {\n    *(undefined4 *)PTR_id_080058c4 = 1;\n  }\n  if (*(int *)PTR_id_080058c8 < 0) {\n    *(undefined4 *)PTR_id_080058c8 = 1;\n  }\n  if (*(int *)PTR_id_080058cc < 0) {\n    *(undefined4 *)PTR_id_080058cc = 1;\n  }\n  if (*(int *)PTR_id_080058d0 < 0) {\n    *(undefined4 *)PTR_id_080058d0 = 1;\n  }\n  if (*(int *)PTR_id_080058d4 < 0) {\n    *(undefined4 *)PTR_id_080058d4 = 1;\n  }\n  if (*(int *)PTR_id_080058d8 < 0) {\n    *(undefined4 *)PTR_id_080058d8 = 1;\n  }\n  if (*(int *)PTR_id_080058dc < 0) {\n    *(undefined4 *)PTR_id_080058dc = 1;\n  }\n  if (*(int *)PTR_id_080058e0 < 0) {\n    *(undefined4 *)PTR_id_080058e0 = 1;\n  }\n  if (*(int *)PTR_id_080058e4 < 0) {\n    *(undefined4 *)PTR_id_080058e4 = 1;\n  }\n  if (*(int *)PTR_id_080058e8 < 0) {\n    *(undefined4 *)PTR_id_080058e8 = 1;\n  }\n  if (*(int *)PTR_id_080058ec < 0) {\n    *(undefined4 *)PTR_id_080058ec = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800582c",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_0800582c"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "i2c_handle_08001ab0",
                "*hi2c": "*handle",
                "HVar1": "status",
                "*puVar2": "*buffer",
                "*pIVar3": "*instance"
            },
            "code": "void i2c_handle_08001ab0(I2C_HandleTypeDef *handle)\n{\n    HAL_StatusTypeDef status;\n    uint8_t *buffer;\n    I2C_TypeDef *instance;\n    if ((byte)handle->State - 0x29 < 2) {\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_LISTEN;\n    }\n    else {\n        if ((handle->State != HAL_I2C_STATE_ABORT) && ((handle->Instance->CR2 & 0x800) == 0)) {\n            handle->State = HAL_I2C_STATE_READY;\n        }\n        handle->PreviousState = 0;\n        handle->Mode = HAL_I2C_MODE_NONE;\n    }\n    handle->Instance->CR1 = handle->Instance->CR1 & 0xfffff7ff;\n    instance = handle->Instance;\n    if ((instance->CR2 & 0x800) == 0) {\n        if (handle->State == HAL_I2C_STATE_ABORT) {\n            handle->State = HAL_I2C_STATE_READY;\n            handle->ErrorCode = 0;\n            if ((instance->SR1 & 0x40) != 0) {\n                buffer = handle->pBuffPtr;\n                handle->pBuffPtr = buffer + 1;\n                *buffer = (uint8_t)instance->DR;\n            }\n            handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n            HAL_I2C_AbortCpltCallback(handle);\n        }\n        else {\n            if ((instance->SR1 & 0x40) != 0) {\n                buffer = handle->pBuffPtr;\n                handle->pBuffPtr = buffer + 1;\n                *buffer = (uint8_t)instance->DR;\n            }\n            HAL_I2C_ErrorCallback(handle);\n        }\n    }\n    else {\n        instance->CR2 = instance->CR2 & 0xfffff7ff;\n        if (handle->hdmatx->State == HAL_DMA_STATE_READY) {\n            handle->hdmarx->XferAbortCallback = handle->hdmatx->XferAbortCallback;\n            status = HAL_DMA_Abort_IT(handle->hdmarx);\n            if (status != HAL_OK) {\n                if ((handle->Instance->SR1 & 0x40) != 0) {\n                    buffer = handle->pBuffPtr;\n                    handle->pBuffPtr = buffer + 1;\n                    *buffer = (uint8_t)handle->Instance->DR;\n                }\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n                handle->State = HAL_I2C_STATE_READY;\n                (*handle->hdmarx->XferAbortCallback)(handle->hdmarx);\n            }\n        }\n        else {\n            handle->hdmatx->XferAbortCallback = handle->hdmatx->XferAbortCallback;\n            status = HAL_DMA_Abort_IT(handle->hdmatx);\n            if (status != HAL_OK) {\n                handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffffe;\n                handle->State = HAL_I2C_STATE_READY;\n                (*handle->hdmatx->XferAbortCallback)(handle->hdmatx);\n            }\n        }\n    }\n    if ((handle->State == HAL_I2C_STATE_LISTEN) && ((handle->ErrorCode & 4) != 0)) {\n        handle->XferOptions = handle->XferOptions;\n        handle->PreviousState = 0;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(handle);\n    }\n    return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "I2C_Slave_STOPF",
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "wait_for_flag_08001f9c",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "tmpreg": "control_mask",
                "DAT_0800200c": "ptr_control_register",
                "DAT_08002010": "ptr_status_register",
                "DAT_08002014": "ptr_flag_register",
                "DAT_08002018": "ptr_acknowledge_register"
            },
            "code": "HAL_StatusTypeDef wait_for_flag_08001f9c(void)\n{\n  uint32_t start_time = HAL_GetTick();\n  uint32_t current_time;\n  uint32_t* DAT_08002014 = (uint32_t*)(DAT_08002014 + 4);\n  uint32_t flag_mask = 0x20000;\n  uint32_t* DAT_0800200c = (uint32_t*)(DAT_0800200c + 0x40);\n  uint32_t control_mask = 0x10000000;\n  *DAT_0800200c |= control_mask;\n  *DAT_08002010 = 1;\n  while (1) {\n    if ((*DAT_08002014 & flag_mask) != 0) {\n      return HAL_OK;\n    }\n    current_time = HAL_GetTick();\n    if (current_time - start_time >= 1000) {\n      return HAL_TIMEOUT;\n    }\n  }\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "wait_for_flag_08001f9c"
        },
        "FUN_08000d8c": {
            "renaming": {
                "FUN_08000d8c": "wait_forever_08000d8c"
            },
            "code": "void wait_forever_08000d8c(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "CAN2_SCE_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8c",
            "calling": [
                "CAN2_SCE_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08000d8c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_EVP_PKEY_CTX_08000d8e",
                "ctx": "context",
                "hw_config_FUN_08000d8e": "configure_hardware"
            },
            "code": "int initialize_EVP_PKEY_CTX_08000d8e(EVP_PKEY_CTX *context) {\n  configure_hardware();\n  return (int)context;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "print_08004638",
                "this": "print_obj",
                "b": "byte_val",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t Print::print_08004638(Print *print_08004638_obj, uchar byte_val, int base)\n{\n  size_t result;\n  result = print_08004638(print_08004638_obj, (uint)byte_val, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08004638"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "get_process_id_08005604",
                "__pid_t": "int"
            },
            "code": "\n\nint get_process_id_08005604(void)\n{\n    int process_id = 1;\n    return process_id;\n}\n",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005604"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "modbus_update_response_080008cc",
                "this": "modbus",
                "u8exception": "exception_code",
                "byte": "uint8_t",
                "bVar1": "buffer_copy",
                "au8Buffer": "buffer",
                "u8id": "id",
                "u8BufferSize": "buffer_size"
            },
            "code": "void __thiscall modbus_update_response_080008cc(Modbus *modbus, uint8_t exception_code) {\n    byte buffer_copy = modbus->buffer[1];\n    modbus->buffer[0] = modbus->id;\n    modbus->buffer[1] = buffer_copy ^ 0x80;\n    modbus->buffer[2] = exception_code;\n    modbus->buffer_size = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "modbus_update_response_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_08004ac6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__08004c94,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_08004ca0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_08004ba0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_08004ba0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar1 = false;\n      local_84 = 0;\n      iVar8 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_08004ca0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_08004ca4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "memchr",
                "__swsetup_r",
                "__sfputs_r",
                "_printf_i",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "read_input_and_update_offset_08005608",
                "param_1": "file_descriptor",
                "param_2": "input_address",
                "iVar1": "read_return_val",
                "uVar2": "updated_offset",
                "bVar3": "read_successful"
            },
            "code": "void read_input_and_update_offset_08005608(int file_descriptor, int input_address) {\n  int read_return_val;\n  uint updated_offset;\n  bool read_successful;\n  read_return_val = _read_r(file_descriptor, (int)*(short *)(input_address + 0xe));\n  read_successful = read_return_val >= 0;\n  if (read_successful) {\n    updated_offset = *(int *)(input_address + 0x54) + read_return_val;\n  }\n  else {\n    updated_offset = *(ushort *)(input_address + 0xc) & 0xffffefff;\n  }\n  if (read_successful) {\n    *(uint *)(input_address + 0x54) = updated_offset;\n  }\n  if (!read_successful) {\n    *(short *)(input_address + 0xc) = (short)updated_offset;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "read_input_and_update_offset_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "receive_data_08002efa",
                "*huart": "*uart_handle",
                "huart->RxState": "uart_handle->rx_state",
                "huart->Lock": "uart_handle->lock",
                "huart->pRxBuffPtr": "uart_handle->rx_buff_ptr",
                "huart->RxXferSize": "uart_handle->rx_xfer_size",
                "huart->RxXferCount": "uart_handle->rx_xfer_count",
                "huart->ErrorCode": "uart_handle->error_code",
                "huart->Instance": "uart_handle->instance",
                "pData": "data",
                "Size": "size",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "|": "|=",
                "CR3": "CR3",
                "CR1": "CR1",
                "0x120": "0x120",
                "->": "->"
            },
            "code": "HAL_StatusTypeDef receive_data_08002efa(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size) {\n  if (uart_handle->rx_state != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->lock != HAL_LOCKED) {\n    uart_handle->rx_buff_ptr = data;\n    uart_handle->rx_xfer_size = size;\n    uart_handle->rx_xfer_count = size;\n    uart_handle->error_code = 0;\n    uart_handle->rx_state = HAL_UART_STATE_BUSY_RX;\n    uart_handle->lock = HAL_UNLOCKED;\n    uart_handle->instance->CR3 |= 1;\n    uart_handle->instance->CR1 |= 0x120;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "receive_data_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(RTC_HandleTypeDef *hrtc)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_080058f0": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_080058f0": "set_wchar_t_ctype_flags",
                "PTR_id_08005954": "ptr_1",
                "PTR_id_08005958": "ptr_2",
                "PTR_id_0800595c": "ptr_3",
                "PTR_id_08005960": "ptr_4",
                "PTR_id_08005964": "ptr_5",
                "PTR_id_08005968": "ptr_6",
                "PTR_id_0800596c": "ptr_7",
                "PTR_id_08005970": "ptr_8",
                "FUN_080058f0": "set_wchar_t_ctype_flags_080058f0"
            },
            "code": "void set_wchar_t_ctype_flags_080058f0() {\n  if (*(int *)PTR_id_08005954 < 0) {\n    *(undefined4 *)PTR_id_08005954 = 1;\n  }\n  if (*(int *)PTR_id_08005958 < 0) {\n    *(undefined4 *)PTR_id_08005958 = 1;\n  }\n  if (*(int *)PTR_id_0800595c < 0) {\n    *(undefined4 *)PTR_id_0800595c = 1;\n  }\n  if (*(int *)PTR_id_08005960 < 0) {\n    *(undefined4 *)PTR_id_08005960 = 1;\n  }\n  if (*(int *)PTR_id_08005964 < 0) {\n    *(undefined4 *)PTR_id_08005964 = 1;\n  }\n  if (*(int *)PTR_id_08005968 < 0) {\n    *(undefined4 *)PTR_id_08005968 = 1;\n  }\n  if (*(int *)PTR_id_0800596c < 0) {\n    *(undefined4 *)PTR_id_0800596c = 1;\n  }\n  if (*(int *)PTR_id_08005970 < 0) {\n    *(undefined4 *)PTR_id_08005970 = 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058f0",
            "calling": [],
            "imported": false,
            "current_name": "set_wchar_t_ctype_flags_080058f0"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_080056b4": {
            "renaming": {
                "FUN_080056b4": "close_file_and_set_error_080056b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_080056b4(int *error_code, int file_descriptor) {\n  undefined *errno_ptr;\n  int close_result;\n  errno_ptr = PTR_errno_080056d0;\n  *(undefined4 *)PTR_errno_080056d0 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056b4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_080056b4"
        },
        "FUN_0800450a": {
            "renaming": {
                "FUN_0800450a": "printIPAddress_0800450a",
                "this": "address",
                "p": "printer",
                "sVar1": "bytesPrinted",
                "sVar2": "dotPrinted",
                "iVar3": "i",
                "iVar4": "totalPrintedBytes"
            },
            "code": "size_t __thiscall printIPAddress_0800450a(IPAddress *address, Print *printer) {\n  size_t totalPrintedBytes = 0;\n  for (int i = 0; i < 3; i++) {\n    size_t bytesPrinted = Print::print(printer, (address->_address).bytes[i], 10);\n    size_t dotPrinted = Print::print(printer, '.');\n    totalPrintedBytes += bytesPrinted + dotPrinted;\n  }\n  totalPrintedBytes += Print::print(printer, (address->_address).bytes[3], 10);\n  return totalPrintedBytes;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800450a",
            "calling": [],
            "imported": false,
            "current_name": "printIPAddress_0800450a"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "handle_timer_interrupts_0800377c",
                "PTR_timer_handles_08003794": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "first_timer": "timer1",
                "second_timer": "timer2"
            },
            "code": "void handle_timer_interrupts_0800377c(void)\n{\n  TIM_HandleTypeDef* first_timer = *(TIM_HandleTypeDef**)PTR_timer_handles_08003794_08003794;\n  TIM_HandleTypeDef* second_timer = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003794_08003794 + 0x24);\n  if (first_timer != NULL) {\n    HAL_TIM_IRQHandler(first_timer);\n  }\n  if (second_timer != NULL) {\n    HAL_TIM_IRQHandler(second_timer);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_0800377c"
        },
        "FUN_08003fec": {
            "renaming": {
                "FUN_08003fec": "handle_UART_interrupt_08003fec",
                "USART2_IRQn": "IRQn",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4)": "uart_handler",
                "PTR_uart_handlers_08004000": "uart_handlers"
            },
            "code": "void handle_UART_interrupt_08003fec(UART_HandleTypeDef **(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4))\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_08004000 + 4));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fec",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08003fec"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "resetTimer_0800268e",
                "*htim": "*timer",
                "pTVar1": "instance",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_PWM_MspDeInit": "HAL_TIM_PWM_MspDeInit",
                "HAL_OK": "HAL_OK",
                "CCER": "CCER",
                "CR1": "CR1"
            },
            "code": "HAL_StatusTypeDef resetTimer_0800268e(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *instance;\n  instance = timer->Instance;\n  if (((instance->CCER & 0x1111) == 0) && ((instance->CCER & 0x444) == 0)) {\n    instance->CR1 &= 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "resetTimer_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "decode_registers_080008e2",
                "this": "modbus",
                "regs": "registers",
                "u8size": "num_registers",
                "uVar1": "start_address",
                "uVar2": "num_bits",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "num_bytes",
                "au8Buffer": "buffer",
                "u8BufferSize": "buffer_size",
                "sendTxBuffer": "send_tx_buffer",
                "makeWord": "make_word"
            },
            "code": "int8_t __thiscall Modbus::decode_registers_080008e2(Modbus *modbus,uint16_t *registers,uint8_t num_registers) {\n    uint16_t start_address = makeWord(modbus->buffer[2], modbus->buffer[3]);\n    uint16_t num_bits = makeWord(modbus->buffer[4], modbus->buffer[5]);\n    uint8_t num_bytes = (uint8_t)(((uint)num_bits << 0x15) >> 0x18);\n    if ((num_bits & 7) != 0) {\n        num_bytes++;\n    }\n    modbus->buffer[2] = num_bytes;\n    modbus->buffer_size = 3;\n    uint8_t bit_index = 0;\n    for (uint16_t i = 0; i < num_bits; i++) {\n        uint16_t reg_index = (i + start_address) * 0x100000 >> 0x18;\n        uint8_t bit_value = (registers[reg_index] >> (i + start_address & 0xf) & 1U);\n        if (bit_value == 0) {\n            modbus->buffer[modbus->buffer_size] &= ~(byte)(1 << bit_index);\n        }\n        else {\n            modbus->buffer[modbus->buffer_size] |= (byte)(1 << bit_index);\n        }\n        bit_index++;\n        if (bit_index > 7) {\n            modbus->buffer_size++;\n            bit_index = 0;\n        }\n    }\n    if ((num_bits & 7) != 0) {\n        modbus->buffer_size++;\n    }\n    num_bytes = modbus->buffer_size;\n    send_tx_buffer(modbus);\n    return num_bytes + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decode_registers_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "__thiscall Print::FUN_080045c8": "print_number",
                "this": "this",
                "n": "number",
                "base": "base",
                "cVar1": "digit",
                "sVar2": "length",
                "sVar3": "total_length",
                "uVar4": "remainder",
                "uVar5": "base_uint",
                "uVar6": "quotient",
                "__s": "current_char",
                "buf": "buffer",
                "FUN_080045c8": "print_number_080045c8"
            },
            "code": "size_t __thiscall Print::print_number_080045c8(Print *this, ulong number, uint8_t base) {\n  char digit;\n  size_t length;\n  size_t total_length;\n  uint base_uint = (uint)base;\n  char buffer[33];\n  buffer[32] = '\\0';\n  if (base_uint < 2) {\n    base_uint = 10;\n  }\n  char *current_char = buffer + 0x20;\n  do {\n    uint remainder = number % base_uint;\n    digit = (char)(remainder - ((int)(short)(number / base_uint) * (int)(short)base_uint & 0xffU) & 0xff);\n    current_char--;\n    if (digit < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *current_char = digit;\n    number = number / base_uint;\n  } while (number != 0);\n  if (current_char == (char *)0x0) {\n    total_length = 0;\n  }\n  else {\n    length = strlen(current_char);\n    total_length = (*this->_vptr_Print[1])(length, current_char, length);\n  }\n  return total_length;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "transmit_data_over_uart_08003d18",
                "*data": "data",
                "size": "size",
                "PinName_conflict": "PinName_conflict",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "uint32_t": "uint32_t",
                "void *": "void *",
                "uint": "uint",
                "uVar2": "start_time",
                "pin": "pin_name",
                "HVar1": "status",
                "pvVar3": "peripheral",
                "uVar4": "uVar4",
                "uVar5": "i"
            },
            "code": "size_t transmit_data_over_uart_08003d18(uint8_t *data, uint32_t size)\n{\n  PinName_conflict pin_name;\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  void *peripheral;\n  uint32_t i;\n  \n  start_time = HAL_GetTick();\n  pin_name = *(PinName_conflict *)(PTR_digitalPin_08003dc0 + 0x9a);\n  peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  i = 0;\n  while ((i < 10 && ((*(int *)(PTR_uart_handlers_08003dc8 + i * 4) == 0 || (peripheral = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_08003dc4), **(void ***)(PTR_uart_handlers_08003dc8 + i * 4) != peripheral))))) {\n    i = i + 1 & 0xff;\n  }\n  if (9 < i) {\n    if ((9 < (byte)PTR_serial_debug_08003dcc[0x44]) && (uart_debug_init(), 9 < (byte)PTR_serial_debug_08003dcc[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_serial_debug_08003dcc[0x44];\n  }\n  do {\n    status = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08003dc8 + i * 4), data, (uint16_t)size, 1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n    uVar4 = HAL_GetTick();\n  } while (uVar4 - start_time < 1000);\n  return 0;\n}",
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "transmit_data_over_uart_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "concatenate_bytes_08004640",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_08004640(uint8_t high_byte, uint8_t low_byte) {\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "process_FC5",
                "validateRequest",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_08004640"
        },
        "FUN_08000c7c": {
            "renaming": {
                "FUN_08000c7c": "initialize_static_variables_08000c7c"
            },
            "code": "void initialize_static_variables_08000c7c(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c7c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000c7c"
        },
        "FUN_08004760": {
            "renaming": {
                "FUN_08004760": "handle_external_interrupt_08004760",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void handle_external_interrupt_08004760(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004760",
            "calling": [],
            "imported": false,
            "current_name": "handle_external_interrupt_08004760"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_HAL_and_SystemClock_080034ce",
                "HAL_Init": "initialize_HAL",
                "SystemClock_Config": "configure_SystemClock"
            },
            "code": "void initialize_HAL_and_SystemClock_080034ce(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_SystemClock_080034ce"
        },
        "FUN_08003798": {
            "renaming": {
                "FUN_08003798": "handle_timer_interrupt_08003798",
                "PTR_timer_handles_080037a8": "PTR_timer_handles",
                "current_timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_08003798(void)\n{\n  TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037a8_080037a8 + 4);\n  if (current_timer_handle != NULL) {\n    HAL_TIM_IRQHandler(current_timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003798",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003798"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "register_exit_function_080047fe",
                "param_1": "func_ptr",
                "param_2": "arg"
            },
            "code": "void register_exit_function_080047fe(void (*func_ptr)(void), void *arg){\n  __cxa_atexit(func_ptr, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_080047fe"
        },
        "FUN_08005974": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08005974": "set_ctype_byname_flags",
                "PTR_id_080059d8": "ptr_id_d8",
                "PTR_id_080059dc": "ptr_id_dc",
                "PTR_id_080059e0": "ptr_id_e0",
                "PTR_id_080059e4": "ptr_id_e4",
                "PTR_id_080059e8": "ptr_id_e8",
                "PTR_id_080059ec": "ptr_id_ec",
                "PTR_id_080059f0": "ptr_id_f0",
                "PTR_id_080059f4": "ptr_id_f4",
                "FUN_08005974": "set_ctype_byname_flags_08005974"
            },
            "code": "void set_ctype_byname_flags_08005974()\n{\n    if (*(int *)PTR_id_080059d8 < 0)\n    {\n        *(undefined4 *)PTR_id_080059d8 = 1;\n    }\n    if (*(int *)PTR_id_080059dc < 0)\n    {\n        *(undefined4 *)PTR_id_080059dc = 1;\n    }\n    if (*(int *)PTR_id_080059e0 < 0)\n    {\n        *(undefined4 *)PTR_id_080059e0 = 1;\n    }\n    if (*(int *)PTR_id_080059e4 < 0)\n    {\n        *(undefined4 *)PTR_id_080059e4 = 1;\n    }\n    if (*(int *)PTR_id_080059e8 < 0)\n    {\n        *(undefined4 *)PTR_id_080059e8 = 1;\n    }\n    if (*(int *)PTR_id_080059ec < 0)\n    {\n        *(undefined4 *)PTR_id_080059ec = 1;\n    }\n    if (*(int *)PTR_id_080059f0 < 0)\n    {\n        *(undefined4 *)PTR_id_080059f0 = 1;\n    }\n    if (*(int *)PTR_id_080059f4 < 0)\n    {\n        *(undefined4 *)PTR_id_080059f4 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005974",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_byname_flags_08005974"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "handleI2CEvents_08001256",
                "*hi2c": "*i2cHandle",
                "uVar1": "transferOptions",
                "pIVar2": "i2cInstance",
                "tmpreg": "transferCount",
                "tmpreg_1": "eventCount",
                "tmpreg_2": "i2cMode",
                "tmpreg_3": "addressingMode",
                "tmpreg_4": "previousState"
            },
            "code": "HAL_StatusTypeDef handleI2CEvents_08001256(I2C_HandleTypeDef *i2cHandle)\n{\n  uint32_t transferOptions = i2cHandle->XferOptions;\n  I2C_TypeDef *i2cInstance = i2cHandle->Instance;\n  uint32_t transferCount = i2cHandle->XferCount;\n  uint32_t eventCount = i2cHandle->EventCount;\n  uint32_t i2cMode = i2cHandle->Mode;\n  uint32_t addressingMode = (i2cHandle->Init).AddressingMode;\n  uint32_t previousState = i2cHandle->PreviousState;\n\n  if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) && ((eventCount != 0) || (i2cMode != HAL_I2C_MODE_MEM))) {\n    if ((eventCount == 0) && (addressingMode == 0xc000)) {\n      i2cInstance->CR1 |= 0x100;\n      i2cHandle->EventCount = eventCount + 1;\n    }\n    else {\n      if (transferCount == 0) {\n        i2cInstance->CR1 |= 0x200;\n      }\n      else if (transferCount == 1) {\n        if (transferOptions == 0xffff0000) {\n          i2cInstance->CR1 &= 0xfffffbff;\n          if ((i2cInstance->CR2 & 0x800) == 0) {\n            i2cInstance->CR1 |= 0x200;\n          }\n          else {\n            i2cInstance->CR1 &= 0xfffffbff;\n          }\n        }\n        else if (((transferOptions == 4) || (transferOptions == 8)) || (previousState == 0x12)) {\n          i2cInstance->CR1 &= 0xfffffbff;\n          i2cInstance->CR1 |= 0x200;\n        }\n        else if (transferOptions == 2) {\n          i2cInstance->CR1 |= 0x400;\n        }\n        else {\n          i2cInstance->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (transferCount == 2) {\n        if (transferOptions == 2) {\n          i2cInstance->CR1 |= 0x400;\n        }\n        else {\n          i2cInstance->CR1 &= 0xfffffbff;\n          i2cInstance->CR1 |= 0x800;\n        }\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 |= 0x1000;\n        }\n      }\n      else {\n        i2cInstance->CR1 |= 0x400;\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 |= 0x1000;\n        }\n      }\n      i2cHandle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CEvents_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "initialize_program_08004884",
                "puVar1": "pre_init_array_end",
                "iVar4": "pre_init_array_length",
                "puVar2": "pre_init_array_start",
                "puVar3": "do_global_dtors_aux_fini_array_entry",
                "iVar5": "i",
                "DAT_080048c8": "PTR___do_global_dtors_aux_fini_array_entry_080048c8",
                "DAT_080048c4": "PTR___preinit_array_end_080048c4",
                "_init": "_init"
            },
            "code": "void initialize_program_08004884(void)\n{\n    undefined *pre_init_array_end = PTR___preinit_array_end_080048bc;\n    int pre_init_array_length = (int)PTR___preinit_array_end_080048c0 - (int)PTR___preinit_array_end_080048bc;\n    for (int i = 0; i != pre_init_array_length >> 2; i++)\n    {\n        (**(code **)(pre_init_array_end + i * 4))();\n    }\n    _init();\n    undefined *do_global_dtors_aux_fini_array_entry = DAT_080048c8;\n    undefined *pre_init_array_start = DAT_080048c4;\n    int do_global_dtors_aux_fini_array_length = (int)do_global_dtors_aux_fini_array_entry - (int)pre_init_array_start >> 2;\n    for (int i = 0; i != do_global_dtors_aux_fini_array_length; i++)\n    {\n        (**(code **)(pre_init_array_start + i * 4))();\n    }\n    return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_program_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_EVP_PKEY_context_08004648",
                "ctx": "context"
            },
            "code": "void initialize_EVP_PKEY_context_08004648(EVP_PKEY_CTX *context){\n  context = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(context);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_context_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "setModbusPort_08000600",
                "this": "modbusInstance",
                "u32speed": "speed",
                "uVar1": "serialNumber",
                "iVar2": "readResult",
                "port": "serialPort",
                "u8serno": "serialNumber",
                "PTR_Serial3_08000668": "serialPortPtr",
                "u8txenpin": "txEnablePin",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceived",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outgoingCount",
                "u16InCnt": "incomingCount"
            },
            "code": "void __thiscall setModbusPort_08000600(Modbus *modbusInstance, long speed) {\n  uint8_t serialNumber = modbusInstance->serialNumber;\n  HardwareSerial *port;\n  if (serialNumber == 2 || serialNumber == 3 || serialNumber == 1) {\n    port = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  else {\n    port = (HardwareSerial *)PTR_Serial3_08000668;\n  }\n  HardwareSerial::begin(port, speed, 6);\n  if (modbusInstance->txEnablePin > 1) {\n    pinMode((uint)modbusInstance->txEnablePin, OUTPUT);\n    digitalWrite((uint)modbusInstance->txEnablePin, LOW);\n  }\n  while (port->available()) {\n    port->read();\n  }\n  modbusInstance->bufferSize = 0;\n  modbusInstance->lastReceived = 0;\n  modbusInstance->errorCount = 0;\n  modbusInstance->outgoingCount = 0;\n  modbusInstance->incomingCount = 0;\n}",
            "called": [
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "setModbusPort_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "__thiscall Print::FUN_080045be": "print_character",
                "this": "print_obj",
                "c": "character",
                "sVar1": "character_size",
                "FUN_080045be": "print_character_080045be"
            },
            "code": "size_t __thiscall print_character_080045be(Print *print_obj, char character){\n                        size_t character_size;\n                        character_size = (**print_obj->_vptr_Print)(print_obj, (int)character);\n                        return character_size;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "handle_UART8_interrupt_0800407c",
                "PTR_uart_handlers_08004090": "uart_handlers_address",
                "UART8_IRQn": "UART8_Interrupt",
                "*": "pointer_"
            },
            "code": "void handle_UART8_interrupt_0800407c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART8_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef**)(PTR_uart_handlers_08004090 + 0x1c);\n  HAL_UART_IRQHandler(uart_handler);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART8_interrupt_0800407c"
        },
        "FUN_08000728": {
            "renaming": {
                "__thiscall Modbus::FUN_08000728": "calculateCRC",
                "this": "modbusInstance",
                "u8length": "dataLength",
                "uVar2": "crc",
                "uVar3": "bitValue",
                "uVar4": "dataIndex",
                "bVar1": "bitIndex",
                "au8Buffer": "dataBuffer",
                "FUN_08000728": "calculateCRC_08000728"
            },
            "code": "uint16_t __thiscall Modbus::calculateCRC_08000728(Modbus *modbusInstance, uint8_t dataLength)\n{\n    byte currentByte;\n    uint crc = 0xFFFF;\n\n    for (uint dataIndex = 0; dataIndex < dataLength; dataIndex = (dataIndex + 1) & 0xFF)\n    {\n        crc ^= modbusInstance->dataBuffer[dataIndex];\n        for (byte bitIndex = 0; bitIndex < 8; bitIndex++)\n        {\n            if ((crc & 0x0001) != 0)\n            {\n                crc = (crc >> 1) ^ 0xA001;\n            }\n            else\n            {\n                crc = (crc >> 1);\n            }\n        }\n    }\n\n    return (ushort)(crc << 8) | (ushort)(crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateCRC_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_pin_function_0800354a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_0800354a(PinName_conflict pin, PinMap_conflict *pin_map)\n{\n  uint32_t function_index = 0;\n  if (pin == NC) {\n    return 0xffffffff;\n  }\n  function_index = pinmap_find_function(pin, pin_map);\n  return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "get_pwm_channel",
                "uart_init",
                "get_dac_channel",
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "find_pin_function_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_i2c_device_address_0800124a",
                "hi2c": "i2c_handler",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "Devaddress": "device_address"
            },
            "code": "HAL_StatusTypeDef set_i2c_device_address_0800124a(I2C_HandleTypeDef *i2c_handler)\n{\n  uint8_t device_address = i2c_handler->Devaddress & 0xff;\n  i2c_handler->Instance->DR = device_address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_08004094(int increment)\n{\n    caddr_t current_pointer;\n    caddr_t new_pointer;\n  \n    if (*(int *)PTR_heap_end_080040c4 == 0) {\n        *(undefined **)PTR_heap_end_080040c4 = PTR__ebss_080040c8;\n    }\n    current_pointer = *(caddr_t *)PTR_heap_end_080040c4;\n    new_pointer = current_pointer + increment;\n    if (new_pointer <= &stack0x00000000) {\n        *(caddr_t *)PTR_heap_end_080040c4 = new_pointer;\n        return current_pointer;\n    }\n    *(undefined4 *)PTR_errno_080040cc = 0xc;\n    return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_DAC_buffer_080033c8",
                "hdac": "dac_handle",
                "PTR_080033d4": "buffer_ptr"
            },
            "code": "void clear_DAC_buffer_080033c8(DAC_HandleTypeDef *dac_handle)\n{\n  uint32_t* PTR_080033d4 = (uint32_t*)(DAT_080033d4 + 0x40);\n  *PTR_080033d4 &= 0xdfffffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "imported": false,
            "current_name": "clear_DAC_buffer_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "get_gpio_port_080031fc",
                "port_idx": "port_index",
                "pGVar1": "gpio_port",
                "tmpreg": "gpio_cr_reg",
                "tmpreg_1": "gpio_cr_offset",
                "tmpreg_2": "gpio_cr_mask",
                "tmpreg_3": "gpio_cr_shift",
                "tmpreg_4": "gpio_cr_value"
            },
            "code": "GPIO_TypeDef * get_gpio_port_080031fc(uint32_t port_index) {\n  GPIO_TypeDef *gpio_port;\n  uint32_t gpio_cr_reg;\n  uint32_t gpio_cr_offset = 0x30;\n  uint32_t gpio_cr_mask = 0x1FF;\n  uint32_t gpio_cr_shift = port_index;\n  uint32_t gpio_cr_value = (1 << gpio_cr_shift);\n\n  gpio_cr_reg = *(uint *)(DAT_08003350 + gpio_cr_offset);\n  gpio_cr_reg |= gpio_cr_value;\n  *(uint *)(DAT_08003350 + gpio_cr_offset) = gpio_cr_reg;\n\n  switch(port_index) {\n    case 0:\n      gpio_port = DAT_08003354;\n      break;\n    case 1:\n      gpio_port = DAT_08003358;\n      break;\n    case 2:\n      gpio_port = DAT_0800335c;\n      break;\n    case 3:\n      gpio_port = DAT_08003360;\n      break;\n    case 4:\n      gpio_port = DAT_08003364;\n      break;\n    case 5:\n      gpio_port = DAT_08003368;\n      break;\n    case 6:\n      gpio_port = DAT_0800336c;\n      break;\n    case 7:\n      gpio_port = DAT_08003370;\n      break;\n    case 8:\n      gpio_port = DAT_08003374;\n      break;\n    case 9:\n      gpio_port = DAT_08003378;\n      break;\n    case 10:\n      gpio_port = DAT_0800337c;\n      break;\n    default:\n      gpio_port = NULL;\n      break;\n  }\n  return gpio_port;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_gpio_port_080031fc"
        },
        "FUN_08005580": {
            "renaming": {
                "FUN_08005580": "execute_function_08005580",
                "param_1": "result",
                "param_2": "function_id",
                "param_3": "arg1",
                "param_4": "arg2",
                "_Var1": "pid",
                "uVar2": "status",
                "iVar3": "function_table",
                "pcVar4": "function",
                "0x1f": "MAX_FUNCTION_ID",
                "0x16": "INVALID_FUNCTION_ID"
            },
            "code": "int execute_function_08005580(int* result, uint32_t function_id, uint32_t arg1, uint32_t arg2) {\n    __pid_t pid;\n    int status;\n    function_ptr function;\n    \n    if (function_id > 31) {\n        *result = 22;\n        return -1;\n    }\n    \n    function = function_table[function_id];\n    if (function == NULL) {\n        pid = _getpid_r();\n        status = _kill_r(result, pid, function_id, arg2);\n        return status;\n    }\n    \n    if (function == (function_ptr)1) {\n        return 0;\n    }\n    \n    if (function == (function_ptr)-1) {\n        *result = 22;\n        return 1;\n    }\n    \n    function_table[function_id] = NULL;\n    function(arg1);\n    \n    return 0;\n}",
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005580",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_function_08005580"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_modbus_08000690",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level"
            },
            "code": "void initialize_modbus_08000690(int should_initialize, int priority_level)\n{\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority_level == 0xffff) {\n    Modbus::Modbus((Modbus *)PTR_slave_080006b0, '\\x01', '\\0', '\\0');\n  }\n  return;\n}",
            "called": [
                "Modbus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_modbus_08000690"
        },
        "FUN_08004254": {
            "renaming": {
                "FUN_08004254": "read_next_byte_from_serial_buffer_08004254",
                "this": "serial_object",
                "uVar1": "rx_tail",
                "_serial": "serial_data",
                "rx_head": "head_index",
                "rx_buff": "receive_buffer"
            },
            "code": "int __thiscall read_next_byte_from_serial_buffer_08004254(HardwareSerial *serial_object)\n{\n  uint32_t rx_tail = (uint32_t)(serial_object->_serial).rx_tail;\n  if ((serial_object->_serial).rx_head != rx_tail) {\n    return (uint32_t)(serial_object->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004254",
            "calling": [],
            "imported": false,
            "current_name": "read_next_byte_from_serial_buffer_08004254"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "initialize_buffer_080054fc",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "uVar1": "buffer_flags",
                "iVar2": "temp_buffer_size",
                "local_18": "new_buffer_size",
                "local_14": "new_buffer_ptr"
            },
            "code": "void initialize_buffer_080054fc(int buffer_size, int* buffer) {\n  ushort buffer_flags;\n  int temp_buffer_size;\n  int* temp_buffer_ptr;\n  \n  if ((int)((uint)*(ushort *)(buffer + 3) << 0x1e) >= 0) {\n    buffer_flags = __swhatbuf_r(buffer_size, buffer, &temp_buffer_size, &temp_buffer_ptr);\n    int* new_buffer_ptr = _malloc_r(buffer_size, temp_buffer_size);\n    if (new_buffer_ptr != 0) {\n      *(undefined4 *)(buffer_size + 0x28) = DAT_08005578;\n      *buffer = new_buffer_ptr;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[5] = temp_buffer_size;\n      buffer[4] = new_buffer_ptr;\n      if ((temp_buffer_ptr != (int *)0x0) && (_isatty_r(buffer_size, (int)*(short *)((int)buffer + 0xe)) != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = buffer_flags | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}",
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "initialize_buffer_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "transfer_byte_08001420",
                "*hi2c": "*i2c_handle",
                "pbVar1": "buffer_pointer",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hi2c->XferCount": "i2c_handle->XferCount"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001420(I2C_HandleTypeDef *i2c_handle)\n{\n  byte *buffer_pointer;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    i2c_handle->Instance->DR = (uint)*buffer_pointer;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "initialize_peripherals_08000de4",
                "DAT_08000e14": "peripheral_ptr",
                "*DAT_08000e14": "*peripheral_ptr",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "FUN_08000de4Tick": "initialize_tick_timer"
            },
            "code": "HAL_StatusTypeDef initialize_peripherals_08000de4(void)\n{\n  uint32_t *DAT_08000e14;\n  DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= (1 << 9);\n  *DAT_08000e14 |= (1 << 10);\n  *DAT_08000e14 |= (1 << 8);\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  initialize_tick_timer(15);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_08000de4"
        },
        "FUN_08003840": {
            "renaming": {
                "FUN_08003840": "handle_timer_interrupt_08003840",
                "PTR_timer_handles_08003850": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "timer_handle": "current_timer_handle"
            },
            "code": "void handle_timer_interrupt_08003840(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08003850_08003850 + 0x28);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003840",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003840"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_TIM_interrupts_080026ce",
                "htim": "timer_handle",
                "pTVar1": "timer_instance",
                "SR": "TIM_SR",
                "DIER": "TIM_DIER",
                "HAL_TIM_ACTIVE_CHANNEL_1": "TIM_CHANNEL_1",
                "HAL_TIM_ACTIVE_CHANNEL_2": "TIM_CHANNEL_2",
                "HAL_TIM_ACTIVE_CHANNEL_3": "TIM_CHANNEL_3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "TIM_CHANNEL_4",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "TIM_CHANNEL_NONE",
                "CCMR1": "TIM_CCMR1",
                "CCMR2": "TIM_CCMR2",
                "TIM_FLAG_CC1": "TIM_SR_CC1IF",
                "TIM_FLAG_CC2": "TIM_SR_CC2IF",
                "TIM_FLAG_CC3": "TIM_SR_CC3IF",
                "TIM_FLAG_CC4": "TIM_SR_CC4IF",
                "TIM_FLAG_UPDATE": "TIM_SR_UIF",
                "TIM_FLAG_BREAK": "TIM_SR_BIF",
                "TIM_FLAG_TRIGGER": "TIM_SR_TIF",
                "TIM_FLAG_COM": "TIM_SR_COMIF",
                "TIM_IT_CC1": "TIM_DIER_CC1IE",
                "TIM_IT_CC2": "TIM_DIER_CC2IE",
                "TIM_IT_CC3": "TIM_DIER_CC3IE",
                "TIM_IT_CC4": "TIM_DIER_CC4IE",
                "TIM_IT_UPDATE": "TIM_DIER_UIE",
                "TIM_IT_BREAK": "TIM_DIER_BIE",
                "TIM_IT_TRIGGER": "TIM_DIER_TIE",
                "TIM_IT_COM": "TIM_DIER_COMIE",
                "HAL_TIM_OC_DelayElapsedCallback": "TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback": "TIM_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "TIMEx_CommutationCallback"
            },
            "code": "void process_TIM_interrupts_080026ce(TIM_HandleTypeDef *timer_handle)\n{\n  TIM_TypeDef *timer_instance;\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC1);\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC2);\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC3);\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_CC4);\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n      HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer_handle);\n    }\n    timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_UPDATE);\n    HAL_TIM_PeriodElapsedCallback(timer_handle);\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_BREAK);\n    HAL_TIMEx_BreakCallback(timer_handle);\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_TRIGGER);\n    HAL_TIM_TriggerCallback(timer_handle);\n  }\n\n  timer_instance = timer_handle->Instance;\n\n  if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n    timer_instance->SR = ~(TIM_FLAG_COM);\n    HAL_TIMEx_CommutationCallback(timer_handle);\n  }\n\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "TIM1_UP_TIM10_IRQHandler",
                "TIM5_IRQHandler",
                "TIM1_BRK_TIM9_IRQHandler",
                "TIM1_TRG_COM_TIM11_IRQHandler",
                "TIM2_IRQHandler",
                "TIM7_IRQHandler",
                "TIM8_UP_TIM13_IRQHandler",
                "TIM8_BRK_TIM12_IRQHandler",
                "TIM3_IRQHandler",
                "TIM8_TRG_COM_TIM14_IRQHandler",
                "TIM6_DAC_IRQHandler",
                "TIM4_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_TIM_interrupts_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08001f3c": {
            "renaming": {
                "FUN_08001f3c": "reset_i2c_transfer_08001f3c",
                "hdma": "i2c_handle",
                "hi2c": "i2c",
                "Parent": "parent",
                "XferCount": "transfer_count",
                "hdmatx": "dma_tx",
                "hdmarx": "dma_rx",
                "State": "state",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORTED",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "Mode": "mode",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "Instance": "instance",
                "CR1": "control_register_1",
                "ErrorCode": "error_code",
                "HAL_I2C_ErrorCallback": "handle_i2c_error",
                "HAL_I2C_AbortCpltCallback": "handle_i2c_abort_complete"
            },
            "code": "void reset_i2c_transfer_08001f3c(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_HandleTypeDef *i2c;\n  i2c = (I2C_HandleTypeDef *)i2c_handle->Parent;\n  i2c->Instance->CR1 &= ~(1 << 10);\n  i2c->XferCount = 0;\n  i2c->hdmatx->XferAbortCallback = NULL;\n  i2c->hdmarx->XferAbortCallback = NULL;\n  if (i2c->State != HAL_I2C_STATE_ABORT) {\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n    i2c->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c);\n    return;\n  }\n  i2c->State = HAL_I2C_STATE_READY;\n  i2c->Mode = HAL_I2C_MODE_NONE;\n  i2c->ErrorCode = 0;\n  i2c->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c);\n  return;\n}",
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f3c",
            "calling": [],
            "imported": false,
            "current_name": "reset_i2c_transfer_08001f3c"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "count_characters_08000218",
                "__s": "str",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t count_characters_08000218(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  while (current_char = *current_ptr++) {\n  }\n  return (size_t)(current_ptr - 1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "printNumber"
            ],
            "imported": false,
            "current_name": "count_characters_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_pwm_function_from_pin_0800339c",
                "pin": "pin_name",
                "uVar1": "pwm_function",
                "uVar2": "pwm_value"
            },
            "code": "uint32_t get_pwm_function_from_pin_0800339c(PinName_conflict pin)\n{\n  uint32_t pwm_function = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_080033c4);\n  uint32_t pwm_value = (pwm_function << 12) >> 27;\n  if (pwm_value == 3) {\n    return 8;\n  }\n  if (pwm_value != 4) {\n    if (pwm_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_pwm_function_from_pin_0800339c"
        },
        "FUN_08003968": {
            "renaming": {
                "FUN_08003968": "handle_i2c_errors_08003968",
                "PTR_i2c_handles_08003974": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_errors_08003968(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)(PTR_i2c_handles_08003974_08003974 + 8);\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003968",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08003968"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_interrupt_priority_08000e60",
                "IRQn": "irq_num",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "priority_bits",
                "uVar3": "priority_group"
            },
            "code": "void set_interrupt_priority_08000e60(IRQn_Type_conflict IRQn, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)IRQn;\n  uint32_t priority_bits = (uint32_t)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint32_t priority_group = 7 - priority_bits;\n  if (priority_group > 3) {\n    priority_group = 4;\n  }\n  if (priority_bits + 4 < 7) {\n    priority_bits = 0;\n  }\n  else {\n    priority_bits = priority_bits - 3;\n  }\n  uint32_t priority = (preempt_priority & ((1 << (priority_group & 0xff)) - 1)) << (priority_bits & 0xff) | ((1 << (priority_bits & 0xff)) - 1) & sub_priority;\n  if ((int32_t)irq_num < 0) {\n    *(char *)(DAT_08000ec0 + (irq_num & 0xf)) = (char)(priority << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(priority << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "checkAddressMatch_0800165a",
                "*hi2c": "*i2cHandle",
                "AddrMatchCode": "addressCode",
                "&(hi2c->Init).OwnAddress1": "&(i2cHandle->Init).OwnAddress1",
                "&(hi2c->Init).OwnAddress2": "&(i2cHandle->Init).OwnAddress2"
            },
            "code": "HAL_StatusTypeDef checkAddressMatch_0800165a(I2C_HandleTypeDef *i2cHandle)\n{\n  uint16_t addressCode;\n  if ((i2cHandle->Instance->SR2 & 0x80) == 0) {\n    addressCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress1;\n  }\n  else {\n    addressCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2cHandle, (i2cHandle->Instance->SR2 & 4) == 0, addressCode);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "checkAddressMatch_0800165a"
        },
        "FUN_080037d4": {
            "renaming": {
                "FUN_080037d4": "handle_timer_interrupt_080037d4",
                "PTR_timer_handles_080037e4": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "HandleTimerInterrupt"
            },
            "code": "void handle_timer_interrupt_080037d4(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037e4_080037e4 + 0x10);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037d4",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037d4"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "read_registers_08000b04",
                "*this": "modbus",
                "*regs": "registers",
                "u8size": "num_registers",
                "bVar1": "starting_address",
                "bVar2": "num_registers_to_read",
                "uVar3": "response_size",
                "uVar4": "register_value",
                "uVar5": "register_index"
            },
            "code": "int8_t __thiscall Modbus::read_registers_08000b04(Modbus *modbus, uint16_t *registers, uint8_t num_registers) {\n    byte starting_address;\n    byte num_registers_to_read;\n    uint8_t response_size;\n    uint16_t register_value;\n    uint register_index;\n\n    starting_address = modbus->au8Buffer[3];\n    num_registers_to_read = modbus->au8Buffer[5];\n    modbus->au8Buffer[4] = '\\0';\n    modbus->au8Buffer[5] = num_registers_to_read;\n    response_size = 6;\n\n    for (register_index = 0; register_index < num_registers_to_read; register_index++) {\n        register_value = makeWord(modbus->au8Buffer[register_index * 2 + 7], modbus->au8Buffer[register_index * 2 + 8]);\n        registers[starting_address + register_index] = register_value;\n    }\n\n    sendTxBuffer(modbus);\n    return response_size + 2;\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "handle_RTC_events_0800262c",
                "hrtc": "rtc_handle",
                "RTC_ISR_ALRAF": "0x100",
                "RTC_ISR_ALRBF": "0x200",
                "RTC_CR_ALRAIE": "0x1000",
                "RTC_CR_ALRBIE": "0x2000",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_A_event",
                "HAL_RTCEx_AlarmBEventCallback": "handle_alarm_B_event",
                "RTC_ISR_INIT": "0xfffffe7f",
                "DAT_08002688": "some_data_structure"
            },
            "code": "void handle_RTC_events_0800262c(RTC_HandleTypeDef *rtc_handle) {\n  bool alarm_A_triggered = ((rtc_handle->Instance->ISR & RTC_ISR_ALRAF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRAIE) != 0);\n  bool alarm_B_triggered = ((rtc_handle->Instance->ISR & RTC_ISR_ALRBF) != 0) && ((rtc_handle->Instance->CR & RTC_CR_ALRBIE) != 0);\n  if (alarm_A_triggered) {\n    HAL_RTC_AlarmAEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = (rtc_handle->Instance->ISR & 0xff) | RTC_ISR_INIT;\n  }\n  if (alarm_B_triggered) {\n    HAL_RTCEx_AlarmBEventCallback(rtc_handle);\n    rtc_handle->Instance->ISR = (rtc_handle->Instance->ISR & 0xff) | RTC_ISR_INIT;\n  }\n  *(uint32_t *)(DAT_08002688 + 0x14) = 0x20000;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}",
            "called": [
                "HAL_RTCEx_AlarmBEventCallback",
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_RTC_events_0800262c"
        },
        "FUN_080047a8": {
            "renaming": {
                "FUN_080047a8": "handle_gpio_ext_interrupts_080047a8",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_ext_interrupts_080047a8(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while(gpio_pin < 0x8001)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin <<= 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_ext_interrupts_080047a8"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "setSerialConfig_08004388",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "configBits",
                "iVar2": "bitCount",
                "PTR_s__home_bo__arduino15_packages_STM_08004440": "assertionMessage",
                "PTR___PRETTY_FUNCTION___0800443c": "prettyFunction",
                "PTR_s_databits__0_08004438": "databitsMessage"
            },
            "code": "void setSerialConfig_08004388(HardwareSerial *serial, ulong baudrate, byte config) {\n  byte parity = 0;\n  int databits = 0;\n  int stopbits = 0;\n  int bitCount = 0;\n  \n  (serial->_serial).baudrate = baudrate;\n  serial->_config = config;\n  \n  byte configBits = config & 7;\n  \n  switch(configBits) {\n    case 4:\n      bitCount = 7;\n      break;\n    case 6:\n      bitCount = 8;\n      break;\n    case 2:\n      bitCount = 6;\n      break;\n    default:\n      bitCount = 0;\n  }\n  \n  if ((config & 0x30) == 0x30) {\n    parity = 0x600;\n    bitCount++;\n  }\n  else if ((config & 0x20) == 0) {\n    parity = 0;\n  }\n  else {\n    parity = 0x400;\n    bitCount++;\n  }\n  \n  stopbits = (config & 8) ? 0x2000 : 0;\n  \n  if (bitCount == 8) {\n    databits = 0;\n  }\n  else if (bitCount == 9) {\n    databits = 0x1000;\n  }\n  \n  if (bitCount != 0) {\n    uart_init((serial_t *)&serial->_serial);\n    uart_attach_rx_callback((serial_t *)&serial->_serial, serialEvent);\n    return;\n  }\n  \n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08004440,299,PTR___PRETTY_FUNCTION___0800443c, PTR_s_databits__0_08004438);\n}",
            "called": [
                "uart_init",
                "__assert_func",
                "uart_attach_rx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setSerialConfig_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "raise_signal_and_exit_080051ac",
                "PTR_": "",
                "DAT_": "",
                "void": "",
                "raise": "raise_signal",
                "_exit": "exit",
                "SIGABRT": "SIGABRT",
                "1": "EXIT_FAILURE"
            },
            "code": "void raise_signal_and_exit_080051ac(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "raise_signal_and_exit_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "flush_if_buffer_not_empty_080052cc",
                "param_1": "stream_pointer",
                "param_2": "buffer_pointer",
                "param_3": "ret_val_1",
                "param_4": "ret_val_2",
                "uVar1": "return_value"
            },
            "code": "int flush_if_buffer_not_empty_080052cc(int stream_pointer, char *buffer_pointer, int ret_val_1, int ret_val_2) {\n  int return_value = 0;\n  if (*(int *)(buffer_pointer + 0x10) != 0) {\n    if ((stream_pointer != 0) && (*(int *)(stream_pointer + 0x18) == 0)) {\n      __sinit();\n    }\n    if (buffer_pointer == PTR___sf_fake_stdin_08005314) {\n      buffer_pointer = *(char **)(stream_pointer + 4);\n    }\n    else if (buffer_pointer == PTR___sf_fake_stdout_08005318) {\n      buffer_pointer = *(char **)(stream_pointer + 8);\n    }\n    else if (buffer_pointer == PTR___sf_fake_stderr_0800531c) {\n      buffer_pointer = *(char **)(stream_pointer + 0xc);\n    }\n    if (*(short *)(buffer_pointer + 0xc) != 0) {\n      return_value = __sflush_r(stream_pointer, buffer_pointer, ret_val_1, ret_val_2);\n      return return_value;\n    }\n  }\n  return return_value;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_not_empty_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "transmitData_08002eb2",
                "*huart": "*uart_handler",
                "*pData": "*data",
                "Size": "size",
                "huart->gState": "uart_handler->gState",
                "pData": "data",
                "huart->Lock": "uart_handler->Lock",
                "huart->pTxBuffPtr": "uart_handler->pTxBuffPtr",
                "huart->TxXferSize": "uart_handler->TxXferSize",
                "huart->TxXferCount": "uart_handler->TxXferCount",
                "huart->ErrorCode": "uart_handler->ErrorCode",
                "huart->Instance->CR1": "uart_handler->Instance->CR1"
            },
            "code": "HAL_StatusTypeDef transmitData_08002eb2(UART_HandleTypeDef *uart_handler, uint8_t *data, uint16_t size) {\n    if (uart_handler->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL) {\n        return HAL_ERROR;\n    }\n    if (size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handler->Lock != HAL_LOCKED) {\n        uart_handler->pTxBuffPtr = data;\n        uart_handler->TxXferSize = size;\n        uart_handler->TxXferCount = size;\n        uart_handler->ErrorCode = 0;\n        uart_handler->gState = HAL_UART_STATE_BUSY_TX;\n        uart_handler->Lock = HAL_UNLOCKED;\n        uart_handler->Instance->CR1 = uart_handler->Instance->CR1 | 0x80;\n        return HAL_OK;\n    }\n    return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "transmitData_08002eb2"
        },
        "FUN_08005478": {
            "renaming": {
                "FUN_08005478": "process_data_08005478",
                "param_1": "data",
                "param_2": "function",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "current",
                "iVar4": "inner_data",
                "iVar6": "inner_count",
                "uVar1": "inner_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08005478(int data, code* function, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  int* current = (int*)(data + 0x48);\n  while (current != (int*)0x0) {\n    int inner_data = current[2];\n    int inner_count = current[1];\n    while (inner_count > 0) {\n      if (*(ushort*)(inner_data + 0xc) > 1) {\n        int inner_arg = *(short*)(inner_data + 0xe) + 1;\n        if (inner_arg != 0) {\n          uint inner_result = (*function)(data, inner_data, arg1, inner_arg, arg2);\n          result |= inner_result;\n        }\n      }\n      inner_data += 0x68;\n      inner_count--;\n    }\n    current = (int*)*current;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005478",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08005478"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "reset_handler",
                "PTR_completed_8667_08000d84": "completed_ptr_start",
                "PTR___dso_handle_08000d7c": "dso_handle_ptr_start",
                "PTR_completed_8667_08000d80": "completed_ptr_end",
                "PTR__sidata_08000d78": "rom_data_start",
                "PTR__ebss_08000d88": "uninit_data_end"
            },
            "code": "void initialize_system_08000d3c(void)\n{\n    int index;\n    undefined4 *completed_ptr = (undefined4 *)PTR_completed_8667_08000d84;\n    undefined4 *dso_handle_ptr = (undefined4 *)PTR___dso_handle_08000d7c;\n    code *UNRECOVERED_JUMPTABLE;\n    \n    // Copy initialized data from ROM to RAM\n    for (index = 0; dso_handle_ptr + index < (undefined4 *)PTR_completed_8667_08000d80; index += 4) {\n        *(undefined4 *)(dso_handle_ptr + index) = *(undefined4 *)(PTR__sidata_08000d78 + index);\n    }\n    \n    // Clear uninitialized data\n    for (; completed_ptr < (undefined4 *)PTR__ebss_08000d88; completed_ptr++) {\n        *completed_ptr = 0;\n    }\n    \n    // Call system initialization functions\n    SystemInit();\n    __libc_init_array();\n    \n    // Call main function\n    UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n    main();\n    (*UNRECOVERED_JUMPTABLE)(); // Call reset handler\n}\n",
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  USART_TypeDef *pUVar4;\n  USART_TypeDef *pUVar5;\n  USART_TypeDef *pUVar6;\n  USART_TypeDef *pUVar7;\n  USART_TypeDef *pUVar8;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar9;\n  GPIO_TypeDef *pGVar10;\n  uint32_t uVar11;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84);\n    }\n    else {\n      pUVar9 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar9;\n      pUVar8 = DAT_08003c7c;\n      pUVar7 = DAT_08003c78;\n      pUVar6 = DAT_08003c74;\n      pUVar5 = DAT_08003c70;\n      pUVar4 = DAT_08003c6c;\n      pUVar3 = DAT_08003c68;\n      pUVar2 = DAT_08003c64;\n      pUVar1 = DAT_08003c60;\n      if (pUVar9 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (pUVar9 == DAT_08003c60) {\n          DAT_08003c60[0xa93].CR2 = DAT_08003c60[0xa93].CR2 | 0x10;\n          pUVar1[0xa93].CR2 = pUVar1[0xa93].CR2 & 0xffffffef;\n          pUVar1[0xa94].CR3 = pUVar1[0xa94].CR3 | 0x10;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c64) {\n          DAT_08003c64[0x11dc].CR2 = DAT_08003c64[0x11dc].CR2 | 0x20000;\n          pUVar2[0x11dc].CR2 = pUVar2[0x11dc].CR2 & 0xfffdffff;\n          pUVar2[0x11dd].CR3 = pUVar2[0x11dd].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c68) {\n          DAT_08003c68[0x11b8].SR = DAT_08003c68[0x11b8].SR | 0x40000;\n          pUVar3[0x11b8].SR = pUVar3[0x11b8].SR & 0xfffbffff;\n          pUVar3[0x11b9].DR = pUVar3[0x11b9].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c6c) {\n          DAT_08003c6c[0x1193].CR1 = DAT_08003c6c[0x1193].CR1 | 0x80000;\n          pUVar4[0x1193].CR1 = pUVar4[0x1193].CR1 & 0xfff7ffff;\n          pUVar4[0x1194].CR2 = pUVar4[0x1194].CR2 | 0x80000;\n          obj->index = '\\x03';\n          obj->irq = UART4_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c70) {\n          DAT_08003c70[0x116e].GTPR = DAT_08003c70[0x116e].GTPR | 0x100000;\n          pUVar5[0x116e].GTPR = pUVar5[0x116e].GTPR & 0xffefffff;\n          pUVar5[0x1170].SR = pUVar5[0x1170].SR | 0x100000;\n          obj->index = '\\x04';\n          obj->irq = UART5_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c74) {\n          DAT_08003c74[0xa6f].SR = DAT_08003c74[0xa6f].SR | 0x20;\n          pUVar6[0xa6f].SR = pUVar6[0xa6f].SR & 0xffffffdf;\n          pUVar6[0xa70].DR = pUVar6[0xa70].DR | 0x20;\n          obj->index = '\\x05';\n          obj->irq = USART6_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c78) {\n          DAT_08003c78[0x1001].DR = DAT_08003c78[0x1001].DR | 0x40000000;\n          pUVar7[0x1001].DR = pUVar7[0x1001].DR & 0xbfffffff;\n          pUVar7[0x1002].BRR = pUVar7[0x1002].BRR | 0x40000000;\n          obj->index = '\\x06';\n          obj->irq = UART7_IRQn;\n        }\n        else if (pUVar9 == DAT_08003c7c) {\n          DAT_08003c7c[0xfdc].CR2 = DAT_08003c7c[0xfdc].CR2 | 0x80000000;\n          pUVar8[0xfdc].CR2 = pUVar8[0xfdc].CR2 & 0x7fffffff;\n          pUVar8[0xfdd].CR3 = pUVar8[0xfdd].CR3 | 0x80000000;\n          obj->index = '\\a';\n          obj->irq = UART8_IRQn;\n        }\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08003c5c);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        GPIO_InitStruct.Alternate = (uVar11 << 0x11) >> 0x19;\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        pGVar10 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar11 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08003c58);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        GPIO_InitStruct.Pull = (uVar11 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar10,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08003c80 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init",
                "HAL_UART_Init",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "iprintf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_08003854": {
            "renaming": {
                "FUN_08003854": "handle_timer_interrupt_08003854",
                "PTR_timer_handles_08003864": "PTR_timer_handles",
                "TIM_HandleTypeDef": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_TIM_interrupt",
                "DAT_0800385c": "N/A",
                "DAT_08003860": "N/A"
            },
            "code": "void handle_timer_interrupt_08003854(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003864_08003864 + 0x2c);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003854",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003854"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "set_pin_low_0800316c",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_low_0800316c(PinName_conflict pin, uint32_t *pin_map)\n{\n    uint32_t pin_index = (uint32_t)((int)pin << 24) >> 28;\n    pin_map[pin_index] = pin_map[pin_index] & ~(1 << ((int)pin & 0xF));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_low_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "returnError_080040d0",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int returnError_080040d0(int fileDescriptor) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "returnError_080040d0"
        },
        "FUN_0800401c": {
            "renaming": {
                "FUN_0800401c": "handle_UART4_interrupt_0800401c",
                "UART4_IRQn": "UART4_Interrupt",
                "PTR_uart_handlers_08004030": "uart_handlers_pointer",
                "uart_handlers_ptr": "uart_handlers"
            },
            "code": "void handle_UART4_interrupt_0800401c(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART4_IRQn);\n  UART_HandleTypeDef *uart_handlers_ptr = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004030 + 0xc);\n  HAL_UART_IRQHandler(uart_handlers_ptr);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800401c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART4_interrupt_0800401c"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_file_mode_to_0x2000_080040d6",
                "file_UNUSED": "file_descriptor",
                "st": "file_stats",
                "st_mode": "file_mode"
            },
            "code": "int set_file_mode_to_0x2000_080040d6(int file_descriptor, stat *file_stats) {\n  file_stats->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_0x2000_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "write_byte_to_buffer_08004a34",
                "param_1": "buffer_pointer",
                "param_2": "byte_to_write",
                "param_3": "buffer_limits",
                "pbVar2": "end_of_buffer",
                "uVar1": "result",
                "*pbVar2": "byte_to_write",
                "*param_3": "buffer_pointer_copy"
            },
            "code": "uint write_byte_to_buffer_08004a34(undefined4 buffer_pointer, byte byte_to_write, byte **buffer_limits) {\n  uint result;\n  byte *end_of_buffer = *buffer_limits[2] - 1;\n  *buffer_limits[2] = end_of_buffer;\n  if (((int)end_of_buffer < 0) && (((int)end_of_buffer < (int)*buffer_limits[6]) || (byte_to_write == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  byte *buffer_pointer_copy = *buffer_limits;\n  *buffer_limits = buffer_pointer_copy + 1;\n  *buffer_pointer_copy = byte_to_write;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "divide_numbers_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient"
            },
            "code": "void divide_numbers_080002d0(int dividend, int divisor, int remainder, int quotient) {\n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend, divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "imported": false,
            "current_name": "divide_numbers_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_uart_handler_index_08003f00",
                "*huart": "*uart_handler",
                "uVar1": "index",
                "PTR_uart_handlers_08003f20": "handlers_array"
            },
            "code": "uint8_t find_uart_handler_index_08003f00(UART_HandleTypeDef *uart_handler) {\n    uint8_t index = 0;\n    if (uart_handler == NULL) {\n        index = 10;\n    }\n    else {\n        while (index < 10) {\n            if (uart_handler == PTR_uart_handlers_08003f20[index]) {\n                break;\n            }\n            index++;\n        }\n    }\n    return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "imported": false,
            "current_name": "find_uart_handler_index_08003f00"
        },
        "FUN_08004270": {
            "renaming": {
                "FUN_08004270": "readByte_08004270",
                "this": "serial",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "byteToRead",
                "uVar2": "rxTailPosition"
            },
            "code": "ssize_t __thiscall HardwareSerial::readByte_08004270(HardwareSerial *serial,int fileDescriptor,void *buffer,size_t numBytes) {\n  byte byteToRead;\n  ushort rxTailPosition;\n  \n  rxTailPosition = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)rxTailPosition) {\n    byteToRead = (serial->_serial).rx_buff[rxTailPosition];\n    (serial->_serial).rx_tail = rxTailPosition + 1 & 0x3f;\n    return (uint)byteToRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004270",
            "calling": [],
            "imported": false,
            "current_name": "readByte_08004270"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_080037e8": {
            "renaming": {
                "FUN_080037e8": "handle_timer_interrupt_080037e8",
                "PTR_timer_handles_080037f8": "PTR_timer_handles_080037f8",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "current_timer_handle": "current_timer_handle",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_080037e8(void)\n{\n  TIM_HandleTypeDef* current_timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037f8 + 0x14);\n  if (current_timer_handle != NULL) {\n    HAL_TIM_IRQHandler(current_timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037e8",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037e8"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "transfer_byte_08001440",
                "hi2c": "i2c_handle",
                "puVar1": "buffer_pointer",
                "XferCount": "transfer_count",
                "pBuffPtr": "buffer_pointer_start",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "HAL_OK": "transfer_success"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08001440(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_08000230",
                "__s": "buffer",
                "__c": "byte_to_find",
                "__n": "buffer_size",
                "bVar1": "found_byte",
                "pbVar6": "buffer_ptr",
                "puVar7": "buffer_ptr_4",
                "pbVar8": "buffer_end_ptr",
                "uVar9": "byte_to_find_masked",
                "uVar10": "buffer_alignment",
                "uVar11": "bytes_left",
                "uVar12": "xored_1_result",
                "uVar13": "xored_2_result",
                "bVar14": "byte_found",
                "bVar15": "byte_found_2",
                "byte_mask": "byte_mask",
                "byte_mask_2": "byte_mask_2",
                "buffer_size_8_aligned": "buffer_size_8_aligned",
                "bytes_left": "bytes_left",
                "xored_1": "xored_1",
                "xored_2": "xored_2",
                "xor_result": "xor_result",
                "byte_found": "byte_found",
                "byte_found_2": "byte_found_2"
            },
            "code": "void* find_byte_08000230(void* buffer, int byte_to_find, size_t buffer_size) {\n    unsigned char found_byte;\n    unsigned char* buffer_ptr;\n    unsigned int* buffer_ptr_4;\n    unsigned char* buffer_end_ptr;\n    unsigned int byte_mask;\n    unsigned int byte_mask_2;\n    unsigned int buffer_size_8_aligned;\n    unsigned int bytes_left;\n    unsigned int xored_1;\n    unsigned int xored_2;\n    unsigned int xor_result;\n    int byte_found;\n    int byte_found_2;\n\n    found_byte = byte_to_find & 0xff;\n\n    if ((int)buffer_size < 0x10) {\n        do {\n            if (buffer_size == 0) {\n                return NULL;\n            }\n            buffer_ptr_4 = (unsigned int*)((int)buffer + 1);\n            found_byte = *(unsigned char*)buffer;\n            buffer_size--;\n            buffer = buffer_ptr_4;\n        } while (found_byte != byte_to_find);\n    }\n    else {\n        byte_mask = byte_to_find | byte_to_find << 8;\n        byte_mask = byte_mask | byte_mask << 0x10;\n        buffer_size_8_aligned = buffer_size & 0xfffffff8;\n        buffer_end_ptr = buffer + buffer_size;\n\n        do {\n            buffer_ptr_4 = (unsigned int*)((int)buffer + 8);\n            bytes_left = buffer_size_8_aligned - 8;\n            xored_1 = *(unsigned int*)buffer ^ byte_mask;\n            xored_2 = *(unsigned int*)((int)buffer + 4) ^ byte_mask;\n            xor_result = (xored_1 & 0x7f7f7f7f) + 0x7f7f7f7f;\n            xor_result = xor_result & 0x80808080;\n            byte_found = xor_result >> 0x1f;\n            xor_result = (xored_2 & 0x7f7f7f7f) + 0x7f7f7f7f;\n            xor_result = xor_result & 0x80808080;\n            byte_found_2 = xor_result >> 0x1f;\n            buffer = buffer_ptr_4;\n        } while (bytes_left != 0 && byte_found == 0 && byte_found_2 == 0);\n\n        buffer_size = buffer_size & 7;\n\n        if (byte_found == 0 && byte_found_2 == 0) {\n            do {\n                if (buffer_size == 0) {\n                    return NULL;\n                }\n                buffer_ptr = (unsigned char*)((int)buffer + 1);\n                found_byte = *(unsigned char*)buffer;\n                buffer_size--;\n                buffer = buffer_ptr;\n            } while (found_byte != byte_to_find);\n        }\n    }\n\n    return (unsigned char*)((int)buffer_ptr_4 + -1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_08000230"
        },
        "FUN_080051bc": {
            "renaming": {
                "FUN_080051bc": "process_data_080051bc",
                "param_1": "data",
                "param_2": "info",
                "iVar1": "offset",
                "piVar2": "piVar",
                "uVar3": "uSize",
                "uVar4": "size",
                "iVar5": "blockSize",
                "pcVar6": "codeBlock",
                "iVar7": "start",
                "uVar8": "uVar",
                "bVar9": "isBlockSizeZero"
            },
            "code": "int process_data_080051bc(uint *data, int *info)\n{\n    int size = info[3];\n    uint uSize = (uint)size;\n    if ((int)(uSize << 0x1c) < 0) {\n        int offset = info[4];\n        if (offset != 0) {\n            int blockSize = uSize << 0x1e;\n            bool isBlockSizeZero = blockSize == 0;\n            int start = info[0];\n            if (isBlockSizeZero) {\n                blockSize = info[5];\n            }\n            info[0] = offset;\n            if (!isBlockSizeZero) {\n                blockSize = 0;\n            }\n            info[2] = blockSize;\n            for (start = start - offset; 0 < start; start = start - blockSize) {\n                blockSize = (*(code *)info[10])(data, info[8], offset, start);\n                if (blockSize < 1) {\n                    size = info[3];\n                    goto LAB_080052b2;\n                }\n                offset = offset + blockSize;\n            }\n        }\n    }\n    else if (((0 < info[1]) || (0 < info[0x10])) && (info[0xb] != (code *)0x0)) {\n        uint uVar = *data;\n        *data = 0;\n        if ((size & 0x1000) == 0) {\n            int blockSize = (*(code *)info[0xb])(data, info[8], uSize & 0x1000, 1);\n            if ((blockSize == -1) && (*data != 0)) {\n                if ((*data != 0x1d) && (*data != 0x16)) {\n                    info[3] |= 0x40;\n                    return 0xffffffff;\n                }\n                *data = uVar;\n                return 0;\n            }\n        }\n        else {\n            int blockSize = info[0x15];\n        }\n        if (((int)((uint)info[3] << 0x1d) < 0) && ((blockSize = blockSize - info[1]), info[0xd] != 0)) {\n            blockSize = blockSize - info[0x10];\n        }\n        blockSize = (*(code *)info[0xb])(data, info[8], blockSize, 0);\n        size = info[3];\n        if ((blockSize == -1) && ((0x1d < *data) || (-1 < (int)((DAT_080052c8 >> (*data & 0xff)) << 0x1f)))) {\n            goto LAB_080052b2;\n        }\n        info[1] = 0;\n        info[0] = info[4];\n        if (((int)((uint)size << 0x13) < 0) && ((blockSize != -1) || (*data == 0))) {\n            info[0x15] = blockSize;\n        }\n        int *piVar = (int *)info[0xd];\n        *data = uVar;\n        if (piVar != (int *)0x0) {\n            if (piVar != info + 0x11) {\n                _free_r(data);\n            }\n            info[0xd] = 0;\n            return 0;\n        }\n    }\n    return 0;\n}\n",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051bc",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_080051bc"
        },
        "FUN_08004034": {
            "renaming": {
                "FUN_08004034": "handle_UART5_interrupt_08004034",
                "PTR_uart_handlers_08004048": "uart_handlers_ptr_08004048"
            },
            "code": "void handle_UART5_interrupt_08004034(void)\n{\n  HAL_NVIC_ClearPendingIRQ(UART5_IRQn);\n  UART_HandleTypeDef* uart_handler_ptr = *(UART_HandleTypeDef **)(PTR_uart_handlers_08004048 + 0x10);\n  HAL_UART_IRQHandler(uart_handler_ptr);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004034",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART5_interrupt_08004034"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "abortDMAOperation_08000f8c",
                "*hdma": "*dmaHandle",
                "hdma->State": "dmaHandle->State",
                "hdma->ErrorCode": "dmaHandle->ErrorCode",
                "hdma->Instance->CR": "dmaHandle->Instance->CR",
                "& 0xfffffffe": "& ~(1)"
            },
            "code": "HAL_StatusTypeDef abortDMAOperation_08000f8c(DMA_HandleTypeDef *dmaHandle)\n{\n    if (dmaHandle->State != HAL_DMA_STATE_BUSY) {\n        dmaHandle->ErrorCode = 0x80;\n        return HAL_ERROR;\n    }\n    dmaHandle->State = HAL_DMA_STATE_ABORT;\n    dmaHandle->Instance->CR &= ~(1);\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "abortDMAOperation_08000f8c"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "i2c_handle_08001684",
                "hi2c": "handle",
                "XferOptions": "transfer_options",
                "State": "state",
                "Instance": "instance",
                "PreviousState": "previous_state",
                "Mode": "mode",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback"
            },
            "code": "HAL_StatusTypeDef i2c_handle_08001684(I2C_HandleTypeDef *handle)\n{\n  if (((handle->transfer_options == 4) || (handle->transfer_options == 8)) && (handle->state == HAL_I2C_STATE_LISTEN)) {\n    handle->transfer_options = DAT_08001714;\n    handle->instance->CR2 = handle->instance->CR2 & 0xfffff8ff;\n    handle->instance->SR1 = 0xfffffbff;\n    handle->instance->CR1 = handle->instance->CR1 & 0xfffffbff;\n    handle->previous_state = 0;\n    handle->state = HAL_I2C_STATE_READY;\n    handle->mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  else if (handle->state == HAL_I2C_STATE_BUSY_TX) {\n    handle->transfer_options = DAT_08001714;\n    handle->previous_state = 0x21;\n    handle->state = HAL_I2C_STATE_READY;\n    handle->mode = HAL_I2C_MODE_NONE;\n    handle->instance->CR2 = handle->instance->CR2 & 0xfffff8ff;\n    handle->instance->SR1 = 0xfffffbff;\n    handle->instance->CR1 = handle->instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(handle);\n  }\n  else {\n    handle->instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_08001684"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "is_initialization_completed_080001ac",
                "param_1": "init_ptr",
                "PTR_completed_8667_080001c4": "is_completed_ptr",
                "DAT_080001c8": "init_value"
            },
            "code": "bool is_initialization_completed_080001ac(bool *PTR_completed_8667_080001c4, int *init_ptr) {\n  if (*PTR_completed_8667_080001c4 == false) {\n    if (*init_ptr != 0) {\n      return true;\n    }\n    *PTR_completed_8667_080001c4 = true;\n  }\n  return false;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "is_initialization_completed_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0",
                "file_UNUSED": "file_not_used",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_080040e0(int file_not_used)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_08003868": {
            "renaming": {
                "FUN_08003868": "handle_timer_interrupt_08003868",
                "PTR_timer_handles_08003878": "PTR_timer_handles",
                "TIM_HandleTypeDef": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08003868(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003878_08003878 + 0x34);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003868",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003868"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_memory_with_char_080048cc",
                "__s": "memory",
                "__c": "character",
                "__n": "num_bytes",
                "puVar1": "current_byte"
            },
            "code": "void* fill_memory_with_char_080048cc(void* memory, int character, size_t num_bytes) {\n  char* current_byte;\n  char char_to_fill = (char)character;\n  for (current_byte = (char*)memory; current_byte != (char*)memory + num_bytes; current_byte++) {\n    *current_byte = char_to_fill;\n  }\n  return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "__sfp"
            ],
            "imported": false,
            "current_name": "fill_memory_with_char_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "file_unused_080040e4",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer_unused",
                "dir_UNUSED": "directory_unused"
            },
            "code": "int file_unused_080040e4(int file_descriptor, int pointer_unused, int directory_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_unused_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "getPinNameFromMap_08003506",
                "PinMap_conflict": "PinMap",
                "PinName_conflict": "PinName",
                "map": "pinMapArray"
            },
            "code": "PinName getPinNameFromMap_08003506(void *peripheral, PinMap *pinMapArray) {\n  while( true ) {\n    if (pinMapArray->peripheral == (void *)0x0) {\n      return NC;\n    }\n    if (pinMapArray->peripheral == peripheral) break;\n    pinMapArray++;\n  }\n  return pinMapArray->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "getPinNameFromMap_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "getSystemCoreClockValue_080025e0",
                "PTR_SystemCoreClock_080025e8": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClockValue_080025e0(void)\n{\n    uint32_t* PTR_SystemCoreClock_080025e8 = (uint32_t*)PTR_SystemCoreClock_080025e8;\n    return *PTR_SystemCoreClock_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClockValue_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "calculate_checksum_080040e8",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_length"
            },
            "code": "int calculate_checksum_080040e8(int file_descriptor, char *buffer, int buffer_length)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_checksum_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_in_register_08000a00",
                "this": "modbus",
                "regs": "registers",
                "u8size": "register_size",
                "uVar1": "register_value",
                "uVar2": "bit_position",
                "uVar3": "register_index"
            },
            "code": "int8_t __thiscall set_bit_in_register_08000a00(Modbus *modbus, uint16_t *regs, uint8_t register_size) {\n  uint16_t register_value;\n  uint bit_position;\n  uint register_index;\n  register_value = makeWord(modbus->au8Buffer[2], modbus->au8Buffer[3]);\n  register_index = ((uint)register_value << 0x14) >> 0x18;\n  bit_position = register_value & 0xf;\n  if (modbus->au8Buffer[4] == 0xff) {\n    regs[register_index] = (ushort)(1 << bit_position) | regs[register_index];\n  }\n  else {\n    regs[register_index] = regs[register_index] & ~(ushort)(1 << bit_position);\n  }\n  modbus->u8BufferSize = '\\x06';\n  sendTxBuffer(modbus);\n  return '\b';\n}",
            "called": [
                "sendTxBuffer",
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "__thiscall std::function<void()>::operator__": "invoke_function",
                "this": "function_ptr",
                "function_void___": "function_ptr_type",
                "super__Function_base": "base_function",
                "_M_manager": "function_manager",
                "_M_invoker": "function_invoker",
                "_Any_data": "any_data_type",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080047c0": "invoke_function_080047c0"
            },
            "code": "void __thiscall invoke_function_080047c0(std::function<void()>::function_void___ *function_ptr) {\\n\\\n    if ((function_ptr->super__Function_base)._M_manager != (_Manager_type)0x0) {\\n\\\n        (*function_ptr->_M_invoker)((_Any_data *)function_ptr);\\n\\\n        return;\\n\\\n    }\\n\\\n    __throw_bad_function_call();\\n\\\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "invoke_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_block_with_zeroes_08005374",
                "param_1": "size",
                "param_2": "num_blocks",
                "puVar1": "memory_block",
                "iVar2": "block_size"
            },
            "code": "undefined4* allocate_memory_block_with_zeroes_08005374(undefined4 size, int num_blocks){\n\tint block_size = (num_blocks - 1) * 0x68;\n\tundefined4* memory_block = (undefined4*)_malloc_r(size, block_size + 0x74);\n\tif(memory_block != (undefined4*)0x0){\n\t\t*memory_block = 0;\n\t\tmemory_block[1] = num_blocks;\n\t\tmemory_block[2] = memory_block + 3;\n\t\tmemset(memory_block + 3, 0, block_size + 0x68);\n\t}\n\treturn memory_block;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_with_zeroes_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08004dec;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08004e60;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar6 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08004f42:\n    *puVar3 = uVar7;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "get_stimer_from_htim_08003750",
                "htim": "input_htim",
                "previous_htim": "previous_htim",
                "stimer": "output_stimer"
            },
            "code": "stimer_t * get_stimer_from_htim_08003750(TIM_HandleTypeDef *htim)\n{\n  TIM_HandleTypeDef *previous_htim = htim - 1;\n  stimer_t *stimer = (stimer_t *)&previous_htim->Lock;\n  return stimer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_htim_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "I2C_slave_listen_080014ec",
                "*hi2c": "*i2c_handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmp_reg"
            },
            "code": "HAL_StatusTypeDef I2C_slave_listen_080014ec(I2C_HandleTypeDef *hi2c, uint8_t *data, uint16_t size, uint32_t transfer_options)\n{\n    HAL_StatusTypeDef status;\n    I2C_TypeDef *i2c_instance;\n    uint32_t tmp_reg;\n    if (hi2c->State == HAL_I2C_STATE_LISTEN) {\n        if (data == NULL || size == 0 || hi2c->Lock == HAL_LOCKED) {\n            status = HAL_ERROR;\n        } else {\n            hi2c->Lock = HAL_LOCKED;\n            i2c_instance = hi2c->Instance;\n            if ((i2c_instance->CR1 & 1) == 0) {\n                i2c_instance->CR1 |= 1;\n            }\n            hi2c->Instance->CR1 &= 0xfffff7ff;\n            hi2c->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n            hi2c->Mode = HAL_I2C_MODE_SLAVE;\n            status = HAL_OK;\n            hi2c->ErrorCode = 0;\n            hi2c->pBuffPtr = data;\n            hi2c->XferCount = size;\n            hi2c->XferOptions = transfer_options;\n            hi2c->XferSize = hi2c->XferCount;\n            hi2c->Lock = HAL_UNLOCKED;\n            hi2c->Instance->CR2 |= 0x700;\n        }\n    } else {\n        status = HAL_BUSY;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "I2C_slave_listen_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "allocate_memory_080048dc",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "free_list",
                "piVar2": "temp",
                "extraout_r1": "temp1",
                "ppiVar3": "temp1",
                "ppiVar4": "temp2",
                "ppiVar5": "current",
                "ppiVar6": "next",
                "ppiVar7": "previous",
                "bVar8": "is_current"
            },
            "code": "void allocate_memory_080048dc(int* error_code, int size, int arg3, int arg4) {\n  if (size == 0) {\n    return;\n  }\n  int** previous = (int**)(size - 4);\n  if (*(int*)(size - 4) < 0) {\n    previous = (int**)((int)previous + *(int*)(size - 4));\n  }\n  __malloc_lock();\n  void* free_list = PTR___malloc_free_list_08004974;\n  int** current = *(int***)(PTR___malloc_free_list_08004974);\n  if (current == (int**)0x0) {\n    previous[1] = (int*)0x0;\n    *(int***)free_list = previous;\n    int** temp1 = (int**)arg3;\n    int** temp2 = (int**)free_list;\n  }\n  else if (previous < current) {\n    int** next = (int**)current[1];\n    int** next_next = (int**)current;\n    bool is_current = current == next_next;\n    if (is_current) {\n      next_next = (int**)current[0];\n      current = (int**)current[1];\n    }\n    previous[1] = (int*)next;\n    if (is_current) {\n      next_next = (int**)((int)next_next + (int)next);\n      *previous = (int*)next_next;\n    }\n    *(int***)free_list = previous;\n  }\n  else {\n    while (true) {\n      int** next = current;\n      current = (int**)next[1];\n      if (current == (int**)0x0) break;\n    }\n    int** next_next = (int**)((int)next + (int)*next);\n    if (previous == (int**)((int)next + (int)*next)) {\n      next_next = (int**)((int)next_next + (int)*next_next);\n      *next = (int*)next_next;\n      if (current == (int**)((int)next + (int)next_next)) {\n        int* temp = *current;\n        int** temp_next = (int**)current[1];\n        next[1] = (int*)temp_next;\n        next_next = (int**)((int)next_next + (int)temp);\n        *next = (int*)next_next;\n      }\n    }\n    else if (previous < (int**)((int)next + (int)*next)) {\n      *error_code = 0xc;\n    }\n    else {\n      next_next = (int**)((int)previous + (int)*previous);\n      bool is_current = current == next_next;\n      if (is_current) {\n        next_next = (int**)*current;\n        current = (int**)current[1];\n      }\n      previous[1] = (int*)current;\n      if (is_current) {\n        next_next = (int**)((int)next_next + (int)*previous);\n        *previous = (int*)next_next;\n      }\n      next[1] = (int*)previous;\n    }\n  }\n  __malloc_unlock(error_code, temp1, temp2, arg4);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "__swsetup_r",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "handle_timer_interrupt_08003754",
                "htim": "timer_handler",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "timer_interrupt_handler",
                "_func_void_stimer_t_ptr_uint32_t": "_function_pointer",
                "HAL_TIM_ACTIVE_CHANNEL_1": "ACTIVE_CHANNEL_1"
            },
            "code": "void handle_timer_interrupt_08003754(TIM_HandleTypeDef *timer_handler)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handler);\n  if ((timer_obj->timer_interrupt_handler != (_func_void_stimer_t_ptr_uint32_t *)0x0) &&\n     (timer_handler->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->timer_interrupt_handler)(timer_obj,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "i2c_listen_08001578",
                "hi2c": "handle",
                "pIVar1": "instance"
            },
            "code": "HAL_StatusTypeDef i2c_listen_08001578(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance;\n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  instance = handle->Instance;\n  if ((instance->CR1 & 1) == 0) {\n    instance->CR1 |= 1;\n  }\n  instance->CR1 |= 0x400;\n  instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08001578"
        },
        "FUN_080035ac": {
            "renaming": {
                "FUN_080035ac": "handle_rtc_alarm_interrupt_080035ac",
                "PTR_RtcHandle_080035b8": "rtc_handle"
            },
            "code": "void handle_rtc_alarm_interrupt_080035ac(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_080035b8 = (RTC_HandleTypeDef*)PTR_RtcHandle_080035b8;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_080035b8);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_interrupt_080035ac"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "flag",
                "param_2": "input_value",
                "DAT_0800485c": "should_use_flag",
                "CONCAT44": "concatenate_values"
            },
            "code": "longlong calculate_result_08004844(undefined4 flag, uint64_t input_value) {\n    if (DAT_0800485c(flag)) {\n        return CONCAT44(input_value, 2);\n    }\n    return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_gpio_type_0800318c",
                "port_idx": "port_index",
                "DAT_080031d0": "port_0",
                "DAT_080031f8": "port_1",
                "DAT_080031d4": "port_2",
                "DAT_080031d8": "port_3",
                "DAT_080031dc": "port_4",
                "DAT_080031e0": "port_5",
                "DAT_080031e4": "port_6",
                "DAT_080031e8": "port_7",
                "DAT_080031ec": "port_8",
                "DAT_080031f0": "port_9",
                "DAT_080031f4": "port_10"
            },
            "code": "GPIO_TypeDef* get_gpio_type_0800318c(uint32_t port_idx)\n{\n    switch(port_idx) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return (GPIO_TypeDef*) 0x0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_gpio_type_0800318c"
        },
        "FUN_080001d0": {
            "renaming": {
                "FUN_080001d0": "execute_completed_function_if_exists_080001d0",
                "PTR_completed_8667_08000210": "completed",
                "DAT_08000204": "condition",
                "DAT_08000214": "function",
                "PTR_object_8672_0800020c": "object"
            },
            "code": "void execute_completed_function_if_exists_080001d0(void)\n{\n    int* PTR_completed_8667_08000210 = (int*)PTR_PTR_completed_8667_08000210_8667_08000210;\n    code* DAT_08000214 = DAT_08000214;\n\n    if (DAT_08000204 == 0 || DAT_08000214 == NULL) {\n        return;\n    }\n\n    if (*PTR_completed_8667_08000210 != 0) {\n        (*DAT_08000214)(PTR_PTR_completed_8667_08000210_8667_08000210, PTR_PTR_object_8672_0800020c_8672_0800020c);\n    }\n    else {\n        (*DAT_08000214)();\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d0",
            "calling": [],
            "imported": false,
            "current_name": "execute_completed_function_if_exists_080001d0"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_gpio_irq_080047d0",
                "GPIO_Pin": "gpio_pin",
                "bVar1": "pin_id"
            },
            "code": "void check_gpio_irq_080047d0(uint16_t gpio_pin) {\n  uint8_t pin_id = get_pin_id(gpio_pin);\n  if (*(int *)(PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 0xc) != 0) {\n    std::function<void()>::operator__((function_void___ *)(PTR_gpio_irq_conf_080047ec + (uint)pin_id * 0x14 + 4));\n  }\n  return;\n}",
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_gpio_irq_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_for_status_080040f8",
                "status_UNUSED": "status"
            },
            "code": "void wait_for_status_080040f8(int status) {\n                      while(true) {\n                          // do nothing, just wait for status\n                      }\n                  }",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "PTR_errno_08005028": "errno_ptr",
                "pcVar2": "mem_ptr"
            },
            "code": "void allocate_memory_0800500c(int *error_code, int size)\n{\n  undefined *error_ptr;\n  caddr_t mem_ptr;\n  error_ptr = PTR_errno_08005028;\n  *(undefined4 *)PTR_errno_08005028 = 0;\n  mem_ptr = _sbrk(size);\n  if ((mem_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_value_080023b4",
                "DAT_0800247c": "data_pointer",
                "DAT_08002484": "default_value_1",
                "DAT_08002480": "default_value_2",
                "PTR_0800247c": "pointer_1",
                "PTR_08002484": "pointer_2",
                "PTR_08002480": "pointer_3"
            },
            "code": "uint32_t calculate_value_080023b4(void)\n{\n  uint32_t flags = *(uint32_t *)(DAT_0800247c + 8) & 0xc;\n  if (flags == 4) {\n    return DAT_08002484;\n  }\n  if (flags != 8) {\n    return DAT_08002480;\n  }\n  uint32_t divisor = *(uint32_t *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint32_t *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint32_t dividend = (uint32_t)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    uint32_t factor = (((uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f)) * 8 + (uint32_t)CARRY4(dividend * 0x3d08,dividend)) * 0x400 | dividend * 0x3d09 >> 0x16;\n    divisor = __aeabi_uldivmod(dividend * 16000000, factor, divisor, 0);\n  }\n  else {\n    uint32_t dividend = (uint32_t)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    uint32_t factor = (((uint32_t)(dividend * 0x20 < dividend) * -0x3f - (uint32_t)(dividend * 0x7c0 < dividend * 0x1f)) * 8 + (uint32_t)CARRY4(dividend * 0x3d08,dividend)) * 0x200;\n    divisor = __aeabi_uldivmod(dividend * 8000000, factor, divisor, 0);\n  }\n  return divisor / ((((uint32_t)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n}",
            "called": [
                "__aeabi_uldivmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_value_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "check_gpio_pin_080011a4",
                "GPIO_Pin": "pin",
                "DAT_080011bc": "reg_base"
            },
            "code": "void check_gpio_pin_080011a4(uint16_t pin) {\n  uint32_t* reg = (uint32_t*)(DAT_080011bc + 0x14);\n  if ((*reg & (uint32_t)pin) != 0) {\n    *reg = (uint32_t)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [
                "EXTI0_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_gpio_pin_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "i2c_handle_errors_08001e68",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "uVar3": "sr1",
                "uVar4": "cr2",
                "DAT_08001f38": "I2C_SR1_ARLO",
                "0x100": "I2C_CR2_ITEVTEN",
                "1": "I2C_ERROR_ARLO",
                "2": "I2C_ERROR_AF",
                "4": "I2C_ERROR_BERR",
                "8": "I2C_ERROR_OVR",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "0x21": "0x21",
                "I2C_Slave_AF": "i2c_slave_ack_failure",
                "HAL_I2C_MODE_MASTER": "HAL_I2C_MODE_MASTER",
                "I2C_CR1_STOP": "I2C_CR1_STOP",
                "I2C_ITError": "i2c_error_handler"
            },
            "code": "void i2c_handle_errors_08001e68(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state;\n  I2C_TypeDef *instance;\n  uint16_t sr1;\n  uint16_t cr2;\n  instance = handle->Instance;\n  sr1 = instance->SR1;\n  cr2 = instance->CR2;\n  if (((sr1 & DAT_08001f38) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n    handle->ErrorCode = handle->ErrorCode | I2C_ERROR_ARLO;\n    instance->SR1 = 0xfffffeff;\n  }\n  if (((sr1 & I2C_SR1_AF) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n    handle->ErrorCode = handle->ErrorCode | I2C_ERROR_AF;\n    instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1 & I2C_SR1_BERR) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n    state = handle->State;\n    if (((handle->Mode == HAL_I2C_MODE_SLAVE) && (handle->XferCount == 0)) && (((state == HAL_I2C_STATE_BUSY_TX) || (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((state == HAL_I2C_STATE_LISTEN) && (handle->PreviousState == 0x21)))) {\n      i2c_slave_ack_failure(handle);\n    }\n    else {\n      handle->ErrorCode = handle->ErrorCode | I2C_ERROR_BERR;\n      if (handle->Mode == HAL_I2C_MODE_MASTER) {\n        instance->CR1 = instance->CR1 | I2C_CR1_STOP;\n      }\n      instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1 & I2C_SR1_OVR) != 0) && ((cr2 & I2C_CR2_ITEVTEN) != 0)) {\n    handle->ErrorCode = handle->ErrorCode | I2C_ERROR_OVR;\n    instance->SR1 = 0xfffff7ff;\n  }\n  if (handle->ErrorCode != 0) {\n    i2c_error_handler(handle);\n  }\n  return;\n}",
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [
                "I2C1_ER_IRQHandler",
                "I2C2_ER_IRQHandler",
                "I2C3_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_errors_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "read_i2c_data_080019a0",
                "*hi2c": "*i2c_handle",
                "puVar1": "data_ptr"
            },
            "code": "HAL_StatusTypeDef read_i2c_data_080019a0(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *data_ptr;\n  if (i2c_handle->XferCount == 4) {\n    i2c_handle->Instance->CR2 &= 0xfffffbff;\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  else if (i2c_handle->XferCount == 3) {\n    i2c_handle->Instance->CR2 &= 0xfffffbff;\n    i2c_handle->Instance->CR1 &= 0xfffffbff;\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  else if (i2c_handle->XferCount == 2) {\n    if (i2c_handle->XferOptions - 1 < 2) {\n      i2c_handle->Instance->CR1 &= 0xfffffbff;\n      i2c_handle->Instance->CR1 |= 0x100;\n    }\n    else {\n      i2c_handle->Instance->CR1 |= 0x200;\n    }\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    i2c_handle->Instance->CR2 &= 0xfffffcff;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->PreviousState = 0;\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2c_handle);\n    }\n    else {\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "handle_uart_data_08003f24",
                "*huart": "*uart_handle",
                "byte": "uint8_t",
                "bVar1": "uart_index_value",
                "uVar2": "uart_index_value",
                "PTR_rx_callback_08003f40": "PTR_rx_callback_address_08003f40",
                "PTR_rx_callback_obj_08003f44": "PTR_rx_callback_obj_address_08003f44"
            },
            "code": "void handle_uart_data_08003f24(UART_HandleTypeDef *uart_handle) {\n  uint8_t uart_index_value = uart_index(uart_handle);\n  uint32_t callback_address = (uint32_t) *(code **)(PTR_rx_callback_08003f40 + uart_index_value * 4);\n  uint32_t callback_obj_address = *(uint32_t *)(PTR_rx_callback_obj_08003f44 + uart_index_value * 4);\n  if (uart_index_value < 10) {\n    (* (code *) callback_address)(callback_obj_address);\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_data_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_gpio_irq_configuration_080046b4"
            },
            "code": "void initialize_gpio_irq_configuration_080046b4(int is_initialized, int priority) {\n    if (is_initialized != 1) {\n        return;\n    }\n    if (priority == 0xffff) {\n        int* gpio_irq_conf = PTR_gpio_irq_conf_08004754;\n        gpio_irq_conf[0] = 6;\n        gpio_irq_conf[0xc / sizeof(int)] = 0;\n        gpio_irq_conf[0x14] = 7;\n        gpio_irq_conf[0x20 / sizeof(int)] = 0;\n        gpio_irq_conf[0x28] = 8;\n        gpio_irq_conf[0x34 / sizeof(int)] = 0;\n        gpio_irq_conf[0x3c] = 9;\n        gpio_irq_conf[0x48 / sizeof(int)] = 0;\n        gpio_irq_conf[0x50] = 10;\n        gpio_irq_conf[0x5c / sizeof(int)] = 0;\n        gpio_irq_conf[100] = 0x17;\n        gpio_irq_conf[0x70 / sizeof(int)] = 0;\n        gpio_irq_conf[0x78] = 0x17;\n        gpio_irq_conf[0x84 / sizeof(int)] = 0;\n        gpio_irq_conf[0x8c] = 0x17;\n        gpio_irq_conf[0x98 / sizeof(int)] = 0;\n        gpio_irq_conf[0xa0] = 0x17;\n        gpio_irq_conf[0xac / sizeof(int)] = 0;\n        gpio_irq_conf[0xb4] = 0x17;\n        gpio_irq_conf[0xc0 / sizeof(int)] = 0;\n        gpio_irq_conf[200] = 0x28;\n        gpio_irq_conf[0xd4 / sizeof(int)] = 0;\n        gpio_irq_conf[0xdc] = 0x28;\n        gpio_irq_conf[0xe8 / sizeof(int)] = 0;\n        gpio_irq_conf[0xf0] = 0x28;\n        gpio_irq_conf[0xfc / sizeof(int)] = 0;\n        gpio_irq_conf[0x104] = 0x28;\n        gpio_irq_conf[0x110 / sizeof(int)] = 0;\n        gpio_irq_conf[0x118] = 0x28;\n        gpio_irq_conf[0x124 / sizeof(int)] = 0;\n        gpio_irq_conf[300] = 0x28;\n        gpio_irq_conf[0x138 / sizeof(int)] = 0;\n        __aeabi_atexit(0, DAT_0800475c, PTR___dso_handle_08004758);\n    }\n    return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "receive_byte_0800160e",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "puVar2": "receive_buffer_ptr"
            },
            "code": "HAL_StatusTypeDef receive_byte_0800160e(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *receive_buffer_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    receive_buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = receive_buffer_ptr + 1;\n    *receive_buffer_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_byte_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_uwTick_08000e18",
                "PTR_uwTick_08000e28": "uwTick",
                "PTR_uwTickFreq_08000e2c": "uwTickFreq",
                "DAT_uwTickFreq_08000e2c": "tick_freq"
            },
            "code": "void update_uwTick_08000e18(void)\n{\n  uint8_t DAT_PTR_uwTick_08000e28Freq_08000e2c = *PTR_PTR_uwTick_08000e28Freq_08000e2c;\n  uint32_t* tick_ptr = PTR_uwTick_08000e28;\n  *tick_ptr = DAT_PTR_uwTick_08000e28Freq_08000e2c + *tick_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "configure_GPIO_pin_08003486",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "GPIOx": "GPIO_port",
                "GPIO_InitStructure": "GPIO_config",
                "set_GPIO_Port_Clock": "get_GPIO_Port_Clock",
                "GPIO_InitStructure.Pin": "GPIO_config.Pin",
                "GPIO_InitStructure.Speed": "GPIO_config.Speed",
                "GPIO_InitStructure.Mode": "GPIO_config.Mode",
                "GPIO_InitStructure.Pull": "GPIO_config.Pull"
            },
            "code": "void configure_GPIO_pin_08003486(PinName_conflict pin, uint32_t mode, uint32_t pull)\n{\n  GPIO_TypeDef *GPIO_port;\n  GPIO_InitTypeDef GPIO_config;\n  \n  GPIO_port = get_GPIO_Port_Clock((uint)((int)pin << 0x18) >> 0x1c);\n  GPIO_config.Pin = 1 << ((int)pin & 0xfU) & 0xffff;\n  GPIO_config.Speed = GPIO_SPEED_FREQ_HIGH;\n  GPIO_config.Mode = mode;\n  GPIO_config.Pull = pull;\n  HAL_GPIO_Init(GPIO_port, &GPIO_config);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pin_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "seek_and_set_flag_08005662",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "bVar3": "seek_failed"
            },
            "code": "void seek_and_set_flag_08005662(int file_descriptor, int buffer_address)\n{\n  int seek_result;\n  ushort flag;\n  bool seek_failed;\n\n  seek_result = _lseek_r(file_descriptor, (int)*(short *)(buffer_address + 0xe));\n  seek_failed = seek_result == -1;\n  if (seek_failed) {\n    flag = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer_address + 0x54) = seek_result;\n    flag = *(ushort *)(buffer_address + 0xc) | 0x1000;\n  }\n  if (seek_failed) {\n    *(ushort *)(buffer_address + 0xc) = flag;\n  }\n  if (!seek_failed) {\n    *(ushort *)(buffer_address + 0xc) = flag;\n  }\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_set_flag_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "read_serial_data_080042ac",
                "obj": "serial_object",
                "iVar1": "read_result",
                "uVar2": "next_rx_head",
                "c": "received_char",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "rx_buff": "rx_buffer"
            },
            "code": "void read_serial_data_080042ac(serial_t_conflict *serial_object) {\n  int read_result;\n  ushort next_rx_head;\n  uchar received_char;\n  \n  read_result = uart_getc((serial_t *)serial_object, &received_char);\n  if ((read_result == 0) && (next_rx_head = serial_object->rx_head + 1 & 0x3f, next_rx_head != serial_object->rx_tail)) {\n    serial_object->rx_buffer[serial_object->rx_head] = received_char;\n    serial_object->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "read_serial_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "handle_i2c_transfer_08001864",
                "hi2c": "i2c_handle",
                "uVar1": "transfer_options",
                "pbVar2": "data_buffer"
            },
            "code": "HAL_StatusTypeDef handle_i2c_transfer_08001864(I2C_HandleTypeDef *i2c_handle) {\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2c_handle->XferCount == 0) {\n      if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n        i2c_handle->PreviousState = 0;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2c_handle);\n        }\n      }\n      else {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->PreviousState = 0x11;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      uint8_t *data_buffer = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = data_buffer + 1;\n      i2c_handle->Instance->DR = (uint)*data_buffer;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_clk_source_08000f2c",
                "CLKSource": "clk_source",
                "*DAT_08000f48": "*clk_reg"
            },
            "code": "void set_clk_source_08000f2c(uint32_t clk_source) {\n  if (clk_source != 4) {\n    *DAT_08000f48 &= 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 |= 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clk_source_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_irq_handler_08000ec4",
                "IRQn": "irq",
                "uVar1": "irq_num",
                "DAT_08000edc": "IRQ_REG_BASE",
                "PTR_08000ed8": "irq_reg"
            },
            "code": "void set_irq_handler_08000ec4(IRQn_Type_conflict irq)\n{\n  uint32_t irq_num = (uint32_t)irq;\n  if (irq_num >= 0) {\n    uint32_t* PTR_08000ed8 = (uint32_t*)(DAT_08000edc + (irq_num >> 5) * 4);\n    *PTR_08000ed8 = 1 << (irq_num & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_irq_handler_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkSerialForData_08004338",
                "DAT_0800435c": "serialDataAvailable",
                "PTR_Serial3_08004360": "serialPort"
            },
            "code": "void checkSerialForData_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    HardwareSerial::available((HardwareSerial *)PTR_Serial3_08004360);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialForData_08004338"
        },
        "FUN_08003928": {
            "renaming": {
                "FUN_08003928": "handle_i2c_error_interrupt_08003928",
                "PTR_i2c_handles_08003934": "i2c_handle_ptr"
            },
            "code": "void handle_i2c_error_interrupt_08003928(void)\n{\n  HAL_I2C_ER_IRQHandler(*PTR_i2c_handles_08003934);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003928",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08003928"
        },
        "FUN_0800468c": {
            "renaming": {
                "FUN_0800468c": "free_gpio_irq_configurations_0800468c",
                "param_1": "param_list",
                "puVar1": "current_node",
                "puVar2": "previous_node"
            },
            "code": "void free_gpio_irq_configurations_0800468c(void *param_list)\n{\n  undefined *current_node;\n  undefined *previous_node;\n\n  current_node = PTR___malloc_free_list_080046ac;\n\n  while (previous_node = current_node, previous_node != PTR_gpio_irq_conf_080046b0) {\n    current_node = previous_node - 0x14;\n    if (*(code **)(previous_node - 8) != (code *)0x0) {\n      (**(code **)(previous_node - 8))(previous_node - 0x10, previous_node - 0x10, 3);\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800468c",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_0800468c"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "get_interrupt_080005e0",
                "a0": "interrupt_num",
                "a1": "data",
                "a2": "flag"
            },
            "code": "uint32_t get_interrupt_080005e0(uint32_t interrupt_num, uint32_t data, int32_t flag)\n{\n  software_interrupt(interrupt_num);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "get_interrupt_080005e0"
        },
        "FUN_0800311c": {
            "renaming": {
                "FUN_0800311c": "reset_uart_transfer_counts_0800311c",
                "*hdma": "*dma_handle",
                "*huart": "*uart_handle",
                "hdma->Parent": "dma_handle->Parent",
                "huart->RxXferCount": "uart_handle->RxXferCount",
                "huart->TxXferCount": "uart_handle->TxXferCount",
                "HAL_UART_ErrorCallback(huart)": "HAL_UART_ErrorCallback(uart_handle)"
            },
            "code": "void reset_uart_transfer_counts_0800311c(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800311c",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_0800311c"
        },
        "FUN_0800420c": {
            "renaming": {
                "FUN_0800420c": "calculateNextTail_0800420c",
                "obj": "serialObj",
                "iVar3": "nextTail",
                "uVar1": "nextTailUShort",
                "uVar2": "maskedNextTail"
            },
            "code": "int calculateNextTail_0800420c(serial_t_conflict *serialObj) {\n  int nextTail = serialObj->tx_tail + 1;\n  ushort nextTailUShort = (ushort)nextTail;\n  uint16_t maskedNextTail = nextTailUShort & 0x7f;\n  if (nextTail == 0) {\n    maskedNextTail = -(-nextTailUShort & 0x7f);\n  }\n  serialObj->tx_tail = maskedNextTail;\n  if (serialObj->tx_head != serialObj->tx_tail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800420c",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTail_0800420c"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "perform_afl_call_080005e4",
                "ticks": "num_ticks",
                "uVar1": "result",
                "PTR_noHyperCall_080005fc": "no_hypercall_ptr",
                "aflCall": "call_afl_function"
            },
            "code": "uint32_t perform_afl_call_080005e4(int ticks) {\n  uint32_t result;\n  if (*PTR_noHyperCall_080005fc != 0) {\n    return 0;\n  }\n  result = call_afl_function(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "perform_afl_call_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "sendModbusPacket_0800076c",
                "this": "modbusInstance",
                "u8length": "packetLength",
                "uVar1": "crc",
                "uVar4": "nextIndex",
                "u8txenpin": "transmitEnablePin",
                "u8serno": "serialNumber",
                "iVar2": "status",
                "au8Buffer": "buffer",
                "u8BufferSize": "bufferSize",
                "port": "serialPort",
                "u16timeOut": "timeoutInterval",
                "u32timeOut": "timeout",
                "u16OutCnt": "outgoingPacketCount"
            },
            "code": "void __thiscall sendModbusPacket_0800076c(Modbus *modbusInstance){\n  byte packetLength = modbusInstance->bufferSize;\n  uint16_t crc = calcCRC(modbusInstance, packetLength);\n  modbusInstance->buffer[packetLength] = (uint8_t)((uint)crc >> 8);\n  uint nextIndex = packetLength + 1 & 0xff;\n  modbusInstance->buffer[nextIndex] = (uint8_t)crc;\n  modbusInstance->bufferSize = (char)nextIndex + '\\x01';\n  if (1 < modbusInstance->transmitEnablePin) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 1);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[1])(modbusInstance->port, modbusInstance->buffer, (uint)modbusInstance->bufferSize);\n  }\n  if (1 < modbusInstance->transmitEnablePin) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    do {\n      int status = (*(modbusInstance->port->super_Stream).super_Print._vptr_Print[3])();\n    } while (status >= 0);\n  }\n  modbusInstance->bufferSize = '\\0';\n  uint32_t currentTime = millis();\n  modbusInstance->timeout = currentTime + modbusInstance->timeoutInterval;\n  modbusInstance->outgoingPacketCount++;\n}",
            "called": [
                "digitalWrite",
                "millis",
                "calcCRC"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "process_FC5",
                "process_FC3",
                "process_FC1",
                "process_FC6",
                "poll",
                "process_FC15",
                "process_FC16"
            ],
            "imported": false,
            "current_name": "sendModbusPacket_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_08004460": "set_serial_tx_pin",
                "this": "serial",
                "_tx": "pin_index",
                "PVar1": "pin",
                "PTR_digitalPin_08004478": "digital_pin_ptr_08004478",
                "FUN_08004460": "set_serial_tx_pin_08004460"
            },
            "code": "void set_serial_tx_pin_08004460(HardwareSerial *serial, uint32_t pin_index) {\n\tPinName pin;\n\tif (pin_index < 0x60) {\n\t\tpin = *(PinName *)(PTR_digitalPin_08004478 + pin_index * 2);\n\t} else {\n\t\tpin = NC;\n\t}\n\t(serial->_serial).pin_tx = pin;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_serial_tx_pin_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "toggle_gpio_pin_state_08001198",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "uint": "uint32_t",
                "BSRR": "bit_set_reset_register"
            },
            "code": "void toggle_gpio_pin_state_08001198(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint32_t)pin << 16;\n  } else {\n    gpio->BSRR = (uint32_t)pin;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "toggle_gpio_pin_state_08001198"
        },
        "FUN_080044fc": {
            "renaming": {
                "FUN_080044fc": "initialize_static_variables_080044fc"
            },
            "code": "void initialize_static_variables_080044fc(void)\n{\n    __static_initialization_and_destruction_0(1,0xffff);\n    return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044fc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_080044fc"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "is_pin_high_08003138",
                "PinName_conflict": "pin",
                "map": "map",
                "byte": "uint8_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "_Bool is_pin_high_08003138(PinName_conflict pin, uint32_t *map) {\n    uint32_t shifted_pin = (uint32_t) pin << 24;\n    uint32_t index = shifted_pin >> 28;\n    uint32_t bit_position = (uint32_t) pin & 0xF;\n    uint8_t byte_at_index = (uint8_t) map[index];\n    uint8_t shifted_byte = byte_at_index >> bit_position;\n    return (_Bool) (shifted_byte & 1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "digitalWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_high_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_080005dc": {
            "renaming": {
                "FUN_080005dc": "do_nothing_080005dc"
            },
            "code": "\nvoid do_nothing_080005dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080005dc"
        },
        "FUN_08003810": {
            "renaming": {
                "FUN_08003810": "handle_timer_interrupts_08003810",
                "PTR_timer_handles_08003828": "PTR_timer_handles_08003828",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupts_08003810(void)\n{\n  TIM_HandleTypeDef* timer_handle_1 = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003828 + 0x1c);\n  TIM_HandleTypeDef* timer_handle_2 = *(TIM_HandleTypeDef**)(PTR_timer_handles_08003828 + 0x30);\n\n  if (timer_handle_1 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_1);\n  }\n\n  if (timer_handle_2 != NULL) {\n    HAL_TIM_IRQHandler(timer_handle_2);\n  }\n\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003810",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupts_08003810"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "configureTimerChannel_08002848",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState",
                "CCER": "channelControlRegister",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void configureTimerChannel_08002848(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState) {\n\tuint32_t channelMask = 1 << (channel & 0xff);\n\ttimer->CCER &= ~channelMask;\n\ttimer->CCER |= channelState << (channel & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "configureTimerChannel_08002848"
        },
        "FUN_08003938": {
            "renaming": {
                "FUN_08003938": "handle_i2c_event_08003938",
                "PTR_i2c_handles_08003944": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_event_08003938(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)(PTR_i2c_handles_08003944_08003944 + 4);\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003938",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_08003938"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "get_uart_rx_and_g_state_0800312c",
                "*huart": "uart_handle_ptr",
                "huart": "uart_handle",
                "RxState": "rx_state",
                "gState": "g_state",
                "HAL_UART_StateTypeDef": "uart_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_and_g_state_0800312c(UART_HandleTypeDef *huart) {\n  HAL_UART_StateTypeDef rx_state = huart->RxState;\n  HAL_UART_StateTypeDef g_state = huart->gState;\n  return rx_state | g_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_and_g_state_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "configureTimerChannel_080028f0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "HAL_StatusTypeDef": "return type"
            },
            "code": "HAL_StatusTypeDef configureTimerChannel_080028f0(TIM_HandleTypeDef *timerHandle, uint32_t channel)\n{\n  TIM_TypeDef *timerInstance = timerHandle->Instance;\n  TIM_CCxNChannelCmd(timerInstance, channel, 0);\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->BDTR = timerInstance->BDTR & 0xffff7fff;\n  }\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "configureTimerChannel_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_uwTick_value_08000e30",
                "PTR_uwTick_08000e38": "PTR_uwTick",
                "uint32_t": "unsigned int",
                "uwTick_ptr": "uwTick_pointer",
                "uwTick_value": "uwTick_value"
            },
            "code": "uint32_t get_uwTick_value_08000e30(void)\n{\n    uint32_t* uwTick_ptr = (uint32_t*) PTR_uwTick_08000e38_08000e38;\n    uint32_t uwTick_value = *uwTick_ptr;\n    return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "GetCurrentMilli",
                "HAL_UART_Transmit",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_PWREx_EnableOverDrive",
                "UART_WaitOnFlagUntilTimeout",
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "reset_DAC_state_08000f56",
                "hdac": "dac_handle",
                "DAC_HandleTypeDef": "DAC_handle_type",
                "HAL_DAC_STATE_BUSY": "DAC_busy",
                "HAL_DAC_MspDeInit": "DAC_MspDeInit",
                "ErrorCode": "DAC_error_code",
                "HAL_DAC_STATE_RESET": "DAC_reset",
                "HAL_UNLOCKED": "DAC_unlocked",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef reset_DAC_state_08000f56(DAC_HandleTypeDef *dac_handle)\n{\n  if (dac_handle != NULL) {\n    dac_handle->State = HAL_DAC_STATE_BUSY;\n    HAL_DAC_MspDeInit(dac_handle);\n    dac_handle->ErrorCode = 0;\n    dac_handle->State = HAL_DAC_STATE_RESET;\n    dac_handle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "reset_DAC_state_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "transmitData_0800295c",
                "*huart": "*uart",
                "uVar1": "dataLength",
                "pbVar2": "dataPtr",
                "huart->gState": "uart->gState",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "huart->Init": "uart->Init",
                "huart->Instance->DR": "uart->Instance->DR",
                "huart->pTxBuffPtr": "uart->pTxBuffPtr",
                "(ushort *)huart->pTxBuffPtr": "(ushort *)uart->pTxBuffPtr",
                "(uart->Init).WordLength": "(uart->Init).WordLength",
                "(uart->Init).Parity": "(uart->Init).Parity",
                "uart->TxXferCount": "uart->TxXferCount",
                "uart->Instance->CR1": "uart->Instance->CR1",
                "0xffffff7f": "0xffffff7f",
                "0x40": "0x40",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef transmitData_0800295c(UART_HandleTypeDef *uart)\n{\n  uint16_t dataLength;\n  byte *dataPtr;\n  \n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  \n  dataLength = (uart->Init).WordLength;\n  if (dataLength == 0x1000) {\n    uart->Instance->DR = *(ushort *)uart->pTxBuffPtr & 0x1ff;\n    if ((uart->Init).Parity == 0) {\n      uart->pTxBuffPtr = uart->pTxBuffPtr + 2;\n    }\n    else {\n      uart->pTxBuffPtr = uart->pTxBuffPtr + 1;\n    }\n  }\n  else {\n    dataPtr = uart->pTxBuffPtr;\n    uart->pTxBuffPtr = dataPtr + 1;\n    uart->Instance->DR = (uint)*dataPtr;\n  }\n  \n  dataLength = uart->TxXferCount - 1;\n  uart->TxXferCount = dataLength;\n  if (dataLength == 0) {\n    uart->Instance->CR1 = uart->Instance->CR1 & 0xffffff7f;\n    uart->Instance->CR1 = uart->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmitData_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "get_dac_pin_functionality_08003380",
                "PinName_conflict": "PinName",
                "uVar1": "pin_functionality",
                "PTR_PinMap_DAC_08003398": "PTR_DAC_PinMap"
            },
            "code": "uint32_t get_dac_pin_functionality_08003380(PinName_conflict pin)\n{\n  uint32_t pin_functionality = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_DAC_08003398);\n  if ((pin_functionality << 12) >> 27 != 2) {\n    return 0;\n  }\n  return 16;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "get_dac_pin_functionality_08003380"
        },
        "FUN_08005686": {
            "renaming": {
                "FUN_08005686": "closeFileDescriptor_08005686",
                "param_1": "stream",
                "param_2": "fileDescriptorOffset"
            },
            "code": "void closeFileDescriptor_08005686(void* stream, int fileDescriptorOffset) {\n    int fileDescriptor = *(short*)(fileDescriptorOffset + 0xe);\n    _close_r(stream, fileDescriptor);\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005686",
            "calling": [],
            "imported": false,
            "current_name": "closeFileDescriptor_08005686"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "configure_output_pin_08004110",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_configured",
                "pin": "pin_name",
                "PTR_digitalPin_080041a8": "digitalPin_array",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured_pin",
                "PTR_g_anOutputPinConfigured_080041ac": "output_pin_array",
                "pin_in_pinmap": "is_pin_in_pinmap",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_DAC_080041b0": "DAC_PinMap_array",
                "dac_stop": "dac_stop",
                "PTR_PinMap_PWM_080041b4": "PWM_PinMap_array",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "switch": "switch",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_080041b8": "digPinConfigured_array"
            },
            "code": "void configure_output_pin_08004110(uint32_t pin_number, uint32_t mode)\n{\n  _Bool is_pin_configured;\n  PinName_conflict pin_name;\n  \n  if (pin_number < 0x60) {\n    pin_name = *(PinName_conflict *)(PTR_digitalPin_080041a8 + pin_number * 2);\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_configured = is_pin_configured_pin(pin_name, PTR_g_anOutputPinConfigured_080041ac);\n    if (is_pin_configured) {\n      if (is_pin_in_pinmap(pin_name, PTR_PinMap_DAC_080041b0)) {\n        dac_stop(pin_name);\n      }\n      else if (is_pin_in_pinmap(pin_name, PTR_PinMap_PWM_080041b4)) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name, PTR_g_anOutputPinConfigured_080041ac);\n    }\n    switch(mode) {\n    case 0:\n      digital_io_init(pin_name, 0, 0);\n      break;\n    case 1:\n      digital_io_init(pin_name, 1, 0);\n      break;\n    case 2:\n      digital_io_init(pin_name, 0, 1);\n      break;\n    case 3:\n      digital_io_init(pin_name, 0, 2);\n    }\n    set_pin_configured(pin_name, PTR_g_digPinConfigured_080041b8);\n  }\n  return;\n}",
            "called": [
                "pin_in_pinmap",
                "digital_io_init",
                "set_pin_configured",
                "reset_pin_configured",
                "dac_stop",
                "is_pin_configured",
                "pwm_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "configure_output_pin_08004110"
        },
        "FUN_08005320": {
            "renaming": {
                "FUN_08005320": "walk_reentrant_functions_08005320",
                "param_1": "reent"
            },
            "code": "void walk_reentrant_functions_08005320(void* reent)\n{\n  _fwalk_reent(reent, DAT_08005328);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005320",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_functions_08005320"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "calculate_ticks_08000ee0",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr",
                "DAT_08000f04": "ticks_ptr",
                "DAT_08000f08": "data_ptr"
            },
            "code": "uint32_t calculate_ticks_08000ee0(uint32_t ticks_number) {\n  undefined4 *DAT_08000f04;\n  DAT_08000f04 = DAT_08000f04;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08000f04[1] = ticks_number - 1;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "send_byte_via_i2c_080015bc",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "data_pointer"
            },
            "code": "HAL_StatusTypeDef send_byte_via_i2c_080015bc(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *data_pointer;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    data_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_pointer + 1;\n    i2c_handle->Instance->DR = (uint32_t)*data_pointer;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_byte_via_i2c_080015bc"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "run_systick_callback_08000f4e"
            },
            "code": "void run_systick_callback_08000f4e(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "run_systick_callback_08000f4e"
        },
        "FUN_08003948": {
            "renaming": {
                "FUN_08003948": "handle_I2C_errors_08003948",
                "PTR_i2c_handles_08003954": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_errors_08003948(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003954_08003954 + 4);\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003948",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_errors_08003948"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_static_data_0800458c"
            },
            "code": "void initialize_static_data_0800458c()\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_data_0800458c"
        },
        "FUN_0800066c": {
            "renaming": {
                "__thiscall Modbus::FUN_0800066c": "set_modbus_settings",
                "this": "modbus",
                "u8id": "id",
                "u8serno": "serial_number",
                "u8txenpin": "tx_enable_pin",
                "u16timeOut": "timeout",
                "FUN_0800066c": "set_modbus_settings_0800066c"
            },
            "code": "void set_modbus_settings_0800066c(Modbus *modbus, uint8_t id, uint8_t serial_number, uint8_t tx_enable_pin) {\n  modbus->id = id;\n  if (serial_number > 3) {\n    serial_number = 0;\n  }\n  modbus->serial_number = serial_number;\n  modbus->tx_enable_pin = tx_enable_pin;\n  modbus->timeout = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "Modbus"
            ],
            "imported": false,
            "current_name": "set_modbus_settings_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_080042e8": "writeByte",
                "this": "serial",
                "c": "byteToWrite",
                "_written": "isWritten",
                "_serial": "serial->_serial",
                "tx_head": "serial->_serial.tx_head",
                "tx_tail": "(ushort)(serial->_serial).tx_tail",
                "tx_buff": "(serial->_serial).tx_buff",
                "serial_tx_active": "txTail",
                "uart_attach_tx_callback": "uartAttachTxCallback",
                "uint8_t": "byte",
                "byte": "byte",
                "uint": "uint",
                "int": "int",
                "ushort": "ushort",
                "FUN_080042e8": "writeByte_080042e8"
            },
            "code": "size_t __thiscall HardwareSerial::writeByte_080042e8(HardwareSerial *serial,uint8_t byteToWrite)\n{\n  bool isWritten;\n  uint txHead;\n  byte nextTxHead;\n  int txHeadPlusOne;\n  byte txTail;\n  uint i;\n\n  isWritten = true;\n  txHead = (uint)(serial->_serial).tx_head;\n  txHeadPlusOne = txHead + 1;\n  nextTxHead = (byte)txHeadPlusOne;\n  if (txHeadPlusOne == 0)\n  {\n    nextTxHead = -(-nextTxHead & 0x7f);\n  }\n  do\n  {\n    i = (uint)(serial->_serial).tx_tail;\n  }\n  while (i == (ushort)nextTxHead);\n  (serial->_serial).tx_buff[txHead] = byteToWrite;\n  (serial->_serial).tx_head = (ushort)nextTxHead;\n  txTail = serial_tx_active((serial_t *)&serial->_serial);\n  if (txTail == 0)\n  {\n    uart_attach_tx_callback((serial_t *)&serial->_serial,DAT_08004334);\n  }\n  return 1;\n}",
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "writeByte_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "listen_for_i2c_slave_080038d0",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "remaining_bytes",
                "i2c_onSlaveReceive": "i2c_on_slave_receive",
                "slaveMode": "slave_mode",
                "handle": "i2c_handle_data",
                "i2cTxRxBuffer": "i2c_tx_rx_buffer",
                "XferSize": "xfer_size"
            },
            "code": "void listen_for_i2c_slave_080038d0(I2C_HandleTypeDef *i2c_handle) {\n  i2c_t *i2c_obj = get_i2c_object(i2c_handle);\n  if (i2c_obj->i2c_on_slave_receive != NULL && i2c_obj->slave_mode == 1) {\n    uint8_t remaining_bytes = 0x20 - *(uint8_t *)&(i2c_obj->handle).XferSize & 0xff;\n    if (remaining_bytes != 0) {\n      (*i2c_obj->i2c_on_slave_receive)(i2c_obj->i2c_tx_rx_buffer, remaining_bytes);\n    }\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "I2C_ITError",
                "I2C_Slave_STOPF",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "listen_for_i2c_slave_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_process_id_0800410c"
            },
            "code": "__pid_t get_process_id_0800410c(void) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_hclk_frequency_divided_by_apb_prescaler_0800260c",
                "PTR_APBPrescTable_08002628": "apb_prescaler_table",
                "DAT_08002624": "data_08002624"
            },
            "code": "uint32_t get_hclk_frequency_divided_by_apb_prescaler_0800260c(void)\n{\n  uint32_t hclk_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t apb_prescaler_index = (*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint32_t apb_prescaler = PTR_APBPrescTable_08002628[apb_prescaler_index];\n  uint32_t hclk_frequency_divided_by_apb_prescaler = hclk_frequency >> apb_prescaler;\n  return hclk_frequency_divided_by_apb_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_hclk_frequency_divided_by_apb_prescaler_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculateAvailableRxSpace_08004240",
                "this": "serial",
                "_serial": "serialData",
                "rx_head": "head",
                "rx_tail": "tail"
            },
            "code": "int __thiscall calculateAvailableRxSpace_08004240(HardwareSerial *serial) {\n    int head = (serial->_serial).rx_head;\n    int tail = (serial->_serial).rx_tail;\n    int availableSpace = (head + 64 - tail) % 64;\n    return availableSpace;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableRxSpace_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "write_to_file_08005690",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08005690(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int write_result;\n  error_ptr = PTR_errno_080056b0;\n  *(undefined4 *)PTR_errno_080056b0 = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08005690"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "gpio_write_080041bc",
                "ulPin": "pin",
                "ulVal": "value",
                "_Var1": "is_pin_configured",
                "port": "gpio_port",
                "uVar2": "gpio_pin_number",
                "PTR_digitalPin_080041fc": "digitalPin",
                "PTR_g_digPinConfigured_08004200": "g_digital_pin_configured",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "PinName_conflict": "PinName_conflict",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_write": "digital_io_write"
            },
            "code": "void gpio_write_080041bc(uint32_t pin, uint32_t value)\n{\n    bool is_pin_configured = false;\n    GPIO_TypeDef *gpio_port;\n    uint gpio_pin_number;\n\n    if (pin < 0x60) {\n        gpio_pin_number = (uint)*(short *)(PTR_digitalPin_080041fc + pin * 2);\n    }\n    else {\n        gpio_pin_number = 0xffffffff;\n    }\n\n    if ((gpio_pin_number != 0xffffffff) && (is_pin_configured = is_pin_configured((PinName_conflict)gpio_pin_number, (uint32_t *)PTR_g_digPinConfigured_08004200))) {\n        gpio_port = get_gpio_port((gpio_pin_number << 0x18) >> 0x1c);\n        digital_io_write(gpio_port, 1 << (gpio_pin_number & 0xf) & 0xffff, value);\n    }\n}",
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "getRxBuffer",
                "sendTxBuffer",
                "begin"
            ],
            "imported": false,
            "current_name": "gpio_write_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initializeSerial_08004364",
                "this": "serial",
                "ctx": "context",
                "_serial": "serial",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "rx_buff": "rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initializeSerial_08004364(HardwareSerial *serial, EVP_PKEY_CTX *context) {\n  serial->rx_buffer = serial->_rx_buffer;\n  serial->rx_head = 0;\n  serial->rx_tail = 0;\n  serial->tx_buffer = serial->_tx_buffer;\n  serial->tx_head = 0;\n  serial->tx_tail = 0;\n  return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerial_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682::FUN_08000682": "initialize",
                "this": "self",
                "u8id": "id",
                "u8serno": "serno",
                "u8txenpin": "txen_pin",
                "FUN_08000682": "initialize_08000682"
            },
            "code": "initialize_08000682 * __thiscall initialize_08000682(initialize_08000682 *this,uint8_t id,uint8_t serno,uint8_t txen_pin)\n{\n  init(this,id,serno,txen_pin);\n  return this;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_08000682"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "handle_USART3_interrupt_08004004",
                "USART3_IRQn": "USART3_interrupt",
                "PTR_uart_handlers_08004018": "uart_handlers_pointer",
                "current_uart_handler": "current_uart_handler"
            },
            "code": "void handle_USART3_interrupt_08004004(void) {\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  if (current_uart_handler != NULL) {\n    HAL_UART_IRQHandler(current_uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_08004004"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_priority_group_08000e3c",
                "PriorityGroup": "priority_group",
                "PTR_DAT_08000e5c": "ptr_dat",
                "PTR_DAT_08000e5c + 0xc": "ptr_priority_group",
                "DAT_08000e5c + 0xc": "dat_bits",
                "*(uint32_t *)(DAT_08000e5c + 0xc)": "new_priority"
            },
            "code": "void set_priority_group_08000e3c(uint32_t priority_group)\n{\n    uint32_t* PTR_DAT_08000e5c + 0xc = (uint32_t*)(DAT_08000e5c + 0xc);\n    uint32_t priority_bits = priority_group & 7;\n    uint32_t* PTR_DAT_08000e5c = (uint32_t*)(DAT_08000e5c + 0xc);\n    uint32_t DAT_08000e5c + 0xc = *PTR_DAT_08000e5c & 0xf8ff;\n    uint32_t *(uint32_t *)(DAT_08000e5c + 0xc) = priority_bits << 8 | DAT_08000e5c + 0xc | 0x5fa0000;\n    *PTR_DAT_08000e5c + 0xc = *(uint32_t *)(DAT_08000e5c + 0xc);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_priority_group_08000e3c"
        },
        "FUN_080037ac": {
            "renaming": {
                "FUN_080037ac": "handle_timer_interrupt_080037ac",
                "PTR_timer_handles_080037bc": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "HandleTimerIRQ"
            },
            "code": "void handle_timer_interrupt_080037ac(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_080037bc_080037bc + 8);\n    if (timer_handle != NULL)\n    {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037ac",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037ac"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "haltim_reset_08002864",
                "htim": "hal_tim_handle",
                "Channel": "channel",
                "bVar1": "isInstanceD0",
                "pTVar2": "timInstance"
            },
            "code": "HAL_StatusTypeDef haltim_reset_08002864(TIM_HandleTypeDef *htim,uint32_t channel)\n{\n    bool isInstanceD0 = false;\n    TIM_TypeDef *timInstance = htim->Instance;\n\n    TIM_CCxChannelCmd(timInstance, channel, 0);\n\n    if (timInstance == PTR_DAT_080028d0) {\n        isInstanceD0 = true;\n    }\n    else if (timInstance == (TIM_TypeDef *)&PTR_DAT_080028d0[0xc].SR) {\n        isInstanceD0 = true;\n    }\n\n    if (isInstanceD0 && ((timInstance->CCER & 0x1111) == 0) && ((timInstance->CCER & 0x444) == 0)) {\n        timInstance->BDTR &= 0xffff7fff;\n    }\n\n    if (((timInstance->CCER & 0x1111) == 0) && ((timInstance->CCER & 0x444) == 0)) {\n        timInstance->CR1 &= 0xfffffffe;\n    }\n\n    htim->State = HAL_TIM_STATE_READY;\n    return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "haltim_reset_08002864"
        },
        "FUN_0800459a": {
            "renaming": {
                "FUN_0800459a": "printBuffer_0800459a",
                "this": "printObj",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentPrintObj",
                "sVar2": "bytesPrinted"
            },
            "code": "size_t Print::printBuffer_0800459a(Print *printObj, uint8_t *buffer, size_t bufferSize) {\n  Print *currentPrintObj = printObj;\n  size_t bytesPrinted = 0;\n  while(bufferSize > 0) {\n    currentPrintObj = (Print *)(**printObj->_vptr_Print)(currentPrintObj, (uint)*buffer);\n    if (currentPrintObj == (Print *)0x0) {\n      break;\n    }\n    bytesPrinted++;\n    buffer++;\n    bufferSize--;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459a",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_0800459a"
        },
        "FUN_08003958": {
            "renaming": {
                "FUN_08003958": "handle_I2C_events_08003958",
                "PTR_i2c_handles_08003964": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_I2C_events_08003958(void)\n{\n  I2C_HandleTypeDef *i2c_handle = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08003964_08003964 + 8);\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003958",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_events_08003958"
        },
        "FUN_0800532c": {
            "renaming": {
                "std_isra_0": "initialize_data_structures",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "u_variable",
                "PTR_DAT_08005364": "pointer_data_1",
                "PTR_DAT_08005368": "pointer_data_2",
                "PTR_DAT_0800536c": "pointer_data_3",
                "PTR_DAT_08005370": "pointer_data_4",
                "FUN_0800532c": "initialize_data_structures_0800532c"
            },
            "code": "void initialize_data_structures_0800532c(undefined4 *data_structure, undefined2 value1, undefined2 value2) {\n    *data_structure = 0;\n    data_structure[1] = 0;\n    data_structure[2] = 0;\n    *(undefined2 *)(data_structure + 3) = value1;\n    data_structure[0x19] = 0;\n    *(undefined2 *)((int)data_structure + 0xe) = value2;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    memset(data_structure + 0x17, 0, 8);\n    data_structure[9] = PTR_DAT_08005364;\n    data_structure[10] = PTR_DAT_08005368;\n    data_structure[0xb] = PTR_DAT_0800536c;\n    undefined4 uVar1 = PTR_DAT_08005370;\n    data_structure[8] = data_structure;\n    data_structure[0xc] = uVar1;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "setPin_0800314e",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "pinIndex"
            },
            "code": "void setPin_0800314e(uint32_t *pinMap, PinName_conflict pin) {\n  uint8_t pinIndex = (uint8_t)pin >> 0x18;\n  uint8_t pinOffset = (uint8_t)pin & 0xfU;\n  pinMap[pinIndex] |= 1 << pinOffset;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "setPin_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c::FUN_0800447c": "initialize_UART",
                "this": "uart_instance",
                "peripheral": "peripheral",
                "PVar1": "rx_pin",
                "extraout_r1": "ctx1",
                "ctx": "ctx2",
                "FUN_0800447c": "initialize_UART_0800447c"
            },
            "code": "initialize_UART_0800447c* initialize_UART_0800447c(initialize_UART_0800447c* uart_instance, void* peripheral) {\n  PinName rx_pin;\n  EVP_PKEY_CTX *ctx1;\n  EVP_PKEY_CTX *ctx2;\n  \n  (uart_instance->super_Stream).super_Print.write_error = 0;\n  (uart_instance->super_Stream)._timeout = 1000;\n  (uart_instance->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)write_ptr_ptr;\n  if (uart_instance == (initialize_UART_0800447c*)serial3_ptr) {\n    setRx(uart_instance, 0x4c);\n    setTx(uart_instance, 0x4d);\n    ctx1 = ctx2;\n  }\n  else {\n    rx_pin = pinmap_pin(peripheral, (PinMap*)rx_pin_ptr);\n    (uart_instance->_serial).pin_rx = rx_pin;\n    rx_pin = pinmap_pin(peripheral, (PinMap*)tx_pin_ptr);\n    (uart_instance->_serial).pin_tx = rx_pin;\n    ctx1 = ctx2;\n  }\n  init(uart_instance, ctx1);\n  return uart_instance;\n}",
            "called": [
                "pinmap_pin",
                "setRx",
                "setTx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_UART_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "print_assertion_failed_08004808",
                "param_1": "file",
                "param_2": "file_name",
                "param_3": "expression",
                "param_4": "message",
                "puVar1": "default_message",
                "puVar2": "message_to_print",
                "PTR_s__08004840": "expression_to_print",
                "PTR_s___function__08004838": "function_name_to_print",
                "PTR_s_assertion___s__failed__file___s__0800483c": "file_name_to_print",
                "PTR__impure_ptr_08004834": "impure_ptr"
            },
            "code": "void print_assertion_failed_08004808(FILE *file, const char *file_name, int line_number, const char *function_name, const char *expression, const char *message)\n{\n    const char *default_message = \"Assertion failed\";\n    const char *message_to_print = message ? message : default_message;\n    const char *PTR_s__08004840 = expression ? expression : \"(no description)\";\n    const char *PTR_s___function__08004838 = function_name ? function_name : \"(no function)\";\n    const char *PTR_s_assertion___s__failed__file___s__0800483c = file_name ? file_name : \"(no file)\";\n    fprintf(file, \"%s:%d: %s: Assertion '%s' failed: %s\\n\", PTR_s_assertion___s__failed__file___s__0800483c, line_number, PTR_s___function__08004838, PTR_s__08004840, message_to_print);\n    abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "disable_dac_channel_08000f72",
                "hdac": "dac_handle",
                "Channel": "channel",
                "CR": "control_register",
                "State": "state"
            },
            "code": "HAL_StatusTypeDef disable_dac_channel_08000f72(DAC_HandleTypeDef *dac_handle, uint32_t channel) {\n  dac_handle->Instance->CR = dac_handle->Instance->CR & ~(1 << (channel & 0xff));\n  dac_handle->State = HAL_DAC_STATE_READY;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "dac_stop"
            ],
            "imported": false,
            "current_name": "disable_dac_channel_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "handle_I2C_events_08001d00",
                "*hi2c": "*i2c_handle",
                "pIVar1": "i2c_instance",
                "uVar2": "sr1_reg",
                "uVar3": "cr2_reg",
                "uVar4": "sr2_reg"
            },
            "code": "void handle_I2C_events_08001d00(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  uint32_t sr1_reg;\n  uint32_t sr2_reg;\n  uint32_t cr2_reg;\n  i2c_instance = i2c_handle->Instance;\n  sr2_reg = i2c_instance->SR2;\n  sr1_reg = i2c_instance->SR1;\n  cr2_reg = i2c_instance->CR2;\n  if (i2c_handle->Mode == HAL_I2C_MODE_MASTER || i2c_handle->Mode == HAL_I2C_MODE_MEM)\n  {\n    if ((sr1_reg & 0x10001) == 0 || (cr2_reg & 0x200) == 0)\n    {\n      if ((sr1_reg & PTR_DAT_08001e60) == 0 || (cr2_reg & 0x200) == 0)\n      {\n        if ((sr1_reg & PTR_DAT_08001e4c) != 0 && (cr2_reg & 0x200) != 0)\n        {\n          I2C_Master_ADDR(i2c_handle);\n        }\n      }\n      else\n      {\n        I2C_Master_ADD10(i2c_handle);\n      }\n    }\n    else\n    {\n      I2C_Master_SB(i2c_handle);\n    }\n    if ((PTR_DAT_08001e54 & sr2_reg) == 0)\n    {\n      if ((PTR_DAT_08001e64 & sr1_reg) != 0 && (cr2_reg & 0x400) != 0 && (PTR_DAT_08001e5c & sr1_reg) == 0)\n      {\n        I2C_MasterReceive_RXNE(i2c_handle);\n        return;\n      }\n      if ((PTR_DAT_08001e5c & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n      {\n        I2C_MasterReceive_BTF(i2c_handle);\n        return;\n      }\n    }\n    else\n    {\n      if ((PTR_DAT_08001e58 & sr1_reg) != 0 && (cr2_reg & 0x400) != 0 && (PTR_DAT_08001e5c & sr1_reg) == 0)\n      {\n        I2C_MasterTransmit_TXE(i2c_handle);\n        return;\n      }\n      if ((PTR_DAT_08001e5c & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n      {\n        I2C_MasterTransmit_BTF(i2c_handle);\n        return;\n      }\n    }\n  }\n  else\n  {\n    if ((PTR_DAT_08001e4c & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n    {\n      I2C_Slave_ADDR(i2c_handle);\n      return;\n    }\n    if ((PTR_DAT_08001e50 & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n    {\n      I2C_Slave_STOPF(i2c_handle);\n      return;\n    }\n    if ((PTR_DAT_08001e54 & sr2_reg) == 0)\n    {\n      if ((PTR_DAT_08001e64 & sr1_reg) != 0 && (cr2_reg & 0x400) != 0 && (PTR_DAT_08001e5c & sr1_reg) == 0)\n      {\n        I2C_SlaveReceive_RXNE(i2c_handle);\n        return;\n      }\n      if ((PTR_DAT_08001e5c & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n      {\n        I2C_SlaveReceive_BTF(i2c_handle);\n      }\n    }\n    else\n    {\n      if ((PTR_DAT_08001e58 & sr1_reg) != 0 && (cr2_reg & 0x400) != 0 && (PTR_DAT_08001e5c & sr1_reg) == 0)\n      {\n        I2C_SlaveTransmit_TXE(i2c_handle);\n        return;\n      }\n      if ((PTR_DAT_08001e5c & sr1_reg) != 0 && (cr2_reg & 0x200) != 0)\n      {\n        I2C_SlaveTransmit_BTF(i2c_handle);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterReceive_RXNE",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [
                "I2C3_EV_IRQHandler",
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_events_08001d00"
        },
        "FUN_080037c0": {
            "renaming": {
                "FUN_080037c0": "handle_timer_interrupt_080037c0",
                "PTR_timer_handles_080037d0": "PTR_timer_handles_080037d0",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_080037c0(void)\n{\n    TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_080037d0 + 0xc);\n    if (timer_handle != (TIM_HandleTypeDef *)0x0) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_080037c0"
        },
        "FUN_0800382c": {
            "renaming": {
                "FUN_0800382c": "handle_timer_interrupt_0800382c",
                "*PTR_timer_handles_0800383c": "*timer_handles",
                "PTR_timer_handles_0800383c": "timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_irq"
            },
            "code": "void handle_timer_interrupt_0800382c(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_PTR_timer_handles_0800383c_0800383c + 0x20);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800382c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_0800382c"
        }
    },
    "used_tokens": 205440,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004774",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800476a",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_080056d4",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004788",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800477e",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08004792",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08005768",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_08003f94",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_080055e0",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_08003918",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_08004298",
            "FUN_08003880",
            "FUN_08003fd4",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_08000c4c",
            "FUN_080025ec",
            "FUN_080037fc",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_0800404c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08004064",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_080047f0",
            "FUN_0800502c",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_0800582c",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8c",
            "FUN_08005604",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_080058f0",
            "FUN_080056b4",
            "FUN_0800450a",
            "FUN_0800377c",
            "FUN_08003fec",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_08000c7c",
            "FUN_08004760",
            "FUN_080034ce",
            "FUN_08003798",
            "FUN_080047fe",
            "FUN_08005974",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_080045be",
            "FUN_0800407c",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08005580",
            "FUN_08000690",
            "FUN_08004254",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08003840",
            "FUN_080026ce",
            "FUN_08001f3c",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08003968",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_080037d4",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_080047a8",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08005478",
            "FUN_08000d3c",
            "FUN_08003854",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_0800401c",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08004270",
            "FUN_080037e8",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_080051bc",
            "FUN_08004034",
            "FUN_08000f8c",
            "FUN_08001684",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_08003868",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_080035ac",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080001d0",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_08003928",
            "FUN_0800468c",
            "FUN_080005e0",
            "FUN_0800311c",
            "FUN_0800420c",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_080044fc",
            "FUN_08003138",
            "FUN_08003810",
            "FUN_08002848",
            "FUN_08003938",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08005686",
            "FUN_08004110",
            "FUN_08005320",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_08003948",
            "FUN_0800458c",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_08005690",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08004004",
            "FUN_08000e3c",
            "FUN_080037ac",
            "FUN_08002864",
            "FUN_0800459a",
            "FUN_08003958",
            "FUN_0800314e",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00",
            "FUN_080037c0",
            "FUN_0800382c"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005760",
            "FUN_080055d0",
            "FUN_080040ec",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_08000600",
            "FUN_08000de4",
            "FUN_080047c0",
            "FUN_08000682",
            "FUN_0800532c",
            "FUN_0800447c"
        ]
    ],
    "locked_functions": []
}