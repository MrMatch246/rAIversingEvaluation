{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "FUNC_080050fc"
            },
            "code": "\nint FUNC_080050fc(undefined4 *param_1,int *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  void *pvVar5;\n  undefined4 *puVar6;\n  int *piVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  undefined4 *unaff_r9;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = _malloc_r(param_1,0x40);\n    *param_2 = iVar3;\n    param_2[4] = iVar3;\n    if (iVar3 == 0) {\n      *param_1 = 0xc;\n      return -1;\n    }\n    param_2[5] = 0x40;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\nLAB_08005146:\n  pbVar9 = pbVar8;\n  if (*pbVar9 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  pbVar8 = pbVar9 + 1;\n  if (*pbVar9 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  iVar3 = (int)pbVar9 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = __ssputs_r(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar9 == 0) goto LAB_080052ac;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar9 + 1;\n  while( true ) {\n    pvVar5 = memchr(PTR_DAT_080052d0,(uint)*pbVar8,5);\n    puVar2 = PTR_DAT_080052d4;\n    param_3 = pbVar8 + 1;\n    if (pvVar5 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar5 - (int)PTR_DAT_080052d0 & 0xffU) | local_88;\n    pbVar8 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar7 = local_8c + 1;\n    iVar3 = *local_8c;\n    local_8c = piVar7;\n    if (-1 < iVar3) goto LAB_080051ee;\n    local_7c = -iVar3;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar3 = local_7c;\n    param_3 = pbVar8;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080051ee:\n      local_7c = iVar3;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar7 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar7;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar3 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  pvVar5 = memchr(PTR_DAT_080052d4,(uint)*param_3,3);\n  if (pvVar5 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar5 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar5 = memchr(PTR_s_efgEFG_080052d8,(uint)local_70,6);\n  if (pvVar5 == (void *)0x0) {\n    puVar6 = (undefined4 *)_printf_i(param_1,&local_88,param_2,DAT_080052e0,&local_8c);\n  }\n  else {\n    puVar6 = param_1;\n    if (DAT_080052dc == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      puVar6 = unaff_r9;\n      goto LAB_08005260;\n    }\n  }\n  if (puVar6 == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  local_74 = local_74 + (int)puVar6;\n  pbVar8 = param_3;\n  unaff_r9 = puVar6;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "__ssputs_r",
                "memchr",
                "_printf_i",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080050fc",
            "calling": [
                "siprintf"
            ],
            "imported": false,
            "current_name": "FUNC_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "updateDeltaT_08003320",
                "_deltat": "deltaTime",
                "in_r0": "deltaTimeValue",
                "PTR_deltat_08003328": "deltaTimePtr"
            },
            "code": "void updateDeltaT_08003320(float deltaTime){\n    *(float *)PTR_deltat_08003328 = deltaTime;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "updateDeltaT_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_attitude_data_08004410",
                "local_10": "attitude_data",
                "local_c": "data_to_send",
                "in_r1": "input_variable"
            },
            "code": "void send_attitude_data_08004410(void)\n{\n  uint16_t attitude_data = *(uint16_t *)PTR_msp_txf_attitude_08004430;\n  uint32_t data_to_send = (in_r1 & 0xffff0000) | (uint32_t)attitude_data;\n  MSP_SendFrame('l', (uint8_t *)&data_to_send, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_attitude_data_08004410"
        },
        "FUN_08003ef2": {
            "renaming": {
                "FUN_08003ef2": "initializeCircularBuffer_08003ef2",
                "cb": "buffer",
                "iVar1": "index",
                "cb->head": "buffer->head",
                "cb->tail": "buffer->tail",
                "cb->size": "buffer->size",
                "cb->buffer": "buffer->elements"
            },
            "code": "void initializeCircularBuffer_08003ef2(CircularBuffer *buffer) {\n    int index = 0;\n    buffer->head = 0;\n    buffer->tail = 0;\n    buffer->size = 0;\n    do {\n        buffer->elements[index] = '\\0';\n        index++;\n    } while (index != 2048);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ef2",
            "calling": [
                "serialFlush"
            ],
            "imported": false,
            "current_name": "initializeCircularBuffer_08003ef2"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "configureGPIO_08001264",
                "GPIOx": "GPIO",
                "GPIO_Init": "init",
                "puVar1": "configPtr",
                "uVar2": "alternateFunction1",
                "uVar3": "alternateFunction2",
                "uVar4": "config",
                "uVar5": "pinMask",
                "uVar6": "temp",
                "iVar7": "alternateFunctionIndex",
                "uVar8": "i",
                "uVar9": "temp2",
                "uVar10": "alternateFunction3",
                "unaff_r10": "tempPtr",
                "tmpreg": "temp3"
            },
            "code": "void configureGPIO_08001264(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *init) {\n  uint32_t pinMask, config;\n  int i;\n  for(i = 0; i < 16; i++) {\n    pinMask = 1 << i;\n    if((pinMask & init->Pin) == pinMask) {\n      if(init->Mode == GPIO_MODE_AF_PP || init->Mode == GPIO_MODE_AF_OD) {\n        config = init->Alternate | init->Speed | init->Mode;\n      }\n      else {\n        config = init->Speed | init->Mode | init->Pull;\n      }\n      if(i < 8) {\n        GPIO->CRL &= ~(0xf << (i * 4));\n        GPIO->CRL |= config << (i * 4);\n      }\n      else {\n        GPIO->CRH &= ~(0xf << ((i - 8) * 4));\n        GPIO->CRH |= config << ((i - 8) * 4);\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "HAL_UART_MspInit",
                "Peripherals_Init",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "imported": false,
            "current_name": "configureGPIO_08001264"
        },
        "FUN_080058fc": {
            "renaming": {
                "FUN_080058fc": "calculate_result_080058fc",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "addend",
                "param_4": "mask",
                "param_5": "atan_input",
                "uVar1": "quotient_low",
                "extraout_r1": "quotient_high",
                "extraout_r1_00": "extraout_r1",
                "unaff_r4": "absolute_divisor",
                "iVar2": "quotient_high",
                "iVar5": "difference",
                "uVar3": "quotient_sign",
                "uVar4": "absolute_masked",
                "uVar6": "absolute_addend",
                "uVar7": "result",
                "uVar8": "temp_result"
            },
            "code": "undefined8 calculate_result_080058fc(uint dividend, uint divisor, uint addend, uint mask, double atan_input)\n{\n    undefined4 quotient_low;\n    undefined4 quotient_high;\n    int difference;\n    uint absolute_divisor;\n    uint absolute_mask;\n    uint absolute_difference;\n    uint quotient_sign;\n    undefined8 result;\n\n    uint absolute_addend = addend & 0x7fffffff;\n    uint absolute_masked = mask & 0x7fffffff;\n\n    if (0x7fffffff < (absolute_addend | (-addend | addend) >> 0x1f) ||\n        0x7fffffff < (absolute_masked | (-dividend | dividend) >> 0x1f))\n    {\n        result = __aeabi_dadd(dividend, divisor);\n        return result;\n    }\n\n    if ((mask + 0xc0100000 | addend) == 0)\n    {\n        atan(atan_input);\n        result = CONCAT44(quotient_low, dividend);\n        return result;\n    }\n\n    quotient_sign = (int)mask >> 0x1e & 2U | divisor >> 0x1f;\n\n    if ((dividend | absolute_masked) == 0)\n    {\n        if (quotient_sign == 2)\n        {\n            result = CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        else if (quotient_sign == 3)\n        {\n            result = CONCAT44(divisor, dividend);\n        }\n        else\n        {\n            result = CONCAT44(dividend, divisor);\n        }\n    }\n    else\n    {\n        if ((addend | absolute_mask) != 0)\n        {\n            absolute_difference = absolute_mask - absolute_addend;\n            difference = (int)absolute_difference >> 0x14;\n            absolute_divisor = divisor & 0x7fffffff;\n            absolute_masked = absolute_mask & 0x7fffffff;\n\n            if (absolute_difference == 0x7fffffff)\n            {\n                if (absolute_masked == absolute_divisor)\n                {\n                    if (quotient_sign == 2)\n                    {\n                        result = CONCAT44(DAT_080061ec, DAT_080061e8);\n                    }\n                    else if (quotient_sign == 3)\n                    {\n                        result = CONCAT44(DAT_080061f4, DAT_080061f0);\n                    }\n                    else if (quotient_sign == 1)\n                    {\n                        result = 0x8000000000000000;\n                    }\n                    else\n                    {\n                        result = 0;\n                    }\n                }\n                else if (quotient_sign == 2)\n                {\n                    result = CONCAT44(DAT_080061fc, DAT_080061f8);\n                }\n                else if (quotient_sign == 3)\n                {\n                    result = CONCAT44(quotient_low, quotient_high);\n                }\n                else if (quotient_sign == 1)\n                {\n                    result = 0x8000000000000000;\n                }\n                else\n                {\n                    result = 0;\n                }\n            }\n            else if (absolute_masked != absolute_divisor)\n            {\n                if (((int)mask < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c)))\n                {\n                    quotient_low = 0;\n                    quotient_high = 0;\n                }\n                else\n                {\n                    quotient_low = __divdf3(dividend, divisor);\n                    fabs((double)CONCAT44(0, mask));\n                    atan((double)CONCAT44(0, mask));\n                    quotient_high = extraout_r1;\n                }\n\n                if (quotient_sign == 2)\n                {\n                    result = __subdf3(quotient_low, quotient_high, DAT_08006208, DAT_0800620c);\n                    result = CONCAT44(DAT_080061fc, DAT_080061f8);\n                }\n                else if (quotient_sign == 0)\n                {\n                    result = CONCAT44(quotient_high, quotient_low);\n                }\n                else\n                {\n                    result = __subdf3(quotient_low, quotient_high, DAT_08006208, DAT_0800620c);\n                    result = CONCAT44(quotient_low, quotient_high);\n                }\n\n                result = __subdf3((int)result, (int)((ulonglong)result >> 0x20), (int)result, (int)((ulonglong)result >> 0x20));\n            }\n            else\n            {\n                result = CONCAT44(DAT_08006214, DAT_08006210);\n\n                if ((int)divisor < 0)\n                {\n                    result = CONCAT44(DAT_080061dc, DAT_080061d8);\n                }\n            }\n        }\n        else\n        {\n            result = CONCAT44(DAT_08006214, DAT_08006210);\n\n            if ((int)divisor < 0)\n            {\n                result = CONCAT44(DAT_080061dc, DAT_080061d8);\n            }\n        }\n    }\n\n    return result;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_080058fc"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "__x": "input",
                "in_r0": "bits_low",
                "in_r1": "bits_high",
                "iVar1": "sign_bit",
                "uVar2": "addend_low",
                "uVar3": "addend_high",
                "uVar4": "shift",
                "uVar5": "exponent_bits",
                "in_d0": "input",
                "dVar6": "output",
                "uVar7": "sum",
                "PTR_TWO52_080071b8": "two52_ptr",
                "DAT_080071bc": "bitmask"
            },
            "code": "double calculate_080070b0(double input) {\n  int sign = (input < 0) ? -1 : 1;\n  uint64_t bits = *(uint64_t*)&input;\n  uint64_t exponent = (bits & 0x7ff0000000000000) >> 52;\n  uint64_t mantissa = bits & 0x000fffffffffffff;\n  if (exponent == 0x7ff) {\n    return input + input;\n  }\n  if (exponent == 0) {\n    if (mantissa == 0) {\n      return input;\n    }\n    uint64_t shift = 0x7ff - 0x3fe - 52;\n    while ((mantissa & (1ull << 52)) == 0) {\n      mantissa <<= 1;\n      shift--;\n    }\n    mantissa <<= 1;\n    shift--;\n    exponent = shift + 0x3fe;\n    mantissa &= 0x000fffffffffffff;\n  }\n  exponent -= 0x3fe;\n  uint64_t round = (mantissa & (1ull << 10)) >> 10;\n  mantissa >>= 11;\n  if (round == 1 && (mantissa & 1) == 1) {\n    mantissa += 1;\n  }\n  uint64_t result = (exponent + 0x3ff) << 52 | mantissa;\n  double* p = (double*)&result;\n  double output = *p;\n  return sign * output;\n}",
            "called": [
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_end_of_string_08001028",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_08001028(void)\n{\n  char input_char;\n  __aeabi_cfcmpeq();\n  return input_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "PID_Update",
                "AHRS_GetYaw",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001028"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "zero_check"
            },
            "code": "ulonglong calculate_bitwise_080006ac(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1, temp2, temp3, temp4;\n  bool zero_check;\n  \n  temp3 = input4 >> 0x14;\n  if (input2 != input3 && temp3 != input3) {\n    zero_check = (input1 | input2 << 1) == 0;\n    if (!zero_check) {\n      zero_check = (input3 | input4 << 1) == 0;\n    }\n    if (zero_check) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input2 == 0) {\n      temp1 = input1 & 0x80000000;\n      do {\n        temp2 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp2 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp1;\n      if (temp3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  zero_check = (input1 | input2 << 1) == 0;\n  if (zero_check) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!zero_check) {\n    zero_check = (input3 | input4 << 1) == 0;\n  }\n  temp4 = input2;\n  if (((!zero_check) && ((input2 != input3 || ((input1 | input2 << 0xc) == 0)))) && ((temp3 != input3 || (input1 = input3, temp4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_080006ac"
        },
        "FUN_0800125a": {
            "renaming": {
                "FUN_0800125a": "update_systick_callback_0800125a"
            },
            "code": "void update_systick_callback_0800125a(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800125a",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_systick_callback_0800125a"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "i2c_request_memory_write_08001828",
                "*hi2c": "*handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_add_size",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance",
                "uVar5": "cr1",
                "LAB_080018e2": "loop_start",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "I2C_RequestMemoryWrite": "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout": "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick": "HAL_GetTick",
                "SR2": "SR2",
                "CR1": "CR1",
                "DR": "DR",
                "SR1": "SR1",
                "ErrorCode": "ErrorCode",
                "State": "State",
                "Lock": "Lock",
                "Instance": "Instance",
                "Mode": "Mode"
            },
            "code": "HAL_StatusTypeDef i2c_request_memory_write_08001828(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_add_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time = HAL_GetTick();\n    I2C_TypeDef *instance;\n\n    if (handle->State != HAL_I2C_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL || size == 0) {\n        return HAL_ERROR;\n    }\n\n    do {\n        instance = handle->Instance;\n        if ((~instance->SR2 & 2) != 0) {\n            if (handle->Lock == HAL_LOCKED) {\n                return HAL_BUSY;\n            }\n            uint32_t cr1 = instance->CR1;\n            handle->Lock = HAL_LOCKED;\n            instance->CR1 = cr1 & 0xfffff7ff;\n            handle->State = HAL_I2C_STATE_BUSY_TX;\n            handle->Mode = HAL_I2C_MODE_MEM;\n            handle->ErrorCode = 0;\n            status = I2C_RequestMemoryWrite(handle, dev_address, mem_address, mem_add_size, timeout);\n            if (status != HAL_OK) {\n                handle->Lock = HAL_UNLOCKED;\n                if (handle->ErrorCode == 4) {\n                    return HAL_ERROR;\n                }\n                return HAL_TIMEOUT;\n            }\n            break;\n        }\n    } while (HAL_GetTick() - start_time < 10000);\n\n    handle->Lock = HAL_UNLOCKED;\n    handle->State = HAL_I2C_STATE_READY;\n\n    uint8_t *ptr_data = data;\n    while (size > 0) {\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status != HAL_OK) {\n            return status;\n        }\n        instance = handle->Instance;\n        instance->DR = (uint32_t)*ptr_data;\n        if ((int)(instance->SR1 << 0x1d) < 0) {\n            if ((uint16_t)(size - 1) == 0) {\n                break;\n            }\n            size = size - 2;\n            instance->DR = (uint32_t)ptr_data[1];\n            ptr_data = ptr_data + 2;\n        }\n        else {\n            ptr_data = ptr_data + 1;\n            size = size - 1;\n        }\n    }\n\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status == HAL_OK) {\n        handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n        handle->Lock = HAL_UNLOCKED;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->Mode = HAL_I2C_MODE_NONE;\n        return HAL_OK;\n    }\n\n    if (handle->ErrorCode == 4) {\n        handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n        return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n}",
            "called": [
                "I2C_RequestMemoryWrite",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "I2C_WriteByte"
            ],
            "imported": false,
            "current_name": "i2c_request_memory_write_08001828"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "__ieee754_sqrt",
                "__aeabi_drsub",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nHAL_StatusTypeDef FUNC_08001b58(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1f) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar6 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar3 = RCC_OscInitStruct->HSEState;\n      if (uVar3 == 0x10000) {\nLAB_08001c1e:\n        uVar6 = *puVar1 | 0x10000;\n      }\n      else {\n        if (uVar3 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          uVar3 = HAL_GetTick();\n          while (uVar6 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            uVar4 = HAL_GetTick();\n            if (100 < uVar4 - uVar3) {\n              return HAL_TIMEOUT;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (uVar3 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar6 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar6;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f))\n      {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1e) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar6 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSIState == 0) {\n        iVar5 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n        uVar3 = HAL_GetTick();\n        while (uVar6 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n          uVar4 = HAL_GetTick();\n          if (2 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    uVar6 = count_leading_zeroes(0x1f000000);\n    *puVar1 = RCC_OscInitStruct->HSICalibrationValue << (uVar6 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1c) < 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 0;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < (int)(RCC_OscInitStruct->OscillatorType << 0x1d)) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  uVar3 = HAL_GetTick();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    uVar4 = HAL_GetTick();\n    if (100 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\n  uVar3 = RCC_OscInitStruct->LSEState;\n  if (uVar3 == 1) {\nLAB_08001e1a:\n    uVar6 = puVar1[8] | 1;\n  }\n  else {\n    if (uVar3 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (uVar3 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar6 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar6;\n  uVar3 = HAL_GetTick();\n  while (uVar6 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f)\n        ) {\n    uVar4 = HAL_GetTick();\n    if (5000 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    return HAL_OK;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (uVar3 != 2) {\n      iVar5 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n      uVar3 = HAL_GetTick();\n      do {\n        uVar6 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n          return HAL_OK;\n        }\n        uVar4 = HAL_GetTick();\n      } while (uVar4 - uVar3 < 3);\n      return HAL_TIMEOUT;\n    }\n    iVar5 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      uVar6 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar6 = (RCC_OscInitStruct->PLL).PLLSource;\n        if (uVar6 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        puVar1[1] = uVar6 | (RCC_OscInitStruct->PLL).PLLMUL | puVar1[1] & 0xffc2ffff;\n        iVar5 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          uVar6 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_Delay",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "receive_uart_data_0800290c",
                "huart": "uart_handle",
                "uVar1": "parity",
                "bVar2": "data_byte",
                "pUVar3": "usart_instance",
                "uVar4": "remaining_bytes",
                "puVar5": "rx_buff_ptr",
                "puVar6": "next_rx_buff_ptr",
                "bVar7": "is_busy"
            },
            "code": "HAL_StatusTypeDef receive_uart_data_0800290c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t parity;\n  byte data_byte;\n  USART_TypeDef *usart_instance;\n  uint16_t word_length;\n  ushort *rx_buff_ptr;\n  ushort *next_rx_buff_ptr;\n  bool is_busy;\n  \n  if ((uart_handle->State & 0xef) != 0x22) {\n    return HAL_BUSY;\n  }\n  parity = (uart_handle->Init).Parity;\n  usart_instance = uart_handle->Instance;\n  rx_buff_ptr = (ushort *)uart_handle->pRxBuffPtr;\n  word_length = (uart_handle->Init).WordLength;\n  \n  if (word_length == 0x1000) {\n    if (parity == 0) {\n      next_rx_buff_ptr = rx_buff_ptr + 1;\n      *rx_buff_ptr = (ushort)((usart_instance->DR << 0x17) >> 0x17);\n    }\n    else {\n      next_rx_buff_ptr = (ushort *)((int)rx_buff_ptr + 1);\n      *rx_buff_ptr = (ushort)usart_instance->DR & 0xff;\n    }\n    uart_handle->pRxBuffPtr = (uint8_t *)next_rx_buff_ptr;\n  }\n  else {\n    if (parity == 0) {\n      data_byte = (byte)usart_instance->DR;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buff_ptr + 1);\n    }\n    else {\n      parity = usart_instance->DR;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buff_ptr + 1);\n      data_byte = (byte)parity & 0x7f;\n    }\n    *(byte *)rx_buff_ptr = data_byte;\n  }\n  \n  uint16_t remaining_bytes = uart_handle->RxXferCount - 1;\n  uart_handle->RxXferCount = remaining_bytes;\n  \n  if (remaining_bytes == 0) {\n    usart_instance = uart_handle->Instance;\n    usart_instance->CR1 = usart_instance->CR1 & 0xffffffdf;\n    uint32_t state = (uint32_t)uart_handle->State;\n    is_busy = state != 0x32;\n    if (is_busy) {\n      state = usart_instance->CR1 & 0xfffffeff;\n    }\n    else {\n      usart_instance = (USART_TypeDef *)0x12;\n    }\n    if (is_busy) {\n      usart_instance->CR1 = state;\n      state = usart_instance->CR3 & 0xfffffffe;\n    }\n    if (is_busy) {\n      usart_instance->CR3 = state;\n      usart_instance = (USART_TypeDef *)0x1;\n    }\n    uart_handle->State = (HAL_UART_StateTypeDef)usart_instance;\n    HAL_UART_RxCpltCallback(uart_handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_uart_data_0800290c"
        },
        "FUN_080028a6": {
            "renaming": {
                "FUN_080028a6": "initialize_uart_transfer_080028a6",
                "*huart": "*uart_handler",
                "*pData": "*data_buffer",
                "Size": "data_size",
                "HVar1": "uart_state",
                "uVar2": "cr1_value",
                "*pUVar3": "*uart_instance"
            },
            "code": "HAL_StatusTypeDef initialize_uart_transfer_080028a6(UART_HandleTypeDef *uart_handler, uint8_t *data_buffer, uint16_t data_size)\n{\n  HAL_UART_StateTypeDef uart_state;\n  uint cr1_value;\n  USART_TypeDef *uart_instance;\n  \n  if ((uart_handler->State == HAL_UART_STATE_READY) || (uart_handler->State == HAL_UART_STATE_BUSY_TX)) {\n    if ((data_buffer == NULL) || (data_size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handler->Lock != HAL_LOCKED) {\n      uart_handler->Lock = HAL_LOCKED;\n      uart_handler->ErrorCode = 0;\n      uart_handler->RxXferSize = data_size;\n      uart_handler->RxXferCount = data_size;\n      uart_handler->Lock = HAL_UNLOCKED;\n      if (uart_handler->State == HAL_UART_STATE_BUSY_TX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_RX;\n      }\n      uart_instance = uart_handler->Instance;\n      uart_handler->State = uart_state;\n      cr1_value = uart_instance->CR1;\n      uart_handler->pRxBuffPtr = data_buffer;\n      uart_instance->CR1 = cr1_value | 0x100;\n      uart_instance->CR3 = uart_instance->CR3 | 1;\n      uart_instance->CR1 = uart_instance->CR1 | 0x20;\n      return HAL_OK;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028a6",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_uart_transfer_080028a6"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "print_serial_data_with_checksum_08004300",
                "code": "checksum_seed",
                "*data": "data_array",
                "data_length": "data_array_length",
                "ch": "checksum",
                "*pbVar1": "current_byte_ptr"
            },
            "code": "void print_serial_data_with_checksum_08004300(uint8_t code, uint8_t *data, uint16_t data_length) {\n  uint8_t checksum = 0;\n  uint8_t *data_ptr;\n  serialPrint(PTR_DAT_08004344);\n  serialWrite((byte)data_length);\n  checksum = (uint8_t)data_length ^ code;\n  serialWrite(code);\n  for (data_ptr = data; (int)data_ptr - (int)data < (int)(uint)data_length; data_ptr = data_ptr + 1) {\n    serialWrite(*data_ptr);\n    checksum = checksum ^ *data_ptr;\n  }\n  serialWrite(checksum);\n  return;\n}",
            "called": [
                "serialPrint",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "MSP_SendStatus",
                "MSP_SendPID",
                "MSP_SendAltitude",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "imported": false,
            "current_name": "print_serial_data_with_checksum_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "reverse_copy_08005630",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "src_ptr",
                "puVar2": "dest_ptr"
            },
            "code": "void * reverse_copy_08005630(void *dest, const void *src, size_t n) {\n    unsigned char *dest_ptr = (unsigned char *)dest + n - 1;\n    const unsigned char *src_ptr = (const unsigned char *)src;\n    for (size_t i = 0; i < n; i++) {\n        *dest_ptr-- = *src_ptr++;\n    }\n    return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330\n               (float ax,float ay,float az,float gx,float gy,float gz,float mx,float my,float mz,\n               float *angle)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 in_r2;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_00000000;\n  undefined4 in_stack_00000004;\n  undefined4 in_stack_00000008;\n  undefined4 in_stack_0000000c;\n  undefined4 in_stack_00000010;\n  undefined4 *in_stack_00000014;\n  undefined4 in_stack_ffffff78;\n  float hy;\n  float hx;\n  \n  uVar28 = *(undefined4 *)PTR_q_080035d8;\n  iVar29 = *(int *)(PTR_q_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_q_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_q_080035d8 + 0xc);\n  uVar2 = __aeabi_fmul(ax,mz,mz);\n  uVar3 = __aeabi_fmul(angle);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar3 = __aeabi_fmul(in_r2);\n  __addsf3(uVar2,uVar3);\n  __aeabi_f2d();\n  sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n  uVar2 = __truncdfsf2();\n  iVar4 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = __aeabi_fmul(in_stack_00000008);\n    uVar5 = __aeabi_fmul(in_stack_0000000c);\n    uVar3 = __addsf3(uVar3,uVar5);\n    uVar5 = __aeabi_fmul(in_stack_00000010);\n    __addsf3(uVar3,uVar5);\n    __aeabi_f2d();\n    sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n    uVar3 = __truncdfsf2();\n    iVar4 = __aeabi_fcmpeq(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = __aeabi_f2d();\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000000);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000004);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = __truncdfsf2();\n      iVar4 = __addsf3(uVar28);\n      uVar8 = __addsf3(iVar29);\n      iVar9 = __addsf3(uVar31,uVar31);\n      uVar10 = __addsf3(uVar30,uVar30);\n      uVar11 = __aeabi_fmul(uVar28);\n      uVar12 = __aeabi_fmul(uVar28,iVar29);\n      uVar13 = __aeabi_fmul(uVar28,uVar31);\n      uVar14 = __aeabi_fmul(iVar29);\n      uVar15 = __aeabi_fmul(iVar29,uVar30);\n      uVar16 = __aeabi_fmul(uVar31,uVar31);\n      uVar17 = __aeabi_fmul(uVar30,uVar30);\n      uVar2 = __aeabi_fdiv(0x3f800000,uVar2);\n      uVar3 = __aeabi_fdiv(0x3f800000,uVar3);\n      uVar18 = __aeabi_fmul(in_stack_00000008,uVar3);\n      uVar19 = __aeabi_fmul(in_stack_0000000c,uVar3);\n      uVar3 = __aeabi_fmul(in_stack_00000010,uVar3);\n      iVar20 = __aeabi_fmul(iVar4,uVar18);\n      uVar21 = __aeabi_fmul(iVar4,uVar19);\n      uVar22 = __aeabi_fmul(iVar4,uVar3);\n      uVar23 = __aeabi_fmul(uVar8,uVar18);\n      uVar24 = __aeabi_fmul(uVar11,uVar18);\n      uVar25 = __aeabi_fmul(uVar30,uVar21);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar31,uVar22);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar18);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar19);\n      uVar25 = __aeabi_fmul(uVar25,uVar31);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar30,iVar20);\n      uVar26 = __aeabi_fmul(uVar11,uVar19);\n      uVar25 = __addsf3(uVar25,uVar26);\n      uVar22 = __aeabi_fmul(iVar29,uVar22);\n      uVar22 = __aeabi_fsub(uVar25,uVar22);\n      uVar25 = __aeabi_fmul(uVar31,uVar23);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar19);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(iVar9,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar24 = __aeabi_fmul(uVar24,uVar24);\n      uVar22 = __aeabi_fmul(uVar22,uVar22);\n      __addsf3(uVar24,uVar22);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      iVar27 = __truncdfsf2();\n      uVar22 = __aeabi_fmul(iVar20 + -0x80000000,uVar31);\n      uVar21 = __aeabi_fmul(iVar29,uVar21);\n      uVar21 = __addsf3(uVar22,uVar21);\n      uVar11 = __aeabi_fmul(uVar11,uVar3);\n      uVar11 = __addsf3(uVar21,uVar11);\n      uVar21 = __aeabi_fmul(uVar30,uVar23);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar14,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(iVar9,uVar19);\n      uVar21 = __aeabi_fmul(uVar21,uVar30);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar16,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar17,uVar3);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __addsf3(uVar11,uVar11);\n      uVar22 = __addsf3(uVar15);\n      uVar23 = __aeabi_fmul(uVar31,iVar4);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(mz,uVar2);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(uVar30,iVar9);\n      uVar24 = __addsf3(uVar12);\n      uVar23 = __addsf3(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(angle,uVar2);\n      uVar23 = __aeabi_fsub(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(uVar31,uVar11);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar16);\n      uVar17 = __aeabi_fsub(uVar25,uVar17);\n      uVar17 = __aeabi_fmul(uVar17,iVar27);\n      uVar25 = __aeabi_fsub(uVar15,uVar13);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar17 = __addsf3(uVar17,uVar25);\n      uVar17 = __aeabi_fsub(uVar17,uVar18);\n      uVar18 = __aeabi_fmul(iVar29,uVar11);\n      uVar25 = __aeabi_fmul(iVar29,uVar31);\n      uVar26 = __aeabi_fmul(uVar28,uVar30);\n      uVar25 = __aeabi_fsub(uVar25,uVar26);\n      uVar25 = __aeabi_fmul(uVar25,iVar27);\n      uVar26 = __aeabi_fmul(uVar31,uVar30);\n      uVar12 = __addsf3(uVar26,uVar12);\n      uVar12 = __aeabi_fmul(uVar12,uVar11);\n      uVar12 = __addsf3(uVar25,uVar12);\n      uVar12 = __aeabi_fsub(uVar12,uVar19);\n      uVar19 = __aeabi_fmul(uVar31,iVar27);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar14);\n      uVar25 = __aeabi_fsub(uVar25,uVar16);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar13 = __aeabi_fmul(uVar13,iVar27);\n      uVar13 = __addsf3(uVar25,uVar13);\n      uVar3 = __aeabi_fsub(uVar13,uVar3);\n      uVar13 = __aeabi_fmul(iVar9 + -0x80000000,uVar22);\n      uVar15 = __aeabi_fmul(uVar8,uVar23);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar24,uVar17);\n      uVar13 = __aeabi_fsub(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar30,iVar27 + -0x80000000);\n      uVar15 = __addsf3(uVar15,uVar18);\n      uVar15 = __aeabi_fmul(uVar15,uVar12);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar19,uVar3);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar14 = __addsf3(uVar14);\n      uVar14 = __aeabi_fsub(0x3f800000,uVar14);\n      uVar15 = __addsf3(uVar16);\n      uVar14 = __aeabi_fsub(uVar14,uVar15);\n      uVar2 = __aeabi_fmul(in_r2,uVar2);\n      uVar2 = __aeabi_fsub(uVar14,uVar2);\n      uVar14 = __aeabi_fmul(uVar30,uVar11);\n      uVar11 = __aeabi_fmul(uVar28,uVar11);\n      uVar15 = __aeabi_fmul(uVar10,uVar22);\n      uVar16 = __aeabi_fmul(iVar4,uVar23);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(iVar29,0x40800000);\n      uVar16 = __aeabi_fmul(uVar16,uVar2);\n      uVar15 = __aeabi_fsub(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar17,uVar14);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __addsf3(uVar19,uVar11);\n      uVar16 = __aeabi_fmul(uVar16,uVar12);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar30,iVar27);\n      uVar19 = __aeabi_fmul(iVar29,uVar21);\n      uVar16 = __aeabi_fsub(uVar16,uVar19);\n      uVar16 = __aeabi_fmul(uVar16,uVar3);\n      uVar15 = __addsf3(uVar15,uVar16);\n      iVar20 = __addsf3(iVar27,iVar27);\n      uVar16 = __aeabi_fmul(iVar29,iVar27);\n      uVar19 = __aeabi_fmul(iVar4 + -0x80000000,uVar22);\n      uVar10 = __aeabi_fmul(uVar10,uVar23);\n      uVar10 = __addsf3(uVar19,uVar10);\n      uVar19 = __aeabi_fmul(uVar31,0x40800000);\n      uVar2 = __aeabi_fmul(uVar19,uVar2);\n      uVar2 = __aeabi_fsub(uVar10,uVar2);\n      uVar10 = __aeabi_fmul(uVar31,iVar20 + -0x80000000);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __addsf3(uVar14,uVar16);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27);\n      uVar11 = __aeabi_fmul(uVar31,uVar21);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar3);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar8 = __aeabi_fmul(uVar8,uVar22);\n      uVar10 = __aeabi_fmul(iVar9,uVar23);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar30,iVar20 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar18);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar24);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar3 = __aeabi_fmul(uVar3,uVar16);\n      uVar3 = __addsf3(uVar8,uVar3);\n      uVar8 = __aeabi_fmul(uVar13);\n      uVar10 = __aeabi_fmul(uVar15);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar2,uVar2);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar8,uVar10);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      uVar8 = __truncdfsf2();\n      uVar8 = __aeabi_fdiv(0x3f800000,uVar8);\n      puVar1 = PTR_deltat_08003d84;\n      uVar12 = *(undefined4 *)PTR_beta_08003d80;\n      uVar14 = *(undefined4 *)PTR_beta_08003d80;\n      uVar16 = *(undefined4 *)PTR_beta_08003d80;\n      uVar17 = *(undefined4 *)PTR_beta_08003d80;\n      uVar10 = __aeabi_fmul(iVar29 + -0x80000000,uVar5);\n      uVar11 = __aeabi_fmul(uVar31,uVar6);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar11 = __aeabi_fmul(uVar30,uVar7);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,0x3f000000);\n      uVar11 = __aeabi_fmul(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __aeabi_fmul(uVar11,uVar12);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar13);\n      uVar10 = __addsf3(uVar10,uVar28);\n      uVar11 = __aeabi_fmul(uVar28,uVar5);\n      uVar12 = __aeabi_fmul(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __addsf3(uVar11,uVar12);\n      uVar12 = __aeabi_fmul(uVar30,uVar6);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,0x3f000000);\n      uVar12 = __aeabi_fmul(uVar15,uVar8);\n      uVar12 = __aeabi_fmul(uVar12,uVar14);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,uVar13);\n      uVar11 = __addsf3(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = __aeabi_fmul(uVar28,uVar6);\n      uVar13 = __aeabi_fmul(iVar29,uVar7);\n      uVar12 = __aeabi_fsub(uVar12,uVar13);\n      uVar13 = __aeabi_fmul(uVar30,uVar5);\n      uVar12 = __addsf3(uVar12,uVar13);\n      uVar12 = __aeabi_fmul(uVar12,0x3f000000);\n      uVar2 = __aeabi_fmul(uVar2,uVar8);\n      uVar2 = __aeabi_fmul(uVar2,uVar16);\n      uVar2 = __aeabi_fsub(uVar12,uVar2);\n      uVar2 = __aeabi_fmul(uVar2,uVar14);\n      uVar2 = __addsf3(uVar2,uVar31);\n      uVar28 = __aeabi_fmul(uVar28,uVar7);\n      uVar6 = __aeabi_fmul(iVar29,uVar6);\n      uVar28 = __addsf3(uVar28,uVar6);\n      uVar31 = __aeabi_fmul(uVar31,uVar5);\n      uVar31 = __aeabi_fsub(uVar28,uVar31);\n      uVar31 = __aeabi_fmul(uVar31,0x3f000000);\n      uVar3 = __aeabi_fmul(uVar3,uVar8);\n      uVar3 = __aeabi_fmul(uVar3,uVar17);\n      uVar5 = *(undefined4 *)puVar1;\n      uVar3 = __aeabi_fsub(uVar31,uVar3);\n      uVar3 = __aeabi_fmul(uVar3,uVar5);\n      uVar3 = __addsf3(uVar3,uVar30);\n      uVar30 = __aeabi_fmul(uVar10,uVar10);\n      uVar31 = __aeabi_fmul(uVar11,uVar11);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar2,uVar2);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar30,uVar31);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar30 = __truncdfsf2();\n      uVar30 = __aeabi_fdiv(0x3f800000,uVar30);\n      uVar31 = __aeabi_fmul(uVar10,uVar30);\n      puVar1 = PTR_q_08003d88;\n      *(undefined4 *)PTR_q_08003d88 = uVar31;\n      uVar5 = __aeabi_fmul(uVar11,uVar30);\n      *(undefined4 *)(puVar1 + 4) = uVar5;\n      uVar2 = __aeabi_fmul(uVar2,uVar30);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = __aeabi_fmul(uVar3,uVar30);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = __aeabi_fmul(uVar5,uVar3);\n      uVar2 = __aeabi_fmul(uVar31,uVar2);\n      uVar2 = __aeabi_fsub(uVar3,uVar2);\n      __addsf3(uVar2,uVar2);\n      __aeabi_f2d();\n      asin((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar32 = __muldf3();\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = __truncdfsf2();\n      *in_stack_00000014 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar31,uVar31);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar30,uVar30);\n      __addsf3(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar28,uVar30);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar30,uVar30);\n      uVar3 = __aeabi_fmul(uVar31,uVar31);\n      uVar2 = __addsf3(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      __aeabi_fsub(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar30,uVar28);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "asin",
                "__aeabi_fmul",
                "__divdf3",
                "__addsf3",
                "__muldf3",
                "sqrt",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "atan2",
                "__aeabi_fcmpeq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_double_values_08000980",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result1",
                "param_4": "result2"
            },
            "code": "void compare_double_values_08000980(float value1, float value2, int result1, int result2)\n{\n  __aeabi_cdcmpeq(value1, value2, result1, result2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000980"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "configure_timer_08002368",
                "TIMx": "timer",
                "Structure": "config",
                "uVar1": "cr1",
                "pTVar2": "repetition_counter",
                "DAT_080023cc": "timer1",
                "CounterMode": "counter_mode",
                "ClockDivision": "clock_division",
                "Period": "period",
                "Prescaler": "prescaler",
                "RepetitionCounter": "repetition_counter_value"
            },
            "code": "void configure_timer_08002368(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\\n\\\n        uint32_t cr1 = timer->CR1;\\n\\\n        if (timer == DAT_080023cc || timer == timer2 || timer == timer3 || timer == timer4) {\\n\\\n            cr1 &= 0xffffff8f;\\n\\\n            cr1 |= config->CounterMode;\\n\\\n            if (timer == DAT_080023cc || timer == timer2 || timer == timer3) {\\n\\\n                cr1 &= 0xfffffcff;\\n\\\n                cr1 |= config->ClockDivision;\\n\\\n            }\\n\\\n        }\\n\\\n        timer->CR1 = cr1;\\n\\\n        timer->ARR = config->Period;\\n\\\n        timer->PSC = config->Prescaler;\\n\\\n        TIM_TypeDef *repetition_counter = DAT_080023cc;\\n\\\n        if (timer == DAT_080023cc) {\\n\\\n            repetition_counter = (TIM_TypeDef *)config->RepetitionCounter;\\n\\\n        }\\n\\\n        if (timer == DAT_080023cc) {\\n\\\n            timer->RCR = (uint32_t)repetition_counter;\\n\\\n        }\\n\\\n        timer->EGR = 1;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08002368"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "uVar1": "pll_mul_factor_value_1",
                "uVar2": "clock_frequency",
                "uVar3": "pll_mul_factor_value_2",
                "uVar4": "reg_value",
                "uVar5": "leading_zeroes_count_1",
                "uVar6": "leading_zeroes_count_2",
                "puVar7": "pll_mul_factor_table_ptr",
                "puVar8": "pll_mul_factor_table_copy_ptr",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table",
                "DAT_08002090": "register_address",
                "DAT_08002094": "base_frequency",
                "DAT_08002098": "default_frequency"
            },
            "code": "uint32_t calculate_clock_frequency_08002008(void)\n{\n    uint8_t prediv_factor_table[2] = {1, 2};\n    uint8_t pll_mul_factor_table[16];\n    uint32_t clock_frequency = 0;\n    uint32_t reg_value = *(uint32_t *)(DAT_08002090 + 4);\n    uint32_t pll_mul_factor_index = (reg_value & 0x3c0000) >> 14;\n    uint32_t prediv_factor_index = 0;\n    uint32_t leading_zeroes_count = 0;\n\n    // Copy PLL multiplier factor table\n    for (int i = 0; i < 16; i++) {\n        pll_mul_factor_table[i] = *(uint32_t *)(PTR_DAT_0800208c + (i * 8));\n    }\n\n    // Calculate pre-divider factor index\n    if ((reg_value & 0xc) == 8) {\n        leading_zeroes_count = count_leading_zeroes(0x3c00);\n        if ((int)(reg_value << 0xf) < 0) {\n            leading_zeroes_count = count_leading_zeroes(0x4000);\n            prediv_factor_index = (reg_value & 0x20000) >> (leading_zeroes_count & 0xff);\n        }\n    }\n\n    // Calculate clock frequency\n    clock_frequency = pll_mul_factor_table[pll_mul_factor_index] * DAT_08002094 / prediv_factor_table[prediv_factor_index];\n\n    return clock_frequency;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08002008"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_greater_than_or_equal",
                "is_negative_second_param": "is_negative_second_param",
                "is_negative_fourth_param": "is_negative_fourth_param",
                "is_first_or_second_param_not_zero": "is_first_or_second_param_not_zero",
                "is_third_or_fourth_param_not_zero": "is_third_or_fourth_param_not_zero",
                "is_second_and_fourth_param_equal": "is_second_and_fourth_param_equal",
                "is_first_and_third_param_equal": "is_first_and_third_param_equal",
                "is_second_and_fourth_param_xor_not_zero": "is_second_and_fourth_param_xor_not_zero",
                "is_second_param_greater_than_or_equal_to_fourth_param": "is_second_param_greater_than_or_equal_to_fourth_param",
                "is_third_param_less_than_or_equal_to_first_param": "is_third_param_less_than_or_equal_to_first_param",
                "is_second_and_fourth_param_xor_negative": "is_second_and_fourth_param_xor_negative",
                "is_second_and_fourth_param_xor_not_negative": "is_second_and_fourth_param_xor_not_negative",
                "is_second_and_fourth_param_equal_and_third_and_first_param_not_equal": "is_second_and_fourth_param_equal_and_third_and_first_param_not_equal",
                "is_negative_second_param_or_negative_fourth_param_and_either_first_or_second_param_not_zero_or_third_or_fourth_param_not_zero": "is_negative_second_param_or_negative_fourth_param_and_either_first_or_second_param_not_zero_or_third_or_fourth_param_not_zero",
                "result": "result"
            },
            "code": "uint check_parameters_080008fc(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint result;\n  bool is_negative_second_param = ((int)(second_param << 1) >> 0x15 == -1);\n  bool is_negative_fourth_param = ((int)(fourth_param << 1) >> 0x15 == -1);\n  bool is_first_or_second_param_not_zero = ((first_param | second_param << 0xc) != 0);\n  bool is_third_or_fourth_param_not_zero = ((third_param | fourth_param << 0xc) != 0);\n  bool is_second_and_fourth_param_equal = (second_param == fourth_param);\n  bool is_first_and_third_param_equal = (first_param == third_param);\n  bool is_second_and_fourth_param_xor_not_zero = ((second_param ^ fourth_param) != 0);\n  bool is_second_param_greater_than_or_equal_to_fourth_param = (fourth_param <= second_param);\n  bool is_third_param_less_than_or_equal_to_first_param = (third_param <= first_param);\n  bool is_second_and_fourth_param_xor_negative = ((int)(second_param ^ fourth_param) < 0);\n  bool is_second_and_fourth_param_xor_not_negative = ((int)(second_param ^ fourth_param) >= 0);\n  bool is_second_and_fourth_param_equal_and_third_and_first_param_not_equal = (is_second_and_fourth_param_equal && !is_first_and_third_param_equal);\n  bool is_negative_second_param_or_negative_fourth_param_and_either_first_or_second_param_not_zero_or_third_or_fourth_param_not_zero = ((is_negative_second_param || is_negative_fourth_param) && (is_negative_second_param && is_first_or_second_param_not_zero || is_negative_fourth_param && is_third_or_fourth_param_not_zero));\n  if (is_negative_second_param_or_negative_fourth_param_and_either_first_or_second_param_not_zero_or_third_or_fourth_param_not_zero)\n  {\n    result = 1;\n  }\n  else if (is_first_param_and_second_param_both_zero_or_third_param_and_fourth_param_both_zero_or_second_and_fourth_param_equal_and_third_and_first_param_not_equal)\n  {\n    result = 0;\n  }\n  else\n  {\n    if (is_second_and_fourth_param_xor_not_zero)\n    {\n      if (is_second_and_fourth_param_xor_not_negative)\n      {\n        if (is_second_and_fourth_param_equal)\n        {\n          result = is_third_param_less_than_or_equal_to_first_param;\n        }\n        else if (is_second_param_greater_than_or_equal_to_fourth_param)\n        {\n          result = 1;\n        }\n        else\n        {\n          result = ~((int)fourth_param >> 0x1f) | 1;\n        }\n      }\n      else\n      {\n        result = is_second_and_fourth_param_xor_negative;\n      }\n    }\n    else\n    {\n      result = is_first_and_third_param_equal;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_uwTick_0800114c",
                "PTR_uwTick_08001158": "uwTick"
            },
            "code": "void increment_uwTick_0800114c(void)\n{\n  int* PTR_uwTick_08001158 = (int*)PTR_PTR_uwTick_08001158_08001158;\n  *PTR_uwTick_08001158 = *PTR_uwTick_08001158 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "main",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_uwTick_0800114c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "calculate_APB_prescaler_08002250",
                "uVar1": "leading_zeroes",
                "PTR_SystemCoreClock_0800227c": "system_core_clock",
                "PTR_APBPrescTable_08002278": "apb_prescaler_table",
                "DAT_08002274": "apb_prescaler_register_address",
                "apb_prescaler_index": "apb_prescaler_index",
                "apb_prescaler_value": "apb_prescaler_value"
            },
            "code": "uint32_t calculate_APB_prescaler_08002250(void)\n{\n  uint32_t leading_zeroes = count_leading_zeroes(0x1c0000);\n  uint32_t PTR_SystemCoreClock_0800227c = *(uint32_t *)PTR_SystemCoreClock_0800227c;\n  uint32_t apb_prescaler_index = (*(uint32_t *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes & 0xff);\n  uint32_t apb_prescaler_value = PTR_APBPrescTable_08002278[apb_prescaler_index];\n  return PTR_SystemCoreClock_0800227c >> apb_prescaler_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "calculate_APB_prescaler_08002250"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_irq_enable_bit_080011fc",
                "IRQn": "irq_num",
                "DAT_08001210": "irq_enable_base_address",
                "PTR_08001210": "irq_enable_base_address_pointer"
            },
            "code": "void set_irq_enable_bit_080011fc(IRQn_Type irq_num)\n{\n  int *irq_enable_reg = (int *)(DAT_08001210 + ((uint)(int)irq_num >> 5) * 4);\n  int irq_enable_bit = 1 << ((int)irq_num & 0x1fU);\n  *irq_enable_reg = irq_enable_bit;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_irq_enable_bit_080011fc"
        },
        "FUN_08003f7c": {
            "renaming": {
                "FUN_08003f7c": "blinkLEDs_08003f7c",
                "iVar1": "blinkCount"
            },
            "code": "void blinkLEDs_08003f7c(void)\n{\n  int blinkCount = 3;\n  do {\n    toggleLED(1,0,0);\n    delay_ms(100);\n    toggleLED(0,1,0);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    blinkCount--;\n  } while (blinkCount != 0);\n  toggleLED(1,1,1);\n  return;\n}",
            "called": [
                "toggleLED",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f7c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "blinkLEDs_08003f7c"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_08005646",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dest_ptr",
                "iVar2": "bytes_left",
                "puVar3": "src_ptr"
            },
            "code": "void * reverse_copy_08005646(void *destination, const void *source, size_t num_bytes) {\n  unsigned char *dest = (unsigned char *)destination;\n  const unsigned char *src = (const unsigned char *)source;\n  if (src < dest && dest < src + num_bytes) {\n    dest += num_bytes - 1;\n    src += num_bytes - 1;\n    for (size_t i = 0; i < num_bytes; i++) {\n      *(dest--) = *(src--);\n    }\n  } else {\n    for (size_t i = 0; i < num_bytes; i++) {\n      *(dest++) = *(src++);\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "convert_float_to_double_08000990",
                "param_1": "float_val"
            },
            "code": "undefined4 convert_float_to_double_08000990(undefined4 float_val)\n{\n  __nedf2();\n  return float_val;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq"
            ],
            "imported": false,
            "current_name": "convert_float_to_double_08000990"
        },
        "FUN_08004ee6": {
            "renaming": {
                "FUN_08004ee6": "wait_forever_08004ee6"
            },
            "code": "void wait_forever_08004ee6(void) {\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "HardFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee6",
            "calling": [
                "HardFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004ee6"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "send_altitude_frame_08004434",
                "in_r1": "data",
                "local_10": "altitude",
                "local_c": "data",
                "PTR_msp_txf_altitude_08004454": "PTR_altitude_frame_data"
            },
            "code": "void send_altitude_frame_08004434(void)\n{\n  uint16_t altitude = *(uint16_t *)(PTR_msp_txf_altitude_08004454 + 4);\n  uint32_t data = (*(uint32_t *)PTR_msp_txf_altitude_08004454 & 0xffff0000) | altitude;\n  MSP_SendFrame('m', (uint8_t *)&data, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_altitude_frame_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08004ee4": {
            "renaming": {
                "FUN_08004ee4": "do_nothing_08004ee4"
            },
            "code": "\nvoid do_nothing_08004ee4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee4",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ee4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "infiniteLoop_08004ee8"
            },
            "code": "void infiniteLoop_08004ee8(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "MemManage_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [
                "MemManage_Handler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_08004ee8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "print_formatted_string_08004ffc",
                "__s": "string_buffer",
                "__format": "format_string",
                "local_78": "string_buffer_array",
                "local_70": "max_string_length",
                "local_6c": "string_buffer_size",
                "local_6a": "max_format_length",
                "local_68": "current_string_position",
                "local_64": "max_output_length",
                "pcStack_c": "current_format_position",
                "uStack_8": "in_r2",
                "uStack_4": "in_r3"
            },
            "code": "int print_formatted_string_08004ffc(char *string_buffer, char *format_string, ...) {\n  int num_chars_printed;\n  va_list args;\n  va_start(args, format_string);\n  num_chars_printed = vsnprintf(string_buffer, INT_MAX, format_string, args);\n  va_end(args);\n  return num_chars_printed;\n}",
            "called": [
                "_svfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "serialInt"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08004ffc"
        },
        "FUN_0800103c": {
            "renaming": {
                "FUN_0800103c": "check_for_equality_0800103c",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool check_for_equality_0800103c(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  __aeabi_cfcmpeq();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800103c",
            "calling": [],
            "imported": false,
            "current_name": "check_for_equality_0800103c"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_uwTick_value_0800115c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_0800115c(void)\n{\n  uint32_t *PTR_uwTick_08001164 = (uint32_t *)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_I2C_Mem_Write",
                "HAL_RCC_OscConfig",
                "HAL_I2C_Mem_Read",
                "millis",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "micros",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_0800115c"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "get_uwTick_value_08004f60",
                "PTR_uwTick_08001164": "uwTick_address"
            },
            "code": "uint32_t get_uwTick_value_08004f60(void)\n{\n  uint32_t* PTR_uwTick_08001164 = (uint32_t*) PTR_uwTick_08001164;\n  uint32_t uwTick_value = *PTR_uwTick_08001164;\n  return uwTick_value;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f60"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "read_magnetometer_data_08002d88",
                "puVar3": "i2c_buffer",
                "puVar4": "mag_data",
                "puVar5": "mag_calib",
                "puVar6": "mag_bias",
                "uVar8": "byte_f",
                "uVar9": "mRes",
                "bVar7": "i2c_status",
                "sVar1": "byte1",
                "sVar2": "byte2",
                "raw_data": "raw_data"
            },
            "code": "void read_magnetometer_data_08002d88()\n{\n    short byte1;\n    short byte2;\n    uint8_t raw_data[7];\n    undefined *i2c_buffer = PTR_s____Src_MPU9250_c_08002e80;\n    undefined *mag_raw = PTR_magRaw_08002e84;\n    undefined *mag_bias = PTR_magBias_08002e9c;\n    undefined *mag_calib = PTR_magCalib_08002e98;\n    undefined *mag_scale = PTR_magScale_08002e8c;\n    undefined *mag_data = PTR_magData_08002e90;\n    uint8_t i2c_status = I2C_ReadByte(0x18, 2, PTR_s____Src_MPU9250_c_08002e80, 0xd7);\n    if ((int)((uint)i2c_status << 0x1f) < 0)\n    {\n        I2C_ReadByteArray(0x18, 3, raw_data, 7, i2c_buffer, 0xda);\n        if ((int)((uint)raw_data[6] << 0x1c) < 0)\n        {\n            *(short *)(PTR_msp_txf_status_08002e94 + 2) = *(short *)(PTR_msp_txf_status_08002e94 + 2) + 1;\n        }\n        else\n        {\n            byte1 = CONCAT11(raw_data[3], raw_data[2]);\n            byte2 = CONCAT11(raw_data[5], raw_data[4]);\n            *(undefined2 *)mag_raw = raw_data._0_2_;\n            *(short *)(mag_raw + 2) = byte1;\n            *(short *)(mag_raw + 4) = byte2;\n            undefined4 mRes = *(undefined4 *)PTR_mRes_08002e88;\n            float32_t byte1_f = __floatsisf((int)byte1);\n            float32_t byte2_f = __floatsisf((int)byte2);\n            float32_t x = __aeabi_fmul(byte1_f, mRes);\n            x = __aeabi_fmul(x, *(undefined4 *)mag_calib);\n            x = __aeabi_fsub(x, *(undefined4 *)mag_bias);\n            x = __aeabi_fmul(x, *(undefined4 *)mag_scale);\n            *(undefined4 *)mag_data = x;\n            float32_t y = __aeabi_fmul(byte2_f, mRes);\n            y = __aeabi_fmul(y, *(undefined4 *)(mag_calib + 4));\n            y = __aeabi_fsub(y, *(undefined4 *)(mag_bias + 4));\n            y = __aeabi_fmul(y, *(undefined4 *)(mag_scale + 4));\n            *(undefined4 *)(mag_data + 4) = y;\n            float32_t z = __aeabi_fmul(byte2_f, mRes);\n            z = __aeabi_fmul(z, *(undefined4 *)(mag_calib + 8));\n            z = __aeabi_fsub(z, *(undefined4 *)(mag_bias + 8));\n            z = __aeabi_fmul(z, *(undefined4 *)(mag_scale + 8));\n            *(undefined4 *)(mag_data + 8) = z;\n        }\n    }\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_magnetometer_data_08002d88"
        },
        "FUN_08004f64": {
            "renaming": {
                "FUN_08004f64": "do_nothing_08004f64"
            },
            "code": "\nvoid do_nothing_08004f64(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "LED_StartupSequence",
                "I2C_WriteByte",
                "_Error_Handler",
                "MS5611_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f64"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_accelerometer_data_08002b48",
                "puVar1": "accel_raw_ptr",
                "uVar2": "accel_data_float",
                "in_r3": "register_data",
                "raw_data": "raw_accel_data",
                "PTR_s____Src_MPU9250_c_08002be4": "register_address_pointer",
                "PTR_accelRaw_08002be8": "accel_raw_pointer",
                "PTR_accelData_08002bec": "accel_data_pointer"
            },
            "code": "void read_accelerometer_data_08002b48(void)\n{\n  uint16_t in_r3;\n  uint8_t raw_accel_data [6];\n  float accel_data [3];\n  in_r3 = read_from_register(0xd0,0x3b,raw_accel_data,6);\n  accel_data[0] = (float)((int16_t)((raw_accel_data[0] << 8) | raw_accel_data[1])) * 0.0000610352;\n  accel_data[1] = (float)((int16_t)((raw_accel_data[2] << 8) | raw_accel_data[3])) * 0.0000610352;\n  accel_data[2] = (float)((int16_t)((raw_accel_data[4] << 8) | raw_accel_data[5])) * 0.0000610352;\n  memcpy(PTR_accelRaw_08002be8, raw_accel_data, 6);\n  memcpy(PTR_accelData_08002bec, accel_data, 12);\n}\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_accelerometer_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08004f68(void)\n{\n  int i;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8672_08004fa8;\n  code *jump_table;\n  for (i = 0; PTR_gyroBias_08004fa0 + i < PTR_completed_8672_08004fa4; i += 4) {\n    *(undefined4 *)(PTR_gyroBias_08004fa0 + i) = *(undefined4 *)(PTR__sidata_08004f9c + i);\n  }\n  for (; completed_ptr < PTR__ebss_08004fac; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8004f9a;\n  main();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "SystemInit",
                "main",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_priority_group_08001170",
                "PriorityGroup": "priority_group",
                "PTR_DAT_08001190": "priority_group_reg",
                "DAT_08001190": "priority_group_reg_base",
                "uint": "uint32_t"
            },
            "code": "void set_priority_group_08001170(uint32_t priority_group) {\n    uint32_t* const PTR_DAT_08001190 = (uint32_t*)(DAT_08001190 + 0xc);\n    const uint32_t priority_mask = 0xf8ff;\n    const uint32_t priority_value = 0x5fa0000;\n    const uint32_t priority_bit_shift = 8;\n    const uint32_t priority_masked_value = priority_value | ((priority_group & 7) << priority_bit_shift);\n    *PTR_DAT_08001190 = (*PTR_DAT_08001190 & priority_mask) | priority_masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "HAL_Init",
                "HAL_MspInit"
            ],
            "imported": false,
            "current_name": "set_priority_group_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "read_gyro_data_08002bf0",
                "raw_data": "raw_data",
                "puVar1": "gyro_raw",
                "puVar2": "gyro_data",
                "uVar3": "gyro_bias",
                "DAT_08002ca8": "gyro_scale",
                "PTR_gyroRaw_08002ca0": "gyro_raw_reg",
                "PTR_gyroBias_08002ca4": "gyro_bias_reg",
                "PTR_gyroData_08002cac": "gyro_data_reg",
                "__floatsisf": "convert_to_float",
                "__aeabi_fmul": "multiply_float",
                "__aeabi_fsub": "subtract_float",
                "I2C_ReadByteArray": "read_I2C",
                "PTR_s____Src_MPU9250_c_08002c9c": "src_mpu9250"
            },
            "code": "void read_gyro_data_08002bf0(void)\n{\n  uint8_t raw_data [6];\n  raw_data[0] = 0;\n  raw_data[1] = 0;\n  I2C_ReadByteArray(0xd0,0x43,raw_data,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  gyro_raw[0] = (raw_data[0] << 8) | raw_data[1];\n  gyro_raw[1] = (raw_data[2] << 8) | raw_data[3];\n  gyro_raw[2] = (raw_data[4] << 8) | raw_data[5];\n  float gyro_bias = (float)gyro_raw[0] * DAT_08002ca8 * 0.00000005960464 - PTR_gyroBias_08002ca4[0];\n  gyro_data[0] = gyro_bias;\n  gyro_bias = (float)gyro_raw[1] * DAT_08002ca8 * 0.00000005960464 - PTR_gyroBias_08002ca4[1];\n  gyro_data[1] = gyro_bias;\n  gyro_bias = (float)gyro_raw[2] * DAT_08002ca8 * 0.00000005960464 - PTR_gyroBias_08002ca4[2];\n  gyro_data[2] = gyro_bias;\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_gyro_data_08002bf0"
        },
        "FUN_08004ef0": {
            "renaming": {
                "FUN_08004ef0": "do_nothing_08004ef0"
            },
            "code": "\nvoid do_nothing_08004ef0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "read_sensor_data_08002ad0",
                "PTR_s____Src_MPU9250_c_08002b44": "sensor_data_buffer"
            },
            "code": "void read_sensor_data_08002ad0(void)\n{\n  I2C_ReadByte(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  I2C_WriteByte(0xd0,0x6b,0x80,1);\n  I2C_WriteByte(0xd0,0x6b,1,1);\n  I2C_WriteByte(0xd0,0x6c,0,1);\n  I2C_WriteByte(0xd0,0x19,0,1);\n  I2C_WriteByte(0xd0,0x1d,3,1);\n  I2C_WriteByte(0xd0,0x1a,3,1);\n  I2C_WriteByte(0xd0,0x1b,16,1);\n  I2C_WriteByte(0xd0,0x1c,8,1);\n  return;\n}",
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_sensor_data_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "is_not_CY_or_ZR_08001050",
                "in_CY": "is_CY",
                "in_ZR": "is_ZR"
            },
            "code": "bool is_not_CY_or_ZR_08001050(void)\n{\n  bool is_CY = __aeabi_cfrcmple();\n  bool is_ZR = (bool)in_ZR;\n  return !is_CY || is_ZR;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "AHRS_GetYaw"
            ],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_08001050"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "increment_sys_tick_08004ef4"
            },
            "code": "void increment_sys_tick_08004ef4(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [],
            "imported": false,
            "current_name": "increment_sys_tick_08004ef4"
        },
        "FUN_08004ef2": {
            "renaming": {
                "FUN_08004ef2": "do_nothing_08004ef2"
            },
            "code": "\nvoid do_nothing_08004ef2(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef2"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_imu_data_to_local_buffer_and_send_frame_080043bc",
                "uVar1": "imu_data_32bit_upper",
                "uVar2": "imu_data_32bit_lower",
                "puVar3": "local_buffer_ptr",
                "puVar4": "imu_data_ptr",
                "local_24": "imu_data",
                "local_1c": "unused_local_array"
            },
            "code": "void copy_imu_data_to_local_buffer_and_send_frame_080043bc(void)\n{\n  uint16_t imu_data[6];\n  uint32_t *imu_data_ptr = (uint32_t *)PTR_msp_txf_raw_imu_080043ec;\n  uint16_t *local_buffer_ptr = (uint16_t *)imu_data;\n  for(int i = 0; i < 6; i++) {\n    *local_buffer_ptr = (uint16_t)*imu_data_ptr;\n    imu_data_ptr++;\n    local_buffer_ptr++;\n  }\n  MSP_SendFrame('f', (uint8_t *)imu_data, 0x12);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_imu_data_to_local_buffer_and_send_frame_080043bc"
        },
        "FUN_08004f5c": {
            "renaming": {
                "FUN_08004f5c": "get_uwTick_value_08004f5c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08004f5c(void)\n{\n  uint32_t *PTR_uwTick_08001164 = (uint32_t *)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f5c",
            "calling": [
                "MS5611_Update",
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f5c"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "convert_to_64bit_08000404",
                "param_1": "input",
                "uVar1": "upper_bits",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "overflow",
                "uVar6": "sign_mask",
                "in_r12": "lower_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "has_overflow"
            },
            "code": "ulonglong convert_to_64bit_08000404(uint input) {\n  uint abs_input = input;\n  uint sign_mask = input & 0x80000000;\n  if ((int)sign_mask < 0) {\n    abs_input = -input;\n  }\n  uint leading_zeros = count_leading_zeroes(abs_input);\n  uint shift_amount = leading_zeros + 21;\n  if (shift_amount < 32) {\n    uint overflow = shift_amount - 12;\n    if (overflow >= 0) {\n      return ((ulonglong)abs_input << (shift_amount & 0xff)) | ((ulonglong)abs_input >> (overflow & 0xff));\n    }\n    else {\n      return ((ulonglong)abs_input << (shift_amount & 0xff));\n    }\n  }\n  else {\n    uint shift_right_amount = 0x20 - (shift_amount & 0xff);\n    uint lower_bits = ((1U << (shift_amount & 0xff)) - 1) << shift_right_amount;\n    uint upper_bits = 0;\n    if (shift_amount != 32) {\n      upper_bits = abs_input << (shift_right_amount & 0xff);\n    }\n    return (((ulonglong)abs_input << (shift_amount & 0xff)) | upper_bits | lower_bits | (ulonglong)sign_mask);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "convert_to_64bit_08000404"
        },
        "FUN_08004eec": {
            "renaming": {
                "FUN_08004eec": "wait_forever_08004eec"
            },
            "code": "void wait_forever_08004eec(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "UsageFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eec",
            "calling": [
                "UsageFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004eec"
        },
        "FUN_08004eea": {
            "renaming": {
                "FUN_08004eea": "wait_forever_08004eea"
            },
            "code": "void wait_forever_08004eea(void)\n{\n  while(true)\n  {\n      // Do nothing\n  }\n}",
            "called": [
                "BusFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eea",
            "calling": [
                "BusFault_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004eea"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_08006070",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "atan_input",
                "uVar1": "division_result",
                "extraout_r1": "division_result_upper",
                "extraout_r1_00": "fabs_output",
                "unaff_r4": "unaff_r4",
                "iVar2": "fabs_output_upper",
                "uVar3": "uVar3",
                "uVar4": "absolute_divisor",
                "iVar5": "difference",
                "uVar6": "absolute_remainder",
                "uVar7": "result_lower",
                "uVar8": "result_upper"
            },
            "code": "undefined8 calculate_08006070(uint dividend,uint divisor,uint quotient,uint remainder,double atan_input)\n{\n    uint absolute_remainder = remainder & 0x7fffffff;\n    if (absolute_remainder | (-quotient | quotient) >> 0x1f) > DAT_08006220 || (divisor & 0x7fffffff | (-dividend | dividend) >> 0x1f) > DAT_08006220) {\n        return __aeabi_dadd(dividend, divisor);\n    }\n    if ((remainder + 0xc0100000 | quotient) == 0) {\n        atan(atan_input);\n        return CONCAT44(extraout_r1, dividend);\n    }\n    uint uVar3 = (int)remainder >> 0x1e & 2U | divisor >> 0x1f;\n    if (dividend | divisor) == 0) {\n        if (uVar3 == 2) {\n            return CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        if (uVar3 != 3) {\n            return CONCAT44(divisor, dividend);\n        }\n    }\n    else {\n        if (absolute_remainder != DAT_08006220) {\n            int difference = (int)(divisor - absolute_remainder) >> 0x14;\n            undefined4 division_result = DAT_08006210;\n            int fabs_output = DAT_08006214;\n            if (difference < 0x3d) {\n                if (((int)remainder < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n                    division_result = 0;\n                    fabs_output = 0;\n                }\n                else {\n                    division_result = __divdf3(dividend, divisor);\n                    fabs(atan_input);\n                    atan(atan_input);\n                    fabs_output = extraout_r1_00;\n                }\n            }\n            if (uVar3 != 1) {\n                if (uVar3 == 2) {\n                    double subtraction_result = __subdf3(division_result, fabs_output, DAT_08006208, DAT_0800620c);\n                    return CONCAT44(DAT_080061fc, DAT_080061f8) - (__int128)(long long)subtraction_result;\n                }\n                else {\n                    if (uVar3 == 0) {\n                        return CONCAT44(fabs_output, division_result);\n                    }\n                    double subtraction_result = __subdf3(division_result, fabs_output, DAT_08006208, DAT_0800620c);\n                    return (__int128)(long long)subtraction_result - CONCAT44(DAT_080061fc, DAT_080061f8);\n                }\n            }\n            return CONCAT44(fabs_output + -0x80000000, division_result);\n        }\n        return CONCAT44(DAT_08006214, DAT_08006210) + ((int)dividend < 0 ? CONCAT44(DAT_080061dc, DAT_080061d8) : 0);\n    }\n    return CONCAT44(DAT_08006214, DAT_08006210);\n}",
            "called": [
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "print_integer_to_serial_08004cac",
                "val": "value",
                "data": "data_pointer",
                "PTR_tx_buffer_08004cc4": "tx_buffer_pointer",
                "PTR_DAT_08004cc8": "data_pointer"
            },
            "code": "void print_integer_to_serial_08004cac(int value)\n{\n  undefined *buffer_pointer;\n  buffer_pointer = PTR_tx_buffer_08004cc4;\n  siprintf(PTR_tx_buffer_08004cc4, PTR_DAT_08004cc8, value);\n  serialPrint(buffer_pointer);\n  return;\n}",
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "print_integer_to_serial_08004cac"
        },
        "FUN_08004eee": {
            "renaming": {
                "FUN_08004eee": "do_nothing_08004eee"
            },
            "code": "\nvoid do_nothing_08004eee(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eee",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004eee"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "transmit_uart_data_08004c18",
                "ch": "data",
                "PTR_tx_buffer_08004c28": "tx_buffer",
                "HAL_UART_Transmit": "HAL_UART_Transmit",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "PTR_huart1_08004c2c": "huart1"
            },
            "code": "void transmit_uart_data_08004c18(uchar data)\n{\n  undefined *data_buffer;\n  \n  data_buffer = PTR_tx_buffer_08004c28;\n  *PTR_tx_buffer_08004c28 = data;\n  HAL_UART_Transmit((UART_HandleTypeDef *)PTR_huart1_08004c2c,data_buffer,1,5);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "MSP_SendFrame",
                "_Error_Handler",
                "serialPrint"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004c18"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "print_serial_data_08004c8c",
                "*data": "data",
                "sVar1": "data_length",
                "*puVar2": "current_char",
                "uchar": "uchar"
            },
            "code": "void print_serial_data_08004c8c(char *data)\n{\n  size_t data_length = strlen(data);\n  uchar *current_char;\n  for (current_char = (uchar *)data; (uint)((int)current_char - (int)data) < data_length; current_char++) {\n    serialWrite(*current_char);\n  }\n  return;\n}",
            "called": [
                "strlen",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "MSP_SendFrame",
                "serialInt",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "print_serial_data_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_i2c_status_08001460",
                "hi2c": "i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "uVar3": "status_reg_value",
                "pIVar4": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08001460(I2C_HandleTypeDef *i2c_handle, uint32_t flag, uint32_t timeout)\\\n    {\\\n        uint32_t start_time;\\\n        uint32_t current_time;\\\n        uint32_t status_reg_value;\\\n        I2C_TypeDef *i2c_instance;\\\n        start_time = HAL_GetTick();\\\n        do {\\\n            i2c_instance = i2c_handle->Instance;\\\n            if ((flag << 8) >> 0x18 == 1) {\\\n                status_reg_value = i2c_instance->SR1;\\\n            }\\\n            else {\\\n                status_reg_value = i2c_instance->SR2;\\\n            }\\\n            if ((flag & 0xffff & ~status_reg_value) == 0) {\\\n                return HAL_OK;\\\n            }\\\n            if ((int)(i2c_instance->SR1 << 0x15) < 0) {\\\n                i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\\\n                i2c_instance->SR1 = i2c_instance->SR1 & 0xfffffbff;\\\n                i2c_handle->ErrorCode = 4;\\\n                i2c_handle->State = HAL_I2C_STATE_READY;\\\n                i2c_handle->Lock = HAL_UNLOCKED;\\\n                return HAL_ERROR;\\\n            }\\\n            current_time = HAL_GetTick();\\\n        } while ((timeout == 0xffffffff) || ((timeout != 0 && (current_time - start_time <= timeout))));\\\n        i2c_handle->State = HAL_I2C_STATE_READY;\\\n        i2c_handle->Lock = HAL_UNLOCKED;\\\n        return HAL_TIMEOUT;\\\n    }",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08001460"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_pwm_08003fd0",
                "pwm": "pwm_value",
                "PTR_htim4_08003fd8": "timer_4_ptr"
            },
            "code": "void set_pwm_08003fd0(int pwm_value)\n{\n    int* timer_4 = (int*)*(int*)PTR_htim4_08003fd8;\n    int* pwm_register = (int*)(timer_4 + 0x3c);\n    *pwm_register = pwm_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_08003fd0"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_pointers_if_not_null_08000134",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "DAT_08000144": "DAT_global_variable",
                "PTR__init_0800014c": "global_pointer1",
                "PTR_object_8677_08000148": "global_pointer2"
            },
            "code": "typedef unsigned long long undefined8;\n\nundefined8 concatenate_pointers_if_not_null_08000134(void* pointer1, void* pointer2)\n{\n  if (DAT_08000144 != 0) {\n    pointer1 = PTR__init_0800014c;\n    pointer2 = PTR_object_8677_08000148;\n  }\n  return CONCAT44(pointer2, pointer1);\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "concatenate_pointers_if_not_null_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "execute_afl_call_08003eb0",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08003ec4": "PTR_noHyperCall_08003ec4"
            },
            "code": "uint32_t execute_afl_call_08003eb0(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08003ec4 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffc8;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = __divdf3((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = __muldf3(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = __muldf3(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = __aeabi_dadd((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = __muldf3(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = __muldf3(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = __muldf3(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    fabs((double)CONCAT44(param_2,in_stack_ffffffc8));\n    uVar10 = __subdf3(0,DAT_08005f98,param_1,extraout_r1);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __muldf3(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = __ieee754_sqrt(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = __aeabi_dadd((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = __aeabi_dadd(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __muldf3(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = __aeabi_dadd(uVar7,uVar6,0,uVar6);\n      uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                        (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = __subdf3(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __aeabi_dadd(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = __subdf3(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "asin"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "calculate_angle_08002ee8",
                "iVar1": "comparison_result",
                "uVar2": "angle_value",
                "fVar3": "angle"
            },
            "code": "float calculate_angle_08002ee8(void)\n{\n  int comparison_result;\n  undefined4 angle_value;\n  float angle;\n  \n  angle_value = *(undefined4 *)(PTR_AHRS_Angle_08002f18 + 8);\n  comparison_result = __aeabi_fcmpge(angle_value,DAT_08002f1c);\n  if ((comparison_result != 0) && (comparison_result = __aeabi_fcmplt(angle_value,DAT_08002f20), comparison_result != 0)) {\n    angle = (float)__addsf3(angle_value,DAT_08002f20);\n    return angle;\n  }\n  angle = (float)__aeabi_fsub(angle_value,DAT_08002f24);\n  return angle;\n}",
            "called": [
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_angle_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "configureSysTick_08001104",
                "TickPriority": "tickPriority",
                "uVar1": "hclkFrequency",
                "SysTick_IRQn": "SysTick_IRQn",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08001104(uint32_t tickPriority)\n{\n  uint32_t hclkFrequency = HAL_RCC_GetHCLKFreq();\n  uint32_t systickInterval = hclkFrequency / 1000;\n  HAL_SYSTICK_Config(systickInterval);\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001104"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "initialize_pid_values_08004978",
                "PTR_pid_roll_080049e8": "roll_pid",
                "PTR_pid_pitch_080049ec": "pitch_pid",
                "PTR_pid_yaw_080049f0": "yaw_pid",
                "PTR_pid_altitude_080049f4": "altitude_pid",
                "DAT_080049fc": "pitch_pid_coefficient",
                "DAT_08004a04": "roll_pid_coefficient",
                "DAT_08004a0c": "yaw_pid_coefficient",
                "DAT_08004a00": "pitch_pid_coefficient_1",
                "DAT_080049f8": "pitch_pid_coefficient_2",
                "DAT_08004a08": "pitch_pid_coefficient_3",
                "DAT_08004a10": "common_pid_coefficient",
                "DAT_08004a14": "pitch_pid_coefficient_4",
                "DAT_08004a18": "roll_pid_coefficient_1",
                "DAT_08004a1c": "roll_pid_coefficient_2",
                "DAT_08004a20": "roll_pid_coefficient_3",
                "DAT_08004a24": "yaw_pid_coefficient_1",
                "DAT_08004a28": "yaw_pid_coefficient_2",
                "DAT_08004a2c": "altitude_pid_coefficient"
            },
            "code": "void initialize_pid_values_08004978()\n{\n    float *PTR_pid_roll_080049e8 = PTR_pid_roll_080049e8;\n    float *PTR_pid_pitch_080049ec = PTR_pid_pitch_080049ec;\n    float *PTR_pid_yaw_080049f0 = PTR_pid_yaw_080049f0;\n    float *PTR_pid_altitude_080049f4 = PTR_pid_altitude_080049f4;\n\n    // Set default values for each PID controller\n    PTR_pid_pitch_080049ec[0x4c] = 1;\n    PTR_pid_roll_080049e8[0x4c] = 1;\n    PTR_pid_yaw_080049f0[0x4c] = -1;\n    PTR_pid_altitude_080049f4[0x4c] = 1;\n\n    // Set PID coefficients for each axis\n    PTR_pid_pitch_080049ec[0x20] = DAT_080049fc;\n    PTR_pid_roll_080049e8[0x20] = DAT_08004a04;\n    PTR_pid_yaw_080049f0[0x20] = DAT_08004a0c;\n    PTR_pid_altitude_080049f4[0x20] = 0;\n\n    // Set PID coefficients for each axis\n    PTR_pid_pitch_080049ec[4] = DAT_08004a00;\n    PTR_pid_pitch_080049ec[8] = DAT_08004a10;\n    PTR_pid_pitch_080049ec[0xc] = DAT_080049f8;\n    PTR_pid_pitch_080049ec[0x10] = DAT_08004a08;\n    PTR_pid_pitch_080049ec[0x14] = DAT_08004a10;\n    PTR_pid_pitch_080049ec[0x18] = DAT_08004a14;\n\n    PTR_pid_roll_080049e8[4] = DAT_08004a18;\n    PTR_pid_roll_080049e8[8] = DAT_08004a10;\n    PTR_pid_roll_080049e8[0xc] = DAT_08004a10;\n    PTR_pid_roll_080049e8[0x10] = DAT_08004a1c;\n    PTR_pid_roll_080049e8[0x14] = DAT_08004a10;\n    PTR_pid_roll_080049e8[0x18] = DAT_08004a20;\n\n    PTR_pid_yaw_080049f0[4] = DAT_08004a24;\n    PTR_pid_yaw_080049f0[8] = DAT_08004a28;\n    PTR_pid_yaw_080049f0[0xc] = DAT_080049f8;\n\n    PTR_pid_altitude_080049f4[4] = DAT_08004a2c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_pid_values_08004978"
        },
        "FUN_08000c60": {
            "renaming": {
                "FUN_08000c60": "calculate_hash_08000c60",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash_value_1",
                "uVar2": "hash_value_2",
                "iVar3": "leading_zeroes_count_1",
                "uVar4": "leading_zeroes_count_2",
                "iVar5": "constant_value_1",
                "uVar6": "shifted_value"
            },
            "code": "uint calculate_hash_08000c60(uint input_1, uint input_2)\n{\n  uint hash_value_1;\n  uint hash_value_2;\n  int leading_zeroes_count_1;\n  uint leading_zeroes_count_2;\n  int constant_value_1 = 0x5b000000;\n  if (input_2 == 0) {\n    constant_value_1 = 0x4b000000;\n  }\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  hash_value_1 = input_1;\n  hash_value_2 = input_2;\n  if (input_2 == 0) {\n    hash_value_1 = 0;\n    hash_value_2 = input_1;\n  }\n  leading_zeroes_count_1 = count_leading_zeroes(hash_value_2);\n  leading_zeroes_count_2 = leading_zeroes_count_1 - 8;\n  constant_value_1 = constant_value_1 + -0x800000 + leading_zeroes_count_2 * -0x800000;\n  if (leading_zeroes_count_1 < 8) {\n    uint shifted_value = hash_value_2 << (leading_zeroes_count_1 + 0x18U & 0xff);\n    hash_value_2 = constant_value_1 + ((hash_value_2 >> (0x20 - (leading_zeroes_count_1 + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n    if ((hash_value_1 | shifted_value << 1) == 0) {\n      hash_value_2 = hash_value_2 & ~(shifted_value >> 0x1f);\n    }\n    return hash_value_2;\n  }\n  uint shifted_value_1 = hash_value_1 << (leading_zeroes_count_2 & 0xff);\n  hash_value_2 = constant_value_1 + (hash_value_2 << (leading_zeroes_count_2 & 0xff)) + (hash_value_1 >> (0x20 - leading_zeroes_count_2 & 0xff)) + (uint)(0x7fffffff < shifted_value_1);\n  if (shifted_value_1 == 0x80000000) {\n    hash_value_2 = hash_value_2 & 0xfffffffe;\n  }\n  return hash_value_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c60"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\ndouble FUNC_08006d68(double __x)\n\n{\n  int in_r0;\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint in_r1;\n  undefined4 extraout_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  double in_d0;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar11 = CONCAT44(in_r1,in_r0);\n  uVar8 = in_r1 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (in_r0 != 0)))) {\n      in_d0 = (double)__aeabi_dadd();\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar11 = __divdf3(0,DAT_0800707c,in_r0,extraout_r1);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = __subdf3();\n          uVar10 = __muldf3(in_r0,extraout_r1,0,DAT_08007078);\n          uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n          uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                            (int)((ulonglong)uVar10 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = __subdf3();\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_0800706c);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = __aeabi_dadd();\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar10 = __aeabi_dadd(in_r0,in_r1,DAT_08006ff8,DAT_08006ffc);\n        iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar6 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __muldf3(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_FUNC_08006d68hi_08007080 + iVar1 * 8);\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                        *(undefined4 *)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8),\n                        *(undefined4 *)((int)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8) + 4));\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n  }\n  return in_d0;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_08004f04": {
            "renaming": {
                "FUN_08004f04": "handle_UART_interrupt_08004f04",
                "PTR_huart1_08004f0c": "huart1"
            },
            "code": "void handle_UART_interrupt_08004f04(void)\n{\n  UART_HandleTypeDef *PTR_huart1_08004f0c = (UART_HandleTypeDef *)PTR_PTR_huart1_08004f0c_08004f0c;\n  HAL_UART_IRQHandler(PTR_huart1_08004f0c);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f04",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08004f04"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "allocate_memory_080072b8",
                "__delta": "delta",
                "puVar1": "heap_end",
                "pvVar2": "allocated_memory"
            },
            "code": "void * allocate_memory_080072b8(intptr_t delta)\n{\n  undefined *heap_end = PTR_heap_end_4116_080072cc;\n  if (*(int *)PTR_heap_end_4116_080072cc == 0) {\n    *(undefined **)PTR_heap_end_4116_080072cc = PTR__ebss_080072d0;\n  }\n  void *allocated_memory = *(void **)heap_end;\n  *(intptr_t *)heap_end = delta + (int)allocated_memory;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "err_ptr",
                "pvVar2": "memory_ptr"
            },
            "code": "void allocate_memory_0800581c(int *error_code, intptr_t size)\n{\n  undefined *err_ptr;\n  void *memory_ptr;\n  err_ptr = PTR_errno_08005838;\n  *(undefined4 *)PTR_errno_08005838 = 0;\n  memory_ptr = _sbrk(size);\n  if ((memory_ptr == (void *)0xffffffff) && (*(int *)err_ptr != 0)) {\n    *error_code = *(int *)err_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800581c"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "perform_software_interrupt_08003eac",
                "a0": "interrupt_number",
                "a1": "return_value",
                "a2": "unused_parameter"
            },
            "code": "uint32_t perform_software_interrupt_08003eac(uint32_t interrupt_number, uint32_t return_value, int32_t unused_parameter)\n{\n  software_interrupt(interrupt_number);\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "perform_software_interrupt_08003eac"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_impure_ptr_value_080072ac",
                "PTR__impure_ptr_080072b4": "impure_ptr"
            },
            "code": "int get_impure_ptr_value_080072ac(void)\n{\n  int* PTR__impure_ptr_080072b4 = (int*)PTR__PTR__impure_ptr_080072b4_080072b4;\n  return *PTR__impure_ptr_080072b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_080072ac"
        },
        "FUN_08000ad0": {
            "renaming": {
                "FUN_08000ad0": "FUNC_08000ad0"
            },
            "code": "\nuint FUNC_08000ad0(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000c12:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000ad0"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "readSensorData_08002cb0",
                "in_r3": "sensorData",
                "rawData": "rawSensorData",
                "puVar1": "pointerToMPU9250",
                "PTR_s____Src_MPU9250_c_08002d80": "pointerToMPU9250",
                "PTR_magCalib_08002d84": "pointerToMagCalibration",
                "uVar2": "floatValue",
                "_rawData": "rawSensorData"
            },
            "code": "void readSensorData_08002cb0()\n{\n  uint8_t rawData[3];\n  uint sensorData = getSensorData();\n  I2C_WriteByte(0xd0, 0x37, '\"', '\\x01');\n  I2C_WriteByte(0xd0, 0x6a, '\\x01', '\\x01');\n  I2C_ReadByte(0x18, 0, rawData, 0xad);\n  I2C_WriteByte(0x18, 0xb, '\\x01', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\0', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\x0f', '\\x01');\n  I2C_ReadByteArray(0x18, 0x10, rawData, 3, rawData, 0xb6);\n  float xMag = convertRawToFloat((sensorData & 0xff) - 0x80);\n  float yMag = convertRawToFloat((sensorData >> 8 & 0xff) - 0x80);\n  float zMag = convertRawToFloat(rawData[2] - 0x80);\n  updateMagCalibration(xMag, yMag, zMag);\n  I2C_WriteByte(0x18, 10, '\\0', '\\x01');\n  I2C_WriteByte(0x18, 10, '\\x16', '\\x01');\n}\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "__addsf3",
                "I2C_ReadByteArray",
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "readSensorData_08002cb0"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "set_timer_output_compare_08002324",
                "TIMx": "timer",
                "OC_Config": "output_compare_config",
                "uVar1": "cr2_register_value",
                "uVar2": "output_compare_mode",
                "uVar3": "output_compare_polarity",
                "pTVar4": "idle_state_timer"
            },
            "code": "void set_timer_output_compare_08002324(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_compare_config)\\n\\\n{\\n\\\n  uint32_t cr2_register_value = timer->CR2;\\n\\\n  uint32_t output_compare_mode = output_compare_config->OCMode;\\n\\\n  uint32_t output_compare_polarity = output_compare_config->OCPolarity;\\n\\\n  TIM_TypeDef *idle_state_timer = timer;\\n\\\n  TIMx->CCER &= 0xffffefff;\\n\\\n  if (timer == idle_state_timer) {\\n\\\n    idle_state_timer = (TIM_TypeDef *)output_compare_config->OCIdleState;\\n\\\n    cr2_register_value &= 0xffffbfff;\\n\\\n  }\\n\\\n  if (timer == idle_state_timer) {\\n\\\n    cr2_register_value |= (int)idle_state_timer << 6;\\n\\\n  }\\n\\\n  timer->CR2 = cr2_register_value;\\n\\\n  timer->CCMR2 = (timer->CCMR2 & 0xffff8cff) | (output_compare_mode << 8);\\n\\\n  timer->CCR4 = output_compare_config->Pulse;\\n\\\n  timer->CCER = (timer->CCER & 0xffffdfff) | (output_compare_polarity << 0xc);\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08002324"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "configureBreakDeadTime_08002564",
                "htim": "timerHandle",
                "sBreakDeadTimeConfig": "config",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef configureBreakDeadTime_08002564(TIM_HandleTypeDef *timerHandle, TIM_BreakDeadTimeConfigTypeDef *config)\n{\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (timerHandle->Lock != HAL_LOCKED) {\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    timerHandle->Instance->BDTR =\n         config->OffStateRunMode | config->OffStateIDLEMode |\n         config->LockLevel | config->DeadTime |\n         config->BreakState | config->BreakPolarity |\n         config->AutomaticOutput;\n    timerHandle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timerHandle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureBreakDeadTime_08002564"
        },
        "FUN_08004fb0": {
            "renaming": {
                "FUN_08004fb0": "loop_forever_08004fb0"
            },
            "code": "void loop_forever_08004fb0(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb0",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "loop_forever_08004fb0"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "AK8963_ReadData",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "AHRS_GetYaw",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "addDataToCircularBuffer_08003ec8",
                "cb": "circularBuffer",
                "data": "data",
                "size": "size",
                "tail": "tail",
                "buffer": "buffer"
            },
            "code": "int addDataToCircularBuffer_08003ec8(CircularBuffer *circularBuffer, uint8_t data) {\n  circularBuffer->size++;\n  circularBuffer->buffer[circularBuffer->tail] = data;\n  circularBuffer->tail = (circularBuffer->tail + 1) & 0x7ff;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "addDataToCircularBuffer_08003ec8"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_pwm_value_08003fe8",
                "pwm": "pwm_value",
                "PTR_htim3_08003ff0": "htim3_ptr"
            },
            "code": "void set_pwm_value_08003fe8(int pwm_value)\n{\n    int* PTR_htim3_08003ff0 = (int*)*(int*)PTR_htim3_08003ff0;\n    int* pwm_register_ptr = (int*)(PTR_htim3_08003ff0 + 0x3c);\n    *pwm_register_ptr = pwm_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "mem_block_size",
                "param_2": "requested_size",
                "puVar1": "current_brk",
                "uVar2": "sbrk_result",
                "puVar3": "free_list_head",
                "iVar4": "remaining_space",
                "puVar5": "current_free_block",
                "uVar6": "remaining_space",
                "puVar7": "prev_free_block",
                "uVar8": "aligned_requested_size"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *mem_block_size, uint requested_size)\n{\n    uint aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n    if (aligned_requested_size < 0xc) {\n        aligned_requested_size = 0xc;\n    }\n    if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n        *mem_block_size = 0xc;\n    }\n    else {\n        __malloc_lock();\n        undefined *current_brk = PTR___malloc_sbrk_start_080057cc;\n        uint *free_list_head = *(uint **)PTR___malloc_free_list_080057c8;\n        uint *prev_free_block = *(uint **)PTR___malloc_free_list_080057c8;\n        while (uint *current_free_block = free_list_head, current_free_block != (uint *)0x0) {\n            uint remaining_space = *current_free_block - aligned_requested_size;\n            if (-1 < (int)remaining_space) {\n                if (remaining_space < 0xc) {\n                    if (prev_free_block == current_free_block) {\n                        uint next_free_block = prev_free_block[1];\n                        *(uint *)PTR___malloc_free_list_080057c8 = next_free_block;\n                    }\n                    else {\n                        uint next_free_block = current_free_block[1];\n                    }\n                    if (prev_free_block != current_free_block) {\n                        prev_free_block[1] = next_free_block;\n                        prev_free_block = current_free_block;\n                    }\n                }\n                else {\n                    *current_free_block = remaining_space;\n                    *(uint *)((int)current_free_block + remaining_space) = aligned_requested_size;\n                    prev_free_block = (uint *)((int)current_free_block + remaining_space);\n                }\n                goto MEMORY_BLOCK_ALLOCATED;\n            }\n            prev_free_block = current_free_block;\n            free_list_head = (uint *)current_free_block[1];\n        }\n        if (*(int *)PTR___malloc_sbrk_start_080057cc == 0) {\n            uint sbrk_result = _sbrk_r(mem_block_size);\n            *(undefined4 *)current_brk = sbrk_result;\n        }\n        uint *new_block = (uint *)_sbrk_r(mem_block_size, aligned_requested_size);\n        if ((new_block != (uint *)0xffffffff) && ((prev_free_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == prev_free_block || (_sbrk_r(mem_block_size, (int)prev_free_block - (int)new_block) != -1)))) {\n            *prev_free_block = aligned_requested_size;\n            MEMORY_BLOCK_ALLOCATED:\n            __malloc_unlock(mem_block_size);\n            uint aligned_block_size = (int)prev_free_block + 0xbU & 0xfffffff8;\n            int remaining_space = aligned_block_size - (int)(prev_free_block + 1);\n            if (remaining_space != 0) {\n                *(int *)((int)prev_free_block + remaining_space) = -remaining_space;\n                return aligned_block_size;\n            }\n            return aligned_block_size;\n        }\n        *mem_block_size = 0xc;\n        __malloc_unlock(mem_block_size);\n    }\n    return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "__ssputs_r",
                "_svfiprintf_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "init_evp_pkey_ctx_08004fb4",
                "param_1": "pkey_ctx",
                "puVar1": "frame_dummy_init_array_entry_2",
                "iVar2": "frame_dummy_init_array_entry_size_2",
                "iVar3": "i"
            },
            "code": "void init_evp_pkey_ctx_08004fb4(EVP_PKEY_CTX *pkey_ctx){\n    undefined *frame_dummy_init_array_entry = PTR___frame_dummy_init_array_entry_08004fec;\n    int frame_dummy_init_array_entry_size = (int)PTR___frame_dummy_init_array_entry_08004ff0 - (int)PTR___frame_dummy_init_array_entry_08004fec;\n    for (int i = 0; i < frame_dummy_init_array_entry_size >> 2; i++) {\n        pkey_ctx = (EVP_PKEY_CTX *)(**(code **)(frame_dummy_init_array_entry + i * 4))();\n    }\n    _init(pkey_ctx);\n    undefined *frame_dummy_init_array_entry_2 = PTR___frame_dummy_init_array_entry_08004ff4;\n    int frame_dummy_init_array_entry_size_2 = (int)PTR___do_global_dtors_aux_fini_array_entry_08004ff8 - (int)PTR___frame_dummy_init_array_entry_08004ff4;\n    for (int i = 0; i < frame_dummy_init_array_entry_size_2 >> 2; i++) {\n        (**(code **)(frame_dummy_init_array_entry_2 + i * 4))();\n    }\n    return;\n}",
            "called": [
                "frame_dummy",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "init_evp_pkey_ctx_08004fb4"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_not_CY_or_ZR_080009dc",
                "in_CY": "CY",
                "in_ZR": "ZR"
            },
            "code": "bool is_not_CY_or_ZR_080009dc(void)\n{\n  bool is_CY = (bool)in_CY;\n  bool is_ZR = (bool)in_ZR;\n  return !is_CY || is_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_080009dc"
        },
        "FUN_08000c70": {
            "renaming": {
                "FUN_08000c70": "calculate_quotient_08000c70",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "shifted_dividend",
                "iVar3": "leading_zeroes",
                "uVar4": "shifted_divisor",
                "uVar5": "quotient_sign_bit",
                "iVar6": "quotient_sign_extension",
                "uVar7": "quotient_sign_extension2",
                "bVar8": "dividend_is_negative",
                "dividend_is_zero": "dividend_is_zero",
                "divisor_is_negative": "divisor_is_negative"
            },
            "code": "uint calculate_quotient_08000c70(uint dividend, uint divisor)\n{\n  uint quotient;\n  uint sign_bit;\n  uint quotient_sign_bit;\n  int leading_zeroes;\n  uint shifted_dividend;\n  uint shifted_divisor;\n  uint quotient_sign_extension;\n  bool dividend_is_zero = (dividend == 0);\n  bool divisor_is_negative = ((int)divisor < 0);\n  \n  if (dividend_is_zero && divisor_is_negative == false) {\n    return 0;\n  }\n  \n  sign_bit = divisor & 0x80000000;\n  if ((int)sign_bit < 0) {\n    bool dividend_is_negative = (dividend != 0);\n    dividend = -dividend;\n    divisor = -divisor - (uint)dividend_is_negative;\n  }\n  \n  if (divisor == 0) {\n    return 0xffffffff;\n  }\n  \n  quotient_sign_bit = sign_bit | 0x5b000000;\n  if (divisor == 0) {\n    quotient_sign_bit += 0xf0000000;\n  }\n  \n  leading_zeroes = count_leading_zeroes(divisor);\n  shifted_divisor = divisor << leading_zeroes;\n  shifted_dividend = dividend << leading_zeroes;\n  quotient_sign_extension = shifted_dividend >> 31;\n  quotient = shifted_dividend / shifted_divisor;\n  quotient = quotient << leading_zeroes;\n  quotient += quotient_sign_extension;\n  \n  if ((dividend | shifted_dividend << 1) == 0) {\n    quotient &= ~(shifted_dividend >> 31);\n  }\n  \n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08000c70"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "initialize_timer_080023d0",
                "htim": "timer_handle",
                "HTIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "HAL_TIM_PWM_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef initialize_timer_080023d0(TIM_HandleTypeDef *timer_handle)\n{\n  if (timer_handle != NULL)\n  {\n    if (timer_handle->State == HAL_TIM_STATE_RESET)\n    {\n      timer_handle->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer_handle);\n    }\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer_handle->Instance, &timer_handle->Init);\n    timer_handle->State = HAL_TIM_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_080023d0"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "float_bits_shifted_right",
                "uVar2": "exponent_bits_times_2",
                "uVar3": "exponent_bits_plus_2400000000",
                "in_r12": "exponent_bits_plus_2410000000",
                "bVar4": "result_is_zero",
                "bVar5": "exponent_bits_times_2_less_than_1879048192",
                "shift_amount": "shift_amount",
                "mantissa_bits": "mantissa_bits"
            },
            "code": "uint calculate_float_bits_08000a30(uint float_bits, uint exponent_bits) {\n  uint exponent_bits_times_2 = exponent_bits * 2;\n  bool exponent_bits_times_2_less_than_1879048192 = exponent_bits_times_2 < 1879048192;\n  uint exponent_bits_plus_2400000000 = exponent_bits_times_2 + 2400000000;\n  uint result = exponent_bits_plus_2400000000;\n  if (!exponent_bits_times_2_less_than_1879048192) {\n    uint exponent_bits_plus_2410000000 = exponent_bits_times_2 + 2410000000;\n    result = exponent_bits_plus_2410000000;\n  }\n  bool result_is_zero = result == 0;\n  if (!exponent_bits_times_2_less_than_1879048192 && exponent_bits_plus_2400000000 >= 33554432) {\n    result_is_zero = exponent_bits_plus_2410000000 == 536870912;\n  }\n  if (((exponent_bits_times_2_less_than_1879048192 || exponent_bits_plus_2400000000 < 33554432) || 536870912 < exponent_bits_plus_2410000000) || result_is_zero) {\n    if ((exponent_bits & 1073741824) != 0) {\n      if (((int)exponent_bits_times_2 >> 21 == -1) && ((float_bits | exponent_bits << 12) != 0)) {\n        return 2139095040;\n      }\n      return exponent_bits & 2139095040 | 2139095040;\n    }\n    if ((int)(exponent_bits_times_2 + 2443181824) < 0 != SCARRY4(exponent_bits_plus_2400000000,58720256)) {\n      return exponent_bits & 2147483648;\n    }\n    uint shift_amount = 24 - (exponent_bits_times_2 + 2443181824 >> 21);\n    uint float_bits_shifted_right = float_bits >> (shift_amount & 0xff);\n    if (float_bits << (32 - shift_amount & 0xff) != 0) {\n      float_bits_shifted_right = float_bits_shifted_right | 1;\n    }\n    uint mantissa_bits = exponent_bits & 2097151 | 1048576;\n    float_bits = float_bits_shifted_right | mantissa_bits << (32 - shift_amount & 0xff);\n    mantissa_bits = (mantissa_bits >> (shift_amount & 0xff)) << 1;\n  }\n  result = (exponent_bits & 2147483648 | float_bits >> 29) + mantissa_bits * 4 + (uint)(2147483647 < float_bits * 8);\n  if (float_bits * 8 == 2147483648) {\n    result = result & 4294967294;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08000a30"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_pwm_value_08003fdc",
                "pwm": "pwm_value",
                "PTR_htim2_08003fe4": "htim2_ptr"
            },
            "code": "void set_pwm_value_08003fdc(int pwm_value)\n{\n  int* PTR_htim2_08003fe4 = *(int*)PTR_htim2_08003fe4;\n  int pwm_offset = 0x38;\n  *(int*)(PTR_htim2_08003fe4 + pwm_offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_string_terminated_080009f0",
                "in_CY": "str"
            },
            "code": "bool is_string_terminated_080009f0(char* str)\n{\n    __aeabi_cdrcmple();\n    return *str == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "asin",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "is_string_terminated_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_flags_and_values_08004f10",
                "puVar1": "flags_and_values"
            },
            "code": "void set_flags_and_values_08004f10(void)\n{\n  uint *flags_and_values = DAT_08004f50;\n  *flags_and_values |= 1;\n  flags_and_values[1] &= DAT_08004f54;\n  *flags_and_values &= 0xfef6ffff;\n  *flags_and_values &= 0xfffbffff;\n  flags_and_values[1] &= 0xff80ffff;\n  flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_buffer_if_needed_08005044",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "end_of_data",
                "pvVar1": "new_buffer",
                "pvVar2": "buffer_end",
                "__n": "data_size",
                "_malloc_r": "malloc",
                "_realloc_r": "realloc",
                "_free_r": "free"
            },
            "code": "int resize_buffer_if_needed_08005044(int *error_code, void **buffer, void *data, void *end_of_data) {\n  void *buffer_end = buffer[2];\n  if ((buffer_end <= end_of_data) && ((*(ushort *)(buffer + 3) & 0x480) != 0)) {\n    size_t data_size = (int)*buffer - (int)buffer[4];\n    void *new_buffer_end = (void *)((uint)((int)buffer[5] * 3) / 2);\n    void *new_buffer_start = (void *)((int)end_of_data + data_size + 1);\n    if (new_buffer_end < new_buffer_start) {\n      new_buffer_end = new_buffer_start;\n    }\n    if ((int)((uint)*(ushort *)(buffer + 3) << 0x15) < 0) {\n      void *new_buffer = (void *)malloc(data_size);\n      if (new_buffer == (void *)0x0) {\n        *error_code = 0xc;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n        return -1;\n      }\n      memcpy(new_buffer, buffer[4], data_size);\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      void *new_buffer = (void *)realloc(buffer[4], new_buffer_end);\n      if (new_buffer == (void *)0x0) {\n        free(buffer[4]);\n        *error_code = 0xc;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n        return -1;\n      }\n    }\n    buffer[4] = new_buffer_start;\n    *buffer = (void *)((int)new_buffer_start + data_size);\n    buffer[5] = new_buffer_end;\n    buffer[2] = (void *)((int)new_buffer_end - data_size);\n    buffer_end = end_of_data;\n  }\n  if (end_of_data <= buffer_end) {\n    buffer_end = end_of_data;\n  }\n  memmove(*buffer, data, (size_t)buffer_end);\n  buffer[2] = (void *)((int)buffer[2] - (int)buffer_end);\n  *buffer = (void *)((int)buffer_end + (int)*buffer);\n  return 0;\n}",
            "called": [
                "_free_r",
                "memmove",
                "_malloc_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "resize_buffer_if_needed_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initializeSystem_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611",
                "PID_Init": "initializePID"
            },
            "code": "void initializeSystem_08004194(void)\n{\n  initializeDevices();\n  initializeSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  initializePID();\n  return;\n}",
            "called": [
                "Devices_Init",
                "PID_Init",
                "MS5611_Init",
                "IMU_Init",
                "serialBegin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "toggle_clock_source_08001240",
                "CLKSource": "clk_source",
                "uVar1": "current_value",
                "*DAT_08001254": "*clock_register"
            },
            "code": "void toggle_clock_source_08001240(uint32_t clk_source)\n{\n  uint32_t current_value;\n  if (clk_source == 4) {\n    current_value = *DAT_08001254 | 0b100;\n  }\n  else {\n    current_value = *DAT_08001254 & 0b11111111111111111111111111111011;\n  }\n  *DAT_08001254 = current_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "toggle_clock_source_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_new_index_08005840",
                "param_1": "index",
                "param_2": "array",
                "iVar1": "new_index",
                "*(int *)(param_2 + -4)": "array[index - 1]",
                "*(int *)(param_2 + iVar1)": "array[new_index + index - 1]"
            },
            "code": "int calculate_new_index_08005840(int index, int* array) {\n  int new_index = array[index - 1] - 4;\n  if (array[index - 1] < 0) {\n    new_index += array[new_index + index - 1];\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "calculate_new_index_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "count_string_length_08000150",
                "__s": "input_string",
                "cVar1": "current_char",
                "pcVar2": "current_char_ptr",
                "pcVar3": "string_start_ptr"
            },
            "code": "size_t count_string_length_08000150(char* input_string) {\n  char current_char;\n  char* current_char_ptr;\n  char* string_start_ptr;\n  \n  string_start_ptr = input_string;\n  do {\n    current_char_ptr = string_start_ptr + 1;\n    current_char = *string_start_ptr;\n    string_start_ptr = current_char_ptr;\n  } while (current_char != '\\0');\n  return (size_t)(current_char_ptr + (-1 - (int)input_string));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "serialPrint"
            ],
            "imported": false,
            "current_name": "count_string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "write_leds_08003f3c",
                "led_white": "white_led",
                "led_red": "red_led",
                "led_blue": "blue_led",
                "GPIOx": "GPIO_Port",
                "uVar1": "leading_zeroes",
                "DAT_08003f78": "LED_PORT",
                "HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(LED_PORT, WHITE_LED_PIN, (GPIO_PinState)(leading_zeroes >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x4000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIO_Port, RED_LED_PIN, (GPIO_PinState)(leading_zeroes >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x2000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIO_Port, BLUE_LED_PIN, (GPIO_PinState)(leading_zeroes >> 5))"
            },
            "code": "void write_leds_08003f3c(int white_led, int red_led, int blue_led)\n{\n  GPIO_TypeDef *GPIO_Port;\n  uint32_t leading_zeroes;\n  \n  GPIO_Port = DAT_08003f78;\n  \n  leading_zeroes = count_leading_zeroes(white_led);\n  HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5));\n  \n  leading_zeroes = count_leading_zeroes(red_led);\n  HAL_GPIO_WritePin(GPIO_Port, RED_LED_PIN, (GPIO_PinState)(leading_zeroes >> 5));\n  \n  leading_zeroes = count_leading_zeroes(blue_led);\n  HAL_GPIO_WritePin(GPIO_Port, BLUE_LED_PIN, (GPIO_PinState)(leading_zeroes >> 5));\n  \n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "PID_Update",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "write_leds_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_system_core_clock_08002214",
                "PTR_SystemCoreClock_0800221c": "system_core_clock_ptr"
            },
            "code": "uint32_t get_system_core_clock_08002214(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_08002214"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "start_PWM_timers_08003ff4",
                "htim": "htim4_ptr",
                "PTR_htim2_08004020": "htim2_ptr",
                "PTR_htim3_08004024": "htim3_ptr"
            },
            "code": "void start_PWM_timers_08003ff4(void)\n{\n  TIM_HandleTypeDef *htim4_ptr = PTR_htim4_0800401c;\n  TIM_HandleTypeDef *PTR_htim2_08004020 = (TIM_HandleTypeDef *)PTR_htim2_08004020;\n  TIM_HandleTypeDef *PTR_htim3_08004024 = (TIM_HandleTypeDef *)PTR_htim3_08004024;\n  HAL_TIM_PWM_Start(PTR_htim2_08004020, 4);\n  HAL_TIM_PWM_Start(PTR_htim3_08004024, 8);\n  HAL_TIM_PWM_Start(htim4_ptr, 8);\n  HAL_TIM_PWM_Start(htim4_ptr, 0xc);\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "start_PWM_timers_08003ff4"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "compare_and_concatenate_08001004",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "float32_t compare_and_concatenate_08001004(float32_t a, float32_t b)\n{\n  __cmpsf2();\n  return CONCAT44(b, a);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08001004"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "enableInterrupts_08001128",
                "FUN_08001128Tick": "enableInterruptsTick",
                "DAT_08001148": "interruptRegister"
            },
            "code": "HAL_StatusTypeDef enableInterrupts_08001128(void) {\n  *DAT_08001148 |= 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  enableInterrupts_08001128Tick(0);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "enableInterrupts_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "initialize_clocks_08004514",
                "HVar1": "status",
                "uVar3": "hclk_freq",
                "FLatency": "flash_latency",
                "RCC_ClkInitStruct": "clock_init_struct",
                "RCC_OscInitStruct": "oscillator_init_struct",
                "puVar2": "pointer",
                "line": "line_number"
            },
            "code": "void initialize_clocks_08004514()\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  int line_number;\n  uint32_t flash_latency;\n  RCC_ClkInitTypeDef clock_init_struct;\n  RCC_OscInitTypeDef oscillator_init_struct;\n  undefined *pointer;\n  oscillator_init_struct.HSIState = 1;\n  oscillator_init_struct.HSICalibrationValue = 0x10;\n  flash_latency = 2;\n  oscillator_init_struct.PLL.PLLSource = 0;\n  oscillator_init_struct.OscillatorType = 2;\n  oscillator_init_struct.PLL.PLLState = 2;\n  oscillator_init_struct.PLL.PLLMUL = 0x380000;\n  status = HAL_RCC_OscConfig(&oscillator_init_struct);\n  pointer = (undefined *)(uint)status;\n  if (pointer == (undefined *)0x0) goto error_handler;\n  line_number = 0x3c;\n  while(1) {\n    pointer = PTR_s____Src_peripherals_c_08004588;\n    _Error_Handler(PTR_s____Src_peripherals_c_08004588,line_number);\nerror_handler:\n    clock_init_struct.ClockType = 0xf;\n    clock_init_struct.APB1CLKDivider = 0x400;\n    clock_init_struct.SYSCLKSource = flash_latency;\n    clock_init_struct.AHBCLKDivider = (uint32_t)pointer;\n    clock_init_struct.APB2CLKDivider = (uint32_t)pointer;\n    status = HAL_RCC_ClockConfig(&clock_init_struct,flash_latency);\n    flash_latency = (uint)status;\n    if (flash_latency == 0) break;\n    line_number = 0x49;\n  }\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclk_freq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n}\n",
            "called": [
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "calculateFlightParameters_08004a84",
                "puVar1": "PID_pitch",
                "puVar2": "PID_roll",
                "puVar3": "PID_yaw",
                "puVar4": "joystick",
                "puVar5": "PID_altitude",
                "extraout_s0": "throttle",
                "extraout_s0_00": "throttle",
                "extraout_s1": "pitch",
                "extraout_s1_00": "pitch",
                "extraout_s2": "roll",
                "extraout_s2_00": "roll",
                "extraout_s3": "yaw",
                "extraout_s3_00": "yaw",
                "in_r0": "altitude"
            },
            "code": "void calculateFlightParameters_08004a84(void)\n{\n    float throttle, pitch, roll, yaw;\n    float altitude = calculateFlightParameters_08004a84Altitude();\n    float pitchAngle = AHRS_GetPitch();\n    float rollAngle = AHRS_GetRoll();\n    float yawAngle = AHRS_GetYaw();\n    \n    PID_Compute((PID_TypeDef *)PID_pitch);\n    PID_Compute((PID_TypeDef *)PID_roll);\n    PID_Compute((PID_TypeDef *)PID_yaw);\n    \n    if(joystick[1] != 0)\n    {\n        PID_Compute((PID_TypeDef *)PID_altitude);\n        altitude += 0.01;\n    }\n    \n    throttle = joystick[4];\n    pitch = joystick[2];\n    roll = joystick[1];\n    yaw = joystick[3];\n    \n    if(joystick[0] == 0)\n    {\n        Motor_StopAll();\n        toggleLED(0,1,0);\n        return;\n    }\n    \n    Motor_DistributeSpeed(throttle, pitch, roll, yaw);\n    \n    float pitchAngleDegrees = pitchAngle * 57.2958;\n    float rollAngleDegrees = rollAngle * 57.2958;\n    float yawAngleDegrees = yawAngle * 57.2958;\n    \n    float pitchAngleDegreesInt = (int)pitchAngleDegrees;\n    float rollAngleDegreesInt = (int)rollAngleDegrees;\n    float yawAngleDegreesInt = (int)yawAngleDegrees;\n    float altitudeInt = (int)altitude;\n    \n    msp_txf_pid[0] = pitchAngleDegreesInt;\n    msp_txf_pid[1] = rollAngleDegreesInt;\n    msp_txf_pid[2] = yawAngleDegreesInt;\n    msp_txf_pid[3] = altitudeInt;\n    \n    return;\n}",
            "called": [
                "__aeabi_fcmpgt",
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "AHRS_GetRoll",
                "AHRS_GetYaw",
                "PID_Compute",
                "Motor_StopAll",
                "__aeabi_fcmplt",
                "PID_UpdateAltitude",
                "__aeabi_fmul",
                "toggleLED",
                "__addsf3",
                "__fixunssfsi"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "calculateFlightParameters_08004a84"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "copy_data_080057d0",
                "param_1": "size",
                "param_2": "src",
                "param_3": "dest",
                "param_4": "alignment",
                "pvVar1": "result",
                "pvVar2": "usable_size"
            },
            "code": "void * copy_data_080057d0(size_t size, void *src, void *dest, size_t alignment) {\n\tvoid *result;\n\tif (src != NULL) {\n\t\tif (dest == NULL) {\n\t\t\tfree(dest);\n\t\t\tresult = dest;\n\t\t}\n\t\telse {\n\t\t\tvoid *usable_size = malloc_usable_size(dest);\n\t\t\tresult = src;\n\t\t\tif ((usable_size < dest) && (result = malloc(size), result != NULL)) {\n\t\t\t\tmemcpy(result, src, size);\n\t\t\t\tfree(src);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tresult = malloc(size);\n\treturn result;\n}",
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "copy_data_080057d0"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "get_context_pointer_080072d4",
                "ctx": "context_pointer"
            },
            "code": "int get_context_pointer_080072d4(EVP_PKEY_CTX *context_pointer){\n  return (int)context_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "__do_global_dtors_aux",
                "frame_dummy",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "get_context_pointer_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "__aeabi_frsub",
                "MS5611_Update",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "PID_Update",
                "AHRS_GetYaw",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08000160": {
            "renaming": {
                "FUN_08000160": "FUNC_08000160"
            },
            "code": "\nulonglong FUNC_08000160(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000160",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000160"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "calculate_APB_clock_divider_08002220",
                "uVar1": "leading_zeroes_count",
                "PTR_SystemCoreClock_0800224c": "system_core_clock",
                "PTR_APBPrescTable_08002248": "apb_prescaler_value",
                "DAT_08002244": "apb_prescaler_register"
            },
            "code": "uint32_t calculate_APB_clock_divider_08002220(void)\n{\n  uint32_t leading_zeroes_count;\n  leading_zeroes_count = count_leading_zeroes(0xe00000);\n  uint32_t PTR_SystemCoreClock_0800224c = *(uint32_t *)PTR_SystemCoreClock_0800224c;\n  uint32_t apb_prescaler = (*(uint32_t *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes_count & 0xff);\n  uint32_t PTR_APBPrescTable_08002248 = PTR_APBPrescTable_08002248[apb_prescaler];\n  return PTR_SystemCoreClock_0800224c >> PTR_APBPrescTable_08002248;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "calculate_APB_clock_divider_08002220"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "setBeta_08003314",
                "_beta": "beta",
                "in_r0": "input"
            },
            "code": "void setBeta_08003314(float beta)\n{\n    undefined4 input;\n    *(undefined4 *)PTR_beta_0800331c = input;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "setBeta_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "calculate_08005854",
                "__x": "input",
                "puVar1": "version",
                "iVar2": "cmp",
                "puVar3": "errno_ptr",
                "dVar4": "result",
                "extraout_d0": "temp1",
                "extraout_d0_00": "temp2",
                "extraout_d0_01": "temp3",
                "extraout_d0_02": "temp3",
                "in_stack_ffffffb8": "int_input",
                "in_stack_ffffffbc": "char_input"
            },
            "code": "double calculate_08005854(double input)\n{\n  undefined *version;\n  int cmp;\n  undefined4 *errno_ptr;\n  double result;\n  double temp1;\n  double temp2;\n  double temp3;\n  int int_input;\n  char *char_input;\n\n  result = (double)__ieee754_calculate_08005854();\n  version = PTR___fdlib_version_080058f8;\n  if ((*PTR___fdlib_version_080058f8 != -1) &&\n     (cmp = __unorddf2(), result = temp1, cmp == 0)) {\n    fabs((double)CONCAT44(char_input,int_input));\n    cmp = __aeabi_dcmpgt();\n    result = temp2;\n    if ((cmp != 0) &&\n       ((nan(PTR_DAT_080058f4), *version == '\\x02' ||\n        (cmp = matherr((exception *)&stack0xffffffb8), result = temp3, cmp == 0)))) {\n      errno_ptr = (undefined4 *)__errno();\n      *errno_ptr = 0x21;\n      result = temp3;\n    }\n  }\n  return result;\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dcmpgt",
                "fabs",
                "matherr",
                "__errno",
                "nan",
                "__ieee754_asin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "MS5611_Update",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "compare_zero_08001014",
                "in_ZR": "input"
            },
            "code": "bool compare_zero_08001014(char input) {\\n  bool equal = __aeabi_cfcmpeq();\\n  return input != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "compare_zero_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_080071c0",
                "__x": "x",
                "__n": "n",
                "in_r1": "mantissa_value",
                "extraout_r1": "extra_output",
                "in_r2": "exponent_value",
                "uVar1": "shift_value",
                "iVar2": "sum_of_shift_and_exponent",
                "in_d0": "result",
                "dVar3": "product",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "unaff_r6": "unused_register_6"
            },
            "code": "double calculate_080071c0(double x, int n)\n{\n  uint shift_value;\n  int extraout_r1;\n  int exponent_value;\n  uint mantissa_value;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 unaff_r6;\n  double result;\n  double product;\n  \n  shift_value = (mantissa_value << 1) >> 0x15;\n  if (shift_value == 0) {\n    if ((mantissa_value & 0x7fffffff | n) == 0) {\n      return result;\n    }\n    result = (double)__muldf3(n, mantissa_value, 0, DAT_08007290);\n    if (exponent_value < DAT_08007294) goto LAB_0800722e;\n    shift_value = ((uint)(extraout_r1 << 1) >> 0x15) - 0x36;\n  }\n  else if (shift_value == 0x7ff) {\n    product = (double)__aeabi_dadd(n, mantissa_value, n);\n    return product;\n  }\n  exponent_value = shift_value + exponent_value;\n  if (exponent_value < 0x7ff) {\n    if (0 < exponent_value) {\n      return result;\n    }\n    if (exponent_value + 0x35 < 0 == SCARRY4(exponent_value, 0x35)) goto LAB_0800722e;\n    if (exponent_value < 0xc351) {\n      copysign((double)CONCAT44(unaff_r4,in_r3),(double)CONCAT44(unaff_r6,unaff_r5));\n      goto LAB_0800722e;\n    }\n  }\n  copysign((double)CONCAT44(unaff_r4,in_r3),(double)CONCAT44(unaff_r6,unaff_r5));\nLAB_0800722e:\n  product = (double)__muldf3();\n  return product;\n}",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "copysign"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_byte_08005614",
                "__s": "buffer",
                "__c": "byte_to_find",
                "__n": "buffer_size",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_temp"
            },
            "code": "void* find_byte_08005614(void* buffer, int byte_to_find, size_t buffer_size) {\n  unsigned char* current_byte = (unsigned char*)buffer;\n  while (current_byte < (unsigned char*)buffer + buffer_size) {\n    if (*current_byte == byte_to_find) {\n      return current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculateResult_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "__ieee754_atan2",
                "MadgwickQuaternionUpdate",
                "sqrt",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "calculate_tagb_080070a4",
                "__tagb": "tagb",
                "in_d0": "result"
            },
            "code": "double calculate_tagb_080070a4(char* tagb) {\n  double result;\n  // perform some calculations on tagb and store the result in 'result'\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_tagb_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_i2c_byte_0800407c",
                "device_add": "device_address",
                "register_add": "register_address",
                "file": "filename",
                "line": "line_number",
                "HVar1": "status",
                "byte": "byte_buffer"
            },
            "code": "uint8_t read_i2c_byte_0800407c(uint16_t device_address, uint16_t register_address, char *filename, int line_number)\\n{\\n  HAL_StatusTypeDef status;\\n  uint8_t byte_buffer[1];\\n  byte_buffer[0] = \"\\0\";\\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040b4, device_address, register_address, 1, byte_buffer, 1, 200);\\n  if (status != HAL_OK) {\\n    _Error_Handler(filename, line_number);\\n  }\\n  return byte_buffer[0];\\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "MPU9250_Init",
                "AK8963_ReadData",
                "I2C_ReadByteArray",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "read_i2c_byte_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nHAL_StatusTypeDef\nFUNC_08001938(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint8_t *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  I2C_TypeDef *pIVar5;\n  uint uVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  \n  if (hi2c->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (pData == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (Size == 0) {\n    return HAL_ERROR;\n  }\n  uVar3 = HAL_GetTick();\n  while (pIVar5 = hi2c->Instance, (~pIVar5->SR2 & 2) == 0) {\n    uVar4 = HAL_GetTick();\n    if (10000 < uVar4 - uVar3) {\n      hi2c->Lock = HAL_UNLOCKED;\n      hi2c->State = HAL_I2C_STATE_READY;\n      return HAL_BUSY;\n    }\n  }\n  if (hi2c->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  uVar6 = pIVar5->CR1;\n  hi2c->Lock = HAL_LOCKED;\n  pIVar5->CR1 = uVar6 & 0xfffff7ff;\n  hi2c->State = HAL_I2C_STATE_BUSY_RX;\n  hi2c->Mode = HAL_I2C_MODE_MEM;\n  hi2c->ErrorCode = 0;\n  HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout);\n  if (HVar2 != HAL_OK) {\n    hi2c->Lock = HAL_UNLOCKED;\n    if (hi2c->ErrorCode == 4) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  pIVar5 = hi2c->Instance;\n  uVar6 = pIVar5->CR1;\n  if (Size == 1) {\n    pIVar5->CR1 = uVar6 & 0xfffffbff;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n    enableIRQinterrupts();\n    HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n    if (HVar2 == HAL_OK) {\n      *pData = (uint8_t)hi2c->Instance->DR;\nLAB_08001ab8:\n      hi2c->State = HAL_I2C_STATE_READY;\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      hi2c->Lock = HAL_UNLOCKED;\n      return HAL_OK;\n    }\nLAB_08001a18:\n    if (hi2c->ErrorCode != 0x20) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  if (Size == 2) {\n    pIVar5->CR1 = uVar6 | 0x800;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    pIVar5->CR1 = uVar6 | 0x400;\n    while (3 < Size) {\n      HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n      if (HVar2 != HAL_OK) goto LAB_08001a18;\n      *pData = (uint8_t)hi2c->Instance->DR;\n      pIVar5 = hi2c->Instance;\n      bVar8 = (int)(pIVar5->SR1 << 0x1d) < 0;\n      if (bVar8) {\n        pIVar5 = (I2C_TypeDef *)pIVar5->DR;\n        puVar7 = pData + 2;\n        Size = Size - 2;\n      }\n      else {\n        puVar7 = pData + 1;\n        Size = Size - 1;\n      }\n      puVar1 = pData + 1;\n      pData = puVar7;\n      if (bVar8) {\n        *puVar1 = (uint8_t)pIVar5;\n      }\n    }\n    if (Size != 2) {\n      uVar3 = HAL_GetTick();\n      do {\n        pIVar5 = hi2c->Instance;\n        do {\n          if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n            pIVar5->CR1 = pIVar5->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            *pData = (uint8_t)hi2c->Instance->DR;\n            uVar3 = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (Timeout == 0xffffffff);\n      } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n      goto LAB_08001afa;\n    }\n  }\n  uVar3 = HAL_GetTick();\n  do {\n    do {\n      if ((int)(hi2c->Instance->SR1 << 0x1d) < 0) {\n        disableIRQinterrupts();\n        pIVar5 = hi2c->Instance;\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        *pData = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[1] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\nLAB_08001afa:\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\nLAB_08001b3a:\n  do {\n    pIVar5 = hi2c->Instance;\n    do {\n      if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        pData[1] = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[2] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryRead"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "configure_timer_080022d0",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "ccer_value",
                "uVar2": "cr2_value",
                "uVar3": "output_mode",
                "DAT_08002320": "PTR_08002320",
                "CCER": "ccer_mask"
            },
            "code": "void configure_timer_080022d0(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n    uint32_t ccer_mask = 0xfffffeff;\n    uint32_t cr2_value = timer->CR2;\n    uint8_t output_mode = output_channel_config->OCMode;\n    uint32_t ccer_value = (timer->CCER & 0xfffffdff) | (output_channel_config->OCPolarity << 8);\n    if (timer == DAT_08002320)\n    {\n        ccer_value = (ccer_value & 0xfffff7ff) | (output_channel_config->OCNPolarity << 8);\n        cr2_value = (cr2_value & 0xffffcfff) | ((output_channel_config->OCIdleState | output_channel_config->OCNIdleState) << 4);\n    }\n    timer->CR2 = cr2_value;\n    timer->CCMR2 = (timer->CCMR2 & 0xffffff8c) | output_mode;\n    timer->CCR3 = output_channel_config->Pulse;\n    timer->CCER = ccer_value & ccer_mask;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "calculate_shifted_value_080010c4",
                "param_1": "value",
                "uVar1": "shifted_bits",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint32_t calculate_shifted_value_080010c4(uint32_t value)\n{\n    uint32_t shifted_value = value << 1;\n    uint32_t shifted_bits = (shifted_value & 0xff000000) >> 24;\n    \n    if ((value & 0x80000000) || (shifted_value < 0xFE000000))\n    {\n        return 0;\n    }\n    \n    if (shifted_bits > 0x1E)\n    {\n        if ((shifted_bits == 0x9F) && ((value & 0x7FFFFF) != 0))\n        {\n            return 0;\n        }\n        else\n        {\n            return 0xFFFFFFFF;\n        }\n    }\n    \n    return (value << 8 | 0x80000000) >> shifted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080010c4"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "set_timer_output_compare_0800245c",
                "htim": "timer_handle",
                "sConfig": "oc_config",
                "Channel": "channel",
                "extraout_r1": "extraout1",
                "extraout_r1_00": "extraout2",
                "extraout_r1_01": "extraout3",
                "uVar1": "",
                "extraout_r1_02": "",
                "iVar2": "",
                "uVar3": "ccmr",
                "pTVar4": "timer_instance"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_0800245c(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *oc_config, uint32_t channel) {\n  int extraout1;\n  int extraout2;\n  int extraout3;\n  uint32_t ccmr;\n  int ccmr_shift;\n  uint32_t ccmr_mask;\n  uint32_t ccer_mask;\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n\n  if (timer_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n\n  timer_handle->State = HAL_TIM_STATE_BUSY;\n  timer_handle->Lock = HAL_LOCKED;\n\n  switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_instance, oc_config);\n      ccmr_shift = 0;\n      ccmr_mask = 0x3FF;\n      ccer_mask = 1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_instance, oc_config);\n      ccmr_shift = 8;\n      ccmr_mask = 0x3FF00;\n      ccer_mask = 1 << 4;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_instance, oc_config);\n      ccmr_shift = 0;\n      ccmr_mask = 0x3FF;\n      ccer_mask = 1 << 8;\n      break;\n    case 0xC:\n      TIM_OC4_SetConfig(timer_instance, oc_config);\n      ccmr_shift = 8;\n      ccmr_mask = 0x3FF00;\n      ccer_mask = 1 << 12;\n      break;\n    default:\n      goto end;\n  }\n\n  ccmr = timer_instance->CCMR1;\n  ccmr |= oc_config->OCMode << ccmr_shift;\n  timer_instance->CCMR1 = ccmr & ~ccmr_mask;\n  timer_instance->CCER |= ccer_mask;\n\nend:\n  timer_handle->State = HAL_TIM_STATE_READY;\n  timer_handle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}\n",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_0800245c"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_parameters_080008f4",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "xor_result",
                "bVar2": "all_zero",
                "bVar3": "d_is_less_than_or_equal_to_b",
                "result": "result"
            },
            "code": "uint check_parameters_080008f4(uint a, uint b, uint c, uint d)\n{\n    uint result;\n    bool all_zero = (a | b << 1) == 0 && (c | d << 1) == 0;\n    bool a_equals_c = a == c;\n    bool b_equals_d = b == d;\n    bool b_xor_d_is_negative = (int)(b ^ d) < 0;\n    bool d_is_less_than_or_equal_to_b = d <= b;\n    if (((int)(b << 1) >> 0x15 == -1 || (int)(d << 1) >> 0x15 == -1) && (((int)(b << 1) >> 0x15 == -1 && !all_zero) || ((int)(d << 1) >> 0x15 == -1 && !all_zero))))\n    {\n        result = 0xffffffff;\n    }\n    else if (all_zero || (a_equals_c && b_equals_d))\n    {\n        result = 0;\n    }\n    else\n    {\n        if (b_equals_d || (b_xor_d_is_negative && d_is_less_than_or_equal_to_b))\n        {\n            result = 1;\n        }\n        else\n        {\n            result = 0;\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_080008f4"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "configure_GPIO_pin_based_on_timer_instance_08004e14",
                "*htim": "*timer",
                "pGVar1": "GPIO_instance",
                "pTVar2": "timer_instance",
                "GPIO_InitStruct": "GPIO_init_structure",
                "DAT_08004e6c": "GPIO_PORTA",
                "DAT_08004e68": "TIM1",
                "(TIM_TypeDef *)0x40000000": "TIM2",
                "DAT_08004e74": "GPIO_PORTC",
                "DAT_08004e70": "TIM3",
                "DAT_08004e78": "TIM4"
            },
            "code": "void configure_GPIO_pin_based_on_timer_instance_08004e14(TIM_HandleTypeDef *timer)\n{\n  GPIO_TypeDef *GPIO_instance;\n  TIM_TypeDef *timer_instance;\n  GPIO_InitTypeDef GPIO_init_structure;\n  \n  timer_instance = timer->Instance;\n  GPIO_instance = DAT_08004e6c;\n  if (timer_instance == DAT_08004e68) {\n    GPIO_init_structure.Pin = GPIO_PIN_11;\n  }\n  else if (timer_instance == TIM2) {\n    GPIO_instance = GPIO_PORTB;\n    GPIO_init_structure.Pin = GPIO_PIN_1;\n  }\n  else {\n    GPIO_instance = DAT_08004e74;\n    if (timer_instance == DAT_08004e70) {\n      GPIO_init_structure.Pin = GPIO_PIN_2;\n    }\n    else {\n      if (timer_instance != DAT_08004e78) {\n        return;\n      }\n      GPIO_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9;\n    }\n  }\n  GPIO_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;\n  GPIO_init_structure.Mode = GPIO_MODE_AF_PP;\n  HAL_GPIO_Init(GPIO_instance,&GPIO_init_structure);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pin_based_on_timer_instance_08004e14"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "_beta": "beta_value",
                "_deltat": "deltat_value"
            },
            "code": "void initialize_sensors_08002ea0(void)\n{\n  float beta_value;\n  float deltat_value;\n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(beta_value);\n  MadgwickSetDelta(deltat_value);\n  return;\n}",
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_sensors_08002ea0"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_gpio_pin_state_08001424",
                "GPIOx": "gpio_port",
                "GPIO_Pin": "gpio_pin",
                "PinState": "pin_state",
                "uVar1": "gpio_pin_bitmask"
            },
            "code": "void set_gpio_pin_state_08001424(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, GPIO_PinState pin_state) {\n  uint32_t gpio_pin_bitmask = (uint32_t)gpio_pin;\n  if (pin_state == GPIO_PIN_RESET) {\n    gpio_pin_bitmask = gpio_pin_bitmask << 16;\n  }\n  gpio_port->BSRR = gpio_pin_bitmask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "toggleLED",
                "_Error_Handler",
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001424"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble FUNC_08005900(double __x,double __y)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 uVar7;\n  double extraout_d0;\n  double extraout_d0_00;\n  double extraout_d0_01;\n  double extraout_d0_02;\n  double extraout_d0_03;\n  double extraout_d0_04;\n  double extraout_d0_05;\n  double extraout_d0_06;\n  double extraout_d0_07;\n  double extraout_d0_08;\n  double extraout_d0_09;\n  double extraout_d0_10;\n  double extraout_d0_11;\n  double extraout_d0_12;\n  double dVar8;\n  undefined8 uVar9;\n  undefined local_50 [24];\n  undefined8 local_38;\n  int local_30;\n  \n  dVar8 = (double)__ieee754_FUNC_08005900();\n  puVar2 = PTR___fdlib_version_08005ba8;\n  cVar1 = *PTR___fdlib_version_08005ba8;\n  if (cVar1 == -1) {\n    return extraout_d0;\n  }\n  local_30 = __unorddf2();\n  if (local_30 != 0) {\n    return extraout_d0_00;\n  }\n  iVar3 = __unorddf2();\n  if (iVar3 != 0) {\n    iVar3 = __aeabi_dcmpeq();\n    if (iVar3 == 0) {\n      return extraout_d0_01;\n    }\n    local_50._0_4_ = 1;\n    local_50._4_4_ = PTR_DAT_08005bac;\n    local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n    if (cVar1 == '\\x02') {\n      return extraout_d0_01;\n    }\n    goto LAB_08005978;\n  }\n  iVar4 = __aeabi_dcmpeq();\n  if (iVar4 == 0) {\n    iVar3 = finite(dVar8);\n    if ((iVar3 == 0) && (iVar4 = finite(dVar8), iVar4 != 0)) {\n      iVar4 = finite(dVar8);\n      if (iVar4 == 0) goto LAB_08005b4c;\n      local_30 = __unorddf2(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20));\n      cVar1 = *puVar2;\n      if (local_30 != 0) {\n        local_50._4_4_ = PTR_DAT_08005bac;\n        local_50._0_4_ = 1;\n        local_30 = iVar3;\n        if (cVar1 == '\\0') goto LAB_08005a22;\n        local_38 = (double)__divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_50._0_4_ = 3;\n      if (cVar1 != '\\0') {\n        local_38._0_4_ = 0;\n        local_38._4_4_ = DAT_08005bc4;\n        iVar3 = __aeabi_dcmplt();\n        if (iVar3 != 0) {\n          uVar9 = __muldf3();\n          uVar7 = (int)uVar9;\n          rint(dVar8);\n          iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1_00);\n          if (iVar3 == 0) {\n            local_38._0_4_ = 0;\n            local_38._4_4_ = DAT_08005bb4;\n          }\n        }\n        goto LAB_08005afa;\n      }\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 != 0) {\n        uVar9 = __muldf3();\n        uVar7 = (int)uVar9;\n        rint(dVar8);\n        iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1);\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_12;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\nLAB_08005b4c:\n      iVar3 = __aeabi_dcmpeq(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20),0,0);\n      if (iVar3 == 0) {\n        return extraout_d0_09;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_10;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_11;\n      }\n      local_50._0_4_ = 4;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x22;\n    dVar8 = extraout_d0_08;\n  }\n  else {\n    local_30 = __aeabi_dcmpeq();\n    if (local_30 == 0) {\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_05;\n      }\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 == 0) {\n        return extraout_d0_06;\n      }\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') {\nLAB_08005a22:\n        local_50._0_4_ = 1;\n        local_38 = 0.0;\n        local_50._4_4_ = PTR_DAT_08005bac;\n        goto LAB_08005978;\n      }\n      local_38 = (double)((ulonglong)DAT_08005bb4 << 0x20);\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n    }\n    else {\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_38 = 0.0;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n        dVar8 = extraout_d0_03;\n        goto LAB_080059d0;\n      }\nLAB_08005978:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_02;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x21;\n    dVar8 = extraout_d0_07;\n  }\n  *puVar6 = uVar7;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)__errno();\n    *piVar5 = local_30;\n    dVar8 = extraout_d0_04;\n  }\n  return dVar8;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__aeabi_dcmpeq",
                "__muldf3",
                "finite",
                "matherr",
                "rint",
                "__errno",
                "__ieee754_pow"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_circular_buffer_08004c64",
                "PTR_rxc_08004c6c": "circular_buffer"
            },
            "code": "void initialize_circular_buffer_08004c64(void)\n{\n  CircularBuffer* PTR_rxc_08004c6c = (CircularBuffer*) PTR_rxc_08004c6c;\n  CB_Init(PTR_rxc_08004c6c);\n  return;\n}",
            "called": [
                "CB_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08004c64"
        },
        "FUN_080041e4": {
            "renaming": {
                "FUN_080041e4": "set_motor_pwm_080041e4",
                "m1": "motor1_pwm",
                "m2": "motor2_pwm",
                "m3": "motor3_pwm",
                "m4": "motor4_pwm",
                "puVar1": "motor_pwm_ptr",
                "puVar2": "msp_txf_motor_ptr",
                "pwm": "motor1_pwm_bitmasked"
            },
            "code": "void set_motor_pwm_080041e4(uint32_t motor1_pwm, uint32_t motor2_pwm, uint32_t motor3_pwm, uint32_t motor4_pwm) {\n  if (motor1_pwm > 999) {\n    motor1_pwm = 1000;\n  }\n  if (motor2_pwm > 999) {\n    motor2_pwm = 1000;\n  }\n  if (motor3_pwm > 999) {\n    motor3_pwm = 1000;\n  }\n  if (motor4_pwm > 999) {\n    motor4_pwm = 1000;\n  }\n  uint32_t pwm = motor1_pwm & ~(motor1_pwm >> 0x1f);\n  *(uint32_t *)(PTR_motor_pwm_08004264 + 8) = motor3_pwm & ~(motor3_pwm >> 0x1f);\n  *(uint32_t *)(PTR_motor_pwm_08004264 + 0xc) = motor4_pwm & ~(motor4_pwm >> 0x1f);\n  *(uint32_t *)(PTR_motor_pwm_08004264 + 4) = motor2_pwm & ~(motor2_pwm >> 0x1f);\n  *(uint32_t *)PTR_motor_pwm_08004264 = pwm;\n  Motor1_SetPWM(pwm);\n  Motor2_SetPWM(*(uint32_t *)(PTR_motor_pwm_08004264 + 4));\n  Motor3_SetPWM(*(uint32_t *)(PTR_motor_pwm_08004264 + 8));\n  Motor4_SetPWM(*(uint32_t *)(PTR_motor_pwm_08004264 + 0xc));\n  *(uint16_t *)PTR_msp_txf_motor_08004268 = (uint16_t)(*(uint32_t *)PTR_motor_pwm_08004264 + 1000);\n  *(uint16_t *)(PTR_msp_txf_motor_08004268 + 2) = (uint16_t)(*(uint32_t *)(PTR_motor_pwm_08004264 + 4) + 1000);\n  *(uint16_t *)(PTR_msp_txf_motor_08004268 + 4) = (uint16_t)(*(uint32_t *)(PTR_motor_pwm_08004264 + 8) + 1000);\n  *(uint16_t *)(PTR_msp_txf_motor_08004268 + 6) = (uint16_t)(*(uint32_t *)(PTR_motor_pwm_08004264 + 0xc) + 1000);\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041e4",
            "calling": [
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "set_motor_pwm_080041e4"
        },
        "FUN_080003e4": {
            "renaming": {
                "FUN_080003e4": "calculate_shifted_value_080003e4",
                "param_1": "value",
                "uVar1": "left_shifted_value",
                "uVar2": "right_shifted_value",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "in_r12": "right_shift_amount",
                "bVar5": "is_shift_amount_negative",
                "bVar6": "is_shift_amount_zero",
                "bVar7": "is_additional_shift_required"
            },
            "code": "ulonglong calculate_shifted_value_080003e4(uint value)\n{\n  uint leading_zeroes_count = count_leading_zeroes(value);\n  uint shift_amount = leading_zeroes_count + 21;\n  bool is_shift_amount_negative = shift_amount < 32;\n  bool is_shift_amount_zero = shift_amount == 0;\n  uint left_shifted_value;\n  uint right_shifted_value;\n  uint right_shift_amount;\n  if (value == 0) {\n    return 0;\n  }\n  if (is_shift_amount_negative) {\n    bool is_additional_shift_required = shift_amount < 12;\n    if (is_additional_shift_required) {\n      shift_amount++;\n      is_shift_amount_negative = shift_amount < 0;\n      is_shift_amount_zero = shift_amount == 0;\n    }\n    if (!is_shift_amount_zero && is_shift_amount_negative == SBORROW4(leading_zeroes_count, 12)) {\n      left_shifted_value = value << (shift_amount & 0xff);\n      right_shift_amount = 12 - leading_zeroes_count;\n      right_shifted_value = value >> (right_shift_amount & 0xff);\n      return CONCAT44(right_shifted_value, left_shifted_value);\n    }\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount, 32)) {\n    uint right_shift_amount = 32 - shift_amount;\n    left_shifted_value = value << (shift_amount & 0xff);\n    right_shifted_value = 0U >> (right_shift_amount & 0xff);\n    return CONCAT44(right_shifted_value, left_shifted_value);\n  }\n  uint right_shift_amount = ~(shift_amount - 50);\n  if (31 < right_shift_amount) {\n    return (ulonglong)(value >> (right_shift_amount - 31 & 0xff));\n  }\n  int shift_difference = right_shift_amount - 19;\n  if (shift_difference == 0 || shift_difference < 0 != SCARRY4(right_shift_amount - 31, 12)) {\n    right_shift_amount++;\n    left_shifted_value = value >> (right_shift_amount & 0xff);\n    right_shifted_value = value << (32 - right_shift_amount & 0xff);\n    return CONCAT44(right_shifted_value, left_shifted_value);\n  }\n  return (ulonglong)(left_shifted_value >> (32 - (12U - shift_difference) & 0xff) | value << (12U - shift_difference & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003e4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_shifted_value_080003e4"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_msb_bit_08007092",
                "__value": "value",
                "in_r1": "msb_mask",
                "0x80000000": "msb_mask",
                "0x100000": "add_mask",
                "0x1f": "shift_amount"
            },
            "code": "int set_msb_bit_08007092(double value){\n  uint msb_mask = 0x80000000;\n  uint add_mask = 0x100000;\n  uint shift_amount = 0x1f;\n  return ((uint)value | msb_mask) + add_mask >> shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "set_msb_bit_08007092"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "updateAttitude_08002f28",
                "PTR_AHRS_timeNow_08003004": "AHRS_timeNow",
                "PTR_AHRS_lastUpdate_08003000": "AHRS_lastUpdate",
                "PTR_accelData_0800300c": "accelData",
                "PTR_msp_txf_attitude_08003024": "msp_txf_attitude",
                "PTR_msp_txf_raw_imu_08003020": "msp_txf_raw_imu",
                "PTR_accelRaw_0800301c": "accelRaw",
                "PTR_gyroRaw_08003028": "gyroRaw",
                "PTR_magRaw_0800302c": "magRaw",
                "DAT_08003008": "delta_t_divisor"
            },
            "code": "void updateAttitude_08002f28(void)\n{\n    short accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, mag_x, mag_y, mag_z;\n    MPU9250_ReadAccelData(&accel_x, &accel_y, &accel_z);\n    MPU9250_ReadGyroData(&gyro_x, &gyro_y, &gyro_z);\n    AK8963_ReadData(&mag_x, &mag_y, &mag_z);\n    uint32_t current_time = micros();\n    uint32_t last_update_time = *(uint32_t *)PTR_AHRS_lastUpdate_08003000;\n    *(uint32_t *)PTR_AHRS_timeNow_08003004 = current_time;\n    float delta_t = (float)(current_time - last_update_time) / 1000000.0f;\n    MadgwickSetDelta(delta_t);\n    MadgwickQuaternionUpdate(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, mag_x, mag_y, mag_z);\n    float roll = AHRS_GetRoll();\n    float pitch = AHRS_GetPitch();\n    float yaw = AHRS_GetYaw();\n    *(short *)PTR_msp_txf_attitude_08003024 = (short)(roll * 100.0f);\n    *(short *)(PTR_msp_txf_attitude_08003024 + 2) = (short)(pitch * 100.0f);\n    *(short *)(PTR_msp_txf_attitude_08003024 + 4) = (short)(yaw * 100.0f);\n}\n",
            "called": [
                "AK8963_ReadData",
                "AHRS_GetPitch",
                "MadgwickQuaternionUpdate",
                "AHRS_GetRoll",
                "__aeabi_fdiv",
                "AHRS_GetYaw",
                "micros",
                "__aeabi_f2iz",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "__floatunsisf",
                "MadgwickSetDelta",
                "MPU9250_ReadGyroData"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "updateAttitude_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "send_frame_with_status_08004384",
                "puVar1": "msp_txf_status_ptr",
                "local_14": "status",
                "uStack_10": "status2",
                "local_c": "local_c",
                "PTR_msp_txf_status_080043b8": "msp_txf_status",
                "in_r3": "in_r3"
            },
            "code": "void send_frame_with_status_08004384(void)\n{\n    uint8_t *PTR_msp_txf_status_080043b8_ptr;\n    uint8_t PTR_msp_txf_status_080043b8[11] = {0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n    uint32_t status = *(uint32_t*)PTR_msp_txf_status_080043b8_ptr;\n    uint32_t status2 = *(uint32_t*)(PTR_msp_txf_status_080043b8_ptr + 4);\n    uint32_t local_c = (status2 & 0x00FFFF) | (in_r3 & 0xFF000000);\n    PTR_msp_txf_status_080043b8[3] = 7;\n    MSP_SendFrame('e', PTR_msp_txf_status_080043b8, 11);\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_frame_with_status_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "check_if_not_equal_to_null_080009a0",
                "in_ZR": "character"
            },
            "code": "bool check_if_not_equal_to_null_080009a0(char character)\n{\n\t__aeabi_cdcmpeq();\n\treturn character != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "check_if_not_equal_to_null_080009a0"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "read_MS5611_coefficients_08003298",
                "rxbuf": "rx_buffer",
                "iVar3": "index",
                "PTR_MS5611_Coefficients_0800330c": "MS5611_coefficients",
                "PTR_s____Src_MS5611_c_08003308": "MS5611_coefficients_file",
                "PTR_alt_filter_08003310": "alt_filter_values",
                "PTR_MS5611_OSR_08003304": "MS5611_OSR",
                "uint8_t": "uint8_t",
                "uint16_t": "uint16_t",
                "uint32_t": "uint32_t",
                "CONCAT11": "CONCAT11",
                "I2C_WriteByte": "I2C_WriteByte",
                "I2C_ReadByteArray": "I2C_ReadByteArray",
                "MS5611_RESET": "MS5611_RESET",
                "I2C_ADDRESS": "I2C_ADDRESS",
                "delay_ms": "delay_ms"
            },
            "code": "void read_MS5611_coefficients_08003298(void)\\n{\\n  uint8_t rx_buffer [2];\\n  int index = 0;\\n  I2C_WriteByte(I2C_ADDRESS, MS5611_RESET, 0x01, 0x01);\\n  delay_ms(10);\\n  uint16_t* coefficients = PTR_MS5611_Coefficients_0800330c;\\n  uint8_t* alt_filter = PTR_alt_filter_08003310;\\n  *PTR_MS5611_OSR_08003304 = 8;\\n  do {\\n    rx_buffer[0] = \"\\0\";\\n    rx_buffer[1] = \"\\0\";\\n    I2C_ReadByteArray(I2C_ADDRESS, (short)index + 0xa0, rx_buffer, 2, PTR_s____Src_MS5611_c_08003308, 0x7c);\\n    *(coefficients + index) = CONCAT11(rx_buffer[0], rx_buffer[1]);\\n    index += 2;\\n  } while (index != 0x10);\\n  index = 0;\\n  do {\\n    *(uint32_t*)(alt_filter + index * 4) = 0;\\n    index++;\\n  } while (index != 0x14);\\n  return;\\n}",
            "called": [
                "I2C_ReadByteArray",
                "delay_ms",
                "I2C_WriteByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "read_MS5611_coefficients_08003298"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "initialize_peripherals_and_pwm_with_led_startup_sequence_08004028",
                "Peripherals_Init": "initialize_peripherals",
                "PWM_Init": "initialize_pwm",
                "LED_StartupSequence": "run_led_startup_sequence"
            },
            "code": "void initialize_peripherals_and_pwm_with_led_startup_sequence_08004028(void)\n{\n  initialize_peripherals();\n  initialize_pwm();\n  run_led_startup_sequence();\n  return;\n}",
            "called": [
                "LED_StartupSequence",
                "PWM_Init",
                "Peripherals_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_and_pwm_with_led_startup_sequence_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "calculate_0800708c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_0800708c(double input) {\n  double result;\n  // code to calculate_0800708c result\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "asin",
                "__ieee754_atan2",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_0800708c"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "set_channel_state_08002520",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "CCER": "channel_mask"
            },
            "code": "void set_channel_state_08002520(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n  uint32_t channel_mask = 1 << (channel & 0xff);\n  timer->CCER &= ~channel_mask;\n  timer->CCER |= (state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "set_channel_state_08002520"
        },
        "FUN_08000464": {
            "renaming": {
                "FUN_08000464": "calculate_double_precision_08000464",
                "param_1": "number1",
                "param_2": "number2",
                "bVar1": "bit",
                "uVar2": "temp1",
                "uVar3": "count1",
                "uVar4": "temp2",
                "iVar5": "sum",
                "uVar6": "shift",
                "iVar7": "count2",
                "uVar8": "msb",
                "bVar9": "is_negative",
                "bVar10": "is_overflow",
                "bVar11": "is_negative_overflow"
            },
            "code": "ulonglong calculate_double_precision_08000464(uint number1, uint number2)\n{\n    byte bit;\n    uint temp1, temp2;\n    int count1, count2;\n    uint shift, carry, msb, sign, sum;\n    bool is_negative, is_overflow;\n\n    if ((number1 | number2) == 0) {\n        return CONCAT44(number2, number1);\n    }\n\n    count2 = 0x432;\n    shift = number2 >> 0x16;\n    if (shift != 0) {\n        count2 = 3;\n        if (number2 >> 0x19 != 0) {\n            count2 = 6;\n        }\n        if (number2 >> 0x1c != 0) {\n            count2 += 3;\n        }\n        temp1 = count2 - ((int)number2 >> 0x1f);\n        shift = number1 << (0x20 - temp1 & 0xff);\n        number1 = number1 >> (temp1 & 0xff) | number2 << (0x20 - temp1 & 0xff);\n        number2 = number2 >> (temp1 & 0xff);\n        count2 = temp1 + 0x432;\n    }\n\n    if (0xfffff < number2) {\n        if (0x1fffff < number2) {\n            temp1 = number2 & 1;\n            number2 = number2 >> 1;\n            bit = (byte)number1;\n            number1 = (uint)(temp1 != 0) << 0x1f | number1 >> 1;\n            shift = (uint)(bit & 1) << 0x1f | shift >> 1;\n            count2 += 1;\n            is_overflow = 0xffbfffff < (uint)(count2 * 0x200000);\n            if (is_overflow) {\n                return 0x7ff0000000000000;\n            }\n        }\n        do {\n            is_negative = (shift & 0x80000000) != 0;\n            shift <<= 1;\n            temp1 = number1 * 2;\n            carry = CARRY4(number1, number1);\n            number1 = number1 * 2 + (uint)is_negative;\n            number2 = number2 * 2 + (uint)(carry || CARRY4(temp1, (uint)is_negative));\n            count2--;\n        } while ((number2 & 0x100000) != 0);\n        temp1 = number1;\n        temp2 = number2;\n        if (number2 == 0) {\n            temp1 = 0;\n            temp2 = number1;\n        }\n        count1 = count_leading_zeroes(temp2);\n        if (number2 == 0) {\n            count1 += 0x20;\n        }\n        sum = count1 - 0xb;\n        is_negative = SBORROW4(sum, 0x20);\n        count2 = count1 - 0x2b;\n        is_overflow = (int)count2 < 0;\n        msb = count2 == 0;\n        if ((int)sum < 0x20) {\n            is_negative = SCARRY4(count2, 0xc);\n            count1 -= 0x1f;\n            is_overflow = count1 < 0;\n            msb = count1 == 0;\n            sum = count2;\n            if (!msb && is_overflow == is_negative) {\n                shift = temp2 << (sum & 0xff);\n                temp2 = temp2 >> (0xcU - count1 & 0xff);\n                goto LAB_080002f0;\n            }\n        }\n        if (msb || is_overflow != is_negative) {\n            shift = 0x20 - sum;\n        }\n        temp2 = temp2 << (sum & 0xff);\n        if (msb || is_overflow != is_negative) {\n            temp2 |= shift >> (0xff & shift);\n        }\n        if (msb || is_overflow != is_negative) {\n            shift = shift << (sum & 0xff);\n        }\n    }\n    else {\n        do {\n            is_negative = (shift & 0x80000000) != 0;\n            shift <<= 1;\n            temp1 = number1 * 2;\n            carry = CARRY4(number1, number1);\n            number1 = number1 * 2 + (uint)is_negative;\n            number2 = number2 * 2 + (uint)(carry || CARRY4(temp1, (uint)is_negative));\n            count2--;\n        } while ((number2 & 0x100000) == 0);\n        temp1 = number1;\n        temp2 = number2;\n        if (number2 == 0) {\n            temp1 = 0;\n            temp2 = number1;\n        }\n    }\n\nLAB_080002f0:\n    if ((int)sum <= count2) {\n        return CONCAT44(temp2 + (count2 - sum) * 0x100000, temp1);\n    }\n    shift = ~(count2 - sum);\n    if (0x1e < (int)shift) {\n        return (ulonglong)(temp2 >> (shift - 0x1f & 0xff));\n    }\n    count2 = shift - 0x13;\n    if (count2 == 0 || count2 < 0 != SCARRY4(shift - 0x1f, 0xc)) {\n        shift = shift + 1;\n        return CONCAT44(temp2 >> (shift & 0xff), temp1 >> (shift & 0xff) | temp2 << (0x20 - shift & 0xff));\n    }\n    return (ulonglong)(temp1 >> (0x20 - (0xcU - count2) & 0xff) | temp2 << (0xcU - count2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000464",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_precision_08000464"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "configure_timer_08002404",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "cc_enable",
                "uVar2": "cr2",
                "uVar3": "output_mode",
                "DAT_08002458": "PTR_TIM4"
            },
            "code": "void configure_timer_08002404(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t cc_enable_mask = 0xffffffef;\n  uint32_t cr2 = timer->CR2;\n  uint32_t output_mode = output_config->OCMode;\n  uint32_t cc_enable = (timer->CCER & cc_enable_mask) | (output_config->OCPolarity << 4);\n  if (timer == DAT_08002458) {\n    cc_enable = ((cc_enable & 0xffffff7f) | (output_config->OCNPolarity << 4)) & 0xffffffbf;\n    cr2 = (cr2 & 0xfffff3ff) | ((output_config->OCIdleState | output_config->OCNIdleState) << 2);\n  }\n  timer->CR2 = cr2;\n  timer->CCMR1 = (timer->CCMR1 & 0xffff8cff) | (output_mode << 8);\n  timer->CCR2 = output_config->Pulse;\n  timer->CCER = cc_enable;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_08005bc8",
                "__x": "input",
                "cVar1": "version",
                "iVar2": "error_code",
                "piVar3": "errno_ptr",
                "puVar4": "undefined_ptr",
                "dVar5": "output",
                "extraout_d0": "temp1",
                "extraout_d0_00": "temp2",
                "local_50": "error_info",
                "local_38": "zero",
                "local_30": "error_code"
            },
            "code": "double calculate_08005bc8(double input)\n{\n    char version;\n    int error_code;\n    int *errno_ptr;\n    undefined4 *undefined_ptr;\n    double output;\n    double temp1;\n    double temp2;\n    double temp3;\n    double temp4;\n    double temp5;\n    undefined error_info[24];\n    undefined8 zero;\n    \n    output = (double)__ieee754_calculate_08005bc8();\n    version = *PTR___fdlib_version_08005c68;\n    if (version == -1) {\n        return output;\n    }\n    error_code = __unorddf2();\n    if (error_code != 0) {\n        return temp1;\n    }\n    error_code = __aeabi_dcmplt();\n    if (error_code == 0) {\n        return temp2;\n    }\n    error_info._0_4_ = 1;\n    error_info._4_4_ = PTR_DAT_08005c6c;\n    if (version == '\\0') {\n        zero = 0.0;\n        goto LAB_08005c26;\n    }\n    else {\n        zero = (double)__divdf3(0,0,0,0);\n        if (version != '\\x02') {\n            goto LAB_08005c26;\n        }\n    }\n    undefined_ptr = (undefined4 *)__errno();\n    *undefined_ptr = 0x21;\n    output = temp3;\nLAB_08005c2e:\n    if (error_code != 0) {\n        errno_ptr = (int *)__errno();\n        *errno_ptr = error_code;\n        output = temp4;\n    }\n    return output;\n}",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "matherr",
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "checkI2CStatus_08001436",
                "hi2c": "i2cHandler",
                "pIVar1": "i2cInstance",
                "SR1": "I2C_SR1_ARLO",
                "ErrorCode": "HAL_I2C_ERROR_ARLO",
                "State": "HAL_I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08001436(I2C_HandleTypeDef *i2cHandler)\n{\n  I2C_TypeDef *i2cInstance;\n  i2cInstance = i2cHandler->Instance;\n  if ((i2cInstance->SR1 & I2C_SR1_ARLO) != 0) {\n    i2cInstance->SR1 &= ~I2C_SR1_ARLO;\n    i2cHandler->ErrorCode = HAL_I2C_ERROR_ARLO;\n    i2cHandler->State = HAL_I2C_STATE_READY;\n    i2cHandler->Lock = HAL_UNLOCKED;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "calculate_altitude_pid_08004a30",
                "PTR_joystick_08004a74": "joystick",
                "PTR_ALT_FLAG_08004a78": "alt_flag",
                "PTR_pid_altitude_08004a7c": "pid_altitude"
            },
            "code": "void calculate_altitude_pid_08004a30(void)\n{\n  float *PTR_joystick_08004a74 = PTR_PTR_joystick_08004a74_08004a74;\n  float *PTR_ALT_FLAG_08004a78 = PTR_ALT_FLAG_08004a78;\n  float *PTR_pid_altitude_08004a7c = PTR_PTR_pid_altitude_08004a7c_08004a7c;\n\n  if (PTR_joystick_08004a74[1] != 0)\n  {\n    if (*PTR_ALT_FLAG_08004a78 == 0)\n    {\n      float filtered_altitude = MS5611_GetFilteredAltitude();\n      float altitude = __aeabi_fmul();\n      PTR_pid_altitude_08004a7c[7] = altitude;\n      *PTR_ALT_FLAG_08004a78 = 1;\n    }\n    else\n    {\n      float filtered_altitude = MS5611_GetFilteredAltitude();\n      float altitude = __aeabi_fmul();\n      PTR_pid_altitude_08004a7c[12] = altitude;\n    }\n  }\n\n  if (PTR_joystick_08004a74[1] == 0)\n  {\n    if (*PTR_ALT_FLAG_08004a78 != 0)\n    {\n      *PTR_ALT_FLAG_08004a78 = 0;\n    }\n    PTR_pid_altitude_08004a7c[18] = PTR_pid_altitude_08004a7c[2];\n  }\n}",
            "called": [
                "__aeabi_fmul",
                "MS5611_GetFilteredAltitude"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_altitude_pid_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "receive_data_08004c70",
                "serialFlush": "clear_serial_buffer",
                "HAL_UART_Receive_IT": "enable_interrupt_receive_data",
                "PTR_huart1_08004c88": "PTR_huart1",
                "PTR_rx_buffer_08004c84": "PTR_rx_buffer"
            },
            "code": "void receive_data_08004c70(void)\n{\n  clear_serial_buffer();\n  enable_interrupt_receive_data_08004c70();\n  return;\n}",
            "called": [
                "serialFlush",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "receive_data_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "xor_result",
                "bVar2": "are_values_equal",
                "bVar3": "is_less_than"
            },
            "code": "uint check_parameters_08000904(uint first_value, uint second_value, uint third_value, uint fourth_value)\n{\n    uint result;\n    bool is_invalid = (((int)(second_value << 1) >> 0x15 == -1 || (int)(fourth_value << 1) >> 0x15 == -1) && ((((int)(second_value << 1) >> 0x15 == -1 && ((first_value | second_value << 0xc) != 0)) || (((int)(fourth_value << 1) >> 0x15 == -1 && ((third_value | fourth_value << 0xc) != 0))))));\n    if (is_invalid)\n    {\n        return 1;\n    }\n    bool are_values_equal = (first_value | second_value << 1) == 0 && (third_value | fourth_value << 1) == 0 && second_value == fourth_value && first_value == third_value;\n    if (are_values_equal)\n    {\n        return 0;\n    }\n    uint xor_result = second_value ^ fourth_value;\n    bool is_less_than = -1 < (int)xor_result && fourth_value <= second_value;\n    bool is_equal = xor_result == 0;\n    if (is_equal)\n    {\n        is_less_than = third_value <= first_value;\n    }\n    int shift = (int)fourth_value >> 0x1f;\n    if (!is_less_than)\n    {\n        shift = ~shift;\n    }\n    result = shift | 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "receive_data_0800299a",
                "*huart": "*uart_handle",
                "uint": "uint32_t",
                "uint16_t": "uint16_t",
                "ushort": "uint16_t",
                "*puVar4": "*tx_buffer_pointer",
                "HVar5": "uart_state",
                "pUVar6": "uart_instance",
                "uVar1": "control_reg",
                "uVar2": "transfer_count",
                "uVar3": "status_reg",
                "uVar7": "error_code",
                "uVar8": "control_reg_3",
                "bVar9": "parity_error"
            },
            "code": "void receive_data_0800299a(UART_HandleTypeDef *uart_handle)\n{\n    uint32_t status_reg;\n    uint32_t control_reg;\n    uint32_t error_code;\n    USART_TypeDef *uart_instance;\n    uint32_t control_reg_3;\n    uint16_t transfer_count;\n    uint8_t *tx_buffer_pointer;\n    HAL_UART_StateTypeDef uart_state;\n    HAL_UART_StateTypeDef new_uart_state;\n    uart_instance = uart_handle->Instance;\n    status_reg = uart_instance->SR;\n    control_reg = uart_instance->CR1;\n    if ((status_reg & 0xf) == 0)\n    {\n        if (((int)(status_reg << 0x1a) < 0) && ((int)(control_reg << 0x1a) < 0))\n        {\n            UART_Receive_IT(uart_handle);\n            return;\n        }\n    }\n    else\n    {\n        control_reg_3 = uart_instance->CR3 & 1;\n        if ((control_reg_3 != 0) || ((control_reg & 0x120) != 0))\n        {\n            error_code = status_reg << 0x1f;\n            if ((int)error_code < 0)\n            {\n                bool parity_error = (int)(control_reg << 0x17) < 0;\n                if (parity_error)\n                {\n                    error_code = uart_handle->ErrorCode | 1;\n                }\n                if (parity_error)\n                {\n                    uart_handle->ErrorCode = error_code;\n                }\n            }\n            if (((int)(status_reg << 0x1d) < 0) && (control_reg_3 != 0))\n            {\n                uart_handle->ErrorCode = uart_handle->ErrorCode | 2;\n            }\n            if (((int)(status_reg << 0x1e) < 0) && (control_reg_3 != 0))\n            {\n                uart_handle->ErrorCode = uart_handle->ErrorCode | 4;\n            }\n            if (((int)(status_reg << 0x1c) < 0) && (control_reg_3 != 0))\n            {\n                uart_handle->ErrorCode = uart_handle->ErrorCode | 8;\n            }\n            if (uart_handle->ErrorCode == 0)\n            {\n                return;\n            }\n            if (((int)(status_reg << 0x1a) < 0) && ((int)(control_reg << 0x1a) < 0))\n            {\n                UART_Receive_IT(uart_handle);\n            }\n            uart_instance = uart_handle->Instance;\n            if ((-1 < (int)(uart_handle->ErrorCode << 0x1c)) && ((uart_instance->CR3 & 0x40) == 0))\n            {\n                HAL_UART_ErrorCallback(uart_handle);\n                uart_handle->ErrorCode = 0;\n                return;\n            }\n            uart_instance->CR1 = uart_instance->CR1 & 0xfffffedf;\n            uart_instance->CR3 = uart_instance->CR3 & 0xfffffffe;\n            uart_handle->State = HAL_UART_STATE_READY;\n            HAL_UART_ErrorCallback(uart_handle);\n            return;\n        }\n    }\n    if (((int)(status_reg << 0x18) < 0) && ((int)(control_reg << 0x18) < 0))\n    {\n        if ((uart_handle->State & 0xdf) == 0x12)\n        {\n            tx_buffer_pointer = (uint8_t *)uart_handle->pTxBuffPtr;\n            if ((uart_handle->Init).WordLength == 0x1000)\n            {\n                uart_instance->DR = *tx_buffer_pointer & 0x1ff;\n                if ((uart_handle->Init).Parity == 0)\n                {\n                    tx_buffer_pointer++;\n                }\n                else\n                {\n                    tx_buffer_pointer = (uint8_t *)((int)tx_buffer_pointer + 1);\n                }\n                uart_handle->pTxBuffPtr = tx_buffer_pointer;\n            }\n            else\n            {\n                uart_handle->pTxBuffPtr = (uint8_t *)((int)tx_buffer_pointer + 1);\n                uart_instance->DR = (uint32_t)*(uint8_t *)tx_buffer_pointer;\n            }\n            transfer_count = uart_handle->TxXferCount - 1;\n            uart_handle->TxXferCount = transfer_count;\n            if (transfer_count == 0)\n            {\n                uart_instance->CR1 = uart_instance->CR1 & 0xffffff7f;\n                uart_instance->CR1 = uart_instance->CR1 | 0x40;\n                return;\n            }\n        }\n    }\n    else if (((int)(status_reg << 0x19) < 0) && ((int)(control_reg << 0x19) < 0))\n    {\n        uart_instance->CR1 = uart_instance->CR1 & 0xffffffbf;\n        if (uart_handle->State == HAL_UART_STATE_BUSY_TX_RX)\n        {\n            new_uart_state = HAL_UART_STATE_BUSY_RX;\n        }\n        else\n        {\n            new_uart_state = HAL_UART_STATE_READY;\n        }\n        uart_handle->State = new_uart_state;\n        HAL_UART_TxCpltCallback(uart_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_UART_ErrorCallback",
                "HAL_UART_TxCpltCallback",
                "UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [
                "USART1_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_0800299a"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "data",
                "param_2": "start",
                "param_3": "end",
                "param_4": "code",
                "param_5": "callback",
                "uVar2": "max_size",
                "uVar3": "byte_count",
                "bVar4": "is_byte_pos_4",
                "byte_pos": "byte_pos"
            },
            "code": "undefined4 process_data_080052e4(undefined4 data, uint *start, uint *end, undefined4 code, code *callback)\\n\\\n{\\n\\\n  int i;\\n\\\n  uint max_size = start[4];\\n\\\n  if ((int)start[4] < (int)start[2]) {\\n\\\n    max_size = start[2];\\n\\\n  }\\n\\\n  *end = max_size;\\n\\\n  if (*(char *)((int)start + 0x43) != \"\\0\") {\\n\\\n    *end = max_size + 1;\\n\\\n  }\\n\\\n  if ((int)(*start << 0x1a) < 0) {\\n\\\n    *end = *end + 2;\\n\\\n  }\\n\\\n  uint byte_pos = *start & 6;\\n\\\n  if (byte_pos == 0) {\\n\\\n    for (; (int)byte_pos < (int)(start[3] - *end); byte_pos++) {\\n\\\n      int result = (*callback)(data, code, (int)start + 0x19, 1);\\n\\\n      if (result == -1) {\\n\\\n        return 0xffffffff;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  uint extra_byte = (uint)*(byte *)((int)start + 0x43);\\n\\\n  if (extra_byte != 0) {\\n\\\n    extra_byte = 1;\\n\\\n  }\\n\\\n  uint byte_count = extra_byte;\\n\\\n  if ((int)(*start << 0x1a) < 0) {\\n\\\n    *(undefined *)((int)start + extra_byte + 0x43) = 0x30;\\n\\\n    byte_count = extra_byte + 2;\\n\\\n    *(undefined *)((int)start + extra_byte + 0x44) = *(undefined *)((int)start + 0x45);\\n\\\n  }\\n\\\n  int result = (*callback)(data, code, (int)start + 0x43, byte_count);\\n\\\n  if (result != -1) {\\n\\\n    uint size = start[3];\\n\\\n    bool is_byte_pos_4 = (*start & 6) != 4;\\n\\\n    if (is_byte_pos_4) {\\n\\\n      size = 0;\\n\\\n    }\\n\\\n    uint size_diff = 0;\\n\\\n    if (!is_byte_pos_4) {\\n\\\n      size_diff = size - *end;\\n\\\n    }\\n\\\n    if (!is_byte_pos_4) {\\n\\\n      size_diff = size_diff & ~((int)size_diff >> 0x1f);\\n\\\n    }\\n\\\n    if ((int)start[4] < (int)start[2]) {\\n\\\n      size_diff = size_diff + (start[2] - start[4]);\\n\\\n    }\\n\\\n    while( true ) {\\n\\\n      if (size_diff == byte_count) {\\n\\\n        return 0;\\n\\\n      }\\n\\\n      result = (*callback)(data, code, (int)start + 0x1a, 1);\\n\\\n      if (result == -1) break;\\n\\\n      byte_count++;\\n\\\n    }\\n\\\n  }\\n\\\n  return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_08000f94": {
            "renaming": {
                "FUN_08000f94": "calculate_result_08000f94",
                "param_1": "first_input",
                "param_2": "second_input",
                "uVar2": "doubled_first_input",
                "uVar3": "doubled_second_input",
                "uVar4": "bitwise_or_result",
                "bVar5": "is_zero_result",
                "bVar1": "is_negative_result"
            },
            "code": "uint calculate_result_08000f94(uint first_input, uint second_input)\n{\n  bool is_negative_result;\n  uint doubled_first_input = first_input * 2;\n  uint doubled_second_input = second_input * 2;\n  if (((int)doubled_first_input >> 0x18 == -1 || (int)doubled_second_input >> 0x18 == -1) &&\n     ((((int)doubled_first_input >> 0x18 == -1 && ((first_input & 0x7fffff) != 0)) ||\n      (((int)doubled_second_input >> 0x18 == -1 && ((second_input & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint bitwise_or_result = doubled_first_input | second_input & 0x7fffffff;\n  bool is_zero_result = bitwise_or_result == 0;\n  if (!is_zero_result) {\n    bitwise_or_result = first_input ^ second_input;\n    is_zero_result = bitwise_or_result == 0;\n  }\n  is_negative_result = -1 < (int)bitwise_or_result;\n  if (is_negative_result) {\n    first_input = doubled_first_input + second_input * -2;\n    is_zero_result = first_input == 0;\n  }\n  if ((is_negative_result && doubled_second_input <= doubled_first_input) && !is_zero_result) {\n    first_input = (int)second_input >> 0x1f;\n  }\n  if (!is_negative_result || doubled_second_input > doubled_first_input) {\n    first_input = ~((int)second_input >> 0x1f);\n  }\n  if (!is_zero_result) {\n    first_input = first_input | 1;\n  }\n  return first_input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f94",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f94"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "CheckI2CAcknowledge_080014e2",
                "*hi2c": "*i2cHandle",
                "HVar1": "status",
                "uVar2": "startTime",
                "uVar3": "currentTime",
                "Timeout": "timeout"
            },
            "code": "HAL_StatusTypeDef CheckI2CAcknowledge_080014e2(I2C_HandleTypeDef *i2cHandle, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t startTime = HAL_GetTick();\n  while(1) {\n    if ((int)(i2cHandle->Instance->SR1 << 0x18) < 0) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2cHandle);\n    if (status != HAL_OK) {\n      if ((timeout != 0xffffffff) && ((timeout == 0) || (HAL_GetTick() - startTime > timeout))) {\n        i2cHandle->ErrorCode |= 0x20;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      break;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "CheckI2CAcknowledge_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "toggle_GPIO_output_pin_state_0800142e",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "GPIO_pin",
                "ODR": "output_data_register"
            },
            "code": "void toggle_GPIO_output_pin_state_0800142e(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin) {\n    GPIO_port->ODR ^= GPIO_pin;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "toggle_GPIO_output_pin_state_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "set_PWM_08004d8c",
                "htim_pwm": "timer_handle",
                "TIM_TypeDef": "timer_instance",
                "pTVar1": "timer_instance",
                "tmpreg": "tmp_reg_1",
                "tmpreg_1": "tmp_reg_2",
                "tmpreg_2": "tmp_reg_3",
                "tmpreg_3": "tmp_reg_4",
                "DAT_08004e04": "timer1",
                "uint": "uint32_t",
                "DAT_08004e08": "register1",
                "DAT_08004e0c": "timer3",
                "DAT_08004e10": "timer4",
                "_DAT_4002101c": "_register2"
            },
            "code": "void set_PWM_08004d8c(TIM_HandleTypeDef *htim_pwm)\n{\n    TIM_TypeDef *timer_instance;\n    uint32_t tmp_reg_1;\n    uint32_t tmp_reg_2;\n    uint32_t tmp_reg_3;\n    uint32_t tmp_reg_4;\n    \n    timer_instance = htim_pwm->Instance;\n    \n    if (timer_instance == DAT_08004e04)\n    {\n        *(uint *)(DAT_08004e08 + 0x18) |= 0x800;\n    }\n    else if (timer_instance == timer2)\n    {\n        _DAT_4002101c |= 1;\n    }\n    else if (timer_instance == DAT_08004e0c)\n    {\n        *(uint *)(DAT_08004e08 + 0x1c) |= 2;\n    }\n    else if (timer_instance == DAT_08004e10)\n    {\n        *(uint *)(DAT_08004e08 + 0x1c) |= 4;\n    }\n    \n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "set_PWM_08004d8c"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "current_character"
            },
            "code": "bool is_end_of_string_080009b4(void)\n{\n  char current_character;\n  __aeabi_cdcmpeq();\n  return current_character == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009b4"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "calculate_result_08003068",
                "in_s0": "input_value"
            },
            "code": "float calculate_result_08003068(void)\n{\n  float input_value;\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "calculate_result_08003068"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "calculate_result_08000f8c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_input_1_greater_than_input_2",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_08000f8c(uint input_1, uint input_2) {\n  bool is_negative_1 = ((int)input_1 >> 0x18 == -1);\n  bool is_negative_2 = ((int)input_2 >> 0x18 == -1);\n  uint multiplied_input_1 = input_1 * 2;\n  uint multiplied_input_2 = input_2 * 2;\n  \n  if ((is_negative_1 || is_negative_2) && ((is_negative_1 && ((input_1 & 0x7fffff) != 0)) || (is_negative_2 && ((input_2 & 0x7fffff) != 0)))) {\n    return 0xffffffff;\n  }\n  \n  uint combined_inputs = multiplied_input_1 | input_2 & 0x7fffffff;\n  bool is_combined_zero = (combined_inputs == 0);\n  \n  if (!is_combined_zero) {\n    uint xor_inputs = input_1 ^ input_2;\n    is_combined_zero = (xor_inputs == 0);\n  }\n  \n  bool is_input_1_greater_than_input_2 = ((int)(input_1 ^ input_2) < 0);\n  \n  if (is_input_1_greater_than_input_2) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_combined_zero = (input_1 == 0);\n  }\n  \n  if (is_input_1_greater_than_input_2 && multiplied_input_2 <= multiplied_input_1 && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_input_1_greater_than_input_2 || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  \n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f8c"
        },
        "FUN_08000474": {
            "renaming": {
                "FUN_08000474": "calculate_08000474",
                "param_1": "num1",
                "param_2": "num2",
                "bVar1": "b",
                "uVar2": "x",
                "uVar3": "y",
                "uVar4": "z",
                "iVar5": "count1",
                "uVar6": "flag1",
                "iVar7": "count2",
                "uVar8": "w",
                "uVar9": "count3",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar12": "flag4"
            },
            "code": "ulonglong calculate_08000474(uint num1, uint num2)\n{\n    byte b;\n    uint x, y, z, w, count1, count2, count3;\n    bool flag1, flag2, flag3;\n    if ((num1 | num2) == 0) {\n        return CONCAT44(num2, num1);\n    }\n    w = num2 & 0x80000000;\n    y = num2;\n    if ((int)w < 0) {\n        flag2 = num1 != 0;\n        num1 = -num1;\n        y = -num2 - (uint)flag2;\n    }\n    count3 = 0x432;\n    x = y >> 0x16;\n    if (x != 0) {\n        count3 = 3;\n        if (y >> 0x19 != 0) {\n            count3 = 6;\n        }\n        if (y >> 0x1c != 0) {\n            count3 += 3;\n        }\n        count1 = count3 - ((int)y >> 0x1f);\n        x = num1 << (0x20 - count1 & 0xff);\n        num1 = num1 >> (count1 & 0xff) | y << (0x20 - count1 & 0xff);\n        y = y >> (count1 & 0xff);\n        count3 = count1 + 0x432;\n    }\n    if (0xfffff < y) {\n        if (0x1fffff < y) {\n            count1 = y & 1;\n            y = y >> 1;\n            b = (byte)num1;\n            num1 = (uint)(count1 != 0) << 0x1f | num1 >> 1;\n            x = (uint)(b & 1) << 0x1f | x >> 1;\n            count3 += 1;\n            if (0xffbfffff < (uint)(count3 * 0x200000)) {\n                return (ulonglong)(w | 0x7ff00000) << 0x20;\n            }\n        }\n        flag2 = 0x7fffffff < x;\n        if (x == 0x80000000) {\n            flag2 = (num1 & 1) != 0;\n        }\n        return CONCAT44(y + count3 * 0x100000 + (uint)CARRY4(num1, (uint)flag2) | w, num1 + flag2);\n    }\n    flag1 = (x & 0x80000000) != 0;\n    x = x << 1;\n    count1 = num1 * 2;\n    flag2 = CARRY4(num1, num1);\n    num1 = num1 * 2 + (uint)flag1;\n    y = y * 2 + (uint)(flag2 || CARRY4(count1, (uint)flag1));\n    count3 = count3 + -1;\n    if ((y & 0x100000) != 0) {\n        goto LAB_08000278;\n    }\n    z = num1;\n    count1 = y;\n    if (y == 0) {\n        z = 0;\n        count1 = num1;\n    }\n    count2 = count_leading_zeroes(count1);\n    if (y == 0) {\n        count2 = count2 + 0x20;\n    }\n    w = count2 - 0xb;\n    flag3 = SBORROW4(w, 0x20);\n    y = count2 - 0x2b;\n    flag2 = (int)y < 0;\n    flag1 = y == 0;\n    if ((int)w < 0x20) {\n        flag3 = SCARRY4(y, 0xc);\n        count2 = count2 + -0x1f;\n        flag2 = count2 < 0;\n        flag1 = count2 == 0;\n        y = w;\n        if (!flag1 && flag2 == flag3) {\n            x = count1 << (w & 0xff);\n            count1 = count1 >> (0xcU - count2 & 0xff);\n            goto LAB_080002f0;\n        }\n    }\n    if (flag1 || flag2 != flag3) {\n        count3 = 0x20 - w;\n    }\n    count1 = count1 << (w & 0xff);\n    if (flag1 || flag2 != flag3) {\n        count1 = count1 | x >> (count3 & 0xff);\n    }\n    if (flag1 || flag2 != flag3) {\n        x = x << (w & 0xff);\n    }\nLAB_080002f0:\n    if ((int)w <= count3) {\n        return CONCAT44(count1 + (count3 - w) * 0x100000 | w, z);\n    }\n    y = ~(count3 - w);\n    if (0x1e < (int)y) {\n        return CONCAT44(num2, count1 >> (y - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    count3 = y - 0x13;\n    if (count3 == 0 || count3 < 0 != SCARRY4(y - 0x1f, 0xc)) {\n        y = y + 1;\n        return CONCAT44(w | count1 >> (y & 0xff), z >> (y & 0xff) | count1 << (0x20 - y & 0xff));\n    }\n    return CONCAT44(num2, z >> (0x20 - (0xcU - count3) & 0xff) | count1 << (0xcU - count3 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000474",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000474"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "is_init_completed_08000110",
                "param_1": "init_ptr",
                "PTR_completed_8672_08000128": "is_completed",
                "DAT_0800012c": "init_value_ptr"
            },
            "code": "bool is_init_completed_08000110(bool *PTR_completed_8672_08000128, int *DAT_0800012c, void *init_ptr) {\n\tif (*PTR_completed_8672_08000128 == false) {\n\t\tif (*DAT_0800012c != 0) {\n\t\t\tinit_ptr = init_ptr;\n\t\t}\n\t\t*PTR_completed_8672_08000128 = true;\n\t}\n\treturn init_ptr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "is_init_completed_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "exception_handler_0800709e",
                "__exc": "__exception_ptr"
            },
            "code": "int exception_handler_0800709e(exception *__exception_ptr)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "exception_handler_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculateFilteredPitch_08002ec0",
                "in_s0": "input_pitch",
                "fVar1": "filtered_pitch"
            },
            "code": "float calculateFilteredPitch_08002ec0(void)\n{\n  float input_pitch;\n  float filtered_pitch;\n  filtered_pitch = lowPassFilter((LPF *)PTR_lpf_pitch_08002ed0, input_pitch);\n  return filtered_pitch;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculateFilteredPitch_08002ec0"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_product_sum_08006c0c",
                "param_1": "a",
                "param_2": "b",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shift",
                "uVar4": "quotient",
                "uVar5": "remainder",
                "iVar7": "exponent",
                "uVar8": "significand",
                "uVar9": "divisor",
                "bit": "bit",
                "uVar11": "product",
                "uVar12": "sum"
            },
            "code": "undefined8 calculate_product_sum_08006c0c(uint a, uint b)\n{\n  undefined4 temp1;\n  uint temp2;\n  int shift;\n  uint quotient;\n  uint remainder;\n  int exponent;\n  uint significand;\n  uint divisor;\n  uint bit;\n  uint product;\n  uint sum;\n  if ((DAT_08006d60 & ~b) == 0) {\n    sum = a + b;\n    product = a * b;\n    return CONCAT44(sum, product);\n  }\n  if ((int)b < 1) {\n    if ((b & 0x7fffffff | a) == 0) {\n      return CONCAT44(b, a);\n    }\n    if (b != 0) {\n      temp1 = (undefined4)__aeabi_dsub(a, b, a, b);\n      quotient = (uint)((ulonglong)temp1 >> 0x20);\n      remainder = (uint)temp1;\n      temp1 = (undefined4)__aeabi_uidiv(remainder, quotient, remainder, quotient);\n      return CONCAT44(remainder, quotient);\n    }\n  }\n  shift = (int)b >> 0x14;\n  if (shift == 0) {\n    while (b == 0) {\n      shift = shift - 0x15;\n      b = a >> 0xb;\n      a = a << 0x15;\n    }\n    bit = 0;\n    for (; -1 < (int)(b << 0xb); b = b << 1) {\n      bit = bit + 1;\n    }\n    shift = shift - (bit - 1);\n    b = b | a >> (0x20 - bit & 0xff);\n    a = a << (bit & 0xff);\n  }\n  exponent = 0;\n  divisor = b & 0xfffff | 0x100000;\n  if ((shift + -0x3ff) * -0x80000000 < 0) {\n    divisor = divisor * 2 - ((int)a >> 0x1f);\n    a = a << 1;\n  }\n  divisor = divisor * 2 - ((int)a >> 0x1f);\n  significand = 0x16;\n  sum = 0;\n  divisor = divisor << 1;\n  do {\n    bit = sum + divisor;\n    if (bit <= (int)divisor) {\n      divisor = divisor >> 1;\n      sum = bit + divisor;\n      exponent = exponent + divisor;\n    }\n    significand = significand - 1;\n    divisor = divisor << 1;\n  } while (significand != 0);\n  bit = 0x20;\n  quotient = 0x80000000;\n  divisor = significand;\n  do {\n    remainder = quotient + divisor;\n    product = sum;\n    if (((int)sum < (int)divisor) || ((divisor == sum && (remainder <= a)))) {\n      divisor = remainder + quotient;\n      if (((int)remainder < 0) && (-1 < (int)divisor)) {\n        product = sum + 1;\n      }\n      exponent = exponent - divisor;\n      if (a < remainder) {\n        exponent = exponent - 1;\n      }\n      a = a - remainder;\n      significand = significand + quotient;\n    }\n    divisor = divisor << 1;\n    bit = bit - 1;\n    quotient = quotient >> 1;\n    sum = product;\n  } while (bit != 0);\n  if ((a | exponent) != 0) {\n    if (significand == 0xffffffff) {\n      exponent = exponent + 1;\n      significand = bit;\n    }\n    else {\n      significand = significand + 1 & 0xfffffffe;\n    }\n  }\n  significand = significand >> 1;\n  if (exponent << 0x1f < 0) {\n    significand = significand | 0x80000000;\n  }\n  return CONCAT44((exponent >> 1) + 0x3fe00000 + (shift + -0x3ff >> 1) * 0x100000, significand);\n}",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "sqrt",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_product_sum_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "calculateMotorSpeeds_0800426c",
                "throttle": "throttle",
                "pitch": "pitch",
                "roll": "roll",
                "yaw": "yaw",
                "uVar1": "throttleDiff",
                "uVar2": "pitchRollSum",
                "uVar3": "pitchRollDiff",
                "m4": "motor4Speed",
                "m3": "motor3Speed",
                "m2": "motor2Speed",
                "m1": "motor1Speed",
                "__aeabi_fsub": "subtractFloats",
                "__addsf3": "addFloats",
                "__aeabi_f2iz": "convertFloatToInt",
                "DAT_080042fc": "0.5"
            },
            "code": "void calculateMotorSpeeds_0800426c(float throttle, float pitch, float roll, float yaw)\n{\n  float throttleDiff = throttle - DAT_080042fc;\n  float pitchRollSum = pitch + roll;\n  float pitchRollDiff = pitch - roll;\n  float yawDiff = yaw - DAT_080042fc;\n  int motor4Speed = (int)(throttleDiff - pitchRollDiff + yawDiff);\n  int motor3Speed = (int)(throttleDiff + pitchRollSum - yawDiff);\n  int motor2Speed = (int)(throttleDiff + pitchRollDiff + yawDiff);\n  int motor1Speed = (int)(throttleDiff - pitchRollSum - yawDiff);\n  Motor_SetSpeed(motor1Speed, motor2Speed, motor3Speed, motor4Speed);\n}",
            "called": [
                "Motor_SetSpeed",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculateMotorSpeeds_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "enable_tim_channel_08002538",
                "htim": "tim_handle",
                "Channel": "channel",
                "pTVar1": "tim_instance",
                "pTVar2": "bdtr_instance",
                "DAT_08002560": "TIM2"
            },
            "code": "HAL_StatusTypeDef enable_tim_channel_08002538(TIM_HandleTypeDef *tim_handle,uint32_t channel)\n{\n  TIM_TypeDef *tim_instance;\n  TIM_TypeDef *bdtr_instance;\n  \n  TIM_CCxChannelCmd(tim_handle->Instance,channel,1);\n  bdtr_instance = tim_handle->Instance;\n  tim_instance = DAT_08002560;\n  if (bdtr_instance == DAT_08002560) {\n    tim_instance = (TIM_TypeDef *)(bdtr_instance->BDTR | 0x8000);\n  }\n  if (bdtr_instance == DAT_08002560) {\n    bdtr_instance->BDTR = (uint32_t)tim_instance;\n  }\n  bdtr_instance->CR1 = bdtr_instance->CR1 | 1;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "PWM_Init"
            ],
            "imported": false,
            "current_name": "enable_tim_channel_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "read_i2c_data_080040e8",
                "device_add": "device_address",
                "register_add": "register_address",
                "byte_array": "data_array",
                "size": "data_size",
                "file": "filename",
                "line": "line_number",
                "puVar3": "data_ptr",
                "uVar1": "read_byte",
                "file_00": "PTR_s____Src_i2c_c_08004118",
                "iVar2": "i"
            },
            "code": "void read_i2c_data_080040e8(uint16_t device_address, uint16_t register_address, uint8_t *data_array, uint16_t data_size, char *filename, int line_number) {\n  uint8_t *data_ptr;\n  uint8_t read_byte;\n  \n  data_ptr = data_array - 1;\n  for (int i = 0; i < (int)data_size; i++) {\n    read_byte = I2C_ReadByte(device_address, register_address + (short)i, filename, 0x4c);\n    data_ptr++;\n    *data_ptr = read_byte;\n  }\n  return;\n}",
            "called": [
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "AK8963_ReadData",
                "MS5611_Init",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080040e8"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "hash_value_1",
                "uVar3": "sign_bit",
                "iVar4": "hash_value_3",
                "uVar5": "hash_value_4",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08000c44(uint input_value)\n{\n    int leading_zeroes_count;\n    uint hash_value_1;\n    uint hash_value_2;\n    int hash_value_3;\n    uint hash_value_4;\n    \n    uint sign_bit = input_value & 0x80000000;\n    if ((int)sign_bit < 0) {\n        input_value = -input_value;\n    }\n    if (input_value == 0) {\n        return 0;\n    }\n    leading_zeroes_count = count_leading_zeroes(input_value);\n    hash_value_1 = leading_zeroes_count - 8;\n    hash_value_3 = ((sign_bit | 0x4b000000) - 0x800000) + hash_value_1 * -0x800000;\n    if (7 < leading_zeroes_count) {\n        hash_value_4 = 0 << (hash_value_1 & 0xff);\n        hash_value_2 = hash_value_3 + (input_value << (hash_value_1 & 0xff)) + (0U >> (0x20 - hash_value_1 & 0xff)) + (uint)(0x7fffffff < hash_value_4);\n        if (hash_value_4 == 0x80000000) {\n            hash_value_2 = hash_value_2 & 0xfffffffe;\n        }\n        return hash_value_2;\n    }\n    hash_value_1 = input_value << (leading_zeroes_count + 0x18U & 0xff);\n    hash_value_2 = hash_value_3 + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)hash_value_1 >> 0x1f));\n    if ((hash_value_1 & 0x7fffffff) == 0) {\n        hash_value_2 = hash_value_2 & ~(hash_value_1 >> 0x1f);\n    }\n    return hash_value_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "MS5611_Update",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a04(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n\tint is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n\tint is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n\tif(is_input1_valid && is_input2_valid) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "configure_uart_080025e8",
                "huart": "uart_handle",
                "uVar1": "pclk_freq",
                "uVar2": "baud_div",
                "uVar3": "parity_bits",
                "iVar4": "integer_baud_div",
                "uVar5": "oversampling_error",
                "iVar6": "fraction",
                "pUVar7": "usart_instance"
            },
            "code": "void configure_uart_080025e8(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq, baud_div, fraction;\n  uint8_t parity_bits;\n  int16_t oversampling_error, integer_baud_div;\n  USART_TypeDef *usart_instance;\n  \n  usart_instance = uart_handle->Instance;\n  parity_bits = (uart_handle->Init).Parity;\n  usart_instance->CR2 = (usart_instance->CR2 & 0xffffcfff) | (uart_handle->Init).StopBits;\n  usart_instance->CR1 = (uart_handle->Init).WordLength | parity_bits | (uart_handle->Init).Mode | (usart_instance->CR1 & 0xffffe9f3);\n  usart_instance->CR3 = (usart_instance->CR3 & 0xfffffcff) | (uart_handle->Init).HwFlowCtl;\n  \n  if (usart_instance == DAT_08002720) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  \n  baud_div = (pclk_freq * 25) / ((uart_handle->Init).BaudRate * 4);\n  integer_baud_div = baud_div / 100;\n  fraction = (baud_div - (integer_baud_div * 100)) * 16 / 100;\n  oversampling_error = ((integer_baud_div * 1000) / 25) - ((integer_baud_div * 100) / 25);\n  \n  usart_instance->BRR = (integer_baud_div << 4) | fraction;\n  usart_instance->BRR |= ((oversampling_error & 0x0F) << 8) | ((oversampling_error & 0xF0) << 7);\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_080025e8"
        },
        "FUN_08003078": {
            "renaming": {
                "FUN_08003078": "FUNC_08003078"
            },
            "code": "\nvoid FUNC_08003078(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  uint32_t uVar13;\n  undefined4 extraout_r1;\n  uint uVar14;\n  undefined4 unaff_r4;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r5;\n  undefined4 unaff_r6;\n  undefined4 unaff_r7;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  bool bVar22;\n  undefined8 uVar23;\n  \n  puVar6 = PTR_PRESSURE_READY_08003254;\n  puVar5 = PTR_TEMP_READY_08003250;\n  if ((*PTR_TEMP_READY_08003250 != '\\0') && (*PTR_PRESSURE_READY_08003254 != '\\0')) {\n    iVar21 = *(int *)PTR_MS5611_RawTemperature_0800325c +\n             (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x17 |\n             (int)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                    (longlong)iVar21 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                   (longlong)iVar21) >> 8);\n    iVar19 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000;\n    bVar22 = (int)uVar14 < 0;\n    if (1999 < iVar19) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar22 != SBORROW4(iVar19,2000)) {\n      iVar20 = uVar14 * uVar14 * 5;\n      uVar14 = iVar20 >> 2;\n      uVar4 = iVar20 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_MS5611_RawPressure_08003260;\n    iVar20 = *(uint *)PTR_MS5611_RawPressure_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                      (longlong)iVar21 >> 0x28) +\n               (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000))\n              - ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar20 * 0x800;\n    uVar10 = __floatsisf(uVar8 - uVar17 >> 0xf |\n                         (((iVar20 >> 0x15) -\n                          ((((int)((longlong)\n                                   (int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                                   (longlong)iVar21 >> 0x27) +\n                            (uint)CARRY4(uVar15,(uint)*(ushort *)\n                                                       (PTR_MS5611_Coefficients_08003258 + 4) *\n                                                0x10000)) - ((int)uVar4 >> 0x1f)) -\n                          (uint)(uVar16 < uVar4))) - (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar11 = __aeabi_fdiv(uVar10,DAT_08003264);\n    *(undefined4 *)PTR_MS5611_CompensatedPressure_08003268 = uVar11;\n    uVar10 = __floatsisf(iVar19);\n    uVar12 = __aeabi_fdiv(uVar10,DAT_08003264);\n    uVar10 = DAT_08003270;\n    *(undefined4 *)PTR_MS5611_CompensatedTemperature_0800326c = uVar12;\n    __aeabi_fdiv(uVar11,uVar10);\n    uVar10 = __aeabi_f2d();\n    pow((double)CONCAT44(unaff_r5,unaff_r4),(double)CONCAT44(unaff_r7,unaff_r6));\n    uVar23 = __subdf3(0,DAT_08003274,uVar10,extraout_r1);\n    __muldf3((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar10 = __truncdfsf2();\n    puVar7 = PTR_alt_filter_08003278;\n    *(undefined4 *)PTR_MS5611_Altitude_0800327c = uVar10;\n    uVar11 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar11 = __addsf3(uVar11);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar10;\n    uVar10 = __addsf3(uVar11,uVar10);\n    uVar10 = __aeabi_fdiv(uVar10,DAT_08003280);\n    *(undefined4 *)PTR_MS5611_FilteredAltitude_08003284 = uVar10;\n    iVar19 = __aeabi_f2iz();\n    puVar7 = PTR_MS5611_OSR_0800328c;\n    *(int *)PTR_msp_txf_altitude_08003288 = iVar19 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    I2C_WriteByte(0xee,bVar2 + 0x50,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)PTR_temp_time_08003290 = uVar13;\n  }\n  uVar13 = millis();\n  puVar6 = PTR_pressure_time_08003294;\n  if (((10 < uVar13 - *(int *)PTR_temp_time_08003290) && (*puVar5 == '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    puVar7 = PTR_MS5611_RawTemperature_0800325c;\n    *puVar5 = 1;\n    *(uint32_t *)puVar7 = uVar13;\n    I2C_WriteByte(0xee,(byte)*PTR_MS5611_OSR_0800328c + 0x40,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)puVar6 = uVar13;\n  }\n  uVar13 = millis();\n  puVar7 = PTR_PRESSURE_READY_08003254;\n  if (((10 < uVar13 - *(int *)puVar6) && (*puVar5 != '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    *(uint32_t *)PTR_MS5611_RawPressure_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "__floatsisf",
                "__muldf3",
                "__addsf3",
                "millis",
                "__aeabi_fdiv",
                "__aeabi_f2d",
                "__truncdfsf2",
                "I2C_WriteByte",
                "__subdf3",
                "MS5611_ReadADC",
                "pow",
                "__aeabi_f2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003078",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "FUNC_08003078"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_zero_080009c8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_zero_exception",
                "__aeabi_cdcmpeq": "compare_double"
            },
            "code": "bool is_zero_080009c8(double num) {\n    bool is_equal = __aeabi_cdcmpeq(num, 0.0);\n    return !is_equal || num == 0.0;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "is_zero_080009c8"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "temp",
                "bVar1": "is_negative",
                "bVar5": "is_temp_zero"
            },
            "code": "uint calculate_result_08000f9c(uint input_1, uint input_2) {\n  bool is_negative;\n  uint multiplied_input_1 = input_1 * 2;\n  uint multiplied_input_2 = input_2 * 2;\n  bool is_input_1_negative = ((int)multiplied_input_1 >> 0x18 == -1) && ((input_1 & 0x7fffff) != 0);\n  bool is_input_2_negative = ((int)multiplied_input_2 >> 0x18 == -1) && ((input_2 & 0x7fffff) != 0);\n  if (is_input_1_negative || is_input_2_negative) {\n    return 1;\n  }\n  uint temp = multiplied_input_1 | input_2 & 0x7fffffff;\n  bool is_temp_zero = temp == 0;\n  if (!is_temp_zero) {\n    temp = input_1 ^ input_2;\n    is_temp_zero = temp == 0;\n  }\n  is_negative = -1 < (int)temp;\n  if (is_negative) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_temp_zero = input_1 == 0;\n  }\n  if (is_negative && multiplied_input_2 <= multiplied_input_1 && !is_temp_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_temp_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculateRollLowPassFilter_08002ed4",
                "in_s0": "input",
                "fVar1": "filteredRoll"
            },
            "code": "float calculateRollLowPassFilter_08002ed4(float input)\n{\n  float filteredRoll = lowPassFilter((LPF *)PTR_lpf_roll_08002ee4, input);\n  return filteredRoll;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculateRollLowPassFilter_08002ed4"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nvoid FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  undefined4 extraout_r1;\n  uint extraout_r1_00;\n  undefined4 uVar2;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  uint extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  longlong lVar16;\n  ulonglong uVar17;\n  undefined8 uVar18;\n  undefined4 uVar19;\n  undefined4 in_stack_ffffff94;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar9 = param_4 & 0x7fffffff;\n  if ((uVar9 | param_3) == 0) {\n    return;\n  }\n  uVar7 = param_2 & 0x7fffffff;\n  if ((int)uVar7 <= (int)DAT_08006428) {\n    if (uVar7 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar7 < uVar9) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar9 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar9) {\n            uVar1 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar9 == DAT_08006428) {\n                return;\n              }\nLAB_0800630c:\n              if (uVar9 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return;\n                }\n                uVar7 = 0;\n                uVar9 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                __ieee754_sqrt(param_1,param_2);\n                return;\n              }\n            }\n          }\n          else {\n            if ((int)uVar9 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              uVar1 = 0;\n              goto LAB_080062ba;\n            }\n            iVar4 = ((int)uVar9 >> 0x14) + -0x3ff;\n            if (0x14 < iVar4) {\n              uVar1 = param_3 >> (0x34U - iVar4 & 0xff);\n              if (param_3 == uVar1 << (0x34U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar5 = (int)uVar9 >> (0x14U - iVar4 & 0xff);\n              uVar1 = param_3;\n              if (uVar9 == uVar5 << (0x14U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar5 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            uVar1 = 0;\n          }\n          uVar5 = param_1;\n          fabs((double)CONCAT44(in_stack_ffffff94,uVar1));\n          uVar17 = CONCAT44(param_2,uVar5) & 0x7fffffffffffffff;\n          if ((param_1 == 0) && ((uVar7 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              __divdf3(0,DAT_08006438,uVar5,extraout_r1);\n            }\n            if (-1 < (int)param_2) {\n              return;\n            }\n            if ((uVar1 | uVar7 + 0xc0100000) != 0) {\n              return;\n            }\n          }\n          else {\n            uVar5 = 0xffffffff - ((int)param_2 >> 0x1f);\n            if ((uVar1 | uVar5) != 0) {\n              if (DAT_08006440 < (int)uVar9) {\n                if (DAT_08006440 + 0x2100000 < (int)uVar9) {\n                  if (DAT_08006434 < (int)uVar7) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  if (-1 < (int)param_4) {\n                    return;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar7 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar7) goto LAB_08006418;\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar8 = (undefined4)uVar12;\n                uVar12 = __muldf3(uVar8,uVar10,DAT_080065a8,DAT_080065ac);\n                uVar13 = __muldf3(uVar8,uVar10,DAT_080065b0,DAT_080065b4);\n                uVar14 = __muldf3(uVar8,uVar10,0,DAT_080065d4);\n                uVar14 = __subdf3(DAT_080065b8,DAT_080065bc,(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar8,uVar10);\n                uVar14 = __subdf3(0,DAT_080065d8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar15 = __muldf3(uVar8,uVar10,uVar8,uVar10);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                  (int)((ulonglong)uVar15 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),DAT_080065c0,\n                                  DAT_080065c4);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                             (int)((ulonglong)uVar13 >> 0x20));\n                lVar16 = (ulonglong)extraout_r1_00 << 0x20;\n                uVar9 = extraout_r1_00;\n              }\n              else {\n                local_54 = 0;\n                if (uVar7 < 0x100000) {\n                  uVar17 = __muldf3();\n                  local_54 = -0x35;\n                }\n                uVar9 = (uint)(uVar17 >> 0x20);\n                local_54 = ((int)uVar9 >> 0x14) + -0x3ff + local_54;\n                uVar9 = uVar9 & 0xfffff;\n                uVar7 = uVar9 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar9) {\n                  if (DAT_08006920 < (int)uVar9) {\n                    uVar7 = uVar7 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar4 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar4 = 0;\n                }\n                uVar6 = *(undefined4 *)(PTR_bp_08006924 + iVar4 * 8);\n                uVar19 = *(undefined4 *)((int)(PTR_bp_08006924 + iVar4 * 8) + 4);\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __aeabi_dadd((int)uVar17,uVar7,uVar6,uVar19);\n                uVar13 = __divdf3(0,DAT_08006928,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3((int)uVar12,uVar10,(int)uVar13,uVar11);\n                uVar2 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar8 = (undefined4)uVar14;\n                uVar14 = __muldf3(0,uVar2);\n                uVar12 = __subdf3((int)uVar12,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __subdf3(0,((int)uVar7 >> 1 | 0x20000000U) + 0x80000 + iVar4 * 0x40000,\n                                  uVar6,uVar19);\n                uVar14 = __subdf3((int)uVar17,uVar7,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),0,uVar2);\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,uVar11);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar8,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar10 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar10,uVar6,DAT_080068d0,DAT_080068d4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar14 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __aeabi_dadd(uVar8,uVar2,0,uVar2);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar11);\n                uVar13 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar10 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(0,uVar2,0,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = __aeabi_dadd((int)uVar14,uVar6,0,DAT_0800692c);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar10);\n                uVar15 = __muldf3(0,uVar2,0,extraout_r1_01);\n                uVar19 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar18 = __subdf3(0,extraout_r1_01,0,DAT_0800692c);\n                uVar14 = __subdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar14,uVar6);\n                uVar13 = __subdf3((int)uVar13,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar8,uVar2);\n                uVar12 = __muldf3((int)uVar12,uVar11,0,extraout_r1_01);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar8 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                __aeabi_dadd((int)uVar15,uVar19,(int)uVar13,uVar8);\n                uVar12 = __muldf3(0,extraout_r1_02,DAT_08006900,DAT_08006904);\n                uVar14 = __subdf3(0,extraout_r1_02,(int)uVar15,uVar19);\n                uVar13 = __subdf3((int)uVar13,uVar8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006908,\n                                  DAT_0800690c);\n                uVar14 = __muldf3(0,extraout_r1_02,DAT_08006910,DAT_08006914);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),\n                                      *(undefined4 *)(PTR_dp_l_08006930 + iVar4 * 8),\n                                      *(undefined4 *)((int)(PTR_dp_l_08006930 + iVar4 * 8) + 4));\n                uVar14 = __aeabi_i2d(local_54);\n                uVar8 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = *(undefined4 *)(PTR_dp_h_08006934 + iVar4 * 8);\n                uVar11 = *(undefined4 *)((int)(PTR_dp_h_08006934 + iVar4 * 8) + 4);\n                uVar15 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar15 = __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar10,uVar11);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,uVar8);\n                uVar14 = __subdf3(0,extraout_r1_03,(int)uVar14,uVar8);\n                lVar16 = __subdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar10,uVar11);\n                uVar9 = extraout_r1_03;\n              }\n              uVar12 = __subdf3((int)lVar16,(int)((ulonglong)lVar16 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar8 = DAT_080065dc;\n              if ((uVar1 - 1 | uVar5) != 0) {\n                uVar8 = DAT_080065d0;\n              }\n              uVar19 = 0;\n              uVar13 = __subdf3(param_3,param_4,0,param_4);\n              uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar9);\n              uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),param_3,param_4);\n              uVar12 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar10 = (undefined4)uVar12;\n              uVar12 = __muldf3(0,uVar9,0,param_4);\n              uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar11 = (undefined4)uVar12;\n              lVar16 = __aeabi_dadd(uVar10,uVar2,uVar11,uVar6);\n              uVar7 = (uint)((ulonglong)lVar16 >> 0x20);\n              uVar9 = (uint)lVar16;\n              if (DAT_080065e0 < (int)uVar7) {\n                if ((uVar7 + 0xbf700000 | uVar9) == 0) {\n                  uVar13 = __aeabi_dadd(uVar10,uVar2,DAT_08006ba8,DAT_08006bac);\n                  uVar14 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmpgt((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                         (int)((ulonglong)uVar14 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_080065c8,DAT_080065cc);\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar7 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar7 | uVar9) == 0) {\n                  uVar13 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmple(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_08006bf0,DAT_08006bf4);\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar7 & 0x7fffffff)) {\n                  uVar7 = (0x100000 >> (((int)(uVar7 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar7;\n                  uVar9 = (uVar7 * 2 >> 0x15) - 0x3ff;\n                  iVar4 = (int)(uVar7 & 0xfffff | 0x100000) >> (0x14 - uVar9 & 0xff);\n                  if (lVar16 < 0) {\n                    iVar4 = -iVar4;\n                  }\n                  uVar12 = __subdf3(uVar11,uVar6,0,uVar7 & ~(DAT_08006bfc >> (uVar9 & 0xff)));\n                }\n                else {\n                  iVar4 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                local_68 = (undefined4)uVar12;\n                __aeabi_dadd(local_68,local_64,uVar10,uVar2);\n                uVar12 = __muldf3(0,extraout_r1_04,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __subdf3(0,extraout_r1_04,local_68,local_64);\n                uVar13 = __subdf3(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bb8,\n                                  DAT_08006bbc);\n                uVar14 = __muldf3(0,extraout_r1_04,DAT_08006bc0,DAT_08006bc4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __aeabi_dadd((int)uVar12,uVar11,(int)uVar13,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = (undefined4)uVar14;\n                uVar12 = __subdf3(uVar10,uVar6,(int)uVar12,uVar11);\n                uVar12 = __subdf3((int)uVar13,uVar2,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar11 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar11,uVar3,DAT_08006bc8,DAT_08006bcc);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd0,\n                                  DAT_08006bd4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be0,\n                                  DAT_08006be4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3(uVar10,uVar6,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar13,uVar11);\n                uVar13 = __subdf3((int)uVar13,uVar11,0,0x40000000);\n                uVar13 = __divdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                  (int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar12,uVar2);\n                uVar12 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar2\n                                     );\n                uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                  (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar10,uVar6);\n                uVar12 = __subdf3(0,DAT_08006c00,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                if ((int)((ulonglong)uVar12 >> 0x20) + iVar4 * 0x100000 < 0x100000) {\n                  scalbn((double)CONCAT44(uVar8,uVar19),(int)uVar12);\n                }\n              }\nLAB_0800634a:\n              __muldf3();\n              return;\n            }\n          }\n          uVar12 = __subdf3();\n          uVar9 = (uint)((ulonglong)uVar12 >> 0x20);\n          uVar7 = (uint)uVar12;\n          param_1 = uVar7;\n          param_2 = uVar9;\nLAB_08006320:\n          __divdf3(uVar7,uVar9,param_1,param_2);\n          return;\n        }\n      }\n    }\n    else if ((int)uVar9 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar7 + 0xc0100000 | param_1) == 0) {\n    return;\n  }\nLAB_08006278:\n  nan(PTR_DAT_0800642c);\n  return;\n}\n\n",
            "called": [
                "scalbn",
                "__aeabi_dcmple",
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "hash_constant",
                "uVar4": "shifted_input",
                "shifted_zeros": "shifted_zeros",
                "result": "result"
            },
            "code": "uint calculate_hash_08000c3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int hash_constant = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zeros = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < 0U);\n    uint result = hash_constant + shifted_input + shifted_zeros + carry;\n    if (shifted_input == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_zeros = ((int)shifted_input >> 0x1f) & 1U;\n  uint result = hash_constant + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - shifted_zeros);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c3c"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "calculate_ticks_08001214",
                "TicksNumb": "num_ticks",
                "puVar1": "ticks_ptr",
                "iVar2": "var1",
                "DAT_0800123c": "var1",
                "DAT_08001238": "ticks_ptr"
            },
            "code": "uint32_t calculate_ticks_08001214(uint32_t num_ticks)\n{\n  undefined4 *DAT_08001238;\n  int DAT_0800123c;\n  DAT_0800123c = DAT_0800123c;\n  DAT_08001238 = DAT_08001238;\n  if (num_ticks - 1 < 0x1000000) {\n    DAT_08001238[1] = num_ticks - 1;\n    *(undefined *)(DAT_0800123c + 0x23) = 0xf0;\n    DAT_08001238[2] = 0;\n    *DAT_08001238 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_pwm_value_08003fc4",
                "pwm": "pwm_value",
                "PTR_htim4_08003fcc": "htim4_ptr"
            },
            "code": "void set_pwm_value_08003fc4(int pwm_value)\n{\n  int* PTR_htim4_08003fcc = (int*)*(int*)PTR_htim4_08003fcc;\n  int offset = 0x40;\n  int* pwm_register_ptr = (int*)(PTR_htim4_08003fcc + offset);\n  *pwm_register_ptr = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fc4"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "set_clock_config_0800209c",
                "RCC_ClkInitStruct": "clock_init_struct",
                "FLatency": "flash_latency",
                "DAT_08002204": "FLASH_ACR",
                "uVar4": "reg_value",
                "uVar5": "sysclk_freq",
                "uVar6": "clock_type",
                "puVar3": "reg_value",
                "uVar7": "leading_zeroes",
                "PTR_SystemCoreClock_08002210": "SystemCoreClock",
                "PTR_AHBPrescTable_0800220c": "AHBPrescTable"
            },
            "code": "HAL_StatusTypeDef set_clock_config_0800209c(RCC_ClkInitTypeDef *clock_init_struct, uint32_t flash_latency)\n{\n  uint32_t clock_type = clock_init_struct->ClockType;\n  uint32_t sysclk_freq;\n  uint32_t ahbclk_divider;\n  uint32_t apb1clk_divider;\n  uint32_t apb2clk_divider;\n  uint32_t sysclk_source = clock_init_struct->SYSCLKSource;\n  uint32_t tick_start = HAL_GetTick();\n  uint32_t tick_timeout = 5000;\n  uint32_t reg_value;\n  uint32_t leading_zeroes;\n\n  if ((flash_latency <= (*DAT_08002204 & 7)) || (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | flash_latency, flash_latency == (*DAT_08002204 & 7))) {\n    if ((int)(clock_type << 0x1e) < 0) {\n      ahbclk_divider = clock_init_struct->AHBCLKDivider;\n      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, ahbclk_divider);\n    }\n    if (-1 < (int)(clock_type << 0x1f)) {\n      if ((flash_latency < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | flash_latency, flash_latency != (*DAT_08002204 & 7))) {\n        return HAL_ERROR;\n      }\n      apb1clk_divider = clock_init_struct->APB1CLKDivider;\n      apb2clk_divider = clock_init_struct->APB2CLKDivider;\n      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, apb1clk_divider);\n      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, apb2clk_divider << 3);\n      switch (sysclk_source) {\n        case RCC_SYSCLKSOURCE_PLLCLK:\n          RCC_PLLConfig(PLL_SOURCE_HSI, RCC_PLL_MUL6, RCC_PLL_DIV3);\n          RCC_PLLCmd(ENABLE);\n          while ((RCC->CR & RCC_CR_PLLRDY) == 0) {\n            if ((HAL_GetTick() - tick_start) > tick_timeout) {\n              return HAL_TIMEOUT;\n            }\n          }\n          MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_PLLCLK);\n          while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {\n            if ((HAL_GetTick() - tick_start) > tick_timeout) {\n              return HAL_TIMEOUT;\n            }\n          }\n          break;\n        case RCC_SYSCLKSOURCE_HSE:\n          MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_HSE);\n          while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE) {\n            if ((HAL_GetTick() - tick_start) > tick_timeout) {\n              return HAL_TIMEOUT;\n            }\n          }\n          break;\n        default:\n          MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_HSI);\n          while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI) {\n            if ((HAL_GetTick() - tick_start) > tick_timeout) {\n              return HAL_TIMEOUT;\n            }\n          }\n          break;\n      }\n      sysclk_freq = PTR_SystemCoreClock_08002210;\n      leading_zeroes = __builtin_clz(0xf000000);\n      sysclk_freq = sysclk_freq >> PTR_AHBPrescTable_0800220c[(RCC->CFGR & RCC_CFGR_HPRE) >> (leading_zeroes & 0xff)];\n      *(uint32_t *)PTR_PTR_SystemCoreClock_08002210_08002210 = sysclk_freq;\n      HAL_InitTick(0);\n      return HAL_OK;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_config_0800209c"
        },
        "FUN_08003f0e": {
            "renaming": {
                "FUN_08003f0e": "calculate_filtered_value_08003f0e",
                "var": "filter",
                "current": "current_value",
                "fVar3": "beta",
                "extraout_s0": "filtered_value",
                "uVar1": "one_minus_beta",
                "uVar2": "beta_times_last"
            },
            "code": "float calculate_filtered_value_08003f0e(LPF *filter, float current_value) {\n  float beta = filter->beta;\n  float one_minus_beta = 1.0f - beta;\n  float filtered_value = (one_minus_beta * current_value) + (beta * filter->last);\n  filter->last = filtered_value;\n  return filtered_value;\n}",
            "called": [
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0e",
            "calling": [
                "AHRS_GetPitch",
                "AHRS_GetRoll"
            ],
            "imported": false,
            "current_name": "calculate_filtered_value_08003f0e"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "write_i2c_register_0800403c",
                "device_add": "device_address",
                "register_add": "register_address",
                "register_val": "register_value",
                "delay_mode": "delay_enabled",
                "HVar1": "status",
                "byte": "data",
                "PTR_hi2c1_08004074": "hi2c1",
                "PTR_s____Src_i2c_c_08004078": "__FILE__"
            },
            "code": "void write_i2c_register_0800403c(uint16_t device_address, uint16_t register_address, uint8_t register_value, uint8_t delay_enabled) {\n  HAL_StatusTypeDef status;\n  uint8_t data[1];\n  data[0] = register_value;\n  status = HAL_I2C_Mem_Write(&PTR_hi2c1_08004074, device_address, register_address, 1, data, 1, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____Src_i2c_c_08004078, __LINE__);\n  }\n  if (delay_enabled) {\n    delay_ms(50);\n  }\n}\n",
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "MPU9250_Init",
                "MS5611_Update",
                "MS5611_Init",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "write_i2c_register_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "AK8963_ReadData",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_0800277c": {
            "renaming": {
                "FUN_0800277c": "transmitDataOverUART_0800277c",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "HVar3": "uartState",
                "pUVar4": "uartInstance"
            },
            "code": "HAL_StatusTypeDef transmitDataOverUART_0800277c(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size, uint32_t timeout) {\n    uint32_t startTime;\n    uint32_t currentTime;\n    HAL_UART_StateTypeDef uartState;\n    USART_TypeDef *uartInstance;\n    \n    if ((uartHandle->State == HAL_UART_STATE_READY) || (uartHandle->State == HAL_UART_STATE_BUSY_RX)) {\n        if ((data == NULL) || (size == 0)) {\n            return HAL_ERROR;\n        }\n        if (uartHandle->Lock != HAL_LOCKED) {\n            uartHandle->Lock = HAL_LOCKED;\n            uartHandle->ErrorCode = 0;\n            uartHandle->TxXferSize = size;\n            if (uartHandle->State == HAL_UART_STATE_BUSY_RX) {\n                uartState = HAL_UART_STATE_BUSY_TX_RX;\n            }\n            else {\n                uartState = HAL_UART_STATE_BUSY_TX;\n            }\n            uartHandle->TxXferCount = size;\n            uartHandle->State = uartState;\n            \n            while (uartHandle->TxXferCount > 0) {\n                uartHandle->TxXferCount--;\n                \n                if ((uartHandle->Init).WordLength == UART_WORDLENGTH_9B) {\n                    startTime = HAL_GetTick();\n                    while ((((uartHandle->Instance->SR) & UART_FLAG_TXE) == 0) && (timeout != 0xffffffff)) {\n                        currentTime = HAL_GetTick();\n                        if ((currentTime - startTime) > timeout) {\n                            uartHandle->Lock = HAL_UNLOCKED;\n                            uartHandle->State = HAL_UART_STATE_READY;\n                            return HAL_TIMEOUT;\n                        }\n                    }\n                    *((uint16_t *)&(uartHandle->Instance->DR)) = (*((uint16_t *)data) & (uint16_t)0x01FF);\n                    if ((uartHandle->Init).Parity == UART_PARITY_NONE) {\n                        data += 2;\n                    }\n                    else {\n                        data++;\n                    }\n                }\n                else {\n                    startTime = HAL_GetTick();\n                    while ((((uartHandle->Instance->SR) & UART_FLAG_TXE) == 0) && (timeout != 0xffffffff)) {\n                        currentTime = HAL_GetTick();\n                        if ((currentTime - startTime) > timeout) {\n                            uartHandle->Lock = HAL_UNLOCKED;\n                            uartHandle->State = HAL_UART_STATE_READY;\n                            return HAL_TIMEOUT;\n                        }\n                    }\n                    uartHandle->Instance->DR = (*data & (uint8_t)0xFF);\n                    data++;\n                }\n            }\n            \n            uartInstance = uartHandle->Instance;\n            uartInstance->CR1 &= ~(USART_CR1_TE);\n            uartInstance->CR1 &= ~(USART_CR1_RE);\n            uartInstance->CR1 &= ~(USART_CR1_UE);\n            uartInstance->CR3 &= ~(USART_CR3_DMAT);\n            uartHandle->State = HAL_UART_STATE_READY;\n            uartHandle->Lock = HAL_UNLOCKED;\n            return HAL_OK;\n        }\n    }\n    return HAL_BUSY;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800277c",
            "calling": [
                "serialWrite"
            ],
            "imported": false,
            "current_name": "transmitDataOverUART_0800277c"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_pid_output_0800483c",
                "*pid": "pid",
                "uVar1": "set_point_offset",
                "iVar2": "is_error_greater_than_zero",
                "uVar3": "integral_error",
                "fVar4": "proportional_gain",
                "fVar5": "integral_gain",
                "fVar6": "derivative_gain",
                "input": "input",
                "set_point_offset": "set_point_offset",
                "error": "error",
                "proportional_error": "proportional_error",
                "updated_error": "updated_error",
                "output": "output",
                "direction": "direction",
                "output_direction": "output_direction",
                "output_within_limits": "output_within_limits"
            },
            "code": "void calculate_pid_output_0800483c(PID_TypeDef *pid)\n{\n  float input = pid->input;\n  float set_point_offset = pid->set_point + pid->offset;\n  float error = set_point_offset - input;\n  pid->error = error;\n  \n  if (pid->instance == 3) \n  {\n    int is_error_greater_than_zero = error > 0;\n    int is_error_less_than_threshold = error < DAT_08004974;\n    int is_error_greater_than_threshold = error > DAT_08004964;\n    \n    if ((!is_error_greater_than_zero && is_error_less_than_threshold) || (is_error_greater_than_zero && is_error_greater_than_threshold)) \n    {\n      float proportional_error = pid->error * DAT_08004968;\n      float integral_error = pid->error / input;\n      float updated_error = error - integral_error * proportional_error;\n      pid->error = updated_error;\n    }\n  }\n  \n  float proportional_gain = pid->con_KP * pid->error;\n  float integral_gain = pid->con_KI * pid->integral;\n  float derivative_gain = pid->con_KD * (input - pid->last_input);\n  float output = proportional_gain + integral_gain - derivative_gain;\n  \n  int direction = pid->direction;\n  float output_direction = output * direction;\n  float output_within_limits = max(min(output_direction, DAT_08004970), DAT_0800496c);\n  pid->output = output_within_limits;\n  \n  pid->last_input = input;\n  pid->last_error = error;\n  pid->last_time = pid->time;\n}",
            "called": [
                "__aeabi_fmul",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fdiv",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_pid_output_0800483c"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "isEndOfString_08001064",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_08001064(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "PID_Update",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "isEndOfString_08001064"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculateResult_08000892",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "isZero"
            },
            "code": "ulonglong calculateResult_08000892(uint num1, uint num2, uint num3, uint num4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool isZero;\n  \n  temp1 = num4 >> 0x14;\n  temp2 = num2;\n  if (num1 != num3 || temp1 != num1) {\n    if (num1 == num3) {\n      isZero = ((num2 << 0xc) | num1) == 0;\n      if (isZero && temp1 != num1) {\n        return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == num1) {\n      temp3 = num3;\n      temp4 = num4;\n      isZero = ((num4 << 0xc) | num3) == 0;\n      if (isZero) {\n        return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = ((num1 << 1) | num2) == 0;\n      if (!isZero) {\n        isZero = ((num3 << 1) | num4) == 0;\n      }\n      if (!isZero) {\n        if (num3 == 0) {\n          temp4 = num2 & 0x80000000;\n          do {\n            temp5 = num1 & 0x80000000;\n            num1 = num1 << 1;\n            num2 = num2 * 2 + (uint)(temp5 != 0);\n          } while ((num2 & 0x100000) == 0);\n          num2 = num2 | temp4;\n          if (temp1 != 0) {\n            return CONCAT44(num2, num1);\n          }\n        }\n        do {\n          temp3 = num3 & 0x80000000;\n          num3 = num3 << 1;\n          num4 = num4 * 2 + (uint)(temp3 != 0);\n        } while ((num4 & 0x100000) == 0);\n        return CONCAT44(num2, num1);\n      }\n      if ((num1 | num2 << 1) != 0) {\n        return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if ((num3 | num4 << 1) != 0) {\n        return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  temp3 = num3;\n  temp4 = num4;\n  return CONCAT44(temp2, num1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculateResult_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_data_and_send_packet_08004458",
                "puVar1": "dest_ptr",
                "puVar3": "source_ptr",
                "puVar4": "temp_ptr",
                "puVar5": "loop_ptr",
                "uVar2": "temp_value1",
                "local_30": "data",
                "local_24": "data2"
            },
            "code": "void copy_data_and_send_packet_08004458(void)\n{\n    uint32_t *source_ptr;\n    uint32_t *dest_ptr;\n    uint32_t temp1;\n    uint32_t temp2;\n    uint32_t temp3;\n    uint32_t data[3];\n    uint16_t data2[10];\n    source_ptr = data;\n    dest_ptr = (uint32_t *)PTR_msp_txf_pid_0800448c;\n    do\n    {\n        temp1 = dest_ptr[0];\n        temp2 = dest_ptr[1];\n        temp3 = dest_ptr[2];\n        dest_ptr += 3;\n        *source_ptr++ = temp1;\n        *source_ptr++ = temp2;\n        *source_ptr++ = temp3;\n    } while (dest_ptr != (uint32_t *)(PTR_msp_txf_pid_0800448c + 0x18));\n    data[2] = *dest_ptr;\n    data2[0] = *(uint16_t *)(dest_ptr + 1);\n    MSP_SendFrame('p', (uint8_t *)data, 0x1e);\n}\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_data_and_send_packet_08004458"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "initialize_I2C_GPIO_pins_08004d48",
                "hi2c": "i2c_handle",
                "DAT_08004d80": "I2C1",
                "GPIO_InitStruct": "gpio_init_struct",
                "DAT_08004d84": "GPIOB",
                "tmpreg": "tmp_reg"
            },
            "code": "void initialize_I2C_GPIO_pins_08004d48(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t tmp_reg;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (i2c_handle->Instance == DAT_08004d80) {\n    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;\n    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;\n    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004d84,&GPIO_InitStruct);\n    *(uint *)(0x40010800 + 0x1c) = *(uint *)(0x40010800 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "initialize_I2C_GPIO_pins_08004d48"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "configure_timer_08002280",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "cc_enabled_reg",
                "uVar2": "cr2_reg",
                "uVar3": "oc_mode",
                "DAT_080022cc": "PTR_080022cc"
            },
            "code": "void configure_timer_08002280(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t cc_enabled_mask = 0xfffffffe;\n  uint32_t cr2_reg = timer->CR2;\n  uint oc_mode = output_config->OCMode;\n  uint32_t cc_enabled_reg = (timer->CCER & 0xfffffffd) | output_config->OCPolarity;\n  \n  if (timer == DAT_080022cc) {\n    cc_enabled_reg = (cc_enabled_reg & 0xfffffff7 | output_config->OCNPolarity) & 0xfffffffb;\n    cr2_reg = (cr2_reg & 0xfffffcff) | output_config->OCIdleState | output_config->OCNIdleState;\n  }\n  \n  timer->CR2 = cr2_reg;\n  timer->CCMR1 = (timer->CCMR1 & 0xffffff8c) | oc_mode;\n  timer->CCR1 = output_config->Pulse;\n  timer->CCER = cc_enabled_reg;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "set_interrupt_priority_08001194",
                "IRQn": "interrupt",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "interrupt_number",
                "uVar2": "priority",
                "uVar3": "group_priority_bits",
                "uVar4": "priority_shift",
                "uVar5": "sub_priority_bits"
            },
            "code": "void set_interrupt_priority_08001194(IRQn_Type interrupt, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint8_t priority_shift = (uint8_t)(*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  uint8_t group_priority_bits = 7 - priority_shift;\n  uint8_t sub_priority_bits = priority_shift + 4;\n  if (group_priority_bits > 3) {\n    group_priority_bits = 4;\n  }\n  if (sub_priority_bits < 7) {\n    priority_shift = 0;\n  }\n  group_priority_bits = (1 << (group_priority_bits & 0xff)) - 1;\n  if (sub_priority_bits > 6) {\n    priority_shift = priority_shift - 3;\n  }\n  uint8_t priority = (uint8_t)((sub_priority & (1 << (priority_shift & 0xff)) - 1U | (preempt_priority & group_priority_bits) << (priority_shift & 0xff)) << 4);\n  if ((int)interrupt >= 0) {\n    uint32_t interrupt_address = interrupt + 0xe000e100;\n    *(volatile uint8_t *)(interrupt_address + 0x300) = priority;\n  }\n  else {\n    uint8_t interrupt_index = interrupt & 0xf;\n    uint32_t interrupt_address = DAT_080011f8;\n    *(volatile uint8_t *)(interrupt_address + interrupt_index) = priority;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "HAL_InitTick",
                "HAL_UART_MspInit",
                "HAL_MspInit",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001194"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "send_msp_txf_identification_08004348",
                "puVar1": "ptr",
                "in_r1": "mask",
                "local_10": "identification",
                "local_c": "id"
            },
            "code": "void send_msp_txf_identification_08004348(void)\n{\n    uint32_t identification = 0x000403e9;\n    uint32_t mask = 0xff000000;\n    uint16_t id = 0;\n    uint8_t* ptr = PTR_msp_txf_ident_08004380;\n\n    ptr[0] = (uint8_t)(identification & 0xff);\n    ptr[1] = (uint8_t)((identification >> 8) & 0xff);\n    ptr[2] = (uint8_t)((identification >> 16) & 0xff);\n    ptr[3] = (uint8_t)((identification >> 24) & 0xff);\n    ptr[4] = (uint8_t)(id & 0xff);\n    ptr[5] = (uint8_t)((id >> 8) & 0xff);\n    ptr[6] = 0;\n    identification = (in_r1 & mask) | id;\n    MSP_SendFrame('d', (uint8_t*)&identification, 7);\n}\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_txf_identification_08004348"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "convert_to_signed_int32_08001078",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "difference",
                "uVar3": "shifted_value"
            },
            "code": "uint convert_to_signed_int32_08001078(uint input_value) {\n    uint abs_input_value = abs(input_value);\n    if (abs_input_value << 1 < 0x7f000000) {\n        return 0;\n    }\n    uint shift_amount = (abs_input_value << 1) >> 0x18;\n    uint difference = 0x9e - shift_amount;\n    if (shift_amount < 0x9f && difference != 0) {\n        uint shifted_value = (abs_input_value << 8 | 0x80000000) >> (difference & 0xff);\n        if ((input_value & 0x80000000) != 0) {\n            shifted_value = -shifted_value;\n        }\n        return shifted_value;\n    }\n    if ((difference == 0xffffff9f) && ((abs_input_value & 0x7fffff) != 0)) {\n        return 0;\n    }\n    input_value = input_value & 0x80000000;\n    if (input_value == 0) {\n        input_value = 0x7fffffff;\n    }\n    return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int32_08001078"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "initializeI2C_08001754",
                "hi2c": "i2cHandle",
                "uVar1": "pclkFreq",
                "extraout_r1": "dummy",
                "uVar2": "ccr",
                "pIVar3": "instance",
                "uVar4": "clockSpeed",
                "uVar5": "DAT_08001820",
                "uVar6": "riseTime",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_I2C_STATE_RESET": "HAL_I2C_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_I2C_MspInit": "HAL_I2C_MspInit",
                "HAL_I2C_STATE_BUSY": "HAL_I2C_STATE_BUSY",
                "HAL_OK": "HAL_OK",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "DAT_08001824": "DAT_08001824",
                "noStretchMode": "noStretchMode",
                "generalCallMode": "generalCallMode",
                "instance->CR1": "instance->CR1",
                "instance->CR2": "instance->CR2",
                "instance->TRISE": "instance->TRISE",
                "instance->CCR": "instance->CCR",
                "instance->OAR1": "instance->OAR1",
                "instance->OAR2": "instance->OAR2",
                "dummy": "dummy",
                "clockSpeed": "clockSpeed",
                "ccr": "ccr",
                "pclkFreq": "pclkFreq",
                "riseTime": "riseTime",
                "i2cHandle": "i2cHandle"
            },
            "code": "HAL_StatusTypeDef initializeI2C_08001754(I2C_HandleTypeDef *hi2c) {\n  uint32_t pclkFreq, clockSpeed, ccr, riseTime;\n  I2C_TypeDef *instance;\n  uint8_t noStretchMode, generalCallMode;\n  if (hi2c == NULL) {\n    return HAL_ERROR;\n  }\n  if (hi2c->State == HAL_I2C_STATE_RESET) {\n    hi2c->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(hi2c);\n  }\n  hi2c->State = HAL_I2C_STATE_BUSY;\n  pclkFreq = HAL_RCC_GetPCLK1Freq();\n  clockSpeed = hi2c->Init.ClockSpeed;\n  ccr = pclkFreq / (DAT_08001824 * clockSpeed);\n  if (DAT_08001820 < clockSpeed) {\n    ccr = pclkFreq / (DAT_08001824 * 300);\n  }\n  riseTime = (pclkFreq / DAT_08001824) / 1000 + 1;\n  if (DAT_08001820 < clockSpeed) {\n    if (hi2c->Init.DutyCycle == 0) {\n      ccr |= 0x8000;\n      }\n    else {\n      ccr |= 0xc000;\n    }\n    if ((ccr & 0xfff) == 0) {\n      ccr = 1;\n    }\n  }\n  else {\n    ccr = (ccr < 4) ? 4 : ccr;\n  }\n  noStretchMode = hi2c->Init.NoStretchMode;\n  generalCallMode = hi2c->Init.GeneralCallMode;\n  instance = hi2c->Instance;\n  instance->CR1 &= 0xfffffffe;\n  instance->CR2 = DAT_08001820 / DAT_08001824;\n  instance->TRISE = riseTime;\n  instance->CCR = ccr;\n  instance->OAR1 = hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1;\n  instance->OAR2 = hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2;\n  instance->CR1 |= (noStretchMode | generalCallMode | 1);\n  hi2c->ErrorCode = 0;\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initializeI2C_08001754"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "configure_uart_08002724",
                "huart": "uart",
                "pUVar1": "instance"
            },
            "code": "HAL_StatusTypeDef configure_uart_08002724(UART_HandleTypeDef *uart)\n{\n  USART_TypeDef *instance;\n  if (uart != NULL) {\n    if (uart->State == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->State = HAL_UART_STATE_BUSY;\n    instance = uart->Instance;\n    instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart);\n    instance->CR2 &= ~(1 << 11);\n    instance->CR3 &= ~(1 << 2);\n    instance->CR1 |= (1 << 13);\n    uart->ErrorCode = 0;\n    uart->State = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_08002724"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "send_motor_data_080043f0",
                "local_10": "motor_data_1",
                "uStack_c": "motor_data_2"
            },
            "code": "void send_motor_data_080043f0(void)\n{\n  uint32_t motor_data_1 = *(uint32_t *)PTR_msp_txf_motor_0800440c;\n  uint32_t motor_data_2 = *(uint32_t *)(PTR_msp_txf_motor_0800440c + 4);\n  MSP_SendFrame('h', (uint8_t *)&motor_data_1, 8);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_motor_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "convert_uint_to_64bit_08000428",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar7": "temp6",
                "iVar6": "temp7",
                "bVar8": "is_equal",
                "bVar9": "is_less",
                "bVar10": "is_borrow",
                "in_r12": "temp10"
            },
            "code": "uint64_t convert_uint_to_64bit_08000428(uint32_t num1, uint32_t num2, uint32_t num3, uint32_t num4) {\n    uint32_t temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12;\n    temp5 = num1 << 1;\n    bool is_temp5_zero = temp5 == 0;\n    temp1 = (uint32_t)((num1 & 0x80000000) != 0) << 0x1f;\n    temp4 = (uint32_t)((int)temp5 >> 3) >> 1;\n    temp3 = temp1 | temp4;\n    num1 = num1 << 0x1d;\n    if (!is_temp5_zero) {\n        temp8 = temp5 & 0xff000000;\n        is_temp5_zero = temp8 == 0;\n    }\n    if (!is_temp5_zero) {\n        is_temp5_zero = temp8 == 0xff000000;\n    }\n    if (!is_temp5_zero) {\n        return ((uint64_t)temp3 << 32) | num1 ^ 0x3800000000000000;\n    }\n    if (temp5 == 0 || temp8 == 0xff000000) {\n        return ((uint64_t)temp3 << 32) | num1;\n    }\n    temp2 = num1;\n    temp5 = temp4;\n    if (temp4 == 0) {\n        temp2 = 0;\n        temp5 = num1;\n    }\n    temp6 = clz(temp5);\n    if (temp4 == 0) {\n        temp6 = temp6 + 0x20;\n    }\n    temp9 = temp6 - 0xb;\n    bool is_borrow = temp9 > 0x20;\n    temp4 = temp6 - 0x2b;\n    bool is_less = (int)temp4 < 0;\n    bool is_equal = temp4 == 0;\n    if (temp9 < 0x20) {\n        is_borrow = temp4 + 0xc > 0;\n        temp6 = temp6 + -0x1f;\n        is_less = temp6 < 0;\n        is_equal = temp6 == 0;\n        temp4 = temp9;\n        if (!is_equal && is_less == is_borrow) {\n            temp2 = temp5 << (temp9 & 0xff);\n            temp5 = temp5 >> (0xcU - temp6 & 0xff);\n            goto LAB_080002f0;\n        }\n    }\n    if (is_equal || is_less != is_borrow) {\n        temp10 = 0x20 - temp4;\n    }\n    temp5 = temp5 << (temp4 & 0xff);\n    if (is_equal || is_less != is_borrow) {\n        temp5 = temp5 | temp2 >> (temp10 & 0xff);\n    }\n    if (is_equal || is_less != is_borrow) {\n        temp2 = temp2 << (temp4 & 0xff);\n    }\nLAB_080002f0:\n    if (temp9 < 0x381) {\n        return ((uint64_t)temp5 + (0x380 - temp9) * 0x100000 | temp1) << 32 | temp2;\n    }\n    temp4 = ~(0x380 - temp9);\n    if ((int)temp4 < 0x1f) {\n        temp6 = temp4 - 0x13;\n        if (temp6 != 0 && temp6 < 0 == ((int)temp4 - 0x1f < 0)) {\n            return ((uint64_t)temp3 << 32) | temp2 >> (0x20 - (0xcU - temp6) & 0xff) | temp5 << (0xcU - temp6 & 0xff);\n        }\n        temp4 = temp4 + 1;\n        return ((uint64_t)temp1 | temp5 >> (temp4 & 0xff)) << 32 | temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff);\n    }\n    return ((uint64_t)temp3 << 32) | temp5 >> (temp4 - 0x1f & 0xff);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "convert_uint_to_64bit_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "enable_interrupts_08004ccc",
                "tmpreg": "register_value"
            },
            "code": "void enable_interrupts_08004ccc(void)\n{\n  uint32_t register_value;\n  register_value = *(uint *)(DAT_08004d44 + 0x18);\n  *(uint *)(DAT_08004d44 + 0x18) = register_value | 1;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  HAL_NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  HAL_NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));\n  return;\n}\n",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "enable_interrupts_08004ccc"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "receive_uart_data_08004c30",
                "huart": "uart_handle",
                "pData": "rx_buffer",
                "PTR_rx_buffer_08004c58": "rx_buffer_start",
                "DAT_08004c54": "uart_instance",
                "PTR_rxc_08004c5c": "circular_buffer_rx",
                "PTR_huart1_08004c60": "huart_instance"
            },
            "code": "void receive_uart_data_08004c30(UART_HandleTypeDef *huart)\n{\n  undefined *rx_buffer;\n  rx_buffer = PTR_rx_buffer_08004c58;\n  if (huart->Instance == DAT_08004c54)\n  {\n    write_to_circular_buffer((CircularBuffer *)PTR_rxc_08004c5c, *rx_buffer);\n    HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_huart1_08004c60, rx_buffer, 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "CB_Write",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_bitwise_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "MS5611_Update",
                "scalbn",
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "calculate_distance_0800729c",
                "__x": "x1",
                "__y": "y1",
                "in_d0": "distance"
            },
            "code": "double calculate_distance_0800729c(double x1, double y1) {\n    double distance;\n    // Calculate distance using Pythagorean theorem\n    distance = sqrt(pow(x1, 2) + pow(y1, 2));\n    return distance;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "scalbn"
            ],
            "imported": false,
            "current_name": "calculate_distance_0800729c"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "runForkServerAndTaskScheduler_080041ae",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int runForkServerAndTaskScheduler_080041ae(void)\n{\n  startForkserver(0);\n  setup();\n  do {\n    HAL_IncTick();\n    taskScheduler();\n  } while( true );\n}",
            "called": [
                "HAL_IncTick",
                "setup",
                "taskScheduler",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runForkServerAndTaskScheduler_080041ae"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08005424;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08005498;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar6 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_0800557a:\n    *puVar3 = uVar7;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "stop_all_motors_080041c4",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void stop_all_motors_080041c4(void)\n{\n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0);\n  return;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "stop_all_motors_080041c4"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "allocate_memory_block_and_add_to_free_list_0800567c",
                "param_1": "error_code",
                "param_2": "block_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "free_list_pointer",
                "extraout_r1": "previous_block_pointer",
                "ppiVar2": "previous_block_pointer",
                "ppiVar3": "current_block_pointer",
                "piVar4": "block_size_pointer",
                "ppiVar5": "free_list_head",
                "ppiVar6": "current_block_pointer",
                "ppiVar7": "current_block_pointer"
            },
            "code": "void allocate_memory_block_and_add_to_free_list_0800567c(int* error_code, int block_size, undefined4 param_3, undefined4 param_4)\n{\n  int **current_block_pointer;\n  int **previous_block_pointer;\n  int **free_list_head;\n\n  if (block_size == 0) {\n    return;\n  }\n  current_block_pointer = (int **)(block_size - 4);\n  if (*(int *)(block_size - 4) < 0) {\n    current_block_pointer = (int **)((int)current_block_pointer + *(int *)(block_size - 4));\n  }\n  __malloc_lock();\n  free_list_head = *(int ***)PTR___malloc_free_list_08005710;\n  if (free_list_head == (int **)0x0) {\n    current_block_pointer[1] = (int *)0x0;\n    *(int ***)PTR___malloc_free_list_08005710 = current_block_pointer;\n    previous_block_pointer = error_code;\n    current_block_pointer = (int **)PTR___malloc_free_list_08005710;\n  }\n  else if (current_block_pointer < free_list_head) {\n    previous_block_pointer = (int **)*current_block_pointer;\n    current_block_pointer = (int **)((int)current_block_pointer + (int)previous_block_pointer);\n    if (free_list_head == current_block_pointer) {\n      int *block_size_pointer = *free_list_head;\n      free_list_head = (int **)free_list_head[1];\n      current_block_pointer = (int **)((int)block_size_pointer + (int)previous_block_pointer);\n      *current_block_pointer = (int *)current_block_pointer;\n    }\n    current_block_pointer[1] = (int *)free_list_head;\n    *(int ***)PTR___malloc_free_list_08005710 = current_block_pointer;\n  }\n  else {\n    do {\n      previous_block_pointer = free_list_head;\n      current_block_pointer = (int **)previous_block_pointer[1];\n      if (current_block_pointer == (int **)0x0) break;\n      free_list_head = current_block_pointer;\n    } while (current_block_pointer <= current_block_pointer);\n    int **block_pointer = (int **)*previous_block_pointer;\n    if ((int **)((int)previous_block_pointer + (int)block_pointer) == current_block_pointer) {\n      int **next_block_pointer = (int **)((int)block_pointer + (int)*current_block_pointer);\n      *previous_block_pointer = (int *)next_block_pointer;\n      if (current_block_pointer[1] == (int **)((int)previous_block_pointer + (int)next_block_pointer)) {\n        int *block_size_pointer = *current_block_pointer[1];\n        current_block_pointer[1] = (int **)block_size_pointer[1];\n        next_block_pointer = (int **)((int)next_block_pointer + (int)*block_size_pointer);\n        *previous_block_pointer = (int *)next_block_pointer;\n        previous_block_pointer[1] = (int *)current_block_pointer[1];\n      }\n    }\n    else if (current_block_pointer < (int **)((int)previous_block_pointer + (int)block_pointer)) {\n      *error_code = 0xc;\n    }\n    else {\n      int **next_block_pointer = (int **)((int)current_block_pointer + (int)*current_block_pointer);\n      if (current_block_pointer[1] == next_block_pointer) {\n        int *block_size_pointer = *current_block_pointer[1];\n        current_block_pointer[1] = (int **)block_size_pointer[1];\n        next_block_pointer = (int **)((int)block_size_pointer + (int)*current_block_pointer);\n        *current_block_pointer = (int *)next_block_pointer;\n      }\n      current_block_pointer[1] = (int *)next_block_pointer;\n      previous_block_pointer[1] = (int *)current_block_pointer;\n    }\n  }\n  __malloc_unlock(error_code, previous_block_pointer, current_block_pointer, param_4);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_and_add_to_free_list_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  GPIO_TypeDef *GPIOx;\n  undefined4 uVar1;\n  undefined *huart;\n  HAL_StatusTypeDef HVar2;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  TIM_MasterConfigTypeDef sMasterConfig;\n  TIM_OC_InitTypeDef sConfigOC;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  undefined *puVar3;\n  \n  HAL_Init();\n  SystemClock_Config();\n  GPIOx = DAT_08004800;\n  iVar5 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  uVar6 = 2;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 8;\n  HAL_GPIO_WritePin(GPIOx,0xe000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004808,0x20,GPIO_PIN_RESET);\n  GPIO_InitStruct.Pin = 0xe000;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004800,&GPIO_InitStruct);\n  GPIO_InitStruct.Pin = 0x20;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004808,&GPIO_InitStruct);\n  puVar3 = PTR_hi2c1_0800480c;\n  *(undefined4 *)PTR_hi2c1_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar3 + 4) = uVar1;\n  *(undefined4 *)(puVar3 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar3 + 8) = 0;\n  *(undefined4 *)(puVar3 + 0xc) = 0;\n  *(undefined4 *)(puVar3 + 0x14) = 0;\n  *(undefined4 *)(puVar3 + 0x18) = 0;\n  *(undefined4 *)(puVar3 + 0x1c) = 0;\n  *(undefined4 *)(puVar3 + 0x20) = 0;\n  HVar2 = HAL_I2C_Init((I2C_HandleTypeDef *)puVar3);\n  puVar3 = (undefined *)(uint)HVar2;\n  if (puVar3 == (undefined *)0x0) goto LAB_0800463a;\n  iVar5 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  puVar3 = PTR_s____Src_peripherals_c_08004814;\n                                  _Error_Handler(PTR_s____Src_peripherals_c_08004814,iVar5);\nLAB_0800463a:\n                                  uVar1 = DAT_0800481c;\n                                  huart = PTR_huart1_08004818;\n                                  *(undefined **)(PTR_huart1_08004818 + 8) = puVar3;\n                                  *(undefined **)(huart + 0xc) = puVar3;\n                                  *(undefined **)(huart + 0x10) = puVar3;\n                                  *(undefined **)(huart + 0x18) = puVar3;\n                                  *(undefined **)(huart + 0x1c) = puVar3;\n                                  *(undefined4 *)huart = uVar1;\n                                  *(undefined4 *)(huart + 4) = 0x1c200;\n                                  *(undefined4 *)(huart + 0x14) = 0xc;\n                                  HVar2 = HAL_UART_Init((UART_HandleTypeDef *)huart);\n                                  uVar1 = DAT_08004824;\n                                  puVar3 = PTR_htim1_08004820;\n                                  if (HVar2 == HAL_OK) break;\n                                  iVar5 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_htim1_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar3 + 0x10) = 0;\n                                *(undefined4 *)(puVar3 + 0x14) = 0;\n                                *(undefined4 *)puVar3 = uVar1;\n                                *(uint *)(puVar3 + 4) = uVar6;\n                                *(undefined4 *)(puVar3 + 0xc) = 1000;\n                                HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                                uVar4 = (uint)HVar2;\n                                if (uVar4 == 0) break;\n                                iVar5 = 0x88;\n                              }\n                              sMasterConfig.MasterOutputTrigger = uVar4;\n                              sMasterConfig.MasterSlaveMode = uVar4;\n                              HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                                ((TIM_HandleTypeDef *)puVar3,&sMasterConfig);\n                              uVar4 = (uint)HVar2;\n                              if (uVar4 == 0) break;\n                              iVar5 = 0x8f;\n                            }\n                            sConfigOC.OCMode = 0x60;\n                            sConfigOC.Pulse = uVar4;\n                            sConfigOC.OCPolarity = uVar4;\n                            sConfigOC.OCFastMode = uVar4;\n                            sConfigOC.OCIdleState = uVar4;\n                            sConfigOC.OCNIdleState = uVar4;\n                            HVar2 = HAL_TIM_PWM_ConfigChannel\n                                              ((TIM_HandleTypeDef *)puVar3,&sConfigOC,0xc);\n                            uVar4 = (uint)HVar2;\n                            if (uVar4 == 0) break;\n                            iVar5 = 0x9a;\n                          }\n                          GPIO_InitStruct.Pin = uVar4;\n                          GPIO_InitStruct.Mode = uVar4;\n                          GPIO_InitStruct.Pull = uVar4;\n                          GPIO_InitStruct.Speed = uVar4;\n                          HVar2 = HAL_TIMEx_ConfigBreakDeadTime\n                                            ((TIM_HandleTypeDef *)puVar3,\n                                             (TIM_BreakDeadTimeConfigTypeDef *)&GPIO_InitStruct);\n                          if (HVar2 == HAL_OK) break;\n                          iVar5 = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                        puVar3 = PTR_htim2_08004828;\n                        *(undefined4 *)PTR_htim2_08004828 = 0x40000000;\n                        *(uint *)(puVar3 + 4) = uVar6;\n                        *(undefined4 *)(puVar3 + 8) = 0;\n                        *(undefined4 *)(puVar3 + 0xc) = 1000;\n                        *(undefined4 *)(puVar3 + 0x10) = 0;\n                        HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                        uVar4 = (uint)HVar2;\n                        if (uVar4 == 0) break;\n                        iVar5 = 0xc3;\n                      }\n                      sConfigOC.OCMode = uVar4;\n                      sConfigOC.Pulse = uVar4;\n                      HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                        ((TIM_HandleTypeDef *)puVar3,\n                                         (TIM_MasterConfigTypeDef *)&sConfigOC);\n                      uVar4 = (uint)HVar2;\n                      if (uVar4 == 0) break;\n                      iVar5 = 0xca;\n                    }\n                    GPIO_InitStruct.Pin = 0x60;\n                    GPIO_InitStruct.Mode = uVar4;\n                    GPIO_InitStruct.Pull = uVar4;\n                    HVar2 = HAL_TIM_PWM_ConfigChannel\n                                      ((TIM_HandleTypeDef *)puVar3,\n                                       (TIM_OC_InitTypeDef *)&GPIO_InitStruct,4);\n                    if (HVar2 == HAL_OK) break;\n                    iVar5 = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                  uVar1 = DAT_08004830;\n                  puVar3 = PTR_htim3_0800482c;\n                  *(undefined4 *)(PTR_htim3_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar3 = uVar1;\n                  *(uint *)(puVar3 + 4) = uVar6;\n                  *(undefined4 *)(puVar3 + 8) = 0;\n                  *(undefined4 *)(puVar3 + 0x10) = 0;\n                  HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                  if (HVar2 == HAL_OK) break;\n                  iVar5 = 0xf0;\n                }\n                sConfigOC.OCMode = 0;\n                sConfigOC.Pulse = 0;\n                HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                  ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                   (TIM_MasterConfigTypeDef *)&sConfigOC);\n                uVar4 = (uint)HVar2;\n                if (uVar4 == 0) break;\n                iVar5 = 0xf7;\n              }\n              GPIO_InitStruct.Pin = 0x60;\n              GPIO_InitStruct.Mode = uVar4;\n              GPIO_InitStruct.Pull = uVar4;\n              HVar2 = HAL_TIM_PWM_ConfigChannel\n                                ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                 (TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n              if (HVar2 == HAL_OK) break;\n              iVar5 = 0x100;\n            }\n            HVar2 = HAL_TIM_PWM_ConfigChannel\n                              ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                               (TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n            uVar6 = (uint)HVar2;\n            if (uVar6 == 0) break;\n            iVar5 = 0x105;\n          }\n          HAL_TIM_MspPostInit((TIM_HandleTypeDef *)PTR_htim3_0800482c);\n          puVar3 = PTR_htim4_08004834;\n          *(undefined4 *)PTR_htim4_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar3 + 4) = 2;\n          *(undefined4 *)(puVar3 + 8) = 0;\n          *(undefined4 *)(puVar3 + 0xc) = 1000;\n          *(undefined4 *)(puVar3 + 0x10) = 0;\n          HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n          uVar4 = (uint)HVar2;\n          if (uVar4 == 0) break;\n          iVar5 = 0x122;\n        }\n        sConfigOC.OCMode = uVar4;\n        sConfigOC.Pulse = uVar4;\n        HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                          ((TIM_HandleTypeDef *)puVar3,(TIM_MasterConfigTypeDef *)&sConfigOC);\n        uVar4 = (uint)HVar2;\n        if (uVar4 == 0) break;\n        iVar5 = 0x129;\n      }\n      GPIO_InitStruct.Pin = 0x60;\n      GPIO_InitStruct.Mode = uVar4;\n      GPIO_InitStruct.Pull = uVar4;\n      HVar2 = HAL_TIM_PWM_ConfigChannel\n                        ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n      if (HVar2 == HAL_OK) break;\n      iVar5 = 0x132;\n    }\n    HVar2 = HAL_TIM_PWM_ConfigChannel\n                      ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n    if (HVar2 == HAL_OK) break;\n    iVar5 = 0x137;\n  }\n  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n  return;\n}\n\n",
            "called": [
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_I2C_Init",
                "_Error_Handler",
                "HAL_GPIO_Init",
                "HAL_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "SystemClock_Config",
                "HAL_UART_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "compare_values_08000ffc",
                "param_1": "value1",
                "param_2": "value2",
                "__aeabi_cfcmpeq": "N/A"
            },
            "code": "void compare_values_08000ffc(int value1, int value2)\n{\n  if(value1 == value2)\n  {\n    // do something if values are equal\n  }\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compare_values_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "i2c_communication_080016f4",
                "*hi2c": "*i2c_handle",
                "hi2c": "i2c_handle",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "*pIVar3": "*i2c_instance",
                "pIVar3": "i2c_instance",
                "SR1": "status_register_1",
                "ErrorCode": "error_code",
                "State": "state",
                "Lock": "lock"
            },
            "code": "HAL_StatusTypeDef i2c_communication_080016f4(I2C_HandleTypeDef *i2c_handle, uint32_t timeout)\n{\n  uint32_t start_time = HAL_GetTick();\n  while(1) {\n    I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n    if ((i2c_instance->SR1 & 0x40) != 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x1b) < 0) break;\n    if ((timeout == 0) || (HAL_GetTick() - start_time > timeout)) {\n      i2c_handle->ErrorCode |= 0x20;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_instance->SR1 &= 0xffffffef;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "i2c_communication_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "configureTimer_080025a4",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "uVar1": "master_slave_mode",
                "HVar2": "status",
                "pTVar3": "timer_instance",
                "uVar4": "master_output_trigger"
            },
            "code": "HAL_StatusTypeDef configureTimer_080025a4(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  uint32_t master_output_trigger;\n  uint32_t master_slave_mode;\n  TIM_TypeDef *timer_instance;\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    timer_instance = timer_handle->Instance;\n    master_output_trigger = master_config->MasterOutputTrigger;\n    master_slave_mode = master_config->MasterSlaveMode;\n    timer_instance->CR2 = timer_instance->CR2 & 0xffffff8f;\n    timer_instance->CR2 = timer_instance->CR2 | master_output_trigger;\n    timer_instance->SMCR = timer_instance->SMCR & 0xffffff7f;\n    timer_instance->SMCR = timer_instance->SMCR | master_slave_mode;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timer_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_080025a4"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "read_MS5611_data_08003034",
                "in_r3": "unused_parameter",
                "rxbuf": "rx_buffer",
                "_rxbuf": "unused_variable",
                "PTR_s____Src_MS5611_c_08003064": "unused_variable",
                "DAT_08003060": "unused_variable",
                "DAT_0800305c": "unused_variable"
            },
            "code": "uint32_t read_MS5611_data_08003034(void)\n{\n    uint8_t rx_buffer[3];\n    uint8_t i2c_address = 0xee;\n    uint8_t register_address = 0x00;\n    uint8_t num_bytes = 3;\n    uint8_t i2c_timeout = 0x8c;\n    I2C_ReadBytes(i2c_address, register_address, rx_buffer, num_bytes, PTR_s____Src_MS5611_c_08003064, i2c_timeout);\n    uint32_t data = (uint32_t)CONCAT12(rx_buffer[0], CONCAT11(rx_buffer[1], rx_buffer[2]));\n    return data;\n}",
            "called": [
                "I2C_ReadBytes"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "read_MS5611_data_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "initialize_uart_08004e7c",
                "huart": "uart_handle",
                "tmpreg": "cr3_value",
                "GPIO_InitStruct": "gpio_init",
                "Instance": "USART1",
                "DAT_08004edc": "DAT_08004edc",
                "CR3": "CR3",
                "DAT_08004ee0": "DAT_08004ee0",
                "Pin": "Pin",
                "Mode": "Mode",
                "Speed": "Speed",
                "HAL_GPIO_Init": "HAL_GPIO_Init",
                "Pull": "Pull",
                "USART1_IRQn": "USART1_IRQn",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ": "HAL_NVIC_EnableIRQ"
            },
            "code": "void initialize_uart_08004e7c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t cr3_value;\n  GPIO_InitTypeDef gpio_init;\n  if (uart_handle->Instance == USART1) {\n    cr3_value = DAT_08004edc[0x7b7].CR3 | 0x4000;\n    DAT_08004edc[0x7b7].CR3 = cr3_value;\n    gpio_init.Pin = GPIO_PIN_9;\n    gpio_init.Mode = GPIO_MODE_AF_PP;\n    gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init);\n    gpio_init.Pin = GPIO_PIN_10;\n    gpio_init.Mode = GPIO_MODE_INPUT;\n    gpio_init.Pull = GPIO_NOPULL;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init);\n    HAL_NVIC_SetPriority(USART1_IRQn,0,0);\n    HAL_NVIC_EnableIRQ(USART1_IRQn);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "i2c_write_08001530",
                "*hi2c": "*handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_add_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pIVar4": "instance"
            },
            "code": "HAL_StatusTypeDef i2c_write_08001530(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_add_size, uint32_t timeout) {\n  HAL_StatusTypeDef status;\n  uint32_t start_time = HAL_GetTick();\n  I2C_TypeDef *instance = handle->Instance;\n  instance->CR1 |= 0x100;\n  do {\n    if ((int)(instance->SR1 << 0x1f) < 0) {\n      instance->DR = dev_address & 0xfe;\n      status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080015e4, timeout);\n      if (status == HAL_OK) {\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status == HAL_OK) {\n          if (mem_add_size == 1) {\n            instance->DR = (uint)(byte)mem_address;\n            return status;\n          }\n          instance->DR = (uint)(mem_address >> 8);\n          status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n          if (status == HAL_OK) {\n            goto LAB_080015ca;\n          }\n        }\n        if (handle->ErrorCode != 4) {\n          return HAL_TIMEOUT;\n        }\n        instance->CR1 |= 0x200;\n      }\n      else if (handle->ErrorCode != 4) {\n        return HAL_TIMEOUT;\n      }\n      return HAL_ERROR;\n    }\n    if ((timeout != 0xffffffff) && (timeout != 0) && (HAL_GetTick() - start_time >= timeout)) {\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  } while (true);\n}\n",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_write_08001530"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "processSensorsData_0800411c",
                "PTR_last_tick1_08004188": "lastAHRSComputeMillis",
                "PTR_last_tick3_0800418c": "lastPIDUpdateMillis",
                "PTR_last_tick2_08004190": "lastMSPSendMillis",
                "millis": "currentMillis",
                "AHRS_ComputeAngles": "computeAHRS",
                "PID_Update": "updatePID",
                "MSP_SendIdent": "sendMSPIdent",
                "MSP_SendStatus": "sendMSPStatus",
                "MSP_SendMotor": "sendMSPMotor",
                "MSP_SendAttitude": "sendMSPAttitude",
                "MSP_SendAltitude": "sendMSPAltitude",
                "MSP_SendRawIMU": "sendMSPRawIMU",
                "MSP_SendPID": "sendMSPPID",
                "MS5611_Update": "updateMS5611"
            },
            "code": "void processSensorsData_0800411c(void)\n{\n    uint32_t currentMillis = millis();\n    if (currentMillis - PTR_last_tick1_08004188 > AHRS_COMPUTE_INTERVAL_MS)\n    {\n        PTR_last_tick1_08004188 = currentMillis;\n        AHRS_ComputeAngles();\n    }\n    if (currentMillis - PTR_last_tick3_0800418c > PID_UPDATE_INTERVAL_MS)\n    {\n        PTR_last_tick3_0800418c = currentMillis;\n        PID_Update();\n    }\n    if (currentMillis - PTR_last_tick2_08004190 > MSP_SEND_INTERVAL_MS)\n    {\n        PTR_last_tick2_08004190 = currentMillis;\n        MSP_SendIdent();\n        MSP_SendStatus();\n        MSP_SendMotor();\n        MSP_SendAttitude();\n        MSP_SendAltitude();\n        MSP_SendRawIMU();\n        MSP_SendPID();\n    }\n    MS5611_Update();\n}",
            "called": [
                "MS5611_Update",
                "MSP_SendPID",
                "MSP_SendStatus",
                "AHRS_ComputeAngles",
                "MSP_SendAltitude",
                "millis",
                "PID_Update",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "processSensorsData_0800411c"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "read_I2C_device_memory_080040b8",
                "device_add": "device_address",
                "register_add": "register_address",
                "bytes": "data",
                "size": "size",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "i2c_status"
            },
            "code": "void read_I2C_device_memory_080040b8(uint16_t device_address, uint16_t register_address, uint8_t *data, uint16_t size, char *file_name, int line_number)\n{\n  HAL_StatusTypeDef i2c_status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040e4, device_address, register_address, 1, data, size, 200);\n  if (i2c_status != HAL_OK) {\n    _Error_Handler(file_name, line_number);\n    return;\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "MS5611_ReadADC"
            ],
            "imported": false,
            "current_name": "read_I2C_device_memory_080040b8"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "printError_08004490",
                "file": "filename",
                "line": "lineNumber",
                "GPIOx": "gpio",
                "data": "errorMessage",
                "data_00": "lineIndicator"
            },
            "code": "void printError_08004490(char *filename, int lineNumber)\n{\n  GPIO_TypeDef *gpio;\n  char *errorMessage;\n  char *lineIndicator;\n  \n  HAL_GPIO_WritePin(gpio, GPIO_PIN_14, GPIO_PIN_SET);\n  HAL_GPIO_WritePin(gpio, GPIO_PIN_15, GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(gpio, GPIO_PIN_13, GPIO_PIN_RESET);\n  \n  errorMessage = PTR_s_Error_with_08004510;\n  lineIndicator = PTR_s__at_line__0800450c;\n  gpio = DAT_08004508;\n  \n  do {\n    HAL_GPIO_TogglePin(gpio, GPIO_PIN_14);\n    HAL_GPIO_TogglePin(gpio, GPIO_PIN_15);\n    HAL_GPIO_TogglePin(gpio, GPIO_PIN_13);\n    serialPrint(errorMessage);\n    serialPrint(filename);\n    serialPrint(lineIndicator);\n    serialInt(lineNumber);\n    serialWrite('\n');\n    delay_ms(500);\n  } while( true );\n}",
            "called": [
                "serialInt",
                "HAL_GPIO_TogglePin",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "I2C_WriteByte",
                "I2C_ReadByte",
                "Peripherals_Init",
                "I2C_ReadBytes",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "printError_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "I2C_read_080015e8",
                "hi2c": "handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pIVar4": "instance"
            },
            "code": "HAL_StatusTypeDef I2C_read_080015e8(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time = HAL_GetTick();\n    I2C_TypeDef *instance = handle->Instance;\n    instance->CR1 |= 0x400;\n    instance->CR1 |= 0x100;\n\n    while (-1 < (int)(handle->Instance->SR1 << 0x1f)) {\n        if (timeout != 0xffffffff) {\n            if (timeout == 0 || HAL_GetTick() - start_time > timeout) {\n                return HAL_TIMEOUT;\n            }\n        }\n    }\n\n    instance->DR = (byte)dev_address & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n    if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n    }\n\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n    }\n\n    if (mem_address_size != 1) {\n        instance->DR = (uint)(mem_address >> 8);\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n        }\n    }\n\n    instance->DR = (uint)(byte)mem_address;\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n    }\n\n    instance->CR1 |= 0x100;\n    start_time = HAL_GetTick();\n\n    while (true) {\n        if (timeout != 0xffffffff) {\n            if (timeout == 0 || HAL_GetTick() - start_time > timeout) {\n                return HAL_TIMEOUT;\n            }\n        }\n\n        if ((int)(handle->Instance->SR1 << 0x1f) < 0) {\n            instance->DR = (byte)dev_address | 1;\n            status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n            if (status == HAL_OK) {\n                return HAL_OK;\n            }\n\n            if (handle->ErrorCode != 4) {\n                return HAL_TIMEOUT;\n            }\n\n            return HAL_ERROR;\n        }\n    }\n}\n",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "I2C_read_080015e8"
        }
    },
    "used_tokens": 169454,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08003ef2",
            "FUN_08001264",
            "FUN_080058fc",
            "FUN_080070b0",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_0800125a",
            "FUN_08001828",
            "FUN_0800290c",
            "FUN_080028a6",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08000980",
            "FUN_08002368",
            "FUN_08002008",
            "FUN_080008fc",
            "FUN_0800114c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003f7c",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08004ee6",
            "FUN_08004434",
            "FUN_08004ee8",
            "FUN_08004ffc",
            "FUN_0800103c",
            "FUN_0800115c",
            "FUN_08004f60",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_08004ef4",
            "FUN_080043bc",
            "FUN_08004f5c",
            "FUN_08000404",
            "FUN_08004eec",
            "FUN_08004eea",
            "FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08003fd0",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08002ee8",
            "FUN_08001104",
            "FUN_08004978",
            "FUN_08000c60",
            "FUN_08004f04",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08003eac",
            "FUN_080072ac",
            "FUN_08002cb0",
            "FUN_08002324",
            "FUN_08002564",
            "FUN_08004fb0",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080009dc",
            "FUN_08000c70",
            "FUN_080023d0",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08003ff4",
            "FUN_08001004",
            "FUN_08004514",
            "FUN_080057d0",
            "FUN_080072d4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_0800245c",
            "FUN_080008f4",
            "FUN_08004e14",
            "FUN_08002ea0",
            "FUN_08001424",
            "FUN_08004c64",
            "FUN_080041e4",
            "FUN_080003e4",
            "FUN_08007092",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004028",
            "FUN_0800708c",
            "FUN_08002520",
            "FUN_08000464",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_080052e4",
            "FUN_08000f94",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_080009b4",
            "FUN_08003068",
            "FUN_08000f8c",
            "FUN_08000474",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_080009c8",
            "FUN_08000f9c",
            "FUN_08002ed4",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_0800209c",
            "FUN_08003f0e",
            "FUN_0800403c",
            "FUN_0800277c",
            "FUN_0800483c",
            "FUN_08001064",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08004d48",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08004348",
            "FUN_08001078",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08004c30",
            "FUN_0800729c",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800567c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_0800411c",
            "FUN_080040b8",
            "FUN_08004490",
            "FUN_080015e8"
        ],
        [
            "FUN_08001128",
            "FUN_08004a84",
            "FUN_08005854",
            "FUN_08005bc8"
        ]
    ],
    "locked_functions": []
}