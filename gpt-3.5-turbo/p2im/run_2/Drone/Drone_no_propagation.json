{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateIntegers_08000134(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_char = current_position + 1;\n    current_char = *current_position;\n    current_position = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_unsigned_division_08000168",
            "code": "\nulonglong calculateUnsignedDivision_08000168(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int shift32;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift16;\n  uint dividendShifted;\n  uint divisorShifted;\n  uint difference;\n  uint carryFlag;\n  bool isDivisorZero;\n  bool isSpecialCase;\n  bool carryFlag2;\n  \n  temp4 = remainder ^ 0x80000000;\n  dividendShifted = divisor << 1;\n  remainder = remainder << 1;\n  isDivisorZero = ((divisor ^ temp4) & 0x7fffffff) == 0;\n  isSpecialCase = isDivisorZero && dividend == quotient;\n  if (!isDivisorZero || dividend != quotient) {\n    isSpecialCase = (dividendShifted | dividend) == 0;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = (remainder | quotient) == 0;\n  }\n  shift16 = (int)dividendShifted >> 0x15;\n  if (!isSpecialCase) {\n    isSpecialCase = shift16 == -1;\n  }\n  shift32 = (int)remainder >> 0x15;\n  if (!isSpecialCase) {\n    isSpecialCase = shift32 == -1;\n  }\n  if (isSpecialCase) {\n    if (shift16 == -1 || shift32 == -1) {\n      dividendShifted = temp4;\n      difference = quotient;\n      if (shift16 == -1) {\n        dividendShifted = divisor;\n        difference = dividend;\n      }\n      if (shift16 != -1 || shift32 != -1) {\n        quotient = difference;\n        temp4 = dividendShifted;\n      }\n      isSpecialCase = (difference | dividendShifted << 0xc) == 0;\n      if (isSpecialCase) {\n        isSpecialCase = (quotient | temp4 << 0xc) == 0;\n      }\n      if (isSpecialCase) {\n        isSpecialCase = dividendShifted == temp4;\n      }\n      if (!isSpecialCase) {\n        dividendShifted = dividendShifted | 0x80000;\n      }\n      return CONCAT44(dividendShifted,difference);\n    }\n    if (((divisor ^ temp4) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((dividendShifted | dividend) == 0) {\n        dividend = quotient;\n        divisor = temp4;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != temp4) {\n      return 0;\n    }\n    if (dividendShifted >> 0x15 == 0) {\n      isSpecialCase = (dividend & 0x80000000) != 0;\n      temp4 = divisor * 2 + (uint)isSpecialCase;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)isSpecialCase)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,dividend << 1);\n    }\n    if (dividendShifted < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  dividendShifted = dividendShifted >> 0x15;\n  remainder = remainder >> 0x15;\n  difference = remainder - dividendShifted;\n  isSpecialCase = difference != 0;\n  if (remainder < dividendShifted) {\n    difference = -difference;\n  }\n  divisorShifted = dividend;\n  temp5 = divisor;\n  if (isSpecialCase && dividendShifted <= remainder) {\n    dividendShifted = dividendShifted + difference;\n    divisorShifted = quotient;\n    temp5 = temp4;\n    quotient = dividend;\n    temp4 = divisor;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp5,divisorShifted);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    isSpecialCase = divisorShifted != 0;\n    divisorShifted = -divisorShifted;\n    temp2 = -temp2 - (uint)isSpecialCase;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    isSpecialCase = quotient != 0;\n    quotient = -quotient;\n    temp5 = -temp5 - (uint)isSpecialCase;\n  }\n  if (dividendShifted == difference) {\n    temp5 = temp5 ^ 0x100000;\n    if (dividendShifted == 0) {\n      temp2 = temp2 ^ 0x100000;\n      dividendShifted = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp4 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    carryFlag = quotient << (temp4 & 0xff);\n    quotient = quotient >> (difference & 0xff);\n    temp1 = divisorShifted + quotient;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(divisorShifted,quotient) + ((int)temp5 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    carryFlag = temp5 << (-difference + 0x40 & 0xff);\n    if (quotient != 0) {\n      carryFlag = carryFlag | 2;\n    }\n    temp5 = (int)temp5 >> (difference - 0x20 & 0xff);\n    temp4 = divisorShifted + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(divisorShifted,temp5);\n  }\n  divisor = temp2 & 0x80000000;\n  difference = temp2;\n  if ((int)temp2 < 0) {\n    isSpecialCase = carryFlag == 0;\n    carryFlag = -carryFlag;\n    difference = -temp4;\n    temp4 = -(uint)!isSpecialCase - temp4;\n    difference = -(uint)(isSpecialCase <= difference) - temp2;\n  }\n  if (0xfffff < difference) {\n    divisorShifted = dividendShifted - 1;\n    if (0x1fffff < difference) {\n      divisorShifted = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(divisorShifted != 0) << 0x1f | temp4 >> 1;\n      carryFlag = (uint)(carry & 1) << 0x1f | carryFlag >> 1;\n      divisorShifted = dividendShifted;\n      if (0xffbfffff < dividendShifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isSpecialCase = 0x7fffffff < carryFlag;\n    if (carryFlag == 0x80000000) {\n      isSpecialCase = (temp4 & 1) != 0;\n    }\n    return CONCAT44(difference + divisorShifted * 0x100000 + (uint)CARRY4(temp4,(uint)isSpecialCase) | divisor,\n                    temp4 + isSpecialCase);\n  }\n  isDivisorZero = (carryFlag & 0x80000000) != 0;\n  carryFlag = carryFlag << 1;\n  divisorShifted = temp4 * 2;\n  isSpecialCase = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isDivisorZero;\n  difference = difference * 2 + (uint)(isSpecialCase || CARRY4(divisorShifted,(uint)isDivisorZero));\n  divisorShifted = dividendShifted - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  dividendShifted = difference;\n  if (difference == 0) {\n    temp5 = 0;\n    dividendShifted = temp4;\n  }\n  shift16 = LZCOUNT(dividendShifted);\n  if (difference == 0) {\n    shift16 = shift16 + 0x20;\n  }\n  difference = shift16 - 0xb;\n  carryFlag2 = SBORROW4(difference,0x20);\n  temp4 = shift16 - 0x2b;\n  isSpecialCase = (int)temp4 < 0;\n  isDivisorZero = temp4 == 0;\n  if ((int)difference < 0x20) {\n    carryFlag2 = SCARRY4(temp4,0xc);\n    shift16 = shift16 + -0x1f;\n    isSpecialCase = shift16 < 0;\n    isDivisorZero = shift16 == 0;\n    temp4 = difference;\n    if (!isDivisorZero && isSpecialCase == carryFlag2) {\n      temp5 = dividendShifted << (difference & 0xff);\n      dividendShifted = dividendShifted >> (0xcU - shift16 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isDivisorZero || isSpecialCase != carryFlag2) {\n    carryFlag = 0x20 - temp4;\n  }\n  dividendShifted = dividendShifted << (temp4 & 0xff);\n  if (isDivisorZero || isSpecialCase != carryFlag2) {\n    dividendShifted = dividendShifted | temp5 >> (carryFlag & 0xff);\n  }\n  if (isDivisorZero || isSpecialCase != carryFlag2) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)difference <= (int)divisorShifted) {\n    return CONCAT44(dividendShifted + (divisorShifted - difference) * 0x100000 | divisor,temp5);\n  }\n  temp4 = ~(divisorShifted - difference);\n  if ((int)temp4 < 0x1f) {\n    shift16 = temp4 - 0x13;\n    if (shift16 != 0 && shift16 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift16) & 0xff) | dividendShifted << (0xcU - shift16 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(divisor | dividendShifted >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | dividendShifted << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,dividendShifted >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_unsigned_division_08000168",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "shift32",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift16",
                "uVar9": "dividendShifted",
                "uVar10": "divisorShifted",
                "uVar11": "difference",
                "uVar12": "carryFlag",
                "bVar13": "isDivisorZero",
                "bVar14": "isSpecialCase",
                "bVar15": "carryFlag2"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_result_0800016c",
            "code": "\nulonglong calculate_result_0800016c(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  int shift_amount;\n  byte carry_flag;\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int shift_amount2;\n  uint temp_result_a;\n  uint temp_result_b;\n  uint shifted_input_a;\n  uint shifted_input_d;\n  uint temp_shift_1;\n  uint temp_shift_2;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  \n  temp_result_a = input_b << 1;\n  shifted_input_a = input_d << 1;\n  flag_1 = ((input_b ^ input_d) & 0x7fffffff) == 0;\n  flag_2 = flag_1 && input_a == input_c;\n  if (!flag_1 || input_a != input_c) {\n    flag_2 = (temp_result_a | input_a) == 0;\n  }\n  if (!flag_2) {\n    flag_2 = (shifted_input_a | input_c) == 0;\n  }\n  shift_amount2 = (int)temp_result_a >> 0x15;\n  if (!flag_2) {\n    flag_2 = shift_amount2 == -1;\n  }\n  shift_amount = (int)shifted_input_a >> 0x15;\n  if (!flag_2) {\n    flag_2 = shift_amount == -1;\n  }\n  if (flag_2) {\n    if (shift_amount2 == -1 || shift_amount == -1) {\n      shifted_input_a = input_d;\n      temp_result_a = input_c;\n      if (shift_amount2 == -1) {\n        shifted_input_a = input_b;\n        temp_result_a = input_a;\n      }\n      if (shift_amount2 != -1 || shift_amount != -1) {\n        input_c = temp_result_a;\n        input_d = shifted_input_a;\n      }\n      flag_2 = (temp_result_a | shifted_input_a << 0xc) == 0;\n      if (flag_2) {\n        flag_2 = (input_c | input_d << 0xc) == 0;\n      }\n      if (flag_2) {\n        flag_2 = shifted_input_a == input_d;\n      }\n      if (!flag_2) {\n        shifted_input_a = shifted_input_a | 0x80000;\n      }\n      return CONCAT44(shifted_input_a,temp_result_a);\n    }\n    if (((input_b ^ input_d) & 0x7fffffff) != 0 || input_a != input_c) {\n      if ((temp_result_a | input_a) == 0) {\n        input_a = input_c;\n        input_b = input_d;\n      }\n      return CONCAT44(input_b,input_a);\n    }\n    if (input_b != input_d) {\n      return 0;\n    }\n    if (temp_result_a >> 0x15 == 0) {\n      flag_2 = (input_a & 0x80000000) != 0;\n      shifted_input_a = input_b * 2 + (uint)flag_2;\n      if (CARRY4(input_b,input_b) || CARRY4(input_b * 2,(uint)flag_2)) {\n        shifted_input_a = shifted_input_a | 0x80000000;\n      }\n      return CONCAT44(shifted_input_a,input_a << 1);\n    }\n    if (temp_result_a < 0xffc00000) {\n      return CONCAT44(input_b + 0x100000,input_a);\n    }\n    input_b = input_b & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_b | 0x7ff00000) << 0x20;\n  }\n  temp_result_a = temp_result_a >> 0x15;\n  shifted_input_a = shifted_input_a >> 0x15;\n  shifted_input_d = shifted_input_a - temp_result_a;\n  flag_2 = shifted_input_d != 0;\n  if (shifted_input_a < temp_result_a) {\n    shifted_input_d = -shifted_input_d;\n  }\n  temp_result_b = input_a;\n  temp_var_3 = input_b;\n  if (flag_2 && temp_result_a <= shifted_input_a) {\n    temp_result_a = temp_result_a + shifted_input_d;\n    temp_result_b = input_c;\n    temp_var_3 = input_d;\n    input_c = input_a;\n    input_d = input_b;\n  }\n  if (0x36 < shifted_input_d) {\n    return CONCAT44(temp_var_3,temp_result_b);\n  }\n  shifted_input_a = temp_var_3 & 0xfffff | 0x100000;\n  if ((temp_var_3 & 0x80000000) != 0) {\n    flag_2 = temp_result_b != 0;\n    temp_result_b = -temp_result_b;\n    shifted_input_a = -shifted_input_a - (uint)flag_2;\n  }\n  temp_var_3 = input_d & 0xfffff | 0x100000;\n  if ((input_d & 0x80000000) != 0) {\n    flag_2 = input_c != 0;\n    input_c = -input_c;\n    temp_var_3 = -temp_var_3 - (uint)flag_2;\n  }\n  if (temp_result_a == shifted_input_d) {\n    temp_var_3 = temp_var_3 ^ 0x100000;\n    if (temp_result_a == 0) {\n      shifted_input_a = shifted_input_a ^ 0x100000;\n      temp_result_a = 1;\n    }\n    else {\n      shifted_input_d = shifted_input_d - 1;\n    }\n  }\n  temp_shift_2 = -shifted_input_d + 0x20;\n  if ((int)shifted_input_d < 0x21) {\n    temp_shift_1 = input_c << (temp_shift_2 & 0xff);\n    input_c = input_c >> (shifted_input_d & 0xff);\n    temp_var_1 = temp_result_b + input_c;\n    temp_var_2 = temp_var_3 << (temp_shift_2 & 0xff);\n    temp_shift_2 = temp_var_1 + temp_var_2;\n    shifted_input_a = shifted_input_a + CARRY4(temp_result_b,input_c) + ((int)temp_var_3 >> (shifted_input_d & 0xff)) +\n            (uint)CARRY4(temp_var_1,temp_var_2);\n  }\n  else {\n    temp_shift_1 = temp_var_3 << (-shifted_input_d + 0x40 & 0xff);\n    if (input_c != 0) {\n      temp_shift_1 = temp_shift_1 | 2;\n    }\n    temp_var_3 = (int)temp_var_3 >> (shifted_input_d - 0x20 & 0xff);\n    temp_shift_2 = temp_result_b + temp_var_3;\n    shifted_input_a = shifted_input_a + ((int)temp_var_3 >> 0x1f) + (uint)CARRY4(temp_result_b,temp_var_3);\n  }\n  input_b = shifted_input_a & 0x80000000;\n  shifted_input_d = shifted_input_a;\n  if ((int)shifted_input_a < 0) {\n    flag_2 = temp_shift_1 == 0;\n    temp_shift_1 = -temp_shift_1;\n    shifted_input_d = -temp_shift_2;\n    temp_shift_2 = -(uint)!flag_2 - temp_shift_2;\n    shifted_input_d = -(uint)(flag_2 <= shifted_input_d) - shifted_input_a;\n  }\n  if (0xfffff < shifted_input_d) {\n    temp_result_b = temp_result_a - 1;\n    if (0x1fffff < shifted_input_d) {\n      shifted_input_a = shifted_input_d & 1;\n      shifted_input_d = shifted_input_d >> 1;\n      carry_flag = (byte)temp_shift_2;\n      temp_shift_2 = (uint)(shifted_input_a != 0) << 0x1f | temp_shift_2 >> 1;\n      temp_shift_1 = (uint)(carry_flag & 1) << 0x1f | temp_shift_1 >> 1;\n      temp_result_b = temp_result_a;\n      if (0xffbfffff < temp_result_a * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag_2 = 0x7fffffff < temp_shift_1;\n    if (temp_shift_1 == 0x80000000) {\n      flag_2 = (temp_shift_2 & 1) != 0;\n    }\n    return CONCAT44(shifted_input_d + temp_result_b * 0x100000 + (uint)CARRY4(temp_shift_2,(uint)flag_2) | input_b,\n                    temp_shift_2 + flag_2);\n  }\n  flag_1 = (temp_shift_1 & 0x80000000) != 0;\n  temp_shift_1 = temp_shift_1 << 1;\n  temp_result_b = temp_shift_2 * 2;\n  flag_2 = CARRY4(temp_shift_2,temp_shift_2);\n  temp_shift_2 = temp_shift_2 * 2 + (uint)flag_1;\n  shifted_input_d = shifted_input_d * 2 + (uint)(flag_2 || CARRY4(temp_result_b,(uint)flag_1));\n  temp_result_b = temp_result_a - 2;\n  if ((shifted_input_d & 0x100000) != 0) goto LAB_08000278;\n  temp_var_3 = temp_shift_2;\n  temp_result_a = shifted_input_d;\n  if (shifted_input_d == 0) {\n    temp_var_3 = 0;\n    temp_result_a = temp_shift_2;\n  }\n  shift_amount2 = LZCOUNT(temp_result_a);\n  if (shifted_input_d == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  temp_shift_2 = shift_amount2 - 0xb;\n  flag_3 = SBORROW4(temp_shift_2,0x20);\n  shifted_input_d = shift_amount2 - 0x2b;\n  flag_2 = (int)shifted_input_d < 0;\n  flag_1 = shifted_input_d == 0;\n  if ((int)temp_shift_2 < 0x20) {\n    flag_3 = SCARRY4(shifted_input_d,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    flag_2 = shift_amount2 < 0;\n    flag_1 = shift_amount2 == 0;\n    shifted_input_d = temp_shift_2;\n    if (!flag_1 && flag_2 == flag_3) {\n      temp_var_3 = temp_result_a << (temp_shift_2 & 0xff);\n      temp_result_a = temp_result_a >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_shift_1 = 0x20 - shifted_input_d;\n  }\n  temp_result_a = temp_result_a << (shifted_input_d & 0xff);\n  if (flag_1 || flag_2 != flag_3) {\n    temp_result_a = temp_result_a | temp_var_3 >> (temp_shift_1 & 0xff);\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_var_3 = temp_var_3 << (shifted_input_d & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_shift_2 <= (int)temp_result_b) {\n    return CONCAT44(temp_result_a + (temp_result_b - temp_shift_2) * 0x100000 | input_b,temp_var_3);\n  }\n  shifted_input_d = ~(temp_result_b - temp_shift_2);\n  if ((int)shifted_input_d < 0x1f) {\n    shift_amount2 = shifted_input_d - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == SCARRY4(shifted_input_d - 0x1f,0xc)) {\n      return CONCAT44(shifted_input_a,temp_var_3 >> (0x20 - (0xcU - shift_amount2) & 0xff) | temp_result_a << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input_d = shifted_input_d + 1;\n    return CONCAT44(input_b | temp_result_a >> (shifted_input_d & 0xff),\n                    temp_var_3 >> (shifted_input_d & 0xff) | temp_result_a << (0x20 - shifted_input_d & 0xff));\n  }\n  return CONCAT44(shifted_input_a,temp_result_a >> (shifted_input_d - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "shift_amount",
                "bVar2": "carry_flag",
                "uVar3": "temp_var_1",
                "uVar4": "temp_var_2",
                "uVar5": "temp_var_3",
                "iVar6": "shift_amount2",
                "uVar7": "temp_result_a",
                "uVar8": "temp_result_b",
                "uVar9": "shifted_input_a",
                "uVar10": "shifted_input_d",
                "uVar11": "temp_shift_1",
                "uVar12": "temp_shift_2",
                "bVar13": "flag_1",
                "bVar14": "flag_2",
                "bVar15": "flag_3"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "bit_manipulation_function_08000404",
            "code": "\nulonglong bitManipulationFunction_08000404(uint input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftCount;\n  uint sumVal;\n  uint flag;\n  uint mask;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  if (input == 0) {\n    return 0;\n  }\n  flag = input & 0x80000000;\n  temp2 = input;\n  if ((int)flag < 0) {\n    temp2 = -input;\n  }\n  temp1 = 0;\n  shiftCount = LZCOUNT(temp2);\n  sumVal = shiftCount + 0x15;\n  check3 = SBORROW4(sumVal,0x20);\n  temp3 = shiftCount - 0xb;\n  check1 = (int)temp3 < 0;\n  check2 = temp3 == 0;\n  if (sumVal < 0x20) {\n    check3 = SCARRY4(temp3,0xc);\n    check1 = false;\n    check2 = shiftCount + 1 == 0;\n    temp3 = sumVal;\n    if (!check2 && check3 == false) {\n      temp1 = temp2 << sumVal;\n      temp2 = temp2 >> (0xcU - (shiftCount + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (check2 || check1 != check3) {\n    mask = 0x20 - temp3;\n  }\n  temp2 = temp2 << (temp3 & 0xff);\n  if (check2 || check1 != check3) {\n    temp2 = temp2 | 0U >> (mask & 0xff);\n  }\n  if (check2 || check1 != check3) {\n    temp1 = 0 << (temp3 & 0xff);\n  }\nLAB_080002f0:\n  if (sumVal < 0x433) {\n    return CONCAT44(temp2 + (0x432 - sumVal) * 0x100000 | flag,temp1);\n  }\n  temp3 = ~(0x432 - sumVal);\n  if (0x1e < (int)temp3) {\n    return CONCAT44(input,temp2 >> (temp3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shiftCount = temp3 - 0x13;\n  if (shiftCount == 0 || shiftCount < 0 != SCARRY4(temp3 - 0x1f,0xc)) {\n    temp3 = temp3 + 1;\n    return CONCAT44(flag | temp2 >> (temp3 & 0xff),\n                    temp1 >> (temp3 & 0xff) | temp2 << (0x20 - temp3 & 0xff));\n  }\n  return CONCAT44(input,temp1 >> (0x20 - (0xcU - shiftCount) & 0xff) | temp2 << (0xcU - shiftCount & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "bit_manipulation_function_08000404",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "shiftCount",
                "uVar5": "sumVal",
                "uVar6": "flag",
                "in_r12": "mask",
                "bVar7": "check1",
                "bVar8": "check2",
                "bVar9": "check3"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_and_improve_08000428",
            "code": "\nulonglong reverseAndImprove_08000428(uint input_A,undefined4 input_B,undefined4 input_C,uint input_D)\n\n{\n  uint signExtension;\n  uint tempVar1;\n  uint result_H;\n  uint shiftedValue;\n  uint tempVar2;\n  int bitCount;\n  uint msbPosition;\n  uint remainingBits;\n  bool isZero;\n  bool isFull;\n  bool carry;\n  \n  tempVar2 = input_A << 1;\n  isFull = tempVar2 == 0;\n  signExtension = (uint)((input_A & 0x80000000) != 0) << 0x1f;\n  shiftedValue = (uint)((int)tempVar2 >> 3) >> 1;\n  result_H = signExtension | shiftedValue;\n  input_A = input_A << 0x1d;\n  if (!isFull) {\n    input_D = tempVar2 & 0xff000000;\n    isFull = input_D == 0;\n  }\n  if (!isFull) {\n    isFull = input_D == 0xff000000;\n  }\n  if (!isFull) {\n    return CONCAT44(result_H,input_A) ^ 0x3800000000000000;\n  }\n  if (tempVar2 == 0 || input_D == 0xff000000) {\n    return CONCAT44(result_H,input_A);\n  }\n  tempVar1 = input_A;\n  tempVar2 = shiftedValue;\n  if (shiftedValue == 0) {\n    tempVar1 = 0;\n    tempVar2 = input_A;\n  }\n  bitCount = leadingZeroCount(tempVar2);\n  if (shiftedValue == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  msbPosition = bitCount - 0xb;\n  carry = subtractBorrow(msbPosition,0x20);\n  shiftedValue = bitCount - 0x2b;\n  isFull = (int)shiftedValue < 0;\n  isZero = shiftedValue == 0;\n  if ((int)msbPosition < 0x20) {\n    carry = subtractCarry(shiftedValue,0xc);\n    bitCount = bitCount + -0x1f;\n    isFull = bitCount < 0;\n    isZero = bitCount == 0;\n    shiftedValue = msbPosition;\n    if (!isZero && isFull == carry) {\n      tempVar1 = tempVar2 << (msbPosition & 0xff);\n      tempVar2 = tempVar2 >> (0xcU - bitCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isFull != carry) {\n    remainingBits = 0x20 - shiftedValue;\n  }\n  tempVar2 = tempVar2 << (shiftedValue & 0xff);\n  if (isZero || isFull != carry) {\n    tempVar2 = tempVar2 | tempVar1 >> (remainingBits & 0xff);\n  }\n  if (isZero || isFull != carry) {\n    tempVar1 = tempVar1 << (shiftedValue & 0xff);\n  }\nLAB_080002f0:\n  if ((int)msbPosition < 0x381) {\n    return CONCAT44(tempVar2 + (0x380 - msbPosition) * 0x100000 | signExtension,tempVar1);\n  }\n  shiftedValue = ~(0x380 - msbPosition);\n  if ((int)shiftedValue < 0x1f) {\n    bitCount = shiftedValue - 0x13;\n    if (bitCount != 0 && bitCount < 0 == subtractCarry(shiftedValue - 0x1f,0xc)) {\n      return CONCAT44(result_H,tempVar1 >> (0x20 - (0xcU - bitCount) & 0xff) | tempVar2 << (0xcU - bitCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedValue = shiftedValue + 1;\n    return CONCAT44(signExtension | tempVar2 >> (shiftedValue & 0xff),\n                    tempVar1 >> (shiftedValue & 0xff) | tempVar2 << (0x20 - shiftedValue & 0xff));\n  }\n  return CONCAT44(result_H,tempVar2 >> (shiftedValue - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_and_improve_08000428",
                "param_1": "input_A",
                "param_2": "input_B",
                "param_3": "input_C",
                "param_4": "input_D",
                "uVar1": "signExtension",
                "uVar2": "tempVar1",
                "uVar3": "result_H",
                "uVar4": "shiftedValue",
                "uVar5": "tempVar2",
                "iVar6": "bitCount",
                "uVar7": "msbPosition",
                "in_r12": "remainingBits",
                "bVar8": "isZero",
                "bVar9": "isFull",
                "bVar10": "carry",
                "LZCOUNT": "leadingZeroCount",
                "SBORROW4": "subtractBorrow",
                "SCARRY4": "subtractCarry"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_product_080004d0",
            "code": "\nulonglong calculateProduct_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong productLower;\n  longlong temp;\n  uint result1;\n  uint result2;\n  int sumResult;\n  uint carry;\n  uint temp2;\n  uint carryResult;\n  uint carryResult2;\n  bool check1;\n  bool check2;\n  bool check3;\n  ulonglong productUpper;\n  \n  productUpper = CONCAT44(input2,input1);\n  carryResult = 0x7ff;\n  result2 = input2 >> 0x14 & 0x7ff;\n  check1 = result2 == 0;\n  if (!check1) {\n    temp2 = input4 >> 0x14 & 0x7ff;\n    check1 = temp2 == 0;\n  }\n  if (!check1) {\n    check1 = result2 == 0x7ff;\n  }\n  if (!check1) {\n    check1 = temp2 == 0x7ff;\n  }\n  if (check1) {\n    productUpper = FUN_080006ac();\n  }\n  result1 = (uint)(productUpper >> 0x20);\n  sumResult = result2 + temp2;\n  result2 = result1 ^ input4;\n  result1 = result1 & ~(carryResult << 0x15);\n  input4 = input4 & ~(carryResult << 0x15);\n  check1 = ((uint)productUpper | result1 << 0xc) == 0;\n  if (!check1) {\n    check1 = (input3 | input4 << 0xc) == 0;\n  }\n  result1 = result1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (check1) {\n    input3 = (uint)productUpper | input3;\n    input4 = (result2 & 0x80000000 | result1) ^ input4;\n    result2 = carryResult >> 1;\n    check3 = SBORROW4(sumResult,result2);\n    carry = sumResult - result2;\n    check1 = carry == 0;\n    result1 = carry;\n    if (!check1 && (int)result2 <= sumResult) {\n      check3 = SBORROW4(carryResult,carry);\n      result1 = carryResult - carry;\n      check1 = carryResult == carry;\n    }\n    if (!check1 && (int)result1 < 0 == check3) {\n      input4 = input4 | carry * 0x100000;\n    }\n    if (!check1 && (int)result1 < 0 == check3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    carryResult = 0;\n    check3 = SBORROW4(carry,1);\n    carry = carry - 1;\n    check1 = carry == 0;\n    result2 = carry;\n  }\n  else {\n    productLower = (productUpper & 0xffffffff) * (ulonglong)input3;\n    productUpper = (productUpper & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)result1 * (ulonglong)input3 + (productLower >> 0x20);\n    carryResult2 = (uint)productUpper;\n    temp = (ulonglong)result1 * (ulonglong)input4 + (productUpper >> 0x20);\n    carryResult = (uint)temp;\n    result1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)productLower != 0) {\n      carryResult2 = carryResult2 | 1;\n    }\n    carry = (sumResult + -0x3ff) - (uint)(result1 < 0x200);\n    if (result1 < 0x200) {\n      check1 = (carryResult2 & 0x80000000) != 0;\n      carryResult2 = carryResult2 << 1;\n      temp = CONCAT44(result1 * 2 + (uint)(CARRY4(carryResult,carryResult) || CARRY4(carryResult * 2,(uint)check1)),\n                       carryResult * 2 + (uint)check1);\n    }\n    input4 = result2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | carryResult2 >> 0x15;\n    carryResult = carryResult2 * 0x800;\n    check2 = 0xfc < carry;\n    check3 = SBORROW4(carry,0xfd);\n    result1 = carry - 0xfd;\n    check1 = result1 == 0;\n    result2 = result1;\n    if (check2 && !check1) {\n      check2 = 0x6ff < result1;\n      check3 = SBORROW4(result1,0x700);\n      result2 = carry - 0x7fd;\n      check1 = result1 == 0x700;\n    }\n    if (!check2 || check1) {\n      check1 = 0x7fffffff < carryResult;\n      if (carryResult == 0x80000000) {\n        check1 = (carryResult2 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + carry * 0x100000 + (uint)CARRY4(input3,(uint)check1),input3 + check1\n                     );\n    }\n  }\n  if (!check1 && (int)result2 < 0 == check3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  check2 = SCARRY4(carry,0x36);\n  check1 = (int)(carry + 0x36) < 0;\n  check3 = carry == 0xffffffca;\n  if (check3 || check1 != check2) {\n    input3 = 0;\n  }\n  if (check3 || check1 != check2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (check3 || check1 != check2) {\n    return CONCAT44(input4,input3);\n  }\n  result2 = -carry;\n  result1 = result2 - 0x20;\n  if (0x1f < (int)result2) {\n    carry = input3 >> (result1 & 0xff) | input4 << (0x20 - result1 & 0xff);\n    result2 = (input4 >> (result1 & 0xff) & ~((input4 & 0x80000000) >> (result1 & 0xff))) -\n            ((int)carry >> 0x1f);\n    if ((carryResult | input3 << (0x20 - result1 & 0xff) | carry << 1) == 0) {\n      result2 = result2 & ~(carry >> 0x1f);\n    }\n    return CONCAT44(input4,result2) & 0x80000000ffffffff;\n  }\n  sumResult = result2 - 0x14;\n  if (sumResult == 0 || sumResult < 0 != SCARRY4(result1,0xc)) {\n    carryResult2 = input3 << (carry + 0x20 & 0xff);\n    result1 = input3 >> (result2 & 0xff) | input4 << (carry + 0x20 & 0xff);\n    carry = result1 + -((int)carryResult2 >> 0x1f);\n    if ((carryResult | carryResult2 << 1) == 0) {\n      carry = carry & ~(carryResult2 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (result2 & 0xff)) +\n                    (uint)CARRY4(result1,-((int)carryResult2 >> 0x1f)),carry);\n  }\n  result2 = 0xc - sumResult;\n  carry = input3 << (result2 & 0xff);\n  result2 = input3 >> (0x20 - result2 & 0xff) | input4 << (result2 & 0xff);\n  result1 = result2 + -((int)carry >> 0x1f);\n  if ((carryResult | carry << 1) == 0) {\n    result1 = result1 & ~(carry >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(result2,-((int)carry >> 0x1f)),result1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_product_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "productLower",
                "lVar2": "temp",
                "uVar3": "result1",
                "uVar4": "result2",
                "iVar5": "sumResult",
                "uVar6": "carry",
                "unaff_r5": "temp2",
                "uVar7": "carryResult",
                "uVar8": "carryResult2",
                "bVar9": "check1",
                "bVar10": "check2",
                "bVar11": "check3",
                "uVar12": "productUpper"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_080006ac",
            "code": "\nulonglong calculate_bitwise_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool is_zero;\n  \n  temp_3 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_3 != temp_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_4 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_4;\n      if (temp_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_4 = input_2;\n  if (((!is_zero) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_3 != temp_5 || (input_1 = input_3, temp_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_08000724",
            "code": "\nulonglong calculate_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_08000892();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_double_08000892",
            "code": "\nulonglong calculate_double_08000892(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint bit_a;\n  uint bit_b;\n  uint bit_c;\n  uint bit_d;\n  uint constant;\n  bool is_zero;\n  \n  bit_c = constant & input_d >> 0x14;\n  bit_d = input_b;\n  if (bit_b != constant || bit_c != constant) {\n    if (bit_b == constant) {\n      if (((input_a | input_b << 0xc) == 0) && (input_a = input_c, bit_d = input_d, bit_c != constant)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input_b ^ input_d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit_c == constant) {\n      input_a = input_c;\n      bit_d = input_d;\n      if ((input_c | input_d << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input_b ^ input_d) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input_a | input_b << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input_c | input_d << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit_b == 0) {\n          bit_d = input_b & 0x80000000;\n          do {\n            bit_a = input_a & 0x80000000;\n            input_a = input_a << 1;\n            input_b = input_b * 2 + (uint)(bit_a != 0);\n          } while ((input_b & 0x100000) == 0);\n          input_b = input_b | bit_d;\n          if (bit_c != 0) {\n            return CONCAT44(input_b,input_a);\n          }\n        }\n        do {\n          bit_d = input_c & 0x80000000;\n          input_c = input_c << 1;\n          input_d = input_d * 2 + (uint)(bit_d != 0);\n        } while ((input_d & 0x100000) == 0);\n        return CONCAT44(input_b,input_a);\n      }\n      if ((input_a | input_b << 1) != 0) goto LAB_08000704;\n      if ((input_c | input_d << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit_d,input_a) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_double_08000892",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "bit_a",
                "unaff_r4": "bit_b",
                "uVar2": "bit_c",
                "uVar3": "bit_d",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equal_params_08000904",
            "code": "\nuint check_equal_params_08000904(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isLess;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input_1 | input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input_2 == input_4;\n  }\n  if (isZero) {\n    isZero = input_1 == input_3;\n  }\n  if (!isZero) {\n    result = input_2 ^ input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input_2 == input_4;\n    }\n    isLess = -1 < (int)result && input_4 <= input_2;\n    if (isZero) {\n      isLess = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isLess) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equal_params_08000904",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLess"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "execute_function_08000980",
            "code": "\nvoid execute_function_08000980(undefined4 argument_1,undefined4 argument_2,undefined4 argument_3,undefined4 argument_4)\n\n{\n  FUN_08000990(argument_3,argument_4,argument_1,argument_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "execute_function_08000980",
                "param_1": "argument_1",
                "param_2": "argument_2",
                "param_3": "argument_3",
                "param_4": "argument_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "initialize_08000990",
            "code": "\nundefined4 initialize_08000990(undefined4 input_value)\n\n{\n  FUN_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "initialize_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_zero_080009a0",
            "code": "\nbool checkIfZero_080009a0(void)\n\n{\n  char isNotZero;\n  \n  FUN_08000990();\n  return isNotZero != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_zero_080009a0",
                "in_ZR": "isNotZero"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_input_empty_080009b4",
            "code": "\nbool is_input_empty_080009b4(void)\n\n{\n  char input_character;\n  \n  FUN_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_input_empty_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_cy_and_zr_080009c8",
            "code": "\nbool check_CY_and_ZR_080009c8(void)\n\n{\n  undefined zero_set;\n  undefined carry_set;\n  \n  FUN_08000990();\n  return !(bool)carry_set || (bool)zero_set;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_cy_and_zr_080009c8",
                "in_CY": "carry_set",
                "in_ZR": "zero_set"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_null_terminated_080009f0",
            "code": "\nbool check_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  FUN_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_null_terminated_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "is_valid_params_08000a04",
            "code": "\nundefined4 is_valid_params_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "is_valid_params_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputValue,uint inputBits)\n\n{\n  uint result;\n  uint newValue;\n  uint shiftedValue;\n  uint specialValue;\n  bool isZero;\n  bool isLessThan;\n  \n  newValue = inputBits * 2;\n  isLessThan = newValue < 0x70000000;\n  shiftedValue = newValue + 0x90000000;\n  result = shiftedValue;\n  if (!isLessThan) {\n    specialValue = newValue + 0x8fe00000;\n    result = specialValue;\n  }\n  isZero = result == 0;\n  if (!isLessThan && shiftedValue >= 0x200000) {\n    isZero = specialValue == 0x1fc00000;\n  }\n  if (((isLessThan || shiftedValue < 0x200000) || 0x1fc00000 < specialValue) || isZero) {\n    if ((inputBits & 0x40000000) != 0) {\n      if (((int)newValue >> 0x15 == -1) && ((inputValue | inputBits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputBits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(newValue + 0x92e00000) < 0 != SCARRY4(shiftedValue,0x2e00000)) {\n      return inputBits & 0x80000000;\n    }\n    newValue = 0x18 - (newValue + 0x92e00000 >> 0x15);\n    result = inputValue >> (newValue & 0xff);\n    if (inputValue << (0x20 - newValue & 0xff) != 0) {\n      result = result | 1;\n    }\n    shiftedValue = inputBits & 0x1fffff | 0x100000;\n    inputValue = result | shiftedValue << (0x20 - newValue & 0xff);\n    shiftedValue = (shiftedValue >> (newValue & 0xff)) << 1;\n  }\n  result = (inputBits & 0x80000000 | inputValue >> 0x1d) + shiftedValue * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputValue",
                "param_2": "inputBits",
                "uVar1": "result",
                "uVar2": "newValue",
                "uVar3": "shiftedValue",
                "in_r12": "specialValue",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_unsigned_division_08000ad8",
            "code": "\nuint calculate_unsigned_division_08000ad8(uint dividend,uint divisor,undefined4 unsigned_result,uint remainder)\n\n{\n  int dividend_sign_extension;\n  int divisor_sign_extension;\n  uint divisor_high_bit;\n  uint unsigned_dividend;\n  uint unsigned_remainder;\n  uint temp_unsigned_remainder;\n  uint difference;\n  bool is_zero_dividend_or_divisor;\n  \n  divisor_high_bit = divisor ^ 0x80000000;\n  unsigned_remainder = dividend << 1;\n  is_zero_dividend_or_divisor = unsigned_remainder == 0;\n  if (!is_zero_dividend_or_divisor) {\n    remainder = divisor << 1;\n    is_zero_dividend_or_divisor = remainder == 0;\n  }\n  if (!is_zero_dividend_or_divisor) {\n    is_zero_dividend_or_divisor = unsigned_remainder == remainder;\n  }\n  dividend_sign_extension = (int)unsigned_remainder >> 0x18;\n  if (!is_zero_dividend_or_divisor) {\n    is_zero_dividend_or_divisor = dividend_sign_extension == -1;\n  }\n  if (!is_zero_dividend_or_divisor) {\n    is_zero_dividend_or_divisor = (int)remainder >> 0x18 == -1;\n  }\n  if (is_zero_dividend_or_divisor) {\n    divisor_sign_extension = (int)(divisor << 1) >> 0x18;\n    if (dividend_sign_extension == -1 || divisor_sign_extension == -1) {\n      unsigned_remainder = divisor_high_bit;\n      if (dividend_sign_extension == -1) {\n        unsigned_remainder = dividend;\n      }\n      if (dividend_sign_extension != -1 || divisor_sign_extension != -1) {\n        divisor_high_bit = unsigned_remainder;\n      }\n      is_zero_dividend_or_divisor = (unsigned_remainder & 0x7fffff) == 0;\n      if (is_zero_dividend_or_divisor) {\n        is_zero_dividend_or_divisor = (divisor_high_bit & 0x7fffff) == 0;\n      }\n      if (is_zero_dividend_or_divisor) {\n        is_zero_dividend_or_divisor = unsigned_remainder == divisor_high_bit;\n      }\n      if (!is_zero_dividend_or_divisor) {\n        unsigned_remainder = unsigned_remainder | 0x400000;\n      }\n      return unsigned_remainder;\n    }\n    if (((dividend ^ divisor_high_bit) & 0x7fffffff) != 0) {\n      if (unsigned_remainder == 0) {\n        dividend = divisor_high_bit;\n      }\n      return dividend;\n    }\n    if (dividend != divisor_high_bit) {\n      return 0;\n    }\n    if ((unsigned_remainder & 0xff000000) == 0) {\n      divisor_high_bit = dividend << 1;\n      if ((dividend & 0x80000000) != 0) {\n        divisor_high_bit = divisor_high_bit | 0x80000000;\n      }\n      return divisor_high_bit;\n    }\n    if (unsigned_remainder < 0xfe000000) {\n      return dividend + 0x800000;\n    }\n    dividend = dividend & 0x80000000;\nLAB_08000c12:\n    return dividend | 0x7f800000;\n  }\n  unsigned_remainder = unsigned_remainder >> 0x18;\n  remainder = remainder >> 0x18;\n  difference = remainder - unsigned_remainder;\n  is_zero_dividend_or_divisor = difference != 0;\n  temp_unsigned_remainder = unsigned_remainder;\n  if (is_zero_dividend_or_divisor && unsigned_remainder <= remainder) {\n    temp_unsigned_remainder = unsigned_remainder + difference;\n  }\n  if (is_zero_dividend_or_divisor && unsigned_remainder <= remainder) {\n    divisor_high_bit = divisor_high_bit ^ dividend;\n  }\n  if (is_zero_dividend_or_divisor && unsigned_remainder <= remainder) {\n    dividend = dividend ^ divisor_high_bit;\n  }\n  if (is_zero_dividend_or_divisor && unsigned_remainder <= remainder) {\n    divisor_high_bit = divisor_high_bit ^ dividend;\n  }\n  if (remainder < unsigned_remainder) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return dividend;\n  }\n  unsigned_remainder = dividend & 0xffffff | 0x800000;\n  if ((dividend & 0x80000000) != 0) {\n    unsigned_remainder = -unsigned_remainder;\n  }\n  unsigned_dividend = divisor_high_bit & 0xffffff | 0x800000;\n  if ((divisor_high_bit & 0x80000000) != 0) {\n    unsigned_dividend = -unsigned_dividend;\n  }\n  if (temp_unsigned_remainder == difference) {\n    unsigned_dividend = unsigned_dividend ^ 0x800000;\n    if (temp_unsigned_remainder == 0) {\n      unsigned_remainder = unsigned_remainder ^ 0x800000;\n      temp_unsigned_remainder = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  unsigned_remainder = unsigned_remainder + ((int)unsigned_dividend >> (difference & 0xff));\n  unsigned_dividend = unsigned_dividend << (0x20 - difference & 0xff);\n  dividend = unsigned_remainder & 0x80000000;\n  if ((int)unsigned_remainder < 0) {\n    is_zero_dividend_or_divisor = unsigned_dividend != 0;\n    unsigned_dividend = -unsigned_dividend;\n    unsigned_remainder = -unsigned_remainder - (uint)is_zero_dividend_or_divisor;\n  }\n  if (unsigned_remainder < 0x800000) {\n    divisor_high_bit = unsigned_dividend & 0x80000000;\n    unsigned_dividend = unsigned_dividend << 1;\n    unsigned_remainder = unsigned_remainder * 2 + (uint)(divisor_high_bit != 0);\n    divisor_high_bit = temp_unsigned_remainder - 2;\n    if ((unsigned_remainder & 0x800000) == 0) {\n      difference = LZCOUNT(unsigned_remainder) - 8;\n      unsigned_remainder = unsigned_remainder << (difference & 0xff);\n      if ((int)divisor_high_bit < (int)difference) {\n        unsigned_remainder = unsigned_remainder >> (-(divisor_high_bit - difference) & 0xff);\n      }\n      else {\n        unsigned_remainder = unsigned_remainder + (divisor_high_bit - difference) * 0x800000;\n      }\n      return unsigned_remainder | dividend;\n    }\n  }\n  else {\n    divisor_high_bit = temp_unsigned_remainder - 1;\n    if (0xffffff < unsigned_remainder) {\n      divisor_high_bit = unsigned_remainder & 1;\n      unsigned_remainder = unsigned_remainder >> 1;\n      unsigned_dividend = (uint)(divisor_high_bit != 0) << 0x1f | unsigned_dividend >> 1;\n      divisor_high_bit = temp_unsigned_remainder;\n      if (0xfd < temp_unsigned_remainder) goto LAB_08000c12;\n    }\n  }\n  unsigned_remainder = unsigned_remainder + divisor_high_bit * 0x800000 + (uint)(0x7fffffff < unsigned_dividend);\n  if (unsigned_dividend == 0x80000000) {\n    unsigned_remainder = unsigned_remainder & 0xfffffffe;\n  }\n  return unsigned_remainder | dividend;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_unsigned_division_08000ad8",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "unsigned_result",
                "param_4": "remainder",
                "iVar1": "dividend_sign_extension",
                "iVar2": "divisor_sign_extension",
                "uVar3": "divisor_high_bit",
                "uVar4": "unsigned_dividend",
                "uVar5": "unsigned_remainder",
                "uVar6": "temp_unsigned_remainder",
                "uVar7": "difference",
                "bVar8": "is_zero_dividend_or_divisor"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "float_converter_08000adc",
            "code": "\nuint floatConverter_08000adc(uint number1,uint number2,undefined4 param_3,uint param_4)\n\n{\n  int shiftedNumber1;\n  int shiftedNumber2;\n  uint result1;\n  uint result2;\n  uint count;\n  uint difference;\n  bool flag;\n  \n  result2 = number1 << 1;\n  flag = result2 == 0;\n  if (!flag) {\n    param_4 = number2 << 1;\n    flag = param_4 == 0;\n  }\n  if (!flag) {\n    flag = result2 == param_4;\n  }\n  shiftedNumber1 = (int)result2 >> 0x18;\n  if (!flag) {\n    flag = shiftedNumber1 == -1;\n  }\n  if (!flag) {\n    flag = (int)param_4 >> 0x18 == -1;\n  }\n  if (flag) {\n    shiftedNumber2 = (int)(number2 << 1) >> 0x18;\n    if (shiftedNumber1 == -1 || shiftedNumber2 == -1) {\n      result2 = number2;\n      if (shiftedNumber1 == -1) {\n        result2 = number1;\n      }\n      if (shiftedNumber1 != -1 || shiftedNumber2 != -1) {\n        number2 = result2;\n      }\n      flag = (result2 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (number2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = result2 == number2;\n      }\n      if (!flag) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        number1 = number2;\n      }\n      return number1;\n    }\n    if (number1 != number2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_08000c12:\n    return number1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  difference = param_4 - result2;\n  flag = difference != 0;\n  count = result2;\n  if (flag && result2 <= param_4) {\n    count = result2 + difference;\n  }\n  if (flag && result2 <= param_4) {\n    number2 = number2 ^ number1;\n  }\n  if (flag && result2 <= param_4) {\n    number1 = number1 ^ number2;\n  }\n  if (flag && result2 <= param_4) {\n    number2 = number2 ^ number1;\n  }\n  if (param_4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return number1;\n  }\n  result2 = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (count == difference) {\n    result1 = result1 ^ 0x800000;\n    if (count == 0) {\n      result2 = result2 ^ 0x800000;\n      count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  number1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    flag = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)flag;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = count - 2;\n    if ((result2 & 0x800000) == 0) {\n      count = LZCOUNT(result2) - 8;\n      result2 = result2 << (count & 0xff);\n      if ((int)difference < (int)count) {\n        result2 = result2 >> (-(difference - count) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - count) * 0x800000;\n      }\n      return result2 | number1;\n    }\n  }\n  else {\n    difference = count - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = count;\n      if (0xfd < count) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | number1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "float_converter_08000adc",
                "param_1": "number1",
                "param_2": "number2",
                "iVar1": "shiftedNumber1",
                "iVar2": "shiftedNumber2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "count",
                "uVar6": "difference",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_value_08000c3c",
            "code": "\nuint calculateValue_08000c3c(uint input)\n\n{\n  uint leadingZerosCount;\n  uint shiftAmount;\n  int intermediateValue;\n  uint topBitMask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(input);\n  shiftAmount = leadingZerosCount - 8;\n  intermediateValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZerosCount) {\n    topBitMask = 0 << (shiftAmount & 0xff);\n    leadingZerosCount = intermediateValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < topBitMask);\n    if (topBitMask == 0x80000000) {\n      leadingZerosCount = leadingZerosCount & 0xfffffffe;\n    }\n    return leadingZerosCount;\n  }\n  shiftAmount = input << leadingZerosCount + 0x18;\n  leadingZerosCount = intermediateValue + ((input >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZerosCount = leadingZerosCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_value_08000c3c",
                "param_1": "input",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateValue",
                "uVar4": "topBitMask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "decode_unsigned_integer_08000c44",
            "code": "\nuint decode_unsigned_integer_08000c44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_value;\n  uint sign_bit;\n  int adjusted_value;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_value = leading_zeros - 8;\n  adjusted_value = ((sign_bit | 0x4b000000) - 0x800000) + shift_value * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_value & 0xff);\n    sign_bit = adjusted_value + (input_value << (shift_value & 0xff)) +\n            (0U >> (0x20 - shift_value & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_value = input_value << leading_zeros + 0x18;\n  sign_bit = adjusted_value + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_value >> 0x1f));\n  if ((shift_value & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_value >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "decode_unsigned_integer_08000c44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_value",
                "uVar3": "sign_bit",
                "iVar4": "adjusted_value"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "binary_conversion_08000cec",
            "code": "\nuint binaryConversion_08000cec(uint num1,uint num2,undefined4 flag,uint num3)\n\n{\n  longlong result1;\n  uint result2;\n  uint temp1;\n  int temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZero;\n  bool isBorrow;\n  \n  temp1 = num1 >> 0x17 & 0xff;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    num3 = num2 >> 0x17 & 0xff;\n    isZero = num3 == 0;\n  }\n  if (!isZero) {\n    isZero = temp1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = num3 == 0xff;\n  }\n  if (isZero) {\n    num3 = num2 >> 0x17 & 0xff;\n    if (temp1 == 0xff || num3 == 0xff) {\n      isZero = num1 == 0 || num1 == 0x80000000;\n      result2 = num2;\n      if (num1 != 0 && num1 != 0x80000000) {\n        isZero = num2 == 0;\n        result2 = num1;\n      }\n      if (!isZero) {\n        isZero = num2 == 0x80000000;\n      }\n      temp6 = result2;\n      if (((isZero) || ((temp1 == 0xff && ((result2 & 0x7fffff) != 0)))) ||\n         ((num3 == 0xff && (temp6 = num2, (num2 & 0x7fffff) != 0)))) {\n        return temp6 | 0x7fc00000;\n      }\n      result2 = result2 ^ num2;\n      goto LAB_08000e3c;\n    }\n    isZero = (num1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (num2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (num1 ^ num2) & 0x80000000;\n    }\n    isZero = temp1 == 0;\n    result2 = num1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        num1 = num1 << 1;\n        isZero = (num1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      temp1 = temp1 - 1;\n    }\n    num1 = num1 | result2;\n    isZero = num3 == 0;\n    result2 = num2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        num2 = num2 << 1;\n        isZero = (num2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      num3 = num3 - 1;\n    }\n    num2 = num2 | result2;\n  }\n  temp2 = temp1 + num3;\n  temp6 = num1 ^ num2;\n  temp1 = num1 << 9;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    num2 = num2 << 9;\n    isZero = num2 == 0;\n  }\n  if (isZero) {\n    if (temp1 == 0) {\n      num2 = num2 << 9;\n    }\n    result2 = temp6 & 0x80000000 | num1 & 0x7fffff | num2 >> 9;\n    isBorrow = SBORROW4(temp2,0x7f);\n    temp3 = temp2 + -0x7f;\n    isZero = temp3 == 0;\n    temp5 = temp3;\n    if (!isZero && 0x7e < temp2) {\n      isBorrow = SBORROW4(0xff,temp3);\n      temp5 = 0xff - temp3;\n      isZero = temp3 == 0xff;\n    }\n    if (!isZero && temp5 < 0 == isBorrow) {\n      result2 = result2 | temp3 * 0x800000;\n    }\n    if (!isZero && temp5 < 0 == isBorrow) {\n      return result2;\n    }\n    result2 = result2 | 0x800000;\n    temp4 = 0;\n    isBorrow = SBORROW4(temp3,1);\n    temp6 = temp2 - 0x80;\n    isZero = temp6 == 0;\n    temp1 = temp6;\n  }\n  else {\n    result1 = (ulonglong)(temp1 >> 5 | 0x8000000) * (ulonglong)(num2 >> 5 | 0x8000000);\n    temp4 = (uint)result1;\n    result2 = (uint)((ulonglong)result1 >> 0x20);\n    isZero = result2 < 0x800000;\n    if (isZero) {\n      result2 = result2 << 1;\n    }\n    if (isZero) {\n      result2 = result2 | temp4 >> 0x1f;\n      temp4 = temp4 << 1;\n    }\n    result2 = temp6 & 0x80000000 | result2;\n    temp6 = (temp2 + -0x7f) - (uint)isZero;\n    isBorrow = SBORROW4(temp6,0xfd);\n    isZero = temp6 == 0xfd;\n    temp1 = temp6 - 0xfd;\n    if (temp6 < 0xfe) {\n      result2 = result2 + temp6 * 0x800000 + (uint)(0x7fffffff < temp4);\n      if (temp4 == 0x80000000) {\n        result2 = result2 & 0xfffffffe;\n      }\n      return result2;\n    }\n  }\n  if (isZero || (int)temp1 < 0 != isBorrow) {\n    isZero = (int)(temp6 + 0x19) < 0;\n    if (temp6 == 0xffffffe7 || isZero != SCARRY4(temp6,0x19)) {\n      result2 = result2 & 0x80000000;\n    }\n    if (temp6 != 0xffffffe7 && isZero == SCARRY4(temp6,0x19)) {\n      temp1 = (result2 << 1) >> (-temp6 & 0xff);\n      temp6 = result2 << (temp6 + 0x20 & 0xff);\n      temp1 = ((uint)((result2 & 0x80000000) != 0) << 0x1f | temp1 >> 1) + (uint)((byte)temp1 & 1);\n      if ((temp4 | temp6 << 1) == 0) {\n        temp1 = temp1 & ~(temp6 >> 0x1f);\n      }\n      return temp1;\n    }\n    return result2;\n  }\nLAB_08000e3c:\n  return result2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "binary_conversion_08000cec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "flag",
                "param_4": "num3",
                "lVar1": "result1",
                "uVar2": "result2",
                "uVar3": "temp1",
                "iVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "iVar7": "temp5",
                "uVar8": "temp6",
                "bVar9": "isZero",
                "bVar10": "isBorrow"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculateFloat_08000e54(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZero;\n  bool carryFlag;\n  bool overflowFlag;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, input4 == 0xff)) {\nLAB_08000e4a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        isZero = input4 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    temp3 = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      overflowFlag = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      isZero = temp5 < 0;\n      carryFlag = temp5 == 0;\n      if (!carryFlag && isZero == overflowFlag) {\n        overflowFlag = SBORROW4(0xff,temp5);\n        isZero = 0xff - temp5 < 0;\n        carryFlag = temp5 == 0xff;\n      }\n      if (!carryFlag && isZero == overflowFlag) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!carryFlag && isZero == overflowFlag) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      carryFlag = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      isZero = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = temp1 <= temp2;\n      if (!isZero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)isZero;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        isZero = temp1 >> 1 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 1;\n        }\n        isZero = temp1 >> 2 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 2;\n        }\n        isZero = temp1 >> 3 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZero = temp2 == 0;\n        if (!isZero) {\n          temp6 = temp6 >> 4;\n          isZero = temp6 == 0;\n        }\n      } while (!isZero);\n      carryFlag = SBORROW4(temp4,0xfd);\n      isZero = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)temp6 < 0 != carryFlag) {\n      isZero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "isZero",
                "bVar8": "carryFlag",
                "bVar9": "overflowFlag"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "validate_parameters_08000f9c",
            "code": "\nuint validate_parameters_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_combined_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_combined_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "validate_parameters_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "copy_and_swap_params_08000ffc",
            "code": "\nvoid copyAndSwapParams_08000ffc(undefined4 source,undefined4 destination)\n\n{\n  FUN_08001004(destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "copy_and_swap_params_08000ffc",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_08001004",
            "code": "\nundefined8 concatenate_08001004(undefined4 input1,undefined4 input2)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_08001004",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_non_null_character_08001014",
            "code": "\nbool checkNonNullCharacter_08001014(void)\n\n{\n  char inputCharacter;\n  \n  FUN_08001004();\n  return inputCharacter != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_non_null_character_08001014",
                "in_ZR": "inputCharacter"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_string_null_08001028",
            "code": "\nbool check_if_string_null_08001028(void)\n\n{\n  char input_string;\n  \n  FUN_08001004();\n  return input_string == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_string_null_08001028",
                "in_CY": "input_string"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_cy_zr_08001050",
            "code": "\nbool check_CY_ZR_08001050(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000ffc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_cy_zr_08001050",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_null_termination_08001064",
            "code": "\nbool check_null_termination_08001064(void)\n\n{\n  char input_character;\n  \n  FUN_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_null_termination_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_number_to_positive_08001078",
            "code": "\nuint convertNumberToPositive_08001078(uint num)\n\n{\n  uint shiftedNum;\n  uint negativeAdjustment;\n  \n  if (num << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedNum = (num << 1) >> 0x18;\n  negativeAdjustment = 0x9e - shiftedNum;\n  if (shiftedNum < 0x9f && negativeAdjustment != 0) {\n    shiftedNum = (num << 8 | 0x80000000) >> (negativeAdjustment & 0xff);\n    if ((num & 0x80000000) != 0) {\n      shiftedNum = -shiftedNum;\n    }\n    return shiftedNum;\n  }\n  if ((negativeAdjustment == 0xffffff9f) && ((num & 0x7fffff) != 0)) {\n    return 0;\n  }\n  num = num & 0x80000000;\n  if (num == 0) {\n    num = 0x7fffffff;\n  }\n  return num;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_number_to_positive_08001078",
                "param_1": "num",
                "uVar1": "shiftedNum",
                "uVar2": "negativeAdjustment"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "calculate_shifted_value_080010c4",
            "code": "\nuint calculate_shifted_value_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "calculate_shifted_value_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_function_08001104",
            "code": "\nundefined4 initializeFunction_08001104(undefined4 inputValue)\n\n{\n  uint result;\n  \n  result = FUN_08002214();\n  FUN_08001214(result / 1000);\n  FUN_08001194(0xffffffff,inputValue,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_function_08001104",
                "param_1": "inputValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "setup_and_initialize_08001128",
            "code": "\n\n\nundefined4 setup_and_initialize_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "setup_and_initialize_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_variable_0800115c",
            "code": "\nundefined4 get_data_variable_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_variable_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_memory_region_permissions_08001170",
            "code": "\n\n\nvoid setMemoryRegionPermissions_08001170(uint permissions)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (permissions & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_memory_region_permissions_08001170",
                "param_1": "permissions"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "apply_parameter_mask_08001194",
            "code": "\n\n\nvoid applyParameterMask_08001194(uint input_value,uint mask_value,uint data_value)\n\n{\n  undefined masked_data;\n  uint shift_amount;\n  uint masked_shift;\n  uint shifted_mask;\n  \n  masked_shift = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - masked_shift;\n  shifted_mask = masked_shift + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (shifted_mask < 7) {\n    masked_shift = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < shifted_mask) {\n    masked_shift = masked_shift - 3;\n  }\n  masked_data = (undefined)\n          ((data_value & (1 << (masked_shift & 0xff)) - 1U | (mask_value & shift_amount) << (masked_shift & 0xff)) << 4);\n  if (-1 < (int)input_value) {\n    masked_shift = input_value + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    masked_shift = input_value & 0xf;\n  }\n  if (-1 < (int)input_value) {\n    *(undefined *)(masked_shift + 0x300) = masked_data;\n  }\n  else {\n    *(undefined *)(shift_amount + masked_shift) = masked_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "apply_parameter_mask_08001194",
                "param_1": "input_value",
                "param_2": "mask_value",
                "param_3": "data_value",
                "uVar1": "masked_data",
                "uVar2": "shift_amount",
                "uVar3": "masked_shift",
                "uVar4": "shifted_mask"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "check_input_range_08001214",
            "code": "\n\n\nundefined4 checkInputRange_08001214(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "check_input_range_08001214",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_if_param_is_four_08001240",
            "code": "\n\n\nvoid setFlagIfParamIsFour_08001240(int inputValue)\n\n{\n  if (inputValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_if_param_is_four_08001240",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_08001264",
            "code": "\n\n\nvoid updateFlags_08001264(uint *flagState,uint *input)\n\n{\n  uint flagValue;\n  uint bitValue;\n  uint caseValue;\n  int index;\n  uint bitIndex;\n  uint mask;\n  uint defaultCaseValue;\n  uint *flagAddress;\n  int shiftAmount;\n  \n  flagValue = 0;\n  bitIndex = 0;\n  do {\n    mask = 1 << (bitIndex & 0xff);\n    bitValue = mask & *input;\n    if (mask == bitValue) {\n      caseValue = input[1];\n      if (caseValue == 0x12) {\n        flagValue = input[3] + 0xc;\n      }\n      else if (caseValue < 0x13) {\n        if (caseValue == 2) {\n          flagValue = input[3] + 8;\n        }\n        else if (caseValue < 3) {\n          if (caseValue == 0) goto LAB_080013be;\n          if (caseValue == 1) {\n            flagValue = input[3];\n          }\n        }\n        else if (caseValue == 3) {\n          flagValue = 0;\n        }\n        else if (caseValue == 0x11) {\n          flagValue = input[3] + 4;\n        }\n      }\n      else {\n        if (caseValue != 0x10210000) {\n          if (caseValue < 0x10210001) {\n            if (caseValue != 0x10110000) {\n              defaultCaseValue = 0x10120000;\nLAB_080013b8:\n              if (caseValue != defaultCaseValue) goto LAB_080012a8;\n            }\n          }\n          else if ((caseValue != 0x10310000) && (caseValue != 0x10320000)) {\n            defaultCaseValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flagValue = input[2];\n        if (flagValue == 0) {\n          flagValue = 4;\n        }\n        else {\n          if (flagValue == 1) {\n            flagState[4] = mask;\n          }\n          if (flagValue != 1) {\n            flagState[5] = mask;\n          }\n          flagValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitValue < 0x100) {\n        mask = *flagState;\n        caseValue = bitIndex << 2;\n        flagAddress = flagState;\n      }\n      else {\n        mask = flagState[1];\n        caseValue = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitValue) {\n        flagAddress = flagState + 1;\n      }\n      *flagAddress = mask & ~(0xf << (caseValue & 0xff)) | flagValue << (caseValue & 0xff);\n      flagAddress = (uint *)input[1];\n      if (((uint)flagAddress & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitIndex & 3) << 2;\n        if (flagState == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flagState == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flagState == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flagState == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             index << shiftAmount | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << shiftAmount);\n        if (((uint)flagAddress & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if (((uint)flagAddress & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if (((uint)flagAddress & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if (((uint)flagAddress & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_08001264",
                "param_1": "flagState",
                "param_2": "input",
                "uVar1": "flagValue",
                "uVar2": "bitValue",
                "uVar3": "caseValue",
                "iVar4": "index",
                "uVar5": "bitIndex",
                "uVar6": "mask",
                "uVar7": "defaultCaseValue",
                "unaff_r10": "flagAddress",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_08001424",
            "code": "\nvoid setParam_08001424(int baseAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(baseAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_08001424",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_update_value_0800142e",
            "code": "\nvoid xorAndUpdateValue_0800142e(int pointerToValue,uint newValue)\n\n{\n  *(uint *)(pointerToValue + 0xc) = newValue ^ *(uint *)(pointerToValue + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_update_value_0800142e",
                "param_1": "pointerToValue",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_flags_and_values_08001436",
            "code": "\nundefined4 updateFlagsAndValues_08001436(int *inputArray)\n\n{\n  int value;\n  \n  value = *inputArray;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n    *(undefined *)(inputArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_flags_and_values_08001436",
                "param_1": "inputArray",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_validity_08001460",
            "code": "\nundefined4 checkValidity_08001460(uint **data,uint flag,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint value;\n  uint *ptr;\n  \n  startTime = FUN_0800115c();\n  do {\n    ptr = *data;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = ptrValue1;\n    }\n    else {\n      value = ptrValue2;\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(ptrValue1 << 0x15) < 0) {\n      *ptr = *ptr | 0x200;\n      ptrValue1 = ptrValue1 & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_validity_08001460",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "value",
                "puVar4": "ptr",
                "puVar4[5]": "ptrValue1",
                "puVar4[6]": "ptrValue2"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_data_validity_080014e2",
            "code": "\nundefined4 checkDataValidity_080014e2(int *data,uint dataSize)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*data + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result2 = FUN_08001436(data);\n    if (result2 != 0) break;\n    if ((dataSize != 0xffffffff) &&\n       ((dataSize == 0 || (result2 = FUN_0800115c(), dataSize < (uint)(result2 - result1))))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_data_validity_080014e2",
                "param_1": "data",
                "param_2": "dataSize",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flag_bits_08001530",
            "code": "\nundefined4 updateFlagBits_08001530(uint **ptrToPtr,uint value1,uint value2,int condition,uint param)\n\n{\n  int result1;\n  int result2;\n  uint *ptrValue;\n  uint **ptrToPtrPtr;\n  uint tempValue1;\n  uint tempValue2;\n  \n  **ptrToPtr = **ptrToPtr | 0x100;\n  ptrToPtrPtr = ptrToPtr;\n  tempValue1 = value1;\n  tempValue2 = value2;\n  result1 = FUN_0800115c();\n  do {\n    ptrValue = *ptrToPtr;\n    do {\n      if ((int)(ptrValue[5] << 0x1f) < 0) {\n        ptrValue[4] = value1 & 0xfe;\n        result1 = FUN_08001460(ptrToPtr,0x10002,param,ptrValue,ptrToPtrPtr,tempValue1,tempValue2);\n        if (result1 == 0) {\n          result1 = FUN_080014e2(ptrToPtr,param,(*ptrToPtr)[5],(*ptrToPtr)[6]);\n          if (result1 == 0) {\n            ptrValue = *ptrToPtr;\n            if (condition == 1) {\nLAB_080015ca:\n              ptrValue[4] = value2 & 0xff;\n              return 0;\n            }\n            ptrValue[4] = value2 >> 8;\n            result1 = FUN_080014e2(ptrToPtr,param);\n            if (result1 == 0) {\n              ptrValue = *ptrToPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (ptrToPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **ptrToPtr = **ptrToPtr | 0x200;\n        }\n        else if (ptrToPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (result2 = FUN_0800115c(), param < (uint)(result2 - result1))) {\n      *(undefined *)((int)ptrToPtr + 0x35) = 0x20;\n      *(undefined *)(ptrToPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flag_bits_08001530",
                "param_1": "ptrToPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "param",
                "iVar1": "result1",
                "iVar2": "result2",
                "puVar3": "ptrValue",
                "ppuVar4": "ptrToPtrPtr",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **data,uint value1,uint value2,int flag,uint timeout)\n\n{\n  int result;\n  int currentValue;\n  uint *ptrData;\n  uint **ptrPtrData;\n  uint paramValue1;\n  uint paramValue2;\n  \n  ptrData = *data;\n  *ptrData = *ptrData | 0x400;\n  *ptrData = *ptrData | 0x100;\n  ptrPtrData = data;\n  paramValue1 = value1;\n  paramValue2 = value2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  ptrData = *data;\n  while (-1 < (int)(ptrData[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  ptrData[4] = value1 & 0xfe;\n  result = FUN_08001460(data,0x10002,timeout,ptrData,ptrPtrData,paramValue1,paramValue2);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(data,timeout,(*data)[5],(*data)[6]);\n  if (result == 0) {\n    ptrData = *data;\n    if (flag != 1) {\n      ptrData[4] = value2 >> 8;\n      result = FUN_080014e2(data,timeout);\n      if (result != 0) goto LAB_08001642;\n      ptrData = *data;\n    }\n    ptrData[4] = value2 & 0xff;\n    result = FUN_080014e2(data,timeout);\n    if (result == 0) {\n      **data = **data | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            result = FUN_08001460(data,0x10002,timeout);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentValue = FUN_0800115c(), (uint)(currentValue - result) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentValue = FUN_0800115c(), timeout < (uint)(currentValue - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "timeout",
                "iVar1": "result",
                "iVar2": "currentValue",
                "puVar3": "ptrData",
                "ppuVar4": "ptrPtrData",
                "uVar5": "paramValue1",
                "uVar6": "paramValue2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_and_modify_status_080016f4",
            "code": "\nundefined4 checkAndModifyStatus_080016f4(int *statusPtr,uint size)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  initialValue = FUN_0800115c();\n  while( true ) {\n    currentValue = *statusPtr;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((size == 0) || (currentValue = FUN_0800115c(), size < (uint)(currentValue - initialValue))) {\n      statusPtr[0xe] = statusPtr[0xe] | 0x20;\n      *(undefined *)((int)statusPtr + 0x35) = 0x20;\n      *(undefined *)(statusPtr + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  statusPtr[0xe] = 0;\n  *(undefined *)(statusPtr + 0xd) = 0;\n  *(undefined *)((int)statusPtr + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_and_modify_status_080016f4",
                "param_1": "statusPtr",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_param_08001754",
            "code": "\nundefined4 initializeParam_08001754(uint **param)\n\n{\n  uint quotient;\n  uint remainder;\n  uint *paramPtr1;\n  uint *paramPtr2;\n  uint *paramPtr3;\n  uint divisor;\n  undefined8 result;\n  \n  if (param != (uint **)0x0) {\n    if (*(char *)((int)param + 0x35) == '\\0') {\n      *(undefined *)(param + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)param + 0x35) = 0x24;\n    **param = **param & 0xfffffffe;\n    result = FUN_08002220();\n    remainder = (uint)((ulonglong)result >> 0x20);\n    quotient = (uint)result;\n    paramPtr2 = param[1];\n    divisor = quotient / 1000000;\n    if ((uint *)0x186a0 < paramPtr2) {\n      remainder = 300;\n    }\n    paramPtr1 = *param;\n    if ((uint *)0x186a0 < paramPtr2) {\n      remainder = divisor * remainder;\n    }\n    paramPtr1[1] = divisor;\n    if ((uint *)0x186a0 < paramPtr2) {\n      divisor = remainder / 1000;\n    }\n    paramPtr1[8] = divisor + 1;\n    if (paramPtr2 < (uint *)0x186a1) {\n      quotient = quotient / (uint)((int)paramPtr2 << 1);\n      if ((quotient & 0xfff) < 4) {\n        quotient = 4;\n      }\n    }\n    else {\n      if (param[2] == (uint *)0x0) {\n        quotient = quotient / (uint)((int)paramPtr2 * 3) | 0x8000;\n      }\n      else {\n        quotient = quotient / (uint)((int)paramPtr2 * 0x19) | 0xc000;\n      }\n      if ((quotient & 0xfff) == 0) {\n        quotient = 1;\n      }\n    }\n    paramPtr2 = param[8];\n    paramPtr3 = param[7];\n    paramPtr1[7] = quotient;\n    *paramPtr1 = (uint)paramPtr3 | (uint)paramPtr2;\n    paramPtr1[2] = (uint)param[4] | (uint)param[3];\n    paramPtr1[3] = (uint)param[5] | (uint)param[6];\n    *paramPtr1 = *paramPtr1 | 1;\n    param[0xe] = (uint *)0x0;\n    *(undefined *)((int)param + 0x35) = 0x20;\n    *(undefined *)((int)param + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_param_08001754",
                "param_1": "param",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "puVar3": "paramPtr1",
                "puVar4": "paramPtr2",
                "puVar5": "paramPtr3",
                "uVar6": "divisor",
                "uVar7": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,byte *byteData,\n            short byteCount,undefined4 param4)\n\n{\n  int counter1;\n  int counter2;\n  uint *ptrData;\n  uint tempVar;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (byteData == (byte *)0x0) {\n      return 1;\n    }\n    if (byteCount == 0) {\n      return 1;\n    }\n    counter1 = FUN_0800115c();\n    do {\n      ptrData = *data;\n      if ((~ptrData[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        tempVar = *ptrData;\n        *(undefined *)(data + 0xd) = 1;\n        *ptrData = tempVar & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        counter1 = FUN_08001530(data,param1,param2,param3,param4);\n        if (counter1 != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      counter2 = FUN_0800115c();\n    } while ((uint)(counter2 - counter1) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteCount != 0) {\nLAB_080018e2:\n    counter1 = FUN_080014e2(data,param4);\n    if (counter1 != 0) goto LAB_080018ee;\n    ptrData = *data;\n    ptrData[4] = (uint)*byteData;\n    if ((int)(ptrData[5] << 0x1d) < 0) {\n      if ((short)(byteCount + -1) == 0) break;\n      byteCount = byteCount + -2;\n      ptrData[4] = (uint)byteData[1];\n      byteData = byteData + 2;\n    }\n    else {\n      byteData = byteData + 1;\n      byteCount = byteCount + -1;\n    }\n  }\n  counter1 = FUN_080014e2(data,param4);\n  if (counter1 == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "byteData",
                "param_6": "byteCount",
                "param_7": "param4",
                "iVar1": "counter1",
                "iVar2": "counter2",
                "puVar3": "ptrData",
                "uVar4": "tempVar"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort length,uint timeout)\n\n{\n  undefined *ptr1;\n  int startTime;\n  int currentTime;\n  uint *ptr;\n  uint value;\n  undefined *ptr2;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  startTime = FUN_0800115c();\n  while (ptr = *data, (~ptr[6] & 2) == 0) {\n    currentTime = FUN_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  startTime = FUN_080015e8(data,param2,param3,param4,timeout);\n  if (startTime != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr = *data;\n  value = *ptr;\n  if (length == 1) {\n    *ptr = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    startTime = FUN_080016f4(data,timeout);\n    if (startTime == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *ptr = value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr = value | 0x400;\n    while (3 < length) {\n      startTime = FUN_080016f4(data,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      ptr = *data;\n      flag = (int)(ptr[5] << 0x1d) < 0;\n      if (flag) {\n        ptr = (uint *)ptr[4];\n        ptr2 = output + 2;\n        length = length - 2;\n      }\n      else {\n        ptr2 = output + 1;\n        length = length - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr2;\n      if (flag) {\n        *ptr1 = (char)ptr;\n      }\n    }\n    if (length != 2) {\n      startTime = FUN_0800115c();\n      do {\n        ptr = *data;\n        do {\n          if ((int)(ptr[5] << 0x1d) < 0) {\n            *ptr = *ptr & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*data)[4];\n            startTime = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr = *data;\n        *ptr = *ptr | 0x200;\n        *output = (char)ptr[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr = *data;\n    do {\n      if ((int)(ptr[5] << 0x1d) < 0) {\n        *ptr = *ptr | 0x200;\n        output[1] = (char)ptr[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "ptr",
                "uVar5": "value",
                "puVar6": "ptr2",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "process_data_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 processData_08001b58(int *inputData)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if (*inputData << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (inputData[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempVar1 = inputData[1];\n      if (tempVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (tempVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          tempVar1 = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            tempVar2 = FUN_0800115c();\n            if (100 < (uint)(tempVar2 - tempVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (tempVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      tempVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        tempVar2 = FUN_0800115c();\n        if (100 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*inputData << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (inputData[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = inputData[4];\n      if (iRam42420000 == 0) {\n        tempVar1 = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          tempVar2 = FUN_0800115c();\n          if (2 < (uint)(tempVar2 - tempVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      tempVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        tempVar2 = FUN_0800115c();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = inputData[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*inputData << 0x1c < 0) {\n    iRam42420480 = inputData[6];\n    if (iRam42420480 == 0) {\n      tempVar1 = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        tempVar2 = FUN_0800115c();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      tempVar1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        tempVar2 = FUN_0800115c();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *inputData << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  tempVar1 = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    tempVar2 = FUN_0800115c();\n    if (100 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\n  tempVar1 = inputData[3];\n  if (tempVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (tempVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      tempVar1 = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        tempVar2 = FUN_0800115c();\n        if (5000 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (tempVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  tempVar1 = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    tempVar2 = FUN_0800115c();\n    if (5000 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (inputData[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (inputData[7] != 2) {\n      uRam42420060 = 0;\n      tempVar1 = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        tempVar2 = FUN_0800115c();\n      } while ((uint)(tempVar2 - tempVar1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    tempVar1 = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (inputData[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | inputData[2];\n        }\n        _DAT_40021004 = inputData[8] | inputData[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        tempVar1 = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          tempVar2 = FUN_0800115c();\n        } while ((uint)(tempVar2 - tempVar1) < 3);\n        return 3;\n      }\n      tempVar2 = FUN_0800115c();\n    } while ((uint)(tempVar2 - tempVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "process_data_08001b58",
                "param_1": "inputData",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "initialize_mpu9250_08002008",
            "code": "\n\n\nint initializeMPU9250_08002008(void)\n\n{\n  undefined4 value1;\n  int result;\n  undefined4 value2;\n  undefined4 *source;\n  uint clockSpeed;\n  undefined4 *destination;\n  byte flags [4];\n  undefined4 dataBuffer [5];\n  \n  source = &DAT_080072f0;\n  destination = dataBuffer;\n  do {\n    value1 = *source;\n    value2 = source[1];\n    source = source + 2;\n    *destination = value1;\n    destination[1] = value2;\n    destination = destination + 2;\n  } while (source != (undefined4 *)\"../Src/MPU9250.c\");\n  flags[0] = 1;\n  flags[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockSpeed = 8000000 / flags[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockSpeed = 4000000;\n    }\n    result = clockSpeed * *(byte *)((int)dataBuffer + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "initialize_mpu9250_08002008",
                "uVar1": "value1",
                "iVar2": "result",
                "uVar3": "value2",
                "puVar4": "source",
                "uVar5": "clockSpeed",
                "puVar6": "destination",
                "local_24": "flags",
                "local_20": "dataBuffer"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "process_data_0800209c",
            "code": "\n\n\nundefined4 process_data_0800209c(uint *data_ptr,uint data_length)\n\n{\n  char condition_1;\n  char condition_2;\n  int bit_shift;\n  uint temp_var_1;\n  int temp_var_2;\n  uint temp_var_3;\n  \n  if ((data_length <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length == (data_length & 7))) {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_ptr[2];\n    }\n    bit_shift = *data_ptr << 0x1f;\n    if (-1 < bit_shift) {\nLAB_080020ba:\n      if ((data_length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length != (data_length & 7))) {\n        return 1;\n      }\n      if ((*data_ptr & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_ptr[3];\n      }\n      if ((int)(*data_ptr << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_ptr[4] << 3;\n      }\n      temp_var_1 = FUN_08002008();\n      DAT_200001bc = temp_var_1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    temp_var_1 = data_ptr[1];\n    if (temp_var_1 == 1) {\n      condition_2 = '\\x01';\n      condition_1 = '\\0';\n    }\n    else {\n      temp_var_3 = _DAT_40021000;\n      if (temp_var_1 == 2) goto LAB_08002176;\n      condition_2 = '\\0';\n      condition_1 = '\\x01';\n    }\n    temp_var_3 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(condition_1 << 6) << 0x18 | (uint)(byte)(condition_2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)temp_var_3 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temp_var_1;\n      bit_shift = FUN_0800115c(bit_shift,temp_var_3);\n      if (data_ptr[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          temp_var_2 = FUN_0800115c();\n        } while ((uint)(temp_var_2 - bit_shift) < 0x1389);\n      }\n      else if (data_ptr[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          temp_var_2 = FUN_0800115c();\n        } while ((uint)(temp_var_2 - bit_shift) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          temp_var_2 = FUN_0800115c();\n        } while ((uint)(temp_var_2 - bit_shift) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "process_data_0800209c",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "cVar1": "condition_1",
                "cVar2": "condition_2",
                "iVar3": "bit_shift",
                "uVar4": "temp_var_1",
                "iVar5": "temp_var_2",
                "uVar6": "temp_var_3"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_dat_value_08002214",
            "code": "\nundefined4 get_dat_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_dat_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_data_08002220",
            "code": "\n\n\nuint get_shifted_data_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_data_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extracted_value_08002250",
            "code": "\n\n\nuint extracted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extracted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "set_flags_and_values_08002280",
            "code": "\nvoid setFlagsAndValues_08002280(int functionParameter,uint *dataArray)\n\n{\n  uint modifiedFlags1;\n  uint modifiedFlags2;\n  uint dataValue;\n  \n  *(uint *)(functionParameter + 0x20) = *(uint *)(functionParameter + 0x20) & 0xfffffffe;\n  modifiedFlags2 = *(uint *)(functionParameter + 4);\n  dataValue = *dataArray;\n  modifiedFlags1 = *(uint *)(functionParameter + 0x20) & 0xfffffffd | dataArray[2];\n  if (functionParameter == 0x40012c00) {\n    modifiedFlags1 = (modifiedFlags1 & 0xfffffff7 | dataArray[3]) & 0xfffffffb;\n    modifiedFlags2 = modifiedFlags2 & 0xfffffcff | dataArray[5] | dataArray[6];\n  }\n  *(uint *)(functionParameter + 4) = modifiedFlags2;\n  *(uint *)(functionParameter + 0x18) = *(uint *)(functionParameter + 0x18) & 0xffffff8c | dataValue;\n  *(uint *)(functionParameter + 0x34) = dataArray[1];\n  *(uint *)(functionParameter + 0x20) = modifiedFlags1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "set_flags_and_values_08002280",
                "param_1": "functionParameter",
                "param_2": "dataArray",
                "uVar1": "modifiedFlags1",
                "uVar2": "modifiedFlags2",
                "uVar3": "dataValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_data_080022d0",
            "code": "\nvoid updateData_080022d0(int dataAddress,uint *dataArray)\n\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffeff;\n  var2 = *(uint *)(dataAddress + 4);\n  var3 = *dataArray;\n  var1 = *(uint *)(dataAddress + 0x20) & 0xfffffdff | dataArray[2] << 8;\n  if (dataAddress == 0x40012c00) {\n    var1 = (var1 & 0xfffff7ff | dataArray[3] << 8) & 0xfffffbff;\n    var2 = var2 & 0xffffcfff | (dataArray[5] | dataArray[6]) << 4;\n  }\n  *(uint *)(dataAddress + 4) = var2;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffffff8c | var3;\n  *(uint *)(dataAddress + 0x3c) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = var1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_data_080022d0",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_param_values_08002324",
            "code": "\nvoid updateParamValues_08002324(int param1,int *param2)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int defaultVar;\n  \n  *(uint *)(param1 + 0x20) = *(uint *)(param1 + 0x20) & 0xffffefff;\n  value1 = *(uint *)(param1 + 4);\n  value2 = *param2;\n  value3 = param2[2];\n  defaultVar = 0x40012c00;\n  if (param1 == 0x40012c00) {\n    defaultVar = param2[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (param1 == 0x40012c00) {\n    value1 = value1 | defaultVar << 6;\n  }\n  *(uint *)(param1 + 4) = value1;\n  *(uint *)(param1 + 0x1c) = *(uint *)(param1 + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(param1 + 0x40) = param2[1];\n  *(uint *)(param1 + 0x20) = *(uint *)(param1 + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_param_values_08002324",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "defaultVar"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_values_08002368",
            "code": "\nvoid updateMemoryValues_08002368(uint *memoryPointer,uint *memoryData)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryPointer;\n  if (((((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n       (memoryPointer == (uint *)0x40000400)) || (memoryPointer == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | memoryData[1], memoryPointer == (uint *)0x40012c00 ||\n       (memoryPointer == (uint *)0x40000000)) ||\n      ((memoryPointer == (uint *)0x40000400 || (memoryPointer == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | memoryData[3];\n  }\n  *memoryPointer = updatedValue;\n  memoryPointer[0xb] = memoryData[2];\n  memoryPointer[10] = *memoryData;\n  updatedValue = 0x40012c00;\n  if (memoryPointer == (uint *)0x40012c00) {\n    updatedValue = memoryData[4];\n  }\n  if (memoryPointer == (uint *)0x40012c00) {\n    memoryPointer[0xc] = updatedValue;\n  }\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_values_08002368",
                "param_1": "memoryPointer",
                "param_2": "memoryData",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_and_execute_080023d0",
            "code": "\nundefined4 updateAndExecute_080023d0(undefined4 *parameter)\n\n{\n  if (parameter != (undefined4 *)0x0) {\n    if (*(char *)((int)parameter + 0x39) == '\\0') {\n      *(undefined *)(parameter + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)parameter + 0x39) = 2;\n    FUN_08002368(*parameter,parameter + 1);\n    *(undefined *)((int)parameter + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_and_execute_080023d0",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int functionAddress,int *parameters)\n\n{\n  uint mask1;\n  uint mask2;\n  int paramValue;\n  \n  *(uint *)(functionAddress + 0x20) = *(uint *)(functionAddress + 0x20) & 0xffffffef;\n  mask2 = *(uint *)(functionAddress + 4);\n  paramValue = *parameters;\n  mask1 = *(uint *)(functionAddress + 0x20) & 0xffffffdf | param2Value << 4;\n  if (functionAddress == 0x40012c00) {\n    mask1 = (mask1 & 0xffffff7f | param3Value << 4) & 0xffffffbf;\n    mask2 = mask2 & 0xfffff3ff | (param5Value | param6Value) << 2;\n  }\n  *(uint *)(functionAddress + 4) = mask2;\n  *(uint *)(functionAddress + 0x18) = *(uint *)(functionAddress + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(functionAddress + 0x38) = parameters[1];\n  *(uint *)(functionAddress + 0x20) = mask1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "functionAddress",
                "param_2": "parameters",
                "uVar1": "mask1",
                "uVar2": "mask2",
                "iVar3": "paramValue",
                "param_2[2]": "param2Value",
                "param_2[3]": "param3Value",
                "param_2[5]": "param5Value",
                "param_2[6]": "param6Value"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_status_0800245c",
            "code": "\nvoid updateStatus_0800245c(int *statusPtr,undefined4 param2,undefined4 param3)\n\n{\n  int extraout1;\n  int extraout2;\n  int extraout3;\n  int extraout4;\n  int iVar1;\n  uint updatedValue;\n  int updatedPtr;\n  \n  if (*(char *)(statusPtr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)statusPtr + 0x39) = 2;\n  *(undefined *)(statusPtr + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    FUN_08002280(*statusPtr);\n    updatedPtr = *statusPtr;\n    updatedValue = *(uint *)(extraout1 + 0x10);\n    *(uint *)(updatedPtr + 0x18) = *(uint *)(updatedPtr + 0x18) | 8;\n    *(uint *)(updatedPtr + 0x18) = *(uint *)(updatedPtr + 0x18) & 0xfffffffb;\n    updatedValue = *(uint *)(updatedPtr + 0x18) | updatedValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*statusPtr);\n    updatedPtr = *statusPtr;\n    iVar1 = *(int *)(extraout2 + 0x10);\n    *(uint *)(updatedPtr + 0x18) = *(uint *)(updatedPtr + 0x18) | 0x800;\n    *(uint *)(updatedPtr + 0x18) = *(uint *)(updatedPtr + 0x18) & 0xfffffbff;\n    updatedValue = *(uint *)(updatedPtr + 0x18) | iVar1 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*statusPtr);\n    updatedPtr = *statusPtr;\n    updatedValue = *(uint *)(extraout3 + 0x10);\n    *(uint *)(updatedPtr + 0x1c) = *(uint *)(updatedPtr + 0x1c) | 8;\n    *(uint *)(updatedPtr + 0x1c) = *(uint *)(updatedPtr + 0x1c) & 0xfffffffb;\n    updatedValue = *(uint *)(updatedPtr + 0x1c) | updatedValue;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*statusPtr);\n    updatedPtr = *statusPtr;\n    iVar1 = *(int *)(extraout4 + 0x10);\n    *(uint *)(updatedPtr + 0x1c) = *(uint *)(updatedPtr + 0x1c) | 0x800;\n    *(uint *)(updatedPtr + 0x1c) = *(uint *)(updatedPtr + 0x1c) & 0xfffffbff;\n    updatedValue = *(uint *)(updatedPtr + 0x1c) | iVar1 << 8;\nLAB_080024fa:\n    *(uint *)(updatedPtr + 0x1c) = updatedValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(updatedPtr + 0x18) = updatedValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)statusPtr + 0x39) = 1;\n  *(undefined *)(statusPtr + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_status_0800245c",
                "param_1": "statusPtr",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extraout1",
                "extraout_r1_00": "extraout2",
                "extraout_r1_01": "extraout3",
                "extraout_r1_02": "extraout4",
                "uVar2": "updatedValue",
                "iVar3": "updatedPtr"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bits_08002520",
            "code": "\nvoid updateBits_08002520(int data,uint position,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (position & 0xff));\n  *(uint *)(data + 0x20) = value << (position & 0xff) | *(uint *)(data + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bits_08002520",
                "param_1": "data",
                "param_2": "position",
                "param_3": "value"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_flags_08002538",
            "code": "\nundefined4 initializeFlags_08002538(uint **ptrArray,undefined4 value)\n\n{\n  uint defaultFlagValue;\n  uint *ptrValue;\n  \n  FUN_08002520(*ptrArray,value,1);\n  ptrValue = *ptrArray;\n  defaultFlagValue = 0x40012c00;\n  if (ptrValue == (uint *)0x40012c00) {\n    defaultFlagValue = uRam40012c44 | 0x8000;\n  }\n  if (ptrValue == (uint *)0x40012c00) {\n    ptrValue[0x11] = defaultFlagValue;\n  }\n  *ptrValue = *ptrValue | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_flags_08002538",
                "param_1": "ptrArray",
                "param_2": "value",
                "uVar1": "defaultFlagValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "process_data_08002564",
            "code": "\nundefined4 processData_08002564(int *inputData,uint *bitmask)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(inputData + 0xe) != '\\x01') {\n    *(undefined *)((int)inputData + 0x39) = 2;\n    *(uint *)(*inputData + 0x44) =\n         *bitmask | bitmask[1] | bitmask[2] | bitmask[3] | bitmask[4] | bitmask[5] | bitmask[6];\n    *(undefined *)((int)inputData + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(inputData + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "process_data_08002564",
                "param_1": "inputData",
                "param_2": "bitmask",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 updatePermissions_080025a4(int *permissionArray,uint *permissionMask)\n\n{\n  uint mask1;\n  undefined4 result;\n  int baseAddress;\n  uint mask0;\n  \n  result = 2;\n  if (*(char *)(permissionArray + 0xe) != '\\x01') {\n    *(undefined *)((int)permissionArray + 0x39) = 2;\n    baseAddress = *permissionArray;\n    mask0 = *permissionMask;\n    mask1 = permissionMask[1];\n    *(uint *)(baseAddress + 4) = *(uint *)(baseAddress + 4) & 0xffffff8f;\n    *(uint *)(baseAddress + 4) = *(uint *)(baseAddress + 4) | mask0;\n    *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff7f;\n    *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) | mask1;\n    *(undefined *)((int)permissionArray + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissionArray + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "permissionArray",
                "param_2": "permissionMask",
                "uVar1": "mask1",
                "uVar2": "result",
                "iVar3": "baseAddress",
                "uVar4": "mask0"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_data_080025e8",
            "code": "\nvoid updateData_080025e8(int *dataPtr)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  int tempVar5;\n  int dataValue;\n  \n  dataValue = *dataPtr;\n  tempVar3 = dataPtr[4];\n  *(uint *)(dataValue + 0x10) = *(uint *)(dataValue + 0x10) & 0xffffcfff | dataPtr[3];\n  *(uint *)(dataValue + 0xc) = dataPtr[2] | tempVar3 | dataPtr[5] | *(uint *)(dataValue + 0xc) & 0xffffe9f3;\n  *(uint *)(dataValue + 0x14) = *(uint *)(dataValue + 0x14) & 0xfffffcff | dataPtr[6];\n  if (dataValue == 0x40013800) {\n    tempVar1 = FUN_08002250();\n    tempVar4 = (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(dataPtr[1] << 2)) / 100);\n    tempVar1 = FUN_08002250();\n    tempVar5 = dataPtr[1];\n    tempVar2 = FUN_08002250();\n    tempVar2 = (uint)(tempVar1 * 0x19) / (uint)(tempVar5 << 2) +\n            (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(dataPtr[1] << 2)) / 100) *\n            -100;\n    tempVar1 = FUN_08002250();\n    tempVar3 = (uint)(tempVar1 * 0x19) / (uint)(dataPtr[1] << 2);\n    tempVar1 = FUN_08002250();\n  }\n  else {\n    tempVar1 = FUN_08002220();\n    tempVar4 = (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(dataPtr[1] << 2)) / 100);\n    tempVar1 = FUN_08002220();\n    tempVar5 = dataPtr[1];\n    tempVar2 = FUN_08002220();\n    tempVar2 = (uint)(tempVar1 * 0x19) / (uint)(tempVar5 << 2) +\n            (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(dataPtr[1] << 2)) / 100) *\n            -100;\n    tempVar1 = FUN_08002220();\n    tempVar3 = (uint)(tempVar1 * 0x19) / (uint)(dataPtr[1] << 2);\n    tempVar1 = FUN_08002220();\n  }\n  *(uint *)(dataValue + 8) =\n       (((tempVar3 + (int)(((ulonglong)(uint)(tempVar1 * 0x19) / (ulonglong)(uint)(dataPtr[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (tempVar2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       tempVar4 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_data_080025e8",
                "param_1": "dataPtr",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "iVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "dataValue"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "check_and_update_flags_08002724",
            "code": "\nundefined4 checkAndUpdateFlags_08002724(int *arrayPtr)\n\n{\n  int tempVar;\n  \n  if (arrayPtr != (int *)0x0) {\n    if (*(char *)((int)arrayPtr + 0x39) == '\\0') {\n      *(undefined *)(arrayPtr + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)arrayPtr + 0x39) = 2;\n    *(uint *)(*arrayPtr + 0xc) = *(uint *)(*arrayPtr + 0xc) & 0xffffdfff;\n    FUN_080025e8(arrayPtr);\n    tempVar = *arrayPtr;\n    *(uint *)(tempVar + 0x10) = *(uint *)(tempVar + 0x10) & 0xffffb7ff;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) & 0xffffffd5;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x2000;\n    arrayPtr[0xf] = 0;\n    *(undefined *)((int)arrayPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "check_and_update_flags_08002724",
                "param_1": "arrayPtr",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "decode_and_update_data_0800290c",
            "code": "\nundefined4 decode_and_update_data_0800290c(int *data)\n\n{\n  byte flag;\n  int ptr;\n  uint temp;\n  undefined4 value;\n  short counter;\n  ushort *data_ptr;\n  ushort *new_data_ptr;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptr = *data;\n  data_ptr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      new_data_ptr = data_ptr + 1;\n      *data_ptr = (ushort)((uint)(*(int *)(ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      new_data_ptr = (ushort *)((int)data_ptr + 1);\n      *data_ptr = (ushort)*(int *)(ptr + 4) & 0xff;\n    }\n    data[10] = (int)new_data_ptr;\n  }\n  else {\n    if (data[4] == 0) {\n      flag = (byte)*(undefined4 *)(ptr + 4);\n      data[10] = (int)data_ptr + 1;\n    }\n    else {\n      value = *(undefined4 *)(ptr + 4);\n      data[10] = (int)data_ptr + 1;\n      flag = (byte)value & 0x7f;\n    }\n    *(byte *)data_ptr = flag;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    ptr = *data;\n    *(uint *)(ptr + 0xc) = *(uint *)(ptr + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      temp = *(uint *)(ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptr = 0x12;\n      temp = 0x32;\n    }\n    if (condition) {\n      *(uint *)(ptr + 0xc) = temp;\n      temp = *(uint *)(ptr + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(ptr + 0x14) = temp;\n      ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptr;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "decode_and_update_data_0800290c",
                "param_1": "data",
                "bVar1": "flag",
                "iVar2": "ptr",
                "uVar3": "temp",
                "uVar4": "value",
                "sVar5": "counter",
                "puVar6": "data_ptr",
                "puVar7": "new_data_ptr",
                "bVar8": "condition"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "analyze_data_0800299a",
            "code": "\nvoid analyzeData_0800299a(uint **data)\n\n{\n  uint var1;\n  short var2;\n  uint var3;\n  uint *pointerVar4;\n  undefined var5;\n  uint *pointerVar6;\n  uint var7;\n  bool var8;\n  \n  pointerVar6 = *data;\n  var3 = *pointerVar6;\n  var1 = pointerVar6[3];\n  if ((var3 & 0xf) == 0) {\n    if (((int)(var3 << 0x1a) < 0) && ((int)(var1 << 0x1a) < 0)) {\n      FUN_0800290c();\n      return;\n    }\n  }\n  else {\n    var7 = pointerVar6[5] & 1;\n    if ((var7 != 0) || ((var1 & 0x120) != 0)) {\n      pointerVar6 = (uint *)(var3 << 0x1f);\n      if ((int)pointerVar6 < 0) {\n        var8 = (int)(var1 << 0x17) < 0;\n        if (var8) {\n          pointerVar6 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (var8) {\n          data[0xf] = pointerVar6;\n        }\n      }\n      if (((int)(var3 << 0x1d) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(var3 << 0x1e) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(var3 << 0x1c) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(var3 << 0x1a) < 0) && ((int)(var1 << 0x1a) < 0)) {\n        FUN_0800290c(data);\n      }\n      pointerVar6 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointerVar6[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointerVar6[3] = pointerVar6[3] & 0xfffffedf;\n      pointerVar6[5] = pointerVar6[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(var3 << 0x18) < 0) && ((int)(var1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointerVar4 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointerVar6[1] = *(ushort *)pointerVar4 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointerVar4 = (uint *)((int)pointerVar4 + 2);\n        }\n        else {\n          pointerVar4 = (uint *)((int)pointerVar4 + 1);\n        }\n        data[8] = pointerVar4;\n      }\n      else {\n        data[8] = (uint *)((int)pointerVar4 + 1);\n        pointerVar6[1] = (uint)*(byte *)pointerVar4;\n      }\n      var2 = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = var2;\n      if (var2 == 0) {\n        pointerVar6[3] = pointerVar6[3] & 0xffffff7f;\n        pointerVar6[3] = pointerVar6[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(var3 << 0x19) < 0) && ((int)(var1 << 0x19) < 0)) {\n    pointerVar6[3] = pointerVar6[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      var5 = 0x22;\n    }\n    else {\n      var5 = 1;\n    }\n    *(undefined *)((int)data + 0x39) = var5;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "analyze_data_0800299a",
                "param_1": "data",
                "uVar1": "var1",
                "sVar2": "var2",
                "uVar3": "var3",
                "puVar4": "pointerVar4",
                "uVar5": "var5",
                "puVar6": "pointerVar6",
                "uVar7": "var7",
                "bVar8": "var8"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu_08002b48",
            "code": "\nvoid initializeMPU_08002b48(void)\n\n{\n  undefined4 output;\n  uint inputParameter;\n  int variable1;\n  int variable2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = inputParameter & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  variable2 = (int)DAT_200002f6;\n  variable1 = (int)DAT_200002f8;\n  output = FUN_08000c44();\n  output = FUN_08000cec(output,0x40800000);\n  DAT_200002d0 = FUN_08000cec(output,0x38000000);\n  output = FUN_08000c44(variable2);\n  output = FUN_08000cec(output,0x40800000);\n  DAT_200002d4 = FUN_08000cec(output,0x38000000);\n  output = FUN_08000c44(variable1);\n  output = FUN_08000cec(output,0x40800000);\n  DAT_200002d8 = FUN_08000cec(output,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu_08002b48",
                "in_r3": "inputParameter",
                "iVar2": "variable1",
                "iVar3": "variable2",
                "local_18": "result1",
                "local_14": "result2",
                "uVar1": "output"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 calculatedValue;\n  int lowerResultInt;\n  int combinedStatusInt;\n  undefined4 status;\n  undefined2 result;\n  \n  status = 0;\n  result = 0;\n  FUN_080040e8(0xd0,0x43,&status,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(status._2_1_,status._3_1_);\n  DAT_200002be = CONCAT11((undefined)status,status._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)result,result._1_1_);\n  combinedStatusInt = (int)DAT_200002c0;\n  lowerResultInt = (int)DAT_200002c2;\n  calculatedValue = FUN_08000c44();\n  calculatedValue = FUN_08000cec(calculatedValue,0x447a0000);\n  calculatedValue = FUN_08000cec(calculatedValue,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(calculatedValue,DAT_20000000);\n  calculatedValue = FUN_08000c44(combinedStatusInt);\n  calculatedValue = FUN_08000cec(calculatedValue,0x447a0000);\n  calculatedValue = FUN_08000cec(calculatedValue,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(calculatedValue,DAT_20000004);\n  calculatedValue = FUN_08000c44(lowerResultInt);\n  calculatedValue = FUN_08000cec(calculatedValue,0x447a0000);\n  calculatedValue = FUN_08000cec(calculatedValue,0x38000000);\n  DAT_200002cc = FUN_08000ad8(calculatedValue,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "status",
                "local_1c": "result",
                "iVar3": "combinedStatusInt",
                "iVar2": "lowerResultInt",
                "uVar1": "calculatedValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 result;\n  uint data;\n  \n  data = param4;\n  FUN_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&data,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((data & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((data >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((data >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "local_c": "data"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initializeMPU9250_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int status;\n  undefined4 result1;\n  undefined4 result2;\n  int value;\n  undefined2 firstValue;\n  undefined tempStack1;\n  undefined tempStack2;\n  undefined temp1;\n  undefined temp2;\n  byte localValue;\n  undefined lastStackValue;\n  \n  lastStackValue = (undefined)((uint)param4 >> 0x18);\n  firstValue = 0;\n  tempStack1 = 0;\n  tempStack2 = 0;\n  temp1 = 0;\n  temp2 = 0;\n  localValue = 0;\n  status = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (status << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&firstValue,7,\"../Src/MPU9250.c\",0xda);\n    result2 = DAT_2000001c;\n    if ((int)((uint)localValue << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(tempStack2,tempStack1);\n      DAT_200002bc = CONCAT11(temp2,temp1);\n      value = (int)DAT_200002ba;\n      status = (int)DAT_200002bc;\n      DAT_200002b8 = firstValue;\n      result1 = FUN_08000c44();\n      result1 = FUN_08000cec(result1,result2);\n      result1 = FUN_08000cec(result1,DAT_200002e8);\n      result1 = FUN_08000ad8(result1,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(result1,DAT_2000002c);\n      result1 = FUN_08000c44(value);\n      result1 = FUN_08000cec(result1,result2);\n      result1 = FUN_08000cec(result1,DAT_200002ec);\n      result1 = FUN_08000ad8(result1,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(result1,DAT_20000030);\n      result1 = FUN_08000c44(status);\n      result2 = FUN_08000cec(result1,result2);\n      result2 = FUN_08000cec(result2,DAT_200002f0);\n      result2 = FUN_08000ad8(result2,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(result2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "status",
                "uVar2": "result1",
                "uVar3": "result2",
                "iVar4": "value",
                "local_28": "firstValue",
                "uStack_26": "tempStack1",
                "uStack_25": "tempStack2",
                "local_24": "temp1",
                "local_23": "temp2",
                "local_22": "localValue",
                "uStack_21": "lastStackValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_program_08002ea0",
            "code": "\nvoid initialize_program_08002ea0(undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  undefined4 extra_out;\n  \n  FUN_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,extra_out,unused_param3,unused_param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_program_08002ea0",
                "param_1": "unused_param1",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "extraout_r1": "extra_out"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "initialize_data_08002ec0",
            "code": "\nvoid initializeData_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 data1;\n  undefined4 data2;\n  \n  data1 = DAT_2000024c;\n  data2 = DAT_20000010;\n  result1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  data1 = FUN_08000cec(result1,data1);\n  data2 = FUN_08000cec(data2,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "initialize_data_08002ec0",
                "uVar1": "result1",
                "uVar2": "data1",
                "uVar3": "data2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculateResult_08002ed4(void)\n\n{\n  undefined4 tempFloat;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = uRam20000018;\n  tempFloat = FUN_08000ad8(0x3f800000,uRam20000018);\n  constant1 = FUN_08000cec(tempFloat,constant1);\n  constant2 = FUN_08000cec(constant2,uRam20000014);\n  uRam20000014 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "tempFloat",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "initialize_connection_08002ee8",
            "code": "\nvoid initializeConnection_08002ee8(void)\n\n{\n  undefined4 originalData;\n  int connectionStatus;\n  \n  originalData = DAT_20000250;\n  connectionStatus = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((connectionStatus != 0) && (connectionStatus = FUN_08001028(originalData,0x42b40000), connectionStatus != 0)) {\n    FUN_08000adc(originalData,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(originalData,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "initialize_connection_08002ee8",
                "uVar1": "originalData",
                "iVar2": "connectionStatus"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_system_08002f28",
            "code": "\n\n\nvoid initializeSystem_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  uVar1 = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(uVar1,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = FUN_08002ed4();\n  FUN_08000cec(uVar1,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  uVar1 = FUN_08002ec0();\n  FUN_08000cec(uVar1,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_system_08002f28"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "decomp_to_bytes_08003034",
            "code": "\nuint decomp_to_bytes_08003034(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result;\n  \n  result = input_4;\n  FUN_080040b8(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,input_3);\n  return (uint)concatenate_12((undefined)result,concatenate_11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "decomp_to_bytes_08003034",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "local_c": "result",
                "CONCAT12": "concatenate_12",
                "CONCAT11": "concatenate_11"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_08003068",
            "code": "\nundefined4 get_data_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_08003298",
            "code": "\nvoid initializeSensor_08003298(void)\n\n{\n  int index;\n  undefined byte1;\n  undefined byte2;\n  \n  index = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    FUN_080040e8(0xee,index + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(byte1,byte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_08003298",
                "iVar1": "index",
                "local_1c": "byte1",
                "local_1b": "byte2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_data_08003314",
            "code": "\nvoid initializeData_08003314(undefined4 newValue)\n\n{\n  DAT_2000035c = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_data_08003314",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 inputValue)\n\n{\n  DAT_20000360 = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "process_data_08003330",
            "code": "\nvoid processData_08003330(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined4 param9,undefined4 *outputParams)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  int result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  undefined4 result18;\n  int result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  undefined4 result25;\n  int result26;\n  undefined4 result27;\n  undefined4 result28;\n  undefined4 result29;\n  int result30;\n  undefined8 result31;\n  undefined8 result32;\n  \n  result29 = DAT_20000048;\n  result28 = DAT_20000044;\n  result30 = DAT_20000040;\n  result27 = DAT_2000003c;\n  result1 = FUN_08000cec(param1,param1);\n  result2 = FUN_08000cec(param2);\n  result1 = FUN_08000adc(result1,result2);\n  result2 = FUN_08000cec(param3);\n  FUN_08000adc(result1,result2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result1 = FUN_08000a30();\n  result3 = FUN_08001014(result1,0);\n  if (result3 == 0) {\n    result2 = FUN_08000cec(param7);\n    result4 = FUN_08000cec(param8);\n    result2 = FUN_08000adc(result2,result4);\n    result4 = FUN_08000cec(param9);\n    FUN_08000adc(result2,result4);\n    FUN_08000428();\n    FUN_08005bc8();\n    result2 = FUN_08000a30();\n    result3 = FUN_08001014(result2,0);\n    if (result3 == 0) {\n      result31 = FUN_08000428(param4);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = FUN_08000a30();\n      result31 = FUN_08000428(param5);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = FUN_08000a30();\n      result31 = FUN_08000428(param6);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result6 = FUN_08000a30();\n      result3 = FUN_08000adc(result27);\n      result7 = FUN_08000adc(result30);\n      result8 = FUN_08000adc(result28,result28);\n      result9 = FUN_08000adc(result29,result29);\n      result10 = FUN_08000cec(result27);\n      result11 = FUN_08000cec(result27,result30);\n      result12 = FUN_08000cec(result27,result28);\n      result13 = FUN_08000cec(result30);\n      result14 = FUN_08000cec(result30,result29);\n      result15 = FUN_08000cec(result28,result28);\n      result16 = FUN_08000cec(result29,result29);\n      result1 = FUN_08000e54(0x3f800000,result1);\n      result2 = FUN_08000e54(0x3f800000,result2);\n      result17 = FUN_08000cec(param7,result2);\n      result18 = FUN_08000cec(param8,result2);\n      result2 = FUN_08000cec(param9,result2);\n      result19 = FUN_08000cec(result3,result17);\n      result20 = FUN_08000cec(result3,result18);\n      result21 = FUN_08000cec(result3,result2);\n      result22 = FUN_08000cec(result7,result17);\n      result23 = FUN_08000cec(result10,result17);\n      result24 = FUN_08000cec(result29,result20);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result28,result21);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result13,result17);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result18);\n      result24 = FUN_08000cec(result24,result28);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result15,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result16,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result29,result19);\n      result25 = FUN_08000cec(result10,result18);\n      result24 = FUN_08000adc(result24,result25);\n      result21 = FUN_08000cec(result30,result21);\n      result21 = FUN_08000ad8(result24,result21);\n      result24 = FUN_08000cec(result28,result22);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result13,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result24 = FUN_08000cec(result15,result18);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result8,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result16,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result23 = FUN_08000cec(result23,result23);\n      result21 = FUN_08000cec(result21,result21);\n      FUN_08000adc(result23,result21);\n      FUN_08000428();\n      FUN_08005bc8();\n      result26 = FUN_08000a30();\n      result21 = FUN_08000cec(result19 + -0x80000000,result28);\n      result20 = FUN_08000cec(result30,result20);\n      result20 = FUN_08000adc(result21,result20);\n      result10 = FUN_08000cec(result10,result2);\n      result10 = FUN_08000adc(result20,result10);\n      result20 = FUN_08000cec(result29,result22);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result13,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result8,result18);\n      result20 = FUN_08000cec(result20,result29);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result15,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result16,result2);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000adc(result10,result10);\n      result21 = FUN_08000adc(result14);\n      result22 = FUN_08000cec(result28,result3);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(param1,result1);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(result29,result8);\n      result23 = FUN_08000adc(result11);\n      result22 = FUN_08000adc(result22,result23);\n      result23 = FUN_08000cec(param2,result1);\n      result22 = FUN_08000ad8(result22,result23);\n      result23 = FUN_08000cec(result28,result10);\n      result24 = FUN_08000ad8(0x3f000000,result15);\n      result16 = FUN_08000ad8(result24,result16);\n      result16 = FUN_08000cec(result16,result26);\n      result24 = FUN_08000ad8(result14,result12);\n      result24 = FUN_08000cec(result24,result10);\n      result16 = FUN_08000adc(result16,result24);\n      result16 = FUN_08000ad8(result16,result17);\n      result17 = FUN_08000cec(result30,result10);\n      result24 = FUN_08000cec(result30,result28);\n      result25 = FUN_08000cec(result27,result29);\n      result24 = FUN_08000ad8(result24,result25);\n      result24 = FUN_08000cec(result24,result26);\n      result25 = FUN_08000cec(result28,result29);\n      result11 = FUN_08000adc(result25,result11);\n      result11 = FUN_08000cec(result11,result10);\n      result11 = FUN_08000adc(result24,result11);\n      result11 = FUN_08000ad8(result11,result18);\n      result18 = FUN_08000cec(result28,result26);\n      result24 = FUN_08000ad8(0x3f000000,result13);\n      result24 = FUN_08000ad8(result24,result15);\n      result24 = FUN_08000cec(result24,result10);\n      result12 = FUN_08000adc(result12,result14);\n      result12 = FUN_08000cec(result12,result26);\n      result12 = FUN_08000adc(result24,result12);\n      result2 = FUN_08000ad8(result12,result2);\n      result12 = FUN_08000cec(result8 + -0x80000000,result21);\n      result14 = FUN_08000cec(result7,result22);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result23,result16);\n      result12 = FUN_08000ad8(result12,result14);\n      result14 = FUN_08000cec(result29,result26 + -0x80000000);\n      result14 = FUN_08000adc(result14,result17);\n      result14 = FUN_08000cec(result14,result11);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result18,result2);\n      result12 = FUN_08000adc(result12,result14);\n      result13 = FUN_08000adc(result13);\n      result13 = FUN_08000ad8(0x3f800000,result13);\n      result14 = FUN_08000adc(result15);\n      result13 = FUN_08000ad8(result13,result14);\n      result1 = FUN_08000cec(param3,result1);\n      result1 = FUN_08000ad8(result13,result1);\n      result13 = FUN_08000cec(result29,result10);\n      result10 = FUN_08000cec(result27,result10);\n      result14 = FUN_08000cec(result9,result21);\n      result15 = FUN_08000cec(result3,result22);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result30,0x40800000);\n      result15 = FUN_08000cec(result15,result1);\n      result14 = FUN_08000ad8(result14,result15);\n      result15 = FUN_08000cec(result16,result13);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000adc(result18,result10);\n      result15 = FUN_08000cec(result15,result11);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result29,result26);\n      result18 = FUN_08000cec(result30,result20);\n      result15 = FUN_08000ad8(result15,result18);\n      result15 = FUN_08000cec(result15,result2);\n      result14 = FUN_08000adc(result14,result15);\n      result19 = FUN_08000adc(result26,result26);\n      result15 = FUN_08000cec(result30,result26);\n      result18 = FUN_08000cec(result3 + -0x80000000,result21);\n      result9 = FUN_08000cec(result9,result22);\n      result9 = FUN_08000adc(result18,result9);\n      result18 = FUN_08000cec(result28,0x40800000);\n      result1 = FUN_08000cec(result18,result1);\n      result1 = FUN_08000ad8(result9,result1);\n      result9 = FUN_08000cec(result28,result19 + -0x80000000);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result16);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000adc(result13,result15);\n      result9 = FUN_08000cec(result9,result11);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000cec(result27,result26);\n      result10 = FUN_08000cec(result28,result20);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result2);\n      result9 = FUN_08000adc(result1,result9);\n      result1 = FUN_08000cec(result7,result21);\n      result7 = FUN_08000cec(result8,result22);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result29,result19 + -0x80000000);\n      result7 = FUN_08000adc(result7,result17);\n      result7 = FUN_08000cec(result7,result16);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result27,result26 + -0x80000000);\n      result7 = FUN_08000adc(result7,result23);\n      result7 = FUN_08000cec(result7,result11);\n      result1 = FUN_08000adc(result1,result7);\n      result2 = FUN_08000cec(result2,result15);\n      result7 = FUN_08000adc(result1,result2);\n      result1 = FUN_08000cec(result12);\n      result2 = FUN_08000cec(result14);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result9,result9);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result7,result7);\n      FUN_08000adc(result1,result2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result1 = FUN_08000a30();\n      result10 = FUN_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = FUN_08000cec(result30 + -0x80000000,result4);\n      result11 = FUN_08000cec(result28,result5);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result29,result6);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result2,0x3f000000);\n      result12 = FUN_08000cec(result12,result10);\n      result2 = DAT_20000360;\n      result12 = FUN_08000cec(result12,result1);\n      result11 = FUN_08000ad8(result11,result12);\n      result2 = FUN_08000cec(result11,result2);\n      result11 = FUN_08000adc(result2,result27);\n      result12 = FUN_08000cec(result27,result4);\n      result13 = FUN_08000cec(result28,result6);\n      result2 = DAT_20000360;\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000cec(result29,result5);\n      result12 = FUN_08000ad8(result12,result13);\n      result12 = FUN_08000cec(result12,0x3f000000);\n      result13 = FUN_08000cec(result14,result10);\n      result13 = FUN_08000cec(result13,result1);\n      result12 = FUN_08000ad8(result12,result13);\n      result2 = FUN_08000cec(result12,result2);\n      result12 = FUN_08000adc(result2,result30);\n      result2 = DAT_20000360;\n      result13 = FUN_08000cec(result27,result5);\n      result14 = FUN_08000cec(result30,result6);\n      result13 = FUN_08000ad8(result13,result14);\n      result14 = FUN_08000cec(result29,result4);\n      result13 = FUN_08000adc(result13,result14);\n      result13 = FUN_08000cec(result13,0x3f000000);\n      result9 = FUN_08000cec(result9,result10);\n      result9 = FUN_08000cec(result9,result1);\n      result9 = FUN_08000ad8(result13,result9);\n      result2 = FUN_08000cec(result9,result2);\n      result2 = FUN_08000adc(result2,result28);\n      result27 = FUN_08000cec(result27,result6);\n      result5 = FUN_08000cec(result30,result5);\n      result27 = FUN_08000adc(result27,result5);\n      result28 = FUN_08000cec(result28,result4);\n      result27 = FUN_08000ad8(result27,result28);\n      result28 = FUN_08000cec(result27,0x3f000000);\n      result27 = FUN_08000cec(result7,result10);\n      result1 = FUN_08000cec(result27,result1);\n      result27 = DAT_20000360;\n      result28 = FUN_08000ad8(result28,result1);\n      result27 = FUN_08000cec(result28,result27);\n      result27 = FUN_08000adc(result27,result29);\n      result28 = FUN_08000cec(result11,result11);\n      result29 = FUN_08000cec(result12,result12);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result2,result2);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result27,result27);\n      FUN_08000adc(result28,result29);\n      FUN_08000428();\n      FUN_08005bc8();\n      result28 = FUN_08000a30();\n      result28 = FUN_08000e54(0x3f800000,result28);\n      result29 = FUN_08000cec(result11,result28);\n      DAT_2000003c = result29;\n      result30 = FUN_08000cec(result12,result28);\n      DAT_20000040 = result30;\n      result1 = FUN_08000cec(result2,result28);\n      DAT_20000044 = result1;\n      DAT_20000048 = FUN_08000cec(result27,result28);\n      result27 = FUN_08000cec(result30,DAT_20000048);\n      result28 = FUN_08000cec(result29,result1);\n      result27 = FUN_08000ad8(result27,result28);\n      FUN_08000adc(result27,result27);\n      FUN_08000428();\n      result31 = FUN_08005854();\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      *outputParams = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000ad8(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result1,result2);\n      result31 = FUN_08000428();\n      result27 = FUN_08000cec(result27,result30);\n      result28 = FUN_08000cec(result28,result29);\n      result27 = FUN_08000adc(result27,result28);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      outputParams[1] = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000adc(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result1,result2);\n      result31 = FUN_08000428();\n      result28 = FUN_08000cec(result30,result28);\n      result27 = FUN_08000cec(result27,result29);\n      result27 = FUN_08000adc(result28,result27);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      outputParams[2] = result27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "process_data_08003330",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "outputParams",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "iVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar14": "result14",
                "uVar15": "result15",
                "uVar16": "result16",
                "uVar17": "result17",
                "uVar18": "result18",
                "iVar19": "result19",
                "uVar20": "result20",
                "uVar21": "result21",
                "uVar22": "result22",
                "uVar23": "result23",
                "uVar24": "result24",
                "uVar25": "result25",
                "iVar26": "result26",
                "uVar27": "result27",
                "uVar28": "result28",
                "uVar29": "result29",
                "iVar30": "result30",
                "uVar31": "result31",
                "uVar32": "result32"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to64_bit_08003eb0",
            "code": "\nlonglong convertTo64Bit_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to64_bit_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_update_buffer_08003ec8",
            "code": "\nundefined4 incrementAndUpdateBuffer_08003ec8(int buffer,undefined value)\n\n{\n  *(short *)(buffer + 0x804) = *(short *)(buffer + 0x804) + 1;\n  *(undefined *)(buffer + (uint)*(ushort *)(buffer + 0x802)) = value;\n  *(ushort *)(buffer + 0x802) = *(short *)(buffer + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_update_buffer_08003ec8",
                "param_1": "buffer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flag_08003f3c",
            "code": "\nvoid initializeFlag_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flag_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_global_variable_08003fc4",
            "code": "\nvoid setGlobalVariable_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_global_variable_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid setParam_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid setParamValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_pointer_in_data_08003fe8",
            "code": "\nvoid setPointerInData_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_pointer_in_data_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initializeData_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "execute_loop_08004028",
            "code": "\nvoid executeLoop_08004028(void)\n\n{\n  int loopCounter;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  loopCounter = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    loopCounter = loopCounter + -1;\n  } while (loopCounter != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "execute_loop_08004028",
                "iVar1": "loopCounter"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "perform_i2_c_transaction_0800403c",
            "code": "\nvoid performI2CTransaction_0800403c(undefined4 deviceAddress,undefined4 registerAddress,undefined mode,int performThunks)\n\n{\n  int transactionResult;\n  undefined buffer [8];\n  \n  buffer[0] = mode;\n  transactionResult = FUN_08001828(&DAT_20001504,deviceAddress,registerAddress,1,buffer,1,200);\n  if (transactionResult != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (performThunks != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "perform_i2_c_transaction_0800403c",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "mode",
                "param_4": "performThunks",
                "iVar1": "transactionResult",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "verify_and_execute_0800407c",
            "code": "\nundefined verify_and_execute_0800407c(undefined4 input_param,undefined4 output_param,undefined4 error_param,undefined4 flag_param)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = FUN_08001938(&DAT_20001504,input_param,output_param,1,result,1,200);\n  if (iVar1 != 0) {\n    FUN_08004490(error_param,flag_param);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "verify_and_execute_0800407c",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "error_param",
                "param_4": "flag_param",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "check_and_execute_080040b8",
            "code": "\nvoid checkAndExecute_080040b8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 command1,undefined4 command2)\n\n{\n  int result;\n  \n  result = FUN_08001938(&DAT_20001504,input1,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    FUN_08004490(command1,command2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "check_and_execute_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "command1",
                "param_6": "command2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_bytes_080040e8",
            "code": "\nvoid copyBytes_080040e8(undefined4 inputArray,int startIndex,int outputArray,int length)\n\n{\n  undefined byteValue;\n  int index;\n  undefined *outputPtr;\n  int baseAddress;\n  \n  outputPtr = (undefined *)(outputArray + -1);\n  baseAddress = length;\n  for (index = 0; index < length; index = index + 1) {\n    byteValue = FUN_0800407c(inputArray,startIndex + index & 0xffff,\"../Src/i2c.c\",0x4c,baseAddress);\n    outputPtr = outputPtr + 1;\n    *outputPtr = byteValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_bytes_080040e8",
                "param_1": "inputArray",
                "param_2": "startIndex",
                "param_3": "outputArray",
                "param_4": "length",
                "uVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "outputPtr",
                "iVar4": "baseAddress"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "calculate_values_and_initialize_0800411c",
            "code": "\nvoid calculateValuesAndInitialize_0800411c(void)\n\n{\n  undefined4 *pointer1;\n  longlong longValue;\n  uint value1;\n  uint value2;\n  uint value3;\n  undefined4 result1;\n  undefined4 result2;\n  int integerValue;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempValue3;\n  uint tempValue4;\n  undefined4 *pointer2;\n  undefined4 unaffectedValue;\n  int newIntegerValue;\n  int newIntegerValue2;\n  bool booleanValue;\n  undefined8 result;\n  \n  integerValue = thunk_FUN_0800115c();\n  if (1 < (uint)(integerValue - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  integerValue = thunk_FUN_0800115c();\n  if (2 < (uint)(integerValue - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  integerValue = thunk_FUN_0800115c();\n  if (3 < (uint)(integerValue - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    newIntegerValue2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    tempValue1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)newIntegerValue2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)newIntegerValue2) >> 0x20) << 9;\n    tempValue2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)newIntegerValue2 >> 7);\n    tempValue3 = tempValue2 + (uint)DAT_20000260 * 0x10000;\n    value2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)newIntegerValue2) >> 8);\n    integerValue = tempValue1 + 2000;\n    value3 = value2 + (uint)DAT_2000025e * 0x8000;\n    booleanValue = (int)tempValue1 < 0;\n    if (1999 < integerValue) {\n      tempValue1 = 0;\n    }\n    value1 = tempValue1;\n    if (booleanValue != SBORROW4(integerValue,2000)) {\n      newIntegerValue = tempValue1 * tempValue1 * 5;\n      tempValue1 = newIntegerValue >> 2;\n      value1 = newIntegerValue >> 1;\n    }\n    tempValue4 = tempValue3 - value1;\n    longValue = (ulonglong)(value3 - tempValue1) * (ulonglong)DAT_2000026c;\n    newIntegerValue = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)newIntegerValue2 >> 0x28) +\n               (uint)CARRY4(value2,(uint)DAT_2000025e * 0x8000)) - ((int)tempValue1 >> 0x1f)) -\n             (uint)(value3 < tempValue1)) + (int)((ulonglong)longValue >> 0x20);\n    value2 = (uint)longValue >> 0x15 | newIntegerValue * 0x800;\n    result1 = FUN_08000c44(value2 - tempValue4 >> 0xf |\n                         (((newIntegerValue >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)newIntegerValue2 >> 0x27) +\n                            (uint)CARRY4(tempValue2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value1 >> 0x1f)) - (uint)(tempValue3 < value1))) - (uint)(value2 < tempValue4)\n                         ) * 0x20000);\n    result1 = FUN_08000e54(result1,0x42c80000);\n    DAT_20000354 = result1;\n    result2 = FUN_08000c44(integerValue);\n    DAT_20000358 = FUN_08000e54(result2,0x42c80000);\n    FUN_08000e54(result1,0x447d5000);\n    result = FUN_08000428();\n    result = FUN_08005900((int)result,(int)((ulonglong)result >> 0x20),0x60000000,0x3fc85b95);\n    result = FUN_08000168(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),0,0x40e5a540);\n    result1 = FUN_08000a30();\n    result2 = 0;\n    pointer2 = &DAT_20000300;\n    DAT_20000350 = result1;\n    do {\n      pointer1 = pointer2 + 1;\n      *pointer2 = *pointer1;\n      result2 = FUN_08000adc(result2);\n      pointer2 = pointer1;\n    } while (pointer1 != &DAT_2000034c);\n    DAT_2000034c = result1;\n    result1 = FUN_08000adc(result2,result1);\n    DAT_200002fc = FUN_08000e54(result1,0x41a00000);\n    integerValue = FUN_08001078();\n    DAT_200014ab = integerValue * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  integerValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(integerValue - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedValue);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  integerValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(integerValue - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "calculate_values_and_initialize_0800411c",
                "puVar1": "pointer1",
                "lVar2": "longValue",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar8": "integerValue",
                "uVar9": "tempValue1",
                "uVar10": "tempValue2",
                "uVar11": "tempValue3",
                "uVar12": "tempValue4",
                "puVar13": "pointer2",
                "unaff_r4": "unaffectedValue",
                "iVar14": "newIntegerValue",
                "iVar15": "newIntegerValue2",
                "bVar16": "booleanValue",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_settings_08004194",
            "code": "\nvoid initializeSettings_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_settings_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "loop_until_true_080041ae",
            "code": "\nvoid loopUntilTrue_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "loop_until_true_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initiate_080041c4",
            "code": "\nvoid initiate_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,result,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initiate_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "result"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_four_values_0800426c",
            "code": "\n\n\nvoid calculateFourValues_0800426c(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = FUN_08000ad8();\n  result2 = FUN_08000adc(value1,value2);\n  result3 = FUN_08000ad8(result1,value3);\n  result3 = FUN_08000adc(result3,value4);\n  FUN_08000ad8(result3,0x447a0000);\n  result4 = FUN_08001078();\n  result3 = FUN_08000ad8(result2,value3);\n  result3 = FUN_08000ad8(result3,value4);\n  FUN_08000ad8(result3,0x447a0000);\n  result5 = FUN_08001078();\n  result1 = FUN_08000adc(result1,value3);\n  result1 = FUN_08000ad8(result1,value4);\n  FUN_08000ad8(result1,0x447a0000);\n  result6 = FUN_08001078();\n  result1 = FUN_08000adc(value3,result2);\n  result1 = FUN_08000adc(result1,value4);\n  FUN_08000ad8(result1,0x447a0000);\n  result7 = FUN_08001078();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_four_values_0800426c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "calculate_checksum_08004300",
            "code": "\nvoid calculate_checksum_08004300(uint key,byte *data,uint data_length)\n\n{\n  uint checksum;\n  byte *current_byte;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(data_length & 0xff);\n  checksum = data_length & 0xff ^ key;\n  FUN_08004c18(key);\n  for (current_byte = data; (int)current_byte - (int)data < (int)data_length; current_byte = current_byte + 1) {\n    FUN_08004c18(*current_byte);\n    checksum = checksum ^ *current_byte;\n  }\n  FUN_08004c18(checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "calculate_checksum_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "checksum",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 value1,uint value2,undefined4 value3)\n\n{\n  undefined4 dataAddress;\n  uint maskValue;\n  undefined4 param3Address;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataAddress = 0x40003e9;\n  maskValue = value2 & 0xff000000;\n  param3Address = value3;\n  FUN_08004300(100,&dataAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "local_10": "dataAddress",
                "local_c": "maskValue",
                "uStack_8": "param3Address"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_function_08004384",
            "code": "\n\n\nvoid initializeFunction_08004384(undefined4 arg1,undefined4 arg2,undefined4 arg3,uint arg4)\n\n{\n  undefined4 local_var1;\n  undefined4 local_var2;\n  uint local_var3;\n  \n  _DAT_200013bd = 0x2a0007;\n  local_var1 = _DAT_200013b9;\n  local_var2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  local_var3 = arg4 & 0xff000000;\n  FUN_08004300(0x65,&local_var1,0xb,0,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_function_08004384",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_14": "local_var1",
                "uStack_10": "local_var2",
                "local_c": "local_var3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_data_and_call_function_080043bc",
            "code": "\nvoid copyDataAndCallFunction_080043bc(void)\n\n{\n  undefined4 dataValue1;\n  undefined4 dataValue2;\n  undefined4 *destinationPointer;\n  undefined4 *sourcePointer;\n  undefined4 copiedData [2];\n  undefined2 temporaryBuffer [6];\n  \n  sourcePointer = (undefined4 *)&DAT_2000142a;\n  destinationPointer = copiedData;\n  do {\n    dataValue1 = *sourcePointer;\n    dataValue2 = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = dataValue1;\n    destinationPointer[1] = dataValue2;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationPointer = DAT_2000143a;\n  FUN_08004300(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_data_and_call_function_080043bc",
                "puVar4": "sourcePointer",
                "puVar3": "destinationPointer",
                "local_24": "copiedData",
                "local_1c": "temporaryBuffer",
                "uVar1": "dataValue1",
                "uVar2": "dataValue2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "initialize_data_080043f0",
            "code": "\n\n\nvoid initializeData_080043f0(undefined4 initParam1,undefined4 initParam2,undefined4 initParam3)\n\n{\n  undefined4 dataValue1;\n  undefined4 dataValue2;\n  undefined4 dataArray [2];\n  \n  dataValue1 = _DAT_200013dd;\n  dataValue2 = _DAT_200013e1;\n  dataArray[0] = initParam3;\n  FUN_08004300(0x68,&dataValue1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "initialize_data_080043f0",
                "param_1": "initParam1",
                "param_2": "initParam2",
                "param_3": "initParam3",
                "local_10": "dataValue1",
                "uStack_c": "dataValue2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_data_08004410",
            "code": "\nvoid initializeData_08004410(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 dataPointer;\n  undefined4 combinedValue;\n  undefined4 param3Copy;\n  \n  dataPointer = DAT_20001395;\n  combinedValue = CONCAT22((short)((uint)inputParam2 >> 0x10),DAT_20001399);\n  param3Copy = inputParam3;\n  FUN_08004300(0x6c,&dataPointer,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_data_08004410",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_10": "dataPointer",
                "local_c": "combinedValue",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_data_08004434",
            "code": "\nvoid initializeData_08004434(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_200014ab;\n  data2 = CONCAT22((short)((uint)arg2 >> 0x10),DAT_200014af);\n  data3 = arg3;\n  FUN_08004300(0x6d,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_data_08004434",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_data_and_call_function_08004458",
            "code": "\nvoid copyDataAndCallFunction_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 dataBuffer [3];\n  undefined2 dataBuffer2 [10];\n  \n  destination = dataBuffer;\n  source = &DAT_2000139b;\n  do {\n    srcPtr = source;\n    destPtr = destination;\n    temp = srcPtr[1];\n    *destPtr = *srcPtr;\n    destPtr[1] = temp;\n    destination = destPtr + 2;\n    source = srcPtr + 2;\n  } while (srcPtr + 2 != (undefined4 *)0x200013b3);\n  destPtr[2] = uRam200013b3;\n  *(undefined2 *)(destPtr + 3) = *(undefined2 *)(srcPtr + 3);\n  FUN_08004300(0x70,dataBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_data_and_call_function_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "destPtr",
                "puVar5": "srcPtr",
                "local_30": "dataBuffer",
                "local_24": "dataBuffer2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "handle_errors_08004490",
            "code": "\nvoid handleErrors_08004490(undefined4 errorMessage,undefined4 lineNumber)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(errorMessage);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(lineNumber);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "handle_errors_08004490",
                "param_1": "errorMessage",
                "param_2": "lineNumber"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initializePeripherals_08004514(void)\n\n{\n  int returnValue;\n  uint milliseconds;\n  undefined4 fileOffset;\n  int loopCounter;\n  undefined4 bufferSize;\n  int localVar1;\n  int localVar2;\n  undefined4 localVar3;\n  int localVar4;\n  undefined4 localArray [4];\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  \n  localVar5 = 1;\n  localVar6 = 0x10;\n  loopCounter = 2;\n  localVar8 = 0;\n  localArray[0] = 2;\n  localVar7 = 2;\n  localVar9 = 0x380000;\n  returnValue = FUN_08001b58(localArray);\n  if (returnValue == 0) goto LAB_08004540;\n  fileOffset = 0x3c;\n  while( true ) {\n    returnValue = FUN_08004490(\"../Src/peripherals.c\",fileOffset);\nLAB_08004540:\n    bufferSize = 0xf;\n    localVar3 = 0x400;\n    localVar1 = loopCounter;\n    localVar2 = returnValue;\n    localVar4 = returnValue;\n    loopCounter = FUN_0800209c(&bufferSize,loopCounter);\n    if (loopCounter == 0) break;\n    fileOffset = 0x49;\n  }\n  milliseconds = FUN_08002214();\n  FUN_08001214(milliseconds / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "returnValue",
                "uVar2": "milliseconds",
                "uVar3": "fileOffset",
                "iVar4": "loopCounter",
                "local_44": "bufferSize",
                "local_40": "localVar1",
                "local_3c": "localVar2",
                "local_38": "localVar3",
                "local_34": "localVar4",
                "local_30": "localArray",
                "local_20": "localVar5",
                "local_1c": "localVar6",
                "local_14": "localVar7",
                "local_10": "localVar8",
                "local_c": "localVar9"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripheral_0800458c",
            "code": "\n\n\nvoid initializePeripheral_0800458c(void)\n\n{\n  int result;\n  undefined4 offset;\n  int counter;\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  int temp6;\n  int temp7;\n  int temp8;\n  int temp9;\n  int temp10;\n  int temp11;\n  int temp12;\n  int temp13;\n  undefined4 temp14;\n  int temp15;\n  \n  FUN_08001128();\n  FUN_08004514();\n  counter = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  temp9 = 0xe000;\n  temp10 = 1;\n  temp12 = 2;\n  FUN_08001264(0x40011000,&temp9);\n  temp9 = 0x20;\n  temp10 = 1;\n  temp12 = 2;\n  FUN_08001264(0x40010800,&temp9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = FUN_08001754();\n  if (result == 0) goto LAB_0800463a;\n  offset = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = FUN_08004490(\"../Src/peripherals.c\",offset);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = FUN_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  offset = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = counter;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = FUN_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                offset = 0x88;\n                              }\n                              temp1 = result;\n                              temp2 = result;\n                              result = FUN_080025a4(&DAT_200015bc,&temp1);\n                              if (result == 0) break;\n                              offset = 0x8f;\n                            }\n                            temp3 = 0x60;\n                            temp4 = result;\n                            temp5 = result;\n                            temp6 = result;\n                            temp7 = result;\n                            temp8 = result;\n                            result = FUN_0800245c(&DAT_200015bc,&temp3,0xc);\n                            if (result == 0) break;\n                            offset = 0x9a;\n                          }\n                          temp14 = 0x2000;\n                          temp9 = result;\n                          temp10 = result;\n                          temp11 = result;\n                          temp12 = result;\n                          temp13 = result;\n                          temp15 = result;\n                          result = FUN_08002564(&DAT_200015bc,&temp9);\n                          if (result == 0) break;\n                          offset = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = counter;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = FUN_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        offset = 0xc3;\n                      }\n                      temp3 = result;\n                      temp4 = result;\n                      result = FUN_080025a4(&DAT_200015f8,&temp3);\n                      if (result == 0) break;\n                      offset = 0xca;\n                    }\n                    temp9 = 0x60;\n                    temp10 = result;\n                    temp11 = result;\n                    temp13 = result;\n                    result = FUN_0800245c(&DAT_200015f8,&temp9,4);\n                    if (result == 0) break;\n                    offset = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = counter;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = FUN_080023d0();\n                  if (result == 0) break;\n                  offset = 0xf0;\n                }\n                temp3 = 0;\n                temp4 = 0;\n                result = FUN_080025a4(&DAT_20001540,&temp3);\n                if (result == 0) break;\n                offset = 0xf7;\n              }\n              temp9 = 0x60;\n              temp10 = result;\n              temp11 = result;\n              temp13 = result;\n              result = FUN_0800245c(&DAT_20001540,&temp9,8);\n              if (result == 0) break;\n              offset = 0x100;\n            }\n            counter = FUN_0800245c(&DAT_20001540,&temp9,0xc);\n            if (counter == 0) break;\n            offset = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = counter;\n          DAT_200014d8 = counter;\n          result = FUN_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          offset = 0x122;\n        }\n        temp3 = result;\n        temp4 = result;\n        result = FUN_080025a4(&DAT_200014c8,&temp3);\n        if (result == 0) break;\n        offset = 0x129;\n      }\n      temp9 = 0x60;\n      temp10 = result;\n      temp11 = result;\n      temp13 = result;\n      result = FUN_0800245c(&DAT_200014c8,&temp9,8);\n      if (result == 0) break;\n      offset = 0x132;\n    }\n    result = FUN_0800245c(&DAT_200014c8,&temp9,0xc);\n    if (result == 0) break;\n    offset = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripheral_0800458c",
                "iVar1": "result",
                "uVar2": "offset",
                "iVar3": "counter",
                "local_58": "temp1",
                "local_54": "temp2",
                "local_50": "temp3",
                "local_4c": "temp4",
                "local_48": "temp5",
                "local_40": "temp6",
                "local_3c": "temp7",
                "local_38": "temp8",
                "local_34": "temp9",
                "local_30": "temp10",
                "local_2c": "temp11",
                "local_28": "temp12",
                "local_24": "temp13",
                "local_20": "temp14",
                "local_1c": "temp15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_and_update_values_0800483c",
            "code": "\nvoid calculateAndUpdateValues_0800483c(int *parameters)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  int variable3;\n  int variable4;\n  int variable5;\n  \n  variable4 = parameters[0xc];\n  value1 = FUN_08000adc(parameters[7],parameters[9]);\n  variable4 = FUN_08000ad8(value1,variable4);\n  parameters[10] = variable4;\n  if (*parameters == 3) {\n    variable4 = FUN_08001064(parameters[10],0);\n    if (variable4 == 0) {\n      variable4 = FUN_08001028(parameters[10],0xc3340000);\n    }\n    else {\n      variable4 = FUN_08001064(parameters[10],0x43340000);\n    }\n    if (variable4 != 0) {\n      variable5 = parameters[10];\n      value1 = FUN_08000cec(parameters[10],0x43b40000);\n      variable4 = FUN_08001064(parameters[10],0);\n      variable3 = parameters[10];\n      if (variable4 == 0) {\n        variable3 = variable3 + -0x80000000;\n      }\n      value1 = FUN_08000e54(value1,variable3);\n      variable4 = FUN_08000ad8(variable5,value1);\n      parameters[10] = variable4;\n    }\n  }\n  variable5 = parameters[2];\n  variable3 = parameters[3];\n  variable4 = FUN_08000cec(parameters[1],parameters[10]);\n  parameters[0xe] = variable4;\n  variable4 = FUN_08000adc(parameters[10],parameters[0xf]);\n  parameters[0xf] = variable4;\n  variable4 = FUN_08001028(parameters[0xf],0xc3fa0000);\n  if (variable4 == 0) {\n    variable4 = FUN_08001064(parameters[0xf],0x43fa0000);\n    if (variable4 == 0) {\n      variable4 = parameters[0xf];\n    }\n    else {\n      variable4 = 0x43fa0000;\n    }\n  }\n  else {\n    variable4 = -0x3c060000;\n  }\n  parameters[0xf] = variable4;\n  variable4 = FUN_08000ad8(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = variable4;\n  variable4 = parameters[0xe];\n  value1 = FUN_08000cec(variable5,parameters[0xf]);\n  value1 = FUN_08000adc(value1,variable4);\n  value2 = FUN_08000cec(variable3,parameters[0x10]);\n  variable4 = FUN_08000ad8(value1,value2);\n  parameters[0x12] = variable4;\n  value1 = FUN_08000c44(parameters[0x13]);\n  variable4 = FUN_08001028(parameters[0x12],0xc3fa0000);\n  if (variable4 == 0) {\n    variable4 = FUN_08001064(parameters[0x12],0x43fa0000);\n    if (variable4 == 0) {\n      variable4 = parameters[0x12];\n    }\n    else {\n      variable4 = 0x43fa0000;\n    }\n  }\n  else {\n    variable4 = -0x3c060000;\n  }\n  variable4 = FUN_08000cec(variable4,value1);\n  parameters[0x12] = variable4;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_and_update_values_0800483c",
                "param_1": "parameters",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "variable3",
                "iVar4": "variable4",
                "iVar5": "variable5"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initializeData_08004a30(void)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      returnValue = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(returnValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      returnValue = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(returnValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_data_08004a84",
            "code": "\nvoid initializeData_08004a84(void)\n\n{\n  int returnValue;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  returnValue = FUN_08001064(DAT_200000d8,0);\n  if (returnValue == 0) {\n    returnValue = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    returnValue = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (returnValue == 0) {\n    returnValue = FUN_08001064(DAT_20000134,0);\n    if (returnValue == 0) {\n      returnValue = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      returnValue = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (returnValue == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_data_08004a84",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "parse_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 parseData_08004c18(undefined input_data)\n\n{\n  int *pointer_var_1;\n  int int_var_1;\n  int int_var_2;\n  ushort *pointer_var_2;\n  \n  DAT_20001636._0_1_ = input_data;\n  pointer_var_2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      int_var_1 = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        int_var_2 = FUN_0800115c();\n      } while ((uint)(int_var_2 - int_var_1) < 6);\nLAB_0800281c:\n      pointer_var_1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointer_var_1[3] = pointer_var_1[3] & 0xffffffdf;\n      pointer_var_1[3] = pointer_var_1[3] & 0xfffffeff;\n      pointer_var_1[5] = pointer_var_1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      int_var_1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var_2 = FUN_0800115c();\n        if (5 < (uint)(int_var_2 - int_var_1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointer_var_2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointer_var_2 = pointer_var_2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      int_var_1 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var_2 = FUN_0800115c();\n        if (5 < (uint)(int_var_2 - int_var_1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointer_var_2;\n    }\n    pointer_var_2 = (ushort *)((int)pointer_var_2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "parse_data_08004c18",
                "param_1": "input_data",
                "piVar1": "pointer_var_1",
                "iVar2": "int_var_1",
                "iVar3": "int_var_2",
                "puVar4": "pointer_var_2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "validate_and_initialize_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * validateAndInitialize_08004c30(int *inputParam)\n\n{\n  int localVar1;\n  \n  if (*inputParam != 0x40013800) {\n    return inputParam;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  localVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(localVar1 + 0x14) = *(uint *)(localVar1 + 0x14) | 1;\n    *(uint *)(localVar1 + 0xc) = *(uint *)(localVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "validate_and_initialize_08004c30",
                "param_1": "inputParam",
                "iVar1": "localVar1"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int counter;\n  \n  counter = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeData_08004c70(void)\n\n{\n  int tempVar;\n  \n  FUN_08004c64();\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_08004c70",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_data_08004c8c",
            "code": "\nvoid process_data_08004c8c(undefined *data)\n\n{\n  uint result;\n  undefined *current_ptr;\n  \n  current_ptr = data;\n  while( true ) {\n    result = FUN_08000150(data);\n    if (result <= (uint)((int)current_ptr - (int)data)) break;\n    FUN_08004c18(*current_ptr);\n    current_ptr = current_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_data_08004c8c",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "current_ptr"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_data_08004cac",
            "code": "\nvoid initializeData_08004cac(undefined4 config)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,config);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_data_08004cac",
                "param_1": "config"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "set_bit_and_call_functions_08004ccc",
            "code": "\n\n\nvoid setBitAndCallFunctions_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,param2,_DAT_40021018,1,param1,1,param3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "set_bit_and_call_functions_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_set_flag_08004d48",
            "code": "\n\n\nvoid checkAndSetFlag_08004d48(int *pointer,undefined4 value)\n\n{\n  undefined4 constant;\n  undefined4 count;\n  \n  if (*pointer == 0x40005400) {\n    constant = 0xc0;\n    count = 0x12;\n    FUN_08001264(0x40010c00,&constant,0x40005400,3,pointer,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_set_flag_08004d48",
                "param_1": "pointer",
                "param_2": "value",
                "local_18": "constant",
                "local_14": "count"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataPtr)\n\n{\n  int dataValue;\n  \n  dataValue = *dataPtr;\n  if (dataValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (dataValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (dataValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (dataValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataPtr",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_settings_08004e14",
            "code": "\nvoid initializeSettings_08004e14(int *settingPointer,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 constant1;\n  int settingValue;\n  undefined4 optionValue;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  settingValue = *settingPointer;\n  if (settingValue == 0x40012c00) {\n    optionValue = 0x800;\n  }\n  else {\n    if (settingValue != 0x40000000) {\n      if (settingValue == 0x40000400) {\n        optionValue = 3;\n      }\n      else {\n        if (settingValue != 0x40000800) {\n          return;\n        }\n        optionValue = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    optionValue = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = param2;\n  FUN_08001264(constant1,&optionValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_settings_08004e14",
                "param_1": "settingPointer",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "constant1",
                "iVar2": "settingValue",
                "local_18": "optionValue",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_memory_address_08004e7c",
            "code": "\n\n\nvoid updateMemoryAddress_08004e7c(int *address)\n\n{\n  undefined4 size;\n  undefined4 constant;\n  undefined4 value;\n  undefined4 anotherValue;\n  \n  if (*address == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    size = 0x200;\n    constant = 2;\n    anotherValue = 3;\n    FUN_08001264(0x40010800,&size);\n    size = 0x400;\n    constant = 0;\n    value = 0;\n    FUN_08001264(0x40010800,&size);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_memory_address_08004e7c",
                "param_1": "address",
                "local_18": "size",
                "local_14": "constant",
                "local_10": "value",
                "local_c": "anotherValue"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_callbacks_08004fb4",
            "code": "\nvoid executeCallbacks_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_callbacks_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_memory_08004ffc",
            "code": "\nvoid initializeMemory_08004ffc(undefined *memoryPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *localMemoryArray [2];\n  undefined4 maxValue1;\n  undefined2 size;\n  undefined2 maxValue2;\n  undefined *currentMemory;\n  undefined4 maxValue3;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  size = 0x208;\n  maxValue1 = 0x7fffffff;\n  maxValue3 = 0x7fffffff;\n  maxValue2 = 0xffff;\n  localMemoryArray[0] = memoryPointer;\n  currentMemory = memoryPointer;\n  stackValue1 = value1;\n  stackValue2 = value2;\n  stackValue3 = value3;\n  FUN_080050fc(DAT_200001c0,localMemoryArray,value1);\n  *localMemoryArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_memory_08004ffc",
                "param_1": "memoryPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "localMemoryArray",
                "local_70": "maxValue1",
                "local_6c": "size",
                "local_6a": "maxValue2",
                "local_68": "currentMemory",
                "local_64": "maxValue3",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "process_data_08005044",
            "code": "\nundefined4 process_data_08005044(undefined4 *output_ptr,int *input_ptr,undefined4 data,uint length)\n\n{\n  int result;\n  uint max_length;\n  uint input_length;\n  int offset;\n  \n  input_length = input_ptr[2];\n  if ((input_length <= length) && ((*(ushort *)(input_ptr + 3) & 0x480) != 0)) {\n    offset = *input_ptr - input_ptr[4];\n    input_length = (uint)(input_ptr[5] * 3) / 2;\n    max_length = length + 1 + offset;\n    if (input_length < max_length) {\n      input_length = max_length;\n    }\n    if ((int)((uint)*(ushort *)(input_ptr + 3) << 0x15) < 0) {\n      result = FUN_08005714(output_ptr,input_length);\n      if (result == 0) {\nLAB_0800508a:\n        *output_ptr = 0xc;\n        *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(result,input_ptr[4],offset);\n      *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = FUN_080057d0(output_ptr,input_ptr[4],input_length);\n      if (result == 0) {\n        FUN_0800567c(output_ptr,input_ptr[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input_ptr[4] = result;\n    *input_ptr = result + offset;\n    input_ptr[5] = input_length;\n    input_ptr[2] = input_length - offset;\n    input_length = length;\n  }\n  if (length <= input_length) {\n    input_length = length;\n  }\n  FUN_08005646(*input_ptr,data,input_length);\n  input_ptr[2] = input_ptr[2] - input_length;\n  *input_ptr = input_length + *input_ptr;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "process_data_08005044",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "uVar2": "max_length",
                "uVar3": "input_length",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "extract_and_process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint extract_and_process_data_080050fc(undefined4 *output_array,int *input_array,byte *format_string,int *array_pointer)\n\n{\n  int result;\n  int length;\n  int *temp_pointer;\n  bool found_number;\n  byte *char_pointer;\n  byte *current_char;\n  int temp_variable;\n  int *temp_array_pointer;\n  uint flags;\n  int optional_number;\n  undefined4 unused_variable;\n  int number;\n  int total_length;\n  byte current_format_char;\n  undefined default_format_char_1;\n  undefined default_format_char_2;\n  undefined optional_char;\n  undefined4 unused_variable;\n  \n  temp_array_pointer = array_pointer;\n  if (((int)((uint)*(ushort *)(input_array + 3) << 0x18) < 0) && (input_array[4] == 0)) {\n    result = FUN_08005714(output_array,0x40);\n    *input_array = result;\n    input_array[4] = result;\n    if (result == 0) {\n      *output_array = 0xc;\n      return -1;\n    }\n    input_array[5] = 0x40;\n  }\n  total_length = 0;\n  default_format_char_1 = 0x20;\n  default_format_char_2 = 0x30;\n  char_pointer = format_string;\nLAB_08005146:\n  current_char = char_pointer;\n  if (*current_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  char_pointer = current_char + 1;\n  if (*current_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)current_char - (int)format_string;\n  if (result != 0) {\n    length = FUN_08005044(output_array,input_array,format_string,result);\n    if (length == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input_array + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*current_char == 0) goto LAB_080052ac;\n  flags = 0;\n  number = 0;\n  optional_number = -1;\n  unused_variable = 0;\n  optional_char = 0;\n  unused_variable = 0;\n  char_pointer = current_char + 1;\n  while( true ) {\n    result = FUN_08005614(&DAT_08007379,*char_pointer);\n    format_string = char_pointer + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    char_pointer = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    optional_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    optional_char = 0x2b;\n  }\n  if (*char_pointer == 0x2a) {\n    temp_pointer = temp_array_pointer + 1;\n    result = *temp_array_pointer;\n    temp_array_pointer = temp_pointer;\n    if (result < 0) {\n      number = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    found_number = false;\n    result = number;\n    format_string = char_pointer;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      found_number = true;\n      format_string = format_string + 1;\n    }\n    if (!found_number) goto LAB_080051fc;\n  }\n  number = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      temp_pointer = temp_array_pointer + 1;\n      optional_number = *temp_array_pointer;\n      temp_array_pointer = temp_pointer;\n      if (optional_number < 0) {\n        optional_number = -1;\n      }\n    }\n    else {\n      found_number = false;\n      result = 0;\n      optional_number = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        found_number = true;\n      }\n      if (found_number) {\n        optional_number = result;\n      }\n    }\n  }\n  result = FUN_08005614(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  current_format_char = *format_string;\n  format_string = format_string + 1;\n  result = FUN_08005614(\"efgEFG\",current_format_char,6);\n  if (result == 0) {\n    temp_variable = FUN_080053d4(output_array,&flags,input_array,0x8005045,&temp_array_pointer);\n    if (temp_variable == -1) goto LAB_080052ac;\n  }\n  else {\n    temp_array_pointer = (int *)(((int)temp_array_pointer + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + temp_variable;\n  char_pointer = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "extract_and_process_data_080050fc",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "format_string",
                "param_4": "array_pointer",
                "iVar1": "result",
                "iVar2": "length",
                "piVar3": "temp_pointer",
                "bVar4": "found_number",
                "pbVar5": "char_pointer",
                "pbVar6": "current_char",
                "unaff_r9": "temp_variable",
                "local_8c": "temp_array_pointer",
                "local_88": "flags",
                "local_84": "optional_number",
                "local_80": "unused_variable",
                "local_7c": "number",
                "local_74": "total_length",
                "local_70": "current_format_char",
                "local_6f": "default_format_char_1",
                "local_6e": "default_format_char_2",
                "local_45": "optional_char",
                "local_30": "unused_variable"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 inputData,uint *data,uint *outputSize,undefined4 param4,code *callback)\n\n{\n  int counter1;\n  int counter2;\n  uint maxSize;\n  uint temp1;\n  bool flag;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (counter1 = 0; counter1 < (int)(data[3] - *outputSize); counter1 = counter1 + 1) {\n      counter2 = (*callback)(inputData,param4,(int)data + 0x19,1);\n      if (counter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  temp1 = maxSize;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    temp1 = maxSize + 2;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  counter1 = (*callback)(inputData,param4,(int)data + 0x43,temp1);\n  if (counter1 != -1) {\n    maxSize = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      maxSize = 0;\n    }\n    temp1 = 0;\n    if (!flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxSize == temp1) {\n        return 0;\n      }\n      counter1 = (*callback)(inputData,param4,(int)data + 0x1a,1);\n      if (counter1 == -1) break;\n      temp1 = temp1 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "inputData",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "counter1",
                "iVar2": "counter2",
                "uVar3": "maxSize",
                "uVar4": "temp1",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_data_080053d4",
            "code": "\nuint processData_080053d4(undefined4 input,uint *buffer,undefined4 param_3,code *callback,uint **output)\n\n{\n  byte byteVar;\n  int index;\n  uint *ptr;\n  int loopVar;\n  char *hexChars;\n  uint modifier;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint tempValue;\n  char *result;\n  char *data;\n  uint resultArray [2];\n  \n  byteVar = *(byte *)(buffer + 6);\n  data = (char *)((int)buffer + 0x43);\n  if (byteVar != 0x6e) {\n    if (byteVar < 0x6f) {\n      if (byteVar != 99) {\n        if (byteVar < 100) {\n          if (byteVar == 0) goto LAB_0800558e;\n          if (byteVar != 0x58) goto LAB_08005404;\n          *(undefined *)((int)buffer + 0x45) = 0x58;\n          hexChars = \"0123456789ABCDEF\";\nLAB_0800551e:\n          modifier = *buffer;\n          ptr = *output;\n          *output = ptr + 1;\n          if (((modifier & 0x80) == 0) && ((int)(modifier << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(modifier << 0x1f) < 0) {\n            *buffer = modifier | 0x20;\n          }\n          if (value == 0) {\n            *buffer = *buffer & 0xffffffdf;\n          }\n          modifier = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)buffer + 0x43) = 0;\n        }\n        else {\n          if ((byteVar != 100) && (byteVar != 0x69)) goto LAB_08005404;\n          value = *buffer;\n          ptr = *output;\n          if ((value & 0x80) == 0) {\n            *output = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)buffer + 0x43) = 0x2d;\n          }\n          hexChars = \"0123456789ABCDEF\";\n          modifier = 10;\n        }\n        tempValue = buffer[1];\n        buffer[2] = tempValue;\n        result = data;\n        if ((int)tempValue < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)buffer + 0x42) = *hexChars;\n          result = (char *)((int)buffer + 0x42);\n        }\n        else {\n          *buffer = *buffer & 0xfffffffb;\n          if (value == 0) {\n            if (tempValue != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              tempValue = value / modifier;\n              result = result + -1;\n              *result = hexChars[value - modifier * tempValue];\n              value = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((modifier == 8) && ((int)(*buffer << 0x1f) < 0)) && ((int)buffer[1] <= (int)buffer[4]))\n        {\n          result[-1] = '0';\n          result = result + -1;\n        }\n        buffer[4] = (int)data - (int)result;\n        data = result;\n        goto LAB_080054fa;\n      }\n      ptr = *output;\n      *output = ptr + 1;\n      *(char *)((int)buffer + 0x42) = (char)*ptr;\nLAB_08005464:\n      data = (char *)((int)buffer + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteVar != 0x73) {\n        if (byteVar < 0x74) {\n          if (byteVar == 0x6f) {\nLAB_0800548a:\n            value = *buffer;\n            ptr = *output;\n            if ((value & 0x80) == 0) {\n              *output = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byteVar == 0x6f) {\n              modifier = 8;\n            }\n            else {\n              modifier = 10;\n            }\n            hexChars = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVar == 0x70) {\n            *buffer = *buffer | 0x20;\nLAB_0800544a:\n            hexChars = \"0123456789abcdef\";\n            *(undefined *)((int)buffer + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVar == 0x75) goto LAB_0800548a;\n          if (byteVar == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)buffer + 0x42) = byteVar;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*output;\n      *output = (uint *)(ppcVar8 + 1);\n      data = *ppcVar8;\n      index = FUN_08005614(data,0,buffer[1]);\n      if (index != 0) {\n        buffer[1] = index - (int)data;\n      }\n      value = buffer[1];\n    }\n    buffer[4] = value;\n    *(undefined *)((int)buffer + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *buffer;\n  ppuVar7 = (uint **)*output;\n  modifier = buffer[5];\n  if ((value & 0x80) == 0) {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)modifier;\n  }\n  else {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = modifier;\n  }\nLAB_0800558e:\n  buffer[4] = 0;\nLAB_080054fa:\n  index = FUN_080052e4(input,buffer,resultArray,param_3,callback);\n  if ((index == -1) || (index = (*callback)(input,param_3,data,buffer[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*buffer << 0x1e) < 0) {\n      for (index = 0; index < (int)(buffer[3] - resultArray[0]); index = index + 1) {\n        loopVar = (*callback)(input,param_3,(int)buffer + 0x19,1);\n        if (loopVar == -1) goto LAB_0800550e;\n      }\n    }\n    value = buffer[3];\n    if ((int)buffer[3] < (int)resultArray[0]) {\n      value = resultArray[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_data_080053d4",
                "param_1": "input",
                "param_2": "buffer",
                "param_4": "callback",
                "param_5": "output",
                "bVar1": "byteVar",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "loopVar",
                "pcVar5": "hexChars",
                "uVar6": "modifier",
                "uVar9": "value",
                "uVar10": "tempValue",
                "pcVar11": "result",
                "pcVar12": "data",
                "local_24": "resultArray"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_in_string_08005614",
            "code": "\nchar * find_character_in_string_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *current_ptr;\n  \n  current_char = string;\n  do {\n    current_ptr = current_char;\n    if (current_ptr == string + length) {\n      return (char *)0x0;\n    }\n    current_char = current_ptr + 1;\n  } while (*current_ptr != character);\n  return current_ptr;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_ptr"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int startOffset,undefined *sourceData,int dataSize)\n\n{\n  undefined *destEnd;\n  undefined *destData;\n  \n  destData = (undefined *)(startOffset + -1);\n  destEnd = sourceData + dataSize;\n  for (; sourceData != destEnd; sourceData = sourceData + 1) {\n    destData = destData + 1;\n    *destData = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "startOffset",
                "param_2": "sourceData",
                "param_3": "dataSize",
                "puVar1": "destEnd",
                "puVar2": "destData"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_mem_to_dest_08005646",
            "code": "\nvoid copy_mem_to_dest_08005646(undefined *dest,undefined *src,int size)\n\n{\n  undefined *src_end;\n  \n  src_end = src + size;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + size;\n    size = size - (int)src_end;\n    while (src_end + size != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_mem_to_dest_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "src_end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "organize_data_0800567c",
            "code": "\nvoid organizeData_0800567c(undefined4 *result,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp4;\n  int **temp5;\n  int **temp6;\n  \n  if (size == 0) {\n    return;\n  }\n  temp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200002ac = temp6;\n  }\n  else {\n    temp3 = DAT_200002ac;\n    if (temp6 < DAT_200002ac) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200002ac == temp3) {\n        temp4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp3 = (int **)((int)temp4 + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp4);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp4 + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_0800583e(result,temp2,temp3,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "organize_data_0800567c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "temp1",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp4",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    last_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          last_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(result);\n    }\n    current_block = (uint *)FUN_0800581c(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_size = FUN_0800581c(result,(int)last_block - (int)current_block), remaining_size != -1)))) {\n      *last_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(result);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(last_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)last_block + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_0800583e(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint process_data_080057d0(undefined4 input_data,int length_input,uint max_length,undefined4 extra_param)\n\n{\n  int result;\n  uint temp_val;\n  \n  if (length_input != 0) {\n    if (max_length == 0) {\n      FUN_0800567c();\n      result = 0;\n    }\n    else {\n      temp_val = FUN_08005840();\n      result = length_input;\n      if ((temp_val < max_length) && (result = FUN_08005714(input_data,max_length), result != 0)) {\n        FUN_08005630(result,length_input,max_length);\n        FUN_0800567c(input_data,length_input);\n      }\n    }\n    return result;\n  }\n  result = FUN_08005714(input_data,max_length,max_length,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "input_data",
                "param_2": "length_input",
                "param_3": "max_length",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "temp_val"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "verify_and_assign_value_0800581c",
            "code": "\nvoid verify_and_assign_value_0800581c(int *result_value,undefined4 input_value)\n\n{\n  int verification_result;\n  \n  DAT_2000169c = 0;\n  verification_result = FUN_080072b8(input_value);\n  if ((verification_result == -1) && (DAT_2000169c != 0)) {\n    *result_value = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "verify_and_assign_value_0800581c",
                "param_1": "result_value",
                "param_2": "input_value",
                "iVar1": "verification_result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 result,int input)\n\n{\n  int sum;\n  \n  sum = *(int *)(input + -4) + -4;\n  if (*(int *)(input + -4) < 0) {\n    sum = sum + *(int *)(input + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "binary_processing_function_08005854",
            "code": "\nundefined8 binary_processing_function_08005854(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  int result;\n  undefined4 *pointer;\n  int *integer_pointer;\n  undefined8 return_value;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy2;\n  undefined4 param_2_copy2;\n  undefined8 processed_data;\n  int processing_result;\n  \n  return_value = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return return_value;\n  }\n  processing_result = FUN_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (processing_result != 0) {\n    return return_value;\n  }\n  func_result = FUNC_0800708c(input_param_1,input_param_2);\n  result = FUN_080009f0((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return return_value;\n  }\n  flag = 1;\n  data_ptr = &DAT_080073ac;\n  param_1_copy = input_param_1;\n  param_2_copy = input_param_2;\n  param_1_copy2 = input_param_1;\n  param_2_copy2 = input_param_2;\n  processed_data = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  pointer = (undefined4 *)FUN_080072ac();\n  *pointer = 0x21;\nLAB_080058d0:\n  if (processing_result != 0) {\n    integer_pointer = (int *)FUN_080072ac();\n    *integer_pointer = processing_result;\n  }\n  return processed_data;\n}\n\n",
            "renaming": {
                "FUN_08005854": "binary_processing_function_08005854",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "result",
                "puVar2": "pointer",
                "piVar3": "integer_pointer",
                "uVar4": "return_value",
                "uVar5": "func_result",
                "local_48": "flag",
                "local_44": "data_ptr",
                "local_40": "param_1_copy",
                "uStack_3c": "param_2_copy",
                "local_38": "param_1_copy2",
                "uStack_34": "param_2_copy2",
                "local_30": "processed_data",
                "local_28": "processing_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_floating_point_value_thunk_08006070",
            "code": "\nundefined8 calculateFloatingPointValue_thunk_08006070(uint floatParam1,uint floatParam2,uint floatParam3,uint floatParam4)\n\n{\n  undefined4 result1;\n  uint bitwiseShift1;\n  uint bitwiseShift2;\n  int difference;\n  uint param4Masked;\n  undefined8 finalResult;\n  undefined8 intermediateResult;\n  \n  param4Masked = floatParam4 & 0x7fffffff;\n  if ((0x7ff00000 < (param4Masked | (-floatParam3 | floatParam3) >> 0x1f)) ||\n     (bitwiseShift2 = floatParam2 & 0x7fffffff, 0x7ff00000 < (bitwiseShift2 | (-floatParam1 | floatParam1) >> 0x1f))) {\n    finalResult = FUN_0800016c(floatParam1,floatParam2,floatParam3,floatParam4,floatParam4);\n    return finalResult;\n  }\n  if ((floatParam4 + 0xc0100000 | floatParam3) == 0) {\n    finalResult = FUN_08006d68();\n    return finalResult;\n  }\n  bitwiseShift1 = (int)floatParam4 >> 0x1e & 2U | floatParam2 >> 0x1f;\n  if ((floatParam1 | bitwiseShift2) == 0) {\n    if (bitwiseShift1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (bitwiseShift1 != 3) {\n      return CONCAT44(floatParam2,floatParam1);\n    }\nLAB_0800613e:\n    finalResult = 0xc00921fb54442d18;\n  }\n  else {\n    if ((floatParam3 | param4Masked) != 0) {\n      if (param4Masked == 0x7ff00000) {\n        if (bitwiseShift2 == 0x7ff00000) {\n          if (bitwiseShift1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (bitwiseShift1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (bitwiseShift1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (bitwiseShift1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (bitwiseShift1 != 3) {\n          if (bitwiseShift1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (bitwiseShift2 != 0x7ff00000) {\n        difference = (int)(bitwiseShift2 - param4Masked) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)floatParam4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            finalResult = 0;\n          }\n          else {\n            FUN_08000724(floatParam1,floatParam2);\n            FUNC_0800708c();\n            finalResult = FUN_08006d68();\n          }\n        }\n        else {\n          finalResult = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)finalResult >> 0x20);\n        result1 = (undefined4)finalResult;\n        if (bitwiseShift1 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (bitwiseShift1 == 2) {\n          intermediateResult = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          finalResult = 0x400921fb54442d18;\n        }\n        else {\n          if (bitwiseShift1 == 0) {\n            return finalResult;\n          }\n          finalResult = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          intermediateResult = 0x400921fb54442d18;\n        }\n        finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)intermediateResult,\n                             (int)((ulonglong)intermediateResult >> 0x20));\n        return finalResult;\n      }\n    }\n    if ((int)floatParam2 < 0) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_floating_point_value_thunk_08006070",
                "param_1": "floatParam1",
                "param_2": "floatParam2",
                "param_3": "floatParam3",
                "param_4": "floatParam4",
                "uVar1": "result1",
                "uVar2": "bitwiseShift1",
                "uVar3": "bitwiseShift2",
                "iVar4": "difference",
                "uVar5": "param4Masked",
                "uVar6": "finalResult",
                "uVar7": "intermediateResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_value_08005900",
            "code": "\nundefined8 calculate_value_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char flag;\n  int result;\n  int *pointer;\n  undefined4 *pointer;\n  int result;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined8 output_1;\n  undefined8 output_2;\n  undefined4 flag_1;\n  undefined *string_ptr;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined8 output_3;\n  int local_result;\n  \n  output_1 = FUN_08006228();\n  flag = DAT_20000224;\n  value_1 = (undefined4)((ulonglong)output_1 >> 0x20);\n  value_2 = (undefined4)output_1;\n  if (DAT_20000224 == -1) {\n    return output_1;\n  }\n  result = FUN_08000a04(input_3,input_4,input_3,input_4);\n  if (result != 0) {\n    return output_1;\n  }\n  result = FUN_08000a04(input_1,input_2,input_1,input_2);\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_3_copy = input_3;\n  input_4_copy = input_4;\n  if (result == 0) {\n    result = FUN_080009a0(input_1,input_2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(input_3,input_4,0,0);\n      if (result != 0) {\n        flag_1 = 1;\n        string_ptr = &DAT_080073b1;\n        output_3 = 0;\n        local_result = 0;\n        if (flag != '\\0') {\n          output_3 = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(input_3,input_4);\n      if (result == 0) {\n        return output_1;\n      }\n      result = FUN_080009b4(input_3,input_4,0,0);\n      if (result == 0) {\n        return output_1;\n      }\n      flag_1 = 1;\n      string_ptr = &DAT_080073b1;\n      local_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      output_3 = 0xfff0000000000000;\n      local_result = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(value_2,value_1);\n    if (((result != 0) || (result = FUN_08007092(input_1,input_2), result == 0)) ||\n       (result = FUN_08007092(input_3,input_4), result == 0)) {\n      result = FUN_080009a0(value_2,value_1,0,0);\n      if (result == 0) {\n        return output_1;\n      }\n      result = FUN_08007092(input_1,input_2);\n      if (result == 0) {\n        return output_1;\n      }\n      result = FUN_08007092(input_3,input_4);\n      if (result == 0) {\n        return output_1;\n      }\n      flag_1 = 4;\n      string_ptr = &DAT_080073b1;\n      local_result = 0;\n      output_3._0_4_ = 0;\n      output_3._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    local_result = FUN_08000a04(value_2,value_1);\n    flag = DAT_20000224;\n    if (local_result != 0) {\n      string_ptr = &DAT_080073b1;\n      flag_1 = 1;\n      local_result = result;\n      if (DAT_20000224 != '\\0') {\n        output_3 = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      string_ptr = &DAT_080073b1;\n      flag_1 = 1;\n      output_3 = 0;\n      goto LAB_08005978;\n    }\n    string_ptr = &DAT_080073b1;\n    flag_1 = 3;\n    if (DAT_20000224 == '\\0') {\n      output_3._0_4_ = 0xe0000000;\n      output_3._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        output_1 = FUN_080004d0(input_3,input_4,0,0x3fe00000);\n        output_2 = FUN_080070b0();\n        result = FUN_080009a0((int)output_1,(int)((ulonglong)output_1 >> 0x20),(int)output_2,\n                             (int)((ulonglong)output_2 >> 0x20));\n        if (result == 0) {\n          output_3._0_4_ = 0xe0000000;\n          output_3._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&flag_1);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      output_3._0_4_ = 0;\n      output_3._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        output_1 = FUN_080004d0(input_3,input_4,0,0x3fe00000);\n        output_2 = FUN_080070b0();\n        result = FUN_080009a0((int)output_1,(int)((ulonglong)output_1 >> 0x20),(int)output_2,\n                             (int)((ulonglong)output_2 >> 0x20));\n        if (result == 0) {\n          output_3._0_4_ = 0;\n          output_3._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    pointer = (undefined4 *)FUN_080072ac();\n    value_2 = 0x22;\n  }\n  else {\n    result = FUN_080009a0(input_3,input_4,0,0);\n    if (result == 0) {\n      return output_1;\n    }\n    flag_1 = 1;\n    string_ptr = &DAT_080073b1;\n    output_3 = 0x3ff0000000000000;\n    local_result = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&flag_1);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    pointer = (undefined4 *)FUN_080072ac();\n    value_2 = 0x21;\n  }\n  *pointer = value_2;\nLAB_080059d0:\n  if (local_result != 0) {\n    pointer = (int *)FUN_080072ac();\n    *pointer = local_result;\n  }\n  return output_3;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_value_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "pointer",
                "puVar4": "pointer",
                "iVar5": "result",
                "uVar6": "value_1",
                "uVar7": "value_2",
                "uVar8": "output_1",
                "uVar9": "output_2",
                "local_50": "flag_1",
                "local_4c": "string_ptr",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_3_copy",
                "uStack_3c": "input_4_copy",
                "local_38": "output_3",
                "local_30": "local_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "perform_task_08005bc8",
            "code": "\nundefined8 performTask_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char dataFlag;\n  int status;\n  int *statusPtr;\n  undefined4 *dataPtr;\n  undefined8 result;\n  undefined4 flag;\n  undefined *data;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input1Copy2;\n  undefined4 input2Copy2;\n  undefined8 returnValue;\n  int tempVar;\n  \n  result = FUN_08006c0c();\n  dataFlag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  tempVar = FUN_08000a04(input1,input2,input1,input2);\n  if (tempVar != 0) {\n    return result;\n  }\n  status = FUN_080009b4(input1,input2,0,0);\n  if (status == 0) {\n    return result;\n  }\n  flag = 1;\n  data = &DAT_080073b5;\n  input1Copy = input1;\n  input2Copy = input2;\n  input1Copy2 = input1;\n  input2Copy2 = input2;\n  if (dataFlag == '\\0') {\n    returnValue = 0;\nLAB_08005c26:\n    status = FUN_0800709e(&flag);\n    if (status != 0) goto LAB_08005c2e;\n  }\n  else {\n    returnValue = FUN_08000724(0,0,0,0);\n    if (dataFlag != '\\x02') goto LAB_08005c26;\n  }\n  dataPtr = (undefined4 *)FUN_080072ac();\n  *dataPtr = 0x21;\nLAB_08005c2e:\n  if (tempVar != 0) {\n    statusPtr = (int *)FUN_080072ac();\n    *statusPtr = tempVar;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "perform_task_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "dataFlag",
                "iVar2": "status",
                "piVar3": "statusPtr",
                "puVar4": "dataPtr",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "data",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input1Copy2",
                "uStack_3c": "input2Copy2",
                "local_38": "returnValue",
                "local_30": "tempVar"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_some_operation_08005c70",
            "code": "\nundefined8 calculateSomeOperation_08005c70(uint input1,uint input2)\n\n{\n  int result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint absoluteValueOfInput2;\n  undefined8 output;\n  undefined8 tempOutput1;\n  undefined8 tempOutput2;\n  \n  output = CONCAT44(input2,input1);\n  absoluteValueOfInput2 = input2 & 0x7fffffff;\n  if (absoluteValueOfInput2 < 0x3ff00000) {\n    if (absoluteValueOfInput2 < 0x3fe00000) {\n      if (0x3e3fffff < absoluteValueOfInput2) {\n        tempOutput1 = FUN_080004d0(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)tempOutput1 >> 0x20);\n        temp5 = (undefined4)tempOutput1;\n        tempOutput1 = FUN_080004d0(temp5,temp6,0xdfdf709,0x3f023de1);\n        tempOutput1 = FUN_0800016c((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x7501b288,0x3f49efe0);\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp6);\n        tempOutput1 = FUN_08000168((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0xb5688f3b,0x3fa48228);\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp6);\n        tempOutput1 = FUN_0800016c((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0xe884455,0x3fc9c155);\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp6);\n        tempOutput1 = FUN_08000168((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp6);\n        tempOutput1 = FUN_0800016c((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x55555555,0x3fc55555);\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp6);\n        tempOutput2 = FUN_080004d0(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        tempOutput2 = FUN_08000168((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        tempOutput2 = FUN_080004d0((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),temp5,temp6);\n        tempOutput2 = FUN_0800016c((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),0x9c598ac8,0x40002ae5);\n        tempOutput2 = FUN_080004d0((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),temp5,temp6);\n        tempOutput2 = FUN_08000168((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        tempOutput2 = FUN_080004d0((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),temp5,temp6);\n        tempOutput2 = FUN_0800016c((int)tempOutput2,(int)((ulonglong)tempOutput2 >> 0x20),0,0x3ff00000);\n        tempOutput1 = FUN_08000724((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),(int)tempOutput2,\n                              (int)((ulonglong)tempOutput2 >> 0x20));\n        tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      tempOutput1 = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c);\n      result1 = FUN_080009f0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0,0x3ff00000);\n      if (result1 != 0) {\n        return output;\n      }\n    }\n    output = FUNC_0800708c(input1,input2);\n    output = FUN_08000168(0,0x3ff00000,(int)output,(int)((ulonglong)output >> 0x20));\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)output >> 0x20);\n    temp5 = (undefined4)output;\n    output = FUN_080004d0(temp5,temp1,0xdfdf709,0x3f023de1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x7501b288,0x3f49efe0);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp1);\n    output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0xb5688f3b,0x3fa48228);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0xe884455,0x3fc9c155);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp1);\n    output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0x3eb6f7d,0x3fd4d612);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x55555555,0x3fc55555);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)output >> 0x20);\n    tempOutput1 = FUN_080004d0(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    tempOutput1 = FUN_08000168((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp1);\n    tempOutput1 = FUN_0800016c((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x9c598ac8,0x40002ae5);\n    tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp1);\n    tempOutput1 = FUN_08000168((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    tempOutput1 = FUN_080004d0((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),temp5,temp1);\n    tempOutput1 = FUN_0800016c((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)tempOutput1 >> 0x20);\n    tempOutput2 = FUN_08006c0c(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)tempOutput2 >> 0x20);\n    temp6 = (undefined4)tempOutput2;\n    if (absoluteValueOfInput2 < 0x3fef3333) {\n      output = FUN_08000724((int)output,temp2,(int)tempOutput1,temp3);\n      tempOutput1 = FUN_0800016c(temp6,temp4,temp6,temp4);\n      output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput1,\n                           (int)((ulonglong)tempOutput1 >> 0x20));\n      tempOutput1 = FUN_080004d0(0,temp4,0,temp4);\n      tempOutput1 = FUN_08000168(temp5,temp1,(int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20));\n      tempOutput2 = FUN_0800016c(temp6,temp4,0,temp4);\n      tempOutput1 = FUN_08000724((int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20),(int)tempOutput2,\n                            (int)((ulonglong)tempOutput2 >> 0x20));\n      temp5 = (undefined4)((ulonglong)tempOutput1 >> 0x20);\n      tempOutput1 = FUN_0800016c((int)tempOutput1,temp5,(int)tempOutput1,temp5);\n      tempOutput1 = FUN_08000168(0x33145c07,0x3c91a626,(int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20));\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput1,\n                           (int)((ulonglong)tempOutput1 >> 0x20));\n      tempOutput1 = FUN_0800016c(0,temp4,0,temp4);\n      tempOutput1 = FUN_08000168(0x54442d18,0x3fe921fb,(int)tempOutput1,(int)((ulonglong)tempOutput1 >> 0x20));\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput1,\n                           (int)((ulonglong)tempOutput1 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      output = FUN_08000724((int)output,temp2,(int)tempOutput1,temp3);\n      output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),temp6,temp4);\n      output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)output >> 0x20);\n      output = FUN_0800016c((int)output,temp5,(int)output,temp5);\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    output = FUN_08000168(0x54442d18,temp5,(int)output,(int)((ulonglong)output >> 0x20));\n    if ((int)input2 < 1) {\n      output = CONCAT44((int)((ulonglong)output >> 0x20) + -0x80000000,(int)output);\n    }\n  }\n  else {\n    if ((absoluteValueOfInput2 + 0xc0100000 | input1) != 0) {\n      output = FUN_08000168(input1,input2,input1,input2);\n      temp5 = (undefined4)((ulonglong)output >> 0x20);\n      output = FUN_08000724((int)output,temp5,(int)output,temp5);\n      return output;\n    }\n    output = FUN_080004d0(input1,input2,0x54442d18,0x3ff921fb);\n    tempOutput1 = FUN_080004d0(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),(int)tempOutput1,\n                         (int)((ulonglong)tempOutput1 >> 0x20));\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_some_operation_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "absoluteValueOfInput2",
                "uVar9": "output",
                "uVar10": "tempOutput1",
                "uVar11": "tempOutput2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 result;\n  undefined8 temp6;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    result = FUN_0800016c(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = FUN_08006d68();\n    return result;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)input4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            result = FUN_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)result >> 0x20);\n        temp1 = (undefined4)result;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          temp6 = FUN_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result;\n          }\n          result = FUN_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          temp6 = 0x400921fb54442d18;\n        }\n        result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp6,\n                             (int)((ulonglong)temp6 >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "result",
                "uVar7": "temp6"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint realPart,uint imaginaryPart,uint exponent,uint sign)\n\n{\n  undefined4 realPartResult;\n  uint temp1;\n  uint temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp7;\n  undefined4 temp8;\n  int tempIndex1;\n  int tempIndex2;\n  undefined4 tempResult;\n  uint tempRealPart;\n  undefined4 temp10;\n  int tempIndex3;\n  uint result;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined8 temp15;\n  undefined8 temp16;\n  longlong temp17;\n  ulonglong temp18;\n  undefined8 temp19;\n  uint classification;\n  undefined4 temp20;\n  undefined4 temp21;\n  int tempIndex4;\n  \n  temp14 = CONCAT44(imaginaryPart,realPart);\n  result = sign & 0x7fffffff;\n  if ((result | exponent) == 0) {\n    return 0;\n  }\n  tempRealPart = imaginaryPart & 0x7fffffff;\n  if (tempRealPart < 0x7ff00001) {\n    if (tempRealPart == 0x7ff00000) {\n      if (realPart == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (exponent == 0)) {\n          if (-1 < (int)imaginaryPart) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              classification = 0;\n              goto LAB_080062ba;\n            }\n            tempIndex1 = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < tempIndex1) {\n              temp1 = exponent >> (0x34U - tempIndex1 & 0xff);\n              if (exponent == temp1 << (0x34U - tempIndex1 & 0xff)) {\n                classification = 2 - (temp1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (exponent == 0) {\n              temp1 = (int)result >> (0x14U - tempIndex1 & 0xff);\n              if (result == temp1 << (0x14U - tempIndex1 & 0xff)) {\n                classification = 2 - (temp1 & 1);\n              }\n              else {\n                classification = 0;\n              }\n              goto LAB_0800630c;\n            }\n            classification = 0;\n          }\n          else {\n            classification = 2;\nLAB_080062ba:\n            if (exponent == 0) {\n              if (result == 0x7ff00000) {\n                if ((tempRealPart + 0xc0100000 | realPart) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < tempRealPart) {\n                  if ((int)sign < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)sign) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)sign) {\n                  return realPart;\n                }\n                temp13 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (sign == 0x40000000) goto LAB_0800634a;\n              if ((sign == 0x3fe00000) && (-1 < (int)imaginaryPart)) {\n                result = FUN_08006c0c(realPart,imaginaryPart);\n                return result;\n              }\n            }\n          }\n          temp13 = FUNC_0800708c(realPart,imaginaryPart);\n          temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n          realPartResult = (undefined4)temp13;\n          temp18 = CONCAT44(imaginaryPart,realPartResult) & 0x7fffffffffffffff;\n          if ((realPart == 0) && ((tempRealPart == 0 || ((imaginaryPart & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)sign < 0) {\n              temp13 = FUN_08000724(0,0x3ff00000,realPartResult,temp11);\n            }\n            if (-1 < (int)imaginaryPart) {\n              return (uint)temp13;\n            }\n            if ((classification | tempRealPart + 0xc0100000) != 0) {\n              return (uint)temp13;\n            }\n          }\n          else {\n            temp1 = 0xffffffff - ((int)imaginaryPart >> 0x1f);\n            temp13 = temp14;\n            if ((classification | temp1) != 0) {\n              if (result < 0x41e00001) {\n                tempIndex4 = 0;\n                if (tempRealPart < 0x100000) {\n                  temp18 = FUN_080004d0();\n                  tempIndex4 = -0x35;\n                }\n                result = (uint)(temp18 >> 0x20);\n                realPartResult = (undefined4)temp18;\n                tempIndex4 = ((int)result >> 0x14) + -0x3ff + tempIndex4;\n                result = result & 0xfffff;\n                tempRealPart = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  tempIndex1 = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    tempRealPart = tempRealPart - 0x100000;\n                    tempIndex4 = tempIndex4 + 1;\n                    goto LAB_08006628;\n                  }\n                  tempIndex1 = 1;\n                }\n                tempIndex2 = tempIndex1 * 8;\n                tempResult = (&DAT_080073c0)[tempIndex1 * 2];\n                temp10 = (&DAT_080073c4)[tempIndex1 * 2];\n                temp14 = FUN_08000168(realPartResult,tempRealPart,tempResult,temp10);\n                temp12 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp13 = FUN_0800016c(realPartResult,tempRealPart,tempResult,temp10);\n                temp13 = FUN_08000724(0,0x3ff00000,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp15 = FUN_080004d0((int)temp14,temp12,(int)temp13,temp3);\n                temp4 = (undefined4)((ulonglong)temp15 >> 0x20);\n                temp11 = (undefined4)temp15;\n                temp15 = FUN_080004d0(0,temp4);\n                temp14 = FUN_08000168((int)temp14,temp12,(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp15 = FUN_08000168(0,((int)tempRealPart >> 1 | 0x20000000U) + 0x80000 + tempIndex1 * 0x40000,\n                                      tempResult,temp10);\n                temp15 = FUN_08000168(realPartResult,tempRealPart,(int)temp15,(int)((ulonglong)temp15 >> 0x20));\n                temp15 = FUN_080004d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),0,temp4);\n                temp14 = FUN_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp14 = FUN_080004d0((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp13,temp3\n                                     );\n                temp12 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp13 = FUN_080004d0(temp11,temp4);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                realPartResult = (undefined4)temp13;\n                temp13 = FUN_080004d0(realPartResult,temp3,0x4a454eef,0x3fca7e28);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),realPartResult,temp3);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),realPartResult,temp3);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),realPartResult,temp3);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),realPartResult,temp3);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp15 = FUN_080004d0(realPartResult,temp3,realPartResult,temp3);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp15 = FUN_0800016c(temp11,temp4,0,temp4);\n                temp15 = FUN_080004d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                                      temp12);\n                temp13 = FUN_0800016c((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                realPartResult = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp15 = FUN_080004d0(0,temp4,0,temp4);\n                temp3 = (undefined4)((ulonglong)temp15 >> 0x20);\n                temp16 = FUN_0800016c((int)temp15,temp3,0,0x40080000);\n                FUN_0800016c((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp13,realPartResult);\n                temp16 = FUN_080004d0(0,temp4,0,temp5);\n                tempResult = (undefined4)((ulonglong)temp16 >> 0x20);\n                temp19 = FUN_08000168(0,temp5,0,0x40080000);\n                temp15 = FUN_08000168((int)temp19,(int)((ulonglong)temp19 >> 0x20),(int)temp15,temp3\n                                     );\n                temp13 = FUN_08000168((int)temp13,realPartResult,(int)temp15,(int)((ulonglong)temp15 >> 0x20)\n                                     );\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp11,temp4);\n                temp14 = FUN_080004d0((int)temp14,temp12,0,temp5);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                      (int)((ulonglong)temp14 >> 0x20));\n                realPartResult = (undefined4)((ulonglong)temp13 >> 0x20);\n                FUN_0800016c((int)temp16,tempResult,(int)temp13,realPartResult);\n                temp14 = FUN_080004d0(0,temp6,0xe0000000,0x3feec709);\n                temp15 = FUN_08000168(0,temp6,(int)temp16,tempResult);\n                temp13 = FUN_08000168((int)temp13,realPartResult,(int)temp15,(int)((ulonglong)temp15 >> 0x20)\n                                     );\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp15 = FUN_080004d0(0,temp6,0x145b01f5,0xbe3e2fe0);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + tempIndex2),\n                                      *(undefined4 *)(&DAT_080073e4 + tempIndex2));\n                temp15 = FUN_08000404(tempIndex4);\n                realPartResult = (undefined4)((ulonglong)temp15 >> 0x20);\n                temp11 = *(undefined4 *)(&DAT_080073d0 + tempIndex2);\n                temp12 = *(undefined4 *)(&DAT_080073d4 + tempIndex2);\n                temp16 = FUN_0800016c((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp16 = FUN_0800016c((int)temp16,(int)((ulonglong)temp16 >> 0x20),temp11,temp12);\n                FUN_0800016c((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp15,realPartResult);\n                temp15 = FUN_08000168(0,temp7,(int)temp15,realPartResult);\n                temp17 = FUN_08000168((int)temp15,(int)((ulonglong)temp15 >> 0x20),temp11,temp12);\n                result = temp7;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (tempRealPart < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)sign < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  realPart = 0x8800759c;\n                  imaginaryPart = 0x7e37e43c;\n                  temp14 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (tempRealPart < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)sign) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < tempRealPart) goto LAB_08006418;\n                temp14 = FUN_08000168(realPartResult,temp11,0,0x3ff00000);\n                temp11 = (undefined4)((ulonglong)temp14 >> 0x20);\n                realPartResult = (undefined4)temp14;\n                temp14 = FUN_080004d0(realPartResult,temp11,0x60000000,0x3ff71547);\n                temp13 = FUN_080004d0(realPartResult,temp11,0xf85ddf44,0x3e54ae0b);\n                temp15 = FUN_080004d0(realPartResult,temp11,0,0x3fd00000);\n                temp15 = FUN_08000168(0x55555555,0x3fd55555,(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp15 = FUN_080004d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),realPartResult,temp11);\n                temp15 = FUN_08000168(0,0x3fe00000,(int)temp15,(int)((ulonglong)temp15 >> 0x20));\n                temp16 = FUN_080004d0(realPartResult,temp11,realPartResult,temp11);\n                temp15 = FUN_080004d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp16,\n                                      (int)((ulonglong)temp16 >> 0x20));\n                temp15 = FUN_080004d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp13 = FUN_08000168((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                FUN_0800016c((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp13,\n                             (int)((ulonglong)temp13 >> 0x20));\n                temp17 = (ulonglong)temp2 << 0x20;\n                result = temp2;\n              }\n              temp14 = FUN_08000168((int)temp17,(int)((ulonglong)temp17 >> 0x20),(int)temp14,\n                                    (int)((ulonglong)temp14 >> 0x20));\n              temp14 = FUN_08000168((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                    (int)((ulonglong)temp14 >> 0x20));\n              if ((classification - 1 | temp1) == 0) {\n                imaginaryPart = 0xbff00000;\n              }\n              else {\n                imaginaryPart = 0x3ff00000;\n              }\n              classification = 0;\n              temp13 = FUN_08000168(exponent,sign,0,sign);\n              temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),0,result);\n              temp14 = FUN_080004d0((int)temp14,(int)((ulonglong)temp14 >> 0x20),exponent,sign);\n              temp14 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                    (int)((ulonglong)temp14 >> 0x20));\n              temp12 = (undefined4)((ulonglong)temp14 >> 0x20);\n              realPartResult = (undefined4)temp14;\n              temp14 = FUN_080004d0(0,result,0,sign);\n              temp3 = (undefined4)((ulonglong)temp14 >> 0x20);\n              temp11 = (undefined4)temp14;\n              temp17 = FUN_0800016c(realPartResult,temp12,temp11,temp3);\n              tempRealPart = (uint)((ulonglong)temp17 >> 0x20);\n              result = (uint)temp17;\n              if (0x408fffffffffffff < temp17) {\n                if ((tempRealPart + 0xbf700000 | result) == 0) {\n                  temp13 = FUN_0800016c(realPartResult,temp12,0x652b82fe,0x3c971547);\n                  temp15 = FUN_08000168(result,tempRealPart,temp11,temp3);\n                  tempIndex1 = FUN_080009f0((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp15,\n                                       (int)((ulonglong)temp15 >> 0x20));\n                  if (tempIndex1 == 0) goto LAB_08006968;\n                }\n                temp14 = FUN_080004d0(0,imaginaryPart,0x8800759c,0x7e37e43c);\n                realPart = 0x8800759c;\n                imaginaryPart = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((tempRealPart & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((tempRealPart & 0x7fffffff) < 0x3fe00001) {\n                  tempIndex1 = 0;\n                }\n                else {\n                  tempRealPart = (0x100000 >> (((int)(tempRealPart & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          tempRealPart;\n                  result = (tempRealPart * 2 >> 0x15) - 0x3ff;\n                  tempIndex1 = (int)(tempRealPart & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (temp17 < 0) {\n                    tempIndex1 = -tempIndex1;\n                  }\n                  temp14 = FUN_08000168(temp11,temp3,0,tempRealPart & ~(0xfffff >> (result & 0xff)));\n                }\n                temp21 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp20 = (undefined4)temp14;\n                FUN_0800016c(temp20,temp21,realPartResult,temp12);\n                temp14 = FUN_080004d0(0,temp8,0,0x3fe62e43);\n                temp11 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp13 = FUN_08000168(0,temp8,temp20,temp21);\n                temp13 = FUN_08000168(realPartResult,temp12,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp15 = FUN_080004d0(0,temp8,0xca86c39,0xbe205c61);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp15,\n                                      (int)((ulonglong)temp15 >> 0x20));\n                temp12 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp15 = FUN_0800016c((int)temp14,temp11,(int)temp13,temp12);\n                temp3 = (undefined4)((ulonglong)temp15 >> 0x20);\n                realPartResult = (undefined4)temp15;\n                temp14 = FUN_08000168(realPartResult,temp3,(int)temp14,temp11);\n                temp14 = FUN_08000168((int)temp13,temp12,(int)temp14,\n                                      (int)((ulonglong)temp14 >> 0x20));\n                temp12 = (undefined4)((ulonglong)temp14 >> 0x20);\n                temp13 = FUN_080004d0(realPartResult,temp3,realPartResult,temp3);\n                temp4 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp11 = (undefined4)temp13;\n                temp13 = FUN_080004d0(temp11,temp4,0x72bea4d0,0x3e663769);\n                temp13 = FUN_08000168((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp11,temp4);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp11,temp4);\n                temp13 = FUN_08000168((int)temp13,(int)((ulonglong)temp13 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp11,temp4);\n                temp13 = FUN_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp13 = FUN_080004d0((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp11,temp4);\n                temp13 = FUN_08000168(realPartResult,temp3,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                temp11 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp15 = FUN_080004d0(realPartResult,temp3,(int)temp13,temp11);\n                temp13 = FUN_08000168((int)temp13,temp11,0,0x40000000);\n                temp13 = FUN_08000724((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp15 = FUN_080004d0(realPartResult,temp3,(int)temp14,temp12);\n                temp14 = FUN_0800016c((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                                      temp12);\n                temp14 = FUN_08000168((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                      (int)((ulonglong)temp14 >> 0x20));\n                temp14 = FUN_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),realPartResult,temp3);\n                temp13 = FUN_08000168(0,0x3ff00000,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n                tempIndex2 = (int)((ulonglong)temp13 >> 0x20);\n                tempIndex3 = tempIndex2 + tempIndex1 * 0x100000;\n                temp14 = CONCAT44(tempIndex3,(int)temp13);\n                realPart = classification;\n                if (tempIndex3 < 0x100000) {\n                  temp14 = FUN_080071c0((int)temp13,tempIndex2,tempIndex1);\n                }\n              }\n              else {\n                if ((tempRealPart + 0x3f6f3400 | result) == 0) {\n                  temp13 = FUN_08000168(result,tempRealPart,temp11,temp3);\n                  tempIndex1 = FUN_080009c8(realPartResult,temp12,(int)temp13,(int)((ulonglong)temp13 >> 0x20));\n                  if (tempIndex1 == 0) goto LAB_08006968;\n                }\n                temp14 = FUN_080004d0(0,imaginaryPart,0xc2f8f359,0x1a56e1f);\n                realPart = 0xc2f8f359;\n                imaginaryPart = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = FUN_080004d0((int)temp14,(int)((ulonglong)temp14 >> 0x20),realPart,imaginaryPart);\n              return result;\n            }\n          }\n          realPartResult = (undefined4)((ulonglong)temp13 >> 0x20);\n          temp13 = FUN_08000168((int)temp13,realPartResult,(int)temp13,realPartResult);\n          temp14 = temp13;\nLAB_08006320:\n          result = FUN_08000724((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                                (int)((ulonglong)temp14 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((tempRealPart + 0xc0100000 | realPart) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = FUN_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "realPart",
                "param_2": "imaginaryPart",
                "param_3": "exponent",
                "param_4": "sign",
                "uVar1": "realPartResult",
                "uVar2": "temp1",
                "extraout_r1": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "extraout_r1_00": "temp5",
                "extraout_r1_01": "temp6",
                "extraout_r1_02": "temp7",
                "extraout_r1_03": "temp8",
                "iVar5": "tempIndex1",
                "iVar6": "tempIndex2",
                "uVar7": "tempResult",
                "uVar8": "tempRealPart",
                "uVar9": "temp10",
                "iVar10": "tempIndex3",
                "uVar11": "result",
                "uVar12": "temp11",
                "uVar13": "temp12",
                "uVar14": "temp13",
                "uVar15": "temp14",
                "uVar16": "temp15",
                "uVar17": "temp16",
                "lVar18": "temp17",
                "uVar19": "temp18",
                "uVar20": "temp19",
                "local_70": "classification",
                "local_68": "temp20",
                "local_64": "temp21",
                "local_54": "tempIndex4"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_value_08006c0c",
            "code": "\nundefined8 calculateFloatValue_08006c0c(uint inputParam1,uint inputParam2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int shiftAmount;\n  int loopCount;\n  uint remainder;\n  uint tempResult;\n  int integralPart;\n  uint roundedValue;\n  uint mask;\n  int bitPosition;\n  uint addition;\n  undefined8 returnValue;\n  \n  if ((~inputParam2 & 0x7ff00000) == 0) {\n    returnValue = FUN_080004d0(inputParam1,inputParam2,inputParam1,inputParam2);\n    returnValue = FUN_0800016c(inputParam1,inputParam2,(int)returnValue,(int)((ulonglong)returnValue >> 0x20));\n    return returnValue;\n  }\n  if ((int)inputParam2 < 1) {\n    if ((inputParam2 & 0x7fffffff | inputParam1) == 0) {\n      return CONCAT44(inputParam2,inputParam1);\n    }\n    if (inputParam2 != 0) {\n      returnValue = FUN_08000168(inputParam1,inputParam2,inputParam1,inputParam2);\n      temp1 = (undefined4)((ulonglong)returnValue >> 0x20);\n      returnValue = FUN_08000724((int)returnValue,temp1,(int)returnValue,temp1);\n      return returnValue;\n    }\n  }\n  shiftAmount = (int)inputParam2 >> 0x14;\n  if (shiftAmount == 0) {\n    while (inputParam2 == 0) {\n      shiftAmount = shiftAmount + -0x15;\n      inputParam2 = inputParam1 >> 0xb;\n      inputParam1 = inputParam1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(inputParam2 << 0xb); inputParam2 = inputParam2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    shiftAmount = shiftAmount - (temp2 - 1);\n    inputParam2 = inputParam2 | inputParam1 >> (0x20 - temp2 & 0xff);\n    inputParam1 = inputParam1 << (temp2 & 0xff);\n  }\n  integralPart = 0;\n  temp2 = inputParam2 & 0xfffff | 0x100000;\n  if ((shiftAmount + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)inputParam1 >> 0x1f);\n    inputParam1 = inputParam1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)inputParam1 >> 0x1f);\n  loopCount = 0x16;\n  remainder = 0;\n  roundedValue = 0x200000;\n  inputParam1 = inputParam1 << 1;\n  do {\n    bitPosition = remainder + roundedValue;\n    if (bitPosition <= (int)temp2) {\n      temp2 = temp2 - bitPosition;\n      remainder = bitPosition + roundedValue;\n      integralPart = integralPart + roundedValue;\n    }\n    loopCount = loopCount + -1;\n    temp2 = temp2 * 2 - ((int)inputParam1 >> 0x1f);\n    roundedValue = roundedValue >> 1;\n    inputParam1 = inputParam1 << 1;\n  } while (loopCount != 0);\n  bitPosition = 0x20;\n  mask = 0x80000000;\n  roundedValue = 0;\n  loopCount = 0;\n  do {\n    addition = mask + loopCount;\n    tempResult = remainder;\n    if (((int)remainder < (int)temp2) || ((temp2 == remainder && (addition <= inputParam1)))) {\n      loopCount = addition + mask;\n      if (((int)addition < 0) && (-1 < loopCount)) {\n        tempResult = remainder + 1;\n      }\n      temp2 = temp2 - remainder;\n      if (inputParam1 < addition) {\n        temp2 = temp2 - 1;\n      }\n      inputParam1 = inputParam1 - addition;\n      roundedValue = roundedValue + mask;\n    }\n    temp2 = temp2 * 2 - ((int)inputParam1 >> 0x1f);\n    bitPosition = bitPosition + -1;\n    inputParam1 = inputParam1 << 1;\n    mask = mask >> 1;\n    remainder = tempResult;\n  } while (bitPosition != 0);\n  if ((inputParam1 | temp2) != 0) {\n    if (roundedValue == 0xffffffff) {\n      integralPart = integralPart + 1;\n      roundedValue = 0;\n    }\n    else {\n      roundedValue = roundedValue + 1 & 0xfffffffe;\n    }\n  }\n  roundedValue = roundedValue >> 1;\n  if (integralPart << 0x1f < 0) {\n    roundedValue = roundedValue | 0x80000000;\n  }\n  return CONCAT44((integralPart >> 1) + 0x3fe00000 + (shiftAmount + -0x3ff >> 1) * 0x100000,roundedValue);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_value_08006c0c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shiftAmount",
                "iVar4": "loopCount",
                "uVar5": "remainder",
                "uVar6": "tempResult",
                "iVar7": "integralPart",
                "uVar8": "roundedValue",
                "uVar9": "mask",
                "iVar10": "bitPosition",
                "uVar11": "addition",
                "uVar12": "returnValue"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculateResult_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint absInput2;\n  undefined8 finalResult;\n  undefined8 tempResult;\n  \n  finalResult = CONCAT44(input2,input1);\n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x44100000) {\n    if (absInput2 < 0x3fdc0000) {\n      if (absInput2 < 0x3e200000) {\n        tempResult = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = FUN_080009f0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return finalResult;\n        }\n      }\n      result = -1;\n    }\n    else {\n      finalResult = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)finalResult >> 0x20);\n      temp1 = (undefined4)finalResult;\n      if (absInput2 < 0x3ff30000) {\n        if (absInput2 < 0x3fe60000) {\n          finalResult = FUN_0800016c(temp1,temp2,temp1,temp2);\n          finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n          tempResult = FUN_0800016c(temp1,temp2,0,0x40000000);\n          finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                               (int)((ulonglong)tempResult >> 0x20));\n          result = 0;\n        }\n        else {\n          finalResult = FUN_08000168(temp1,temp2,0,0x3ff00000);\n          tempResult = FUN_0800016c(temp1,temp2,0,0x3ff00000);\n          finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                               (int)((ulonglong)tempResult >> 0x20));\n          result = 1;\n        }\n      }\n      else if (absInput2 < 0x40038000) {\n        finalResult = FUN_08000168(temp1,temp2,0,0x3ff80000);\n        tempResult = FUN_080004d0(temp1,temp2,0,0x3ff80000);\n        tempResult = FUN_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        finalResult = FUN_08000724((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                             (int)((ulonglong)tempResult >> 0x20));\n        result = 2;\n      }\n      else {\n        finalResult = FUN_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)finalResult >> 0x20);\n    temp5 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)finalResult >> 0x20);\n    temp1 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)finalResult >> 0x20);\n    temp2 = (undefined4)finalResult;\n    finalResult = FUN_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x24760deb,0x3fa97b4b);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp2,temp4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp2,temp4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xc54c206e,0x3fb745cd);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp2,temp4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x920083ff,0x3fc24924);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp2,temp4);\n    finalResult = FUN_0800016c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555550d,0x3fd55555);\n    finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)finalResult >> 0x20);\n    tempResult = FUN_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    tempResult = FUN_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult = FUN_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),temp2,temp4);\n    tempResult = FUN_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult = FUN_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),temp2,temp4);\n    tempResult = FUN_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult = FUN_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),temp2,temp4);\n    tempResult = FUN_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult = FUN_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)tempResult >> 0x20);\n    if (result == -1) {\n      finalResult = FUN_0800016c((int)finalResult,temp1,(int)tempResult,temp2);\n      finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp5,temp6);\n      finalResult = FUN_08000168(temp5,temp6,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    }\n    else {\n      finalResult = FUN_0800016c((int)finalResult,temp1,(int)tempResult,temp2);\n      finalResult = FUN_080004d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp5,temp6);\n      result = result * 8;\n      finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),temp5,temp6);\n      finalResult = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)finalResult,\n                           (int)((ulonglong)finalResult >> 0x20));\n      if ((int)input2 < 0) {\n        finalResult = CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\n      }\n    }\n  }\n  else if ((absInput2 < 0x7ff00001) && ((absInput2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    finalResult = FUN_0800016c(input1,input2,input1,input2,input4);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "absInput2",
                "uVar9": "finalResult",
                "uVar10": "tempResult"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "get_bitwise_shift_08007092",
            "code": "\nuint get_bitwise_shift_08007092(undefined4 input,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "get_bitwise_shift_08007092",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nundefined4 initialize_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "reverse_binary_operation_080070b0",
            "code": "\nundefined8 reverseBinaryOperation_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  undefined8 result;\n  \n  tempVar7 = (input2 << 1) >> 0x15;\n  tempVar6 = tempVar7 - 0x3ff;\n  tempVar3 = input2;\n  if ((int)tempVar6 < 0x14) {\n    if ((int)tempVar6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar3 = input2 & 0xfffff | input1;\n      tempVar1 = ((int)input2 >> 0x1f) * -8;\n      tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n      tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n      result = FUN_0800016c(input1,(-tempVar3 | tempVar3) >> 0xc & 0x80000 | input2 & 0xfffe0000,tempVar2,\n                           tempVar4,input1,input2,input3);\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),tempVar2,tempVar4);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    tempVar7 = 0xfffff >> (tempVar6 & 0xff);\n    if ((input2 & tempVar7 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar7 = tempVar7 >> 1;\n    tempVar5 = input2 & tempVar7 | input1;\n    if (tempVar5 != 0) {\n      if (tempVar6 == 0x13) {\n        tempVar5 = 0x80000000;\n      }\n      else {\n        tempVar5 = 0;\n      }\n      tempVar3 = 0x40000 >> (tempVar6 & 0xff) | input2 & ~tempVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar6) {\n      if (tempVar6 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = FUN_0800016c();\n      return result;\n    }\n    tempVar7 = tempVar7 - 0x413;\n    tempVar6 = 0xffffffff >> (tempVar7 & 0xff);\n    if ((input1 & tempVar6) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar5 = input1;\n    if ((input1 & tempVar6) != 0) {\n      tempVar5 = 0x40000000 >> (tempVar7 & 0xff) | input1 & ~tempVar6;\n    }\n  }\n  tempVar1 = ((int)input2 >> 0x1f) * -8;\n  tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n  tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n  result = FUN_0800016c(tempVar5,tempVar3,tempVar2,tempVar4,input1,input2,input3);\n  result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),tempVar2,tempVar4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "reverse_binary_operation_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_float_080071c0",
            "code": "\nundefined8 calculateFloat_080071c0(uint input1,uint input2,int offset,undefined4 param)\n\n{\n  uint shiftedParam2;\n  undefined4 result;\n  int newOffset;\n  undefined4 const1;\n  uint shiftedInput1;\n  undefined8 result64;\n  \n  result64 = CONCAT44(input2,input1);\n  shiftedParam2 = (input2 << 1) >> 0x15;\n  if (shiftedParam2 == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result64;\n    }\n    result64 = FUN_080004d0(input1,input2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shiftedParam2 = ((uint)((int)((ulonglong)result64 >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result = 0xc2f8f359;\n    const1 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedParam2 == 0x7ff) {\n      result64 = FUN_0800016c(input1,input2,input1,input2,param);\n      return result64;\n    }\nLAB_08007210:\n    shiftedInput1 = (uint)((ulonglong)result64 >> 0x20);\n    result = (undefined4)result64;\n    newOffset = shiftedParam2 + offset;\n    if (newOffset < 0x7ff) {\n      if (0 < newOffset) {\n        return CONCAT44(shiftedInput1 & 0x800fffff | newOffset * 0x100000,result);\n      }\n      if (newOffset + 0x35 < 0 == SCARRY4(newOffset,0x35)) {\n        result64 = CONCAT44(shiftedInput1 & 0x800fffff | (newOffset + 0x36) * 0x100000,result);\n        result = 0;\n        const1 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (offset < 0xc351) {\n        result64 = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result,shiftedInput1);\n        goto LAB_080071ec;\n      }\n    }\n    result64 = FUNC_0800729c(0x8800759c,0x7e37e43c,result,shiftedInput1);\n    result = 0x8800759c;\n    const1 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result64 = FUN_080004d0((int)result64,(int)((ulonglong)result64 >> 0x20),result,const1);\n  return result64;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_float_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "param_4": "param",
                "uVar1": "shiftedParam2",
                "uVar2": "result",
                "iVar3": "newOffset",
                "uVar4": "const1",
                "uVar5": "shiftedInput1",
                "uVar6": "result64"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_080072ac",
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_080072b8",
            "code": "\nvoid updateData_080072b8(int valueToAdd)\n\n{\n  if (DAT_200002b4 == (genericPtr *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + valueToAdd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_080072b8",
                "param_1": "valueToAdd",
                "undefined": "genericPtr"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 189083,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}