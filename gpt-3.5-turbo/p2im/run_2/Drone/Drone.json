{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_if_needed_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlagIfNeeded_08000110(undefined4 input_value)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_if_needed_08000110",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_values_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_string_length_08000150",
            "code": "\nchar * find_string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = input_string;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_string_length_08000150",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_product_08000168",
            "code": "\nulonglong calculateProduct_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  byte tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  tempVar6 = input4 ^ 0x80000000;\n  tempVar9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ tempVar6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (tempVar9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  tempVar8 = (int)tempVar9 >> 0x15;\n  if (!flag2) {\n    flag2 = tempVar8 == -1;\n  }\n  tempVar1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = tempVar1 == -1;\n  }\n  if (flag2) {\n    if (tempVar8 == -1 || tempVar1 == -1) {\n      tempVar9 = tempVar6;\n      tempVar11 = input3;\n      if (tempVar8 == -1) {\n        tempVar9 = input2;\n        tempVar11 = input1;\n      }\n      if (tempVar8 != -1 || tempVar1 != -1) {\n        input3 = tempVar11;\n        tempVar6 = tempVar9;\n      }\n      flag2 = (tempVar11 | tempVar9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | tempVar6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = tempVar9 == tempVar6;\n      }\n      if (!flag2) {\n        tempVar9 = tempVar9 | 0x80000;\n      }\n      return CONCAT44(tempVar9,tempVar11);\n    }\n    if (((input2 ^ tempVar6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((tempVar9 | input1) == 0) {\n        input1 = input3;\n        input2 = tempVar6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != tempVar6) {\n      return 0;\n    }\n    if (tempVar9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      tempVar6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        tempVar6 = tempVar6 | 0x80000000;\n      }\n      return CONCAT44(tempVar6,input1 << 1);\n    }\n    if (tempVar9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  tempVar9 = tempVar9 >> 0x15;\n  input4 = input4 >> 0x15;\n  tempVar11 = input4 - tempVar9;\n  flag2 = tempVar11 != 0;\n  if (input4 < tempVar9) {\n    tempVar11 = -tempVar11;\n  }\n  tempVar10 = input1;\n  tempVar7 = input2;\n  if (flag2 && tempVar9 <= input4) {\n    tempVar9 = tempVar9 + tempVar11;\n    tempVar10 = input3;\n    tempVar7 = tempVar6;\n    input3 = input1;\n    tempVar6 = input2;\n  }\n  if (0x36 < tempVar11) {\n    return CONCAT44(tempVar7,tempVar10);\n  }\n  tempVar4 = tempVar7 & 0xfffff | 0x100000;\n  if ((tempVar7 & 0x80000000) != 0) {\n    flag2 = tempVar10 != 0;\n    tempVar10 = -tempVar10;\n    tempVar4 = -tempVar4 - (uint)flag2;\n  }\n  tempVar7 = tempVar6 & 0xfffff | 0x100000;\n  if ((tempVar6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    tempVar7 = -tempVar7 - (uint)flag2;\n  }\n  if (tempVar9 == tempVar11) {\n    tempVar7 = tempVar7 ^ 0x100000;\n    if (tempVar9 == 0) {\n      tempVar4 = tempVar4 ^ 0x100000;\n      tempVar9 = 1;\n    }\n    else {\n      tempVar11 = tempVar11 - 1;\n    }\n  }\n  tempVar6 = -tempVar11 + 0x20;\n  if ((int)tempVar11 < 0x21) {\n    tempVar12 = input3 << (tempVar6 & 0xff);\n    input3 = input3 >> (tempVar11 & 0xff);\n    tempVar3 = tempVar10 + input3;\n    tempVar5 = tempVar7 << (tempVar6 & 0xff);\n    tempVar6 = tempVar3 + tempVar5;\n    tempVar4 = tempVar4 + CARRY4(tempVar10,input3) + ((int)tempVar7 >> (tempVar11 & 0xff)) +\n            (uint)CARRY4(tempVar3,tempVar5);\n  }\n  else {\n    tempVar12 = tempVar7 << (-tempVar11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      tempVar12 = tempVar12 | 2;\n    }\n    tempVar7 = (int)tempVar7 >> (tempVar11 - 0x20 & 0xff);\n    tempVar6 = tempVar10 + tempVar7;\n    tempVar4 = tempVar4 + ((int)tempVar7 >> 0x1f) + (uint)CARRY4(tempVar10,tempVar7);\n  }\n  input2 = tempVar4 & 0x80000000;\n  tempVar11 = tempVar4;\n  if ((int)tempVar4 < 0) {\n    flag2 = tempVar12 == 0;\n    tempVar12 = -tempVar12;\n    tempVar11 = -tempVar6;\n    tempVar6 = -(uint)!flag2 - tempVar6;\n    tempVar11 = -(uint)(flag2 <= tempVar11) - tempVar4;\n  }\n  if (0xfffff < tempVar11) {\n    tempVar10 = tempVar9 - 1;\n    if (0x1fffff < tempVar11) {\n      tempVar10 = tempVar11 & 1;\n      tempVar11 = tempVar11 >> 1;\n      tempVar2 = (byte)tempVar6;\n      tempVar6 = (uint)(tempVar10 != 0) << 0x1f | tempVar6 >> 1;\n      tempVar12 = (uint)(tempVar2 & 1) << 0x1f | tempVar12 >> 1;\n      tempVar10 = tempVar9;\n      if (0xffbfffff < tempVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < tempVar12;\n    if (tempVar12 == 0x80000000) {\n      flag2 = (tempVar6 & 1) != 0;\n    }\n    return CONCAT44(tempVar11 + tempVar10 * 0x100000 + (uint)CARRY4(tempVar6,(uint)flag2) | input2,\n                    tempVar6 + flag2);\n  }\n  flag1 = (tempVar12 & 0x80000000) != 0;\n  tempVar12 = tempVar12 << 1;\n  tempVar10 = tempVar6 * 2;\n  flag2 = CARRY4(tempVar6,tempVar6);\n  tempVar6 = tempVar6 * 2 + (uint)flag1;\n  tempVar11 = tempVar11 * 2 + (uint)(flag2 || CARRY4(tempVar10,(uint)flag1));\n  tempVar10 = tempVar9 - 2;\n  if ((tempVar11 & 0x100000) != 0) goto LAB_08000278;\n  tempVar7 = tempVar6;\n  tempVar9 = tempVar11;\n  if (tempVar11 == 0) {\n    tempVar7 = 0;\n    tempVar9 = tempVar6;\n  }\n  tempVar8 = LZCOUNT(tempVar9);\n  if (tempVar11 == 0) {\n    tempVar8 = tempVar8 + 0x20;\n  }\n  tempVar11 = tempVar8 - 0xb;\n  flag3 = SBORROW4(tempVar11,0x20);\n  tempVar6 = tempVar8 - 0x2b;\n  flag2 = (int)tempVar6 < 0;\n  flag1 = tempVar6 == 0;\n  if ((int)tempVar11 < 0x20) {\n    flag3 = SCARRY4(tempVar6,0xc);\n    tempVar8 = tempVar8 + -0x1f;\n    flag2 = tempVar8 < 0;\n    flag1 = tempVar8 == 0;\n    tempVar6 = tempVar11;\n    if (!flag1 && flag2 == flag3) {\n      tempVar7 = tempVar9 << (tempVar11 & 0xff);\n      tempVar9 = tempVar9 >> (0xcU - tempVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    tempVar12 = 0x20 - tempVar6;\n  }\n  tempVar9 = tempVar9 << (tempVar6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    tempVar9 = tempVar9 | tempVar7 >> (tempVar12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    tempVar7 = tempVar7 << (tempVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)tempVar11 <= (int)tempVar10) {\n    return CONCAT44(tempVar9 + (tempVar10 - tempVar11) * 0x100000 | input2,tempVar7);\n  }\n  tempVar6 = ~(tempVar10 - tempVar11);\n  if ((int)tempVar6 < 0x1f) {\n    tempVar8 = tempVar6 - 0x13;\n    if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar6 - 0x1f,0xc)) {\n      return CONCAT44(tempVar4,tempVar7 >> (0x20 - (0xcU - tempVar8) & 0xff) | tempVar9 << (0xcU - tempVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar6 = tempVar6 + 1;\n    return CONCAT44(input2 | tempVar9 >> (tempVar6 & 0xff),\n                    tempVar7 >> (tempVar6 & 0xff) | tempVar9 << (0x20 - tempVar6 & 0xff));\n  }\n  return CONCAT44(tempVar4,tempVar9 >> (tempVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_product_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "bVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_multiplication_division_0800016c",
            "code": "\nulonglong calculate_multiplication_division_0800016c(uint number1,uint number2,uint number3,uint number4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp4 = number2 << 1;\n  temp6 = number4 << 1;\n  condition1 = ((number2 ^ number4) & 0x7fffffff) == 0;\n  condition2 = condition1 && number1 == number3;\n  if (!condition1 || number1 != number3) {\n    condition2 = (temp4 | number1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (temp6 | number3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)temp6 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp6 = number4;\n      temp4 = number3;\n      if (shift2 == -1) {\n        temp6 = number2;\n        temp4 = number1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        number3 = temp4;\n        number4 = temp6;\n      }\n      condition2 = (temp4 | temp6 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (number3 | number4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp6 == number4;\n      }\n      if (!condition2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((number2 ^ number4) & 0x7fffffff) != 0 || number1 != number3) {\n      if ((temp4 | number1) == 0) {\n        number1 = number3;\n        number2 = number4;\n      }\n      return CONCAT44(number2,number1);\n    }\n    if (number2 != number4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition2 = (number1 & 0x80000000) != 0;\n      temp6 = number2 * 2 + (uint)condition2;\n      if (CARRY4(number2,number2) || CARRY4(number2 * 2,(uint)condition2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,number1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(number2 + 0x100000,number1);\n    }\n    number2 = number2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(number2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  condition2 = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = number1;\n  temp3 = number2;\n  if (condition2 && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = number3;\n    temp3 = number4;\n    number3 = number1;\n    number4 = number2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)condition2;\n  }\n  temp3 = number4 & 0xfffff | 0x100000;\n  if ((number4 & 0x80000000) != 0) {\n    condition2 = number3 != 0;\n    number3 = -number3;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = number3 << (temp9 & 0xff);\n    number3 = number3 >> (temp7 & 0xff);\n    temp1 = temp5 + number3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,number3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (number3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  number2 = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    condition2 = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!condition2 - temp9;\n    temp7 = -(uint)(condition2 <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      condition2 = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)condition2) | number2,\n                    temp9 + condition2);\n  }\n  condition1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  condition2 = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)condition1;\n  temp7 = temp7 * 2 + (uint)(condition2 || CARRY4(temp5,(uint)condition1));\n  temp5 = temp4 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  condition3 = SBORROW4(temp9,0x20);\n  temp7 = shift2 - 0x2b;\n  condition2 = (int)temp7 < 0;\n  condition1 = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    condition3 = SCARRY4(temp7,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp7 = temp9;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | number2,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift2 = temp7 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(number2 | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_multiplication_division_0800016c",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "number3",
                "param_4": "number4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculate_shifted_value_08000404(uint input_value)\n\n{\n  uint result;\n  uint abs_input_value;\n  uint shift_value;\n  int lzcount_result;\n  uint total_shift;\n  uint sign_bit;\n  uint remaining_shift;\n  bool is_negative;\n  bool is_zero;\n  bool should_shift;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input_value = -input_value;\n  }\n  result = 0;\n  lzcount_result = LZCOUNT(abs_input_value);\n  total_shift = lzcount_result + 0x15;\n  should_shift = SBORROW4(total_shift,0x20);\n  shift_value = lzcount_result - 0xb;\n  is_negative = (int)shift_value < 0;\n  is_zero = shift_value == 0;\n  if (total_shift < 0x20) {\n    should_shift = SCARRY4(shift_value,0xc);\n    is_negative = false;\n    is_zero = lzcount_result + 1 == 0;\n    shift_value = total_shift;\n    if (!is_zero && should_shift == false) {\n      result = abs_input_value << total_shift;\n      abs_input_value = abs_input_value >> (0xcU - (lzcount_result + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_negative != should_shift) {\n    remaining_shift = 0x20 - shift_value;\n  }\n  abs_input_value = abs_input_value << (shift_value & 0xff);\n  if (is_zero || is_negative != should_shift) {\n    abs_input_value = abs_input_value | 0U >> (remaining_shift & 0xff);\n  }\n  if (is_zero || is_negative != should_shift) {\n    result = 0 << (shift_value & 0xff);\n  }\nLAB_080002f0:\n  if (total_shift < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - total_shift) * 0x100000 | sign_bit,result);\n  }\n  shift_value = ~(0x432 - total_shift);\n  if (0x1e < (int)shift_value) {\n    return CONCAT44(input_value,abs_input_value >> (shift_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  lzcount_result = shift_value - 0x13;\n  if (lzcount_result == 0 || lzcount_result < 0 != SCARRY4(shift_value - 0x1f,0xc)) {\n    shift_value = shift_value + 1;\n    return CONCAT44(sign_bit | abs_input_value >> (shift_value & 0xff),\n                    result >> (shift_value & 0xff) | abs_input_value << (0x20 - shift_value & 0xff));\n  }\n  return CONCAT44(input_value,result >> (0x20 - (0xcU - lzcount_result) & 0xff) | abs_input_value << (0xcU - lzcount_result & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input_value",
                "uVar1": "result",
                "uVar2": "abs_input_value",
                "uVar3": "shift_value",
                "iVar4": "lzcount_result",
                "uVar5": "total_shift",
                "uVar6": "sign_bit",
                "in_r12": "remaining_shift",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "should_shift"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_binary_operation_08000428",
            "code": "\nulonglong reverseBinaryOperation_08000428(uint inputValue,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint firstBitShift;\n  uint tempValue;\n  uint result1;\n  uint result2;\n  uint shiftedValue;\n  int LZcountValue;\n  uint shiftedResult;\n  uint shiftAmount;\n  bool isEqualToZero;\n  bool isEqualsZeroOr255;\n  bool isNegative;\n  \n  shiftedValue = inputValue << 1;\n  isEqualsZeroOr255 = shiftedValue == 0;\n  firstBitShift = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  result2 = (uint)((int)shiftedValue >> 3) >> 1;\n  result1 = firstBitShift | result2;\n  inputValue = inputValue << 0x1d;\n  if (!isEqualsZeroOr255) {\n    param4 = shiftedValue & 0xff000000;\n    isEqualsZeroOr255 = param4 == 0;\n  }\n  if (!isEqualsZeroOr255) {\n    isEqualsZeroOr255 = param4 == 0xff000000;\n  }\n  if (!isEqualsZeroOr255) {\n    return CONCAT44(result1,inputValue) ^ 0x3800000000000000;\n  }\n  if (shiftedValue == 0 || param4 == 0xff000000) {\n    return CONCAT44(result1,inputValue);\n  }\n  tempValue = inputValue;\n  shiftedValue = result2;\n  if (result2 == 0) {\n    tempValue = 0;\n    shiftedValue = inputValue;\n  }\n  LZcountValue = leadingZeroCount(shiftedValue);\n  if (result2 == 0) {\n    LZcountValue = LZcountValue + 0x20;\n  }\n  shiftedResult = LZcountValue - 0xb;\n  isNegative = subtractBorrow4(shiftedResult,0x20);\n  result2 = LZcountValue - 0x2b;\n  isEqualsZeroOr255 = (int)result2 < 0;\n  isEqualToZero = result2 == 0;\n  if ((int)shiftedResult < 0x20) {\n    isNegative = subtractCarry4(result2,0xc);\n    LZcountValue = LZcountValue + -0x1f;\n    isEqualsZeroOr255 = LZcountValue < 0;\n    isEqualToZero = LZcountValue == 0;\n    result2 = shiftedResult;\n    if (!isEqualToZero && isEqualsZeroOr255 == isNegative) {\n      tempValue = shiftedValue << (shiftedResult & 0xff);\n      shiftedValue = shiftedValue >> (0xcU - LZcountValue & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isEqualToZero || isEqualsZeroOr255 != isNegative) {\n    shiftAmount = 0x20 - result2;\n  }\n  shiftedValue = shiftedValue << (result2 & 0xff);\n  if (isEqualToZero || isEqualsZeroOr255 != isNegative) {\n    shiftedValue = shiftedValue | tempValue >> (shiftAmount & 0xff);\n  }\n  if (isEqualToZero || isEqualsZeroOr255 != isNegative) {\n    tempValue = tempValue << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftedResult < 0x381) {\n    return CONCAT44(shiftedValue + (0x380 - shiftedResult) * 0x100000 | firstBitShift,tempValue);\n  }\n  result2 = ~(0x380 - shiftedResult);\n  if ((int)result2 < 0x1f) {\n    LZcountValue = result2 - 0x13;\n    if (LZcountValue != 0 && LZcountValue < 0 == subtractCarry4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,tempValue >> (0x20 - (0xcU - LZcountValue) & 0xff) | shiftedValue << (0xcU - LZcountValue & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(firstBitShift | shiftedValue >> (result2 & 0xff),\n                    tempValue >> (result2 & 0xff) | shiftedValue << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,shiftedValue >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_binary_operation_08000428",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "firstBitShift",
                "uVar2": "tempValue",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "shiftedValue",
                "iVar6": "LZcountValue",
                "uVar7": "shiftedResult",
                "in_r12": "shiftAmount",
                "bVar8": "isEqualToZero",
                "bVar9": "isEqualsZeroOr255",
                "bVar10": "isNegative",
                "LZCOUNT": "leadingZeroCount",
                "SBORROW4": "subtractBorrow4",
                "SCARRY4": "subtractCarry4"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "perform_calculation_080004d0",
            "code": "\nulonglong performCalculation_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint operand;\n  uint operand2;\n  int sum;\n  uint carry;\n  uint unaff_r5;\n  uint carrySum;\n  uint uVar8;\n  bool isZero;\n  bool isNegative;\n  bool isBorrow;\n  ulonglong result2;\n  \n  result2 = CONCAT44(input2,input1);\n  carrySum = 0x7ff;\n  operand2 = input2 >> 0x14 & 0x7ff;\n  isZero = operand2 == 0;\n  if (!isZero) {\n    unaff_r5 = input4 >> 0x14 & 0x7ff;\n    isZero = unaff_r5 == 0;\n  }\n  if (!isZero) {\n    isZero = operand2 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = unaff_r5 == 0x7ff;\n  }\n  if (isZero) {\n    result2 = calculate_bitwise_080006ac();\n  }\n  operand = (uint)(result2 >> 0x20);\n  sum = operand2 + unaff_r5;\n  operand2 = operand ^ input4;\n  operand = operand & ~(carrySum << 0x15);\n  input4 = input4 & ~(carrySum << 0x15);\n  isZero = ((uint)result2 | operand << 0xc) == 0;\n  if (!isZero) {\n    isZero = (input3 | input4 << 0xc) == 0;\n  }\n  operand = operand | 0x100000;\n  input4 = input4 | 0x100000;\n  if (isZero) {\n    input3 = (uint)result2 | input3;\n    input4 = (operand2 & 0x80000000 | operand) ^ input4;\n    operand2 = carrySum >> 1;\n    isBorrow = SBORROW4(sum,operand2);\n    carry = sum - operand2;\n    isZero = carry == 0;\n    operand = carry;\n    if (!isZero && (int)operand2 <= sum) {\n      isBorrow = SBORROW4(carrySum,carry);\n      operand = carrySum - carry;\n      isZero = carrySum == carry;\n    }\n    if (!isZero && (int)operand < 0 == isBorrow) {\n      input4 = input4 | carry * 0x100000;\n    }\n    if (!isZero && (int)operand < 0 == isBorrow) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    carrySum = 0;\n    isBorrow = SBORROW4(carry,1);\n    carry = carry - 1;\n    isZero = carry == 0;\n    operand2 = carry;\n  }\n  else {\n    result = (result2 & 0xffffffff) * (ulonglong)input3;\n    result2 = (result2 & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)operand * (ulonglong)input3 + (result >> 0x20);\n    uVar8 = (uint)result2;\n    temp = (ulonglong)operand * (ulonglong)input4 + (result2 >> 0x20);\n    carrySum = (uint)temp;\n    operand = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    carry = (sum + -0x3ff) - (uint)(operand < 0x200);\n    if (operand < 0x200) {\n      isZero = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      temp = CONCAT44(operand * 2 + (uint)(CARRY4(carrySum,carrySum) || CARRY4(carrySum * 2,(uint)isZero)),\n                       carrySum * 2 + (uint)isZero);\n    }\n    input4 = operand2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | uVar8 >> 0x15;\n    carrySum = uVar8 * 0x800;\n    isNegative = 0xfc < carry;\n    isBorrow = SBORROW4(carry,0xfd);\n    operand = carry - 0xfd;\n    isZero = operand == 0;\n    operand2 = operand;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < operand;\n      isBorrow = SBORROW4(operand,0x700);\n      operand2 = carry - 0x7fd;\n      isZero = operand == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = 0x7fffffff < carrySum;\n      if (carrySum == 0x80000000) {\n        isZero = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + carry * 0x100000 + (uint)CARRY4(input3,(uint)isZero),input3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)operand2 < 0 == isBorrow) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(carry,0x36);\n  isZero = (int)(carry + 0x36) < 0;\n  isBorrow = carry == 0xffffffca;\n  if (isBorrow || isZero != isNegative) {\n    input3 = 0;\n  }\n  if (isBorrow || isZero != isNegative) {\n    input4 = input4 & 0x80000000;\n  }\n  if (isBorrow || isZero != isNegative) {\n    return CONCAT44(input4,input3);\n  }\n  operand2 = -carry;\n  operand = operand2 - 0x20;\n  if (0x1f < (int)operand2) {\n    carry = input3 >> (operand & 0xff) | input4 << (0x20 - operand & 0xff);\n    operand2 = (input4 >> (operand & 0xff) & ~((input4 & 0x80000000) >> (operand & 0xff))) -\n            ((int)carry >> 0x1f);\n    if ((carrySum | input3 << (0x20 - operand & 0xff) | carry << 1) == 0) {\n      operand2 = operand2 & ~(carry >> 0x1f);\n    }\n    return CONCAT44(input4,operand2) & 0x80000000ffffffff;\n  }\n  sum = operand2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(operand,0xc)) {\n    uVar8 = input3 << (carry + 0x20 & 0xff);\n    operand = input3 >> (operand2 & 0xff) | input4 << (carry + 0x20 & 0xff);\n    carry = operand + -((int)uVar8 >> 0x1f);\n    if ((carrySum | uVar8 << 1) == 0) {\n      carry = carry & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (operand2 & 0xff)) +\n                    (uint)CARRY4(operand,-((int)uVar8 >> 0x1f)),carry);\n  }\n  operand2 = 0xc - sum;\n  carry = input3 << (operand2 & 0xff);\n  operand2 = input3 >> (0x20 - operand2 & 0xff) | input4 << (operand2 & 0xff);\n  operand = operand2 + -((int)carry >> 0x1f);\n  if ((carrySum | carry << 1) == 0) {\n    operand = operand & ~(carry >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(operand2,-((int)carry >> 0x1f)),operand);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "perform_calculation_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "lVar2": "temp",
                "uVar3": "operand",
                "uVar4": "operand2",
                "iVar5": "sum",
                "uVar6": "carry",
                "uVar7": "carrySum",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "bVar11": "isBorrow"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_080006ac",
            "code": "\nulonglong calculate_bitwise_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_double_from_float_08000724",
            "code": "\nulonglong calculateDoubleFromFloat_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 convertedValue;\n  \n  convertedValue = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    convertedValue = convert_to_double_08000892();\n  }\n  temp9 = (uint)((ulonglong)convertedValue >> 0x20);\n  temp12 = (uint)convertedValue;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_double_from_float_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "convertedValue"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "convert_to_double_08000892",
            "code": "\nulonglong convertToDouble_08000892(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint bit1;\n  uint constant;\n  uint bit2;\n  uint bitResult;\n  uint constant2;\n  bool allZero;\n  \n  bit2 = constant2 & num4 >> 0x14;\n  bitResult = num2;\n  if (constant != constant2 || bit2 != constant2) {\n    if (constant == constant2) {\n      if (((num1 | num2 << 0xc) == 0) && (num1 = num3, bitResult = num4, bit2 != constant2)\n         ) {\nLAB_08000704:\n        return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant2) {\n      num1 = num3;\n      bitResult = num4;\n      if ((num3 | num4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      allZero = (num1 | num2 << 1) == 0;\n      if (!allZero) {\n        allZero = (num3 | num4 << 1) == 0;\n      }\n      if (!allZero) {\n        if (constant == 0) {\n          bitResult = num2 & 0x80000000;\n          do {\n            bit1 = num1 & 0x80000000;\n            num1 = num1 << 1;\n            num2 = num2 * 2 + (uint)(bit1 != 0);\n          } while ((num2 & 0x100000) == 0);\n          num2 = num2 | bitResult;\n          if (bit2 != 0) {\n            return CONCAT44(num2,num1);\n          }\n        }\n        do {\n          bitResult = num3 & 0x80000000;\n          num3 = num3 << 1;\n          num4 = num4 * 2 + (uint)(bitResult != 0);\n        } while ((num4 & 0x100000) == 0);\n        return CONCAT44(num2,num1);\n      }\n      if ((num1 | num2 << 1) != 0) goto LAB_08000704;\n      if ((num3 | num4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bitResult,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "convert_to_double_08000892",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "bit1",
                "unaff_r4": "constant",
                "uVar2": "bit2",
                "uVar3": "bitResult",
                "in_r12": "constant2",
                "bVar4": "allZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_08000904",
            "code": "\nuint check_parameters_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "validate_and_return_08000980",
            "code": "\nvoid validate_and_return_08000980(undefined4 param_1,undefined4 param_2,undefined4 data_1,undefined4 data_2)\n\n{\n  validate_and_return_08000980_08000990(data_1,data_2,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "validate_and_return_08000980",
                "param_3": "data_1",
                "param_4": "data_2"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "validate_and_return_08000990",
            "code": "\nundefined4 validate_and_return_08000990(undefined4 input_value)\n\n{\n  check_parameters_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "validate_and_return_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_input_is_valid_080009a0",
            "code": "\nbool check_if_input_is_valid_080009a0(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08000990();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_input_is_valid_080009a0",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_null_termination_080009b4",
            "code": "\nbool check_null_termination_080009b4(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_null_termination_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_validity_080009c8",
            "code": "\nbool check_and_return_validity_080009c8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  validate_and_return_result();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_validity_080009c8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry",
                "validate_and_return_08000990": "validate_and_return_result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_c_string_empty_080009f0",
            "code": "\nbool is_CStringEmpty_080009f0(void)\n\n{\n  char input_char;\n  \n  validate_and_return_08000980();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_c_string_empty_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "is_valid_data_08000a04",
            "code": "\nundefined4 is_valid_data_08000a04(uint data1,int value1,uint data2,int value2)\n\n{\n  if ((((value1 << 1) >> 0x15 != -1) || ((data1 | value1 << 0xc) == 0)) &&\n     (((value2 << 1) >> 0x15 != -1 || ((data2 | value2 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "is_valid_data_08000a04",
                "param_1": "data1",
                "param_2": "value1",
                "param_3": "data2",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_float_08000a30",
            "code": "\nuint calculateFloat_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool flag1;\n  bool flag2;\n  \n  temp1 = input2 * 2;\n  flag2 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!flag2) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  flag1 = result == 0;\n  if (!flag2 && temp2 >= 0x200000) {\n    flag1 = temp3 == 0x1fc00000;\n  }\n  if (((flag2 || temp2 < 0x200000) || 0x1fc00000 < temp3) || flag1) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_float_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "flag1",
                "bVar5": "flag2"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_difference_08000ad8",
            "code": "\nuint calculateFloatingPointDifference_08000ad8(uint floatA,uint floatB,undefined4 floatC,uint floatD)\n\n{\n  int shiftedFloatA;\n  int shiftedFloatB;\n  uint bitwiseXorAB;\n  uint bitwiseXorAFlipB;\n  uint shiftedFloatANormalized;\n  uint normalizedSum;\n  uint difference;\n  bool comparisonFlag;\n  \n  bitwiseXorAB = floatB ^ 0x80000000;\n  shiftedFloatANormalized = floatA << 1;\n  comparisonFlag = shiftedFloatANormalized == 0;\n  if (!comparisonFlag) {\n    floatD = floatB << 1;\n    comparisonFlag = floatD == 0;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = shiftedFloatANormalized == floatD;\n  }\n  shiftedFloatA = (int)shiftedFloatANormalized >> 0x18;\n  if (!comparisonFlag) {\n    comparisonFlag = shiftedFloatA == -1;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = (int)floatD >> 0x18 == -1;\n  }\n  if (comparisonFlag) {\n    shiftedFloatB = (int)(floatB << 1) >> 0x18;\n    if (shiftedFloatA == -1 || shiftedFloatB == -1) {\n      shiftedFloatANormalized = bitwiseXorAB;\n      if (shiftedFloatA == -1) {\n        shiftedFloatANormalized = floatA;\n      }\n      if (shiftedFloatA != -1 || shiftedFloatB != -1) {\n        bitwiseXorAB = shiftedFloatANormalized;\n      }\n      comparisonFlag = (shiftedFloatANormalized & 0x7fffff) == 0;\n      if (comparisonFlag) {\n        comparisonFlag = (bitwiseXorAB & 0x7fffff) == 0;\n      }\n      if (comparisonFlag) {\n        comparisonFlag = shiftedFloatANormalized == bitwiseXorAB;\n      }\n      if (!comparisonFlag) {\n        shiftedFloatANormalized = shiftedFloatANormalized | 0x400000;\n      }\n      return shiftedFloatANormalized;\n    }\n    if (((floatA ^ bitwiseXorAB) & 0x7fffffff) != 0) {\n      if (shiftedFloatANormalized == 0) {\n        floatA = bitwiseXorAB;\n      }\n      return floatA;\n    }\n    if (floatA != bitwiseXorAB) {\n      return 0;\n    }\n    if ((shiftedFloatANormalized & 0xff000000) == 0) {\n      bitwiseXorAB = floatA << 1;\n      if ((floatA & 0x80000000) != 0) {\n        bitwiseXorAB = bitwiseXorAB | 0x80000000;\n      }\n      return bitwiseXorAB;\n    }\n    if (shiftedFloatANormalized < 0xfe000000) {\n      return floatA + 0x800000;\n    }\n    floatA = floatA & 0x80000000;\nLAB_08000c12:\n    return floatA | 0x7f800000;\n  }\n  shiftedFloatANormalized = shiftedFloatANormalized >> 0x18;\n  floatD = floatD >> 0x18;\n  difference = floatD - shiftedFloatANormalized;\n  comparisonFlag = difference != 0;\n  normalizedSum = shiftedFloatANormalized;\n  if (comparisonFlag && shiftedFloatANormalized <= floatD) {\n    normalizedSum = shiftedFloatANormalized + difference;\n  }\n  if (comparisonFlag && shiftedFloatANormalized <= floatD) {\n    bitwiseXorAB = bitwiseXorAB ^ floatA;\n  }\n  if (comparisonFlag && shiftedFloatANormalized <= floatD) {\n    floatA = floatA ^ bitwiseXorAB;\n  }\n  if (comparisonFlag && shiftedFloatANormalized <= floatD) {\n    bitwiseXorAB = bitwiseXorAB ^ floatA;\n  }\n  if (floatD < shiftedFloatANormalized) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return floatA;\n  }\n  shiftedFloatANormalized = floatA & 0xffffff | 0x800000;\n  if ((floatA & 0x80000000) != 0) {\n    shiftedFloatANormalized = -shiftedFloatANormalized;\n  }\n  bitwiseXorAFlipB = bitwiseXorAB & 0xffffff | 0x800000;\n  if ((bitwiseXorAB & 0x80000000) != 0) {\n    bitwiseXorAFlipB = -bitwiseXorAFlipB;\n  }\n  if (normalizedSum == difference) {\n    bitwiseXorAFlipB = bitwiseXorAFlipB ^ 0x800000;\n    if (normalizedSum == 0) {\n      shiftedFloatANormalized = shiftedFloatANormalized ^ 0x800000;\n      normalizedSum = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedFloatANormalized = shiftedFloatANormalized + ((int)bitwiseXorAFlipB >> (difference & 0xff));\n  bitwiseXorAFlipB = bitwiseXorAFlipB << (0x20 - difference & 0xff);\n  floatA = shiftedFloatANormalized & 0x80000000;\n  if ((int)shiftedFloatANormalized < 0) {\n    comparisonFlag = bitwiseXorAFlipB != 0;\n    bitwiseXorAFlipB = -bitwiseXorAFlipB;\n    shiftedFloatANormalized = -shiftedFloatANormalized - (uint)comparisonFlag;\n  }\n  if (shiftedFloatANormalized < 0x800000) {\n    bitwiseXorAB = bitwiseXorAFlipB & 0x80000000;\n    bitwiseXorAFlipB = bitwiseXorAFlipB << 1;\n    shiftedFloatANormalized = shiftedFloatANormalized * 2 + (uint)(bitwiseXorAB != 0);\n    bitwiseXorAB = normalizedSum - 2;\n    if ((shiftedFloatANormalized & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedFloatANormalized) - 8;\n      shiftedFloatANormalized = shiftedFloatANormalized << (difference & 0xff);\n      if ((int)bitwiseXorAB < (int)difference) {\n        shiftedFloatANormalized = shiftedFloatANormalized >> (-(bitwiseXorAB - difference) & 0xff);\n      }\n      else {\n        shiftedFloatANormalized = shiftedFloatANormalized + (bitwiseXorAB - difference) * 0x800000;\n      }\n      return shiftedFloatANormalized | floatA;\n    }\n  }\n  else {\n    bitwiseXorAB = normalizedSum - 1;\n    if (0xffffff < shiftedFloatANormalized) {\n      bitwiseXorAB = shiftedFloatANormalized & 1;\n      shiftedFloatANormalized = shiftedFloatANormalized >> 1;\n      bitwiseXorAFlipB = (uint)(bitwiseXorAB != 0) << 0x1f | bitwiseXorAFlipB >> 1;\n      bitwiseXorAB = normalizedSum;\n      if (0xfd < normalizedSum) goto LAB_08000c12;\n    }\n  }\n  shiftedFloatANormalized = shiftedFloatANormalized + bitwiseXorAB * 0x800000 + (uint)(0x7fffffff < bitwiseXorAFlipB);\n  if (bitwiseXorAFlipB == 0x80000000) {\n    shiftedFloatANormalized = shiftedFloatANormalized & 0xfffffffe;\n  }\n  return shiftedFloatANormalized | floatA;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_difference_08000ad8",
                "param_1": "floatA",
                "param_2": "floatB",
                "param_3": "floatC",
                "param_4": "floatD",
                "iVar1": "shiftedFloatA",
                "iVar2": "shiftedFloatB",
                "uVar3": "bitwiseXorAB",
                "uVar4": "bitwiseXorAFlipB",
                "uVar5": "shiftedFloatANormalized",
                "uVar6": "normalizedSum",
                "uVar7": "difference",
                "bVar8": "comparisonFlag"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculateFloat_08000adc(uint float1,uint float2,undefined4 float3,uint float4)\n\n{\n  int integer1;\n  int integer2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool flag;\n  \n  temp2 = float1 << 1;\n  flag = temp2 == 0;\n  if (!flag) {\n    float4 = float2 << 1;\n    flag = float4 == 0;\n  }\n  if (!flag) {\n    flag = temp2 == float4;\n  }\n  integer1 = (int)temp2 >> 0x18;\n  if (!flag) {\n    flag = integer1 == -1;\n  }\n  if (!flag) {\n    flag = (int)float4 >> 0x18 == -1;\n  }\n  if (flag) {\n    integer2 = (int)(float2 << 1) >> 0x18;\n    if (integer1 == -1 || integer2 == -1) {\n      temp2 = float2;\n      if (integer1 == -1) {\n        temp2 = float1;\n      }\n      if (integer1 != -1 || integer2 != -1) {\n        float2 = temp2;\n      }\n      flag = (temp2 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (float2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = temp2 == float2;\n      }\n      if (!flag) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((float1 ^ float2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        float1 = float2;\n      }\n      return float1;\n    }\n    if (float1 != float2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = float1 << 1;\n      if ((float1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return float1 + 0x800000;\n    }\n    float1 = float1 & 0x80000000;\nLAB_08000c12:\n    return float1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  float4 = float4 >> 0x18;\n  temp4 = float4 - temp2;\n  flag = temp4 != 0;\n  temp3 = temp2;\n  if (flag && temp2 <= float4) {\n    temp3 = temp2 + temp4;\n  }\n  if (flag && temp2 <= float4) {\n    float2 = float2 ^ float1;\n  }\n  if (flag && temp2 <= float4) {\n    float1 = float1 ^ float2;\n  }\n  if (flag && temp2 <= float4) {\n    float2 = float2 ^ float1;\n  }\n  if (float4 < temp2) {\n    temp4 = -temp4;\n  }\n  if (0x19 < temp4) {\n    return float1;\n  }\n  temp2 = float1 & 0xffffff | 0x800000;\n  if ((float1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = float2 & 0xffffff | 0x800000;\n  if ((float2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == temp4) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (temp4 & 0xff));\n  temp1 = temp1 << (0x20 - temp4 & 0xff);\n  float1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    flag = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)flag;\n  }\n  if (temp2 < 0x800000) {\n    temp4 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(temp4 != 0);\n    temp4 = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      temp3 = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)temp4 < (int)temp3) {\n        temp2 = temp2 >> (-(temp4 - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (temp4 - temp3) * 0x800000;\n      }\n      return temp2 | float1;\n    }\n  }\n  else {\n    temp4 = temp3 - 1;\n    if (0xffffff < temp2) {\n      temp4 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp4 = temp3;\n      if (0xfd < temp3) goto LAB_08000c12;\n    }\n  }\n  temp2 = temp2 + temp4 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | float1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "float3",
                "param_4": "float4",
                "iVar1": "integer1",
                "iVar2": "integer2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_08000c3c",
            "code": "\nuint calculate_08000c3c(uint input)\n\n{\n  uint result;\n  uint shiftAmount;\n  int offset;\n  uint bitMask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = LZCOUNT(input);\n  shiftAmount = result - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    bitMask = 0 << (shiftAmount & 0xff);\n    result = offset + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitMask);\n    if (bitMask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftAmount = input << result + 0x18;\n  result = offset + ((input >> (0x20 - (result + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    result = result & ~(shiftAmount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_08000c3c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "bitMask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "convert_complement_to_unsigned_08000c44",
            "code": "\nuint convertComplementToUnsigned_08000c44(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = inputNumber & 0x80000000;\n  if ((int)signBit < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputNumber);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputNumber << leadingZeros + 0x18;\n  signBit = result + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "convert_complement_to_unsigned_08000c44",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint input1,uint input2,undefined4 unusedParam,uint unusedParam2)\n\n{\n  longlong result;\n  uint significand;\n  uint exponent1;\n  int exponentSum1;\n  int exponentDiff;\n  uint product;\n  int exponentSum2;\n  uint finalResult;\n  bool isZeroOrFF;\n  bool isNegative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZeroOrFF = exponent1 == 0;\n  if (!isZeroOrFF) {\n    unusedParam2 = input2 >> 0x17 & 0xff;\n    isZeroOrFF = unusedParam2 == 0;\n  }\n  if (!isZeroOrFF) {\n    isZeroOrFF = exponent1 == 0xff;\n  }\n  if (!isZeroOrFF) {\n    isZeroOrFF = unusedParam2 == 0xff;\n  }\n  if (isZeroOrFF) {\n    unusedParam2 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || unusedParam2 == 0xff) {\n      isZeroOrFF = input1 == 0 || input1 == 0x80000000;\n      significand = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZeroOrFF = input2 == 0;\n        significand = input1;\n      }\n      if (!isZeroOrFF) {\n        isZeroOrFF = input2 == 0x80000000;\n      }\n      finalResult = significand;\n      if (((isZeroOrFF) || ((exponent1 == 0xff && ((significand & 0x7fffff) != 0)))) ||\n         ((unusedParam2 == 0xff && (finalResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return finalResult | 0x7fc00000;\n      }\n      significand = significand ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZeroOrFF = (input1 & 0x7fffffff) == 0;\n    if (!isZeroOrFF) {\n      isZeroOrFF = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZeroOrFF) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZeroOrFF = exponent1 == 0;\n    significand = input1 & 0x80000000;\n    while( true ) {\n      if (isZeroOrFF) {\n        input1 = input1 << 1;\n        isZeroOrFF = (input1 & 0x800000) == 0;\n      }\n      if (!isZeroOrFF) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | significand;\n    isZeroOrFF = unusedParam2 == 0;\n    significand = input2 & 0x80000000;\n    while( true ) {\n      if (isZeroOrFF) {\n        input2 = input2 << 1;\n        isZeroOrFF = (input2 & 0x800000) == 0;\n      }\n      if (!isZeroOrFF) break;\n      unusedParam2 = unusedParam2 - 1;\n    }\n    input2 = input2 | significand;\n  }\n  exponentSum1 = exponent1 + unusedParam2;\n  finalResult = input1 ^ input2;\n  exponent1 = input1 << 9;\n  isZeroOrFF = exponent1 == 0;\n  if (!isZeroOrFF) {\n    input2 = input2 << 9;\n    isZeroOrFF = input2 == 0;\n  }\n  if (isZeroOrFF) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    significand = finalResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = signedSubOver(exponentSum1,0x7f);\n    exponentDiff = exponentSum1 + -0x7f;\n    isZeroOrFF = exponentDiff == 0;\n    exponentSum2 = exponentDiff;\n    if (!isZeroOrFF && 0x7e < exponentSum1) {\n      isNegative = signedSubOver(0xff,exponentDiff);\n      exponentSum2 = 0xff - exponentDiff;\n      isZeroOrFF = exponentDiff == 0xff;\n    }\n    if (!isZeroOrFF && exponentSum2 < 0 == isNegative) {\n      significand = significand | exponentDiff * 0x800000;\n    }\n    if (!isZeroOrFF && exponentSum2 < 0 == isNegative) {\n      return significand;\n    }\n    significand = significand | 0x800000;\n    product = 0;\n    isNegative = signedSubOver(exponentDiff,1);\n    finalResult = exponentSum1 - 0x80;\n    isZeroOrFF = finalResult == 0;\n    exponent1 = finalResult;\n  }\n  else {\n    result = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)result;\n    significand = (uint)((ulonglong)result >> 0x20);\n    isZeroOrFF = significand < 0x800000;\n    if (isZeroOrFF) {\n      significand = significand << 1;\n    }\n    if (isZeroOrFF) {\n      significand = significand | product >> 0x1f;\n      product = product << 1;\n    }\n    significand = finalResult & 0x80000000 | significand;\n    finalResult = (exponentSum1 + -0x7f) - (uint)isZeroOrFF;\n    isNegative = signedSubOver(finalResult,0xfd);\n    isZeroOrFF = finalResult == 0xfd;\n    exponent1 = finalResult - 0xfd;\n    if (finalResult < 0xfe) {\n      significand = significand + finalResult * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        significand = significand & 0xfffffffe;\n      }\n      return significand;\n    }\n  }\n  if (isZeroOrFF || (int)exponent1 < 0 != isNegative) {\n    isZeroOrFF = (int)(finalResult + 0x19) < 0;\n    if (finalResult == 0xffffffe7 || isZeroOrFF != signedAddOver(finalResult,0x19)) {\n      significand = significand & 0x80000000;\n    }\n    if (finalResult != 0xffffffe7 && isZeroOrFF == signedAddOver(finalResult,0x19)) {\n      exponent1 = (significand << 1) >> (-finalResult & 0xff);\n      finalResult = significand << (finalResult + 0x20 & 0xff);\n      exponent1 = ((uint)((significand & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | finalResult << 1) == 0) {\n        exponent1 = exponent1 & ~(finalResult >> 0x1f);\n      }\n      return exponent1;\n    }\n    return significand;\n  }\nLAB_08000e3c:\n  return significand & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "unusedParam2",
                "lVar1": "result",
                "uVar2": "significand",
                "uVar3": "exponent1",
                "iVar4": "exponentSum1",
                "iVar5": "exponentDiff",
                "uVar6": "product",
                "iVar7": "exponentSum2",
                "uVar8": "finalResult",
                "bVar9": "isZeroOrFF",
                "bVar10": "isNegative",
                "SBORROW4": "signedSubOver",
                "SCARRY4": "signedAddOver"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint result1;\n  uint result2;\n  int difference;\n  uint temp1;\n  int temp2;\n  uint result3;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  result2 = input1 >> 0x17 & 0xff;\n  flag1 = result2 == 0;\n  if (!flag1) {\n    param4 = input2 >> 0x17 & 0xff;\n    flag1 = param4 == 0;\n  }\n  if (!flag1) {\n    flag1 = result2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = param4 == 0xff;\n  }\n  if (flag1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result3 = input1;\n    if (result2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result3 = input2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result3 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result3 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = result2 == 0;\n        result3 = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          result2 = result2 - 1;\n        }\n        input1 = input1 | result3;\n        flag1 = param4 == 0;\n        result3 = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result3;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = result2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(difference,0x7f);\n      temp2 = difference + 0x7f;\n      flag1 = temp2 < 0;\n      flag2 = temp2 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp2);\n        flag1 = 0xff - temp2 < 0;\n        flag2 = temp2 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input1 = input1 | temp2 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      result2 = 0;\n      flag2 = SBORROW4(temp2,1);\n      temp1 = difference + 0x7e;\n      flag1 = temp1 == 0;\n      result3 = temp1;\n    }\n    else {\n      result1 = (input2 << 9) >> 4 | 0x10000000;\n      result2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = result1 <= result2;\n      if (!flag1) {\n        result2 = result2 << 1;\n      }\n      temp1 = difference + 0x7d + (uint)flag1;\n      result3 = 0x800000;\n      do {\n        if (result1 <= result2) {\n          result2 = result2 - result1;\n          input1 = input1 | result3;\n        }\n        flag1 = result1 >> 1 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | result3 >> 1;\n        }\n        flag1 = result1 >> 2 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | result3 >> 2;\n        }\n        flag1 = result1 >> 3 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | result3 >> 3;\n        }\n        result2 = result2 * 0x10;\n        flag1 = result2 == 0;\n        if (!flag1) {\n          result3 = result3 >> 4;\n          flag1 = result3 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp1,0xfd);\n      flag1 = temp1 == 0xfd;\n      result3 = temp1 - 0xfd;\n      if (temp1 < 0xfe) {\n        input1 = input1 + temp1 * 0x800000 + (uint)(result1 <= result2);\n        if (result2 - result1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)result3 < 0 != flag2) {\n      flag1 = (int)(temp1 + 0x19) < 0;\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        return input1;\n      }\n      result3 = (input1 << 1) >> (-temp1 & 0xff);\n      temp1 = input1 << (temp1 + 0x20 & 0xff);\n      result3 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result3 >> 1) + (uint)((byte)result3 & 1);\n      if ((result2 | temp1 << 1) == 0) {\n        result3 = result3 & ~(temp1 >> 0x1f);\n      }\n      return result3;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "difference",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "result3",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_unsigned_sum_08000f9c",
            "code": "\nuint calculate_unsigned_sum_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined;\n  bool is_zero_combined;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero_combined = combined == 0;\n  if (!is_zero_combined) {\n    combined = input_1 ^ input_2;\n    is_zero_combined = combined == 0;\n  }\n  is_negative_result = -1 < (int)combined;\n  if (is_negative_result) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero_combined = input_1 == 0;\n  }\n  if ((is_negative_result && doubled_input_2 <= doubled_input_1) && !is_zero_combined) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_combined) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_unsigned_sum_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_result",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined",
                "bVar5": "is_zero_combined"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_parameters_08000ffc",
            "code": "\nvoid concatenateParameters_08000ffc(undefined4 dest,undefined4 src)\n\n{\n  concatenate_parameters_08001004(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_parameters_08000ffc",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_parameters_08001004",
            "code": "\nundefined8 concatenateParameters_08001004(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  calculate_unsigned_sum_08000f9c();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_parameters_08001004",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenation_success_08001014",
            "code": "\nbool check_concatenation_success_08001014(void)\n\n{\n  char result;\n  \n  concatenate_parameters_08001004();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenation_success_08001014",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_string_empty_08001028",
            "code": "\nbool isStringEmpty_08001028(void)\n\n{\n  char inputCharacter;\n  \n  concatenate_parameters_08001004();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_string_empty_08001028",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenated_parameters_08001050",
            "code": "\nbool check_concatenated_parameters_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_parameters_08000ffc();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenated_parameters_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_concatenation_is_empty_08001064",
            "code": "\nbool check_if_concatenation_is_empty_08001064(void)\n\n{\n  char concatenated_result;\n  \n  concatenate_parameters();\n  return concatenated_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_concatenation_is_empty_08001064",
                "in_CY": "concatenated_result",
                "concatenate_parameters_08000ffc": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_significant_bits_08001078",
            "code": "\nuint extract_significant_bits_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint shift_amount;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  shift_amount = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && shift_amount != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_significant_bits_08001078",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "calculate_value_080010c4",
            "code": "\nuint calculateValue_080010c4(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "calculate_value_080010c4",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_memory_08001104",
            "code": "\nundefined4 initializeMemory_08001104(undefined4 inputData)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value_08002214();\n  check_param_bounds_08001214(dataValue / 1000);\n  update_memory_08001194(0xffffffff,inputData,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_memory_08001104",
                "param_1": "inputData",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_register_configuration(3);\n  initialize_memory(0);\n  initialize_system_08001128();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "configure_register_08001170": "set_register_configuration",
                "initialize_memory_08001104": "initialize_memory",
                "initialize_system_08004ccc": "initialize_system"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_register_08001170",
            "code": "\n\n\nvoid configureRegister_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_register_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_08001194",
            "code": "\n\n\nvoid updateMemory_08001194(uint address,uint value1,uint value2)\n\n{\n  undefined updatedValue;\n  uint shiftAmount;\n  uint offset;\n  uint offsetAdjusted;\n  \n  offset = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - offset;\n  offsetAdjusted = offset + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (offsetAdjusted < 7) {\n    offset = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < offsetAdjusted) {\n    offset = offset - 3;\n  }\n  updatedValue = (undefined)\n          ((value2 & (1 << (offset & 0xff)) - 1U | (value1 & shiftAmount) << (offset & 0xff)) << 4);\n  if (-1 < (int)address) {\n    offset = address + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    offset = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(offset + 0x300) = updatedValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + offset) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "updatedValue",
                "uVar2": "shiftAmount",
                "uVar3": "offset",
                "uVar4": "offsetAdjusted"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_memory_080011fc",
            "code": "\nvoid setBitInMemory_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_memory_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "check_param_bounds_08001214",
            "code": "\n\n\nundefined4 check_param_bounds_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "check_param_bounds_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_data_08001264",
            "code": "\n\n\nvoid updateData_08001264(uint *inputData,uint *flags)\n\n{\n  uint newValue;\n  uint bitMask;\n  uint flagValue;\n  int index;\n  uint i;\n  uint mask;\n  uint targetFlag;\n  uint *outputData;\n  int shift;\n  \n  newValue = 0;\n  i = 0;\n  do {\n    mask = 1 << (i & 0xff);\n    bitMask = mask & *flags;\n    if (mask == bitMask) {\n      flagValue = flags[1];\n      if (flagValue == 0x12) {\n        newValue = flags[3] + 0xc;\n      }\n      else if (flagValue < 0x13) {\n        if (flagValue == 2) {\n          newValue = flags[3] + 8;\n        }\n        else if (flagValue < 3) {\n          if (flagValue == 0) goto LAB_080013be;\n          if (flagValue == 1) {\n            newValue = flags[3];\n          }\n        }\n        else if (flagValue == 3) {\n          newValue = 0;\n        }\n        else if (flagValue == 0x11) {\n          newValue = flags[3] + 4;\n        }\n      }\n      else {\n        if (flagValue != 0x10210000) {\n          if (flagValue < 0x10210001) {\n            if (flagValue != 0x10110000) {\n              targetFlag = 0x10120000;\nLAB_080013b8:\n              if (flagValue != targetFlag) goto LAB_080012a8;\n            }\n          }\n          else if ((flagValue != 0x10310000) && (flagValue != 0x10320000)) {\n            targetFlag = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = flags[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            inputData[4] = mask;\n          }\n          if (newValue != 1) {\n            inputData[5] = mask;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        mask = *inputData;\n        flagValue = i << 2;\n        outputData = inputData;\n      }\n      else {\n        mask = inputData[1];\n        flagValue = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        outputData = inputData + 1;\n      }\n      *outputData = mask & ~(0xf << (flagValue & 0xff)) | newValue << (flagValue & 0xff);\n      outputData = (uint *)flags[1];\n      if (((uint)outputData & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift = (i & 3) << 2;\n        if (inputData == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (inputData == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (inputData == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (inputData == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shift | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shift);\n        if (((uint)outputData & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)outputData & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)outputData & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)outputData & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_data_08001264",
                "param_1": "inputData",
                "param_2": "flags",
                "uVar1": "newValue",
                "uVar2": "bitMask",
                "uVar3": "flagValue",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "mask",
                "uVar7": "targetFlag",
                "unaff_r10": "outputData",
                "iVar8": "shift"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_update_value_0800142e",
            "code": "\nvoid xorAndUpdateValue_0800142e(int ptr,unsignedInteger newValue)\n\n{\n  *(unsignedInteger *)(ptr + 0xc) = newValue ^ *(unsignedInteger *)(ptr + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_update_value_0800142e",
                "param_1": "ptr",
                "param_2": "newValue",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flag_08001436",
            "code": "\nundefined4 checkAndModifyFlag_08001436(int *inputArray)\n\n{\n  int value;\n  \n  value = *inputArray;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n    *(undefined *)(inputArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flag_08001436",
                "param_1": "inputArray",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 checkDataValidity_08001460(uint **data_array,uint flags,uint timeout)\n\n{\n  int initial_value;\n  int current_value;\n  uint value;\n  uint *current_pointer;\n  \n  initial_value = get_data_0800115c();\n  do {\n    current_pointer = *data_array;\n    if ((flags << 8) >> 0x18 == 1) {\n      value = current_pointer[5];\n    }\n    else {\n      value = current_pointer[6];\n    }\n    if ((flags & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(current_pointer[5] << 0x15) < 0) {\n      *current_pointer = *current_pointer | 0x200;\n      current_pointer[5] = current_pointer[5] & 0xfffffbff;\n      data_array[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_value = get_data_0800115c(), (uint)(current_value - initial_value) <= timeout))));\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  *(undefined *)(data_array + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data_array",
                "param_2": "flags",
                "param_3": "timeout",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "value",
                "puVar4": "current_pointer"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_modify_flag_080014e2",
            "code": "\nundefined4 check_and_modify_flag_080014e2(int *data_ptr,uint size)\n\n{\n  int initial_value;\n  int flag_check_result;\n  \n  initial_value = get_data_0800115c();\n  while( true ) {\n    if (*(int *)(*data_ptr + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_check_result = check_and_modify_flag_080014e2_08001436(data_ptr);\n    if (flag_check_result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (flag_check_result = get_data_0800115c(), size < (uint)(flag_check_result - initial_value))))) {\n      data_ptr[0xe] = data_ptr[0xe] | 0x20;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_modify_flag_080014e2",
                "param_1": "data_ptr",
                "param_2": "size",
                "iVar1": "initial_value",
                "iVar2": "flag_check_result"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_data_flags_08001530",
            "code": "\nundefined4 updateDataFlags_08001530(uint **dataPtr,uint value1,uint value2,int flag,uint param)\n\n{\n  int startValue;\n  int endValue;\n  uint *ptr;\n  uint **dataDoublePtr;\n  uint value3;\n  uint value4;\n  \n  **dataPtr = **dataPtr | 0x100;\n  dataDoublePtr = dataPtr;\n  value3 = value1;\n  value4 = value2;\n  startValue = get_data_0800115c();\n  do {\n    ptr = *dataPtr;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        startValue = check_data_validity_08001460(dataPtr,0x10002,param,ptr,dataDoublePtr,value3,value4);\n        if (startValue == 0) {\n          startValue = check_and_modify_flag_080014e2(dataPtr,param,(*dataPtr)[5],(*dataPtr)[6]);\n          if (startValue == 0) {\n            ptr = *dataPtr;\n            if (flag == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            startValue = check_and_modify_flag_080014e2(dataPtr,param);\n            if (startValue == 0) {\n              ptr = *dataPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (dataPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **dataPtr = **dataPtr | 0x200;\n        }\n        else if (dataPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (endValue = get_data_0800115c(), param < (uint)(endValue - startValue))) {\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_data_flags_08001530",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "param",
                "iVar1": "startValue",
                "iVar2": "endValue",
                "puVar3": "ptr",
                "ppuVar4": "dataDoublePtr",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "validate_and_modify_flag_080015e8",
            "code": "\nundefined4 validate_and_modify_flag_080015e8(uint **data_pointer,uint value_1,uint value_2,int flag,uint limit)\n\n{\n  int data;\n  int data_diff;\n  uint *data_ptr;\n  uint **data_ptr_ptr;\n  uint value_1_copy;\n  uint value_2_copy;\n  \n  data_ptr = *data_pointer;\n  *data_ptr = *data_ptr | 0x400;\n  *data_ptr = *data_ptr | 0x100;\n  data_ptr_ptr = data_pointer;\n  value_1_copy = value_1;\n  value_2_copy = value_2;\n  data = get_data_0800115c();\nLAB_0800160e:\n  data_ptr = *data_pointer;\n  while (-1 < (int)(data_ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  data_ptr[4] = value_1 & 0xfe;\n  data = check_data_validity_08001460(data_pointer,0x10002,limit,data_ptr,data_ptr_ptr,value_1_copy,value_2_copy);\n  if (data != 0) goto LAB_080016ba;\n  data = check_and_modify_flag_080014e2(data_pointer,limit,(*data_pointer)[5],(*data_pointer)[6]);\n  if (data == 0) {\n    data_ptr = *data_pointer;\n    if (flag != 1) {\n      data_ptr[4] = value_2 >> 8;\n      data = check_and_modify_flag_080014e2(data_pointer,limit);\n      if (data != 0) goto LAB_08001642;\n      data_ptr = *data_pointer;\n    }\n    data_ptr[4] = value_2 & 0xff;\n    data = check_and_modify_flag_080014e2(data_pointer,limit);\n    if (data == 0) {\n      **data_pointer = **data_pointer | 0x100;\n      data = get_data_0800115c();\n      do {\n        do {\n          if ((int)((*data_pointer)[5] << 0x1f) < 0) {\n            (*data_pointer)[4] = value_1 & 0xff | 1;\n            data = check_data_validity_08001460(data_pointer,0x10002,limit);\n            if (data == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data_pointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (data_diff = get_data_0800115c(), (uint)(data_diff - data) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)data_pointer + 0x35) = 0x20;\n      *(undefined *)(data_pointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data_pointer[0xe] == (uint *)0x4) {\n    **data_pointer = **data_pointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (data_diff = get_data_0800115c(), limit < (uint)(data_diff - data)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "validate_and_modify_flag_080015e8",
                "param_1": "data_pointer",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "data",
                "iVar2": "data_diff",
                "puVar3": "data_ptr",
                "ppuVar4": "data_ptr_ptr",
                "uVar5": "value_1_copy",
                "uVar6": "value_2_copy"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_080016f4",
            "code": "\nundefined4 check_data_080016f4(int *data_array,uint array_length)\n\n{\n  int initial_value;\n  int current_value;\n  \n  initial_value = get_data_0800115c();\n  while( true ) {\n    current_value = *data_array;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((array_length == 0) || (current_value = get_data_0800115c(), array_length < (uint)(current_value - initial_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_080016f4",
                "param_1": "data_array",
                "param_2": "array_length",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "update_data_08001754",
            "code": "\nundefined4 updateData_08001754(uint **param)\n\n{\n  uint shiftedValueLower;\n  uint shiftedValueUpper;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr3;\n  uint multiplier;\n  undefined8 shiftedValue;\n  \n  if (param != (uint **)0x0) {\n    if (*(char *)((int)param + 0x35) == '\\0') {\n      *(undefined *)(param + 0xd) = 0;\n      updateData_08001754IfRequired();\n    }\n    *(undefined *)((int)param + 0x35) = 0x24;\n    **param = **param & 0xfffffffe;\n    shiftedValue = getShiftedValue();\n    shiftedValueUpper = (uint)((ulonglong)shiftedValue >> 0x20);\n    shiftedValueLower = (uint)shiftedValue;\n    ptr2 = param[1];\n    multiplier = shiftedValueLower / 1000000;\n    if ((uint *)0x186a0 < ptr2) {\n      shiftedValueUpper = 300;\n    }\n    ptr1 = *param;\n    if ((uint *)0x186a0 < ptr2) {\n      shiftedValueUpper = multiplier * shiftedValueUpper;\n    }\n    ptr1[1] = multiplier;\n    if ((uint *)0x186a0 < ptr2) {\n      multiplier = shiftedValueUpper / 1000;\n    }\n    ptr1[8] = multiplier + 1;\n    if (ptr2 < (uint *)0x186a1) {\n      shiftedValueLower = shiftedValueLower / (uint)((int)ptr2 << 1);\n      if ((shiftedValueLower & 0xfff) < 4) {\n        shiftedValueLower = 4;\n      }\n    }\n    else {\n      if (param[2] == (uint *)0x0) {\n        shiftedValueLower = shiftedValueLower / (uint)((int)ptr2 * 3) | 0x8000;\n      }\n      else {\n        shiftedValueLower = shiftedValueLower / (uint)((int)ptr2 * 0x19) | 0xc000;\n      }\n      if ((shiftedValueLower & 0xfff) == 0) {\n        shiftedValueLower = 1;\n      }\n    }\n    ptr2 = param[8];\n    ptr3 = param[7];\n    ptr1[7] = shiftedValueLower;\n    *ptr1 = (uint)ptr3 | (uint)ptr2;\n    ptr1[2] = (uint)param[4] | (uint)param[3];\n    ptr1[3] = (uint)param[5] | (uint)param[6];\n    *ptr1 = *ptr1 | 1;\n    param[0xe] = (uint *)0x0;\n    *(undefined *)((int)param + 0x35) = 0x20;\n    *(undefined *)((int)param + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "update_data_08001754",
                "param_1": "param",
                "uVar1": "shiftedValueLower",
                "uVar2": "shiftedValueUpper",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "puVar5": "ptr3",
                "uVar6": "multiplier",
                "uVar7": "shiftedValue",
                "update_data_if_required_08004d48": "updateDataIfRequired",
                "get_shifted_value_08002220": "getShiftedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "FUNC_08001828",
            "code": "\nundefined4\nFUNC_08001828(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,byte *param_5,\n            short param_6,undefined4 param_7)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  \n  if (*(char *)((int)param_1 + 0x35) == ' ') {\n    if (param_5 == (byte *)0x0) {\n      return 1;\n    }\n    if (param_6 == 0) {\n      return 1;\n    }\n    iVar1 = get_data_0800115c();\n    do {\n      puVar3 = *param_1;\n      if ((~puVar3[6] & 2) != 0) {\n        if (*(char *)(param_1 + 0xd) == '\\x01') {\n          return 2;\n        }\n        uVar4 = *puVar3;\n        *(undefined *)(param_1 + 0xd) = 1;\n        *puVar3 = uVar4 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x35) = 0x21;\n        *(undefined *)((int)param_1 + 0x36) = 0x40;\n        param_1[0xe] = (uint *)0x0;\n        iVar1 = update_data_flags_08001530(param_1,param_2,param_3,param_4,param_7);\n        if (iVar1 != 0) {\n          *(undefined *)(param_1 + 0xd) = 0;\n          if (param_1[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      iVar2 = get_data_0800115c();\n    } while ((uint)(iVar2 - iVar1) < 0x2711);\n    *(undefined *)(param_1 + 0xd) = 0;\n    *(undefined *)((int)param_1 + 0x35) = 0x20;\n  }\n  return 2;\n  while (param_6 != 0) {\nLAB_080018e2:\n    iVar1 = check_and_modify_flag_080014e2(param_1,param_7);\n    if (iVar1 != 0) goto LAB_080018ee;\n    puVar3 = *param_1;\n    puVar3[4] = (uint)*param_5;\n    if ((int)(puVar3[5] << 0x1d) < 0) {\n      if ((short)(param_6 + -1) == 0) break;\n      param_6 = param_6 + -2;\n      puVar3[4] = (uint)param_5[1];\n      param_5 = param_5 + 2;\n    }\n    else {\n      param_5 = param_5 + 1;\n      param_6 = param_6 + -1;\n    }\n  }\n  iVar1 = check_and_modify_flag_080014e2(param_1,param_7);\n  if (iVar1 == 0) {\n    **param_1 = **param_1 | 0x200;\n    *(undefined *)(param_1 + 0xd) = 0;\n    *(undefined *)((int)param_1 + 0x35) = 0x20;\n    *(undefined *)((int)param_1 + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (param_1[0xe] == (uint *)0x4) {\n    **param_1 = **param_1 | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "FUNC_08001828"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "validate_flags_08001938",
            "code": "\nundefined4\nvalidate_flags_08001938(uint **flags_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined *result_ptr,ushort flags_data_size,uint max_delay)\n\n{\n  undefined *ptr1;\n  int start_time;\n  int current_time;\n  uint *flags_data_ptr;\n  uint flags_value;\n  undefined *result_ptr2;\n  bool condition_check;\n  \n  if (*(char *)((int)flags_ptr + 0x35) != ' ') {\n    return 2;\n  }\n  if (result_ptr == (undefined *)0x0) {\n    return 1;\n  }\n  if (flags_data_size == 0) {\n    return 1;\n  }\n  start_time = get_start_time();\n  while (flags_data_ptr = *flags_ptr, (~flags_data_ptr[6] & 2) == 0) {\n    current_time = get_start_time();\n    if (10000 < (uint)(current_time - start_time)) {\n      *(undefined *)(flags_ptr + 0xd) = 0;\n      *(undefined *)((int)flags_ptr + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(flags_ptr + 0xd) == '\\x01') {\n    return 2;\n  }\n  flags_value = *flags_data_ptr;\n  *(undefined *)(flags_ptr + 0xd) = 1;\n  *flags_data_ptr = flags_value & 0xfffff7ff;\n  *(undefined *)((int)flags_ptr + 0x35) = 0x22;\n  *(undefined *)((int)flags_ptr + 0x36) = 0x40;\n  flags_ptr[0xe] = (uint *)0x0;\n  start_time = validate_modify_flags(flags_ptr,param_2,param_3,param_4,max_delay);\n  if (start_time != 0) {\n    *(undefined *)(flags_ptr + 0xd) = 0;\n    if (flags_ptr[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  flags_data_ptr = *flags_ptr;\n  flags_value = *flags_data_ptr;\n  if (flags_data_size == 1) {\n    *flags_data_ptr = flags_value & 0xfffffbff;\n    disable_interrupts();\n    **flags_ptr = **flags_ptr | 0x200;\n    enable_interrupts();\n    start_time = check_data(flags_ptr,max_delay);\n    if (start_time == 0) {\n      *result_ptr = (char)(*flags_ptr)[4];\nLAB_08001ab8:\n      *(undefined *)((int)flags_ptr + 0x35) = 0x20;\n      *(undefined *)((int)flags_ptr + 0x36) = 0;\n      *(undefined *)(flags_ptr + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (flags_ptr[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (flags_data_size == 2) {\n    *flags_data_ptr = flags_value | 0x800;\n    disable_interrupts();\n    **flags_ptr = **flags_ptr & 0xfffffbff;\n    enable_interrupts();\n  }\n  else {\n    *flags_data_ptr = flags_value | 0x400;\n    while (3 < flags_data_size) {\n      start_time = check_data(flags_ptr,max_delay);\n      if (start_time != 0) goto LAB_08001a18;\n      *result_ptr = (char)(*flags_ptr)[4];\n      flags_data_ptr = *flags_ptr;\n      condition_check = (int)(flags_data_ptr[5] << 0x1d) < 0;\n      if (condition_check) {\n        flags_data_ptr = (uint *)flags_data_ptr[4];\n        result_ptr2 = result_ptr + 2;\n        flags_data_size = flags_data_size - 2;\n      }\n      else {\n        result_ptr2 = result_ptr + 1;\n        flags_data_size = flags_data_size - 1;\n      }\n      ptr1 = result_ptr + 1;\n      result_ptr = result_ptr2;\n      if (condition_check) {\n        *ptr1 = (char)flags_data_ptr;\n      }\n    }\n    if (flags_data_size != 2) {\n      start_time = get_start_time();\n      do {\n        flags_data_ptr = *flags_ptr;\n        do {\n          if ((int)(flags_data_ptr[5] << 0x1d) < 0) {\n            *flags_data_ptr = *flags_data_ptr & 0xfffffbff;\n            disable_interrupts();\n            *result_ptr = (char)(*flags_ptr)[4];\n            start_time = get_start_time();\n            goto LAB_08001b3a;\n          }\n        } while (max_delay == 0xffffffff);\n      } while ((max_delay != 0) && (current_time = get_start_time(), (uint)(current_time - start_time) <= max_delay));\n      goto LAB_08001afa;\n    }\n  }\n  start_time = get_start_time();\n  do {\n    do {\n      if ((int)((*flags_ptr)[5] << 0x1d) < 0) {\n        disable_interrupts();\n        flags_data_ptr = *flags_ptr;\n        *flags_data_ptr = *flags_data_ptr | 0x200;\n        *result_ptr = (char)flags_data_ptr[4];\n        enable_interrupts();\n        result_ptr[1] = (char)(*flags_ptr)[4];\n        goto LAB_08001ab8;\n      }\n    } while (max_delay == 0xffffffff);\n  } while ((max_delay != 0) && (current_time = get_start_time(), (uint)(current_time - start_time) <= max_delay));\nLAB_08001afa:\n  *(undefined *)((int)flags_ptr + 0x35) = 0x20;\n  *(undefined *)(flags_ptr + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    flags_data_ptr = *flags_ptr;\n    do {\n      if ((int)(flags_data_ptr[5] << 0x1d) < 0) {\n        *flags_data_ptr = *flags_data_ptr | 0x200;\n        result_ptr[1] = (char)flags_data_ptr[4];\n        enable_interrupts();\n        result_ptr[2] = (char)(*flags_ptr)[4];\n        goto LAB_08001ab8;\n      }\n    } while (max_delay == 0xffffffff);\n  } while ((max_delay != 0) && (current_time = get_start_time(), (uint)(current_time - start_time) <= max_delay));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "validate_flags_08001938",
                "param_1": "flags_ptr",
                "param_5": "result_ptr",
                "param_6": "flags_data_size",
                "param_7": "max_delay",
                "puVar1": "ptr1",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "puVar4": "flags_data_ptr",
                "uVar5": "flags_value",
                "puVar6": "result_ptr2",
                "bVar7": "condition_check",
                "validate_and_modify_flag_080015e8": "validate_modify_flags",
                "get_data_0800115c": "get_start_time",
                "check_data_080016f4": "check_data",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *inputs)\n\n{\n  int value1;\n  int value2;\n  \n  if (*inputs << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (inputs[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = inputs[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = get_data_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = get_data_0800115c();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = get_data_0800115c();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*inputs << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (inputs[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = inputs[4];\n      if (iRam42420000 == 0) {\n        value1 = get_data_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = get_data_0800115c();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      value1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = get_data_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = inputs[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*inputs << 0x1c < 0) {\n    iRam42420480 = inputs[6];\n    if (iRam42420480 == 0) {\n      value1 = get_data_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = get_data_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      value1 = get_data_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = get_data_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *inputs << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = get_data_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = get_data_0800115c();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = inputs[3];\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = get_data_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = get_data_0800115c();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = get_data_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = get_data_0800115c();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (inputs[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (inputs[7] != 2) {\n      uRam42420060 = 0;\n      value1 = get_data_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = get_data_0800115c();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    value1 = get_data_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (inputs[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | inputs[2];\n        }\n        _DAT_40021004 = inputs[8] | inputs[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        value1 = get_data_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = get_data_0800115c();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_data_0800115c();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "inputs",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_refresh_rate_08002008",
            "code": "\n\n\nint calculateRefreshRate_08002008(void)\n\n{\n  undefined4 firstValue;\n  int refreshRate;\n  undefined4 secondValue;\n  undefined4 *dataPointer;\n  uint refreshRateMultiplier;\n  undefined4 *newDataPointer;\n  byte bitMaskArray [4];\n  undefined4 dataArray [5];\n  \n  dataPointer = &DAT_080072f0;\n  newDataPointer = dataArray;\n  do {\n    firstValue = *dataPointer;\n    secondValue = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *newDataPointer = firstValue;\n    newDataPointer[1] = secondValue;\n    newDataPointer = newDataPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  bitMaskArray[0] = 1;\n  bitMaskArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      refreshRateMultiplier = 8000000 / bitMaskArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      refreshRateMultiplier = 4000000;\n    }\n    refreshRate = refreshRateMultiplier * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    refreshRate = 8000000;\n  }\n  return refreshRate;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_refresh_rate_08002008",
                "uVar1": "firstValue",
                "iVar2": "refreshRate",
                "uVar3": "secondValue",
                "puVar4": "dataPointer",
                "uVar5": "refreshRateMultiplier",
                "puVar6": "newDataPointer",
                "local_24": "bitMaskArray",
                "local_20": "dataArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "check_refresh_rate_0800209c",
            "code": "\n\n\nundefined4 checkRefreshRate_0800209c(uint *paramArray,uint paramValue)\n\n{\n  char var1;\n  char var2;\n  int var3;\n  uint var4;\n  int var5;\n  uint var6;\n  \n  if ((paramValue <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | paramValue, paramValue == (paramValue & 7))) {\n    if ((int)(*paramArray << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | paramArray[2];\n    }\n    var3 = *paramArray << 0x1f;\n    if (-1 < var3) {\nLAB_080020ba:\n      if ((paramValue < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | paramValue, paramValue != (paramValue & 7))) {\n        return 1;\n      }\n      if ((*paramArray & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | paramArray[3];\n      }\n      if ((int)(*paramArray << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | paramArray[4] << 3;\n      }\n      var4 = calculate_refresh_rate_08002008();\n      DAT_200001bc = var4 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_memory_08001104(0);\n      return 0;\n    }\n    var4 = paramArray[1];\n    if (var4 == 1) {\n      var2 = '\\x01';\n      var1 = '\\0';\n    }\n    else {\n      var6 = _DAT_40021000;\n      if (var4 == 2) goto LAB_08002176;\n      var2 = '\\0';\n      var1 = '\\x01';\n    }\n    var6 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(var1 << 6) << 0x18 | (uint)(byte)(var2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)var6 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | var4;\n      var3 = get_data_0800115c(var3,var6);\n      if (paramArray[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          var5 = get_data_0800115c();\n        } while ((uint)(var5 - var3) < 0x1389);\n      }\n      else if (paramArray[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          var5 = get_data_0800115c();\n        } while ((uint)(var5 - var3) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          var5 = get_data_0800115c();\n        } while ((uint)(var5 - var3) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "check_refresh_rate_0800209c",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "cVar1": "var1",
                "cVar2": "var2",
                "iVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "uVar6": "var6"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint getShiftedValue_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extracted_data_shift_08002250",
            "code": "\n\n\nuint extracted_data_shift_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extracted_data_shift_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_flags_and_values_08002280",
            "code": "\nvoid updateFlagsAndValues_08002280(int address,uint *values)\n\n{\n  uint flags;\n  uint param_1_val;\n  uint param_2_val;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  param_1_val = *(uint *)(address + 4);\n  param_2_val = *values;\n  flags = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    flags = (flags & 0xfffffff7 | values[3]) & 0xfffffffb;\n    param_1_val = param_1_val & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = param_1_val;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | param_2_val;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = flags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_flags_and_values_08002280",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "flags",
                "uVar2": "param_1_val",
                "uVar3": "param_2_val"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameter_and_variable_080022d0",
            "code": "\nvoid updateParameterAndVariable_080022d0(int baseAddress,uint *parameters)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  updatedValue3 = *parameters;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | parameters[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | parameters[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | (parameters[5] | parameters[6]) << 4;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(baseAddress + 0x3c) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameter_and_variable_080022d0",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_param_values_08002324",
            "code": "\nvoid updateParamValues_08002324(int paramAddress,int *paramValues)\n\n{\n  uint param1Value;\n  int param2Value;\n  int param3Value;\n  int constantValue;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xffffefff;\n  param1Value = *(uint *)(paramAddress + 4);\n  param2Value = *paramValues;\n  param3Value = paramValues[2];\n  constantValue = 0x40012c00;\n  if (paramAddress == 0x40012c00) {\n    constantValue = paramValues[5];\n    param1Value = param1Value & 0xffffbfff;\n  }\n  if (paramAddress == 0x40012c00) {\n    param1Value = param1Value | constantValue << 6;\n  }\n  *(uint *)(paramAddress + 4) = param1Value;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffff8cff | param2Value << 8;\n  *(int *)(paramAddress + 0x40) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xffffdfff | param3Value << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_param_values_08002324",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "param1Value",
                "iVar2": "param2Value",
                "iVar3": "param3Value",
                "iVar4": "constantValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryAddress,uint *data)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryAddress;\n  if (((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n       (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | data[1], memoryAddress == (uint *)0x40012c00 ||\n       (memoryAddress == (uint *)0x40000000)) ||\n      ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | data[3];\n  }\n  *memoryAddress = updatedValue;\n  memoryAddress[0xb] = data[2];\n  memoryAddress[10] = *data;\n  updatedValue = 0x40012c00;\n  if (memoryAddress == (uint *)0x40012c00) {\n    updatedValue = data[4];\n  }\n  if (memoryAddress == (uint *)0x40012c00) {\n    memoryAddress[0xc] = updatedValue;\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_settings_080023d0",
            "code": "\nundefined4 initialize_settings_080023d0(undefined4 *settings_ptr)\n\n{\n  if (settings_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)settings_ptr + 0x39) == '\\0') {\n      *(undefined *)(settings_ptr + 0xe) = 0;\n      update_settings();\n    }\n    *(undefined *)((int)settings_ptr + 0x39) = 2;\n    update_memory(*settings_ptr,settings_ptr + 1);\n    *(undefined *)((int)settings_ptr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_settings_080023d0",
                "param_1": "settings_ptr",
                "update_settings_08004d8c": "update_settings",
                "update_memory_08002368": "update_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid updateParams_08002404(int ptr1,int *ptr2)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  int inputVar;\n  \n  *(uint *)(ptr1 + 0x20) = *(uint *)(ptr1 + 0x20) & 0xffffffef;\n  updatedVar2 = *(uint *)(ptr1 + 4);\n  inputVar = *ptr2;\n  updatedVar1 = *(uint *)(ptr1 + 0x20) & 0xffffffdf | ptr2[2] << 4;\n  if (ptr1 == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xffffff7f | ptr2[3] << 4) & 0xffffffbf;\n    updatedVar2 = updatedVar2 & 0xfffff3ff | (ptr2[5] | ptr2[6]) << 2;\n  }\n  *(uint *)(ptr1 + 4) = updatedVar2;\n  *(uint *)(ptr1 + 0x18) = *(uint *)(ptr1 + 0x18) & 0xffff8cff | inputVar << 8;\n  *(int *)(ptr1 + 0x38) = ptr2[1];\n  *(uint *)(ptr1 + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "iVar3": "inputVar"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_param_flags_0800245c",
            "code": "\nvoid updateParamFlags_0800245c(int *paramArray,undefined4 param2,undefined4 param3)\n\n{\n  int extraout1;\n  int extraout2;\n  int extraout3;\n  int extraout4;\n  int tempVar1;\n  uint updatedValue;\n  int tempVar2;\n  \n  if (*(char *)(paramArray + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)paramArray + 0x39) = 2;\n  *(undefined *)(paramArray + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    update_flags_and_values_08002280(*paramArray);\n    tempVar2 = *paramArray;\n    updatedValue = *(uint *)(extraout1 + 0x10);\n    *(uint *)(tempVar2 + 0x18) = *(uint *)(tempVar2 + 0x18) | 8;\n    *(uint *)(tempVar2 + 0x18) = *(uint *)(tempVar2 + 0x18) & 0xfffffffb;\n    updatedValue = *(uint *)(tempVar2 + 0x18) | updatedValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_params_08002404(*paramArray);\n    tempVar2 = *paramArray;\n    tempVar1 = *(int *)(extraout2 + 0x10);\n    *(uint *)(tempVar2 + 0x18) = *(uint *)(tempVar2 + 0x18) | 0x800;\n    *(uint *)(tempVar2 + 0x18) = *(uint *)(tempVar2 + 0x18) & 0xfffffbff;\n    updatedValue = *(uint *)(tempVar2 + 0x18) | tempVar1 << 8;\n    break;\n  case 8:\n    update_parameter_and_variable_080022d0(*paramArray);\n    tempVar2 = *paramArray;\n    updatedValue = *(uint *)(extraout3 + 0x10);\n    *(uint *)(tempVar2 + 0x1c) = *(uint *)(tempVar2 + 0x1c) | 8;\n    *(uint *)(tempVar2 + 0x1c) = *(uint *)(tempVar2 + 0x1c) & 0xfffffffb;\n    updatedValue = *(uint *)(tempVar2 + 0x1c) | updatedValue;\n    goto LAB_080024fa;\n  case 0xc:\n    update_param_values_08002324(*paramArray);\n    tempVar2 = *paramArray;\n    tempVar1 = *(int *)(extraout4 + 0x10);\n    *(uint *)(tempVar2 + 0x1c) = *(uint *)(tempVar2 + 0x1c) | 0x800;\n    *(uint *)(tempVar2 + 0x1c) = *(uint *)(tempVar2 + 0x1c) & 0xfffffbff;\n    updatedValue = *(uint *)(tempVar2 + 0x1c) | tempVar1 << 8;\nLAB_080024fa:\n    *(uint *)(tempVar2 + 0x1c) = updatedValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(tempVar2 + 0x18) = updatedValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)paramArray + 0x39) = 1;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_param_flags_0800245c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extraout1",
                "extraout_r1_00": "extraout2",
                "extraout_r1_01": "extraout3",
                "extraout_r1_02": "extraout4",
                "iVar1": "tempVar1",
                "uVar2": "updatedValue",
                "iVar3": "tempVar2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_value_08002520",
            "code": "\nvoid updateBitwiseValue_08002520(int baseAddress,uint bitIndex,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitIndex & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_value_08002520",
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_bitwise_value_and_set_flag_08002538",
            "code": "\nundefined4 update_bitwise_value_and_set_flag_08002538(uint **bitwise_value_ptr,undefined4 value_to_update)\n\n{\n  uint updated_value;\n  uint *bitwise_value_ptr;\n  \n  update_bitwise_value_08002520(*bitwise_value_ptr,value_to_update,1);\n  bitwise_value_ptr = *bitwise_value_ptr;\n  updated_value = 0x40012c00;\n  if (bitwise_value_ptr == (uint *)0x40012c00) {\n    updated_value = constant_value | 0x8000;\n  }\n  if (bitwise_value_ptr == (uint *)0x40012c00) {\n    bitwise_value_ptr[0x11] = updated_value;\n  }\n  *bitwise_value_ptr = *bitwise_value_ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_bitwise_value_and_set_flag_08002538",
                "param_1": "bitwise_value_ptr",
                "param_2": "value_to_update",
                "uVar1": "updated_value",
                "puVar2": "bitwise_value_ptr",
                "uRam40012c44": "constant_value"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "set_flag_and_calculate_checksum_08002564",
            "code": "\nundefined4 setFlagAndCalculateChecksum_08002564(int *flagInfo,uint *checksum)\n\n{\n  undefined4 returnVal;\n  \n  returnVal = 2;\n  if (*(char *)(flagInfo + 0xe) != '\\x01') {\n    *(undefined *)((int)flagInfo + 0x39) = 2;\n    *(uint *)(*flagInfo + 0x44) =\n         *checksum | checksum[1] | checksum[2] | checksum[3] | checksum[4] | checksum[5] | checksum[6];\n    *(undefined *)((int)flagInfo + 0x39) = 1;\n    returnVal = 0;\n    *(undefined *)(flagInfo + 0xe) = 0;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08002564": "set_flag_and_calculate_checksum_08002564",
                "param_1": "flagInfo",
                "param_2": "checksum",
                "uVar1": "returnVal"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 updatePermissions_080025a4(int *permissionData,uint *accessRights)\n\n{\n  uint tempVar1;\n  undefined4 result;\n  int ptr;\n  uint tempVar2;\n  \n  result = 2;\n  if (*(char *)(permissionData + 0xe) != '\\x01') {\n    *(undefined *)((int)permissionData + 0x39) = 2;\n    ptr = *permissionData;\n    tempVar2 = *accessRights;\n    tempVar1 = accessRights[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | tempVar2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | tempVar1;\n    *(undefined *)((int)permissionData + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissionData + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "permissionData",
                "param_2": "accessRights",
                "uVar1": "tempVar1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "tempVar2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *values)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint shiftedValue3;\n  int percentage1;\n  int value1;\n  int baseAddress;\n  \n  baseAddress = *values;\n  shiftedValue3 = values[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | values[3];\n  *(uint *)(baseAddress + 0xc) = values[2] | shiftedValue3 | values[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | values[6];\n  if (baseAddress == 0x40013800) {\n    shiftedValue1 = extracted_data_shift_08002250();\n    percentage1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shiftedValue1 = extracted_data_shift_08002250();\n    value1 = values[1];\n    shiftedValue2 = extracted_data_shift_08002250();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(value1 << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = extracted_data_shift_08002250();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(values[1] << 2);\n    shiftedValue1 = extracted_data_shift_08002250();\n  }\n  else {\n    shiftedValue1 = get_shifted_value_08002220();\n    percentage1 = (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shiftedValue1 = get_shifted_value_08002220();\n    value1 = values[1];\n    shiftedValue2 = get_shifted_value_08002220();\n    shiftedValue2 = (uint)(shiftedValue1 * 0x19) / (uint)(value1 << 2) +\n            (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shiftedValue1 = get_shifted_value_08002220();\n    shiftedValue3 = (uint)(shiftedValue1 * 0x19) / (uint)(values[1] << 2);\n    shiftedValue1 = get_shifted_value_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((shiftedValue3 + (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shiftedValue2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       percentage1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "values",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "shiftedValue3",
                "iVar4": "percentage1",
                "iVar5": "value1",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_memory_flags_08002724",
            "code": "\nundefined4 initializeMemoryFlags_08002724(int *memory)\n\n{\n  int memoryPtr;\n  \n  if (memory != (int *)0x0) {\n    if (*(char *)((int)memory + 0x39) == '\\0') {\n      *(undefined *)(memory + 0xe) = 0;\n      updateMemoryFlags;\n    }\n    *(undefined *)((int)memory + 0x39) = 2;\n    *(uint *)(*memory + 0xc) = *(uint *)(*memory + 0xc) & 0xffffdfff;\n    updateValues;\n    memoryPtr = *memory;\n    *(uint *)(memoryPtr + 0x10) = *(uint *)(memoryPtr + 0x10) & 0xffffb7ff;\n    *(uint *)(memoryPtr + 0x14) = *(uint *)(memoryPtr + 0x14) & 0xffffffd5;\n    *(uint *)(memoryPtr + 0xc) = *(uint *)(memoryPtr + 0xc) | 0x2000;\n    memoryValue2 = 0;\n    *(undefined *)((int)memory + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_memory_flags_08002724",
                "param_1": "memory",
                "iVar1": "memoryPtr",
                "update_memory_flags_08004e7c()": "updateMemoryFlags",
                "update_values_080025e8(param_1)": "updateValues",
                "param_1[0xf]": "memoryValue2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *inputArray)\n\n{\n  byte tempByte;\n  int tempInt;\n  uint tempUint;\n  undefined4 tempUint4;\n  short tempShort;\n  ushort *ushortPointer1;\n  ushort *ushortPointer2;\n  bool flag;\n  \n  if ((*(byte *)((int)inputArray + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  tempInt = *inputArray;\n  ushortPointer1 = (ushort *)inputArray[10];\n  if (inputArray[2] == 0x1000) {\n    if (inputArray[4] == 0) {\n      ushortPointer2 = ushortPointer1 + 1;\n      *ushortPointer1 = (ushort)((uint)(*(int *)(tempInt + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushortPointer2 = (ushort *)((int)ushortPointer1 + 1);\n      *ushortPointer1 = (ushort)*(int *)(tempInt + 4) & 0xff;\n    }\n    inputArray[10] = (int)ushortPointer2;\n  }\n  else {\n    if (inputArray[4] == 0) {\n      tempByte = (byte)*(undefined4 *)(tempInt + 4);\n      inputArray[10] = (int)ushortPointer1 + 1;\n    }\n    else {\n      tempUint4 = *(undefined4 *)(tempInt + 4);\n      inputArray[10] = (int)ushortPointer1 + 1;\n      tempByte = (byte)tempUint4 & 0x7f;\n    }\n    *(byte *)ushortPointer1 = tempByte;\n  }\n  tempShort = *(short *)((int)inputArray + 0x2e) + -1;\n  *(short *)((int)inputArray + 0x2e) = tempShort;\n  if (tempShort == 0) {\n    tempInt = *inputArray;\n    *(uint *)(tempInt + 0xc) = *(uint *)(tempInt + 0xc) & 0xffffffdf;\n    flag = *(char *)((int)inputArray + 0x39) != '2';\n    if (flag) {\n      tempUint = *(uint *)(tempInt + 0xc) & 0xfffffeff;\n    }\n    else {\n      tempInt = 0x12;\n      tempUint = 0x32;\n    }\n    if (flag) {\n      *(uint *)(tempInt + 0xc) = tempUint;\n      tempUint = *(uint *)(tempInt + 0x14) & 0xfffffffe;\n    }\n    if (flag) {\n      *(uint *)(tempInt + 0x14) = tempUint;\n      tempInt = 1;\n    }\n    *(char *)((int)inputArray + 0x39) = (char)tempInt;\n    check_and_increment_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "inputArray",
                "bVar1": "tempByte",
                "iVar2": "tempInt",
                "uVar3": "tempUint",
                "uVar4": "tempUint4",
                "sVar5": "tempShort",
                "puVar6": "ushortPointer1",
                "puVar7": "ushortPointer2",
                "bVar8": "flag"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_and_check_data_0800299a",
            "code": "\nvoid processAndCheckData_0800299a(uint **data)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *ptr;\n  undefined temp;\n  uint *ptrData;\n  uint flag;\n  bool isFlagSet;\n  \n  ptrData = *data;\n  value2 = *ptrData;\n  value1 = ptrData[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      process_data_0800290c();\n      return;\n    }\n  }\n  else {\n    flag = ptrData[5] & 1;\n    if ((flag != 0) || ((value1 & 0x120) != 0)) {\n      ptrData = (uint *)(value2 << 0x1f);\n      if ((int)ptrData < 0) {\n        isFlagSet = (int)(value1 << 0x17) < 0;\n        if (isFlagSet) {\n          ptrData = (uint *)((uint)data[0xf] | 1);\n        }\n        if (isFlagSet) {\n          data[0xf] = ptrData;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        process_data_0800290c(data);\n      }\n      ptrData = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptrData[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptrData[3] = ptrData[3] & 0xfffffedf;\n      ptrData[5] = ptrData[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      ptr = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptrData[1] = *(ushort *)ptr & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          ptr = (uint *)((int)ptr + 2);\n        }\n        else {\n          ptr = (uint *)((int)ptr + 1);\n        }\n        data[8] = ptr;\n      }\n      else {\n        data[8] = (uint *)((int)ptr + 1);\n        ptrData[1] = (uint)*(byte *)ptr;\n      }\n      count = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = count;\n      if (count == 0) {\n        ptrData[3] = ptrData[3] & 0xffffff7f;\n        ptrData[3] = ptrData[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptrData[3] = ptrData[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      temp = 0x22;\n    }\n    else {\n      temp = 1;\n    }\n    *(undefined *)((int)data + 0x39) = temp;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_and_check_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "ptr",
                "uVar5": "temp",
                "puVar6": "ptrData",
                "uVar7": "flag",
                "bVar8": "isFlagSet"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initialize_MPU9250_08002ad0(void)\n\n{\n  check_and_process_data(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  process_data(0xd0,0x6b,0x80,1);\n  process_data(0xd0,0x6b,1);\n  process_data(0xd0,0x6c,0,1);\n  process_data(0xd0,0x19,0,1);\n  process_data(0xd0,0x1d,3,1);\n  process_data(0xd0,0x1a,3,1);\n  process_data(0xd0,0x1b,0x10,1);\n  process_data(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "check_and_process_data_0800407c": "check_and_process_data",
                "process_data_0800403c": "process_data"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 unsignedResult;\n  uint i2cData;\n  int gyroReg;\n  int accelReg;\n  undefined4 gyroData;\n  undefined4 accelData;\n  \n  gyroData = 0;\n  accelData = i2cData & 0xffff0000;\n  process_i2c_data_080040e8(0xd0,0x3b,&gyroData,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(gyroData._2_1_,gyroData._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)gyroData,gyroData._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)accelData,accelData._1_1_);\n  accelReg = (int)DAT_200002f6;\n  gyroReg = (int)DAT_200002f8;\n  unsignedResult = convert_complement_to_unsigned_08000c44();\n  unsignedResult = calculate_floating_point_08000cec(unsignedResult,0x40800000);\n  DAT_200002d0 = calculate_floating_point_08000cec(unsignedResult,0x38000000);\n  unsignedResult = convert_complement_to_unsigned_08000c44(accelReg);\n  unsignedResult = calculate_floating_point_08000cec(unsignedResult,0x40800000);\n  DAT_200002d4 = calculate_floating_point_08000cec(unsignedResult,0x38000000);\n  unsignedResult = convert_complement_to_unsigned_08000c44(gyroReg);\n  unsignedResult = calculate_floating_point_08000cec(unsignedResult,0x40800000);\n  DAT_200002d8 = calculate_floating_point_08000cec(unsignedResult,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "i2cData",
                "iVar2": "gyroReg",
                "iVar3": "accelReg",
                "local_18": "gyroData",
                "local_14": "accelData",
                "uVar1": "unsignedResult"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 accelerometerConfig;\n  undefined2 gyroscopeConfig;\n  \n  accelerometerConfig = 0;\n  gyroscopeConfig = 0;\n  readI2CData(0xd0,0x43,&accelerometerConfig,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(accelerometerConfig._2_1_,accelerometerConfig._3_1_);\n  DAT_200002be = CONCAT11((undefined)accelerometerConfig,accelerometerConfig._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)gyroscopeConfig,gyroscopeConfig._1_1_);\n  iVar3 = (int)DAT_200002c0;\n  iVar2 = (int)DAT_200002c2;\n  uVar1 = convertToUnsigned();\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c4 = calculateFloatingPointDifference(uVar1,DAT_20000000);\n  uVar1 = convertToUnsigned(iVar3);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c8 = calculateFloatingPointDifference(uVar1,DAT_20000004);\n  uVar1 = convertToUnsigned(iVar2);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002cc = calculateFloatingPointDifference(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "accelerometerConfig",
                "local_1c": "gyroscopeConfig",
                "process_i2c_data_080040e8": "readI2CData",
                "convert_complement_to_unsigned_08000c44": "convertToUnsigned",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_floating_point_difference_08000ad8": "calculateFloatingPointDifference"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_sensor_data_08002cb0",
            "code": "\nvoid processSensorData_08002cb0(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint data)\n\n{\n  undefined4 unsignedVar;\n  uint dataCopy;\n  \n  dataCopy = data;\n  process_data_0800403c(0xd0,0x37,0x22,1,inputParam1,inputParam2,inputParam3);\n  process_data_0800403c(0xd0,0x6a,1);\n  check_and_process_data_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  process_data_0800403c(0x18,0xb,1);\n  process_data_0800403c(0x18,10,0,1);\n  process_data_0800403c(0x18,10,0xf,1);\n  process_i2c_data_080040e8(0x18,0x10,&dataCopy,3,\"../Src/MPU9250.c\",0xb6);\n  unsignedVar = convert_complement_to_unsigned_08000c44((dataCopy & 0xff) - 0x80);\n  unsignedVar = calculate_floating_point_08000cec(unsignedVar,0x3b800000);\n  DAT_200002e8 = calculate_float_08000adc(unsignedVar,0x3f800000);\n  unsignedVar = convert_complement_to_unsigned_08000c44((dataCopy >> 8 & 0xff) - 0x80);\n  unsignedVar = calculate_floating_point_08000cec(unsignedVar,0x3b800000);\n  DAT_200002ec = calculate_float_08000adc(unsignedVar,0x3f800000);\n  unsignedVar = convert_complement_to_unsigned_08000c44((dataCopy >> 0x10 & 0xff) - 0x80);\n  unsignedVar = calculate_floating_point_08000cec(unsignedVar,0x3b800000);\n  DAT_200002f0 = calculate_float_08000adc(unsignedVar,0x3f800000);\n  process_data_0800403c(0x18,10,0,1);\n  process_data_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_08002cb0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "data",
                "uVar1": "unsignedVar",
                "local_c": "dataCopy"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_mpu9250_data_08002d88",
            "code": "\nvoid process_MPU9250_data_08002d88(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  int result;\n  undefined4 convertedValue;\n  undefined4 convertedValue2;\n  int intValue;\n  undefined2 value3;\n  undefined temp1;\n  undefined temp2;\n  undefined temp3;\n  undefined temp4;\n  byte byteValue;\n  undefined temp5;\n  \n  temp5 = (undefined)((uint)value4 >> 0x18);\n  value3 = 0;\n  temp1 = 0;\n  temp2 = 0;\n  temp3 = 0;\n  temp4 = 0;\n  byteValue = 0;\n  result = check_and_process_data_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,value1,value2);\n  if (result << 0x1f < 0) {\n    process_i2c_data_080040e8(0x18,3,&value3,7,\"../Src/MPU9250.c\",0xda);\n    convertedValue2 = DAT_2000001c;\n    if ((int)((uint)byteValue << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(temp2,temp1);\n      DAT_200002bc = CONCAT11(temp4,temp3);\n      intValue = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = value3;\n      convertedValue = convert_complement_to_unsigned_08000c44();\n      convertedValue = calculate_floating_point_08000cec(convertedValue,convertedValue2);\n      convertedValue = calculate_floating_point_08000cec(convertedValue,DAT_200002e8);\n      convertedValue = calculate_floating_point_difference_08000ad8(convertedValue,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(convertedValue,DAT_2000002c);\n      convertedValue = convert_complement_to_unsigned_08000c44(intValue);\n      convertedValue = calculate_floating_point_08000cec(convertedValue,convertedValue2);\n      convertedValue = calculate_floating_point_08000cec(convertedValue,DAT_200002ec);\n      convertedValue = calculate_floating_point_difference_08000ad8(convertedValue,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(convertedValue,DAT_20000030);\n      convertedValue = convert_complement_to_unsigned_08000c44(result);\n      convertedValue2 = calculate_floating_point_08000cec(convertedValue,convertedValue2);\n      convertedValue2 = calculate_floating_point_08000cec(convertedValue2,DAT_200002f0);\n      convertedValue2 = calculate_floating_point_difference_08000ad8(convertedValue2,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(convertedValue2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_mpu9250_data_08002d88",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "result",
                "uVar2": "convertedValue",
                "uVar3": "convertedValue2",
                "iVar4": "intValue",
                "local_28": "value3",
                "uStack_26": "temp1",
                "uStack_25": "temp2",
                "local_24": "temp3",
                "local_23": "temp4",
                "local_22": "byteValue",
                "uStack_21": "temp5"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensors_08002ea0",
            "code": "\nvoid initialize_sensors_08002ea0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extra_out_param;\n  \n  initialize_mpu9250();\n  process_sensor_data();\n  initialize_data1(0x3f19999a);\n  initialize_data2(0,extra_out_param,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extra_out_param",
                "initialize_mpu9250_08002ad0": "initialize_mpu9250",
                "process_sensor_data_08002cb0": "process_sensor_data",
                "initialize_data_08003314": "initialize_data1",
                "initialize_data_08003320": "initialize_data2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_floating_point_difference_08002ec0",
            "code": "\nvoid calculateFloatingPointDifference_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 data1;\n  undefined4 data2;\n  \n  data1 = DAT_2000024c;\n  data2 = DAT_20000010;\n  result1 = calculate_floating_point_difference_08000ad8(0x3f800000,DAT_20000010);\n  data1 = calculate_floating_point_08000cec(result1,data1);\n  data2 = calculate_floating_point_08000cec(data2,DAT_2000000c);\n  DAT_2000000c = calculate_float_08000adc(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_floating_point_difference_08002ec0",
                "uVar1": "result1",
                "uVar2": "data1",
                "uVar3": "data2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_store_08002ed4",
            "code": "\nvoid calculateAndStore_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 originalValue;\n  undefined4 dataValue;\n  \n  originalValue = DAT_20000248;\n  dataValue = constant2;\n  result1 = FUN_08000ad8(0x3f800000,constant2);\n  originalValue = FUN_08000cec(result1,originalValue);\n  dataValue = FUN_08000cec(dataValue,result);\n  result = FUN_08000adc(dataValue,originalValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_08002ed4",
                "uVar1": "result1",
                "uVar2": "originalValue",
                "uVar3": "dataValue",
                "uRam20000018": "constant2",
                "uRam20000014": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_data_08002ee8",
            "code": "\nvoid processData_08002ee8(void)\n\n{\n  undefined4 data;\n  int result;\n  \n  data = DAT_20000250;\n  result = check_concatenated_parameters_08001050(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = is_string_empty_08001028(data,0x42b40000), result != 0)) {\n    calculate_float_08000adc(data,0x42b40000);\n    return;\n  }\n  calculate_floating_point_difference_08000ad8(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "uVar1": "data",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_data_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_mpu9250();\n  configure_mpu9250();\n  process_mpu9250_data();\n  DAT_20000258 = get_data();\n  uVar1 = calculate_difference(DAT_20000258 - DAT_20000254);\n  calculate_floating_point(uVar1,0x447a0000);\n  initialize_data();\n  DAT_20000254 = DAT_20000258;\n  calculate_and_store_results(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_and_store();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._0_2_ = extract_significant_bits();\n  uVar1 = calculate_floating_point_difference();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._2_2_ = extract_significant_bits();\n  process_data();\n  DAT_20001399 = extract_significant_bits();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_data_08002f28",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "configure_mpu9250",
                "process_mpu9250_data_08002d88": "process_mpu9250_data",
                "thunk_get_data_0800115c": "get_data",
                "calculate_08000c3c": "calculate_difference",
                "calculate_floating_point_08000e54": "calculate_floating_point",
                "initialize_data_08003320": "initialize_data",
                "calculate_and_store_results_08003330": "calculate_and_store_results",
                "calculate_and_store_08002ed4": "calculate_and_store",
                "calculate_floating_point_difference_08002ec0": "calculate_floating_point_difference",
                "extract_significant_bits_08001078": "extract_significant_bits",
                "process_data_08002ee8": "process_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "convert_data_to_uint_08003034",
            "code": "\nuint convert_data_to_uint_08003034(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 converted_value;\n  \n  converted_value = input_param4;\n  process_data_if_flags_valid_080040b8(0xee,0,&converted_value,3,\"../Src/MS5611.c\",0x8c,input_param3);\n  return (uint)CONCAT12((undefined)converted_value,CONCAT11(converted_value._1_1_,converted_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "convert_data_to_uint_08003034",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "local_c": "converted_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_dat_value_08003068",
            "code": "\nundefined4 get_dat_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_dat_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int index;\n  undefined tempValue1;\n  undefined tempValue2;\n  \n  index = 0;\n  processData(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    tempValue1 = 0;\n    tempValue2 = 0;\n    processI2CData(0xee,index + 0xa0U & 0xffff,&tempValue1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(tempValue1,tempValue2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "local_1c": "tempValue1",
                "local_1b": "tempValue2",
                "iVar1": "index",
                "process_data_0800403c": "processData",
                "process_i2c_data_080040e8": "processI2CData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_data_08003314",
            "code": "\nvoid initializeData_08003314(undefined4 inputValue)\n\n{\n  DAT_2000035c = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_data_08003314",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 inputValue)\n\n{\n  DAT_20000360 = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_and_store_results_08003330",
            "code": "\nvoid calculate_and_store_results_08003330(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined4 input_9,undefined4 *output_array)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int concat_success;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  int result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  int result_18;\n  undefined4 result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_24;\n  int result_25;\n  undefined4 result_26;\n  undefined4 result_27;\n  undefined4 result_28;\n  int result_29;\n  undefined8 result_30;\n  undefined8 result_31;\n  \n  result_28 = DAT_20000048;\n  result_27 = DAT_20000044;\n  result_29 = DAT_20000040;\n  result_26 = DAT_2000003c;\n  result_1 = calculate_floating_point_08000cec(input_1,input_1);\n  result_2 = calculate_floating_point_08000cec(input_2);\n  result_1 = calculate_float_08000adc(result_1,result_2);\n  result_2 = calculate_floating_point_08000cec(input_3);\n  calculate_float_08000adc(result_1,result_2);\n  reverse_binary_operation_08000428();\n  validate_and_initialize_program_08005bc8();\n  result_1 = calculate_float_08000a30();\n  concat_success = check_concatenation_success_08001014(result_1,0);\n  if (concat_success == 0) {\n    result_2 = calculate_floating_point_08000cec(input_7);\n    result_3 = calculate_floating_point_08000cec(input_8);\n    result_2 = calculate_float_08000adc(result_2,result_3);\n    result_3 = calculate_floating_point_08000cec(input_9);\n    calculate_float_08000adc(result_2,result_3);\n    reverse_binary_operation_08000428();\n    validate_and_initialize_program_08005bc8();\n    result_2 = calculate_float_08000a30();\n    concat_success = check_concatenation_success_08001014(result_2,0);\n    if (concat_success == 0) {\n      result_30 = reverse_binary_operation_08000428(input_4);\n      perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_3 = calculate_float_08000a30();\n      result_30 = reverse_binary_operation_08000428(input_5);\n      perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = calculate_float_08000a30();\n      result_30 = reverse_binary_operation_08000428(input_6);\n      perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = calculate_float_08000a30();\n      concat_success = calculate_float_08000adc(result_26);\n      result_6 = calculate_float_08000adc(result_29);\n      result_7 = calculate_float_08000adc(result_27,result_27);\n      result_8 = calculate_float_08000adc(result_28,result_28);\n      result_9 = calculate_floating_point_08000cec(result_26);\n      result_10 = calculate_floating_point_08000cec(result_26,result_29);\n      result_11 = calculate_floating_point_08000cec(result_26,result_27);\n      result_12 = calculate_floating_point_08000cec(result_29);\n      result_13 = calculate_floating_point_08000cec(result_29,result_28);\n      result_14 = calculate_floating_point_08000cec(result_27,result_27);\n      result_15 = calculate_floating_point_08000cec(result_28,result_28);\n      result_1 = calculate_floating_point_08000e54(0x3f800000,result_1);\n      result_2 = calculate_floating_point_08000e54(0x3f800000,result_2);\n      result_16 = calculate_floating_point_08000cec(input_7,result_2);\n      result_17 = calculate_floating_point_08000cec(input_8,result_2);\n      result_2 = calculate_floating_point_08000cec(input_9,result_2);\n      result_18 = calculate_floating_point_08000cec(concat_success,result_16);\n      result_19 = calculate_floating_point_08000cec(concat_success,result_17);\n      result_20 = calculate_floating_point_08000cec(concat_success,result_2);\n      result_21 = calculate_floating_point_08000cec(result_6,result_16);\n      result_22 = calculate_floating_point_08000cec(result_9,result_16);\n      result_23 = calculate_floating_point_08000cec(result_28,result_19);\n      result_22 = calculate_floating_point_difference_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_27,result_20);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_12,result_16);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_6,result_17);\n      result_23 = calculate_floating_point_08000cec(result_23,result_27);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_6,result_2);\n      result_23 = calculate_floating_point_08000cec(result_23,result_28);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_14,result_16);\n      result_22 = calculate_floating_point_difference_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_15,result_16);\n      result_22 = calculate_floating_point_difference_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_28,result_18);\n      result_24 = calculate_floating_point_08000cec(result_9,result_17);\n      result_23 = calculate_float_08000adc(result_23,result_24);\n      result_20 = calculate_floating_point_08000cec(result_29,result_20);\n      result_20 = calculate_floating_point_difference_08000ad8(result_23,result_20);\n      result_23 = calculate_floating_point_08000cec(result_27,result_21);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_12,result_17);\n      result_20 = calculate_floating_point_difference_08000ad8(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_14,result_17);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_7,result_2);\n      result_23 = calculate_floating_point_08000cec(result_23,result_28);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_15,result_17);\n      result_20 = calculate_floating_point_difference_08000ad8(result_20,result_23);\n      result_22 = calculate_floating_point_08000cec(result_22,result_22);\n      result_20 = calculate_floating_point_08000cec(result_20,result_20);\n      calculate_float_08000adc(result_22,result_20);\n      reverse_binary_operation_08000428();\n      validate_and_initialize_program_08005bc8();\n      result_25 = calculate_float_08000a30();\n      result_20 = calculate_floating_point_08000cec(result_18 + -0x80000000,result_27);\n      result_19 = calculate_floating_point_08000cec(result_29,result_19);\n      result_19 = calculate_float_08000adc(result_20,result_19);\n      result_9 = calculate_floating_point_08000cec(result_9,result_2);\n      result_9 = calculate_float_08000adc(result_19,result_9);\n      result_19 = calculate_floating_point_08000cec(result_28,result_21);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_12,result_2);\n      result_9 = calculate_floating_point_difference_08000ad8(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_7,result_17);\n      result_19 = calculate_floating_point_08000cec(result_19,result_28);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_14,result_2);\n      result_9 = calculate_floating_point_difference_08000ad8(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_15,result_2);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_float_08000adc(result_9,result_9);\n      result_20 = calculate_float_08000adc(result_13);\n      result_21 = calculate_floating_point_08000cec(result_27,concat_success);\n      result_20 = calculate_floating_point_difference_08000ad8(result_20,result_21);\n      result_21 = calculate_floating_point_08000cec(input_1,result_1);\n      result_20 = calculate_floating_point_difference_08000ad8(result_20,result_21);\n      result_21 = calculate_floating_point_08000cec(result_28,result_7);\n      result_22 = calculate_float_08000adc(result_10);\n      result_21 = calculate_float_08000adc(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(input_2,result_1);\n      result_21 = calculate_floating_point_difference_08000ad8(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(result_27,result_9);\n      result_23 = calculate_floating_point_difference_08000ad8(0x3f000000,result_14);\n      result_15 = calculate_floating_point_difference_08000ad8(result_23,result_15);\n      result_15 = calculate_floating_point_08000cec(result_15,result_25);\n      result_23 = calculate_floating_point_difference_08000ad8(result_13,result_11);\n      result_23 = calculate_floating_point_08000cec(result_23,result_9);\n      result_15 = calculate_float_08000adc(result_15,result_23);\n      result_15 = calculate_floating_point_difference_08000ad8(result_15,result_16);\n      result_16 = calculate_floating_point_08000cec(result_29,result_9);\n      result_23 = calculate_floating_point_08000cec(result_29,result_27);\n      result_24 = calculate_floating_point_08000cec(result_26,result_28);\n      result_23 = calculate_floating_point_difference_08000ad8(result_23,result_24);\n      result_23 = calculate_floating_point_08000cec(result_23,result_25);\n      result_24 = calculate_floating_point_08000cec(result_27,result_28);\n      result_10 = calculate_float_08000adc(result_24,result_10);\n      result_10 = calculate_floating_point_08000cec(result_10,result_9);\n      result_10 = calculate_float_08000adc(result_23,result_10);\n      result_10 = calculate_floating_point_difference_08000ad8(result_10,result_17);\n      result_17 = calculate_floating_point_08000cec(result_27,result_25);\n      result_23 = calculate_floating_point_difference_08000ad8(0x3f000000,result_12);\n      result_23 = calculate_floating_point_difference_08000ad8(result_23,result_14);\n      result_23 = calculate_floating_point_08000cec(result_23,result_9);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_11 = calculate_floating_point_08000cec(result_11,result_25);\n      result_11 = calculate_float_08000adc(result_23,result_11);\n      result_2 = calculate_floating_point_difference_08000ad8(result_11,result_2);\n      result_11 = calculate_floating_point_08000cec(result_7 + -0x80000000,result_20);\n      result_13 = calculate_floating_point_08000cec(result_6,result_21);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_22,result_15);\n      result_11 = calculate_floating_point_difference_08000ad8(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_28,result_25 + -0x80000000);\n      result_13 = calculate_float_08000adc(result_13,result_16);\n      result_13 = calculate_floating_point_08000cec(result_13,result_10);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_17,result_2);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_12 = calculate_float_08000adc(result_12);\n      result_12 = calculate_floating_point_difference_08000ad8(0x3f800000,result_12);\n      result_13 = calculate_float_08000adc(result_14);\n      result_12 = calculate_floating_point_difference_08000ad8(result_12,result_13);\n      result_1 = calculate_floating_point_08000cec(input_3,result_1);\n      result_1 = calculate_floating_point_difference_08000ad8(result_12,result_1);\n      result_12 = calculate_floating_point_08000cec(result_28,result_9);\n      result_9 = calculate_floating_point_08000cec(result_26,result_9);\n      result_13 = calculate_floating_point_08000cec(result_8,result_20);\n      result_14 = calculate_floating_point_08000cec(concat_success,result_21);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_29,0x40800000);\n      result_14 = calculate_floating_point_08000cec(result_14,result_1);\n      result_13 = calculate_floating_point_difference_08000ad8(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_15,result_12);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_float_08000adc(result_17,result_9);\n      result_14 = calculate_floating_point_08000cec(result_14,result_10);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_28,result_25);\n      result_17 = calculate_floating_point_08000cec(result_29,result_19);\n      result_14 = calculate_floating_point_difference_08000ad8(result_14,result_17);\n      result_14 = calculate_floating_point_08000cec(result_14,result_2);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_18 = calculate_float_08000adc(result_25,result_25);\n      result_14 = calculate_floating_point_08000cec(result_29,result_25);\n      result_17 = calculate_floating_point_08000cec(concat_success + -0x80000000,result_20);\n      result_8 = calculate_floating_point_08000cec(result_8,result_21);\n      result_8 = calculate_float_08000adc(result_17,result_8);\n      result_17 = calculate_floating_point_08000cec(result_27,0x40800000);\n      result_1 = calculate_floating_point_08000cec(result_17,result_1);\n      result_1 = calculate_floating_point_difference_08000ad8(result_8,result_1);\n      result_8 = calculate_floating_point_08000cec(result_27,result_18 + -0x80000000);\n      result_8 = calculate_floating_point_difference_08000ad8(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_float_08000adc(result_12,result_14);\n      result_8 = calculate_floating_point_08000cec(result_8,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_floating_point_08000cec(result_26,result_25);\n      result_9 = calculate_floating_point_08000cec(result_27,result_19);\n      result_8 = calculate_floating_point_difference_08000ad8(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_2);\n      result_8 = calculate_float_08000adc(result_1,result_8);\n      result_1 = calculate_floating_point_08000cec(result_6,result_20);\n      result_6 = calculate_floating_point_08000cec(result_7,result_21);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_floating_point_08000cec(result_28,result_18 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_16);\n      result_6 = calculate_floating_point_08000cec(result_6,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_floating_point_08000cec(result_26,result_25 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_22);\n      result_6 = calculate_floating_point_08000cec(result_6,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_2 = calculate_floating_point_08000cec(result_2,result_14);\n      result_6 = calculate_float_08000adc(result_1,result_2);\n      result_1 = calculate_floating_point_08000cec(result_11);\n      result_2 = calculate_floating_point_08000cec(result_13);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_8,result_8);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_6,result_6);\n      calculate_float_08000adc(result_1,result_2);\n      reverse_binary_operation_08000428();\n      validate_and_initialize_program_08005bc8();\n      result_1 = calculate_float_08000a30();\n      result_9 = calculate_floating_point_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_floating_point_08000cec(result_29 + -0x80000000,result_3);\n      result_10 = calculate_floating_point_08000cec(result_27,result_4);\n      result_2 = calculate_floating_point_difference_08000ad8(result_2,result_10);\n      result_10 = calculate_floating_point_08000cec(result_28,result_5);\n      result_2 = calculate_floating_point_difference_08000ad8(result_2,result_10);\n      result_10 = calculate_floating_point_08000cec(result_2,0x3f000000);\n      result_11 = calculate_floating_point_08000cec(result_11,result_9);\n      result_2 = DAT_20000360;\n      result_11 = calculate_floating_point_08000cec(result_11,result_1);\n      result_10 = calculate_floating_point_difference_08000ad8(result_10,result_11);\n      result_2 = calculate_floating_point_08000cec(result_10,result_2);\n      result_10 = calculate_float_08000adc(result_2,result_26);\n      result_11 = calculate_floating_point_08000cec(result_26,result_3);\n      result_12 = calculate_floating_point_08000cec(result_27,result_5);\n      result_2 = DAT_20000360;\n      result_11 = calculate_float_08000adc(result_11,result_12);\n      result_12 = calculate_floating_point_08000cec(result_28,result_4);\n      result_11 = calculate_floating_point_difference_08000ad8(result_11,result_12);\n      result_11 = calculate_floating_point_08000cec(result_11,0x3f000000);\n      result_12 = calculate_floating_point_08000cec(result_13,result_9);\n      result_12 = calculate_floating_point_08000cec(result_12,result_1);\n      result_11 = calculate_floating_point_difference_08000ad8(result_11,result_12);\n      result_2 = calculate_floating_point_08000cec(result_11,result_2);\n      result_11 = calculate_float_08000adc(result_2,result_29);\n      result_2 = DAT_20000360;\n      result_12 = calculate_floating_point_08000cec(result_26,result_4);\n      result_13 = calculate_floating_point_08000cec(result_29,result_5);\n      result_12 = calculate_floating_point_difference_08000ad8(result_12,result_13);\n      result_13 = calculate_floating_point_08000cec(result_28,result_3);\n      result_12 = calculate_float_08000adc(result_12,result_13);\n      result_12 = calculate_floating_point_08000cec(result_12,0x3f000000);\n      result_8 = calculate_floating_point_08000cec(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_1);\n      result_8 = calculate_floating_point_difference_08000ad8(result_12,result_8);\n      result_2 = calculate_floating_point_08000cec(result_8,result_2);\n      result_2 = calculate_float_08000adc(result_2,result_27);\n      result_26 = calculate_floating_point_08000cec(result_26,result_5);\n      result_4 = calculate_floating_point_08000cec(result_29,result_4);\n      result_26 = calculate_float_08000adc(result_26,result_4);\n      result_27 = calculate_floating_point_08000cec(result_27,result_3);\n      result_26 = calculate_floating_point_difference_08000ad8(result_26,result_27);\n      result_27 = calculate_floating_point_08000cec(result_26,0x3f000000);\n      result_26 = calculate_floating_point_08000cec(result_6,result_9);\n      result_1 = calculate_floating_point_08000cec(result_26,result_1);\n      result_26 = DAT_20000360;\n      result_27 = calculate_floating_point_difference_08000ad8(result_27,result_1);\n      result_26 = calculate_floating_point_08000cec(result_27,result_26);\n      result_26 = calculate_float_08000adc(result_26,result_28);\n      result_27 = calculate_floating_point_08000cec(result_10,result_10);\n      result_28 = calculate_floating_point_08000cec(result_11,result_11);\n      result_27 = calculate_float_08000adc(result_27,result_28);\n      result_28 = calculate_floating_point_08000cec(result_2,result_2);\n      result_27 = calculate_float_08000adc(result_27,result_28);\n      result_28 = calculate_floating_point_08000cec(result_26,result_26);\n      calculate_float_08000adc(result_27,result_28);\n      reverse_binary_operation_08000428();\n      validate_and_initialize_program_08005bc8();\n      result_27 = calculate_float_08000a30();\n      result_27 = calculate_floating_point_08000e54(0x3f800000,result_27);\n      result_28 = calculate_floating_point_08000cec(result_10,result_27);\n      DAT_2000003c = result_28;\n      result_29 = calculate_floating_point_08000cec(result_11,result_27);\n      DAT_20000040 = result_29;\n      result_1 = calculate_floating_point_08000cec(result_2,result_27);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_floating_point_08000cec(result_26,result_27);\n      result_26 = calculate_floating_point_08000cec(result_29,DAT_20000048);\n      result_27 = calculate_floating_point_08000cec(result_28,result_1);\n      result_26 = calculate_floating_point_difference_08000ad8(result_26,result_27);\n      calculate_float_08000adc(result_26,result_26);\n      reverse_binary_operation_08000428();\n      result_30 = validate_data_and_return_value_08005854();\n      result_30 = perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_double_from_float_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_float_08000a30();\n      *output_array = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_floating_point_08000cec(result_29,result_29);\n      result_28 = calculate_floating_point_difference_08000ad8(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_difference_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000adc(result_1,result_2);\n      result_30 = reverse_binary_operation_08000428();\n      result_26 = calculate_floating_point_08000cec(result_26,result_29);\n      result_27 = calculate_floating_point_08000cec(result_27,result_28);\n      result_26 = calculate_float_08000adc(result_26,result_27);\n      calculate_float_08000adc(result_26,result_26);\n      result_31 = reverse_binary_operation_08000428();\n      result_30 = calculate_final_value_thunk_08006070((int)result_31,(int)((ulonglong)result_31 >> 0x20),(int)result_30,\n                                  (int)((ulonglong)result_30 >> 0x20));\n      result_30 = perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_double_from_float_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_float_08000a30();\n      output_array[1] = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_floating_point_08000cec(result_29,result_29);\n      result_28 = calculate_float_08000adc(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_floating_point_difference_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_difference_08000ad8(result_1,result_2);\n      result_30 = reverse_binary_operation_08000428();\n      result_27 = calculate_floating_point_08000cec(result_29,result_27);\n      result_26 = calculate_floating_point_08000cec(result_26,result_28);\n      result_26 = calculate_float_08000adc(result_27,result_26);\n      calculate_float_08000adc(result_26,result_26);\n      result_31 = reverse_binary_operation_08000428();\n      result_30 = calculate_final_value_thunk_08006070((int)result_31,(int)((ulonglong)result_31 >> 0x20),(int)result_30,\n                                  (int)((ulonglong)result_30 >> 0x20));\n      result_30 = perform_calculation_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_double_from_float_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_float_08000a30();\n      output_array[2] = result_26;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_and_store_results_08003330",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "input_9",
                "param_10": "output_array",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "concat_success",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "result_6",
                "iVar8": "result_7",
                "uVar9": "result_8",
                "uVar10": "result_9",
                "uVar11": "result_10",
                "uVar12": "result_11",
                "uVar13": "result_12",
                "uVar14": "result_13",
                "uVar15": "result_14",
                "uVar16": "result_15",
                "uVar17": "result_16",
                "uVar18": "result_17",
                "iVar19": "result_18",
                "uVar20": "result_19",
                "uVar21": "result_20",
                "uVar22": "result_21",
                "uVar23": "result_22",
                "uVar24": "result_23",
                "uVar25": "result_24",
                "iVar26": "result_25",
                "uVar27": "result_26",
                "uVar28": "result_27",
                "uVar29": "result_28",
                "iVar30": "result_29",
                "uVar31": "result_30",
                "uVar32": "result_31"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to64bit_08003eb0",
            "code": "\nlonglong convertTo64bit_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to64bit_08003eb0",
                "param_1": "input",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int inputPtr,undefined data)\n\n{\n  *(short *)(inputPtr + 0x804) = *(short *)(inputPtr + 0x804) + 1;\n  *(undefined *)(inputPtr + (uint)*(ushort *)(inputPtr + 0x802)) = data;\n  *(ushort *)(inputPtr + 0x802) = *(short *)(inputPtr + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "inputPtr",
                "param_2": "data"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int value1,int value2,int value3)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,value1 == 0);\n  set_param_value_08001424(0x40011000,0x4000,value2 == 0);\n  set_param_value_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_parameter_in_memory_08003fc4",
            "code": "\nvoid storeParameterInMemory_08003fc4(undefined4 parameter)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = parameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_parameter_in_memory_08003fc4",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "update_memory_address_08003fd0",
            "code": "\nvoid updateMemoryAddress_08003fd0(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "update_memory_address_08003fd0",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_global_variable_08003fdc",
            "code": "\nvoid setGlobalVariable_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_global_variable_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_parameter_value_08003fe8",
            "code": "\nvoid setParameterValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_parameter_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_flags_08003ff4",
            "code": "\nvoid initializeFlags_08003ff4(void)\n\n{\n  updateBitwiseValueAndSetFlag(&DAT_200015f8,4);\n  updateBitwiseValueAndSetFlag(&DAT_20001540,8);\n  updateBitwiseValueAndSetFlag(&DAT_200014c8,8);\n  updateBitwiseValueAndSetFlag(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_flags_08003ff4",
                "update_bitwise_value_and_set_flag_08002538": "updateBitwiseValueAndSetFlag"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_process_data_08004028",
            "code": "\nvoid initialize_and_process_data_08004028(void)\n\n{\n  int iteration_counter;\n  \n  initialize_and_process_data_08004028();\n  initialize_flags();\n  iteration_counter = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_counter = iteration_counter + -1;\n  } while (iteration_counter != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_process_data_08004028",
                "iVar1": "iteration_counter",
                "initialize_and_process_data_0800458c": "initialize_and_process_data",
                "initialize_flags_08003ff4": "initialize_flags",
                "set_param_values_08003f3c": "set_parameter_values"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_data_0800403c",
            "code": "\nvoid process_data_0800403c(undefined4 arg1,undefined4 arg2,undefined data,int flag)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  result = FUNC_08001828(&DAT_20001504,arg1,arg2,1,buffer,1,200);\n  if (result != 0) {\n    process_data_0800403c_continuously_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (flag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_data_0800403c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "flag",
                "iVar1": "result",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_process_data_0800407c",
            "code": "\nundefined checkAndProcessData_0800407c(undefined4 flags,undefined4 param2,undefined4 data1,undefined4 data2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = validate_flags_08001938(&DAT_20001504,flags,param2,1,result,1,200);\n  if (iVar1 != 0) {\n    process_data_continuously_08004490(data1,data2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_process_data_0800407c",
                "param_1": "flags",
                "param_2": "param2",
                "param_3": "data1",
                "param_4": "data2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_if_flags_valid_080040b8",
            "code": "\nvoid process_data_if_flags_valid_080040b8(undefined4 flag_1,undefined4 flag_2,undefined4 flag_3,undefined4 flag_4,\n                 undefined4 data_param_1,undefined4 data_param_2)\n\n{\n  int validation_result;\n  \n  validation_result = validate_flags_08001938(&DAT_20001504,flag_1,flag_2,1,flag_3,flag_4,200,flag_4);\n  if (validation_result != 0) {\n    process_data_continuously_08004490(data_param_1,data_param_2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_if_flags_valid_080040b8",
                "param_1": "flag_1",
                "param_2": "flag_2",
                "param_3": "flag_3",
                "param_4": "flag_4",
                "param_5": "data_param_1",
                "param_6": "data_param_2",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_i2c_data_080040e8",
            "code": "\nvoid process_i2c_data_080040e8(undefined4 data_pointer,int base_address,int buffer_address,int buffer_length)\n\n{\n  undefined processed_data;\n  int index;\n  undefined *buffer_pointer;\n  int file_offset;\n  \n  buffer_pointer = (undefined *)(buffer_address + -1);\n  file_offset = buffer_length;\n  for (index = 0; index < buffer_length; index = index + 1) {\n    processed_data = check_and_process_data_0800407c(data_pointer,base_address + index & 0xffff,\"../Src/i2c.c\",0x4c,file_offset);\n    buffer_pointer = buffer_pointer + 1;\n    *buffer_pointer = processed_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_i2c_data_080040e8",
                "param_1": "data_pointer",
                "param_2": "base_address",
                "param_3": "buffer_address",
                "param_4": "buffer_length",
                "uVar1": "processed_data",
                "iVar2": "index",
                "puVar3": "buffer_pointer",
                "iVar4": "file_offset"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_data_0800411c",
            "code": "\nvoid processData_0800411c(void)\n\n{\n  undefined4 *ptr;\n  longlong var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  undefined4 var5;\n  undefined4 var6;\n  int var7;\n  uint var8;\n  uint var9;\n  uint var10;\n  uint var11;\n  undefined4 *ptr2;\n  undefined4 var12;\n  int var13;\n  int var14;\n  bool var15;\n  undefined8 var16;\n  \n  var7 = thunk_get_data_0800115c();\n  if (1 < (uint)(var7 - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_0800115c();\n    initialize_and_process_data_08002f28();\n  }\n  var7 = thunk_get_data_0800115c();\n  if (2 < (uint)(var7 - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_0800115c();\n    process_data_08004a84();\n  }\n  var7 = thunk_get_data_0800115c();\n  if (3 < (uint)(var7 - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_0800115c();\n    initialize_binary_data_processing_08004348();\n    initialize_data_08004384();\n    process_and_send_data_080043f0();\n    process_binary_data_08004410();\n    process_data_08004434();\n    copy_and_process_binary_data_080043bc();\n    copy_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    var14 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    var8 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)var14) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)var14) >> 0x20) << 9;\n    var9 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)var14 >> 7);\n    var10 = var9 + (uint)DAT_20000260 * 0x10000;\n    var3 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)var14) >> 8);\n    var7 = var8 + 2000;\n    var4 = var3 + (uint)DAT_2000025e * 0x8000;\n    var15 = (int)var8 < 0;\n    if (1999 < var7) {\n      var8 = 0;\n    }\n    var2 = var8;\n    if (var15 != SBORROW4(var7,2000)) {\n      var13 = var8 * var8 * 5;\n      var8 = var13 >> 2;\n      var2 = var13 >> 1;\n    }\n    var11 = var10 - var2;\n    var1 = (ulonglong)(var4 - var8) * (ulonglong)DAT_2000026c;\n    var13 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)var14 >> 0x28) +\n               (uint)CARRY4(var3,(uint)DAT_2000025e * 0x8000)) - ((int)var8 >> 0x1f)) -\n             (uint)(var4 < var8)) + (int)((ulonglong)var1 >> 0x20);\n    var3 = (uint)var1 >> 0x15 | var13 * 0x800;\n    var5 = convert_complement_to_unsigned_08000c44(var3 - var11 >> 0xf |\n                         (((var13 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)var14 >> 0x27) +\n                            (uint)CARRY4(var9,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)var2 >> 0x1f)) - (uint)(var10 < var2))) - (uint)(var3 < var11)\n                         ) * 0x20000);\n    var5 = calculate_floating_point_08000e54(var5,0x42c80000);\n    DAT_20000354 = var5;\n    var6 = convert_complement_to_unsigned_08000c44(var7);\n    DAT_20000358 = calculate_floating_point_08000e54(var6,0x42c80000);\n    calculate_floating_point_08000e54(var5,0x447d5000);\n    var16 = reverse_binary_operation_08000428();\n    var16 = perform_calculation_08005900((int)var16,(int)((ulonglong)var16 >> 0x20),0x60000000,0x3fc85b95);\n    var16 = calculate_product_08000168(0,0x3ff00000,(int)var16,(int)((ulonglong)var16 >> 0x20));\n    perform_calculation_080004d0((int)var16,(int)((ulonglong)var16 >> 0x20),0,0x40e5a540);\n    var5 = calculate_float_08000a30();\n    var6 = 0;\n    ptr2 = &DAT_20000300;\n    DAT_20000350 = var5;\n    do {\n      ptr = ptr2 + 1;\n      *ptr2 = *ptr;\n      var6 = calculate_float_08000adc(var6);\n      ptr2 = ptr;\n    } while (ptr != &DAT_2000034c);\n    DAT_2000034c = var5;\n    var5 = calculate_float_08000adc(var6,var5);\n    DAT_200002fc = calculate_floating_point_08000e54(var5,0x41a00000);\n    var7 = extract_significant_bits_08001078();\n    DAT_200014ab = var7 * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_0800115c();\n  }\n  var7 = thunk_get_data_0800115c();\n  if (((10 < (uint)(var7 - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = convert_data_to_uint_08003034();\n    DAT_20000275 = '\\x01';\n    process_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,var12);\n    DAT_20000278 = thunk_get_data_0800115c();\n  }\n  var7 = thunk_get_data_0800115c();\n  if (((10 < (uint)(var7 - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = convert_data_to_uint_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_data_0800411c",
                "puVar1": "ptr",
                "lVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "iVar8": "var7",
                "uVar9": "var8",
                "uVar10": "var9",
                "uVar11": "var10",
                "uVar12": "var11",
                "puVar13": "ptr2",
                "unaff_r4": "var12",
                "iVar14": "var13",
                "iVar15": "var14",
                "bVar16": "var15",
                "uVar17": "var16"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initializeSystem_08004194(void)\n\n{\n  initializeAndProcessData();\n  initializeAndCheckStatus();\n  initializeSensors();\n  initializeSensorData();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "initialize_and_process_data_08004028": "initializeAndProcessData",
                "initialize_and_check_status_08004c70": "initializeAndCheckStatus",
                "initialize_sensors_08002ea0": "initializeSensors",
                "initialize_sensor_data_08003298": "initializeSensorData"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_processing_080041ae",
            "code": "\nvoid continuous_processing_080041ae(void)\n\n{\n  convert_to_64bit(0);\n  initialize_system();\n  do {\n    increment_counter();\n    process_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_processing_080041ae",
                "convert_to64bit_08003eb0": "convert_to_64bit",
                "initialize_system_08004194": "initialize_system",
                "increment_counter_0800114c": "increment_counter",
                "process_data_0800411c": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_memory_080041c4",
            "code": "\nvoid initializeMemory_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  store_parameter_in_memory_08003fc4(0);\n  update_memory_address_08003fd0(0);\n  set_global_variable_08003fdc(0);\n  set_parameter_value_08003fe8(0,returnValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_memory_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "returnValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_update_values_0800426c",
            "code": "\n\n\nvoid calculate_and_update_values_0800426c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 difference1;\n  undefined4 float_calc1;\n  undefined4 difference2;\n  uint bits1;\n  uint bits2;\n  uint bits3;\n  uint bits4;\n  \n  difference1 = calculate_floating_point_difference_08000ad8();\n  float_calc1 = calculate_float_08000adc(input_param_1,input_param_2);\n  difference2 = calculate_floating_point_difference_08000ad8(difference1,input_param_3);\n  difference2 = calculate_float_08000adc(difference2,input_param_4);\n  calculate_floating_point_difference_08000ad8(difference2,0x447a0000);\n  bits1 = extract_significant_bits_08001078();\n  difference2 = calculate_floating_point_difference_08000ad8(float_calc1,input_param_3);\n  difference2 = calculate_floating_point_difference_08000ad8(difference2,input_param_4);\n  calculate_floating_point_difference_08000ad8(difference2,0x447a0000);\n  bits2 = extract_significant_bits_08001078();\n  difference1 = calculate_float_08000adc(difference1,input_param_3);\n  difference1 = calculate_floating_point_difference_08000ad8(difference1,input_param_4);\n  calculate_floating_point_difference_08000ad8(difference1,0x447a0000);\n  bits3 = extract_significant_bits_08001078();\n  difference1 = calculate_float_08000adc(input_param_3,float_calc1);\n  difference1 = calculate_float_08000adc(difference1,input_param_4);\n  calculate_floating_point_difference_08000ad8(difference1,0x447a0000);\n  bits4 = extract_significant_bits_08001078();\n  if (999 < (int)bits4) {\n    bits4 = 1000;\n  }\n  if (999 < (int)bits3) {\n    bits3 = 1000;\n  }\n  if (999 < (int)bits2) {\n    bits2 = 1000;\n  }\n  if (999 < (int)bits1) {\n    bits1 = 1000;\n  }\n  DAT_200002a0 = bits2 & ~((int)bits2 >> 0x1f);\n  DAT_200002a4 = bits1 & ~((int)bits1 >> 0x1f);\n  DAT_2000029c = bits3 & ~((int)bits3 >> 0x1f);\n  DAT_20000298 = bits4 & ~((int)bits4 >> 0x1f);\n  store_parameter_in_memory_08003fc4();\n  update_memory_address_08003fd0(DAT_2000029c);\n  set_global_variable_08003fdc(DAT_200002a0);\n  set_parameter_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_update_values_0800426c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "difference1",
                "uVar2": "float_calc1",
                "uVar3": "difference2",
                "uVar4": "bits1",
                "uVar5": "bits2",
                "uVar6": "bits3",
                "uVar7": "bits4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_binary_data_08004300",
            "code": "\nvoid process_binary_data_08004300(uint input_key,byte *input_data,uint data_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  process_binary_data_08004300_08004c8c(&DAT_0800732e);\n  process_binary_data_08004300_08004c18(data_length & 0xff);\n  result = data_length & 0xff ^ input_key;\n  process_binary_data_08004300_08004c18(input_key);\n  for (current_byte = input_data; (int)current_byte - (int)input_data < (int)data_length; current_byte = current_byte + 1) {\n    process_binary_data_08004300_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  process_binary_data_08004300_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_binary_data_08004300",
                "param_1": "input_key",
                "param_2": "input_data",
                "param_3": "data_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_binary_data_processing_08004348",
            "code": "\n\n\nvoid initializeBinaryDataProcessing_08004348(undefined4 param1,uint dataLength,undefined4 param3)\n\n{\n  undefined4 binaryData;\n  uint maskedDataLength;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  binaryData = 0x40003e9;\n  maskedDataLength = dataLength & 0xff000000;\n  param3Copy = param3;\n  process_binary_data_08004300(100,&binaryData,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_binary_data_processing_08004348",
                "param_1": "param1",
                "param_2": "dataLength",
                "param_3": "param3",
                "local_10": "binaryData",
                "local_c": "maskedDataLength",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 arg1,undefined4 arg2,undefined4 arg3,uint data)\n\n{\n  undefined4 variable1;\n  undefined4 variable2;\n  uint maskedData;\n  \n  _DAT_200013bd = 0x2a0007;\n  variable1 = _DAT_200013b9;\n  variable2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedData = data & 0xff000000;\n  process_binary_data_08004300(0x65,&variable1,0xb,0,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "data",
                "local_14": "variable1",
                "uStack_10": "variable2",
                "local_c": "maskedData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_binary_data_080043bc",
            "code": "\nvoid copyAndProcessBinaryData_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *ptrToCopy;\n  undefined4 *ptrToData;\n  undefined4 copiedData [2];\n  undefined2 constantData [6];\n  \n  ptrToData = (undefined4 *)&DAT_2000142a;\n  ptrToCopy = copiedData;\n  do {\n    value1 = *ptrToData;\n    value2 = ptrToData[1];\n    ptrToData = ptrToData + 2;\n    *ptrToCopy = value1;\n    ptrToCopy[1] = value2;\n    ptrToCopy = ptrToCopy + 2;\n  } while (ptrToData != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrToCopy = DAT_2000143a;\n  process_binary_data_08004300(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_binary_data_080043bc",
                "puVar4": "ptrToData",
                "puVar3": "ptrToCopy",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_24": "copiedData",
                "local_1c": "constantData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_and_send_data_080043f0",
            "code": "\n\n\nvoid process_and_send_data_080043f0(undefined4 data_size,undefined4 data_address,undefined4 param_3)\n\n{\n  undefined4 data_value;\n  undefined4 data_ptr;\n  undefined4 param_array [2];\n  \n  data_value = _DAT_200013dd;\n  data_ptr = _DAT_200013e1;\n  param_array[0] = param_3;\n  process_binary_data_08004300(0x68,&data_value,8,param_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_and_send_data_080043f0",
                "param_1": "data_size",
                "param_2": "data_address",
                "local_10": "data_value",
                "uStack_c": "data_ptr",
                "auStack_8": "param_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_binary_data_08004410",
            "code": "\nvoid processBinaryData_08004410(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 data;\n  undefined4 concatenatedData;\n  undefined4 inputData;\n  \n  data = DAT_20001395;\n  concatenatedData = CONCAT22((short)((uint)inputParam2 >> 0x10),DAT_20001399);\n  inputData = inputParam3;\n  processBinaryData_08004410Internal(0x6c,&data,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_binary_data_08004410",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_10": "data",
                "local_c": "concatenatedData",
                "uStack_8": "inputData",
                "process_binary_data_08004300": "processBinaryDataInternal"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_data_08004434",
            "code": "\nvoid processData_08004434(undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 stackData;\n  \n  constant1 = DAT_200014ab;\n  constant2 = CONCAT22((short)((uint)data2 >> 0x10),DAT_200014af);\n  stackData = data3;\n  process_binary_data_08004300(0x6d,&constant1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_data_08004434",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "local_10": "constant1",
                "local_c": "constant2",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_data_08004458",
            "code": "\nvoid copyAndProcessData_08004458(void)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 tempVar;\n  undefined4 *destPtrTemp;\n  undefined4 *srcPtrTemp;\n  undefined4 destination [3];\n  undefined2 source [10];\n  \n  destPtr = destination;\n  srcPtr = &DAT_2000139b;\n  do {\n    srcPtrTemp = srcPtr;\n    destPtrTemp = destPtr;\n    tempVar = srcPtrTemp[1];\n    *destPtrTemp = *srcPtrTemp;\n    destPtrTemp[1] = tempVar;\n    destPtr = destPtrTemp + 2;\n    srcPtr = srcPtrTemp + 2;\n  } while (srcPtrTemp + 2 != (undefined4 *)0x200013b3);\n  destPtrTemp[2] = uRam200013b3;\n  *(undefined2 *)(destPtrTemp + 3) = *(undefined2 *)(srcPtrTemp + 3);\n  process_binary_data_08004300(0x70,destination,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_data_08004458",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "uVar3": "tempVar",
                "puVar4": "destPtrTemp",
                "puVar5": "srcPtrTemp",
                "local_30": "destination",
                "local_24": "source"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_data_continuously_08004490",
            "code": "\nvoid process_data_continuously_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  setParameterValue(0x40011000,0x4000,1);\n  setParameterValue(0x40011000,0x8000,0);\n  setParameterValue(0x40011000,0x2000,0);\n  do {\n    xorAndUpdateValue(0x40011000,0x4000);\n    xorAndUpdateValue(0x40011000,0x8000);\n    xorAndUpdateValue(0x40011000,0x2000);\n    processBinaryData(\"Error with \");\n    processBinaryData(error_message);\n    processBinaryData(\" at line: \");\n    initializeAndProcessData(line_number);\n    processBinaryData(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_data_continuously_08004490",
                "param_1": "error_message",
                "param_2": "line_number",
                "set_param_value_08001424": "setParameterValue",
                "xor_and_update_value_0800142e": "xorAndUpdateValue",
                "process_binary_data_08004c8c": "processBinaryData",
                "initialize_and_process_data_08004cac": "initializeAndProcessData",
                "process_binary_data_08004c18": "processBinaryData"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "process_data_08004514",
            "code": "\nvoid processData_08004514(void)\n\n{\n  int conditionResult;\n  uint dataValue;\n  undefined4 constantValue;\n  int refreshRate;\n  undefined4 variable1;\n  int variable2;\n  int variable3;\n  undefined4 variable4;\n  int variable5;\n  undefined4 array [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  flag1 = 1;\n  flag2 = 0x10;\n  refreshRate = 2;\n  flag4 = 0;\n  array[0] = 2;\n  flag3 = 2;\n  flag5 = 0x380000;\n  conditionResult = check_conditions_08001b58(array);\n  if (conditionResult == 0) goto LAB_08004540;\n  constantValue = 0x3c;\n  while( true ) {\n    conditionResult = process_data_continuously_08004490(\"../Src/peripherals.c\",constantValue);\nLAB_08004540:\n    variable1 = 0xf;\n    variable4 = 0x400;\n    variable2 = refreshRate;\n    variable3 = conditionResult;\n    variable5 = conditionResult;\n    refreshRate = check_refresh_rate_0800209c(&variable1,refreshRate);\n    if (refreshRate == 0) break;\n    constantValue = 0x49;\n  }\n  dataValue = get_data_value_08002214();\n  check_param_bounds_08001214(dataValue / 1000);\n  set_flag_08001240(4);\n  update_memory_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "process_data_08004514",
                "iVar1": "conditionResult",
                "uVar2": "dataValue",
                "uVar3": "constantValue",
                "iVar4": "refreshRate",
                "local_44": "variable1",
                "local_40": "variable2",
                "local_3c": "variable3",
                "local_38": "variable4",
                "local_34": "variable5",
                "local_30": "array",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_process_data_0800458c",
            "code": "\n\n\nvoid initialize_and_process_data_0800458c(void)\n\n{\n  int result;\n  undefined4 counter;\n  int value;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int var9;\n  int var10;\n  int var11;\n  int var12;\n  int var13;\n  undefined4 var14;\n  int var15;\n  \n  initialize_system_08001128();\n  process_data_08004514();\n  value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value_08001424(0x40010800,0x20,0);\n  var9 = 0xe000;\n  var10 = 1;\n  var12 = 2;\n  update_data_08001264(0x40011000,&var9);\n  var9 = 0x20;\n  var10 = 1;\n  var12 = 2;\n  update_data_08001264(0x40010800,&var9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = update_data_08001754();\n  if (result == 0) goto LAB_0800463a;\n  counter = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_data_continuously_08004490(\"../Src/peripherals.c\",counter);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initialize_memory_flags_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  counter = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = initialize_settings_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                counter = 0x88;\n                              }\n                              var1 = result;\n                              var2 = result;\n                              result = update_permissions_080025a4(&DAT_200015bc,&var1);\n                              if (result == 0) break;\n                              counter = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = result;\n                            var5 = result;\n                            var6 = result;\n                            var7 = result;\n                            var8 = result;\n                            result = update_param_flags_0800245c(&DAT_200015bc,&var3,0xc);\n                            if (result == 0) break;\n                            counter = 0x9a;\n                          }\n                          var14 = 0x2000;\n                          var9 = result;\n                          var10 = result;\n                          var11 = result;\n                          var12 = result;\n                          var13 = result;\n                          var15 = result;\n                          result = set_flag_and_calculate_checksum_08002564(&DAT_200015bc,&var9);\n                          if (result == 0) break;\n                          counter = 0xa6;\n                        }\n                        update_data_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = initialize_settings_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        counter = 0xc3;\n                      }\n                      var3 = result;\n                      var4 = result;\n                      result = update_permissions_080025a4(&DAT_200015f8,&var3);\n                      if (result == 0) break;\n                      counter = 0xca;\n                    }\n                    var9 = 0x60;\n                    var10 = result;\n                    var11 = result;\n                    var13 = result;\n                    result = update_param_flags_0800245c(&DAT_200015f8,&var9,4);\n                    if (result == 0) break;\n                    counter = 0xd3;\n                  }\n                  update_data_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = initialize_settings_080023d0();\n                  if (result == 0) break;\n                  counter = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                result = update_permissions_080025a4(&DAT_20001540,&var3);\n                if (result == 0) break;\n                counter = 0xf7;\n              }\n              var9 = 0x60;\n              var10 = result;\n              var11 = result;\n              var13 = result;\n              result = update_param_flags_0800245c(&DAT_20001540,&var9,8);\n              if (result == 0) break;\n              counter = 0x100;\n            }\n            value = update_param_flags_0800245c(&DAT_20001540,&var9,0xc);\n            if (value == 0) break;\n            counter = 0x105;\n          }\n          update_data_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = value;\n          DAT_200014d8 = value;\n          result = initialize_settings_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          counter = 0x122;\n        }\n        var3 = result;\n        var4 = result;\n        result = update_permissions_080025a4(&DAT_200014c8,&var3);\n        if (result == 0) break;\n        counter = 0x129;\n      }\n      var9 = 0x60;\n      var10 = result;\n      var11 = result;\n      var13 = result;\n      result = update_param_flags_0800245c(&DAT_200014c8,&var9,8);\n      if (result == 0) break;\n      counter = 0x132;\n    }\n    result = update_param_flags_0800245c(&DAT_200014c8,&var9,0xc);\n    if (result == 0) break;\n    counter = 0x137;\n  }\n  update_data_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_process_data_0800458c",
                "iVar1": "result",
                "uVar2": "counter",
                "iVar3": "value",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "var9",
                "local_30": "var10",
                "local_2c": "var11",
                "local_28": "var12",
                "local_24": "var13",
                "local_20": "var14",
                "local_1c": "var15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculateValues_0800483c(int *values)\n\n{\n  undefined4 floatResult1;\n  undefined4 floatResult2;\n  int intValue1;\n  int intValue2;\n  int intValue3;\n  \n  intValue2 = values[0xc];\n  floatResult1 = calculate_float_08000adc(values[7],values[9]);\n  intValue2 = calculate_floating_point_difference_08000ad8(floatResult1,intValue2);\n  values[10] = intValue2;\n  if (*values == 3) {\n    intValue2 = check_if_concatenation_is_empty_08001064(values[10],0);\n    if (intValue2 == 0) {\n      intValue2 = is_string_empty_08001028(values[10],0xc3340000);\n    }\n    else {\n      intValue2 = check_if_concatenation_is_empty_08001064(values[10],0x43340000);\n    }\n    if (intValue2 != 0) {\n      intValue3 = values[10];\n      floatResult1 = calculate_floating_point_08000cec(values[10],0x43b40000);\n      intValue2 = check_if_concatenation_is_empty_08001064(values[10],0);\n      intValue1 = values[10];\n      if (intValue2 == 0) {\n        intValue1 = intValue1 + -0x80000000;\n      }\n      floatResult1 = calculate_floating_point_08000e54(floatResult1,intValue1);\n      intValue2 = calculate_floating_point_difference_08000ad8(intValue3,floatResult1);\n      values[10] = intValue2;\n    }\n  }\n  intValue3 = values[2];\n  intValue1 = values[3];\n  intValue2 = calculate_floating_point_08000cec(values[1],values[10]);\n  values[0xe] = intValue2;\n  intValue2 = calculate_float_08000adc(values[10],values[0xf]);\n  values[0xf] = intValue2;\n  intValue2 = is_string_empty_08001028(values[0xf],0xc3fa0000);\n  if (intValue2 == 0) {\n    intValue2 = check_if_concatenation_is_empty_08001064(values[0xf],0x43fa0000);\n    if (intValue2 == 0) {\n      intValue2 = values[0xf];\n    }\n    else {\n      intValue2 = 0x43fa0000;\n    }\n  }\n  else {\n    intValue2 = -0x3c060000;\n  }\n  values[0xf] = intValue2;\n  intValue2 = calculate_floating_point_difference_08000ad8(values[0xc],values[0xd]);\n  values[0x10] = intValue2;\n  intValue2 = values[0xe];\n  floatResult1 = calculate_floating_point_08000cec(intValue3,values[0xf]);\n  floatResult1 = calculate_float_08000adc(floatResult1,intValue2);\n  floatResult2 = calculate_floating_point_08000cec(intValue1,values[0x10]);\n  intValue2 = calculate_floating_point_difference_08000ad8(floatResult1,floatResult2);\n  values[0x12] = intValue2;\n  floatResult1 = convert_complement_to_unsigned_08000c44(values[0x13]);\n  intValue2 = is_string_empty_08001028(values[0x12],0xc3fa0000);\n  if (intValue2 == 0) {\n    intValue2 = check_if_concatenation_is_empty_08001064(values[0x12],0x43fa0000);\n    if (intValue2 == 0) {\n      intValue2 = values[0x12];\n    }\n    else {\n      intValue2 = 0x43fa0000;\n    }\n  }\n  else {\n    intValue2 = -0x3c060000;\n  }\n  intValue2 = calculate_floating_point_08000cec(intValue2,floatResult1);\n  values[0x12] = intValue2;\n  values[0xd] = values[0xc];\n  values[0xb] = values[10];\n  values[0x15] = values[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "values",
                "uVar1": "floatResult1",
                "uVar2": "floatResult2",
                "iVar3": "intValue1",
                "iVar4": "intValue2",
                "iVar5": "intValue3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_data_values_08004a30",
            "code": "\nvoid updateDataValues_08004a30(void)\n\n{\n  undefined4 dataValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      dataValue = getDataValue();\n      DAT_20000068 = calculateFloatingPoint(dataValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      dataValue = getDataValue();\n      DAT_2000007c = calculateFloatingPoint(dataValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "uVar1": "dataValue",
                "get_dat_value_08003068": "getDataValue",
                "calculate_floating_point_08000cec": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\nvoid process_data_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculateFloatingPointDifference();\n  DAT_20000134 = calculateAndStore();\n  DAT_20000190 = processData();\n  updateDataValues();\n  iVar1 = checkConcatenationIsEmpty(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = isStringEmpty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = checkConcatenationIsEmpty(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = checkConcatenationIsEmpty(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = isStringEmpty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = checkConcatenationIsEmpty(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      setParamValues(1,1);\n      calculateValues(&DAT_200000a8);\n      calculateValues(&DAT_20000104);\n      calculateValues(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculateValues(&DAT_2000004c);\n        calculateFloat(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeMemory();\n      }\n      else {\n        calculateAndUpdateValues(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculateFloatingPoint(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = calculateValue();\n      calculateFloatingPoint(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = calculateValue();\n      calculateFloatingPoint(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = calculateValue();\n      calculateFloatingPoint(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = calculateValue();\n      calculateFloatingPoint(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = calculateValue();\n      return;\n    }\n  }\n  initializeMemory();\n  setParamValues(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "calculate_floating_point_difference_08002ec0": "calculateFloatingPointDifference",
                "calculate_and_store_08002ed4": "calculateAndStore",
                "process_data_08002ee8": "processData",
                "update_data_values_08004a30": "updateDataValues",
                "check_if_concatenation_is_empty_08001064": "checkConcatenationIsEmpty",
                "is_string_empty_08001028": "isStringEmpty",
                "set_param_values_08003f3c": "setParamValues",
                "calculate_values_0800483c": "calculateValues",
                "calculate_float_08000adc": "calculateFloat",
                "initialize_memory_080041c4": "initializeMemory",
                "calculate_and_update_values_0800426c": "calculateAndUpdateValues",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_value_080010c4": "calculateValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_binary_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processBinaryData_08004c18(undefined input)\n\n{\n  int *pointerVar1;\n  int intValue2;\n  int intValue3;\n  ushort *pointerVar4;\n  \n  DAT_20001636._0_1_ = input;\n  pointerVar4 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      intValue2 = get_data_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        intValue3 = get_data_0800115c();\n      } while ((uint)(intValue3 - intValue2) < 6);\nLAB_0800281c:\n      pointerVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointerVar1[3] = pointerVar1[3] & 0xffffffdf;\n      pointerVar1[3] = pointerVar1[3] & 0xfffffeff;\n      pointerVar1[5] = pointerVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      intValue2 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        intValue3 = get_data_0800115c();\n        if (5 < (uint)(intValue3 - intValue2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointerVar4 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointerVar4 = pointerVar4 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      intValue2 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        intValue3 = get_data_0800115c();\n        if (5 < (uint)(intValue3 - intValue2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointerVar4;\n    }\n    pointerVar4 = (ushort *)((int)pointerVar4 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_binary_data_08004c18",
                "param_1": "input",
                "piVar1": "pointerVar1",
                "iVar2": "intValue2",
                "iVar3": "intValue3",
                "puVar4": "pointerVar4"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_increment_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndIncrement_08004c30(int *inputArray)\n\n{\n  int tempVar;\n  \n  if (*inputArray != 0x40013800) {\n    return inputArray;\n  }\n  increment_and_store_08003ec8(&DAT_20000364,DAT_20001634);\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_increment_08004c30",
                "param_1": "inputArray",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_status_08004c70(void)\n\n{\n  int tempVar;\n  \n  initialize_data();\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_status_08004c70",
                "iVar1": "tempVar",
                "initialize_data_08004c64": "initialize_data"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_binary_data_08004c8c",
            "code": "\nvoid processBinaryData_08004c8c(undefined *dataPointer)\n\n{\n  uint stringLength;\n  undefined *currentPointer;\n  \n  currentPointer = dataPointer;\n  while( true ) {\n    stringLength = find_string_length_08000150(dataPointer);\n    if (stringLength <= (uint)((int)currentPointer - (int)dataPointer)) break;\n    process_binary_data_08004c18(*currentPointer);\n    currentPointer = currentPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_binary_data_08004c8c",
                "param_1": "dataPointer",
                "uVar1": "stringLength",
                "puVar2": "currentPointer"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_data_08004cac",
            "code": "\nvoid initializeAndProcessData_08004cac(undefined4 inputData)\n\n{\n  initializeData(&DAT_20001636,&DAT_0800735e,inputData);\n  processBinaryData(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_data_08004cac",
                "param_1": "inputData",
                "initialize_data_08004ffc": "initializeData",
                "process_binary_data_08004c8c": "processBinaryData"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_system_08004ccc",
            "code": "\n\n\nvoid initializeSystem_08004ccc(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configureRegister(3,value2,_DAT_40021018,1,value1,1,value3);\n  updateMemory(0xfffffff4,0);\n  updateMemory(0xfffffff5,0);\n  updateMemory(0xfffffff6,0);\n  updateMemory(0xfffffffb,0);\n  updateMemory(0xfffffffc,0);\n  updateMemory(0xfffffffe,0);\n  updateMemory(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_system_08004ccc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "configure_register_08001170": "configureRegister",
                "update_memory_08001194": "updateMemory"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_data_if_required_08004d48",
            "code": "\n\n\nvoid updateDataIfRequired_08004d48(int *dataPointer,undefined4 flag)\n\n{\n  undefined4 newValue1;\n  undefined4 newValue2;\n  \n  if (*dataPointer == 0x40005400) {\n    newValue1 = 0xc0;\n    newValue2 = 0x12;\n    updateData(0x40010c00,&newValue1,0x40005400,3,dataPointer,flag);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_data_if_required_08004d48",
                "param_1": "dataPointer",
                "param_2": "flag",
                "local_18": "newValue1",
                "local_14": "newValue2",
                "update_data_08001264": "updateData"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_settings_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateSettings_08004d8c(int *settings)\n\n{\n  int configValue;\n  \n  configValue = *settings;\n  if (configValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (configValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (configValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (configValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_settings_08004d8c",
                "param_1": "settings",
                "iVar1": "configValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_data_08004e14",
            "code": "\nvoid updateData_08004e14(int *input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 data;\n  int value;\n  undefined4 option1;\n  undefined4 option2;\n  undefined4 option3;\n  undefined4 constant;\n  \n  value = *input;\n  if (value == 0x40012c00) {\n    option1 = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        option1 = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        option1 = 0x300;\n      }\n      data = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    option1 = 2;\n  }\n  data = 0x40010800;\nLAB_08004e2e:\n  constant = 2;\n  option2 = 2;\n  option3 = param3;\n  update_data_08001264(data,&option1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_data_08004e14",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "data",
                "iVar2": "value",
                "local_18": "option1",
                "local_14": "option2",
                "uStack_10": "option3",
                "local_c": "constant"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_memory_flags_08004e7c",
            "code": "\n\n\nvoid updateMemoryFlags_08004e7c(int *dataPointer)\n\n{\n  undefined4 updateSize;\n  undefined4 updateFlag;\n  undefined4 unusedFlag;\n  undefined4 unusedFlag2;\n  \n  if (*dataPointer == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    updateSize = 0x200;\n    updateFlag = 2;\n    unusedFlag2 = 3;\n    update_data_08001264(0x40010800,&updateSize);\n    updateSize = 0x400;\n    updateFlag = 0;\n    unusedFlag = 0;\n    update_data_08001264(0x40010800,&updateSize);\n    update_memory_08001194(0x25,0,0);\n    set_bit_in_memory_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_memory_flags_08004e7c",
                "param_1": "dataPointer",
                "local_18": "updateSize",
                "local_14": "updateFlag",
                "local_10": "unusedFlag",
                "local_c": "unusedFlag2"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_registers_08004f10",
            "code": "\n\n\nvoid initializeRegisters_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_value_thunk_0800115c",
            "code": "\nundefined4 get_data_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08004f10();\n  execute_all_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  continuous_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_all_functions_08004fb4",
            "code": "\nvoid executeAllFunctions_08004fb4(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08007440)[counter])();\n  }\n  FUNC_080072d4();\n  for (counter = 0; counter != 1; counter = counter + 1) {\n    (*(code *)(&DAT_08007440)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_all_functions_08004fb4",
                "iVar1": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initializeData_08004ffc(undefined *dataPtr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *ptrArray [2];\n  undefined4 maxValue1;\n  undefined2 size;\n  undefined2 maxValue2;\n  undefined *currentPtr;\n  undefined4 maxValue3;\n  undefined4 unknown1;\n  undefined4 unknown2;\n  undefined4 unknown3;\n  \n  size = 0x208;\n  maxValue1 = 0x7fffffff;\n  maxValue3 = 0x7fffffff;\n  maxValue2 = 0xffff;\n  ptrArray[0] = dataPtr;\n  currentPtr = dataPtr;\n  unknown1 = value1;\n  unknown2 = value2;\n  unknown3 = value3;\n  parse_and_update_data_080050fc(DAT_200001c0,ptrArray,value1);\n  *ptrArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "ptrArray",
                "local_70": "maxValue1",
                "local_6c": "size",
                "local_6a": "maxValue2",
                "local_68": "currentPtr",
                "local_64": "maxValue3",
                "uStack_c": "unknown1",
                "uStack_8": "unknown2",
                "uStack_4": "unknown3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_update_data_08005044",
            "code": "\nundefined4 copyAndUpdateData_08005044(undefined4 *outputPointer,int *dataPointer,undefined4 inputData,uint inputLength)\n\n{\n  int result;\n  uint updatedLength;\n  uint currentLength;\n  int initialOffset;\n  \n  currentLength = dataPointer[2];\n  if ((currentLength <= inputLength) && ((*(ushort *)(dataPointer + 3) & 0x480) != 0)) {\n    initialOffset = *dataPointer - dataPointer[4];\n    currentLength = (uint)(dataPointer[5] * 3) / 2;\n    updatedLength = inputLength + 1 + initialOffset;\n    if (currentLength < updatedLength) {\n      currentLength = updatedLength;\n    }\n    if ((int)((uint)*(ushort *)(dataPointer + 3) << 0x15) < 0) {\n      result = allocate_and_initialize_memory_08005714(outputPointer,currentLength);\n      if (result == 0) {\nLAB_0800508a:\n        *outputPointer = 0xc;\n        *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_array_08005630(result,dataPointer[4],initialOffset);\n      *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = allocate_and_copy_array_080057d0(outputPointer,dataPointer[4],currentLength);\n      if (result == 0) {\n        update_pointer_0800567c(outputPointer,dataPointer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    dataPointer[4] = result;\n    *dataPointer = result + initialOffset;\n    dataPointer[5] = currentLength;\n    dataPointer[2] = currentLength - initialOffset;\n    currentLength = inputLength;\n  }\n  if (inputLength <= currentLength) {\n    currentLength = inputLength;\n  }\n  copy_memory_08005646(*dataPointer,inputData,currentLength);\n  dataPointer[2] = dataPointer[2] - currentLength;\n  *dataPointer = currentLength + *dataPointer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_update_data_08005044",
                "param_1": "outputPointer",
                "param_2": "dataPointer",
                "param_3": "inputData",
                "param_4": "inputLength",
                "iVar1": "result",
                "uVar2": "updatedLength",
                "uVar3": "currentLength",
                "iVar4": "initialOffset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_and_update_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parse_and_update_data_080050fc(undefined4 *error_code,int *data,byte *input,int *memory)\n\n{\n  int result;\n  int copy_result;\n  int *local_ptr;\n  bool is_number;\n  byte *input_ptr;\n  byte *current_ptr;\n  int converted_value;\n  int *local_data;\n  uint flags;\n  int decimal_value;\n  undefined4 unused;\n  int integer_value;\n  int total_bytes;\n  byte current_char;\n  undefined const_0x20;\n  undefined const_0x30;\n  undefined value_type;\n  undefined4 unused_2;\n  \n  local_data = memory;\n  if (((int)((uint)*(ushort *)(data + 3) << 0x18) < 0) && (data[4] == 0)) {\n    result = allocate_and_initialize_memory_08005714(error_code,0x40);\n    *data = result;\n    data[4] = result;\n    if (result == 0) {\n      *error_code = 0xc;\n      return -1;\n    }\n    data[5] = 0x40;\n  }\n  total_bytes = 0;\n  const_0x20 = 0x20;\n  const_0x30 = 0x30;\n  input_ptr = input;\nLAB_08005146:\n  current_ptr = input_ptr;\n  if (*current_ptr != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  input_ptr = current_ptr + 1;\n  if (*current_ptr != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)current_ptr - (int)input;\n  if (result != 0) {\n    copy_result = copy_and_update_data_08005044(error_code,data,input,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_bytes;\n    }\n    total_bytes = total_bytes + result;\n  }\n  if (*current_ptr == 0) goto LAB_080052ac;\n  flags = 0;\n  integer_value = 0;\n  decimal_value = -1;\n  unused = 0;\n  value_type = 0;\n  unused_2 = 0;\n  input_ptr = current_ptr + 1;\n  while( true ) {\n    result = find_first_occurrence_08005614(&DAT_08007379,*input_ptr);\n    input = input_ptr + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    input_ptr = input;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    value_type = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    value_type = 0x2b;\n  }\n  if (*input_ptr == 0x2a) {\n    local_ptr = local_data + 1;\n    result = *local_data;\n    local_data = local_ptr;\n    if (result < 0) {\n      integer_value = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_number = false;\n    result = integer_value;\n    input = input_ptr;\n    while( true ) {\n      if (9 < *input - 0x30) break;\n      result = result * 10 + (*input - 0x30);\n      is_number = true;\n      input = input + 1;\n    }\n    if (!is_number) goto LAB_080051fc;\n  }\n  integer_value = result;\nLAB_080051fc:\n  if (*input == 0x2e) {\n    if (input[1] == 0x2a) {\n      input = input + 2;\n      local_ptr = local_data + 1;\n      decimal_value = *local_data;\n      local_data = local_ptr;\n      if (decimal_value < 0) {\n        decimal_value = -1;\n      }\n    }\n    else {\n      is_number = false;\n      result = 0;\n      decimal_value = 0;\n      while( true ) {\n        input = input + 1;\n        if (9 < *input - 0x30) break;\n        result = result * 10 + (*input - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        decimal_value = result;\n      }\n    }\n  }\n  result = find_first_occurrence_08005614(&DAT_0800737f,*input,3);\n  if (result != 0) {\n    input = input + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  current_char = *input;\n  input = input + 1;\n  result = find_first_occurrence_08005614(\"efgEFG\",current_char,6);\n  if (result == 0) {\n    converted_value = convert_value_080053d4(error_code,&flags,data,0x8005045,&local_data);\n    if (converted_value == -1) goto LAB_080052ac;\n  }\n  else {\n    local_data = (int *)(((int)local_data + 7U & 0xfffffff8) + 8);\n  }\n  total_bytes = total_bytes + converted_value;\n  input_ptr = input;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_and_update_data_080050fc",
                "param_1": "error_code",
                "param_2": "data",
                "param_3": "input",
                "param_4": "memory",
                "iVar1": "result",
                "iVar2": "copy_result",
                "piVar3": "local_ptr",
                "bVar4": "is_number",
                "pbVar5": "input_ptr",
                "pbVar6": "current_ptr",
                "unaff_r9": "converted_value",
                "local_8c": "local_data",
                "local_88": "flags",
                "local_84": "decimal_value",
                "local_80": "unused",
                "local_7c": "integer_value",
                "local_74": "total_bytes",
                "local_70": "current_char",
                "local_6f": "const_0x20",
                "local_6e": "const_0x30",
                "local_45": "value_type",
                "local_30": "unused_2"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "compute_data_size_080052e4",
            "code": "\nundefined4\ncomputeDataSize_080052e4(undefined4 input,uint *data,uint *outputSize,undefined4 param,code *callback)\n\n{\n  int loopIndex1;\n  int callbackResult;\n  uint maxSize;\n  uint tempSize;\n  bool isFlagSet;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (loopIndex1 = 0; loopIndex1 < (int)(data[3] - *outputSize); loopIndex1 = loopIndex1 + 1) {\n      callbackResult = (*callback)(input,param,(int)data + 0x19,1);\n      if (callbackResult == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  tempSize = maxSize;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    tempSize = maxSize + 2;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  loopIndex1 = (*callback)(input,param,(int)data + 0x43,tempSize);\n  if (loopIndex1 != -1) {\n    maxSize = data[3];\n    isFlagSet = (*data & 6) != 4;\n    if (isFlagSet) {\n      maxSize = 0;\n    }\n    tempSize = 0;\n    if (!isFlagSet) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!isFlagSet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxSize == tempSize) {\n        return 0;\n      }\n      loopIndex1 = (*callback)(input,param,(int)data + 0x1a,1);\n      if (loopIndex1 == -1) break;\n      tempSize = tempSize + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "compute_data_size_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "loopIndex1",
                "iVar2": "callbackResult",
                "uVar3": "maxSize",
                "uVar4": "tempSize",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "convert_value_080053d4",
            "code": "\nuint convertValue_080053d4(undefined4 value_type,uint *value,undefined4 param_3,code *callback,uint **param_array)\n\n{\n  byte byte_value;\n  int index;\n  uint *param_ptr;\n  int result;\n  char *char_ptr;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint current_value;\n  uint current_param;\n  char *current_char;\n  char *start_char;\n  uint size_info [2];\n  \n  byte_value = *(byte *)(value + 6);\n  start_char = (char *)((int)value + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800558e;\n          if (byte_value != 0x58) goto LAB_08005404;\n          *(undefined *)((int)value + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *value;\n          param_ptr = *param_array;\n          *param_array = param_ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            current_value = (uint)*(ushort *)param_ptr;\n          }\n          else {\n            current_value = *param_ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *value = base | 0x20;\n          }\n          if (current_value == 0) {\n            *value = *value & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)value + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08005404;\n          current_value = *value;\n          param_ptr = *param_array;\n          if ((current_value & 0x80) == 0) {\n            *param_array = param_ptr + 1;\n            if ((current_value & 0x40) == 0) goto LAB_08005424;\n            current_value = (uint)(short)*(ushort *)param_ptr;\n          }\n          else {\n            *param_array = param_ptr + 1;\nLAB_08005424:\n            current_value = *param_ptr;\n          }\n          if ((int)current_value < 0) {\n            current_value = -current_value;\n            *(undefined *)((int)value + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        current_param = value[1];\n        value[2] = current_param;\n        current_char = start_char;\n        if ((int)current_param < 0) {\n          if (current_value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)value + 0x42) = *char_ptr;\n          current_char = (char *)((int)value + 0x42);\n        }\n        else {\n          *value = *value & 0xfffffffb;\n          if (current_value == 0) {\n            if (current_param != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              current_param = current_value / base;\n              current_char = current_char + -1;\n              *current_char = char_ptr[current_value - base * current_param];\n              current_value = current_param;\n            } while (current_param != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*value << 0x1f) < 0)) && ((int)value[1] <= (int)value[4]))\n        {\n          current_char[-1] = '0';\n          current_char = current_char + -1;\n        }\n        value[4] = (int)start_char - (int)current_char;\n        start_char = current_char;\n        goto LAB_080054fa;\n      }\n      param_ptr = *param_array;\n      *param_array = param_ptr + 1;\n      *(char *)((int)value + 0x42) = (char)*param_ptr;\nLAB_08005464:\n      start_char = (char *)((int)value + 0x42);\n      current_value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800548a:\n            current_value = *value;\n            param_ptr = *param_array;\n            if ((current_value & 0x80) == 0) {\n              *param_array = param_ptr + 1;\n              if ((current_value & 0x40) == 0) goto LAB_08005498;\n              current_value = (uint)*(ushort *)param_ptr;\n            }\n            else {\n              *param_array = param_ptr + 1;\nLAB_08005498:\n              current_value = *param_ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_value == 0x70) {\n            *value = *value | 0x20;\nLAB_0800544a:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)value + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800548a;\n          if (byte_value == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)value + 0x42) = byte_value;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*param_array;\n      *param_array = (uint *)(ppcVar8 + 1);\n      start_char = *ppcVar8;\n      index = find_first_occurrence_08005614(start_char,0,value[1]);\n      if (index != 0) {\n        value[1] = index - (int)start_char;\n      }\n      current_value = value[1];\n    }\n    value[4] = current_value;\n    *(undefined *)((int)value + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  current_value = *value;\n  ppuVar7 = (uint **)*param_array;\n  base = value[5];\n  if ((current_value & 0x80) == 0) {\n    *param_array = (uint *)(ppuVar7 + 1);\n    param_ptr = *ppuVar7;\n    if ((current_value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)param_ptr = (short)base;\n  }\n  else {\n    *param_array = (uint *)(ppuVar7 + 1);\n    param_ptr = *ppuVar7;\nLAB_0800557a:\n    *param_ptr = base;\n  }\nLAB_0800558e:\n  value[4] = 0;\nLAB_080054fa:\n  index = compute_data_size_080052e4(value_type,value,size_info,param_3,callback);\n  if ((index == -1) || (index = (*callback)(value_type,param_3,start_char,value[4]), index == -1)) {\nLAB_0800550e:\n    current_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*value << 0x1e) < 0) {\n      for (index = 0; index < (int)(value[3] - size_info[0]); index = index + 1) {\n        result = (*callback)(value_type,param_3,(int)value + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    current_value = value[3];\n    if ((int)value[3] < (int)size_info[0]) {\n      current_value = size_info[0];\n    }\n  }\n  return current_value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "convert_value_080053d4",
                "param_1": "value_type",
                "param_2": "value",
                "param_4": "callback",
                "param_5": "param_array",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "param_ptr",
                "iVar4": "result",
                "pcVar5": "char_ptr",
                "uVar6": "base",
                "uVar9": "current_value",
                "uVar10": "current_param",
                "pcVar11": "current_char",
                "pcVar12": "start_char",
                "local_24": "size_info"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_first_occurrence_08005614",
            "code": "\nchar * findFirstOccurrence_08005614(char *string,char character,int length)\n\n{\n  char *ptr_string;\n  char *ptr_current;\n  \n  ptr_string = string;\n  do {\n    ptr_current = ptr_string;\n    if (ptr_current == string + length) {\n      return (char *)0x0;\n    }\n    ptr_string = ptr_current + 1;\n  } while (*ptr_current != character);\n  return ptr_current;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_first_occurrence_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "ptr_string",
                "pcVar2": "ptr_current"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_array_08005630",
            "code": "\nvoid copy_array_08005630(int array_destination,undefined *array_source,int array_length)\n\n{\n  undefined *source_end;\n  undefined *destination_end;\n  \n  destination_end = (undefined *)(array_destination + -1);\n  source_end = array_source + array_length;\n  for (; array_source != source_end; array_source = array_source + 1) {\n    destination_end = destination_end + 1;\n    *destination_end = *array_source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_array_08005630",
                "param_1": "array_destination",
                "param_2": "array_source",
                "param_3": "array_length",
                "puVar1": "source_end",
                "puVar2": "destination_end"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_memory_08005646",
            "code": "\nvoid copyMemory_08005646(undefined *dest,undefined *src,int numBytes)\n\n{\n  undefined *target;\n  \n  target = src + numBytes;\n  if ((src < dest) && (dest < target)) {\n    dest = dest + numBytes;\n    numBytes = numBytes - (int)target;\n    while (target + numBytes != (undefined *)0x0) {\n      target = target + -1;\n      dest = dest + -1;\n      *dest = *target;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != target; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_memory_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "numBytes",
                "puVar1": "target"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_pointer_0800567c",
            "code": "\nvoid updatePointer_0800567c(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp4;\n  int **temp5;\n  int **temp6;\n  \n  if (size == 0) {\n    return;\n  }\n  temp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200002ac = temp6;\n  }\n  else {\n    temp3 = DAT_200002ac;\n    if (temp6 < DAT_200002ac) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200002ac == temp3) {\n        temp4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp3 = (int **)((int)temp4 + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp4);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp4 + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_0800583e(result,temp2,temp3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_pointer_0800567c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "temp1",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp4",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_and_initialize_memory_08005714",
            "code": "\nuint allocate_and_initialize_memory_08005714(undefined4 *output_buffer,uint buffer_size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *next_block;\n  uint block_difference;\n  uint *previous_block;\n  uint required_size;\n  \n  required_size = (buffer_size + 3 & 0xfffffffc) + 8;\n  if (required_size < 0xc) {\n    required_size = 0xc;\n  }\n  if (((int)required_size < 0) || (required_size < buffer_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_block = DAT_200002ac;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      block_difference = *next_block - required_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n          }\n        }\n        else {\n          *next_block = block_difference;\n          *(uint *)((int)next_block + block_difference) = required_size;\n          previous_block = (uint *)((int)next_block + block_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_data_and_check_0800581c(output_buffer);\n    }\n    current_block = (uint *)update_data_and_check_0800581c(output_buffer,required_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = update_data_and_check_0800581c(output_buffer,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = required_size;\nLAB_08005778:\n      FUNC_0800583e(output_buffer);\n      required_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = required_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return required_size;\n      }\n      return required_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800583e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_and_initialize_memory_08005714",
                "param_1": "output_buffer",
                "param_2": "buffer_size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "next_block",
                "uVar4": "block_difference",
                "puVar5": "previous_block",
                "uVar6": "required_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_array_080057d0",
            "code": "\nint allocateAndCopyArray_080057d0(undefined4 inputPointer,int inputSize,uint targetSize,undefined4 unusedParam)\n\n{\n  int result;\n  uint calculatedValue;\n  \n  if (inputSize != 0) {\n    if (targetSize == 0) {\n      update_pointer_0800567c();\n      result = 0;\n    }\n    else {\n      calculatedValue = calculate_value_08005840();\n      result = inputSize;\n      if ((calculatedValue < targetSize) && (result = allocate_and_initialize_memory_08005714(inputPointer,targetSize), result != 0)) {\n        copy_array_08005630(result,inputSize,targetSize);\n        update_pointer_0800567c(inputPointer,inputSize);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_08005714(inputPointer,targetSize,targetSize,unusedParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_array_080057d0",
                "param_1": "inputPointer",
                "param_2": "inputSize",
                "param_3": "targetSize",
                "param_4": "unusedParam",
                "iVar1": "result",
                "uVar2": "calculatedValue"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_data_and_check_0800581c",
            "code": "\nvoid updateDataAndCheck_0800581c(int *result,undefined4 input)\n\n{\n  int returnValue;\n  \n  DAT_2000169c = 0;\n  returnValue = update_data_and_return_080072b8(input);\n  if ((returnValue == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_data_and_check_0800581c",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_value_08005840",
            "code": "\nint calculateValue_08005840(undefined4 param1,int param2)\n\n{\n  int newIndex;\n  \n  newIndex = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    newIndex = newIndex + *(int *)(param2 + newIndex);\n  }\n  return newIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "newIndex"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "validate_data_and_return_value_08005854",
            "code": "\nundefined8 validate_data_and_return_value_08005854(undefined4 input_value_1,undefined4 input_value_2)\n\n{\n  int is_valid;\n  undefined4 *data_pointer;\n  int *data_pointer;\n  undefined8 calculated_double;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *constant_data;\n  undefined4 input_copy_1;\n  undefined4 input_copy_2;\n  undefined4 input_copy_3;\n  undefined4 input_copy_4;\n  undefined8 infinite_value;\n  int validity_check_result;\n  \n  calculated_double = calculate_double_from_float_08005c70();\n  if (DAT_20000224 == -1) {\n    return calculated_double;\n  }\n  validity_check_result = is_valid_data_08000a04(input_value_1,input_value_2,input_value_1,input_value_2);\n  if (validity_check_result != 0) {\n    return calculated_double;\n  }\n  func_result = FUNC_0800708c(input_value_1,input_value_2);\n  is_valid = is_c_string_empty_080009f0((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (is_valid == 0) {\n    return calculated_double;\n  }\n  flag = 1;\n  constant_data = &DAT_080073ac;\n  input_copy_1 = input_value_1;\n  input_copy_2 = input_value_2;\n  input_copy_3 = input_value_1;\n  input_copy_4 = input_value_2;\n  infinite_value = get_infinite_value_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    is_valid = initialize_program_0800709e(&flag);\n    if (is_valid != 0) goto LAB_080058d0;\n  }\n  data_pointer = (undefined4 *)get_data_pointer_080072ac();\n  *data_pointer = 0x21;\nLAB_080058d0:\n  if (validity_check_result != 0) {\n    data_pointer = (int *)get_data_pointer_080072ac();\n    *data_pointer = validity_check_result;\n  }\n  return infinite_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "validate_data_and_return_value_08005854",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "iVar1": "is_valid",
                "puVar2": "data_pointer",
                "piVar3": "data_pointer",
                "uVar4": "calculated_double",
                "uVar5": "func_result",
                "local_48": "flag",
                "local_44": "constant_data",
                "local_40": "input_copy_1",
                "uStack_3c": "input_copy_2",
                "local_38": "input_copy_3",
                "uStack_34": "input_copy_4",
                "local_30": "infinite_value",
                "local_28": "validity_check_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_final_value_thunk_08006070",
            "code": "\nundefined8 calculate_final_value_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 result;\n  undefined8 temp6;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    result = calculate_multiplication_division_0800016c(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = calculate_value_08006d68();\n    return result;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)input4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_double_from_float_08000724(input1,input2);\n            FUNC_0800708c();\n            result = calculate_value_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)result >> 0x20);\n        temp1 = (undefined4)result;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          temp6 = calculate_product_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result;\n          }\n          result = calculate_product_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          temp6 = 0x400921fb54442d18;\n        }\n        result = calculate_product_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp6,\n                             (int)((ulonglong)temp6 >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_final_value_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "result",
                "uVar7": "temp6"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "perform_calculation_08005900",
            "code": "\nundefined8 performCalculation_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char dataFlag;\n  int result;\n  int *dataPointer;\n  undefined4 *dataPointer2;\n  int temp;\n  undefined4 upperBits;\n  undefined4 lowerBits;\n  undefined8 calculationResult;\n  undefined8 calculationResult2;\n  undefined4 flag;\n  undefined *characterPointer;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined8 floatResult;\n  int isValid;\n  \n  calculationResult = calculate_double_08006228();\n  dataFlag = DAT_20000224;\n  upperBits = (undefined4)((ulonglong)calculationResult >> 0x20);\n  lowerBits = (undefined4)calculationResult;\n  if (DAT_20000224 == -1) {\n    return calculationResult;\n  }\n  result = is_valid_data_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return calculationResult;\n  }\n  result = is_valid_data_08000a04(input1,input2,input1,input2);\n  input1Copy = input1;\n  input2Copy = input2;\n  input3Copy = input3;\n  input4Copy = input4;\n  if (result == 0) {\n    result = check_if_input_is_valid_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = check_if_input_is_valid_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        flag = 1;\n        characterPointer = &DAT_080073b1;\n        floatResult = 0;\n        isValid = 0;\n        if (dataFlag != '\\0') {\n          floatResult = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = set_msb_to1_and_divide_by32_08007092(input3,input4);\n      if (result == 0) {\n        return calculationResult;\n      }\n      result = check_null_termination_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return calculationResult;\n      }\n      flag = 1;\n      characterPointer = &DAT_080073b1;\n      isValid = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      floatResult = 0xfff0000000000000;\n      isValid = 0;\n      dataFlag = DAT_20000224;\nLAB_08005a32:\n      if (dataFlag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = set_msb_to1_and_divide_by32_08007092(lowerBits,upperBits);\n    if (((result != 0) || (temp = set_msb_to1_and_divide_by32_08007092(input1,input2), temp == 0)) ||\n       (temp = set_msb_to1_and_divide_by32_08007092(input3,input4), temp == 0)) {\n      result = check_if_input_is_valid_080009a0(lowerBits,upperBits,0,0);\n      if (result == 0) {\n        return calculationResult;\n      }\n      result = set_msb_to1_and_divide_by32_08007092(input1,input2);\n      if (result == 0) {\n        return calculationResult;\n      }\n      result = set_msb_to1_and_divide_by32_08007092(input3,input4);\n      if (result == 0) {\n        return calculationResult;\n      }\n      flag = 4;\n      characterPointer = &DAT_080073b1;\n      isValid = 0;\n      floatResult._0_4_ = 0;\n      floatResult._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    isValid = is_valid_data_08000a04(lowerBits,upperBits);\n    dataFlag = DAT_20000224;\n    if (isValid != 0) {\n      characterPointer = &DAT_080073b1;\n      flag = 1;\n      isValid = result;\n      if (DAT_20000224 != '\\0') {\n        floatResult = calculate_double_from_float_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      characterPointer = &DAT_080073b1;\n      flag = 1;\n      floatResult = 0;\n      goto LAB_08005978;\n    }\n    characterPointer = &DAT_080073b1;\n    flag = 3;\n    if (DAT_20000224 == '\\0') {\n      floatResult._0_4_ = 0xe0000000;\n      floatResult._4_4_ = 0x47efffff;\n      result = check_null_termination_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        calculationResult = perform_calculation_080004d0(input3,input4,0,0x3fe00000);\n        calculationResult2 = FUNC_080070b0();\n        result = check_if_input_is_valid_080009a0((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),(int)calculationResult2,\n                             (int)((ulonglong)calculationResult2 >> 0x20));\n        if (result == 0) {\n          floatResult._0_4_ = 0xe0000000;\n          floatResult._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_program_0800709e(&flag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      floatResult._0_4_ = 0;\n      floatResult._4_4_ = 0x7ff00000;\n      result = check_null_termination_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        calculationResult = perform_calculation_080004d0(input3,input4,0,0x3fe00000);\n        calculationResult2 = FUNC_080070b0();\n        result = check_if_input_is_valid_080009a0((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),(int)calculationResult2,\n                             (int)((ulonglong)calculationResult2 >> 0x20));\n        if (result == 0) {\n          floatResult._0_4_ = 0;\n          floatResult._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    dataPointer2 = (undefined4 *)get_data_pointer_080072ac();\n    lowerBits = 0x22;\n  }\n  else {\n    result = check_if_input_is_valid_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return calculationResult;\n    }\n    flag = 1;\n    characterPointer = &DAT_080073b1;\n    floatResult = 0x3ff0000000000000;\n    isValid = 0;\n    if (dataFlag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_program_0800709e(&flag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    dataPointer2 = (undefined4 *)get_data_pointer_080072ac();\n    lowerBits = 0x21;\n  }\n  *dataPointer2 = lowerBits;\nLAB_080059d0:\n  if (isValid != 0) {\n    dataPointer = (int *)get_data_pointer_080072ac();\n    *dataPointer = isValid;\n  }\n  return floatResult;\n}\n\n",
            "renaming": {
                "FUN_08005900": "perform_calculation_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "dataFlag",
                "iVar2": "result",
                "piVar3": "dataPointer",
                "puVar4": "dataPointer2",
                "iVar5": "temp",
                "uVar6": "upperBits",
                "uVar7": "lowerBits",
                "uVar8": "calculationResult",
                "uVar9": "calculationResult2",
                "local_50": "flag",
                "local_4c": "characterPointer",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input3Copy",
                "uStack_3c": "input4Copy",
                "local_38": "floatResult",
                "local_30": "isValid"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "validate_and_initialize_program_08005bc8",
            "code": "\nundefined8 validate_and_initialize_program_08005bc8(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char flag;\n  int termination_check;\n  int *pointer_to_data;\n  undefined4 *pointer_to_data_start;\n  undefined8 result;\n  undefined4 flag_1;\n  undefined *data_start;\n  undefined4 input_param_1_copy;\n  undefined4 input_param_2_copy;\n  undefined4 input_param_1_copy2;\n  undefined4 input_param_2_copy2;\n  undefined8 calculation_result;\n  int data_validation_result;\n  \n  result = calculate_float_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  data_validation_result = is_valid_data_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (data_validation_result != 0) {\n    return result;\n  }\n  termination_check = check_null_termination_080009b4(input_param_1,input_param_2,0,0);\n  if (termination_check == 0) {\n    return result;\n  }\n  flag_1 = 1;\n  data_start = &DAT_080073b5;\n  input_param_1_copy = input_param_1;\n  input_param_2_copy = input_param_2;\n  input_param_1_copy2 = input_param_1;\n  input_param_2_copy2 = input_param_2;\n  if (flag == '\\0') {\n    calculation_result = 0;\nLAB_08005c26:\n    termination_check = initialize_program_0800709e(&flag_1);\n    if (termination_check != 0) goto LAB_08005c2e;\n  }\n  else {\n    calculation_result = calculate_double_from_float_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  pointer_to_data_start = (undefined4 *)get_data_pointer_080072ac();\n  *pointer_to_data_start = 0x21;\nLAB_08005c2e:\n  if (data_validation_result != 0) {\n    pointer_to_data = (int *)get_data_pointer_080072ac();\n    *pointer_to_data = data_validation_result;\n  }\n  return calculation_result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "validate_and_initialize_program_08005bc8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "cVar1": "flag",
                "iVar2": "termination_check",
                "piVar3": "pointer_to_data",
                "puVar4": "pointer_to_data_start",
                "uVar5": "result",
                "local_50": "flag_1",
                "local_4c": "data_start",
                "local_48": "input_param_1_copy",
                "uStack_44": "input_param_2_copy",
                "local_40": "input_param_1_copy2",
                "uStack_3c": "input_param_2_copy2",
                "local_38": "calculation_result",
                "local_30": "data_validation_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_double_from_float_08005c70",
            "code": "\nundefined8 calculate_double_from_float_08005c70(uint input_param_1,uint input_param_2)\n\n{\n  int is_empty;\n  undefined4 result_high_1;\n  undefined4 result_high_2;\n  undefined4 result_high_3;\n  undefined4 result_high_4;\n  undefined4 result_low_1;\n  undefined4 result_low_2;\n  uint parsed_param_2;\n  undefined8 result_1;\n  undefined8 result_2;\n  undefined8 result_3;\n  \n  result_1 = CONCAT44(input_param_2,input_param_1);\n  parsed_param_2 = input_param_2 & 0x7fffffff;\n  if (parsed_param_2 < 0x3ff00000) {\n    if (parsed_param_2 < 0x3fe00000) {\n      if (0x3e3fffff < parsed_param_2) {\n        result_2 = perform_calculation_080004d0(input_param_1,input_param_2,input_param_1,input_param_2);\n        result_low_2 = (undefined4)((ulonglong)result_2 >> 0x20);\n        result_low_1 = (undefined4)result_2;\n        result_2 = perform_calculation_080004d0(result_low_1,result_low_2,0xdfdf709,0x3f023de1);\n        result_2 = calculate_multiplication_division_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x7501b288,0x3f49efe0);\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_product_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xb5688f3b,0x3fa48228);\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_multiplication_division_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xe884455,0x3fc9c155);\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_product_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_multiplication_division_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x55555555,0x3fc55555);\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_3 = perform_calculation_080004d0(result_low_1,result_low_2,0xb12e9282,0x3fb3b8c5);\n        result_3 = calculate_product_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        result_3 = perform_calculation_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_multiplication_division_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x9c598ac8,0x40002ae5);\n        result_3 = perform_calculation_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_product_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        result_3 = perform_calculation_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_multiplication_division_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0,0x3ff00000);\n        result_2 = calculate_double_from_float_08005c70_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                              (int)((ulonglong)result_3 >> 0x20));\n        result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),input_param_1,input_param_2);\n        goto LAB_08005cba;\n      }\n      result_2 = calculate_multiplication_division_0800016c(input_param_1,input_param_2,0x8800759c,0x7e37e43c);\n      is_empty = is_c_string_empty_080009f0((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n      if (is_empty != 0) {\n        return result_1;\n      }\n    }\n    result_1 = FUNC_0800708c(input_param_1,input_param_2);\n    result_1 = calculate_product_08000168(0,0x3ff00000,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x3fe00000);\n    result_high_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n    result_low_1 = (undefined4)result_1;\n    result_1 = perform_calculation_080004d0(result_low_1,result_high_1,0xdfdf709,0x3f023de1);\n    result_1 = calculate_multiplication_division_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x7501b288,0x3f49efe0);\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_product_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_multiplication_division_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xe884455,0x3fc9c155);\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_product_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_multiplication_division_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x55555555,0x3fc55555);\n    result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_high_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n    result_2 = perform_calculation_080004d0(result_low_1,result_high_1,0xb12e9282,0x3fb3b8c5);\n    result_2 = calculate_product_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_multiplication_division_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n    result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_product_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    result_2 = perform_calculation_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_multiplication_division_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n    result_high_3 = (undefined4)((ulonglong)result_2 >> 0x20);\n    result_3 = calculate_float_08006c0c(result_low_1,result_high_1);\n    result_high_4 = (undefined4)((ulonglong)result_3 >> 0x20);\n    result_low_2 = (undefined4)result_3;\n    if (parsed_param_2 < 0x3fef3333) {\n      result_1 = calculate_double_from_float_08005c70_08000724((int)result_1,result_high_2,(int)result_2,result_high_3);\n      result_2 = calculate_multiplication_division_0800016c(result_low_2,result_high_4,result_low_2,result_high_4);\n      result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = perform_calculation_080004d0(0,result_high_4,0,result_high_4);\n      result_2 = calculate_product_08000168(result_low_1,result_high_1,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_3 = calculate_multiplication_division_0800016c(result_low_2,result_high_4,0,result_high_4);\n      result_2 = calculate_double_from_float_08005c70_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                            (int)((ulonglong)result_3 >> 0x20));\n      result_low_1 = (undefined4)((ulonglong)result_2 >> 0x20);\n      result_2 = calculate_multiplication_division_0800016c((int)result_2,result_low_1,(int)result_2,result_low_1);\n      result_2 = calculate_product_08000168(0x33145c07,0x3c91a626,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = calculate_product_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = calculate_multiplication_division_0800016c(0,result_high_4,0,result_high_4);\n      result_2 = calculate_product_08000168(0x54442d18,0x3fe921fb,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = calculate_product_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_low_1 = 0x3fe921fb;\n    }\n    else {\n      result_1 = calculate_double_from_float_08005c70_08000724((int)result_1,result_high_2,(int)result_2,result_high_3);\n      result_1 = perform_calculation_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_2,result_high_4);\n      result_1 = calculate_multiplication_division_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_2,result_high_4);\n      result_low_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = calculate_multiplication_division_0800016c((int)result_1,result_low_1,(int)result_1,result_low_1);\n      result_1 = calculate_product_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x33145c07,0x3c91a626);\n      result_low_1 = 0x3ff921fb;\n    }\n    result_1 = calculate_product_08000168(0x54442d18,result_low_1,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    if ((int)input_param_2 < 1) {\n      result_1 = CONCAT44((int)((ulonglong)result_1 >> 0x20) + -0x80000000,(int)result_1);\n    }\n  }\n  else {\n    if ((parsed_param_2 + 0xc0100000 | input_param_1) != 0) {\n      result_1 = calculate_product_08000168(input_param_1,input_param_2,input_param_1,input_param_2);\n      result_low_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = calculate_double_from_float_08005c70_08000724((int)result_1,result_low_1,(int)result_1,result_low_1);\n      return result_1;\n    }\n    result_1 = perform_calculation_080004d0(input_param_1,input_param_2,0x54442d18,0x3ff921fb);\n    result_2 = perform_calculation_080004d0(input_param_1,input_param_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result_1 = calculate_multiplication_division_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                         (int)((ulonglong)result_2 >> 0x20));\n  }\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_double_from_float_08005c70",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "is_empty",
                "uVar2": "result_high_1",
                "uVar3": "result_high_2",
                "uVar4": "result_high_3",
                "uVar5": "result_high_4",
                "uVar6": "result_low_1",
                "uVar7": "result_low_2",
                "uVar8": "parsed_param_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 result1;\n  uint flag;\n  uint absValue2;\n  int difference;\n  uint absValue4;\n  undefined8 finalResult;\n  undefined8 product;\n  \n  absValue4 = value4 & 0x7fffffff;\n  if ((0x7ff00000 < (absValue4 | (-value3 | value3) >> 0x1f)) ||\n     (absValue2 = value2 & 0x7fffffff, 0x7ff00000 < (absValue2 | (-value1 | value1) >> 0x1f))) {\n    finalResult = calculate_mul_div(value1,value2,value3,value4,value4);\n    return finalResult;\n  }\n  if ((value4 + 0xc0100000 | value3) == 0) {\n    finalResult = calculate_value();\n    return finalResult;\n  }\n  flag = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n  if ((value1 | absValue2) == 0) {\n    if (flag == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag != 3) {\n      return concatenate(value2,value1);\n    }\nLAB_0800613e:\n    finalResult = 0xc00921fb54442d18;\n  }\n  else {\n    if ((value3 | absValue4) != 0) {\n      if (absValue4 == 0x7ff00000) {\n        if (absValue2 == 0x7ff00000) {\n          if (flag == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag != 3) {\n          if (flag != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (absValue2 != 0x7ff00000) {\n        difference = (int)(absValue2 - absValue4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)value4 < 0) && (difference + 0x3c < 0 != signed_carry(difference,0x3c))) {\n            finalResult = 0;\n          }\n          else {\n            calculate_double_from_float(value1,value2);\n            FUNC_0800708c();\n            finalResult = calculate_value();\n          }\n        }\n        else {\n          finalResult = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)finalResult >> 0x20);\n        result1 = (undefined4)finalResult;\n        if (flag == 1) {\n          return concatenate(difference + -0x80000000,result1);\n        }\n        if (flag == 2) {\n          product = calculate_product_multi(result1,difference,0x33145c07,0x3ca1a626);\n          finalResult = 0x400921fb54442d18;\n        }\n        else {\n          if (flag == 0) {\n            return finalResult;\n          }\n          finalResult = calculate_product_multi(result1,difference,0x33145c07,0x3ca1a626);\n          product = 0x400921fb54442d18;\n        }\n        finalResult = calculate_product_multi((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)product,\n                             (int)((ulonglong)product >> 0x20));\n        return finalResult;\n      }\n    }\n    if ((int)value2 < 0) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "flag",
                "uVar3": "absValue2",
                "iVar4": "difference",
                "uVar5": "absValue4",
                "uVar6": "finalResult",
                "uVar7": "product",
                "calculate_multiplication_division_0800016c": "calculate_mul_div",
                "calculate_value_08006d68": "calculate_value",
                "calculate_double_from_float_08000724": "calculate_double_from_float",
                "calculate_product_08000168": "calculate_product_multi",
                "CONCAT44": "concatenate",
                "SCARRY4": "signed_carry"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_double_08006228",
            "code": "\nuint calculate_double_08006228(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint temp_1;\n  uint temp_2;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  uint temp_5;\n  undefined4 temp_6;\n  int temp_7;\n  int temp_8;\n  undefined4 result_4;\n  uint temp_9;\n  undefined4 result_5;\n  int temp_10;\n  uint result_6;\n  undefined4 result_7;\n  undefined4 result_8;\n  undefined8 result_9;\n  undefined8 result_10;\n  undefined8 result_11;\n  undefined8 result_12;\n  longlong result_13;\n  ulonglong result_14;\n  undefined8 result_15;\n  uint output;\n  undefined4 temp_11;\n  undefined4 temp_12;\n  int temp_13;\n  \n  result_10 = CONCAT44(input_2,input_1);\n  result_6 = input_4 & 0x7fffffff;\n  if ((result_6 | input_3) == 0) {\n    return 0;\n  }\n  temp_9 = input_2 & 0x7fffffff;\n  if (temp_9 < 0x7ff00001) {\n    if (temp_9 == 0x7ff00000) {\n      if (input_1 == 0) {\n        if (0x7ff00000 < result_6) goto LAB_08006278;\nLAB_08006262:\n        if ((result_6 != 0x7ff00000) || (input_3 == 0)) {\n          if (-1 < (int)input_2) goto LAB_0800632a;\n          if (result_6 < 0x43400000) {\n            if (result_6 < 0x3ff00000) {\nLAB_0800632a:\n              output = 0;\n              goto LAB_080062ba;\n            }\n            temp_7 = ((int)result_6 >> 0x14) + -0x3ff;\n            if (0x14 < temp_7) {\n              temp_1 = input_3 >> (0x34U - temp_7 & 0xff);\n              if (input_3 == temp_1 << (0x34U - temp_7 & 0xff)) {\n                output = 2 - (temp_1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input_3 == 0) {\n              temp_1 = (int)result_6 >> (0x14U - temp_7 & 0xff);\n              if (result_6 == temp_1 << (0x14U - temp_7 & 0xff)) {\n                output = 2 - (temp_1 & 1);\n              }\n              else {\n                output = 0;\n              }\n              goto LAB_0800630c;\n            }\n            output = 0;\n          }\n          else {\n            output = 2;\nLAB_080062ba:\n            if (input_3 == 0) {\n              if (result_6 == 0x7ff00000) {\n                if ((temp_9 + 0xc0100000 | input_1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp_9) {\n                  if ((int)input_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result_6 == 0x3ff00000) {\n                if (-1 < (int)input_4) {\n                  return input_1;\n                }\n                result_9 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input_4 == 0x40000000) goto LAB_0800634a;\n              if ((input_4 == 0x3fe00000) && (-1 < (int)input_2)) {\n                result_6 = calculate_float_08006c0c(input_1,input_2);\n                return result_6;\n              }\n            }\n          }\n          result_9 = FUNC_0800708c(input_1,input_2);\n          result_7 = (undefined4)((ulonglong)result_9 >> 0x20);\n          result_1 = (undefined4)result_9;\n          result_14 = CONCAT44(input_2,result_1) & 0x7fffffffffffffff;\n          if ((input_1 == 0) && ((temp_9 == 0 || ((input_2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input_4 < 0) {\n              result_9 = calculate_double_08006228_from_float_08000724(0,0x3ff00000,result_1,result_7);\n            }\n            if (-1 < (int)input_2) {\n              return (uint)result_9;\n            }\n            if ((output | temp_9 + 0xc0100000) != 0) {\n              return (uint)result_9;\n            }\n          }\n          else {\n            temp_1 = 0xffffffff - ((int)input_2 >> 0x1f);\n            result_9 = result_10;\n            if ((output | temp_1) != 0) {\n              if (result_6 < 0x41e00001) {\n                temp_13 = 0;\n                if (temp_9 < 0x100000) {\n                  result_14 = perform_calculation_080004d0();\n                  temp_13 = -0x35;\n                }\n                result_6 = (uint)(result_14 >> 0x20);\n                result_1 = (undefined4)result_14;\n                temp_13 = ((int)result_6 >> 0x14) + -0x3ff + temp_13;\n                result_6 = result_6 & 0xfffff;\n                temp_9 = result_6 | 0x3ff00000;\n                if (result_6 < 0x3988f) {\nLAB_08006628:\n                  temp_7 = 0;\n                }\n                else {\n                  if (0xbb679 < result_6) {\n                    temp_9 = temp_9 - 0x100000;\n                    temp_13 = temp_13 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp_7 = 1;\n                }\n                temp_8 = temp_7 * 8;\n                result_4 = (&DAT_080073c0)[temp_7 * 2];\n                result_5 = (&DAT_080073c4)[temp_7 * 2];\n                result_10 = calculate_product_08000168(result_1,temp_9,result_4,result_5);\n                result_8 = (undefined4)((ulonglong)result_10 >> 0x20);\n                result_9 = calculate_multiplication_division_0800016c(result_1,temp_9,result_4,result_5);\n                result_9 = calculate_double_08006228_from_float_08000724(0,0x3ff00000,(int)result_9,(int)((ulonglong)result_9 >> 0x20));\n                result_2 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_11 = perform_calculation_080004d0((int)result_10,result_8,(int)result_9,result_2);\n                result_3 = (undefined4)((ulonglong)result_11 >> 0x20);\n                result_7 = (undefined4)result_11;\n                result_11 = perform_calculation_080004d0(0,result_3);\n                result_10 = calculate_product_08000168((int)result_10,result_8,(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_11 = calculate_product_08000168(0,((int)temp_9 >> 1 | 0x20000000U) + 0x80000 + temp_7 * 0x40000,\n                                      result_4,result_5);\n                result_11 = calculate_product_08000168(result_1,temp_9,(int)result_11,(int)((ulonglong)result_11 >> 0x20));\n                result_11 = perform_calculation_080004d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),0,result_3);\n                result_10 = calculate_product_08000168((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_10 = perform_calculation_080004d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_9,result_2\n                                     );\n                result_8 = (undefined4)((ulonglong)result_10 >> 0x20);\n                result_9 = perform_calculation_080004d0(result_7,result_3);\n                result_2 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_1 = (undefined4)result_9;\n                result_9 = perform_calculation_080004d0(result_1,result_2,0x4a454eef,0x3fca7e28);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_1,result_2);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_1,result_2);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_1,result_2);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_1,result_2);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                result_11 = perform_calculation_080004d0(result_1,result_2,result_1,result_2);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_11 = calculate_multiplication_division_0800016c(result_7,result_3,0,result_3);\n                result_11 = perform_calculation_080004d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_10,\n                                      result_8);\n                result_9 = calculate_multiplication_division_0800016c((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_9,\n                                      (int)((ulonglong)result_9 >> 0x20));\n                result_1 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_11 = perform_calculation_080004d0(0,result_3,0,result_3);\n                result_2 = (undefined4)((ulonglong)result_11 >> 0x20);\n                result_12 = calculate_multiplication_division_0800016c((int)result_11,result_2,0,0x40080000);\n                calculate_multiplication_division_0800016c((int)result_12,(int)((ulonglong)result_12 >> 0x20),(int)result_9,result_1);\n                result_12 = perform_calculation_080004d0(0,result_3,0,temp_3);\n                result_4 = (undefined4)((ulonglong)result_12 >> 0x20);\n                result_15 = calculate_product_08000168(0,temp_3,0,0x40080000);\n                result_11 = calculate_product_08000168((int)result_15,(int)((ulonglong)result_15 >> 0x20),(int)result_11,result_2\n                                     );\n                result_9 = calculate_product_08000168((int)result_9,result_1,(int)result_11,(int)((ulonglong)result_11 >> 0x20)\n                                     );\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_7,result_3);\n                result_10 = perform_calculation_080004d0((int)result_10,result_8,0,temp_3);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                                      (int)((ulonglong)result_10 >> 0x20));\n                result_1 = (undefined4)((ulonglong)result_9 >> 0x20);\n                calculate_multiplication_division_0800016c((int)result_12,result_4,(int)result_9,result_1);\n                result_10 = perform_calculation_080004d0(0,temp_4,0xe0000000,0x3feec709);\n                result_11 = calculate_product_08000168(0,temp_4,(int)result_12,result_4);\n                result_9 = calculate_product_08000168((int)result_9,result_1,(int)result_11,(int)((ulonglong)result_11 >> 0x20)\n                                     );\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                result_11 = perform_calculation_080004d0(0,temp_4,0x145b01f5,0xbe3e2fe0);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp_8),\n                                      *(undefined4 *)(&DAT_080073e4 + temp_8));\n                result_11 = calculate_shifted_value_08000404(temp_13);\n                result_1 = (undefined4)((ulonglong)result_11 >> 0x20);\n                result_7 = *(undefined4 *)(&DAT_080073d0 + temp_8);\n                result_8 = *(undefined4 *)(&DAT_080073d4 + temp_8);\n                result_12 = calculate_multiplication_division_0800016c((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_9,\n                                      (int)((ulonglong)result_9 >> 0x20));\n                result_12 = calculate_multiplication_division_0800016c((int)result_12,(int)((ulonglong)result_12 >> 0x20),result_7,result_8);\n                calculate_multiplication_division_0800016c((int)result_12,(int)((ulonglong)result_12 >> 0x20),(int)result_11,result_1);\n                result_11 = calculate_product_08000168(0,temp_5,(int)result_11,result_1);\n                result_13 = calculate_product_08000168((int)result_11,(int)((ulonglong)result_11 >> 0x20),result_7,result_8);\n                result_6 = temp_5;\n              }\n              else {\n                if (0x43f00000 < result_6) {\n                  if (temp_9 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input_4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input_1 = 0x8800759c;\n                  input_2 = 0x7e37e43c;\n                  result_10 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp_9 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input_4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp_9) goto LAB_08006418;\n                result_10 = calculate_product_08000168(result_1,result_7,0,0x3ff00000);\n                result_7 = (undefined4)((ulonglong)result_10 >> 0x20);\n                result_1 = (undefined4)result_10;\n                result_10 = perform_calculation_080004d0(result_1,result_7,0x60000000,0x3ff71547);\n                result_9 = perform_calculation_080004d0(result_1,result_7,0xf85ddf44,0x3e54ae0b);\n                result_11 = perform_calculation_080004d0(result_1,result_7,0,0x3fd00000);\n                result_11 = calculate_product_08000168(0x55555555,0x3fd55555,(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_11 = perform_calculation_080004d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),result_1,result_7);\n                result_11 = calculate_product_08000168(0,0x3fe00000,(int)result_11,(int)((ulonglong)result_11 >> 0x20));\n                result_12 = perform_calculation_080004d0(result_1,result_7,result_1,result_7);\n                result_11 = perform_calculation_080004d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_12,\n                                      (int)((ulonglong)result_12 >> 0x20));\n                result_11 = perform_calculation_080004d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                result_9 = calculate_product_08000168((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                calculate_multiplication_division_0800016c((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_9,\n                             (int)((ulonglong)result_9 >> 0x20));\n                result_13 = (ulonglong)temp_2 << 0x20;\n                result_6 = temp_2;\n              }\n              result_10 = calculate_product_08000168((int)result_13,(int)((ulonglong)result_13 >> 0x20),(int)result_10,\n                                    (int)((ulonglong)result_10 >> 0x20));\n              result_10 = calculate_product_08000168((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                                    (int)((ulonglong)result_10 >> 0x20));\n              if ((output - 1 | temp_1) == 0) {\n                input_2 = 0xbff00000;\n              }\n              else {\n                input_2 = 0x3ff00000;\n              }\n              output = 0;\n              result_9 = calculate_product_08000168(input_3,input_4,0,input_4);\n              result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),0,result_6);\n              result_10 = perform_calculation_080004d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),input_3,input_4);\n              result_10 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                                    (int)((ulonglong)result_10 >> 0x20));\n              result_8 = (undefined4)((ulonglong)result_10 >> 0x20);\n              result_1 = (undefined4)result_10;\n              result_10 = perform_calculation_080004d0(0,result_6,0,input_4);\n              result_2 = (undefined4)((ulonglong)result_10 >> 0x20);\n              result_7 = (undefined4)result_10;\n              result_13 = calculate_multiplication_division_0800016c(result_1,result_8,result_7,result_2);\n              temp_9 = (uint)((ulonglong)result_13 >> 0x20);\n              result_6 = (uint)result_13;\n              if (0x408fffffffffffff < result_13) {\n                if ((temp_9 + 0xbf700000 | result_6) == 0) {\n                  result_9 = calculate_multiplication_division_0800016c(result_1,result_8,0x652b82fe,0x3c971547);\n                  result_11 = calculate_product_08000168(result_6,temp_9,result_7,result_2);\n                  temp_7 = is_c_string_empty_080009f0((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_11,\n                                       (int)((ulonglong)result_11 >> 0x20));\n                  if (temp_7 == 0) goto LAB_08006968;\n                }\n                result_10 = perform_calculation_080004d0(0,input_2,0x8800759c,0x7e37e43c);\n                input_1 = 0x8800759c;\n                input_2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp_9 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp_9 & 0x7fffffff) < 0x3fe00001) {\n                  temp_7 = 0;\n                }\n                else {\n                  temp_9 = (0x100000 >> (((int)(temp_9 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp_9;\n                  result_6 = (temp_9 * 2 >> 0x15) - 0x3ff;\n                  temp_7 = (int)(temp_9 & 0xfffff | 0x100000) >> (0x14 - result_6 & 0xff);\n                  if (result_13 < 0) {\n                    temp_7 = -temp_7;\n                  }\n                  result_10 = calculate_product_08000168(result_7,result_2,0,temp_9 & ~(0xfffff >> (result_6 & 0xff)));\n                }\n                temp_12 = (undefined4)((ulonglong)result_10 >> 0x20);\n                temp_11 = (undefined4)result_10;\n                calculate_multiplication_division_0800016c(temp_11,temp_12,result_1,result_8);\n                result_10 = perform_calculation_080004d0(0,temp_6,0,0x3fe62e43);\n                result_7 = (undefined4)((ulonglong)result_10 >> 0x20);\n                result_9 = calculate_product_08000168(0,temp_6,temp_11,temp_12);\n                result_9 = calculate_product_08000168(result_1,result_8,(int)result_9,(int)((ulonglong)result_9 >> 0x20));\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                result_11 = perform_calculation_080004d0(0,temp_6,0xca86c39,0xbe205c61);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_11,\n                                      (int)((ulonglong)result_11 >> 0x20));\n                result_8 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_11 = calculate_multiplication_division_0800016c((int)result_10,result_7,(int)result_9,result_8);\n                result_2 = (undefined4)((ulonglong)result_11 >> 0x20);\n                result_1 = (undefined4)result_11;\n                result_10 = calculate_product_08000168(result_1,result_2,(int)result_10,result_7);\n                result_10 = calculate_product_08000168((int)result_9,result_8,(int)result_10,\n                                      (int)((ulonglong)result_10 >> 0x20));\n                result_8 = (undefined4)((ulonglong)result_10 >> 0x20);\n                result_9 = perform_calculation_080004d0(result_1,result_2,result_1,result_2);\n                result_3 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_7 = (undefined4)result_9;\n                result_9 = perform_calculation_080004d0(result_7,result_3,0x72bea4d0,0x3e663769);\n                result_9 = calculate_product_08000168((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_7,result_3);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_7,result_3);\n                result_9 = calculate_product_08000168((int)result_9,(int)((ulonglong)result_9 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_7,result_3);\n                result_9 = calculate_multiplication_division_0800016c((int)result_9,(int)((ulonglong)result_9 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                result_9 = perform_calculation_080004d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),result_7,result_3);\n                result_9 = calculate_product_08000168(result_1,result_2,(int)result_9,(int)((ulonglong)result_9 >> 0x20));\n                result_7 = (undefined4)((ulonglong)result_9 >> 0x20);\n                result_11 = perform_calculation_080004d0(result_1,result_2,(int)result_9,result_7);\n                result_9 = calculate_product_08000168((int)result_9,result_7,0,0x40000000);\n                result_9 = calculate_double_08006228_from_float_08000724((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_9,\n                                      (int)((ulonglong)result_9 >> 0x20));\n                result_11 = perform_calculation_080004d0(result_1,result_2,(int)result_10,result_8);\n                result_10 = calculate_multiplication_division_0800016c((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_10,\n                                      result_8);\n                result_10 = calculate_product_08000168((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                                      (int)((ulonglong)result_10 >> 0x20));\n                result_10 = calculate_product_08000168((int)result_10,(int)((ulonglong)result_10 >> 0x20),result_1,result_2);\n                result_9 = calculate_product_08000168(0,0x3ff00000,(int)result_10,(int)((ulonglong)result_10 >> 0x20));\n                temp_8 = (int)((ulonglong)result_9 >> 0x20);\n                temp_10 = temp_8 + temp_7 * 0x100000;\n                result_10 = CONCAT44(temp_10,(int)result_9);\n                input_1 = output;\n                if (temp_10 < 0x100000) {\n                  result_10 = calculate_final_result_080071c0((int)result_9,temp_8,temp_7);\n                }\n              }\n              else {\n                if ((temp_9 + 0x3f6f3400 | result_6) == 0) {\n                  result_9 = calculate_product_08000168(result_6,temp_9,result_7,result_2);\n                  temp_7 = check_and_return_validity_080009c8(result_1,result_8,(int)result_9,(int)((ulonglong)result_9 >> 0x20));\n                  if (temp_7 == 0) goto LAB_08006968;\n                }\n                result_10 = perform_calculation_080004d0(0,input_2,0xc2f8f359,0x1a56e1f);\n                input_1 = 0xc2f8f359;\n                input_2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result_6 = perform_calculation_080004d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),input_1,input_2);\n              return result_6;\n            }\n          }\n          result_1 = (undefined4)((ulonglong)result_9 >> 0x20);\n          result_9 = calculate_product_08000168((int)result_9,result_1,(int)result_9,result_1);\n          result_10 = result_9;\nLAB_08006320:\n          result_6 = calculate_double_08006228_from_float_08000724((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                                (int)((ulonglong)result_10 >> 0x20));\n          return result_6;\n        }\n      }\n    }\n    else if (result_6 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp_9 + 0xc0100000 | input_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result_6 = get_infinite_value_080070a4(&DAT_0800737e);\n  return result_6;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_double_08006228",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "temp_1",
                "extraout_r1": "temp_2",
                "uVar3": "result_2",
                "uVar4": "result_3",
                "extraout_r1_00": "temp_3",
                "extraout_r1_01": "temp_4",
                "extraout_r1_02": "temp_5",
                "extraout_r1_03": "temp_6",
                "iVar5": "temp_7",
                "iVar6": "temp_8",
                "uVar7": "result_4",
                "uVar8": "temp_9",
                "uVar9": "result_5",
                "iVar10": "temp_10",
                "uVar11": "result_6",
                "uVar12": "result_7",
                "uVar13": "result_8",
                "uVar14": "result_9",
                "uVar15": "result_10",
                "uVar16": "result_11",
                "uVar17": "result_12",
                "lVar18": "result_13",
                "uVar19": "result_14",
                "uVar20": "result_15",
                "local_70": "output",
                "local_68": "temp_11",
                "local_64": "temp_12",
                "local_54": "temp_13"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculate_float_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int shift;\n  int count;\n  uint shifted_input1;\n  uint shifted_input2;\n  int result_shift;\n  uint result;\n  uint bit_mask;\n  int bit_count;\n  uint bit_sum;\n  undefined8 final_result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    final_result = perform_calculation_080004d0(input1,input2,input1,input2);\n    final_result = calculate_multiplication_division_0800016c(input1,input2,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      final_result = calculate_product_08000168(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_double_from_float_08000724((int)final_result,temp1,(int)final_result,temp1);\n      return final_result;\n    }\n  }\n  shift = (int)input2 >> 0x14;\n  if (shift == 0) {\n    while (input2 == 0) {\n      shift = shift + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    shift = shift - (temp2 - 1);\n    input2 = input2 | input1 >> (0x20 - temp2 & 0xff);\n    input1 = input1 << (temp2 & 0xff);\n  }\n  result_shift = 0;\n  temp2 = input2 & 0xfffff | 0x100000;\n  if ((shift + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n  count = 0x16;\n  shifted_input1 = 0;\n  result = 0x200000;\n  input1 = input1 << 1;\n  do {\n    bit_count = shifted_input1 + result;\n    if (bit_count <= (int)temp2) {\n      temp2 = temp2 - bit_count;\n      shifted_input1 = bit_count + result;\n      result_shift = result_shift + result;\n    }\n    count = count + -1;\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    result = result >> 1;\n    input1 = input1 << 1;\n  } while (count != 0);\n  bit_count = 0x20;\n  bit_mask = 0x80000000;\n  result = 0;\n  count = 0;\n  do {\n    bit_sum = bit_mask + count;\n    shifted_input2 = shifted_input1;\n    if (((int)shifted_input1 < (int)temp2) || ((temp2 == shifted_input1 && (bit_sum <= input1)))) {\n      count = bit_sum + bit_mask;\n      if (((int)bit_sum < 0) && (-1 < count)) {\n        shifted_input2 = shifted_input1 + 1;\n      }\n      temp2 = temp2 - shifted_input1;\n      if (input1 < bit_sum) {\n        temp2 = temp2 - 1;\n      }\n      input1 = input1 - bit_sum;\n      result = result + bit_mask;\n    }\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    bit_count = bit_count + -1;\n    input1 = input1 << 1;\n    bit_mask = bit_mask >> 1;\n    shifted_input1 = shifted_input2;\n  } while (bit_count != 0);\n  if ((input1 | temp2) != 0) {\n    if (result == 0xffffffff) {\n      result_shift = result_shift + 1;\n      result = 0;\n    }\n    else {\n      result = result + 1 & 0xfffffffe;\n    }\n  }\n  result = result >> 1;\n  if (result_shift << 0x1f < 0) {\n    result = result | 0x80000000;\n  }\n  return CONCAT44((result_shift >> 1) + 0x3fe00000 + (shift + -0x3ff >> 1) * 0x100000,result);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shift",
                "iVar4": "count",
                "uVar5": "shifted_input1",
                "uVar6": "shifted_input2",
                "iVar7": "result_shift",
                "uVar8": "result",
                "uVar9": "bit_mask",
                "iVar10": "bit_count",
                "uVar11": "bit_sum",
                "uVar12": "final_result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_value_08006d68",
            "code": "\nundefined8 calculate_value_08006d68(int input_1,uint input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int result;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 value_5;\n  undefined4 value_6;\n  uint temp;\n  undefined8 temp_result;\n  undefined8 temp_value;\n  \n  temp_result = CONCAT44(input_2,input_1);\n  temp = input_2 & 0x7fffffff;\n  if (temp < 0x44100000) {\n    if (temp < 0x3fdc0000) {\n      if (temp < 0x3e200000) {\n        temp_value = calculate_mul_div(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n        result = is_string_empty((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return temp_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp_result = FUNC_0800708c();\n      value_2 = (undefined4)((ulonglong)temp_result >> 0x20);\n      value_1 = (undefined4)temp_result;\n      if (temp < 0x3ff30000) {\n        if (temp < 0x3fe60000) {\n          temp_result = calculate_mul_div(value_1,value_2,value_1,value_2);\n          temp_result = calculate_product((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n          temp_value = calculate_mul_div(value_1,value_2,0,0x40000000);\n          temp_result = calculate_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_value,\n                               (int)((ulonglong)temp_value >> 0x20));\n          result = 0;\n        }\n        else {\n          temp_result = calculate_product(value_1,value_2,0,0x3ff00000);\n          temp_value = calculate_mul_div(value_1,value_2,0,0x3ff00000);\n          temp_result = calculate_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_value,\n                               (int)((ulonglong)temp_value >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp < 0x40038000) {\n        temp_result = calculate_product(value_1,value_2,0,0x3ff80000);\n        temp_value = perform_calculation(value_1,value_2,0,0x3ff80000);\n        temp_value = calculate_mul_div((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0,0x3ff00000);\n        temp_result = calculate_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_value,\n                             (int)((ulonglong)temp_value >> 0x20));\n        result = 2;\n      }\n      else {\n        temp_result = calculate_double(0,0xbff00000,value_1,value_2);\n        result = 3;\n      }\n    }\n    value_6 = (undefined4)((ulonglong)temp_result >> 0x20);\n    value_5 = (undefined4)temp_result;\n    temp_result = perform_calculation(value_5,value_6,value_5,value_6);\n    value_3 = (undefined4)((ulonglong)temp_result >> 0x20);\n    value_1 = (undefined4)temp_result;\n    temp_result = perform_calculation(value_1,value_3,value_1,value_3);\n    value_4 = (undefined4)((ulonglong)temp_result >> 0x20);\n    value_2 = (undefined4)temp_result;\n    temp_result = perform_calculation(value_2,value_4,0xe322da11,0x3f90ad3a);\n    temp_result = calculate_mul_div((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_2,value_4);\n    temp_result = calculate_mul_div((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_2,value_4);\n    temp_result = calculate_mul_div((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_2,value_4);\n    temp_result = calculate_mul_div((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x920083ff,0x3fc24924);\n    temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_2,value_4);\n    temp_result = calculate_mul_div((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x5555550d,0x3fd55555);\n    temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_1,value_3);\n    value_1 = (undefined4)((ulonglong)temp_result >> 0x20);\n    temp_value = perform_calculation(value_2,value_4,0x2c6a6c2f,0xbfa2b444);\n    temp_value = calculate_product((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_value = perform_calculation((int)temp_value,(int)((ulonglong)temp_value >> 0x20),value_2,value_4);\n    temp_value = calculate_product((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_value = perform_calculation((int)temp_value,(int)((ulonglong)temp_value >> 0x20),value_2,value_4);\n    temp_value = calculate_product((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_value = perform_calculation((int)temp_value,(int)((ulonglong)temp_value >> 0x20),value_2,value_4);\n    temp_value = calculate_product((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_value = perform_calculation((int)temp_value,(int)((ulonglong)temp_value >> 0x20),value_2,value_4);\n    value_2 = (undefined4)((ulonglong)temp_value >> 0x20);\n    if (result == -1) {\n      temp_result = calculate_mul_div((int)temp_result,value_1,(int)temp_value,value_2);\n      temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_5,value_6);\n      temp_result = calculate_product(value_5,value_6,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    }\n    else {\n      temp_result = calculate_mul_div((int)temp_result,value_1,(int)temp_value,value_2);\n      temp_result = perform_calculation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_5,value_6);\n      result = result * 8;\n      temp_result = calculate_product((int)temp_result,(int)((ulonglong)temp_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      temp_result = calculate_product((int)temp_result,(int)((ulonglong)temp_result >> 0x20),value_5,value_6);\n      temp_result = calculate_product(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n      if ((int)input_2 < 0) {\n        temp_result = CONCAT44((int)((ulonglong)temp_result >> 0x20) + -0x80000000,(int)temp_result);\n      }\n    }\n  }\n  else if ((temp < 0x7ff00001) && ((temp != 0x7ff00000 || (input_1 == 0)))) {\n    if ((int)input_2 < 1) {\n      temp_result = 0xbff921fb54442d18;\n    }\n    else {\n      temp_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    temp_result = calculate_mul_div(input_1,input_2,input_1,input_2,constant_2);\n  }\n  return temp_result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_value_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "result",
                "uVar2": "value_1",
                "uVar3": "value_2",
                "uVar4": "value_3",
                "uVar5": "value_4",
                "uVar6": "value_5",
                "uVar7": "value_6",
                "uVar8": "temp",
                "uVar9": "temp_result",
                "uVar10": "temp_value",
                "is_c_string_empty_080009f0": "is_string_empty",
                "calculate_multiplication_division_0800016c": "calculate_mul_div",
                "calculate_product_08000168": "calculate_product",
                "calculate_double_from_float_08000724": "calculate_double",
                "perform_calculation_080004d0": "perform_calculation"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "set_msb_to1_and_divide_by32_08007092",
            "code": "\nuint setMSBTo1AndDivideBy32_08007092(undefined4 newValue,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "set_msb_to1_and_divide_by32_08007092",
                "param_1": "newValue",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nundefined4 initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinite_value_080070a4",
            "code": "\nundefined8 get_infinite_value_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinite_value_080070a4"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "FUNC_080070b0",
            "code": "\nundefined8 FUNC_080070b0(uint param_1,uint param_2,undefined4 param_3)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  undefined8 uVar8;\n  \n  uVar7 = (param_2 << 1) >> 0x15;\n  uVar6 = uVar7 - 0x3ff;\n  uVar3 = param_2;\n  if ((int)uVar6 < 0x14) {\n    if ((int)uVar6 < 0) {\n      if ((param_2 & 0x7fffffff | param_1) == 0) {\n        return CONCAT44(param_2,param_1);\n      }\n      uVar3 = param_2 & 0xfffff | param_1;\n      iVar1 = ((int)param_2 >> 0x1f) * -8;\n      uVar2 = *(undefined4 *)(&DAT_08007430 + iVar1);\n      uVar4 = *(undefined4 *)(&DAT_08007434 + iVar1);\n      uVar8 = calculate_multiplication_division_0800016c(param_1,(-uVar3 | uVar3) >> 0xc & 0x80000 | param_2 & 0xfffe0000,uVar2,\n                           uVar4,param_1,param_2,param_3);\n      uVar8 = calculate_product_08000168((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),uVar2,uVar4);\n      return CONCAT44((uint)((ulonglong)uVar8 >> 0x20) & 0x7fffffff | param_2 & 0x80000000,\n                      (int)uVar8);\n    }\n    uVar7 = 0xfffff >> (uVar6 & 0xff);\n    if ((param_2 & uVar7 | param_1) == 0) {\n      return CONCAT44(param_2,param_1);\n    }\n    uVar7 = uVar7 >> 1;\n    uVar5 = param_2 & uVar7 | param_1;\n    if (uVar5 != 0) {\n      if (uVar6 == 0x13) {\n        uVar5 = 0x80000000;\n      }\n      else {\n        uVar5 = 0;\n      }\n      uVar3 = 0x40000 >> (uVar6 & 0xff) | param_2 & ~uVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)uVar6) {\n      if (uVar6 != 0x400) {\n        return CONCAT44(param_2,param_1);\n      }\n      uVar8 = calculate_multiplication_division_0800016c();\n      return uVar8;\n    }\n    uVar7 = uVar7 - 0x413;\n    uVar6 = 0xffffffff >> (uVar7 & 0xff);\n    if ((param_1 & uVar6) == 0) {\n      return CONCAT44(param_2,param_1);\n    }\n    uVar6 = uVar6 >> 1;\n    uVar5 = param_1;\n    if ((param_1 & uVar6) != 0) {\n      uVar5 = 0x40000000 >> (uVar7 & 0xff) | param_1 & ~uVar6;\n    }\n  }\n  iVar1 = ((int)param_2 >> 0x1f) * -8;\n  uVar2 = *(undefined4 *)(&DAT_08007430 + iVar1);\n  uVar4 = *(undefined4 *)(&DAT_08007434 + iVar1);\n  uVar8 = calculate_multiplication_division_0800016c(uVar5,uVar3,uVar2,uVar4,param_1,param_2,param_3);\n  uVar8 = calculate_product_08000168((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),uVar2,uVar4);\n  return uVar8;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "FUNC_080070b0"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_final_result_080071c0",
            "code": "\nundefined8 calculate_final_result_080071c0(uint input_1,uint input_2,int modifier,undefined4 config)\n\n{\n  uint shifted_count;\n  undefined4 value_1;\n  int sum;\n  undefined4 value_2;\n  uint upper_bits;\n  undefined8 result;\n  \n  result = CONCAT44(input_2,input_1);\n  shifted_count = (input_2 << 1) >> 0x15;\n  if (shifted_count == 0) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return result;\n    }\n    result = perform_calculation_080004d0(input_1,input_2,0,0x43500000);\n    if (-0xc351 < modifier) {\n      shifted_count = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    value_1 = 0xc2f8f359;\n    value_2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_count == 0x7ff) {\n      result = calculate_multiplication_division_0800016c(input_1,input_2,input_1,input_2,config);\n      return result;\n    }\nLAB_08007210:\n    upper_bits = (uint)((ulonglong)result >> 0x20);\n    value_1 = (undefined4)result;\n    sum = shifted_count + modifier;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(upper_bits & 0x800fffff | sum * 0x100000,value_1);\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n        result = CONCAT44(upper_bits & 0x800fffff | (sum + 0x36) * 0x100000,value_1);\n        value_1 = 0;\n        value_2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (modifier < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,value_1,upper_bits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,value_1,upper_bits);\n    value_1 = 0x8800759c;\n    value_2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = perform_calculation_080004d0((int)result,(int)((ulonglong)result >> 0x20),value_1,value_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_final_result_080071c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "modifier",
                "param_4": "config",
                "uVar1": "shifted_count",
                "uVar2": "value_1",
                "iVar3": "sum",
                "uVar4": "value_2",
                "uVar5": "upper_bits",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_pointer_080072ac",
            "code": "\nundefined4 get_data_pointer_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_pointer_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_and_return_080072b8",
            "code": "\nvoid updateDataAndReturn_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_and_return_080072b8",
                "param_1": "amount"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 159035,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}