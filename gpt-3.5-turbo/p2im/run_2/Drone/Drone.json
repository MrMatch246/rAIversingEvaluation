{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "FUNC_080050fc"
            },
            "code": "\nint FUNC_080050fc(undefined4 *param_1,int *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 *puVar4;\n  int *piVar5;\n  bool bVar6;\n  byte *pbVar7;\n  byte *pbVar8;\n  undefined4 *unaff_r9;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar2 = allocate_memory_block_08005714(param_1,0x40);\n    *param_2 = iVar2;\n    param_2[4] = iVar2;\n    if (iVar2 == 0) {\n      *param_1 = 0xc;\n      return -1;\n    }\n    param_2[5] = 0x40;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar7 = param_3;\nLAB_08005146:\n  pbVar8 = pbVar7;\n  if (*pbVar8 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  pbVar7 = pbVar8 + 1;\n  if (*pbVar8 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  iVar2 = (int)pbVar8 - (int)param_3;\n  if (iVar2 != 0) {\n    iVar3 = reverse_and_copy_string_08005044(param_1,param_2,param_3,iVar2);\n    if (iVar3 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar2;\n  }\n  if (*pbVar8 == 0) goto LAB_080052ac;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar7 = pbVar8 + 1;\n  while( true ) {\n    iVar2 = find_char_in_string_08005614(PTR_DAT_080052d0,*pbVar7);\n    puVar1 = PTR_DAT_080052d4;\n    param_3 = pbVar7 + 1;\n    if (iVar2 == 0) break;\n    local_88 = 1 << (iVar2 - (int)PTR_DAT_080052d0 & 0xffU) | local_88;\n    pbVar7 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar7 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar2 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar2) goto LAB_080051ee;\n    local_7c = -iVar2;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar6 = false;\n    iVar2 = local_7c;\n    param_3 = pbVar7;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar2 = iVar2 * 10 + (*param_3 - 0x30);\n      bVar6 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar6) {\nLAB_080051ee:\n      local_7c = iVar2;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar6 = false;\n      iVar2 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar2 = iVar2 * 10 + (*param_3 - 0x30);\n        bVar6 = true;\n      }\n      if (bVar6) {\n        local_84 = iVar2;\n      }\n    }\n  }\n  iVar2 = find_char_in_string_08005614(PTR_DAT_080052d4,*param_3,3);\n  if (iVar2 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar2 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar2 = find_char_in_string_08005614(PTR_s_efgEFG_080052d8,local_70,6);\n  if (iVar2 == 0) {\n    puVar4 = (undefined4 *)FUNC_080053d4(param_1,&local_88,param_2,DAT_080052e0,&local_8c);\n  }\n  else {\n    puVar4 = param_1;\n    if (DAT_080052dc == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      puVar4 = unaff_r9;\n      goto LAB_08005260;\n    }\n  }\n  if (puVar4 == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  local_74 = local_74 + (int)puVar4;\n  pbVar7 = param_3;\n  unaff_r9 = puVar4;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "FUN_080053d4",
                "FUN_08005614",
                "FUN_08005044",
                "FUN_08005714"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080050fc",
            "calling": [
                "FUN_08004ffc"
            ],
            "imported": false,
            "current_name": "FUNC_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "store_parameter_in_pointer_08003320",
                "param_1": "parameter"
            },
            "code": "void store_parameter_in_pointer_08003320(void* parameter)\n{\n  *(void**)PTR_DAT_08003328 = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "store_parameter_in_pointer_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "decode_and_xor_08004410",
                "param_1": "key",
                "param_2": "buffer_size",
                "param_3": "buffer",
                "local_10": "ptr_dat",
                "local_c": "masked_buffer_size",
                "uStack_8": "buffer"
            },
            "code": "void decode_and_xor_08004410(uint8_t key, uint8_t* buffer, uint32_t buffer_size) {\n  uint32_t ptr_dat = *(uint32_t*)PTR_DAT_08004430;\n  uint16_t ptr_dat_offset = *(uint16_t*)(PTR_DAT_08004430 + 4);\n  uint32_t masked_buffer_size = buffer_size & 0xffff0000 | ptr_dat_offset;\n  uint8_t* uStack_8 = buffer;\n  decode_and_xor_08004410_08004300(key, &ptr_dat, 6);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004410"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "update_bitmask_08001264",
                "param_1": "bitmask",
                "param_2": "data",
                "puVar1": "ptr1",
                "uVar2": "bit_mask",
                "uVar3": "data_value",
                "uVar4": "index",
                "uVar5": "var1",
                "uVar6": "bit_index",
                "iVar7": "var5",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "unaff_r10": "ptr2"
            },
            "code": "void update_bitmask_08001264(uint *bitmask, uint *data)\n{\n    uint *ptr1;\n    uint bit_index;\n    uint data_value;\n    uint bitmask_value;\n    uint index;\n    uint bit_mask;\n    int var1;\n    uint var2;\n    uint var3;\n    uint var4;\n    uint *ptr2;\n    int var5;\n    uint var6;\n    uint var7;\n    uint var8;\n    uint var9;\n    uint *ptr3;\n    int var10;\n    bitmask_value = DAT_08001404;\n    data_value = DAT_08001418;\n    bit_mask = DAT_08001414;\n    index = 0;\n    var6 = 0;\n    do {\n        var7 = 1 << (var6 & 0xff);\n        var2 = var7 & *data;\n        if (var7 == var2) {\n            var3 = data[1];\n            if (var3 == 0x12) {\n                index = data[3] + 0xc;\n            }\n            else if (var3 < 0x13) {\n                if (var3 == 2) {\n                    index = data[3] + 8;\n                }\n                else if (var3 < 3) {\n                    if (var3 == 0) goto LAB_080013be;\n                    if (var3 == 1) {\n                        index = data[3];\n                    }\n                }\n                else if (var3 == 3) {\n                    index = 0;\n                }\n                else if (var3 == 0x11) {\n                    index = data[3] + 4;\n                }\n            }\n            else {\n                if (var3 != bitmask_value) {\n                    if (bitmask_value < var3) {\n                        if ((var3 != bit_mask) && (var8 = DAT_08001420, var3 != data_value)) goto LAB_080013b8;\n                    }\n                    else if (var3 != DAT_0800141c) {\n                        var8 = DAT_0800141c + 0x10000;\n                        if (var3 != var8) goto LAB_080012a8;\n                    }\n                }\n            }\nLAB_080013be:\n            var4 = data[2];\n            if (var4 == 0) {\n                index = 4;\n            }\n            else {\n                if (var4 == 1) {\n                    bitmask[4] = var7;\n                }\n                if (var4 != 1) {\n                    bitmask[5] = var7;\n                }\n                index = 8;\n            }\n        }\nLAB_080012a8:\n        if (var2 < 0x100) {\n            var7 = *bitmask;\n            var3 = var6 << 2;\n            ptr3 = bitmask;\n        }\n        else {\n            var7 = bitmask[1];\n            var3 = (var6 + 0x3ffffff8) * 4;\n        }\n        if (0xff < var2) {\n            ptr3 = bitmask + 1;\n        }\n        *ptr3 = var7 & ~(0xf << (var3 & 0xff)) | index << (var3 & 0xff);\n        ptr3 = (uint *)data[1];\n        if (((uint)ptr3 & 0x10000000) != 0) {\n            *(uint *)(DAT_08001408 + 0x18) = *(uint *)(DAT_08001408 + 0x18) | 1;\n            var9 = (var6 & 3) << 2;\n            if (bitmask == DAT_0800140c) {\n                var5 = 0;\n            }\n            else if (bitmask == DAT_0800140c + 0x100) {\n                var5 = 1;\n            }\n            else if (bitmask == DAT_0800140c + 0x200) {\n                var5 = 2;\n            }\n            else if (bitmask == DAT_0800140c + 0x300) {\n                var5 = 3;\n            }\n            else {\n                var5 = 4;\n            }\n            *(uint *)(&DAT_40010008 + (var6 & 0xfffffffc)) = var5 << var9 | *(uint *)(&DAT_40010008 + (var6 & 0xfffffffc)) & ~(0xf << var9);\n            if (((uint)ptr3 & 0x10000) == 0) {\n                var7 = *ptr1 & ~var2;\n            }\n            else {\n                var7 = *ptr1 | var2;\n            }\n            *ptr1 = var7;\n            if (((uint)ptr3 & 0x20000) == 0) {\n                var7 = ptr1[1] & ~var2;\n            }\n            else {\n                var7 = ptr1[1] | var2;\n            }\n            ptr1[1] = var7;\n            if (((uint)ptr3 & 0x100000) == 0) {\n                var7 = ptr1[2] & ~var2;\n            }\n            else {\n                var7 = ptr1[2] | var2;\n            }\n            ptr1[2] = var7;\n            if (((uint)ptr3 & 0x200000) == 0) {\n                var2 = ptr1[3] & ~var2;\n            }\n            else {\n                var2 = var2 | ptr1[3];\n            }\n            ptr1[3] = var2;\n        }\n        var6 = var6 + 1;\n        if (var6 == 0x10) {\n            return;\n        }\n    } while (true);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c",
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "update_bitmask_08001264"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "process_imu_data_and_store_in_pointer_08002ea0",
                "param_1": "imu_data",
                "param_2": "imu_data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "extraout_r1": "hashed_imu_data"
            },
            "code": "void process_imu_data_and_store_in_pointer_08002ea0(undefined4 imu_data, undefined4 imu_data_size, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 decoded_imu_data = decode_and_check_imu_data();\n  undefined4 hashed_imu_data = decode_and_hash_data();\n  store_parameter_in_pointer(decoded_imu_data, DAT_08002ebc);\n  store_parameter_in_pointer(imu_data, imu_data_size, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08002cb0",
                "FUN_08003314",
                "FUN_08002ad0",
                "FUN_08003320"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_imu_data_and_store_in_pointer_08002ea0"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "quotient_masked",
                "uVar5": "divisor_shifted_diff",
                "uVar6": "divisor_shifted",
                "uVar7": "result",
                "uVar8": "result",
                "PTR_DAT_080071b8": "PTR_DAT_080071b8",
                "DAT_080071bc": "DAT_080071bc",
                "param_3": "param_3"
            },
            "code": "ulonglong calculate_result_080070b0(uint dividend, uint divisor, undefined4 param_3)\n{\n    uint divisor_shifted = (divisor << 1) >> 0x15;\n    int divisor_shifted_diff = divisor_shifted - 0x3ff;\n    uint quotient = divisor;\n    if ((int)divisor_shifted_diff < 0x14) {\n        if ((int)divisor_shifted_diff < 0 && (divisor & 0x7fffffff | dividend) == 0) {\n            return CONCAT44(divisor, dividend);\n        }\n        uint quotient_masked = divisor & 0xfffff | dividend;\n        undefined4 uVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)divisor >> 0x1f) * -8);\n        undefined4 uVar2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)divisor >> 0x1f) * -8) + 4);\n        undefined8 uVar3 = FUNC_0800016c(dividend, (-quotient_masked | quotient_masked) >> 0xc & 0x80000 | divisor & 0xfffe0000, uVar1, uVar2, dividend, divisor, param_3);\n        ulonglong result = FUNC_08000168((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), uVar1, uVar2);\n        return result & 0xffffffff | (ulonglong)((uint)(result >> 0x20) & 0x7fffffff | divisor & 0x80000000) << 0x20;\n    }\n    else {\n        if (0x33 < (int)divisor_shifted_diff) {\n            if (divisor_shifted_diff != 0x400) {\n                return CONCAT44(divisor, dividend);\n            }\n            ulonglong result = FUNC_0800016c();\n            return result;\n        }\n        divisor_shifted_diff = divisor_shifted - 0x413;\n        uint quotient_masked = dividend;\n        uint quotient_mask = 0xffffffff >> (divisor_shifted_diff & 0xff);\n        if ((dividend & quotient_mask) == 0) {\n            return CONCAT44(divisor, dividend);\n        }\n        quotient_mask = quotient_mask >> 1;\n        if ((dividend & quotient_mask) != 0) {\n            quotient_masked = 0x40000000 >> (divisor_shifted_diff & 0xff) | dividend & ~quotient_mask;\n        }\n        undefined4 uVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)divisor >> 0x1f) * -8);\n        undefined4 uVar2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)divisor >> 0x1f) * -8) + 4);\n        undefined8 uVar3 = FUNC_0800016c(quotient_masked, quotient, uVar1, uVar2, dividend, divisor, param_3);\n        ulonglong result = FUNC_08000168((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), uVar1, uVar2);\n        return result;\n    }\n}",
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "calculate_result_080070b0"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "code": "void set_param_value_08001424(int param_address, int value, int is_shifted)\n{\n  if (is_shifted == 0)\n  {\n    value = value << 16;\n  }\n  *(int *)(param_address + 16) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "set_param_value_08001424"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_end_of_string_08001028",
                "in_CY": "current_char",
                "concatenate_params_08001004": "concatenate_parameters"
            },
            "code": "bool is_end_of_string_08001028(void)\n{\n  char current_char;\n  concatenate_parameters();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "FUN_08002ee8",
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001028"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nlonglong FUNC_08005900(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  longlong lVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined4 local_50;\n  undefined *local_4c;\n  undefined4 local_48;\n  undefined4 uStack_44;\n  undefined4 local_40;\n  undefined4 uStack_3c;\n  undefined8 local_38;\n  int local_30;\n  \n  lVar9 = FUNC_08006228();\n  puVar2 = PTR_DAT_08005ba8;\n  uVar7 = (undefined4)((ulonglong)lVar9 >> 0x20);\n  uVar8 = (undefined4)lVar9;\n  cVar1 = *PTR_DAT_08005ba8;\n  if (cVar1 == -1) {\n    return lVar9;\n  }\n  local_30 = is_valid_08000a04(param_3,param_4,param_3,param_4);\n  if (local_30 != 0) {\n    return lVar9;\n  }\n  iVar3 = is_valid_08000a04(param_1,param_2,param_1,param_2);\n  local_48 = param_1;\n  uStack_44 = param_2;\n  local_40 = param_3;\n  uStack_3c = param_4;\n  if (iVar3 == 0) {\n    iVar4 = is_input_valid_080009a0(param_1,param_2,0,0);\n    if (iVar4 != 0) {\n      local_30 = is_input_valid_080009a0(param_3,param_4,0,0);\n      if (local_30 != 0) {\n        local_50 = 1;\n        local_4c = PTR_DAT_08005bac;\n        local_38 = 0;\n        local_30 = iVar3;\n        if (cVar1 != '\\0') {\n          local_38 = (ulonglong)DAT_08005bb0 << 0x20;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      iVar3 = set_sign_bit_08007092(param_3,param_4);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = is_end_of_string_080009b4(param_3,param_4,0,0);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      local_50 = 1;\n      local_4c = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') goto LAB_08005a22;\n      local_38 = (ulonglong)DAT_08005bb4 << 0x20;\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    iVar3 = set_sign_bit_08007092(uVar8,uVar7);\n    if (((iVar3 != 0) || (iVar4 = set_sign_bit_08007092(param_1,param_2), iVar4 == 0)) ||\n       (iVar4 = set_sign_bit_08007092(param_3,param_4), iVar4 == 0)) {\n      iVar3 = is_input_valid_080009a0(uVar8,uVar7,0,0);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = set_sign_bit_08007092(param_1,param_2);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      iVar3 = set_sign_bit_08007092(param_3,param_4);\n      if (iVar3 == 0) {\n        return lVar9;\n      }\n      local_50 = 4;\n      local_4c = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    local_30 = is_valid_08000a04(uVar8,uVar7);\n    cVar1 = *puVar2;\n    if (local_30 != 0) {\n      local_4c = PTR_DAT_08005bac;\n      local_50 = 1;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = FUNC_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      local_50 = 1;\n      local_38 = 0;\n      local_4c = PTR_DAT_08005bac;\n      goto LAB_08005978;\n    }\n    local_4c = PTR_DAT_08005bac;\n    local_50 = 3;\n    if (cVar1 == '\\0') {\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = is_end_of_string_080009b4(param_1,param_2,0,0);\n      if (iVar3 != 0) {\n        uVar10 = FUNC_080004d0(param_3,param_4,0,DAT_08005bbc);\n        uVar11 = calculate_result_080070b0();\n        iVar3 = is_input_valid_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = return_zero_0800709e(&local_50);\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\n      local_38._0_4_ = 0;\n      local_38._4_4_ = DAT_08005bc4;\n      iVar3 = is_end_of_string_080009b4(param_1,param_2,0,0);\n      if (iVar3 != 0) {\n        uVar10 = FUNC_080004d0(param_3,param_4,0,DAT_08005bbc);\n        uVar11 = calculate_result_080070b0();\n        iVar3 = is_input_valid_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0;\n          local_38._4_4_ = DAT_08005bb4;\n        }\n      }\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)get_value_from_pointer_to_pointer_080072ac();\n    uVar8 = 0x22;\n  }\n  else {\n    iVar3 = is_input_valid_080009a0(param_3,param_4,0,0);\n    if (iVar3 == 0) {\n      return lVar9;\n    }\n    local_50 = 1;\n    local_4c = PTR_DAT_08005bac;\n    local_38 = (ulonglong)DAT_08005bb0 << 0x20;\n    if (cVar1 == '\\x02') {\n      return (ulonglong)DAT_08005bb0 << 0x20;\n    }\nLAB_08005978:\n    iVar3 = return_zero_0800709e(&local_50);\n    if (iVar3 != 0) goto LAB_080059d0;\nLAB_08005a34:\n    puVar6 = (undefined4 *)get_value_from_pointer_to_pointer_080072ac();\n    uVar8 = 0x21;\n  }\n  *puVar6 = uVar8;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)get_value_from_pointer_to_pointer_080072ac();\n    *piVar5 = local_30;\n  }\n  return local_38;\n}\n\n",
            "called": [
                "FUN_08000a04",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_08007092",
                "FUN_0800709e",
                "FUN_080004d0",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_080070b0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "mask",
                "uVar3": "temp3",
                "in_r12": "temp4",
                "bVar4": "is_input4_equal_mask"
            },
            "code": "ulonglong calculate_result_080006ac(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1, temp2, temp3, temp4;\n  uint mask = input4 >> 0x14;\n  bool is_input4_equal_mask = (input4 == mask);\n  bool is_input1_or_input2_shifted_by_1_equal_to_0 = ((input1 | (input2 << 1)) == 0);\n  bool is_input3_or_input4_shifted_by_1_equal_to_0 = ((input3 | (input4 << 1)) == 0);\n  if (input4 != input3 && input4 != mask)\n  {\n    if (is_input1_or_input2_shifted_by_1_equal_to_0 && is_input3_or_input4_shifted_by_1_equal_to_0)\n    {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input3 == 0)\n    {\n      temp3 = input2 & 0x80000000;\n      do\n      {\n        temp1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 |= temp3;\n      if (mask != 0)\n      {\n        return CONCAT44(input2, input1);\n      }\n    }\n    do\n    {\n      temp4 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp4 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2, input1);\n  }\n  bool is_input1_or_input2_shifted_by_1_equal_to_0 = ((input1 | (input2 << 1)) == 0);\n  if (is_input1_or_input2_shifted_by_1_equal_to_0)\n  {\n    input2 = input4;\n    input1 = input3;\n  }\n  bool is_input3_or_input4_shifted_by_1_equal_to_0 = ((input3 | (input4 << 1)) == 0);\n  temp3 = input2;\n  if (((!is_input3_or_input4_shifted_by_1_equal_to_0) && ((input4 != input3 || ((input1 | (input2 << 0xc)) == 0)))) && ((mask != input4 || (input1 = input3, temp3 = input4, (input3 | (input4 << 0xc)) == 0))))\n  {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "FUN_080004d0"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "check_input_08001828",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "data",
                "param_6": "data_len",
                "param_7": "param_7",
                "iVar1": "val1",
                "iVar2": "val2",
                "puVar3": "ptr",
                "uVar4": "val",
                "set_flag_08001530": "set_flag",
                "check_flag_080014e2": "check_flag",
                "*(undefined *)(param_1 + 0xd)": "flag",
                "*(undefined *)((int)param_1 + 0x35)": "status",
                "*(undefined *)((int)param_1 + 0x36)": "unused"
            },
            "code": "uint32_t check_input_08001828(uint32_t **input, uint32_t param_2, uint32_t param_3, uint32_t param_4, uint8_t *data, uint16_t data_len, uint32_t param_7) {\n    int32_t val1 = get_val_from_ptr_0800115c();\n    if (*(char *)((int)input + 0x35) != ' ') {\n        return 2;\n    }\n    if (data == NULL || data_len == 0) {\n        return 1;\n    }\n    do {\n        uint32_t *ptr = *input;\n        if ((~ptr[6] & 2) != 0) {\n            if (*(char *)(input + 0xd) == '\\x01') {\n                return 2;\n            }\n            uint32_t val = *ptr;\n            *(undefined *)(input + 0xd) = 1;\n            *ptr = val & 0xfffff7ff;\n            *(undefined *)((int)input + 0x35) = 0x21;\n            *(undefined *)((int)input + 0x36) = 0x40;\n            input[0xe] = NULL;\n            int32_t ret = set_flag_08001530(input, param_2, param_3, param_4, param_7);\n            if (ret != 0) {\n                *(undefined *)(input + 0xd) = 0;\n                if (input[0xe] == (uint32_t *)0x4) {\n                    return 1;\n                }\n                return 3;\n            }\n            goto LAB_080018e2;\n        }\n        int32_t val2 = get_val_from_ptr_0800115c();\n    } while ((uint32_t)(val2 - val1) < 0x2711);\n    *(undefined *)(input + 0xd) = 0;\n    *(undefined *)((int)input + 0x35) = 0x20;\n    return 2;\n    while (data_len != 0) {\nLAB_080018e2:\n        int32_t ret = check_flag_080014e2(input, param_7);\n        if (ret != 0) {\n            goto LAB_080018ee;\n        }\n        uint32_t *ptr = *input;\n        ptr[4] = (uint32_t)*data;\n        if ((int32_t)(ptr[5] << 0x1d) < 0) {\n            if ((uint16_t)(data_len - 1) == 0) {\n                break;\n            }\n            data_len -= 2;\n            ptr[4] = (uint32_t)data[1];\n            data += 2;\n        }\n        else {\n            data++;\n            data_len--;\n        }\n    }\n    int32_t ret = check_flag_080014e2(input, param_7);\n    if (ret == 0) {\n        **input = **input | 0x200;\n        *(undefined *)(input + 0xd) = 0;\n        *(undefined *)((int)input + 0x35) = 0x20;\n        *(undefined *)((int)input + 0x36) = 0;\n        return 0;\n    }\nLAB_080018ee:\n    if (input[0xe] == (uint32_t *)0x4) {\n        **input = **input | 0x200;\n        return 1;\n    }\n    return 3;\n}",
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "FUN_0800403c"
            ],
            "imported": false,
            "current_name": "check_input_08001828"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "clear_data_buffer_08004c64",
                "puVar1": "data_buffer_ptr",
                "iVar2": "buffer_index"
            },
            "code": "void clear_data_buffer_08004c64(void)\n{\n  undefined *data_buffer_ptr;\n  int buffer_index = 0;\n  data_buffer_ptr = PTR_DAT_08004c6c;\n  *(undefined2 *)(PTR_DAT_08004c6c + 0x800) = 0;\n  *(undefined2 *)(data_buffer_ptr + 0x802) = 0;\n  *(undefined2 *)(data_buffer_ptr + 0x804) = 0;\n  do {\n    data_buffer_ptr[buffer_index] = 0;\n    buffer_index++;\n  } while (buffer_index != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "FUN_08004c70"
            ],
            "imported": false,
            "current_name": "clear_data_buffer_08004c64"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nundefined4 FUNC_08001b58(int *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  \n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1f < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar5 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar5 & 0x1f)) << 0x1f) < 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      iVar4 = param_1[1];\n      if (iVar4 == 0x10000) {\nLAB_08001c1e:\n        uVar5 = *puVar1 | 0x10000;\n      }\n      else {\n        if (iVar4 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          iVar4 = get_value_from_pointer_0800115c();\n          while (uVar5 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n            iVar3 = get_value_from_pointer_0800115c();\n            if (100 < (uint)(iVar3 - iVar4)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (iVar4 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar5 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar5;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f))\n      {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (100 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1e < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar5 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar5 & 0x1f)) << 0x1f) < 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[4] == 0) {\n        iVar4 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n        iVar4 = get_value_from_pointer_0800115c();\n        while (uVar5 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n          iVar3 = get_value_from_pointer_0800115c();\n          if (2 < (uint)(iVar3 - iVar4)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar4 * 4 + 0x42420000) = 1;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n    uVar5 = count_leading_zeroes(0x1f000000);\n    *puVar1 = param_1[5] << (uVar5 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if (*param_1 << 0x1c < 0) {\n    if (param_1[6] == 0) {\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar4 * 4) = 0;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar4 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar4 * 4) = 1;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar5 & 0x1f)) << 0x1f)) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n      do_nothing_08001168(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < *param_1 << 0x1d) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  iVar4 = get_value_from_pointer_0800115c();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (100 < (uint)(iVar3 - iVar4)) {\n      return 3;\n    }\n  }\n  iVar4 = param_1[3];\n  if (iVar4 == 1) {\nLAB_08001e1a:\n    uVar5 = puVar1[8] | 1;\n  }\n  else {\n    if (iVar4 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      iVar4 = get_value_from_pointer_0800115c();\n      while (uVar5 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n        iVar3 = get_value_from_pointer_0800115c();\n        if (5000 < (uint)(iVar3 - iVar4)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (iVar4 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar5 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar5;\n  iVar4 = get_value_from_pointer_0800115c();\n  while (uVar5 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar5 & 0x1f)) << 0x1f)\n        ) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (5000 < (uint)(iVar3 - iVar4)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  if (param_1[7] == 0) {\n    return 0;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (param_1[7] != 2) {\n      iVar4 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n      iVar4 = get_value_from_pointer_0800115c();\n      do {\n        uVar5 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n          return 0;\n        }\n        iVar3 = get_value_from_pointer_0800115c();\n      } while ((uint)(iVar3 - iVar4) < 3);\n      return 3;\n    }\n    iVar4 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar4 * 4 + 0x42420000) = 0;\n    iVar4 = get_value_from_pointer_0800115c();\n    do {\n      uVar5 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f)) {\n        uVar5 = param_1[8];\n        if (uVar5 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | param_1[2];\n        }\n        puVar1[1] = uVar5 | param_1[9] | puVar1[1] & 0xffc2ffff;\n        iVar4 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar4 * 4 + 0x42420000) = 1;\n        iVar4 = get_value_from_pointer_0800115c();\n        do {\n          uVar5 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar5 & 0x1f)) << 0x1f) < 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_0800115c();\n        } while ((uint)(iVar3 - iVar4) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_0800115c();\n    } while ((uint)(iVar3 - iVar4) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_sign_bit_08007092",
                "param_1": "num",
                "param_2": "sign_bit_mask"
            },
            "code": "uint set_sign_bit_08007092(uint num, uint sign_bit_mask){\n    uint signed_num = num | sign_bit_mask;\n    uint shifted_num = signed_num + 0x100000 >> 0x1f;\n    return shifted_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "set_sign_bit_08007092"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "data_byte",
                "iVar2": "data_start",
                "uVar3": "data_byte",
                "uVar4": "data_value",
                "sVar5": "counter",
                "puVar6": "data_ptr",
                "puVar7": "data_ptr_next",
                "bVar8": "is_data_byte_32"
            },
            "code": "int process_data_0800290c(int *data)\n{\n    if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n        return 2;\n    }\n    int data_start = *data;\n    ushort *data_ptr = (ushort *)data[10];\n    if (data[2] == 0x1000) {\n        if (data[4] == 0) {\n            data_ptr[0] = (ushort)((uint)(*(int *)(data_start + 4) << 0x17) >> 0x17);\n            data_ptr++;\n        }\n        else {\n            data_ptr[0] = (ushort)*(int *)(data_start + 4) & 0xff;\n            data_ptr = (ushort *)((int)data_ptr + 1);\n        }\n        data[10] = (int)data_ptr;\n    }\n    else {\n        if (data[4] == 0) {\n            *(byte *)data_ptr = (byte)*(undefined4 *)(data_start + 4);\n            data[10] = (int)data_ptr + 1;\n        }\n        else {\n            *(byte *)data_ptr = (byte)*(undefined4 *)(data_start + 4) & 0x7f;\n            data[10] = (int)data_ptr + 1;\n        }\n    }\n    short counter = *(short *)((int)data + 0x2e) + -1;\n    *(short *)((int)data + 0x2e) = counter;\n    if (counter == 0) {\n        data_start = *data;\n        *(uint *)(data_start + 0xc) &= 0xffffffdf;\n        uint data_byte = (uint)*(byte *)((int)data + 0x39);\n        bool is_data_byte_32 = data_byte == 0x32;\n        if (!is_data_byte_32) {\n            data_byte = *(uint *)(data_start + 0xc) & 0xfffffeff;\n        }\n        else {\n            data_byte = 0x12;\n        }\n        if (!is_data_byte_32) {\n            *(uint *)(data_start + 0xc) = data_byte;\n            data_byte = *(uint *)(data_start + 0x14) & 0xfffffffe;\n        }\n        if (!is_data_byte_32) {\n            *(uint *)(data_start + 0x14) = data_byte;\n            data_byte = 1;\n        }\n        *(char *)((int)data + 0x39) = (char)data_byte;\n        increment_and_store_08004c30();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "process_data_0800290c"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28",
                "calculate_sensor_data_hash_08002b48": "calculate_sensor_data_hash",
                "copy_data_to_buffer_and_calculate_hash_08002bf0": "copy_data_to_buffer_and_calculate_hash",
                "decode_and_store_data_08002d88": "decode_and_store_data",
                "thunk_get_value_from_pointer_0800115c": "get_value_from_pointer",
                "PTR_DAT_08003000": "SENSOR_DATA_PTR_1",
                "PTR_DAT_08003004": "SENSOR_DATA_PTR_2",
                "calculate_hash_08000c3c": "calculate_hash",
                "FUNC_08000e54": "store_parameter_in_pointer",
                "PTR_DAT_0800300c": "PARAMETER_PTR_1",
                "PTR_DAT_08003018": "PARAMETER_PTR_2",
                "PTR_DAT_08003014": "PARAMETER_PTR_3",
                "PTR_DAT_08003010": "PARAMETER_PTR_4",
                "FUNC_08003330": "process_data",
                "PTR_DAT_08003020": "SENSOR_DATA_PTR_3",
                "PTR_DAT_0800301c": "SENSOR_DATA_PTR_4",
                "PTR_DAT_08003024": "SENSOR_DATA_PTR_5",
                "PTR_DAT_08003028": "SENSOR_DATA_PTR_6",
                "extract_bits_from_uint_08001078": "extract_bits_from_uint",
                "calculate_average_08002ed4": "calculate_average",
                "FUNC_08000cec": "store_average_in_pointer",
                "calculate_new_value_08002ec0": "calculate_new_value",
                "check_and_concatenate_params_08002ee8": "check_and_concatenate_params"
            },
            "code": "void process_sensor_data_08002f28(void)\n{\n  int sensor_data_hash = calculate_sensor_data_hash();\n  int buffer_hash = copy_data_to_buffer_and_calculate_hash();\n  decode_and_store_data();\n  int value = get_value_from_pointer();\n  int* ptr1 = PTR_DAT_08003000;\n  int* ptr2 = PTR_DAT_08003004;\n  int ptr2_val = *ptr2;\n  *ptr1 = value;\n  int parameter_hash = calculate_hash(value - ptr2_val);\n  store_parameter_in_pointer();\n  int* ptr3 = PTR_DAT_0800300c;\n  int* ptr4 = PTR_DAT_08003018;\n  int ptr4_val1 = *(int*)ptr4;\n  int ptr4_val2 = *(int*)(ptr4 + 4);\n  int ptr4_val3 = *(int*)(ptr4 + 8);\n  int ptr3_val1 = *(int*)ptr3;\n  int ptr3_val2 = *(int*)(ptr3 + 4);\n  int ptr3_val3 = *(int*)(ptr3 + 8);\n  process_data(ptr4_val1 - 0x80000000, ptr4_val2 - 0x80000000, ptr4_val3, PTR_DAT_08003018 + 4, *PTR_DAT_08003018, ptr3_val3 - 0x80000000, *PTR_DAT_08003014, *(int*)(PTR_DAT_08003014 + 4), *(int*)(PTR_DAT_08003014 + 8), PTR_DAT_08003014);\n  short* ptr5 = PTR_DAT_08003020;\n  short* ptr6 = PTR_DAT_0800301c;\n  short* ptr7 = PTR_DAT_08003024;\n  short ptr6_val1 = *(short*)ptr6;\n  short ptr6_val2 = *(short*)(ptr6 + 2);\n  short ptr6_val3 = *(short*)(ptr6 + 4);\n  *ptr5 = (short)((int)*ptr7 / 100);\n  *(short*)(ptr5 + 2) = (short)((int)ptr6_val2 / 100);\n  *(short*)(ptr5 + 4) = (short)((int)ptr6_val1 / 100);\n  *(short*)(ptr5 + 6) = *(short*)ptr7;\n  *(short*)(ptr5 + 8) = *(short*)(ptr7 + 2);\n  *(short*)(ptr5 + 10) = *(short*)(ptr7 + 4);\n  *(short*)(ptr5 + 12) = *(short*)PTR_DAT_08003028;\n  *(short*)(ptr5 + 14) = *(short*)(PTR_DAT_08003028 + 2);\n  *(short*)(ptr5 + 16) = extract_bits_from_uint();\n  int average = calculate_average();\n  store_average_in_pointer();\n  int new_value1 = calculate_new_value();\n  store_new_value_in_pointer(new_value1);\n  int new_value2 = calculate_new_value();\n  store_new_value_in_pointer(new_value2);\n  check_and_concatenate_params();\n}\n",
            "called": [
                "FUN_08002b48",
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08001078",
                "FUN_08003330",
                "FUN_08003320",
                "FUN_08000c3c",
                "FUN_08002ed4",
                "thunk_FUN_0800115c",
                "FUN_08000e54",
                "FUN_08002bf0",
                "FUN_08002d88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "decode_and_xor_08004384",
                "param_1": "key",
                "param_2": "data",
                "param_3": "length",
                "param_4": "offset",
                "PTR_DAT_080043b8": "ptr",
                "local_14": "local_data",
                "uStack_10": "local_offset",
                "local_c": "masked_param"
            },
            "code": "void decode_and_xor_08004384(uint8_t key, uint32_t* data, uint8_t length, uint16_t offset, uint32_t param) {\n  uint8_t* PTR_DAT_080043b8 = PTR_DAT_080043b8;\n  PTR_DAT_080043b8[4] = 7;\n  PTR_DAT_080043b8[5] = 0;\n  PTR_DAT_080043b8[6] = 0x2a;\n  PTR_DAT_080043b8[7] = 0;\n  uint32_t local_data = *data;\n  uint32_t local_offset = *(uint32_t*)(PTR_DAT_080043b8 + 4);\n  PTR_DAT_080043b8[8] = 0;\n  PTR_DAT_080043b8[9] = 0;\n  PTR_DAT_080043b8[10] = 0;\n  uint32_t masked_param = param & 0xff000000 | (uint32_t)*(uint16_t*)(PTR_DAT_080043b8 + 8);\n  decode_and_xor_08004384_08004300(key, &local_data, length, *(uint16_t*)(PTR_DAT_080043b8 + 8), offset);\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "is_input_valid_080009a0",
                "in_ZR": "input_buffer",
                "check_values_and_return_08000990_08000990": "check_input_values"
            },
            "code": "bool is_input_valid_080009a0(void)\n{\n  char input_buffer;\n  check_input_values();\n  return input_buffer != '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "is_input_valid_080009a0"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "decode_and_copy_data_08003298",
                "puVar1": "src_ptr",
                "puVar2": "dst_ptr",
                "puVar3": "dst_ptr2",
                "iVar4": "i",
                "local_1c": "byte1",
                "local_1b": "byte2"
            },
            "code": "void decode_and_copy_data_08003298(void)\n{\n  unsigned char *src_ptr;\n  unsigned short *dst_ptr;\n  unsigned char byte1;\n  unsigned char byte2;\n  int i;\n  byte1 = 0xee;\n  byte2 = 0x1e;\n  check_input_and_decode_strings(byte1, byte2, 1);\n  thunk_do_nothing(10);\n  src_ptr = s____Src_MS5611_c_08003308;\n  dst_ptr = PTR_DAT_0800330c;\n  *PTR_DAT_08003304 = 8;\n  for (i = 0; i < 16; i++) {\n    byte1 = 0;\n    byte2 = 0;\n    copy_data_to_buffer(0xee, (i + 160) % 65536, &byte1, 2, src_ptr, 124);\n    dst_ptr[i] = (byte1 << 8) | byte2;\n  }\n  for (i = 0; i < 20; i++) {\n    *(unsigned int *)(PTR_DAT_08003310 + i * 4) = 0;\n  }\n}\n",
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "decode_and_copy_data_08003298"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "decode_and_xor_08004300",
                "param_1": "xor_value",
                "param_2": "input_string",
                "param_3": "input_length",
                "uVar1": "xor_result",
                "pbVar2": "current_byte"
            },
            "code": "void decode_and_xor_08004300(uint xor_value, byte* input_string, uint input_length) {\n  uint xor_result;\n  byte* current_byte;\n  decode_string(PTR_DAT_08004344);\n  decode_data(input_length & 0xff);\n  xor_result = input_length & 0xff ^ xor_value;\n  decode_data(xor_value);\n  for (current_byte = input_string; (int)current_byte - (int)input_string < (int)input_length; current_byte++) {\n    decode_data(*current_byte);\n    xor_result = xor_result ^ *current_byte;\n  }\n  decode_data(xor_result);\n  return;\n}",
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "FUN_08004434",
                "FUN_080043f0",
                "FUN_08004458",
                "FUN_08004410",
                "FUN_080043bc",
                "FUN_08004348",
                "FUN_08004384"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_data_to_buffer_08005630",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "buffer_end_ptr",
                "puVar2": "buffer_ptr"
            },
            "code": "void copy_data_to_buffer_08005630(int buffer_start_index, undefined *data, int data_length)\n{\n  undefined *buffer_ptr;\n  undefined *data_ptr;\n  \n  buffer_ptr = (undefined *)(buffer_start_index - 1);\n  data_ptr = data + data_length;\n  for (; data != data_ptr; data++) {\n    buffer_ptr++;\n    *buffer_ptr = *data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *param_10)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  \n  uVar28 = *(undefined4 *)PTR_DAT_080035d8;\n  iVar29 = *(int *)(PTR_DAT_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_DAT_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_DAT_080035d8 + 0xc);\n  uVar2 = FUNC_08000cec(param_1,param_1);\n  uVar3 = FUNC_08000cec(param_2);\n  uVar2 = FUNC_08000adc(uVar2,uVar3);\n  uVar3 = FUNC_08000cec(param_3);\n  FUNC_08000adc(uVar2,uVar3);\n  convert_uint_to_ulonglong_08000428();\n  calculate_and_return_value_08005bc8();\n  uVar2 = calculate_float_bits_08000a30();\n  iVar4 = check_input_string_is_not_empty_08001014(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = FUNC_08000cec(param_7);\n    uVar5 = FUNC_08000cec(param_8);\n    uVar3 = FUNC_08000adc(uVar3,uVar5);\n    uVar5 = FUNC_08000cec(param_9);\n    FUNC_08000adc(uVar3,uVar5);\n    convert_uint_to_ulonglong_08000428();\n    calculate_and_return_value_08005bc8();\n    uVar3 = calculate_float_bits_08000a30();\n    iVar4 = check_input_string_is_not_empty_08001014(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = convert_uint_to_ulonglong_08000428(param_4);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = calculate_float_bits_08000a30();\n      uVar32 = convert_uint_to_ulonglong_08000428(param_5);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = calculate_float_bits_08000a30();\n      uVar32 = convert_uint_to_ulonglong_08000428(param_6);\n      FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = calculate_float_bits_08000a30();\n      iVar4 = FUNC_08000adc(uVar28);\n      uVar8 = FUNC_08000adc(iVar29);\n      iVar9 = FUNC_08000adc(uVar31,uVar31);\n      uVar10 = FUNC_08000adc(uVar30,uVar30);\n      uVar11 = FUNC_08000cec(uVar28);\n      uVar12 = FUNC_08000cec(uVar28,iVar29);\n      uVar13 = FUNC_08000cec(uVar28,uVar31);\n      uVar14 = FUNC_08000cec(iVar29);\n      uVar15 = FUNC_08000cec(iVar29,uVar30);\n      uVar16 = FUNC_08000cec(uVar31,uVar31);\n      uVar17 = FUNC_08000cec(uVar30,uVar30);\n      uVar2 = FUNC_08000e54(0x3f800000,uVar2);\n      uVar3 = FUNC_08000e54(0x3f800000,uVar3);\n      uVar18 = FUNC_08000cec(param_7,uVar3);\n      uVar19 = FUNC_08000cec(param_8,uVar3);\n      uVar3 = FUNC_08000cec(param_9,uVar3);\n      iVar20 = FUNC_08000cec(iVar4,uVar18);\n      uVar21 = FUNC_08000cec(iVar4,uVar19);\n      uVar22 = FUNC_08000cec(iVar4,uVar3);\n      uVar23 = FUNC_08000cec(uVar8,uVar18);\n      uVar24 = FUNC_08000cec(uVar11,uVar18);\n      uVar25 = FUNC_08000cec(uVar30,uVar21);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar31,uVar22);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar14,uVar18);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar8,uVar19);\n      uVar25 = FUNC_08000cec(uVar25,uVar31);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar8,uVar3);\n      uVar25 = FUNC_08000cec(uVar25,uVar30);\n      uVar24 = FUNC_08000adc(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar16,uVar18);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar17,uVar18);\n      uVar24 = FUNC_08000ad8(uVar24,uVar25);\n      uVar25 = FUNC_08000cec(uVar30,iVar20);\n      uVar26 = FUNC_08000cec(uVar11,uVar19);\n      uVar25 = FUNC_08000adc(uVar25,uVar26);\n      uVar22 = FUNC_08000cec(iVar29,uVar22);\n      uVar22 = FUNC_08000ad8(uVar25,uVar22);\n      uVar25 = FUNC_08000cec(uVar31,uVar23);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar14,uVar19);\n      uVar22 = FUNC_08000ad8(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar16,uVar19);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(iVar9,uVar3);\n      uVar25 = FUNC_08000cec(uVar25,uVar30);\n      uVar22 = FUNC_08000adc(uVar22,uVar25);\n      uVar25 = FUNC_08000cec(uVar17,uVar19);\n      uVar22 = FUNC_08000ad8(uVar22,uVar25);\n      uVar24 = FUNC_08000cec(uVar24,uVar24);\n      uVar22 = FUNC_08000cec(uVar22,uVar22);\n      FUNC_08000adc(uVar24,uVar22);\n      convert_uint_to_ulonglong_08000428();\n      calculate_and_return_value_08005bc8();\n      iVar27 = calculate_float_bits_08000a30();\n      uVar22 = FUNC_08000cec(iVar20 + -0x80000000,uVar31);\n      uVar21 = FUNC_08000cec(iVar29,uVar21);\n      uVar21 = FUNC_08000adc(uVar22,uVar21);\n      uVar11 = FUNC_08000cec(uVar11,uVar3);\n      uVar11 = FUNC_08000adc(uVar21,uVar11);\n      uVar21 = FUNC_08000cec(uVar30,uVar23);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar14,uVar3);\n      uVar11 = FUNC_08000ad8(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(iVar9,uVar19);\n      uVar21 = FUNC_08000cec(uVar21,uVar30);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar16,uVar3);\n      uVar11 = FUNC_08000ad8(uVar11,uVar21);\n      uVar21 = FUNC_08000cec(uVar17,uVar3);\n      uVar11 = FUNC_08000adc(uVar11,uVar21);\n      uVar21 = FUNC_08000adc(uVar11,uVar11);\n      uVar22 = FUNC_08000adc(uVar15);\n      uVar23 = FUNC_08000cec(uVar31,iVar4);\n      uVar22 = FUNC_08000ad8(uVar22,uVar23);\n      uVar23 = FUNC_08000cec(param_1,uVar2);\n      uVar22 = FUNC_08000ad8(uVar22,uVar23);\n      uVar23 = FUNC_08000cec(uVar30,iVar9);\n      uVar24 = FUNC_08000adc(uVar12);\n      uVar23 = FUNC_08000adc(uVar23,uVar24);\n      uVar24 = FUNC_08000cec(param_2,uVar2);\n      uVar23 = FUNC_08000ad8(uVar23,uVar24);\n      uVar24 = FUNC_08000cec(uVar31,uVar11);\n      uVar25 = FUNC_08000ad8(0x3f000000,uVar16);\n      uVar17 = FUNC_08000ad8(uVar25,uVar17);\n      uVar17 = FUNC_08000cec(uVar17,iVar27);\n      uVar25 = FUNC_08000ad8(uVar15,uVar13);\n      uVar25 = FUNC_08000cec(uVar25,uVar11);\n      uVar17 = FUNC_08000adc(uVar17,uVar25);\n      uVar17 = FUNC_08000ad8(uVar17,uVar18);\n      uVar18 = FUNC_08000cec(iVar29,uVar11);\n      uVar25 = FUNC_08000cec(iVar29,uVar31);\n      uVar26 = FUNC_08000cec(uVar28,uVar30);\n      uVar25 = FUNC_08000ad8(uVar25,uVar26);\n      uVar25 = FUNC_08000cec(uVar25,iVar27);\n      uVar26 = FUNC_08000cec(uVar31,uVar30);\n      uVar12 = FUNC_08000adc(uVar26,uVar12);\n      uVar12 = FUNC_08000cec(uVar12,uVar11);\n      uVar12 = FUNC_08000adc(uVar25,uVar12);\n      uVar12 = FUNC_08000ad8(uVar12,uVar19);\n      uVar19 = FUNC_08000cec(uVar31,iVar27);\n      uVar25 = FUNC_08000ad8(0x3f000000,uVar14);\n      uVar25 = FUNC_08000ad8(uVar25,uVar16);\n      uVar25 = FUNC_08000cec(uVar25,uVar11);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar13 = FUNC_08000cec(uVar13,iVar27);\n      uVar13 = FUNC_08000adc(uVar25,uVar13);\n      uVar3 = FUNC_08000ad8(uVar13,uVar3);\n      uVar13 = FUNC_08000cec(iVar9 + -0x80000000,uVar22);\n      uVar15 = FUNC_08000cec(uVar8,uVar23);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar24,uVar17);\n      uVar13 = FUNC_08000ad8(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar30,iVar27 + -0x80000000);\n      uVar15 = FUNC_08000adc(uVar15,uVar18);\n      uVar15 = FUNC_08000cec(uVar15,uVar12);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar15 = FUNC_08000cec(uVar19,uVar3);\n      uVar13 = FUNC_08000adc(uVar13,uVar15);\n      uVar14 = FUNC_08000adc(uVar14);\n      uVar14 = FUNC_08000ad8(0x3f800000,uVar14);\n      uVar15 = FUNC_08000adc(uVar16);\n      uVar14 = FUNC_08000ad8(uVar14,uVar15);\n      uVar2 = FUNC_08000cec(param_3,uVar2);\n      uVar2 = FUNC_08000ad8(uVar14,uVar2);\n      uVar14 = FUNC_08000cec(uVar30,uVar11);\n      uVar11 = FUNC_08000cec(uVar28,uVar11);\n      uVar15 = FUNC_08000cec(uVar10,uVar22);\n      uVar16 = FUNC_08000cec(iVar4,uVar23);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(iVar29,0x40800000);\n      uVar16 = FUNC_08000cec(uVar16,uVar2);\n      uVar15 = FUNC_08000ad8(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(uVar17,uVar14);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000adc(uVar19,uVar11);\n      uVar16 = FUNC_08000cec(uVar16,uVar12);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      uVar16 = FUNC_08000cec(uVar30,iVar27);\n      uVar19 = FUNC_08000cec(iVar29,uVar21);\n      uVar16 = FUNC_08000ad8(uVar16,uVar19);\n      uVar16 = FUNC_08000cec(uVar16,uVar3);\n      uVar15 = FUNC_08000adc(uVar15,uVar16);\n      iVar20 = FUNC_08000adc(iVar27,iVar27);\n      uVar16 = FUNC_08000cec(iVar29,iVar27);\n      uVar19 = FUNC_08000cec(iVar4 + -0x80000000,uVar22);\n      uVar10 = FUNC_08000cec(uVar10,uVar23);\n      uVar10 = FUNC_08000adc(uVar19,uVar10);\n      uVar19 = FUNC_08000cec(uVar31,0x40800000);\n      uVar2 = FUNC_08000cec(uVar19,uVar2);\n      uVar2 = FUNC_08000ad8(uVar10,uVar2);\n      uVar10 = FUNC_08000cec(uVar31,iVar20 + -0x80000000);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar17);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar10 = FUNC_08000adc(uVar14,uVar16);\n      uVar10 = FUNC_08000cec(uVar10,uVar12);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar10 = FUNC_08000cec(uVar28,iVar27);\n      uVar11 = FUNC_08000cec(uVar31,uVar21);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar3);\n      uVar2 = FUNC_08000adc(uVar2,uVar10);\n      uVar8 = FUNC_08000cec(uVar8,uVar22);\n      uVar10 = FUNC_08000cec(iVar9,uVar23);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar30,iVar20 + -0x80000000);\n      uVar10 = FUNC_08000adc(uVar10,uVar18);\n      uVar10 = FUNC_08000cec(uVar10,uVar17);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar28,iVar27 + -0x80000000);\n      uVar10 = FUNC_08000adc(uVar10,uVar24);\n      uVar10 = FUNC_08000cec(uVar10,uVar12);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar3 = FUNC_08000cec(uVar3,uVar16);\n      uVar3 = FUNC_08000adc(uVar8,uVar3);\n      uVar8 = FUNC_08000cec(uVar13);\n      uVar10 = FUNC_08000cec(uVar15);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar2,uVar2);\n      uVar8 = FUNC_08000adc(uVar8,uVar10);\n      uVar10 = FUNC_08000cec(uVar3,uVar3);\n      FUNC_08000adc(uVar8,uVar10);\n      convert_uint_to_ulonglong_08000428();\n      calculate_and_return_value_08005bc8();\n      uVar8 = calculate_float_bits_08000a30();\n      uVar8 = FUNC_08000e54(0x3f800000,uVar8);\n      puVar1 = PTR_DAT_08003d84;\n      uVar12 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar14 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar16 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar17 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar10 = FUNC_08000cec(iVar29 + -0x80000000,uVar5);\n      uVar11 = FUNC_08000cec(uVar31,uVar6);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar11 = FUNC_08000cec(uVar30,uVar7);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,0x3f000000);\n      uVar11 = FUNC_08000cec(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUNC_08000cec(uVar11,uVar12);\n      uVar10 = FUNC_08000ad8(uVar10,uVar11);\n      uVar10 = FUNC_08000cec(uVar10,uVar13);\n      uVar10 = FUNC_08000adc(uVar10,uVar28);\n      uVar11 = FUNC_08000cec(uVar28,uVar5);\n      uVar12 = FUNC_08000cec(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUNC_08000adc(uVar11,uVar12);\n      uVar12 = FUNC_08000cec(uVar30,uVar6);\n      uVar11 = FUNC_08000ad8(uVar11,uVar12);\n      uVar11 = FUNC_08000cec(uVar11,0x3f000000);\n      uVar12 = FUNC_08000cec(uVar15,uVar8);\n      uVar12 = FUNC_08000cec(uVar12,uVar14);\n      uVar11 = FUNC_08000ad8(uVar11,uVar12);\n      uVar11 = FUNC_08000cec(uVar11,uVar13);\n      uVar11 = FUNC_08000adc(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = FUNC_08000cec(uVar28,uVar6);\n      uVar13 = FUNC_08000cec(iVar29,uVar7);\n      uVar12 = FUNC_08000ad8(uVar12,uVar13);\n      uVar13 = FUNC_08000cec(uVar30,uVar5);\n      uVar12 = FUNC_08000adc(uVar12,uVar13);\n      uVar12 = FUNC_08000cec(uVar12,0x3f000000);\n      uVar2 = FUNC_08000cec(uVar2,uVar8);\n      uVar2 = FUNC_08000cec(uVar2,uVar16);\n      uVar2 = FUNC_08000ad8(uVar12,uVar2);\n      uVar2 = FUNC_08000cec(uVar2,uVar14);\n      uVar2 = FUNC_08000adc(uVar2,uVar31);\n      uVar28 = FUNC_08000cec(uVar28,uVar7);\n      uVar6 = FUNC_08000cec(iVar29,uVar6);\n      uVar28 = FUNC_08000adc(uVar28,uVar6);\n      uVar31 = FUNC_08000cec(uVar31,uVar5);\n      uVar28 = FUNC_08000ad8(uVar28,uVar31);\n      uVar28 = FUNC_08000cec(uVar28,0x3f000000);\n      uVar3 = FUNC_08000cec(uVar3,uVar8);\n      uVar3 = FUNC_08000cec(uVar3,uVar17);\n      uVar31 = *(undefined4 *)puVar1;\n      uVar3 = FUNC_08000ad8(uVar28,uVar3);\n      uVar3 = FUNC_08000cec(uVar3,uVar31);\n      uVar3 = FUNC_08000adc(uVar3,uVar30);\n      uVar28 = FUNC_08000cec(uVar10,uVar10);\n      uVar30 = FUNC_08000cec(uVar11,uVar11);\n      uVar28 = FUNC_08000adc(uVar28,uVar30);\n      uVar30 = FUNC_08000cec(uVar2,uVar2);\n      uVar28 = FUNC_08000adc(uVar28,uVar30);\n      uVar30 = FUNC_08000cec(uVar3,uVar3);\n      FUNC_08000adc(uVar28,uVar30);\n      convert_uint_to_ulonglong_08000428();\n      calculate_and_return_value_08005bc8();\n      uVar28 = calculate_float_bits_08000a30();\n      uVar28 = FUNC_08000e54(0x3f800000,uVar28);\n      uVar30 = FUNC_08000cec(uVar10,uVar28);\n      puVar1 = PTR_DAT_08003d88;\n      *(undefined4 *)PTR_DAT_08003d88 = uVar30;\n      uVar31 = FUNC_08000cec(uVar11,uVar28);\n      *(undefined4 *)(puVar1 + 4) = uVar31;\n      uVar2 = FUNC_08000cec(uVar2,uVar28);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = FUNC_08000cec(uVar3,uVar28);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = FUNC_08000cec(uVar31,uVar3);\n      uVar2 = FUNC_08000cec(uVar30,uVar2);\n      uVar2 = FUNC_08000ad8(uVar3,uVar2);\n      FUNC_08000adc(uVar2,uVar2);\n      convert_uint_to_ulonglong_08000428();\n      uVar32 = validate_input_and_return_shifted_value_08005854();\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003d8c);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = calculate_float_bits_08000a30();\n      *param_10 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUNC_08000cec(uVar31,uVar31);\n      uVar3 = FUNC_08000cec(uVar5,uVar5);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUNC_08000cec(uVar28,uVar28);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUNC_08000cec(uVar30,uVar30);\n      FUNC_08000adc(uVar2,uVar3);\n      uVar32 = convert_uint_to_ulonglong_08000428();\n      uVar2 = FUNC_08000cec(uVar31,uVar5);\n      uVar3 = FUNC_08000cec(uVar28,uVar30);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      FUNC_08000adc(uVar2,uVar2);\n      uVar33 = convert_uint_to_ulonglong_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_bits_08000a30();\n      param_10[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUNC_08000cec(uVar30,uVar30);\n      uVar3 = FUNC_08000cec(uVar31,uVar31);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUNC_08000cec(uVar5,uVar5);\n      uVar2 = FUNC_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUNC_08000cec(uVar28,uVar28);\n      FUNC_08000ad8(uVar2,uVar3);\n      uVar32 = convert_uint_to_ulonglong_08000428();\n      uVar2 = FUNC_08000cec(uVar31,uVar5);\n      uVar3 = FUNC_08000cec(uVar30,uVar28);\n      uVar2 = FUNC_08000adc(uVar2,uVar3);\n      FUNC_08000adc(uVar2,uVar2);\n      uVar33 = convert_uint_to_ulonglong_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUNC_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUNC_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_bits_08000a30();\n      param_10[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000724",
                "FUN_08001014",
                "FUN_08005854",
                "FUN_08000adc",
                "FUN_080004d0",
                "FUN_08000428",
                "FUN_08000e54",
                "FUN_08005bc8",
                "FUN_08000a30",
                "thunk_FUN_08006070"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "validate_and_return_values_08000980",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "void validate_and_return_values_08000980(undefined4 value1, undefined4 value2, undefined4 value3, undefined4 value4)\n{\n  check_values_and_return_08000990_08000990(value3, value4, value1, value2);\n  return;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "FUN_080009f0"
            ],
            "imported": false,
            "current_name": "validate_and_return_values_08000980"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "perform_task_08004028",
                "iVar1": "task_count",
                "FUNC_0800458c": "call_first_function",
                "set_flags_based_on_data_08003ff4": "set_flags",
                "set_param_values_08003f3c": "set_params",
                "thunk_do_nothing_08001168": "do_nothing_for"
            },
            "code": "void perform_task_08004028(void)\n{\n  int task_count = 3;\n  call_first_function();\n  set_flags();\n  while (task_count > 0) {\n    set_params(1, 0, 0);\n    do_nothing_for(100);\n    set_params(0, 1, 0);\n    do_nothing_for(100);\n    set_params(0, 0, 1);\n    do_nothing_for(100);\n    task_count--;\n  }\n  set_params(1, 1, 0);\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08003ff4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "perform_task_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "do_nothing_0800708c"
            },
            "code": "\nvoid do_nothing_0800708c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "FUN_08006070",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "do_nothing_0800708c"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "update_data_08002368",
                "param_1": "data_ptr",
                "param_2": "update_ptr",
                "uVar1": "original_data",
                "puVar2": "data_ptr_b"
            },
            "code": "void update_data_08002368(uint *data_ptr, uint *update_ptr)\n{\n  uint original_data = *data_ptr;\n  if ((((data_ptr == ptr_data_a) || (data_ptr == ptr_data_b)) ||\n      (data_ptr == ptr_data_a - 0x4a00)) || (data_ptr == ptr_data_a - 0x4900)) {\n    original_data = original_data & 0xffffff8f | update_ptr[1];\n    if (((data_ptr == ptr_data_a) || (data_ptr == ptr_data_b)) ||\n       ((data_ptr == ptr_data_a - 0x4a00 || (data_ptr == ptr_data_a - 0x4900))))) {\n      original_data = original_data & 0xfffffcff | update_ptr[3];\n    }\n  }\n  *data_ptr = original_data;\n  data_ptr[11] = update_ptr[2];\n  data_ptr[10] = *update_ptr;\n  uint *data_ptr_b = ptr_data_a;\n  if (data_ptr == ptr_data_a) {\n    data_ptr_b = (uint *)update_ptr[4];\n  }\n  if (data_ptr == ptr_data_a) {\n    data_ptr[12] = (uint)data_ptr_b;\n  }\n  data_ptr[5] = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_data_08002368"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "new_value",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "&": "",
                "<<": "",
                "|": "",
                "~": "",
                "+": "",
                "uint": "uint32_t",
                "(": "",
                ")": "",
                "1": "1u",
                "0xff": "0xffu"
            },
            "code": "void update_bit_08002520(uint32_t *data, uint8_t bit_position, uint32_t new_value) {\n  uint32_t mask = ~(1 << (bit_position & 0xff));\n  uint32_t shifted_value = new_value << (bit_position & 0xff);\n  *data = (*data & mask) | shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "FUN_08002538"
            ],
            "imported": false,
            "current_name": "update_bit_08002520"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_value_08002008",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "bitmask1",
                "uVar4": "count",
                "uVar5": "bitmask2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "local_24": "bitcount",
                "local_20": "array",
                "PTR_DAT_0800208c": "constant_array",
                "DAT_08002090": "constant_data",
                "DAT_08002094": "constant_value",
                "DAT_08002098": "constant_value2"
            },
            "code": "uint calculate_value_08002008(void)\n{\n  uint value = 0;\n  uint count = 0;\n  uint temp = 0;\n  uint bitmask = 0;\n  uint index = 0;\n  uint* ptr1 = (uint*)PTR_DAT_0800208c;\n  uint* ptr2 = (uint*)local_20;\n  byte bitcount[4] = {1, 2};\n  uint bitmask1 = *(uint*)(DAT_08002090 + 4);\n  uint bitmask2 = DAT_08002094;\n  if ((bitmask1 & 0xc) == 8)\n  {\n    count = count_leading_zeroes(0x3c00);\n    bitmask2 = DAT_08002098;\n    if ((int)(bitmask1 << 0xf) < 0)\n    {\n      temp = count_leading_zeroes(0x4000);\n      bitmask2 = DAT_08002094 / bitcount[(*(uint*)(DAT_08002090 + 4) & 0x20000) >> (temp & 0xff)];\n    }\n    index = (bitmask1 & 0x3c0000) >> (count & 0xff);\n    bitmask = *(byte*)((int)ptr2 + index);\n    value = bitmask2 * bitmask;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "FUN_0800209c"
            ],
            "imported": false,
            "current_name": "calculate_value_08002008"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "update_data_08002404",
                "param_1": "data_ptr",
                "param_2": "data_arr",
                "uVar1": "new_data1",
                "uVar2": "new_data2",
                "iVar3": "new_data3",
                "bitmask1": "bitmask1",
                "bitmask2": "bitmask2",
                "bitmask3": "bitmask3",
                "DAT_08002458": "DAT_08002458"
            },
            "code": "void update_data_08002404(int data_ptr, int *data_arr){\n  uint bitmask1 = 0xffffffef;\n  uint bitmask2 = 0xfffff3ff;\n  uint bitmask3 = 0xffffffdf;\n  uint new_data1 = (data_arr[2] << 4) & bitmask3;\n  uint new_data2 = *(uint *)(data_ptr + 0x20) & bitmask1 | new_data1;\n  int new_data3 = data_arr[1];\n  int new_data4 = *(uint *)(data_ptr + 0x18) & 0xffff8cff | data_arr[0] << 8;\n  if (data_ptr == DAT_08002458) {\n    new_data1 = (new_data1 & 0xffffff7f) | data_arr[3] << 4;\n    new_data2 = (*(uint *)(data_ptr + 4) & bitmask2) | ((data_arr[5] | data_arr[6]) << 2);\n  }\n  *(uint *)(data_ptr + 4) = new_data2;\n  *(int *)(data_ptr + 0x38) = new_data3;\n  *(uint *)(data_ptr + 0x20) = new_data1;\n  *(int *)(data_ptr + 0x18) = new_data4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_and_return_value_08005bc8",
                "param_1": "first_param",
                "param_2": "second_param",
                "cVar1": "character_var",
                "iVar2": "is_end_of_string",
                "piVar3": "pointer_to_int",
                "puVar4": "pointer_to_undefined4",
                "uVar5": "return_value",
                "local_30": "is_valid",
                "local_38": "local_var5",
                "local_40": "local_var4",
                "local_48": "local_var3",
                "local_4c": "local_var2",
                "local_50": "local_var1",
                "uStack_3c": "temp_stack2",
                "uStack_44": "temp_stack1"
            },
            "code": "undefined8 calculate_and_return_value_08005bc8(undefined4 first_param, undefined4 second_param)\n{\n    char character_var;\n    int is_valid;\n    int *pointer_to_int;\n    undefined4 *pointer_to_undefined4;\n    undefined8 return_value;\n    undefined4 local_var1;\n    undefined *local_var2;\n    undefined4 local_var3;\n    undefined4 temp_stack1;\n    undefined4 local_var4;\n    undefined4 temp_stack2;\n    undefined8 local_var5;\n    int local_var6;\n\n    return_value = calculate_float_08006c0c();\n    character_var = *PTR_DAT_08005c68;\n    if (character_var == -1) {\n        return return_value;\n    }\n    is_valid = is_valid_08000a04(first_param, second_param, first_param, second_param);\n    if (is_valid != 0) {\n        return return_value;\n    }\n    if (is_end_of_string_080009b4(first_param, second_param, 0, 0) == 0) {\n        return return_value;\n    }\n    local_var1 = 1;\n    local_var2 = PTR_DAT_08005c6c;\n    local_var3 = first_param;\n    temp_stack1 = second_param;\n    local_var4 = first_param;\n    temp_stack2 = second_param;\n    if (character_var == '\\0') {\n        local_var5 = 0;\n        goto LAB_08005c26;\n    }\n    local_var5 = FUNC_08000724(0, 0, 0, 0);\n    if (character_var == '\\x02') {\n        goto LAB_08005c26;\n    }\n    pointer_to_undefined4 = (undefined4 *)get_value_from_pointer_to_pointer_080072ac();\n    *pointer_to_undefined4 = 0x21;\nLAB_08005c26:\n    if (is_valid != 0) {\n        pointer_to_int = (int *)get_value_from_pointer_to_pointer_080072ac();\n        *pointer_to_int = is_valid;\n    }\n    return local_var5;\n}\n",
            "called": [
                "FUN_08000a04",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_and_return_value_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "set_flag_if_bit_set_08001436",
                "param_1": "data",
                "iVar1": "data_ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int set_flag_if_bit_set_08001436(int *data)\n{\n  int data_ptr = *data;\n  if ((*(uint *)(data_ptr + 0x14) & 0x400) != 0) {\n    *(uint *)(data_ptr + 0x14) = *(uint *)(data_ptr + 0x14) & 0xfffffbff;\n    data[14] = 4;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)(data + 13) = 0;\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "FUN_080014e2"
            ],
            "imported": false,
            "current_name": "set_flag_if_bit_set_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "update_values_08004a30",
                "puVar1": "value1_ptr",
                "puVar2": "value2_ptr",
                "puVar3": "value3_ptr",
                "uVar4": "updated_value"
            },
            "code": "void update_values_08004a30(void)\\n{\\n    undefined *value1_ptr;\\n    undefined *value2_ptr;\\n    undefined *value3_ptr;\\n    undefined4 updated_value;\\n\\n    value3_ptr = PTR_DAT_08004a7c;\\n    value2_ptr = PTR_DAT_08004a78;\\n    value1_ptr = PTR_DAT_08004a74;\\n\\n    if (value1_ptr[1] != \"\\0\") {\\n        if (*value2_ptr == \"\\0\") {\\n            updated_value = get_value_from_pointer_08003068();\\n            updated_value = FUNC_08000cec(updated_value, DAT_08004a80);\\n            *(undefined4 *)(value3_ptr + 0x1c) = updated_value;\\n            *value2_ptr = 1;\\n        }\\n        else {\\n            updated_value = get_value_from_pointer_08003068();\\n            updated_value = FUNC_08000cec(updated_value, DAT_08004a80);\\n            *(undefined4 *)(value3_ptr + 0x30) = updated_value;\\n        }\\n    }\\n    if (value1_ptr[1] == \"\\0\") {\\n        if (*value2_ptr != \"\\0\") {\\n            *value2_ptr = 0;\\n        }\\n        *(undefined4 *)(value3_ptr + 0x48) = *(undefined4 *)(value1_ptr + 4);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_values_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "process_data_08004c70",
                "puVar1": "data_ptr",
                "puVar2": "flag_ptr",
                "uVar3": "new_flag",
                "uVar4": "var6",
                "iVar5": "var5"
            },
            "code": "int process_data_08004c70() {\n  char *data_buffer = clear_data_buffer();\n  char *data_ptr = data_buffer + 0x4;\n  char *flag_ptr = data_buffer + 0x3c;\n  char *status_ptr = data_buffer + 0x38;\n  if ((*flag_ptr == '\\x01') || (*flag_ptr == '\\x12')) {\n    if (data_ptr == NULL) {\n      return 1;\n    }\n    if (*status_ptr != '\\x01') {\n      *status_ptr = 1;\n      *(int *)(flag_ptr + 0x3c) = 0;\n      *(short *)(flag_ptr + 0x2c) = 1;\n      *(short *)(flag_ptr + 0x2e) = 1;\n      *flag_ptr = 0;\n      if (*flag_ptr == '\\x12') {\n        char new_flag = 0x32;\n      }\n      else {\n        char new_flag = 0x22;\n      }\n      int var5 = *(int *)flag_ptr;\n      *flag_ptr = new_flag;\n      uint var6 = *(int *)(var5 + 0xc);\n      *(char **)(flag_ptr + 0x28) = data_ptr;\n      *(uint *)(var5 + 0xc) = var6 | 0x100;\n      *(uint *)(var5 + 0x14) = *(uint *)(var5 + 0x14) | 1;\n      *(uint *)(var5 + 0xc) = *(uint *)(var5 + 0xc) | 0x20;\n      return 0;\n    }\n  }\n  return 2;\n}\n",
            "called": [
                "FUN_08004c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_data_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_values_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "is_negative1",
                "bVar3": "is_negative2"
            },
            "code": "uint check_values_08000904(uint value1, uint value2, uint value3, uint value4)\n{\n  uint result;\n  bool is_negative1;\n  bool is_negative2;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_negative1 = (value1 | value2 << 1) == 0;\n  if (is_negative1) {\n    is_negative1 = (value3 | value4 << 1) == 0;\n  }\n  if (!is_negative1) {\n    is_negative1 = value2 == value4;\n  }\n  if (is_negative1) {\n    is_negative1 = value1 == value3;\n  }\n  if (!is_negative1) {\n    result = value2 ^ value4;\n    is_negative1 = result == 0;\n    if (-1 < (int)result) {\n      is_negative1 = value2 == value4;\n    }\n    is_negative2 = -1 < (int)result && value4 <= value2;\n    if (is_negative1) {\n      is_negative2 = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative2) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "FUN_08000990"
            ],
            "imported": false,
            "current_name": "check_values_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "first_word",
                "sVar2": "temp_data4",
                "uVar3": "temp_data",
                "puVar4": "temp_data3",
                "uVar5": "temp_data5",
                "puVar6": "temp_data2",
                "uVar7": "fifth_word",
                "bVar8": "condition"
            },
            "code": "void process_data_0800299a(uint **data)\n{\n  uint first_word = **data;\n  uint fourth_word = (*data)[3];\n  if ((first_word & 0xf) == 0)\n  {\n    if (((int)(first_word << 0x1a) < 0) && ((int)(fourth_word << 0x1a) < 0))\n    {\n      perform_operation();\n      return;\n    }\n  }\n  else\n  {\n    uint fifth_word = (*data)[5] & 1;\n    if ((fifth_word != 0) || ((fourth_word & 0x120) != 0))\n    {\n      uint *temp_data = (uint *)(first_word << 0x1f);\n      if ((int)temp_data < 0)\n      {\n        bool condition = (int)(fourth_word << 0x17) < 0;\n        if (condition)\n        {\n          temp_data = (uint *)((uint)data[0xf] | 1);\n        }\n        if (condition)\n        {\n          data[0xf] = temp_data;\n        }\n      }\n      if (((int)(first_word << 0x1d) < 0) && (fifth_word != 0))\n      {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(first_word << 0x1e) < 0) && (fifth_word != 0))\n      {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(first_word << 0x1c) < 0) && (fifth_word != 0))\n      {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0)\n      {\n        return;\n      }\n      if (((int)(first_word << 0x1a) < 0) && ((int)(fourth_word << 0x1a) < 0))\n      {\n        perform_operation(data);\n      }\n      uint *temp_data2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((temp_data2[5] & 0x40) == 0))\n      {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      temp_data2[3] = temp_data2[3] & 0xfffffedf;\n      temp_data2[5] = temp_data2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      do_nothing(data);\n      return;\n    }\n  }\n  if (((int)(first_word << 0x18) < 0) && ((int)(fourth_word << 0x18) < 0))\n  {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12)\n    {\n      uint *temp_data3 = data[8];\n      if (data[2] == (uint *)0x1000)\n      {\n        temp_data2[1] = *(ushort *)temp_data3 & 0x1ff;\n        if (data[4] == (uint *)0x0)\n        {\n          temp_data3 = (uint *)((int)temp_data3 + 2);\n        }\n        else\n        {\n          temp_data3 = (uint *)((int)temp_data3 + 1);\n        }\n        data[8] = temp_data3;\n      }\n      else\n      {\n        data[8] = (uint *)((int)temp_data3 + 1);\n        temp_data2[1] = (uint)*(byte *)temp_data3;\n      }\n      short temp_data4 = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = temp_data4;\n      if (temp_data4 == 0)\n      {\n        temp_data2[3] = temp_data2[3] & 0xffffff7f;\n        temp_data2[3] = temp_data2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(first_word << 0x19) < 0) && ((int)(fourth_word << 0x19) < 0))\n  {\n    temp_data2[3] = temp_data2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2')\n    {\n      undefined temp_data5 = 0x22;\n    }\n    else\n    {\n      undefined temp_data5 = 1;\n    }\n    *(undefined *)((int)data + 0x39) = temp_data5;\n    do_nothing_0800290a(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800299a"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_ptr_dat_value_0800114c",
                "PTR_DAT_08001158": "ptr_dat_value"
            },
            "code": "void increment_ptr_dat_value_0800114c(void)\n{\n  int* PTR_DAT_08001158 = (int*)PTR_DAT_08001158;\n  *PTR_DAT_08001158 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "increment_ptr_dat_value_0800114c"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "decode_080052e4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "input_4",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_length",
                "uVar3": "extra_length",
                "bVar4": "flag",
                "current_length": "current_length",
                "output_2": "output_2",
                "data_length": "data_length"
            },
            "code": "undefined4 decode_080052e4(uint32_t input_1, uint32_t *input_2, uint32_t *output_1, uint32_t input_4, code *callback){\\n  int status;\\n  uint32_t max_length = input_2[4];\\n  if ((int)input_2[4] < (int)input_2[2]) {\\n    max_length = input_2[2];\\n  }\\n  *output_1 = max_length;\\n  if (*(char *)((int)input_2 + 0x43) != \"\\0\") {\\n    *output_1 = max_length + 1;\\n  }\\n  if ((int)(*input_2 << 0x1a) < 0) {\\n    *output_1 = *output_1 + 2;\\n  }\\n  uint32_t current_length = *input_2 & 6;\\n  if (current_length == 0) {\\n    for (; (int)current_length < (int)(input_2[3] - *output_1); current_length = current_length + 1) {\\n      status = (*callback)(input_1, input_4, (int)input_2 + 0x19, 1);\\n      if (status == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint32_t extra_length = (uint32_t)*(byte *)((int)input_2 + 0x43);\\n  if (extra_length != 0) {\\n    extra_length = 1;\\n  }\\n  uint32_t output_2 = extra_length;\\n  if ((int)(*input_2 << 0x1a) < 0) {\\n    *(undefined *)((int)input_2 + extra_length + 0x43) = 0x30;\\n    output_2 = extra_length + 2;\\n    *(undefined *)((int)input_2 + extra_length + 0x44) = *(undefined *)((int)input_2 + 0x45);\\n  }\\n  status = (*callback)(input_1, input_4, (int)input_2 + 0x43, output_2);\\n  if (status != -1) {\\n    uint32_t max_data_length = input_2[3];\\n    bool flag = (*input_2 & 6) != 4;\\n    if (flag) {\\n      max_data_length = 0;\\n    }\\n    uint32_t data_length = 0;\\n    if (!flag) {\\n      max_data_length = max_data_length - *output_1;\\n    }\\n    if (!flag) {\\n      max_data_length = max_data_length & ~((int)max_data_length >> 0x1f);\\n    }\\n    if ((int)input_2[4] < (int)input_2[2]) {\\n      max_data_length = max_data_length + (input_2[2] - input_2[4]);\\n    }\\n    while( true ) {\\n      if (max_data_length == data_length) {\\n        return 0;\\n      }\\n      status = (*callback)(input_1, input_4, (int)input_2 + 0x1a, 1);\\n      if (status == -1) break;\\n      data_length = data_length + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "decode_080052e4"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_flag_080014e2",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "iVar1": "start_value",
                "iVar2": "flag_set"
            },
            "code": "int check_flag_080014e2(int *flag_ptr, uint32_t flag_value) {\n    int start_value = get_start_value();\n    while (true) {\n        if ((*flag_ptr + 0x14) << 0x18 < 0) {\n            return 0;\n        }\n        int flag_set = set_flag_if_bit_set(flag_ptr);\n        if (flag_set != 0) {\n            break;\n        }\n        if ((flag_value != 0xffffffff) && ((flag_value == 0 || (get_start_value() - start_value) < flag_value))) {\n            flag_ptr[0xe] |= 0x20;\n            *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n            *(undefined *)(flag_ptr + 0xd) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_flag_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "xor_with_offset_0800142e",
                "param_1": "data",
                "param_2": "offset",
                "*(uint *)(param_1 + 0xc)": "*offset_ptr",
                "uint": "uint32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void xor_with_offset_0800142e(uint32_t *data, uint32_t offset) {\n    uint32_t *offset_ptr = data + 0xc;\n    *offset_ptr = offset ^ *offset_ptr;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "xor_with_offset_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "set_flags_08004d8c",
                "param_1": "flag_value",
                "iVar1": "value",
                "DAT_08004e04": "FLAG_A",
                "*(uint *)(DAT_08004e08 + 0x18)": "*(uint *)(FLAG_PTR + 0x18)",
                "DAT_08004e08": "FLAG_PTR",
                "_DAT_4002101c": "_DAT_B",
                "DAT_08004e0c": "FLAG_C",
                "*(uint *)(DAT_08004e08 + 0x1c)": "*(uint *)(FLAG_PTR + 0x1c)",
                "DAT_08004e10": "FLAG_D"
            },
            "code": "void set_flags_08004d8c(int *flag_value)\n{\n  int value = *flag_value;\n  if (value == DAT_08004e04)\n  {\n    *(uint *)(DAT_08004e08 + 0x18) = *(uint *)(DAT_08004e08 + 0x18) | 0x800;\n  }\n  else if (value == FLAG_B)\n  {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == DAT_08004e0c)\n  {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 2;\n  }\n  else if (value == DAT_08004e10)\n  {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "set_flags_08004d8c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250",
                "uVar1": "leading_zeroes",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_0800227c": "mask_pointer",
                "PTR_DAT_08002278": "shift_pointer",
                "DAT_08002274": "data_pointer"
            },
            "code": "uint get_shifted_value_08002250(uint number) {\n    uint count = 0;\n    while (number != 0) {\n        number >>= 1;\n        count++;\n    }\n    return count;\n}\n\nuint get_shifted_value_08002250(void) {\n    uint leading_zeroes = get_shifted_value_08002250(0x1c0000);\n    uint mask = *(uint *)PTR_DAT_0800227c;\n    uint index = (*(uint *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes & 0xff);\n    return mask >> PTR_DAT_08002278[index];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08002250"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009b4(void)\n{\n  char current_char;\n  check_values_and_return();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009b4"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_bit_080011fc",
                "param_1": "bit_position",
                "DAT_08001210": "data"
            },
            "code": "void set_bit_080011fc(int* DAT_08001210, uint bit_position) {\n    uint word_index = bit_position >> 5;\n    uint bit_index = bit_position & 0x1f;\n    uint* word_ptr = (uint*)(DAT_08001210 + word_index);\n    *word_ptr = 1 << bit_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "set_bit_080011fc"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "get_value_from_pointer_08003068",
                "PTR_DAT_08003070": "ptr_to_data"
            },
            "code": "int get_value_from_pointer_08003068() \n{\n    int *PTR_DAT_08003070 = PTR_DAT_08003070; \n    int value = *PTR_DAT_08003070; \n    return value; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003068"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_string_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "len",
                "puVar1": "src_end"
            },
            "code": "void reverse_copy_string_08005646(unsigned char *dest, const unsigned char *src, size_t len) {\n    unsigned char *src_end = src + len;\n    if ((src < dest) && (dest < src_end)) {\n        dest += len;\n        len -= (size_t)(src_end - dest);\n        while (src_end + len != NULL) {\n            src_end--;\n            dest--;\n            *dest = *src_end;\n        }\n        return;\n    }\n    dest--;\n    for (; src != src_end; src++) {\n        dest++;\n        *dest = *src;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "reverse_copy_string_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "check_values_and_return_08000990_08000990",
                "param_1": "input_value"
            },
            "code": "undefined4 check_values_and_return_08000990_08000990(undefined4 input_value)\n{\n  check_values_08000904();\n  return input_value;\n}",
            "called": [
                "FUN_08000904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_08000980",
                "FUN_080009b4"
            ],
            "imported": false,
            "current_name": "check_values_and_return_08000990_08000990"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_initialization_08000110",
                "param_1": "input_string",
                "*PTR_DAT_08000128": "*PTR_INITIALIZED_FLAG",
                "DAT_0800012c": "DAT_EXTRA_CHECK",
                "PTR_FUN_08000130": "PTR_DEFAULT_STRING"
            },
            "code": "undefined* check_initialization_08000110(undefined* input_string) {\\n    if (*PTR_DAT_08000128 == \"\\0\") {\\n        if (DAT_0800012c != 0) {\\n            input_string = PTR_FUN_08000130;\\n        }\\n        *PTR_DAT_08000128 = 1;\\n    }\\n    return input_string;\\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_initialization_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "return_zero_0800709e"
            },
            "code": "int return_zero_0800709e(void) {\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "return_zero_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_new_value_08002ec0",
                "puVar1": "data_pointer",
                "uVar2": "second_value",
                "uVar3": "third_value",
                "uVar4": "fourth_value"
            },
            "code": "void calculate_new_value_08002ec0(void)\n{\n  undefined *data_pointer;\n  undefined4 second_value;\n  undefined4 third_value;\n  undefined4 fourth_value;\n  \n  data_pointer = PTR_DAT_08002ed0;\n  third_value = *(undefined4 *)(PTR_DAT_08002ecc + 4);\n  fourth_value = *(undefined4 *)(PTR_DAT_08002ed0 + 4);\n  second_value = FUNC_08000ad8(0x3f800000,fourth_value);\n  second_value = FUNC_08000cec(second_value,third_value);\n  third_value = FUNC_08000cec(fourth_value,*(undefined4 *)data_pointer);\n  second_value = FUNC_08000adc(third_value,second_value);\n  *(undefined4 *)data_pointer = second_value;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08002ec0"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "decode_and_xor_08004434",
                "param_1": "key",
                "param_2": "buffer_size",
                "param_3": "buffer",
                "local_10": "mask",
                "local_c": "masked_size",
                "uStack_8": "data"
            },
            "code": "void decode_and_xor_08004434(uint8_t key, uint8_t* buffer, size_t buffer_size) {\n    uint16_t mask = *(uint16_t*)PTR_DAT_08004454;\n    uint32_t masked_size = buffer_size & 0xffff0000 | (uint32_t)mask;\n    uint8_t* data = (uint8_t*)PTR_DAT_08004454;\n    decode_and_xor_08004434_08004300(key, data, 6);\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "thunk_FUN_08001168",
                "FUN_08001b58"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "sign",
                "uVar2": "exponent",
                "iVar3": "exponent",
                "uVar4": "mantissa",
                "uVar5": "quotient",
                "uVar6": "remainder",
                "iVar7": "exponent",
                "uVar8": "mantissa",
                "uVar9": "quotient",
                "iVar10": "exponent",
                "uVar11": "mantissa",
                "uVar12": "exponent",
                "uVar13": "result"
            },
            "code": "uint32_t calculate_float_08006c0c(uint32_t num1, uint32_t num2)\n{\n    uint32_t sign = (0x80000000 & num1) ^ (0x80000000 & num2);\n    uint32_t exponent;\n    uint32_t mantissa;\n    uint32_t quotient = 0;\n    uint32_t remainder = 0;\n    if ((0x7fffffff & num2 | num1) == 0)\n    {\n        return sign | 0x0;\n    }\n    if ((int32_t)num2 < 1)\n    {\n        if (num2 != 0)\n        {\n            quotient = num1 / num2;\n            remainder = num1 % num2;\n        }\n    }\n    else\n    {\n        exponent = (num2 >> 23) - 127;\n        mantissa = (num2 & 0x7fffff) | 0x800000;\n        if (exponent >= 31)\n        {\n            return sign | 0x7f800000;\n        }\n        else if (exponent < 0)\n        {\n            return sign | 0x0;\n        }\n        else\n        {\n            if (num1 & 0x80000000)\n            {\n                num1 = -num1;\n            }\n            if (num2 & 0x80000000)\n            {\n                num2 = -num2;\n            }\n            num1 <<= 8;\n            for (int i = 0; i < 24; i++)\n            {\n                quotient <<= 1;\n                remainder <<= 1;\n                remainder |= (num1 & 0x80000000) >> 31;\n                num1 <<= 1;\n                if (remainder >= num2)\n                {\n                    quotient |= 1;\n                    remainder -= num2;\n                }\n            }\n            exponent += (quotient != 0);\n            if (exponent > 0)\n            {\n                mantissa |= (quotient & 0x7fffff) << (23 - exponent);\n            }\n            else\n            {\n                mantissa |= (quotient & 0x7fffff) >> (-(exponent + 1) & 0x1f);\n            }\n        }\n    }\n    return sign | (exponent + 127) << 23 | (mantissa & 0x7fffff);\n}",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "FUN_08006228",
                "FUN_08005c70",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "calculate_float_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "calculate_and_update_values_0800426c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result3",
                "uVar6": "extracted_bits1",
                "uVar7": "extracted_bits2",
                "uVar8": "extracted_bits3",
                "uVar9": "extracted_bits4",
                "PTR_DAT_08004264": "data_pointer1",
                "PTR_DAT_08004268": "data_pointer2"
            },
            "code": "void calculate_and_update_values_0800426c(uint param1, uint param2, uint param3, uint param4)\n{\n  uint extracted_bits1 = extract_bits_from_uint();\n  uint extracted_bits2 = extract_bits_from_uint();\n  uint extracted_bits3 = extract_bits_from_uint();\n  uint extracted_bits4 = extract_bits_from_uint();\n  \n  uint updated_param1 = FUNC_08000adc(FUNC_08000ad8(), param2);\n  updated_param1 = FUNC_08000ad8(updated_param1, param3);\n  FUNC_08000ad8(updated_param1, param4);\n  \n  uint updated_param2 = FUNC_08000adc(FUNC_08000ad8(FUNC_08000ad8(FUNC_08000ad8(), param3), param4), param1);\n  FUNC_08000ad8(updated_param2, PTR_DAT_080042fc);\n  \n  uint updated_param3 = FUNC_08000adc(FUNC_08000ad8(FUNC_08000adc(FUNC_08000ad8(), param3), param4), param2);\n  FUNC_08000ad8(updated_param3, PTR_DAT_080042fc);\n  \n  uint updated_param4 = FUNC_08000adc(FUNC_08000adc(param2, FUNC_08000ad8(FUNC_08000ad8(), param3)), param4);\n  FUNC_08000ad8(updated_param4, PTR_DAT_080042fc);\n  \n  uint updated_param5 = FUNC_08000adc(FUNC_08000ad8(FUNC_08000ad8(), param3), param4);\n  FUNC_08000ad8(updated_param5, PTR_DAT_080042fc);\n  \n  uint updated_param6 = extracted_bits4 <= 999 ? extracted_bits4 : 1000;\n  uint updated_param7 = extracted_bits3 <= 999 ? extracted_bits3 : 1000;\n  uint updated_param8 = extracted_bits2 <= 999 ? extracted_bits2 : 1000;\n  uint updated_param9 = extracted_bits1 <= 999 ? extracted_bits1 : 1000;\n  \n  *(uint *)(PTR_DAT_08004264 + 8) = updated_param7 & ~((int)updated_param7 >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 0xc) = updated_param6 & ~((int)updated_param6 >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 4) = updated_param8 & ~((int)updated_param8 >> 0x1f);\n  *(uint *)PTR_DAT_08004264 = updated_param9 & ~((int)updated_param9 >> 0x1f);\n  \n  set_param_in_memory();\n  update_value_in_struct(*(uint *)(PTR_DAT_08004264 + 4));\n  set_parameter_in_global_data_structure(*(uint *)(PTR_DAT_08004264 + 8));\n  set_parameter_in_struct(*(uint *)(PTR_DAT_08004264 + 0xc));\n  \n  *(short *)PTR_DAT_08004268 = (short)*(uint *)PTR_DAT_08004264 + 1000;\n  *(short *)(PTR_DAT_08004268 + 2) = (short)*(uint *)(PTR_DAT_08004264 + 4) + 1000;\n  *(short *)(PTR_DAT_08004268 + 4) = (short)*(uint *)(PTR_DAT_08004264 + 8) + 1000;\n  *(short *)(PTR_DAT_08004268 + 6) = (short)*(uint *)(PTR_DAT_08004264 + 0xc) + 1000;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08000adc",
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08001078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_and_update_values_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "update_bit_and_set_flag_08002538",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "global_bit_array",
                "puVar2": "current_bit_array"
            },
            "code": "uint update_bit_and_set_flag_08002538(uint **bit_array, uint bit_position, uint flag) {\n  uint *current_bit_array = *bit_array;\n  uint *global_bit_array = DAT_08002560;\n  update_bit_08002520(current_bit_array, bit_position, flag);\n  if (current_bit_array == global_bit_array) {\n    current_bit_array[0x11] = (uint)(global_bit_array[0x11] | 0x8000);\n  }\n  *current_bit_array = *current_bit_array | 1;\n  return 0;\n}",
            "called": [
                "FUN_08002520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "FUN_08003ff4"
            ],
            "imported": false,
            "current_name": "update_bit_and_set_flag_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "copy_data_to_buffer_080040e8",
                "param_1": "source",
                "param_2": "source_offset",
                "param_3": "destination",
                "param_4": "destination_offset",
                "puVar1": "source_ptr",
                "puVar4": "destination_ptr",
                "uVar2": "decoded_char",
                "iVar3": "i",
                "iVar5": "length"
            },
            "code": "void copy_data_to_buffer_080040e8(char* source, int source_offset, char* destination, int destination_offset, int length)\\n\\\n{\\n\\\n    char* source_ptr = source + source_offset;\\n\\\n    char* destination_ptr = destination + destination_offset - 1;\\n\\\n    for (int i = 0; i < length; i++)\\n\\\n    {\\n\\\n        char decoded_char = check_and_decode_strings(source_ptr, i, 0x4c, length);\\n\\\n        destination_ptr++;\\n\\\n        *destination_ptr = decoded_char;\\n\\\n    }\\n\\\n    return;\\n\\\n}",
            "called": [
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_08002d88",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080040e8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "clear_string_08004ffc",
                "param_1": "string_ptr",
                "param_2": "size",
                "param_3": "arg_8",
                "param_4": "arg_C",
                "local_78": "string_start_end",
                "local_70": "max_size",
                "local_6c": "lower_bound",
                "local_6a": "upper_bound",
                "local_68": "string_end",
                "local_64": "arg_18",
                "uStack_c": "arg_10",
                "uStack_8": "arg_14",
                "uStack_4": "arg_18"
            },
            "code": "void clear_string_08004ffc(undefined *string_ptr, undefined4 size, undefined4 arg_8, undefined4 arg_C) {\n  undefined *string_start_end[2];\n  undefined4 max_size;\n  undefined2 lower_bound;\n  undefined2 upper_bound;\n  undefined *string_end;\n  undefined4 arg_18;\n  undefined4 arg_14;\n  undefined4 arg_10;\n\n  lower_bound = 0x208;\n  max_size = 0x7fffffff;\n  arg_18 = 0x7fffffff;\n  upper_bound = 0xffff;\n  string_start_end[0] = string_ptr;\n  string_end = string_ptr;\n  arg_10 = size;\n  arg_14 = arg_8;\n  arg_18 = arg_C;\n  FUNC_080050fc(*(undefined4 *)PTR_PTR_DAT_08005040, string_start_end, size);\n  *string_start_end[0] = 0;\n  return;\n}",
            "called": [
                "FUN_080050fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "clear_string_08004ffc"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_value_from_pointer_0800115c",
                "PTR_DAT_08001164": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_0800115c() {\n    int* PTR_DAT_08001164 = (int*) PTR_DAT_08001164;\n    int value = *PTR_DAT_08001164;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_080016f4",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08001460",
                "FUN_08001828",
                "FUN_08004c18",
                "thunk_FUN_0800115c",
                "FUN_080014e2",
                "FUN_080015e8",
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_0800115c"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "decode_and_store_data_08002d88",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "puVar3": "string_data",
                "puVar4": "data_buffer",
                "puVar5": "PTR_DAT_08002e98",
                "puVar6": "PTR_DAT_08002e9c",
                "iVar7": "result",
                "uVar8": "hash",
                "uVar9": "hash_seed",
                "local_28": "local_data",
                "uStack_26": "byte4",
                "uStack_25": "byte5",
                "local_24": "byte6",
                "local_23": "byte7",
                "local_22": "byte8",
                "uStack_21": "byte9"
            },
            "code": "void decode_and_store_data_08002d88(uint32_t param_1, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n    int result = check_and_decode_strings(0x18, 2, string_data, 0xd7, param_1, param_2);\n    if (result >= 0)\n    {\n        return;\n    }\n    uint16_t local_data = 0;\n    uint8_t byte1 = 0;\n    uint8_t byte2 = 0;\n    uint8_t byte3 = 0;\n    uint8_t byte4 = 0;\n    uint8_t byte5 = 0;\n    copy_data_to_buffer(0x18, 3, &local_data, 7, string_data, 0xda);\n    if (local_data >> 0x1c < 0)\n    {\n        *(uint16_t *)(data_buffer + 2) = *(uint16_t *)(data_buffer + 2) + 1;\n    }\n    else\n    {\n        uint8_t byte6 = 0;\n        uint8_t byte7 = 0;\n        uint32_t hash1 = calculate_hash();\n        hash1 = calculate_hash(hash1, *(uint32_t *)(string_data + 4));\n        hash1 = calculate_hash(hash1, *(uint32_t *)(string_data + 8));\n        hash1 = calculate_hash(hash1, *(uint32_t *)(string_data + 0xc));\n        *(uint32_t *)(data_buffer + 0) = hash1;\n        byte1 = (uint8_t)local_data;\n        byte2 = (uint8_t)(local_data >> 0x8);\n        uint32_t hash2 = calculate_hash(byte1);\n        hash2 = calculate_hash(hash2, *(uint32_t *)(string_data + 4));\n        hash2 = calculate_hash(hash2, *(uint32_t *)(string_data + 0x10));\n        hash2 = calculate_hash(hash2, *(uint32_t *)(string_data + 0x14));\n        *(uint32_t *)(data_buffer + 4) = hash2;\n        byte3 = (uint8_t)(local_data >> 0x10);\n        byte4 = (uint8_t)(local_data >> 0x18);\n        uint32_t hash3 = calculate_hash(byte2);\n        hash3 = calculate_hash(hash3, *(uint32_t *)(string_data + 4));\n        hash3 = calculate_hash(hash3, *(uint32_t *)(string_data + 0x18));\n        hash3 = calculate_hash(hash3, *(uint32_t *)(string_data + 0x1c));\n        *(uint32_t *)(data_buffer + 8) = hash3;\n        byte5 = *(uint8_t *)(string_data + 0x20);\n        byte6 = *(uint8_t *)(string_data + 0x21);\n        byte7 = *(uint8_t *)(string_data + 0x22);\n        uint32_t hash4 = calculate_hash(byte3);\n        hash4 = calculate_hash(hash4, *(uint32_t *)(string_data + 4));\n        hash4 = calculate_hash(hash4, *(uint32_t *)(string_data + 0x24));\n        hash4 = calculate_hash(hash4, *(uint32_t *)(string_data + 0x28));\n        *(uint32_t *)(data_buffer + 0xc) = hash4;\n        *(uint8_t *)(data_buffer + 0x10) = byte4;\n        *(uint8_t *)(data_buffer + 0x11) = byte5;\n        *(uint8_t *)(data_buffer + 0x12) = byte6;\n        *(uint8_t *)(data_buffer + 0x13) = byte7;\n    }\n}\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_0800407c",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "decode_and_store_data_08002d88"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shifted_input",
                "iVar4": "hash_value",
                "uVar3": "sign_bit_mask",
                "uVar5": "msb_mask"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes_count;\n  uint sign_bit_mask;\n  uint shifted_input;\n  uint hash_value;\n  \n  sign_bit_mask = input & 0x80000000;\n  if ((int)sign_bit_mask < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shifted_input = input << (leading_zeroes_count - 8);\n  hash_value = ((sign_bit_mask | 0x4b000000) - 0x800000) + shifted_input * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint msb_mask = 0 << (shifted_input & 0xff);\n    hash_value = hash_value + (input << (shifted_input & 0xff)) + (0U >> (0x20 - shifted_input & 0xff)) + (uint)(0x7fffffff < msb_mask);\n    if (msb_mask == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  hash_value = hash_value + ((input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(shifted_input >> 0x1f);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_08000a04",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "int is_valid_08000a04(uint16_t param1, int param2, uint16_t param3, int param4) {\n\tint isParam2Valid = (((param2 << 1) >> 0x15) != -1) || ((param1 | (param2 << 0xc)) == 0);\n\tint isParam4Valid = (((param4 << 1) >> 0x15) != -1) || ((param3 | (param4 << 0xc)) == 0);\n\treturn isParam2Valid && isParam4Valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_valid_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "*param_1": "*param_array",
                "iVar1": "value_1",
                "iVar2": "value_2",
                "uVar3": "value_3",
                "iVar4": "quotient_1",
                "iVar5": "quotient_2",
                "iVar6": "current_value",
                "value_4": "value_4",
                "DAT_08002720": "PTR_DAT_08002720"
            },
            "code": "void update_values_080025e8(int *param_array)\n{\n  int current_value = *param_array;\n  uint value_4 = param_array[4];\n  *(uint *)(current_value + 0x10) = *(uint *)(current_value + 0x10) & 0xffffcfff | param_array[3];\n  *(uint *)(current_value + 0xc) = param_array[2] | value_4 | param_array[5] | *(uint *)(current_value + 0xc) & 0xffffe9f3;\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xfffffcff | param_array[6];\n  if (current_value == DAT_08002720) {\n    int value_1 = get_shifted_value_08002250();\n    int value_2 = get_shifted_value_08002250();\n    int value_3 = get_shifted_value_08002250();\n    int quotient_1 = (int)(((ulonglong)(uint)(value_1 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) / 100);\n    int quotient_2 = (uint)(value_2 * 0x19) / (uint)(param_array[1] << 2) + (int)(((ulonglong)(uint)(value_3 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) / 100) * -100;\n    uint quotient_3 = (uint)(get_shifted_value_08002250() * 0x19) / (uint)(param_array[1] << 2);\n    int value_4 = get_shifted_value_08002250();\n  }\n  else {\n    int value_1 = shift_bits_08002220();\n    int value_2 = shift_bits_08002220();\n    int value_3 = shift_bits_08002220();\n    int quotient_1 = (int)(((ulonglong)(uint)(value_1 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) / 100);\n    int quotient_2 = (uint)(value_2 * 0x19) / (uint)(param_array[1] << 2) + (int)(((ulonglong)(uint)(value_3 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) / 100) * -100;\n    uint quotient_3 = (uint)(shift_bits_08002220() * 0x19) / (uint)(param_array[1] << 2);\n    int value_4 = shift_bits_08002220();\n  }\n  *(uint *)(current_value + 8) = (((quotient_3 + (int)(((ulonglong)(uint)(value_4 * 0x19) / (ulonglong)(uint)(param_array[1] << 2)) / 100)) * -100 + 0x32) / 100 & 0xf | (quotient_2 * 0x10 + 0x32U) / 100 & 0xf0) + quotient_1 * 0x10;\n  return;\n}\n",
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_values_080025e8"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "calculate_sensor_data_hash_08002b48",
                "in_r3": "input_buffer",
                "local_18": "local_data",
                "local_14": "local_buffer",
                "PTR_s____Src_MPU9250_c_08002be4": "sensor_data_src",
                "PTR_DAT_08002be8": "output_data",
                "PTR_DAT_08002bec": "output_data"
            },
            "code": "void calculate_sensor_data_hash_08002b48() {\n    uint16_t local_data = 0;\n    uint32_t local_buffer = in_r3 & 0xFFFF0000;\n    copy_data_to_buffer(0xD0, 0x3B, &local_data, 6, PTR_s____Src_MPU9250_c_08002be4, 0x58);\n    uint16_t local_data_16 = (local_data << 8) | (local_data >> 8);\n    uint32_t local_buffer_16 = (local_buffer << 16) | (local_buffer >> 16);\n    uint32_t hash1 = calculate_hash(local_data);\n    hash1 = apply_hash_operation(hash1, 0x40800000);\n    hash1 = apply_hash_operation(hash1, 0x38000000);\n    uint32_t hash2 = calculate_hash(local_data_16);\n    hash2 = apply_hash_operation(hash2, 0x40800000);\n    hash2 = apply_hash_operation(hash2, 0x38000000);\n    uint32_t hash3 = calculate_hash(local_buffer_16);\n    hash3 = apply_hash_operation(hash3, 0x40800000);\n    hash3 = apply_hash_operation(hash3, 0x38000000);\n    PTR_DAT_08002be8[0] = hash1;\n    PTR_DAT_08002be8[1] = hash2;\n    PTR_DAT_08002be8[2] = hash3;\n}",
            "called": [
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_sensor_data_hash_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "copy_data_and_clear_bss_08004f68",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_bss_08004f68() {\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08004fa0 + index < PTR_DAT_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_DAT_08004fa0 + index) = *(undefined4 *)(DAT_08004f9c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08004fa8; data_ptr < PTR_DAT_08004fac; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_clear_flags();\n  run_functions();\n  jump_table = (code *)0x8004f9a;\n  run_program();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080041ae",
                "FUN_08004f10",
                "FUN_08004fb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_bss_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_param_bits_08001170",
                "param_1": "param_value",
                "DAT_08001190": "data_ptr"
            },
            "code": "void set_param_bits_08001170(uint param_value) {\n    uint* DAT_08001190 = (uint*)(DAT_08001190 + 0xc);\n    uint original_value = *DAT_08001190;\n    uint mask = 0xf8ff;\n    uint new_value = (param_value & 7) << 8 | 0x5fa0000 | (original_value & mask);\n    *DAT_08001190 = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_param_bits_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "copy_data_to_buffer_and_calculate_hash_08002bf0",
                "local_20": "data_16bit_1",
                "local_1c": "data_8bit_1",
                "puVar1": "PTR_DAT_08002ca0",
                "puVar2": "PTR_DAT_08002cac",
                "uVar3": "hash_output"
            },
            "code": "void copy_data_to_buffer_and_calculate_hash_08002bf0(void)\n{\n  uint16_t data_16bit_1;\n  uint16_t data_16bit_2;\n  uint8_t data_8bit_1;\n  uint8_t data_8bit_2;\n  uint32_t hash_output;\n  uint32_t hash_input_1;\n  uint32_t hash_input_2;\n  uint32_t hash_input_3;\n  copy_data_to_buffer_080040e8(0xd0,0x43,&data_16bit_1,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  data_16bit_2 = (data_16bit_1 & 0xFF) << 8 | (data_16bit_1 >> 8) & 0xFF;\n  data_8bit_1 = (uint8_t)(data_16bit_2 & 0xFF);\n  data_8bit_2 = (uint8_t)((data_16bit_2 >> 8) & 0xFF);\n  hash_input_1 = calculate_hash_08000c44(data_16bit_2);\n  hash_input_2 = FUNC_08000cec(hash_input_1,DAT_08002ca8);\n  hash_input_3 = FUNC_08000cec(hash_input_2,0x38000000);\n  hash_output = FUNC_08000ad8(hash_input_3,*(uint32_t *)PTR_DAT_08002ca4);\n  *(uint32_t *)PTR_DAT_08002cac = hash_output;\n  hash_input_1 = calculate_hash_08000c44(data_8bit_1);\n  hash_input_2 = FUNC_08000cec(hash_input_1,DAT_08002ca8);\n  hash_input_3 = FUNC_08000cec(hash_input_2,0x38000000);\n  hash_output = FUNC_08000ad8(hash_input_3,*(uint32_t *)(PTR_DAT_08002ca4 + 4));\n  *(uint32_t *)(PTR_DAT_08002cac + 4) = hash_output;\n  hash_input_1 = calculate_hash_08000c44(data_8bit_2);\n  hash_input_2 = FUNC_08000cec(hash_input_1,DAT_08002ca8);\n  hash_input_3 = FUNC_08000cec(hash_input_2,0x38000000);\n  hash_output = FUNC_08000ad8(hash_input_3,*(uint32_t *)(PTR_DAT_08002ca4 + 8));\n  *(uint32_t *)(PTR_DAT_08002cac + 8) = hash_output;\n}\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_and_calculate_hash_08002bf0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "decode_and_check_imu_data_08002ad0",
                "PTR_s____Src_MPU9250_c_08002b44": "imu_data_src",
                "check_and_decode_strings_0800407c": "decode_and_check_strings",
                "check_input_and_decode_strings_0800403c": "decode_and_check_input_strings"
            },
            "code": "void decode_and_check_imu_data_08002ad0(void) {\n    decode_and_check_strings(0xd0, 0x75, PTR_s____Src_MPU9250_c_08002b44, 0x3b);\n    decode_and_check_input_strings(0xd0, 0x6b, 0x80, 1);\n    decode_and_check_input_strings(0xd0, 0x6b, 1);\n    decode_and_check_input_strings(0xd0, 0x6c, 0, 1);\n    decode_and_check_input_strings(0xd0, 0x19, 0, 1);\n    decode_and_check_input_strings(0xd0, 0x1d, 3, 1);\n    decode_and_check_input_strings(0xd0, 0x1a, 3, 1);\n    decode_and_check_input_strings(0xd0, 0x1b, 0x10, 1);\n    decode_and_check_input_strings(0xd0, 0x1c, 8, 1);\n    return;\n}",
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "decode_and_check_imu_data_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "check_concatenated_params_08001050",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "concatenate_params_and_swap_them_08000ffc": "concatenate_and_swap_params"
            },
            "code": "bool check_concatenated_params_08001050(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  concatenate_and_swap_params();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "check_concatenated_params_08001050"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_values_and_return_080009c8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "bool check_values_and_return_080009c8(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  check_values_and_return_080009c8_08000990_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "check_values_and_return_080009c8"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculate_average_08002ed4",
                "puVar1": "data_pointer",
                "uVar2": "temp2",
                "uVar3": "denominator",
                "uVar4": "temp1"
            },
            "code": "void calculate_average_08002ed4(void)\n{\n    undefined *data_pointer;\n    undefined4 numerator;\n    undefined4 denominator;\n    undefined4 temp1;\n    undefined4 temp2;\n    \n    data_pointer = PTR_DAT_08002ee4;\n    denominator = *(undefined4 *)PTR_DAT_08002ee0;\n    temp1 = *(undefined4 *)(PTR_DAT_08002ee4 + 4);\n    temp2 = FUNC_08000ad8(0x3f800000, temp1);\n    temp2 = FUNC_08000cec(temp2, denominator);\n    denominator = FUNC_08000cec(temp1, *(undefined4 *)data_pointer);\n    numerator = FUNC_08000adc(denominator, temp2);\n    *(undefined4 *)data_pointer = numerator;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_average_08002ed4"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "bitwise_or",
                "bVar5": "is_zero",
                "bVar1": "is_negative1"
            },
            "code": "uint calculate_result_08000f9c(uint input1, uint input2)\n{\n  bool is_negative1;\n  uint double_input1;\n  uint double_input2;\n  uint bitwise_or;\n  bool is_zero;\n  bool is_equal;\n  bool is_negative2;\n\n  double_input1 = input1 * 2;\n  double_input2 = input2 * 2;\n\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) && ((((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n\n  bitwise_or = double_input1 | input2 & 0x7fffffff;\n  is_zero = bitwise_or == 0;\n\n  if (!is_zero) {\n    is_equal = input1 ^ input2 == 0;\n    is_zero = is_equal;\n  }\n\n  is_negative1 = -1 < (int)(input1 ^ input2);\n\n  if (is_negative1) {\n    input1 = double_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n\n  if (is_negative1 && double_input2 <= double_input1 && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n\n  if (!is_negative1 || double_input2 > double_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n\n  return input1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "FUN_08001004"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nuint FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint extraout_r1_02;\n  undefined4 extraout_r1_03;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 uVar9;\n  uint uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  ulonglong uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  longlong lVar18;\n  ulonglong uVar19;\n  ulonglong uVar20;\n  undefined8 uVar21;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar10 = param_4 & 0x7fffffff;\n  if ((uVar10 | param_3) == 0) {\n    return 0;\n  }\n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= (int)DAT_08006428) {\n    if (uVar8 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar8 < uVar10) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar10 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar10) {\n            local_70 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar10 == DAT_08006428) {\n                if ((uVar8 + 0xc0100000 | param_1) == 0) {\n                  return 0;\n                }\n                if (DAT_08006434 < (int)uVar8) {\n                  if ((int)param_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)param_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (uVar10 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return param_1;\n                }\n                uVar8 = 0;\n                uVar10 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              uVar19 = CONCAT44(param_2,param_1);\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                uVar10 = calculate_float_08006c0c(param_1,param_2);\n                return uVar10;\n              }\n            }\n          }\n          else {\n            if ((int)uVar10 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            iVar6 = ((int)uVar10 >> 0x14) + -0x3ff;\n            if (0x14 < iVar6) {\n              uVar2 = param_3 >> (0x34U - iVar6 & 0xff);\n              if (param_3 == uVar2 << (0x34U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar2 = (int)uVar10 >> (0x14U - iVar6 & 0xff);\n              local_70 = param_3;\n              if (uVar10 == uVar2 << (0x14U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          uVar13 = do_nothing_0800708c(param_1,param_2);\n          uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n          uVar11 = (undefined4)(uVar13 >> 0x20);\n          uVar1 = (undefined4)uVar13;\n          uVar20 = uVar13 & 0xffffffff | ((ulonglong)param_2 & 0x7fffffff) << 0x20;\n          if ((param_1 == 0) && ((uVar8 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              uVar13 = FUNC_08000724(0,DAT_08006438,uVar1,uVar11);\n            }\n            if (-1 < (int)param_2) {\n              return (uint)uVar13;\n            }\n            if ((local_70 | uVar8 + 0xc0100000) != 0) {\n              return (uint)uVar13;\n            }\n          }\n          else {\n            uVar2 = 0xffffffff - ((int)param_2 >> 0x1f);\n            uVar13 = CONCAT44(param_2,param_1);\n            if ((local_70 | uVar2) != 0) {\n              if (DAT_08006440 < (int)uVar10) {\n                param_1 = DAT_08006420;\n                param_2 = DAT_08006424;\n                if (DAT_08006440 + 0x2100000 < (int)uVar10) {\n                  if (DAT_08006434 < (int)uVar8) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return 0;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n                  if (-1 < (int)param_4) {\n                    return 0;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar8 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar8) goto LAB_08006418;\n                uVar14 = FUNC_08000168(uVar1,uVar11,0,DAT_080065d0);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar1 = (undefined4)uVar14;\n                uVar14 = FUNC_080004d0(uVar1,uVar11,DAT_080065a8,DAT_080065ac);\n                uVar15 = FUNC_080004d0(uVar1,uVar11,DAT_080065b0,DAT_080065b4);\n                uVar16 = FUNC_080004d0(uVar1,uVar11,0,DAT_080065d4);\n                uVar16 = FUNC_08000168(DAT_080065b8,DAT_080065bc,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar1,uVar11);\n                uVar16 = FUNC_08000168(0,DAT_080065d8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar17 = FUNC_080004d0(uVar1,uVar11,uVar1,uVar11);\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                      (int)((ulonglong)uVar17 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),DAT_080065c0,\n                                      DAT_080065c4);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                FUNC_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                             (int)((ulonglong)uVar15 >> 0x20));\n                lVar18 = (ulonglong)extraout_r1 << 0x20;\n                uVar10 = extraout_r1;\n              }\n              else {\n                local_54 = 0;\n                if (uVar8 < 0x100000) {\n                  uVar20 = FUNC_080004d0();\n                  local_54 = -0x35;\n                }\n                uVar10 = (uint)(uVar20 >> 0x20);\n                uVar1 = (undefined4)uVar20;\n                local_54 = ((int)uVar10 >> 0x14) + -0x3ff + local_54;\n                uVar10 = uVar10 & 0xfffff;\n                uVar8 = uVar10 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar10) {\n                  if (DAT_08006920 < (int)uVar10) {\n                    uVar8 = uVar8 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar6 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar6 = 0;\n                }\n                uVar7 = *(undefined4 *)(PTR_DAT_08006924 + iVar6 * 8);\n                uVar9 = *(undefined4 *)((int)(PTR_DAT_08006924 + iVar6 * 8) + 4);\n                uVar14 = FUNC_08000168(uVar1,uVar8,uVar7,uVar9);\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_0800016c(uVar1,uVar8,uVar7,uVar9);\n                uVar15 = FUNC_08000724(0,DAT_08006928,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0((int)uVar14,uVar12,(int)uVar15,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = (undefined4)uVar16;\n                uVar16 = FUNC_080004d0(0,uVar4);\n                uVar14 = FUNC_08000168((int)uVar14,uVar12,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_08000168(0,((int)uVar8 >> 1 | 0x20000000U) + 0x80000 + iVar6 * 0x40000,\n                                      uVar7,uVar9);\n                uVar16 = FUNC_08000168(uVar1,uVar8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),0,uVar4);\n                uVar14 = FUNC_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar14 = FUNC_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,uVar3\n                                     );\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_080004d0(uVar11,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar1 = (undefined4)uVar15;\n                uVar15 = FUNC_080004d0(uVar1,uVar3,DAT_080068d0,DAT_080068d4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar16 = FUNC_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUNC_0800016c(uVar11,uVar4,0,uVar4);\n                uVar16 = FUNC_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar15 = FUNC_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0(0,uVar4,0,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar17 = FUNC_0800016c((int)uVar16,uVar3,0,DAT_0800692c);\n                FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar15,uVar1);\n                uVar17 = FUNC_080004d0(0,uVar4,0,extraout_r1_00);\n                uVar7 = (undefined4)((ulonglong)uVar17 >> 0x20);\n                uVar21 = FUNC_08000168(0,extraout_r1_00,0,DAT_0800692c);\n                uVar16 = FUNC_08000168((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar16,uVar3\n                                     );\n                uVar15 = FUNC_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar14 = FUNC_080004d0((int)uVar14,uVar12,0,extraout_r1_00);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                FUNC_0800016c((int)uVar17,uVar7,(int)uVar15,uVar1);\n                uVar14 = FUNC_080004d0(0,extraout_r1_01,DAT_08006900,DAT_08006904);\n                uVar16 = FUNC_08000168(0,extraout_r1_01,(int)uVar17,uVar7);\n                uVar15 = FUNC_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006908,\n                                      DAT_0800690c);\n                uVar16 = FUNC_080004d0(0,extraout_r1_01,DAT_08006910,DAT_08006914);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),\n                                      *(undefined4 *)(PTR_DAT_08006930 + iVar6 * 8),\n                                      *(undefined4 *)((int)(PTR_DAT_08006930 + iVar6 * 8) + 4));\n                uVar16 = reverse_bits_08000404(local_54);\n                uVar1 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = *(undefined4 *)(PTR_DAT_08006934 + iVar6 * 8);\n                uVar12 = *(undefined4 *)((int)(PTR_DAT_08006934 + iVar6 * 8) + 4);\n                uVar17 = FUNC_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar17 = FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar11,uVar12);\n                FUNC_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar16,uVar1);\n                uVar16 = FUNC_08000168(0,extraout_r1_02,(int)uVar16,uVar1);\n                lVar18 = FUNC_08000168((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar11,uVar12);\n                uVar10 = extraout_r1_02;\n              }\n              uVar14 = FUNC_08000168((int)lVar18,(int)((ulonglong)lVar18 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar14 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              param_2 = DAT_080065dc;\n              if ((local_70 - 1 | uVar2) != 0) {\n                param_2 = DAT_080065d0;\n              }\n              uVar15 = FUNC_08000168(param_3,param_4,0,param_4);\n              uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,uVar10);\n              uVar14 = FUNC_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),param_3,param_4);\n              uVar14 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar1 = (undefined4)uVar14;\n              uVar14 = FUNC_080004d0(0,uVar10,0,param_4);\n              uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar11 = (undefined4)uVar14;\n              lVar18 = FUNC_0800016c(uVar1,uVar12,uVar11,uVar3);\n              uVar8 = (uint)((ulonglong)lVar18 >> 0x20);\n              uVar10 = (uint)lVar18;\n              if (DAT_080065e0 < (int)uVar8) {\n                if ((uVar8 + 0xbf700000 | uVar10) == 0) {\n                  uVar15 = FUNC_0800016c(uVar1,uVar12,DAT_08006ba8,DAT_08006bac);\n                  uVar16 = FUNC_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = is_end_of_string_080009f0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                       (int)((ulonglong)uVar16 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUNC_080004d0(0,param_2,DAT_080065c8,DAT_080065cc);\n                param_1 = DAT_080065c8;\n                param_2 = DAT_080065cc;\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar8 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar8 | uVar10) == 0) {\n                  uVar15 = FUNC_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = check_values_and_return_080009c8(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUNC_080004d0(0,param_2,DAT_08006bf0,DAT_08006bf4);\n                param_1 = DAT_08006bf0;\n                param_2 = DAT_08006bf4;\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar8 & 0x7fffffff)) {\n                  uVar8 = (0x100000 >> (((int)(uVar8 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar8;\n                  uVar10 = (uVar8 * 2 >> 0x15) - 0x3ff;\n                  iVar6 = (int)(uVar8 & 0xfffff | 0x100000) >> (0x14 - uVar10 & 0xff);\n                  if (lVar18 < 0) {\n                    iVar6 = -iVar6;\n                  }\n                  uVar14 = FUNC_08000168(uVar11,uVar3,0,uVar8 & ~(DAT_08006bfc >> (uVar10 & 0xff)));\n                }\n                else {\n                  iVar6 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                local_68 = (undefined4)uVar14;\n                FUNC_0800016c(local_68,local_64,uVar1,uVar12);\n                uVar14 = FUNC_080004d0(0,extraout_r1_03,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_08000168(0,extraout_r1_03,local_68,local_64);\n                uVar15 = FUNC_08000168(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bb8,\n                                      DAT_08006bbc);\n                uVar16 = FUNC_080004d0(0,extraout_r1_03,DAT_08006bc0,DAT_08006bc4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_0800016c((int)uVar14,uVar11,(int)uVar15,uVar12);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar1 = (undefined4)uVar16;\n                uVar14 = FUNC_08000168(uVar1,uVar3,(int)uVar14,uVar11);\n                uVar14 = FUNC_08000168((int)uVar15,uVar12,(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUNC_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar11 = (undefined4)uVar15;\n                uVar15 = FUNC_080004d0(uVar11,uVar4,DAT_08006bc8,DAT_08006bcc);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd0,\n                                      DAT_08006bd4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be0,\n                                      DAT_08006be4);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar15 = FUNC_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUNC_08000168(uVar1,uVar3,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUNC_080004d0(uVar1,uVar3,(int)uVar15,uVar11);\n                uVar15 = FUNC_08000168((int)uVar15,uVar11,0,0x40000000);\n                uVar15 = FUNC_08000724((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar16 = FUNC_080004d0(uVar1,uVar3,(int)uVar14,uVar12);\n                uVar14 = FUNC_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar14 = FUNC_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = FUNC_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar1,uVar3);\n                uVar13 = FUNC_08000168(0,DAT_08006c00,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                iVar5 = (int)(uVar13 >> 0x20);\n                uVar10 = iVar5 + iVar6 * 0x100000;\n                uVar19 = uVar13 & 0xffffffff | (ulonglong)uVar10 << 0x20;\n                if ((int)uVar10 < 0x100000) {\n                  uVar19 = calculate_080071c0((int)uVar13,iVar5,iVar6);\n                }\n                param_1 = 0;\n              }\nLAB_0800634a:\n              uVar10 = FUNC_080004d0((int)uVar19,(int)(uVar19 >> 0x20),param_1,param_2);\n              return uVar10;\n            }\n          }\n          uVar1 = (undefined4)(uVar13 >> 0x20);\n          uVar14 = FUNC_08000168((int)uVar13,uVar1,(int)uVar13,uVar1);\n          uVar10 = (uint)((ulonglong)uVar14 >> 0x20);\n          uVar8 = (uint)uVar14;\n          param_1 = uVar8;\n          param_2 = uVar10;\nLAB_08006320:\n          uVar10 = FUNC_08000724(uVar8,uVar10,param_1,param_2);\n          return uVar10;\n        }\n      }\n    }\n    else if ((int)uVar10 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar8 + 0xc0100000 | param_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  uVar10 = shift_left_32_bits_080070a4(PTR_DAT_0800642c);\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_08000404",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "high_bits",
                "0U": "low_bits",
                "result": "result"
            },
            "code": "uint calculate_hash_08000c3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeros = count_leading_zeroes(input);\n  int shift_amount = leading_zeros - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeros > 7) {\n    uint high_bits = 0 << (shift_amount & 0xff);\n    uint low_bits = 0U >> (0x20 - shift_amount & 0xff);\n    uint result = multiplier + ((input << (shift_amount & 0xff)) + low_bits + (uint)(0x7fffffff < high_bits));\n    if (high_bits == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint high_bits = input << (leading_zeros + 0x18U & 0xff);\n  uint low_bits = (int)high_bits >> 0x1f;\n  uint result = multiplier + ((input >> (0x20 - (leading_zeros + 0x18U) & 0xff)) - low_bits);\n  if ((high_bits & 0x7fffffff) == 0) {\n    result = result & ~(high_bits >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c3c"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "decode_and_xor_080043bc",
                "uVar1": "input_1",
                "uVar2": "input_2",
                "puVar3": "output_ptr",
                "puVar4": "input_ptr",
                "local_24": "data",
                "local_1c": "unused",
                "PTR_DAT_080043ec": "data_table"
            },
            "code": "void decode_and_xor_080043bc(unsigned char key, unsigned int* data, unsigned int size) {\n    unsigned int* output_ptr = data;\n    unsigned int* input_ptr = (unsigned int*)PTR_DAT_080043ec;\n    unsigned int* end_ptr = (unsigned int*)(PTR_DAT_080043ec + 0x10);\n    while (input_ptr != end_ptr) {\n        *output_ptr++ = *input_ptr++;\n        *output_ptr++ = *input_ptr++;\n    }\n    *(((unsigned short*)output_ptr))) = *(((unsigned short*)input_ptr)));\n    decode_and_xor_080043bc_08004300(key, data, size);\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_080043bc"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "check_param_08001214",
                "param_1": "num",
                "puVar1": "data_ptr",
                "iVar2": "data_val"
            },
            "code": "int check_param_08001214(unsigned int num){\n                        unsigned int* data_ptr = DAT_08001238;\n                        int data_val = DAT_0800123c;\n                        if(num - 1U < 0x1000000){\n                            data_ptr[1] = num - 1U;\n                            *(unsigned char *)(data_val + 0x23) = 0xf0;\n                            data_ptr[2] = 0;\n                            *data_ptr = 7;\n                            return 0;\n                        }\n                        return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "check_param_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_param_in_memory_08003fc4",
                "param_1": "new_param",
                "PTR_DAT_08003fcc": "ptr"
            },
            "code": "void set_param_in_memory_08003fc4(int new_param) {\n    int* PTR_DAT_08003fcc = (int*) PTR_DAT_08003fcc;\n    int offset = 0x40;\n    int* target_address = (int*) (PTR_DAT_08003fcc + offset);\n    *target_address = new_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_param_in_memory_08003fc4"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "reverse_bits_08000404",
                "param_1": "num",
                "uVar1": "shift_amount",
                "uVar2": "abs_num",
                "uVar3": "shift_diff",
                "iVar4": "leading_zeroes",
                "uVar5": "shift",
                "uVar6": "sign_bit",
                "in_r12": "in_r12",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow"
            },
            "code": "ulonglong reverse_bits_08000404(uint num)\n{\n  uint abs_num = num & 0x7fffffff;\n  if (abs_num == 0) {\n    return 0;\n  }\n  uint leading_zeroes = count_leading_zeroes(abs_num);\n  uint shift = 0x15 - leading_zeroes;\n  uint result = 0;\n  if (shift < 0x20) {\n    uint shift_amount = shift + 1;\n    result = abs_num << (shift & 0xff);\n    abs_num = abs_num >> ((0x20 - shift_amount) & 0xff);\n  }\n  else {\n    uint in_r12 = 0x20 - leading_zeroes;\n    result = abs_num << (leading_zeroes & 0xff);\n    result |= 0U >> (in_r12 & 0xff);\n    result |= 0 << (leading_zeroes & 0xff);\n  }\n  if (shift < 0x433) {\n    return CONCAT44(result + (0x432 - shift) * 0x100000 | (num & 0x80000000), 0);\n  }\n  uint shift_amount = ~(0x432 - shift);\n  if (shift_amount > 0x1e) {\n    return CONCAT44(num, result >> ((shift_amount - 0x1f) & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_diff = shift_amount - 0x13;\n  if (shift_diff == 0 || (shift_diff < 0) != SCARRY4(shift_amount - 0x1f, 0xc)) {\n    shift_amount++;\n    return CONCAT44((num & 0x80000000) | (result >> (shift_amount & 0xff)), result << ((0x20 - shift_amount) & 0xff));\n  }\n  return CONCAT44(num, result >> ((0x20 - (0xc - shift_diff)) & 0xff) | (result << ((0xc - shift_diff) & 0xff))) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "reverse_bits_08000404"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "check_values_0800209c",
                "param_1": "values",
                "param_2": "num_values",
                "cVar1": "first_bit",
                "cVar2": "second_bit",
                "puVar3": "dat_08002204",
                "iVar4": "original_dat_value_shifted_31",
                "iVar5": "get_value_from_pointer_result",
                "uVar6": "value",
                "uVar7": "shifted_dat_08002208",
                "calculate_value_08002008": "calculate_value_result",
                "count_leading_zeroes": "count_leading_zeros_result",
                "PTR_DAT_08002210": "ptr_dat_08002210",
                "PTR_DAT_0800220c": "ptr_dat_0800220c",
                "DAT_08002204": "dat_08002204",
                "DAT_08002208": "dat_08002208",
                "*DAT_08002204": "original_dat_value",
                "*DAT_08002208": "dat_08002208_value"
            },
            "code": "uint32_t check_values_0800209c(uint32_t *values, uint32_t num_values)\n{\n  uint32_t *DAT_08002204 = DAT_08002204;\n  uint32_t *DAT_08002208 = DAT_08002208;\n  uint32_t *DAT_08002204 = *DAT_08002204;\n  uint32_t count_leading_zeros_result;\n  uint32_t calculate_value_result;\n  uint32_t get_value_from_pointer_result;\n  \n  if (num_values <= (*DAT_08002204 & 7)) {\n    *DAT_08002204 = (*DAT_08002204 & 0xfffffff8) | num_values;\n  }\n  else if (num_values != (*DAT_08002204 & 7)) {\n    return 1;\n  }\n  \n  uint32_t value = values[0];\n  if (value & (1 << 31)) {\n    DAT_08002208[1] = (DAT_08002208[1] & 0xffffff0f) | values[2];\n  }\n  \n  if (value & (1 << 30)) {\n    DAT_08002204 = DAT_08002208;\n    if (num_values < (*DAT_08002204 & 7)) {\n      *DAT_08002204 = (*DAT_08002204 & 0xfffffff8) | num_values;\n      if (num_values != (*DAT_08002204 & 7)) {\n        return 1;\n      }\n    }\n    \n    if (values[1] & (1 << 2)) {\n      DAT_08002208[1] = (DAT_08002208[1] & 0xfffff8ff) | values[3];\n    }\n    \n    if (values[0] & (1 << 28)) {\n      DAT_08002208[1] = (DAT_08002208[1] & 0xffffc7ff) | (values[4] << 3);\n    }\n    \n    calculate_value_result = calculate_value_08002008();\n    count_leading_zeros_result = count_leading_zeroes(0xf000000);\n    uint32_t *PTR_DAT_08002210 = (uint32_t *)PTR_DAT_08002210;\n    uint8_t PTR_DAT_0800220c_value = PTR_DAT_0800220c[(DAT_08002208[1] & 0xf0) >> (count_leading_zeros_result & 0xff)];\n    *PTR_DAT_08002210 = calculate_value_result >> PTR_DAT_0800220c_value;\n    write_to_memory_with_check_08001104(0);\n    return 0;\n  }\n  \n  uint32_t second_value = values[1];\n  if (second_value == 1) {\n    uint8_t cVar1 = 0;\n    uint8_t cVar2 = 1;\n  }\n  else {\n    if (second_value == 2) {\n      uint32_t *DAT_08002208 = *DAT_08002208;\n      count_leading_zeros_result = count_leading_zeroes(0x3f000);\n      uint32_t shifted_DAT_08002208 = *DAT_08002208 >> (count_leading_zeros_result & 0x1f);\n      value = shifted_DAT_08002208 << 31;\n      if (value & (1 << 31)) {\n        DAT_08002208[1] = (DAT_08002208[1] & 0xfffffffc) | second_value;\n        get_value_from_pointer_result = get_value_from_pointer_0800115c(value, shifted_DAT_08002208 << 31);\n        if (second_value == 1) {\n          while ((DAT_08002208[1] & 0xc) != 4) {\n            get_value_from_pointer_result = get_value_from_pointer_0800115c();\n            if ((get_value_from_pointer_result - value) < 0x1389) {\n              continue;\n            }\n            goto end_of_while;\n          }\n        }\n        else if (second_value == 2) {\n          while ((DAT_08002208[1] & 0xc) != 8) {\n            get_value_from_pointer_result = get_value_from_pointer_0800115c();\n            if ((get_value_from_pointer_result - value) < 0x1389) {\n              continue;\n            }\n            goto end_of_while;\n          }\n        }\n        else {\n          while ((DAT_08002208[1] & 0xc) != 0) {\n            get_value_from_pointer_result = get_value_from_pointer_0800115c();\n            if ((get_value_from_pointer_result - value) < 0x1389) {\n              continue;\n            }\n            goto end_of_while;\n          }\n        }\n      }\n    }\n    else {\n      uint8_t cVar1 = 1;\n      uint8_t cVar2 = 0;\n    }\n    count_leading_zeros_result = count_leading_zeroes((uint32_t)(cVar1 << 6) << 0x18 | (uint32_t)(cVar2 << 6) << 8);\n    uint32_t shifted_DAT_08002208 = (*DAT_08002208 >> (count_leading_zeros_result & 0x1f)) << 31;\n    if (shifted_DAT_08002208 & (1 << 31)) {\n      DAT_08002208[1] = (DAT_08002208[1] & 0xfffffffc) | second_value;\n      get_value_from_pointer_result = get_value_from_pointer_0800115c(shifted_DAT_08002208, count_leading_zeros_result);\n      if (second_value == 1) {\n        while ((DAT_08002208[1] & 0xc) != 4) {\n          get_value_from_pointer_result = get_value_from_pointer_0800115c();\n          if ((get_value_from_pointer_result - shifted_DAT_08002208) < 0x1389) {\n            continue;\n          }\n          goto end_of_while;\n        }\n      }\n      else if (second_value == 2) {\n        while ((DAT_08002208[1] & 0xc) != 8) {\n          get_value_from_pointer_result = get_value_from_pointer_0800115c();\n          if ((get_value_from_pointer_result - shifted_DAT_08002208) < 0x1389) {\n            continue;\n          }\n          goto end_of_while;\n        }\n      }\n      else {\n        while ((DAT_08002208[1] & 0xc) != 0) {\n          get_value_from_pointer_result = get_value_from_pointer_0800115c();\n          if ((get_value_from_pointer_result - shifted_DAT_08002208) < 0x1389) {\n            continue;\n          }\n          goto end_of_while;\n        }\n      }\n    }\n  }\n  \n  end_of_while:\n  return 3;\n}\n",
            "called": [
                "FUN_0800115c",
                "FUN_08002008",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "check_values_0800209c"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "check_input_and_decode_strings_0800403c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param4",
                "iVar1": "check_result",
                "local_14": "input_array"
            },
            "code": "void check_input_and_decode_strings_0800403c(const int input1, const int input2, const char input3, const int param4) {\n  int check_result;\n  char input_array[8];\n  input_array[0] = input3;\n  check_result = check_input(PTR_DAT_08004074, input1, input2, 1, input_array, 1, 200);\n  if (check_result != 0) {\n    decode_and_clear_strings_08004490(PTR_s____Src_i2c_c_08004078, 0x1b);\n  }\n  if (param4 != 0) {\n    do_nothing(0x32);\n  }\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08001828",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ad0",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "check_input_and_decode_strings_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "FUN_08002b48",
                "FUN_08004a30",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_08002bf0",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "difference",
                "uVar2": "unsigned_second_param",
                "iVar3": "difference",
                "uVar4": "unsigned_fourth_param",
                "uVar5": "result_1",
                "uVar6": "result_2",
                "uVar7": "constant_1",
                "uVar8": "constant_2"
            },
            "code": "ulonglong calculate_result_08006070(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint unsigned_first_param;\n  uint unsigned_second_param;\n  int difference;\n  uint unsigned_fourth_param;\n  ulonglong result_1;\n  ulonglong result_2;\n  undefined8 constant_1;\n  undefined8 constant_2;\n  unsigned_second_param = second_param & 0x7fffffff;\n  unsigned_fourth_param = fourth_param & 0x7fffffff;\n  if ((DAT_08006220 < (unsigned_fourth_param | (-third_param | third_param) >> 0x1f)) || (DAT_08006220 < (unsigned_second_param | (-first_param | first_param) >> 0x1f))) {\n    result_1 = FUNC_0800016c(first_param, second_param, third_param, fourth_param, fourth_param);\n    return result_1;\n  }\n  if ((fourth_param + 0xc0100000 | third_param) == 0) {\n    result_1 = FUNC_08006d68();\n    return result_1;\n  }\n  difference = (int)fourth_param >> 0x1e & 2U | second_param >> 0x1f;\n  if ((first_param | unsigned_second_param) == 0) {\n    if (difference == 2) {\n      return CONCAT44(DAT_080061fc, DAT_080061f8);\n    }\n    if (difference != 3) {\n      return CONCAT44(second_param, first_param);\n    }\n  }\n  else {\n    if ((third_param | unsigned_fourth_param) != 0) {\n      if (unsigned_fourth_param == DAT_08006220) {\n        if (unsigned_second_param == unsigned_fourth_param) {\n          if (difference == 2) {\n            return CONCAT44(DAT_080061ec, DAT_080061e8);\n          }\n          if (difference == 3) {\n            return CONCAT44(DAT_080061f4, DAT_080061f0);\n          }\n          if (difference != 1) {\n            return CONCAT44(DAT_0800621c, DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4, DAT_080061e0);\n        }\n        if (difference == 2) {\n          return CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        if (difference == 3) {\n          return result_1;\n        }\n        if (difference == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (unsigned_second_param != DAT_08006220) {\n        difference = (int)(unsigned_second_param - unsigned_fourth_param) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)fourth_param < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result_2 = 0;\n          }\n          else {\n            FUNC_08000724(first_param, second_param);\n            do_nothing_0800708c();\n            result_2 = FUNC_08006d68();\n          }\n        }\n        difference = (int)(result_2 >> 0x20);\n        if (difference != 1) {\n          if (difference == 2) {\n            constant_2 = FUNC_08000168((int)result_2, difference, DAT_08006208, DAT_0800620c);\n            constant_1 = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          else {\n            if (difference == 0) {\n              return result_2;\n            }\n            constant_1 = FUNC_08000168((int)result_2, difference, DAT_08006208, DAT_0800620c);\n            constant_2 = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          result_1 = FUNC_08000168((int)constant_1, (int)((ulonglong)constant_1 >> 0x20), (int)constant_2, (int)((ulonglong)constant_2 >> 0x20));\n          return result_1;\n        }\n        return result_2 & 0xffffffff | (ulonglong)(difference + 0x80000000) << 0x20;\n      }\n    }\n    result_1 = CONCAT44(DAT_08006214, DAT_08006210);\n    if ((int)second_param < 0) {\n      result_1 = CONCAT44(DAT_080061dc, DAT_080061d8);\n    }\n  }\n  return result_1;\n}",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08006d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "thunk_FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "thunk_FUN_08006070": {
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "iVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "temp_var8"
            },
            "code": "ulonglong calculate_result_thunk_08006070(uint parameter_1, uint parameter_2, uint parameter_3, uint parameter_4)\n{\n  uint temp_var1;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  ulonglong temp_var5;\n  ulonglong temp_var6;\n  undefined8 temp_var7;\n  undefined8 temp_var8;\n  temp_var6 = CONCAT44(DAT_08006214,DAT_08006210);\n  temp_var5 = CONCAT44(DAT_08006204,DAT_08006200);\n  temp_var4 = parameter_4 & 0x7fffffff;\n  if ((DAT_08006220 < (temp_var4 | (-parameter_3 | parameter_3) >> 0x1f)) || (temp_var2 = parameter_2 & 0x7fffffff, DAT_08006220 < (temp_var2 | (-parameter_1 | parameter_1) >> 0x1f))) {\n    temp_var5 = FUNC_0800016c(parameter_1,parameter_2,parameter_3,parameter_4,parameter_4);\n    return temp_var5;\n  }\n  if ((parameter_4 + 0xc0100000 | parameter_3) == 0) {\n    temp_var5 = FUNC_08006d68();\n    return temp_var5;\n  }\n  temp_var1 = (int)parameter_4 >> 0x1e & 2U | parameter_2 >> 0x1f;\n  if ((parameter_1 | temp_var2) == 0) {\n    if (temp_var1 == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (temp_var1 != 3) {\n      return CONCAT44(parameter_2,parameter_1);\n    }\n  }\n  else {\n    if ((parameter_3 | temp_var4) != 0) {\n      if (temp_var4 == DAT_08006220) {\n        if (temp_var2 == temp_var4) {\n          if (temp_var1 == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (temp_var1 == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (temp_var1 != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (temp_var1 == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (temp_var1 == 3) {\n          return temp_var5;\n        }\n        if (temp_var1 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (temp_var2 != DAT_08006220) {\n        temp_var3 = (int)(temp_var2 - temp_var4) >> 0x14;\n        if (temp_var3 < 0x3d) {\n          if (((int)parameter_4 < 0) && (temp_var3 + 0x3c < 0 != SCARRY4(temp_var3,0x3c))) {\n            temp_var6 = 0;\n          }\n          else {\n            FUNC_08000724(parameter_1,parameter_2);\n            do_nothing_0800708c();\n            temp_var6 = FUNC_08006d68();\n          }\n        }\n        temp_var3 = (int)(temp_var6 >> 0x20);\n        if (temp_var1 != 1) {\n          if (temp_var1 == 2) {\n            temp_var8 = FUNC_08000168((int)temp_var6,temp_var3,DAT_08006208,DAT_0800620c);\n            temp_var7 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (temp_var1 == 0) {\n              return temp_var6;\n            }\n            temp_var7 = FUNC_08000168((int)temp_var6,temp_var3,DAT_08006208,DAT_0800620c);\n            temp_var8 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          temp_var5 = FUNC_08000168((int)temp_var7,(int)((ulonglong)temp_var7 >> 0x20),(int)temp_var8,(int)((ulonglong)temp_var8 >> 0x20));\n          return temp_var5;\n        }\n        return temp_var6 & 0xffffffff | (ulonglong)(temp_var3 + 0x80000000) << 0x20;\n      }\n    }\n    temp_var5 = temp_var6;\n    if ((int)parameter_2 < 0) {\n      temp_var5 = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return temp_var5;\n}\n",
            "called": [
                "FUN_08006070"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "decode_and_clear_string_08004cac",
                "param_1": "length",
                "puVar1": "string_ptr",
                "PTR_DAT_08004cc4": "string_start_ptr",
                "PTR_DAT_08004cc8": "string_end_ptr",
                "clear_string_08004ffc": "clear_string",
                "decode_string_08004c8c": "decode_string"
            },
            "code": "void decode_and_clear_string_08004cac(undefined4 length) {\n  undefined *string_ptr;\n  string_ptr = PTR_DAT_08004cc4;\n  clear_string(PTR_DAT_08004cc4, PTR_DAT_08004cc8, length);\n  decode_string(string_ptr);\n  return;\n}",
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "decode_and_clear_string_08004cac"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "decode_data_08004c18",
                "param_1": "input_data",
                "puVar1": "data_pointer",
                "iVar2": "value1",
                "iVar3": "value2",
                "uVar4": "flag_value",
                "puVar5": "data_array_pointer"
            },
            "code": "int decode_data_08004c18(unsigned char input_data)\n{\n  unsigned char *data_pointer;\n  int value1;\n  int value2;\n  unsigned char flag_value;\n  unsigned short *data_array_pointer;\n  data_array_pointer = (unsigned short *)DATA_ARRAY_START;\n  *DATA_ARRAY_START = input_data;\n  data_pointer = DATA_POINTER_START;\n  if ((DATA_POINTER_START[0x39] == '\\x01') || (DATA_POINTER_START[0x39] == '\"')) {\n    if (data_array_pointer == (unsigned short *)0x0) {\n      return 1;\n    }\n    if (DATA_POINTER_START[0x38] != '\\x01') {\n      DATA_POINTER_START[0x38] = 1;\n      *(int *)(data_pointer + 0x3c) = 0;\n      *(unsigned short *)(data_pointer + 0x24) = 1;\n      if (data_pointer[0x39] == '\"') {\n        flag_value = 0x32;\n      }\n      else {\n        flag_value = 0x12;\n      }\n      *(unsigned short *)(data_pointer + 0x26) = 1;\n      data_pointer[0x39] = flag_value;\n      do {\n        if (*(short *)(data_pointer + 0x26) == 0) {\n          value1 = get_value_from_pointer();\n          do {\n            if (**(int **)data_pointer << 0x19 < 0) {\n              if (data_pointer[0x39] == '2') {\n                flag_value = 0x22;\n              }\n              else {\n                flag_value = 1;\n              }\n              data_pointer[0x39] = flag_value;\n              data_pointer[0x38] = 0;\n              return 0;\n            }\n            value2 = get_value_from_pointer();\n          } while ((unsigned int)(value2 - value1) < 6);\n          value1 = *(int *)data_pointer;\n          *(unsigned int *)(value1 + 0xc) = *(unsigned int *)(value1 + 0xc) & 0xffffff7f;\n          *(unsigned int *)(value1 + 0xc) = *(unsigned int *)(value1 + 0xc) & 0xffffffdf;\n          *(unsigned int *)(value1 + 0xc) = *(unsigned int *)(value1 + 0xc) & 0xfffffeff;\n          *(unsigned int *)(value1 + 0x14) = *(unsigned int *)(value1 + 0x14) & 0xfffffffe;\n          data_pointer[0x39] = 1;\n          data_pointer[0x38] = 0;\n          return 3;\n        }\n        *(short *)(data_pointer + 0x26) = *(short *)(data_pointer + 0x26) + -1;\n        if (*(int *)(data_pointer + 8) == 0x1000) {\n          value1 = get_value_from_pointer();\n          while (-1 < **(int **)data_pointer << 0x18) {\n            value2 = get_value_from_pointer();\n            if (5 < (unsigned int)(value2 - value1)) goto LAB_0800281c;\n          }\n          (*(int **)data_pointer)[1] = *data_array_pointer & 0x1ff;\n          if (*(int *)(data_pointer + 0x10) == 0) {\n            data_array_pointer = data_array_pointer + 1;\n            goto LAB_080027c4;\n          }\n        }\n        else {\n          value1 = get_value_from_pointer();\n          while (-1 < **(int **)data_pointer << 0x18) {\n            value2 = get_value_from_pointer();\n            if (5 < (unsigned int)(value2 - value1)) goto LAB_0800281c;\n          }\n          (*(int **)data_pointer)[1] = (unsigned int)*(unsigned char *)data_array_pointer;\n        }\n        data_array_pointer = (unsigned short *)((int)data_array_pointer + 1);\n      } while( true );\n    }\n  }\n  return 2;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "FUN_08004c8c",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "decode_data_08004c18"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "process_input_0800483c",
                "param_1": "input_array",
                "uVar1": "hash_value",
                "iVar2": "current_input",
                "iVar3": "previous_input",
                "iVar4": "string_length",
                "iVar5": "current_hash",
                "iVar6": "previous_hash",
                "iVar7": "calculated_hash"
            },
            "code": "void process_input_0800483c(int *input_array)\n{\n    int hash_value;\n    int current_input;\n    int previous_input;\n    int string_length;\n    int current_hash;\n    int previous_hash;\n    int calculated_hash;\n    \n    previous_input = input_array[10];\n    current_input = input_array[7];\n    string_length = input_array[9];\n    previous_hash = input_array[12];\n    \n    current_hash = calculate_hash(current_input, string_length);\n    calculated_hash = current_hash + previous_input - INT_MIN;\n    input_array[10] = calculated_hash;\n    \n    if (input_array[0] == 3) {\n        if (check_input_string(input_array[10], \"good\") == 0) {\n            if (is_end_of_string(input_array[10], \"@\")) {\n                current_hash = calculate_hash(input_array[10], \"!\");\n                input_array[10] = current_hash;\n            }\n        }\n        else {\n            if (check_input_string(input_array[10], \"bad\") != 0) {\n                current_hash = calculate_hash(input_array[10], \"?\");\n                input_array[10] = current_hash;\n            }\n        }\n    }\n    \n    current_hash = calculate_hash(input_array[1], input_array[10]);\n    input_array[14] = current_hash;\n    current_hash = calculate_hash(input_array[10], input_array[15]);\n    input_array[15] = current_hash;\n    \n    if (is_end_of_string(input_array[15], \"#\")) {\n        current_hash = input_array[15];\n    }\n    else {\n        if (check_input_string(input_array[15], \"$\") == 0) {\n            current_hash = input_array[15];\n        }\n        else {\n            current_hash = calculate_hash(input_array[12], input_array[13]);\n        }\n    }\n    input_array[16] = current_hash;\n    \n    hash_value = calculate_hash(input_array[17]);\n    current_hash = calculate_hash(input_array[16], hash_value);\n    \n    if (is_end_of_string(current_hash, \"#\")) {\n        current_hash = input_array[16];\n    }\n    else {\n        if (check_input_string(current_hash, \"$\") == 0) {\n            current_hash = input_array[16];\n        }\n        else {\n            current_hash = calculate_hash(current_hash, hash_value);\n        }\n    }\n    input_array[16] = current_hash;\n    \n    input_array[13] = previous_input;\n    input_array[11] = input_array[10];\n    input_array[20] = input_array[19];\n}\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_0800483c"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "decode_string_08004c8c",
                "param_1": "string_start",
                "uVar1": "end_of_string_index",
                "puVar2": "current_char_pointer",
                "find_end_of_string_08000150": "find_end_of_string",
                "decode_data_08004c18": "decode_data"
            },
            "code": "void decode_string_08004c8c(undefined *string_start)\n{\n  uint end_of_string_index;\n  undefined *current_char_pointer;\n  \n  current_char_pointer = string_start;\n  while( true ) {\n    end_of_string_index = find_end_of_string(*string_start);\n    if (end_of_string_index <= (uint)((int)current_char_pointer - (int)string_start)) break;\n    decode_data(*current_char_pointer);\n    current_char_pointer = current_char_pointer + 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "decode_string_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_value_08001460",
                "param_1": "pointer_list",
                "param_2": "value_to_check",
                "param_3": "max_iterations",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "value_to_compare",
                "puVar4": "current_pointer"
            },
            "code": "uint32_t check_value_08001460(uint32_t **pointer_list, uint32_t value_to_check, uint32_t max_iterations) {\n  int start_time = get_start_time();\n  do {\n    uint32_t *current_pointer = *pointer_list;\n    uint32_t value_to_compare = (value_to_check >> 24) == 1 ? current_pointer[5] : current_pointer[6];\n    if ((value_to_check & 0xffff & ~value_to_compare) == 0) {\n      return 0;\n    }\n    if ((int)(current_pointer[5] << 0x15) < 0) {\n      *current_pointer |= 0x200;\n      current_pointer[5] &= 0xfffffbff;\n      pointer_list[14] = (uint32_t *)0x4;\n      *((uint8_t *)pointer_list + 0x35) = 0x20;\n      *((uint8_t *)pointer_list + 0x2c) = 0;\n      return 1;\n    }\n  } while ((max_iterations == 0xffffffff) || ((max_iterations != 0 && (get_start_time() - start_time) <= max_iterations)));\n  *((uint8_t *)pointer_list + 0x35) = 0x20;\n  *((uint8_t *)pointer_list + 0x2c) = 0;\n  return 3;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_value_08001460"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "check_input_string_08001064_08001064",
                "in_CY": "input_char",
                "concatenate_params_and_swap_them_08000ffc": "concatenate_and_swap_input_params_08000ffc"
            },
            "code": "bool check_input_string_08001064_08001064(void)\\n{\\n  char input_char;\\n  concatenate_and_swap_input_params_08000ffc();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "check_input_string_08001064_08001064"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "update_value_in_struct_08003fd0",
                "param_1": "new_value",
                "*PTR_DAT_08003fd8": "ptr",
                "offset": "offset",
                "*target_location": "target_location"
            },
            "code": "void update_value_in_struct_08003fd0(int new_value) {\n    int* *PTR_DAT_08003fd8 = (int*) PTR_DAT_08003fd8;\n    int offset = 0x3c;\n    int* target_location = (int*) (*PTR_DAT_08003fd8 + offset);\n    *target_location = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "update_value_in_struct_08003fd0"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "convert_float_to_uint_08000892",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "float_3",
                "param_4": "float_4",
                "uVar1": "bit_1",
                "unaff_r4": "register_4",
                "uVar2": "exponent_masked",
                "uVar3": "float_2_copy",
                "uVar4": "bit_2",
                "bVar4": "is_zero",
                "in_r12": "register_12"
            },
            "code": "ulonglong convert_float_to_uint_08000892(uint float_1, uint float_2, uint float_3, uint float_4) {\n  uint exponent_mask = 0x7ff00000;\n  uint sign_mask = 0x80000000;\n  uint exponent_bits;\n  uint mantissa_bits;\n  uint sign_bit;\n  uint exponent;\n  uint mantissa;\n  if (float_3 != float_4 >> 0x14 || (float_1 | float_2 << 0xc) != 0 && (float_3 | float_4 << 0xc) != 0) {\n    if (float_3 == float_4 >> 0x14) {\n      if ((float_1 | float_2 << 0xc) == 0) {\n        return (ulonglong)((float_2 ^ float_4) & sign_mask | exponent_mask) << 0x20;\n      }\n    }\n    else if (float_4 >> 0x14 == 0) {\n      if ((float_3 | float_4 << 0xc) == 0) {\n        return (ulonglong)((float_2 ^ float_4) & sign_mask) << 0x20;\n      }\n      exponent_bits = 0;\n      mantissa_bits = float_2 & sign_mask;\n      while ((float_2 & 0x100000) == 0) {\n        exponent_bits++;\n        float_2 <<= 1;\n        mantissa_bits <<= 1;\n        if (float_1 & sign_mask) {\n          mantissa_bits++;\n        }\n      }\n      mantissa = mantissa_bits | float_4 & sign_mask;\n      exponent = exponent_bits + 0x3ff;\n      return (ulonglong)mantissa | (ulonglong)exponent << 0x20;\n    }\n  }\n  sign_bit = float_2 & sign_mask;\n  exponent_bits = (float_2 & exponent_mask) >> 0x14;\n  mantissa_bits = float_2 & 0xfffff | 0x100000;\n  if (exponent_bits == 0x7ff) {\n    if (mantissa_bits != 0x100000) {\n      return (ulonglong)mantissa_bits | (ulonglong)exponent_bits << 0x20;\n    }\n    if ((float_1 | float_2 & 0x7fffffff) != 0 || (float_3 | float_4) != 0) {\n      return (ulonglong)sign_bit | exponent_mask;\n    }\n    return (ulonglong)sign_bit | exponent_mask | 0xfffffffffffff;\n  }\n  exponent = exponent_bits - 0x3fe;\n  mantissa = mantissa_bits << 0xc | float_3 >> 0x14;\n  return (ulonglong)mantissa | (ulonglong)exponent << 0x20 | (ulonglong)sign_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "FUN_08000724"
            ],
            "imported": false,
            "current_name": "convert_float_to_uint_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "decode_and_xor_08004458",
                "puVar1": "dst",
                "puVar2": "key",
                "puVar3": "temp",
                "puVar4": "temp_block",
                "puVar5": "src",
                "local_30": "temp_block",
                "local_24": "temp"
            },
            "code": "void decode_and_xor_08004458(uint8_t key, uint32_t* data, size_t size) {\n  uint32_t *src = data;\n  uint32_t *dst = data;\n  uint32_t *end = data + size / 4;\n  uint16_t temp[10];\n  uint32_t temp_block[3];\n  while (src < end) {\n    temp_block[0] = *src++;\n    temp_block[1] = *src++;\n    temp_block[2] = *src++;\n    decode(temp_block, key);\n    temp[0] = (uint16_t)temp_block[0];\n    temp[1] = (uint16_t)(temp_block[0] >> 16);\n    temp[2] = (uint16_t)temp_block[1];\n    temp[3] = (uint16_t)(temp_block[1] >> 16);\n    temp[4] = (uint16_t)temp_block[2];\n    temp[5] = (uint16_t)(temp_block[2] >> 16);\n    memcpy(dst, temp, sizeof(temp));\n    dst += 6;\n  }\n}\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004458"
        },
        "thunk_FUN_08001168": {
            "renaming": {
                "thunk_FUN_08001168": "thunk_do_nothing_08001168"
            },
            "code": "\nvoid thunk_do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "FUN_0800403c",
                "FUN_08004028",
                "FUN_08004490",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "thunk_do_nothing_08001168"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_pointers_08000134",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "DAT_08000144": "global_flag",
                "PTR_FUN_0800014c": "global_pointer1",
                "PTR_DAT_08000148": "global_pointer2"
            },
            "code": "uint64_t concatenate_pointers_08000134(uint64_t *pointer1, uint64_t *pointer2)\n{\n    if (DAT_08000144 != 0) {\n        pointer1 = PTR_FUN_0800014c;\n        pointer2 = PTR_DAT_08000148;\n    }\n    return ((uint64_t)pointer2 << 32) | (uint64_t)pointer1;\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "concatenate_pointers_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "convert_param_to_longlong_08003eb0",
                "param_1": "param",
                "PTR_DAT_08003ec4": "ptr_to_dat"
            },
            "code": "longlong convert_param_to_longlong_08003eb0(uint param)\n{\n  if (*PTR_DAT_08003ec4 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(param,1);\n  }\n  return (ulonglong)param << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "convert_param_to_longlong_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = FUNC_08000168(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = FUNC_08000724((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = FUNC_080004d0(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = FUNC_080004d0(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = FUNC_0800016c((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = FUNC_080004d0(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = FUNC_080004d0(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_080004d0(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c\n                             );\n        uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = FUNC_08000724((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                              (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = FUNC_0800016c(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = is_end_of_string_080009f0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    uVar10 = do_nothing_0800708c(param_1,param_2);\n    uVar10 = FUNC_08000168(0,DAT_08005f98,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = FUNC_080004d0(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080004d0(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = calculate_float_08006c0c(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = FUNC_08000724((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = FUNC_0800016c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = FUNC_0800016c((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = FUNC_08000724((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = FUNC_0800016c(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = FUNC_080004d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = FUNC_080004d0(0,uVar6,0,uVar6);\n      uVar11 = FUNC_08000168(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = FUNC_0800016c(uVar7,uVar6,0,uVar6);\n      uVar11 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                            (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = FUNC_08000168(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = FUNC_0800016c(0,uVar6,0,uVar6);\n      uVar11 = FUNC_08000168(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = FUNC_08000168((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = FUNC_08000168(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "check_and_concatenate_params_08002ee8",
                "uVar2": "params_address",
                "iVar1": "concatenated_params_result",
                "check_concatenated_params_08001050": "check_concatenated_params",
                "is_end_of_string_08001028": "is_end_of_string",
                "FUNC_08000adc": "concatenate_params",
                "FUNC_08000ad8": "concatenate_params",
                "DAT_08002f1c": "concatenation_value_1",
                "DAT_08002f20": "concatenation_value_2",
                "DAT_08002f24": "concatenation_value_3",
                "PTR_DAT_08002f18": "params_pointer"
            },
            "code": "void check_and_concatenate_params_08002ee8() {\n    int concatenated_params_result;\n    undefined4 params_address = *(undefined4 *)(PTR_DAT_08002f18 + 8);\n    concatenated_params_result = check_concatenated_params(params_address, DAT_08002f1c);\n    if ((concatenated_params_result != 0) && (is_end_of_string(params_address, DAT_08002f20) != 0)) {\n        concatenate_params(params_address, DAT_08002f20);\n        return;\n    }\n    concatenate_params(params_address, DAT_08002f24);\n    return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08001050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "check_and_concatenate_params_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "write_to_memory_with_check_08001104",
                "param_1": "target_address",
                "uVar1": "value",
                "check_param_08001214": "check_parameter",
                "get_value_from_pointer_08002214": "get_value_from_pointer",
                "write_to_memory_08001194": "write_to_memory"
            },
            "code": "int write_to_memory_with_check_08001104(uint32_t* target_address) {\n  uint32_t value = get_value_from_pointer();\n  uint32_t checked_value = value / 1000;\n  check_parameter(checked_value);\n  write_to_memory(0xffffffff, target_address, 0);\n  return 0;\n}",
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "write_to_memory_with_check_08001104"
        },
        "thunk_FUN_0800115c": {
            "renaming": {
                "thunk_FUN_0800115c": "get_value_from_pointer_thunk_0800115c",
                "undefined4": "int",
                "*": "*",
                "PTR_DAT_08001164": "PTR_DAT_08001164"
            },
            "code": "int get_value_from_pointer_thunk_0800115c() {\n    int* ptr_value = (int*) PTR_DAT_08001164;\n    return *ptr_value;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_0800115c"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\nulonglong FUNC_08006d68(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  ulonglong uVar10;\n  undefined8 uVar11;\n  ulonglong uVar12;\n  undefined8 uVar13;\n  \n  uVar10 = CONCAT44(DAT_08007088,DAT_08007060);\n  uVar12 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (param_1 != 0)))) {\n      uVar10 = FUNC_0800016c(param_1,param_2,param_1,param_2,param_4);\n    }\n    else if ((int)param_2 < 1) {\n      uVar10 = CONCAT44(DAT_08007064,DAT_08007060);\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      uVar11 = do_nothing_0800708c();\n      uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar2 = (undefined4)uVar11;\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar12 = FUNC_08000724(0,DAT_0800707c,uVar2,uVar3);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = FUNC_08000168(uVar2,uVar3,0,DAT_08007078);\n          uVar13 = FUNC_080004d0(uVar2,uVar3,0,DAT_08007078);\n          uVar13 = FUNC_0800016c((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,DAT_0800706c);\n          uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                                (int)((ulonglong)uVar13 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = FUNC_08000168(uVar2,uVar3,0,DAT_0800706c);\n        uVar13 = FUNC_0800016c(uVar2,uVar3,0,DAT_0800706c);\n        uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                              (int)((ulonglong)uVar13 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = FUNC_0800016c(uVar2,uVar3,uVar2,uVar3);\n        uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar13 = FUNC_0800016c(uVar2,uVar3,0,0x40000000);\n        uVar12 = FUNC_08000724((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar13,\n                              (int)((ulonglong)uVar13 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar11 = FUNC_0800016c(param_1,param_2,DAT_08006ff8,DAT_08006ffc,param_4);\n        iVar1 = is_end_of_string_080009f0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return uVar12;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)(uVar12 >> 0x20);\n    uVar6 = (undefined4)uVar12;\n    uVar11 = FUNC_080004d0(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = FUNC_080004d0(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = FUNC_080004d0(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = FUNC_0800016c((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar13 = FUNC_080004d0(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar13 = FUNC_08000168((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar13 = FUNC_080004d0((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar13,uVar3);\n      uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      uVar10 = FUNC_08000168(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = FUNC_0800016c((int)uVar11,uVar2,(int)uVar13,uVar3);\n      uVar11 = FUNC_080004d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_DAT_08007080 + iVar1 * 8);\n      uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                            *(undefined4 *)(PTR_DAT_08007084 + iVar1 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007084 + iVar1 * 8) + 4));\n      uVar11 = FUNC_08000168((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      uVar10 = FUNC_08000168(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      if ((int)param_2 < 0) {\n        uVar10 = uVar10 & 0xffffffff | (ulonglong)((int)(uVar10 >> 0x20) + 0x80000000) << 0x20;\n      }\n    }\n  }\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "FUN_08006070"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "add_param_to_global_sum_080072b8",
                "param_1": "param",
                "puVar1": "global_sum_ptr"
            },
            "code": "void add_param_to_global_sum_080072b8(int param){\n  undefined *global_sum_ptr;\n  global_sum_ptr = PTR_DAT_080072cc;\n  if (*(int *)PTR_DAT_080072cc == 0) {\n    *(undefined **)PTR_DAT_080072cc = PTR_DAT_080072d0;\n  }\n  *(int *)global_sum_ptr = param + *(int *)global_sum_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "FUN_0800581c"
            ],
            "imported": false,
            "current_name": "add_param_to_global_sum_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "add_param_to_global_sum_and_set_if_error_0800581c",
                "param_1": "result",
                "param_2": "param",
                "puVar1": "ptr_dat",
                "iVar2": "sum_result"
            },
            "code": "void add_param_to_global_sum_and_set_if_error_0800581c(int *result, undefined4 param){\n  undefined *ptr_dat = PTR_DAT_08005838;\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  int sum_result = add_param_to_global_sum_080072b8(param);\n  if ((sum_result == -1) && (*(int *)ptr_dat != 0)) {\n    *result = *(int *)ptr_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_080072b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "add_param_to_global_sum_and_set_if_error_0800581c"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "update_bitmask_on_condition_08004d48",
                "param_1": "data",
                "param_2": "condition",
                "local_18": "bitmask1",
                "local_14": "bitmask2",
                "DAT_08004d80": "data_constant",
                "DAT_08004d84": "bitmask_data",
                "DAT_08004d88": "data_ptr"
            },
            "code": "void update_bitmask_on_condition_08004d48(int *data, undefined4 condition) {\n  undefined4 bitmask1 = 0xc0;\n  undefined4 bitmask2 = 0x12;\n  if (*data == DAT_08004d80) {\n    update_bitmask(DAT_08004d84, &bitmask1, *data, 3, data, condition);\n    *(uint *)(PTR_DAT_08004d88 + 0x1c) = *(uint *)(PTR_DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "update_bitmask_on_condition_08004d48"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_value_from_pointer_to_pointer_080072ac",
                "undefined4": "int",
                "PTR_PTR_DAT_080072b4": "ptr_ptr_dat",
                "*(undefined4 *)PTR_PTR_DAT_080072b4": "*(int **)ptr_ptr_dat",
                "*(int **)PTR_PTR_DAT_080072b4": "*(int **)ptr_ptr_dat",
                "value": "value",
                "value_pointer": "value_pointer"
            },
            "code": "int get_value_from_pointer_to_pointer_080072ac() {\n    int *value_pointer = *(int **)PTR_PTR_DAT_080072b4;\n    int value = *value_pointer;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_080072ac"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "update_data_08002280",
                "param_1": "data_id",
                "param_2": "new_data",
                "uVar1": "new_data1",
                "uVar2": "old_data2",
                "uVar3": "old_data3",
                "DAT_080022cc": "special_data_id",
                "mask1": "MASK1",
                "mask2": "MASK2",
                "mask3": "MASK3",
                "mask4": "MASK4",
                "*(uint *)(param_1 + 0x20)": "old_data1",
                "*(uint *)(param_1 + 4)": "old_data2",
                "*param_2": "new_data0",
                "param_2[2]": "new_data1",
                "param_2[3]": "special_new_data",
                "param_2[4]": "unused_new_data",
                "param_2[5]": "new_data2",
                "param_2[6]": "new_data3",
                "*(uint *)(param_1 + 0x18)": "old_data3",
                "*(uint *)(param_1 + 0x34)": "new_data4",
                "*(uint *)(param_1 + 0x20) & 0xfffffffe": "old_data1 & MASK1",
                "*(uint *)(param_1 + 0x20) & 0xfffffffd | param_2[2]": "new_data1",
                "uVar1 & 0xfffffff7 | param_2[3]": "new_data1 & MASK4 | special_new_data",
                "uVar1 & 0xfffffff7 | param_2[3] & 0xfffffffb": "new_data1 & MASK4 | special_new_data & 0xfffffffb",
                "uVar2 & 0xfffffcff | param_2[5] | param_2[6]": "old_data2 & MASK2 | new_data2 | new_data3",
                "*(uint *)(param_1 + 0x18) & 0xffffff8c | uVar3": "old_data3 & 0xffffff8c | new_data0"
            },
            "code": "void update_data_08002280(int data_id, unsigned int *new_data) {\n  unsigned int mask1 = 0xfffffffe;\n  unsigned int mask2 = 0xfffffcff;\n  unsigned int mask3 = 0xfffffffd;\n  unsigned int mask4 = 0xfffffff7;\n  unsigned int old_data1 = *(unsigned int *)(data_id + 0x20);\n  unsigned int old_data2 = *(unsigned int *)(data_id + 0x4);\n  unsigned int old_data3 = *(unsigned int *)(data_id + 0x18);\n  unsigned int new_data1 = old_data1 & mask1 | new_data[2];\n  unsigned int new_data2 = old_data2 & mask2 | new_data[5] | new_data[6];\n  unsigned int new_data3 = old_data3 & 0xffffff8c | new_data[0];\n  unsigned int new_data4 = new_data[1];\n  if (data_id == DAT_080022cc) {\n    new_data1 = (new_data1 & mask4 | new_data[3]) & 0xfffffffb;\n    new_data2 = old_data2 & mask2 | new_data[5] | new_data[6] | new_data[4];\n  }\n  *(unsigned int *)(data_id + 0x20) = new_data1;\n  *(unsigned int *)(data_id + 0x4) = new_data2;\n  *(unsigned int *)(data_id + 0x18) = new_data3;\n  *(unsigned int *)(data_id + 0x34) = new_data4;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "write_to_memory_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "bitmask",
                "uVar1": "masked_data",
                "uVar2": "shift_count",
                "uVar3": "shift_amount",
                "uVar4": "shift_offset",
                "DAT_080011f4": "PTR_DATA_SECTION_080011f4",
                "DAT_080011f8": "PTR_DATA_SECTION_080011f8"
            },
            "code": "void write_to_memory_08001194(uint address,uint data,uint bitmask)\n{\n    uint shift_amount = (*(int *)(PTR_DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n    uint shift_count = 7 - shift_amount;\n    uint mask = (1 << (shift_count & 0xff)) - 1;\n    uint shift_offset = shift_amount + 4;\n    if (shift_count > 3) {\n        shift_count = 4;\n    }\n    if (shift_offset < 7) {\n        shift_amount = 0;\n    }\n    if (shift_offset > 6) {\n        shift_amount = shift_amount - 3;\n    }\n    uint masked_data = (data & mask) << shift_amount;\n    if (address >= 0) {\n        uint address_offset = address + 0xe000e100;\n        *(undefined *)(address_offset + 0x300) = (undefined)(masked_data << 4);\n    }\n    else {\n        uint offset = PTR_DAT_080011f8 + (address & 0xf);\n        *(undefined *)(offset) = (undefined)(masked_data << 4);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004514",
                "FUN_08004e7c",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "write_to_memory_08001194"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "decode_and_hash_data_08002cb0",
                "param_1": "data_buffer",
                "param_2": "data_size",
                "param_3": "hash_buffer",
                "param_4": "unused_param",
                "puVar1": "data_ptr",
                "uVar2": "hash_value",
                "local_c": "local_data_size",
                "PTR_s____Src_MPU9250_c_08002d80": "string1",
                "PTR_DAT_08002d84": "string2",
                "check_input_and_decode_strings_0800403c": "check_input_and_decode_strings",
                "check_and_decode_strings_0800407c": "check_and_decode_strings",
                "copy_data_to_buffer_080040e8": "copy_data_to_buffer",
                "calculate_hash_08000c44": "calculate_hash",
                "FUNC_08000cec": "function1",
                "FUNC_08000adc": "function2"
            },
            "code": "void decode_and_hash_data_08002cb0(uint data_size, uint8_t* data_buffer, uint8_t* hash_buffer){\n\tuint local_data_size = data_size;\n\tcheck_input_and_decode_strings(0xd0,0x37,0x22,1,data_buffer,data_size,hash_buffer);\n\tuint8_t* data_ptr = PTR_s____Src_MPU9250_c_08002d80;\n\tcheck_input_and_decode_strings(0xd0,0x6a,1);\n\tcheck_and_decode_strings(0x18,0,data_ptr,0xad,hash_buffer);\n\tcheck_input_and_decode_strings(0x18,0xb,1);\n\tcheck_input_and_decode_strings(0x18,10,0,1);\n\tcheck_input_and_decode_strings(0x18,10,0xf,1);\n\tcopy_data_to_buffer(0x18,0x10,&local_data_size,3,data_ptr,0xb6);\n\tuint8_t* hash_data_ptr = PTR_DAT_08002d84;\n\tuint32_t hash_value = calculate_hash((local_data_size & 0xff) - 0x80);\n\thash_value = function1(hash_value,0x3b800000);\n\thash_value = function2(hash_value,0x3f800000);\n\t*(uint32_t*)hash_data_ptr = hash_value;\n\thash_value = calculate_hash((local_data_size >> 8 & 0xff) - 0x80);\n\thash_value = function1(hash_value,0x3b800000);\n\thash_value = function2(hash_value,0x3f800000);\n\t*(uint32_t*)(hash_data_ptr + 4) = hash_value;\n\thash_value = calculate_hash((local_data_size >> 0x10 & 0xff) - 0x80);\n\thash_value = function1(hash_value,0x3b800000);\n\thash_value = function2(hash_value,0x3f800000);\n\t*(uint32_t*)(hash_data_ptr + 8) = hash_value;\n\tcheck_input_and_decode_strings(0x18,10,0,1);\n\tcheck_input_and_decode_strings(0x18,10,0x16,1);\n}",
            "called": [
                "FUN_0800403c",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_080040e8",
                "FUN_08000c44",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "decode_and_hash_data_08002cb0"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "decode_and_xor_08004348",
                "param_1": "num",
                "param_2": "encoding",
                "param_3": "length",
                "puVar1": "buffer",
                "local_10": "local_encoding",
                "local_c": "local_length",
                "uStack_8": "u_encoding"
            },
            "code": "void decode_and_xor_08004348(uint num, uint* encoding, uint length)\n{\n    uint* buffer = PTR_DAT_08004380;\n    *buffer = 0xe9;\n    buffer[1] = 3;\n    buffer[3] = 4;\n    buffer[2] = 0;\n    uint local_10 = *(uint*)buffer;\n    buffer[4] = 0;\n    buffer[5] = 0;\n    buffer[6] = 0;\n    uint local_c = length & 0xff000000 | (uint)*(ushort *)(buffer + 4);\n    uint uStack_8 = encoding;\n    decode_and_xor_08004348_08004300(num, &local_10, 7);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_08004348"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "update_config_08002324",
                "param_1": "config_address",
                "param_2": "config_data",
                "uVar1": "config_reg",
                "iVar2": "config_data_0",
                "iVar3": "config_data_2",
                "iVar4": "dat_08002364",
                "DAT_08002364": "DAT_08002364"
            },
            "code": "void update_config_08002324(int config_address, int *config_data) {\n  uint32_t bitmask = 0xffffefff;\n  uint32_t config_reg = *(uint32_t *)(config_address + 0x4);\n  int32_t config_data_0 = *config_data;\n  int32_t config_data_2 = config_data[2];\n  int32_t dat_08002364 = DAT_08002364;\n  if (config_address == DAT_08002364) {\n    dat_08002364 = config_data[5];\n    bitmask = 0xffffbfff;\n  }\n  if (config_address == DAT_08002364) {\n    config_reg |= dat_08002364 << 6;\n  }\n  *(uint32_t *)(config_address + 0x4) = config_reg;\n  *(uint32_t *)(config_address + 0x1c) = (*(uint32_t *)(config_address + 0x1c) & 0xffff8cff) | (config_data_0 << 8);\n  *(int32_t *)(config_address + 0x40) = config_data[1];\n  *(uint32_t *)(config_address + 0x20) = (*(uint32_t *)(config_address + 0x20) & 0xffffdfff) | (config_data_2 << 0xc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_config_08002324"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "extract_bits_from_uint_08001078",
                "param_1": "input",
                "uVar1": "msb",
                "uVar2": "diff",
                "uVar3": "shift_amount",
                "uVar4": "shifted_input",
                "uVar5": "output"
            },
            "code": "uint extract_bits_from_uint_08001078(uint input)\n{\n    uint output;\n    uint shift_amount;\n    uint shifted_input = input << 1;\n    uint msb = shifted_input >> 0x18;\n    uint diff = 0x9e - msb;\n\n    if (shifted_input < 0x7f000000)\n    {\n        return 0;\n    }\n\n    if (msb < 0x9f && diff != 0)\n    {\n        shift_amount = diff & 0xff;\n        output = (input << 8 | 0x80000000) >> shift_amount;\n        if ((input & 0x80000000) != 0)\n        {\n            output = -output;\n        }\n        return output;\n    }\n\n    if (diff == 0xffffff9f && (input & 0x7fffff) != 0)\n    {\n        return 0;\n    }\n\n    if ((input & 0x80000000) == 0)\n    {\n        output = 0x7fffffff;\n    }\n    else\n    {\n        output = input;\n    }\n\n    return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "extract_bits_from_uint_08001078"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "check_and_set_flag_08002564",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "uVar1": "return_value",
                "*(char *)(param_1 + 0xe)": "*(char *)(data_ptr + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(int *)((int)data_ptr + 0x39)",
                "*(uint *)(*param_1 + 0x44)": "*(uint *)(*data_ptr + 0x44)",
                "*param_2 | param_2[1] | param_2[2] | param_2[3] | param_2[4] | param_2[5] | param_2[6]": "*flag_ptr | flag_ptr[1] | flag_ptr[2] | flag_ptr[3] | flag_ptr[4] | flag_ptr[5] | flag_ptr[6]",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(data_ptr + 0xe)"
            },
            "code": "int check_and_set_flag_08002564(int *data_ptr, uint *flag_ptr) {\n  int return_value = 2;\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    *(int *)((int)data_ptr + 0x39) = 2;\n    *(uint *)(*data_ptr + 0x44) = *flag_ptr | flag_ptr[1] | flag_ptr[2] | flag_ptr[3] | flag_ptr[4] | flag_ptr[5] | flag_ptr[6];\n    *(int *)((int)data_ptr + 0x39) = 1;\n    return_value = 0;\n    *(char *)(data_ptr + 0xe) = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08002564"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "calculate_values_08001754",
                "param_1": "parameters",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "ptr1",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "uVar6": "quotient1",
                "uVar7": "shifted_bits",
                "DAT_08001820": "PTR_DAT_08001820",
                "DAT_08001824": "PTR_DAT_08001824"
            },
            "code": "uint calculate_values_08001754(uint **parameters)\\n{\\n  uint value1, value2, quotient1, quotient2;\\n  uint *ptr1, *ptr2, *ptr3, *ptr4, *ptr5;\\n  uint bitmask;\\n  undefined8 shifted_bits;\\n  \\n  if (parameters == (uint **)0x0) {\\n    return 1;\\n  }\\n  if (*(char *)((int)parameters + 0x35) == \"\\0\") {\\n    *(undefined *)(parameters + 0xd) = 0;\\n    update_bitmask_on_condition_08004d48();\\n  }\\n  *(undefined *)((int)parameters + 0x35) = 0x24;\\n  ptr1 = DAT_08001820;\\n  **parameters = **parameters & 0xfffffffe;\\n  shifted_bits = shift_bits_08002220();\\n  value2 = (uint)((ulonglong)shifted_bits >> 0x20);\\n  value1 = (uint)shifted_bits;\\n  ptr5 = parameters[1];\\n  quotient1 = value1 / DAT_08001824;\\n  if (ptr1 < ptr5) {\\n    value2 = 300;\\n  }\\n  ptr4 = *parameters;\\n  if (ptr1 < ptr5) {\\n    value2 = quotient1 * value2;\\n  }\\n  ptr4[1] = quotient1;\\n  if (ptr1 < ptr5) {\\n    quotient1 = value2 / 1000;\\n  }\\n  ptr4[8] = quotient1 + 1;\\n  if (ptr1 < ptr5) {\\n    if (parameters[2] == (uint *)0x0) {\\n      value1 = value1 / (uint)((int)ptr5 * 3) | 0x8000;\\n    }\\n    else {\\n      value1 = value1 / (uint)((int)ptr5 * 0x19) | 0xc000;\\n    }\\n    if ((value1 & 0xfff) == 0) {\\n      value1 = 1;\\n    }\\n  }\\n  else {\\n    value1 = value1 / (uint)((int)ptr5 << 1);\\n    if ((value1 & 0xfff) < 4) {\\n      value1 = 4;\\n    }\\n  }\\n  ptr1 = parameters[8];\\n  ptr5 = parameters[7];\\n  ptr4[7] = value1;\\n  bitmask = (uint)ptr5 | (uint)ptr1;\\n  *ptr4 = bitmask | 1;\\n  ptr4[2] = (uint)parameters[4] | (uint)parameters[3];\\n  ptr4[3] = (uint)parameters[5] | (uint)parameters[6];\\n  parameters[0xe] = (uint *)0x0;\\n  *(undefined *)((int)parameters + 0x35) = 0x20;\\n  *(undefined *)((int)parameters + 0x36) = 0;\\n  return 0;\\n}",
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "calculate_values_08001754"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08002bf0",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "data",
                "*(short *)(param_1 + 0x804)": "*counter",
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": "*(char*)(base_address + *index)",
                "*(ushort *)(param_1 + 0x802)": "*index"
            },
            "code": "int increment_and_store_08003ec8(int base_address, char data) {\n    short* counter = (short*)(base_address + 0x804);\n    *counter = *counter + 1;\n    unsigned short* index = (unsigned short*)(base_address + 0x802);\n    *(char*)(base_address + *index) = data;\n    *index = (*index + 1) & 0x7ff;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "increment_and_store_08003ec8"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "process_input_08002724",
                "param_1": "input_array",
                "iVar1": "array_pointer",
                "update_bitmask_08004e7c": "update_bitmask",
                "update_values_080025e8": "update_values"
            },
            "code": "int process_input_08002724(int *input_array) {\\n    int array_pointer = *input_array;\\n    if (input_array != NULL) {\\n        if (*(char *)(array_pointer + 0x39) == \"\\0\") {\\n            *(undefined *)(input_array + 0xe) = 0;\\n            update_bitmask();\\n        }\\n        *(undefined *)(array_pointer + 0x39) = 2;\\n        *(uint *)(array_pointer + 0xc) = *(uint *)(array_pointer + 0xc) & 0xffffdfff;\\n        update_values(input_array);\\n        *(uint *)(array_pointer + 0x10) = *(uint *)(array_pointer + 0x10) & 0xffffb7ff;\\n        *(uint *)(array_pointer + 0x14) = *(uint *)(array_pointer + 0x14) & 0xffffffd5;\\n        *(uint *)(array_pointer + 0xc) = *(uint *)(array_pointer + 0xc) | 0x2000;\\n        input_array[15] = 0;\\n        *(undefined *)(array_pointer + 0x39) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_080025e8",
                "FUN_08004e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_input_08002724"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_parameter_in_struct_08003fe8",
                "param_1": "new_param",
                "PTR_DAT_08003ff0": "ptr",
                "offset": "offset",
                "struct_param_ptr": "struct_param_ptr"
            },
            "code": "void set_parameter_in_struct_08003fe8(int new_param){\n    int* PTR_DAT_08003ff0 = (int*)PTR_DAT_08003ff0;\n    int offset = 0x3c;\n    int* struct_param_PTR_DAT_08003ff0 = (int*)(*PTR_DAT_08003ff0 + offset);\n    *struct_param_PTR_DAT_08003ff0 = new_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_in_struct_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "error_code",
                "param_2": "requested_size",
                "puVar1": "pointer",
                "uVar2": "add_result",
                "puVar3": "previous_block",
                "iVar4": "block_size_diff",
                "puVar5": "current_block",
                "uVar6": "block_size_diff",
                "puVar7": "previous_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *error_code, uint requested_size)\n{\n  uint aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *error_code = 0xc;\n  }\n  else {\n    do_nothing_0800583c();\n    uint *previous_block = *(uint **)PTR_DAT_080057c8;\n    uint *current_block = *(uint **)PTR_DAT_080057c8;\n    while (current_block != (uint *)0x0) {\n      uint block_size_diff = *current_block - aligned_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (previous_block == current_block) {\n            uint next_block = previous_block[1];\n            *(uint *)PTR_DAT_080057c8 = next_block;\n          }\n          else {\n            uint next_block = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = next_block;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size_diff;\n          *(uint *)((int)current_block + block_size_diff) = aligned_size;\n          previous_block = (uint *)((int)current_block + block_size_diff);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_080057cc == 0) {\n      uint add_result = add_param_to_global_sum_and_set_if_error_0800581c(error_code);\n      *(undefined4 *)PTR_DAT_080057cc = add_result;\n    }\n    uint *new_block = (uint *)add_param_to_global_sum_and_set_if_error_0800581c(error_code,aligned_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == previous_block ||\n        (int block_size_diff = add_param_to_global_sum_and_set_if_error_0800581c(error_code,(int)previous_block - (int)new_block), block_size_diff != -1)))) {\n      *previous_block = aligned_size;\nLAB_08005778:\n      do_nothing_0800583e(error_code);\n      uint block_end_address = (int)previous_block + 0xbU & 0xfffffff8;\n      int block_size_diff = block_end_address - (int)(previous_block + 1);\n      if (block_size_diff != 0) {\n        *(int *)((int)previous_block + block_size_diff) = -block_size_diff;\n        return block_end_address;\n      }\n      return block_end_address;\n    }\n    *error_code = 0xc;\n    do_nothing_0800583e(error_code);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800583e",
                "FUN_0800581c",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "FUN_080050fc",
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "run_functions_08004fb4",
                "puVar1": "function_ptrs",
                "iVar2": "num_functions",
                "iVar3": "i"
            },
            "code": "void run_functions_08004fb4(void)\n{\n  int num_functions = (int)PTR_DAT_08004ff0 - (int)PTR_DAT_08004fec;\n  undefined *function_ptrs = PTR_DAT_08004fec;\n  for (int i = 0; i < num_functions; i++) {\n    (**(code **)(function_ptrs + i * 4))();\n  }\n  do_nothing_080072d4();\n  num_functions = (int)PTR_DAT_08004ff8 - (int)PTR_DAT_08004ff4;\n  function_ptrs = PTR_DAT_08004ff4;\n  for (int i = 0; i < num_functions; i++) {\n    (**(code **)(function_ptrs + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "run_functions_08004fb4"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "decode_and_xor_080043f0",
                "param_1": "key",
                "param_2": "data",
                "param_3": "data_size",
                "local_10": "local_key",
                "uStack_c": "key2",
                "auStack_8": "input",
                "PTR_DAT_0800440c": "PTR_KEY"
            },
            "code": "void decode_and_xor_080043f0(uint32_t key, uint32_t *data, uint32_t data_size, uint32_t *output)\n{\n    uint32_t local_key = *PTR_DAT_0800440c;\n    uint32_t key2 = *(PTR_DAT_0800440c + 1);\n    uint32_t input[2] = {0};\n    input[1] = key;\n    for (uint32_t i = 0; i < data_size; i+=2)\n    {\n        input[0] = *data;\n        decode(input, &local_key, key2);\n        *output = input[0];\n        *(output + 1) = input[1];\n        data += 2;\n        output += 2;\n    }\n}\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decode_and_xor_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "convert_uint_to_ulonglong_08000428",
                "param_1": "input_uint",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "temp_uint1",
                "uVar2": "temp_uint2",
                "uVar3": "temp_uint3",
                "uVar4": "temp_uint4",
                "uVar5": "temp_uint5",
                "iVar6": "leading_zeroes",
                "uVar7": "shift_amount",
                "in_r12": "upper_bits",
                "bVar8": "is_upper_bits_zero",
                "bVar9": "is_shift_amount_negative",
                "bVar10": "is_shift_amount_zero"
            },
            "code": "unsigned long long convert_uint_to_ulonglong_08000428(uint input_uint, undefined4 param_2, undefined4 param_3, uint param_4) {\n  uint temp_uint1;\n  uint temp_uint2;\n  uint temp_uint3;\n  uint temp_uint4;\n  uint temp_uint5;\n  int leading_zeroes;\n  uint shift_amount;\n  uint upper_bits;\n  bool is_upper_bits_zero;\n  bool is_shift_amount_negative;\n  bool is_shift_amount_zero;\n  \n  temp_uint5 = input_uint << 1;\n  is_upper_bits_zero = temp_uint5 == 0;\n  temp_uint1 = (uint)((input_uint & 0x80000000) != 0) << 31;\n  temp_uint4 = (uint)((int)temp_uint5 >> 3) >> 1;\n  temp_uint3 = temp_uint1 | temp_uint4;\n  input_uint = input_uint << 29;\n  if (!is_upper_bits_zero) {\n    param_4 = temp_uint5 & 0xff000000;\n    is_upper_bits_zero = param_4 == 0;\n  }\n  if (!is_upper_bits_zero) {\n    is_upper_bits_zero = param_4 == 0xff000000;\n  }\n  if (!is_upper_bits_zero) {\n    return CONCAT44(temp_uint3,input_uint) ^ 0x3800000000000000;\n  }\n  if (temp_uint5 == 0 || param_4 == 0xff000000) {\n    return CONCAT44(temp_uint3,input_uint);\n  }\n  temp_uint2 = input_uint;\n  temp_uint5 = temp_uint4;\n  if (temp_uint4 == 0) {\n    temp_uint2 = 0;\n    temp_uint5 = input_uint;\n  }\n  leading_zeroes = count_leading_zeroes(temp_uint5);\n  if (temp_uint4 == 0) {\n    leading_zeroes += 32;\n  }\n  shift_amount = leading_zeroes - 11;\n  is_shift_amount_negative = shift_amount < 0;\n  temp_uint4 = leading_zeroes - 43;\n  is_shift_amount_zero = temp_uint4 == 0;\n  if (shift_amount < 32) {\n    is_shift_amount_negative = (int)temp_uint4 < 0;\n    leading_zeroes -= 31;\n    is_shift_amount_zero = leading_zeroes == 0;\n    shift_amount = temp_uint4;\n    if (!is_shift_amount_zero && is_shift_amount_negative == is_shift_amount_zero) {\n      temp_uint2 = temp_uint5 << (shift_amount & 0x1f);\n      temp_uint5 = temp_uint5 >> (0x1c - leading_zeroes & 0x1f);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != is_shift_amount_zero) {\n    upper_bits = 32 - shift_amount;\n  }\n  temp_uint5 = temp_uint5 << (shift_amount & 0x1f);\n  if (is_shift_amount_zero || is_shift_amount_negative != is_shift_amount_zero) {\n    temp_uint5 |= temp_uint2 >> (upper_bits & 0x1f);\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != is_shift_amount_zero) {\n    temp_uint2 = temp_uint2 << (shift_amount & 0x1f);\n  }\nLAB_080002f0:\n  if (shift_amount < 897) {\n    return CONCAT44(temp_uint5 + (896 - shift_amount) * 1048576 | temp_uint1,temp_uint2);\n  }\n  shift_amount = ~(896 - shift_amount);\n  if ((int)shift_amount < 31) {\n    leading_zeroes = shift_amount - 19;\n    if (leading_zeroes != 0 && leading_zeroes < 0 == SCARRY4(shift_amount - 31,12)) {\n      return CONCAT44(temp_uint3,temp_uint2 >> (32 - (12 - leading_zeroes) & 0x1f) | temp_uint5 << (12 - leading_zeroes & 0x1f)\n                     ) & 0x80000000ffffffff;\n    }\n    shift_amount += 1;\n    return CONCAT44(temp_uint1 | temp_uint5 >> (shift_amount & 0x1f),\n                    temp_uint2 >> (shift_amount & 0x1f) | temp_uint5 << (32 - shift_amount & 0x1f));\n  }\n  return CONCAT44(temp_uint3,temp_uint5 >> (shift_amount - 31 & 0x1f)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "convert_uint_to_ulonglong_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "set_and_write_param_bits_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "data_address",
                "uVar2": "bitwise_or_result",
                "uVar3": "bitwise_and_result"
            },
            "code": "void set_and_write_param_bits_08004ccc(uint32_t param1, uint32_t param2, uint32_t param3)\n{\n    uint32_t data_address = DAT_08004d44;\n    uint32_t uVar1 = *(uint32_t *)(data_address + 0x18) | 1;\n    *(uint32_t *)(data_address + 0x18) = uVar1;\n    uint32_t uVar2 = *(uint32_t *)(data_address + 0x18) & 1;\n    set_param_bits_08001170(3, param2, uVar1, uVar2, param1, uVar2, param3);\n    write_to_memory_08001194(0xfffffff4, 0);\n    write_to_memory_08001194(0xfffffff5, 0);\n    write_to_memory_08001194(0xfffffff6, 0);\n    write_to_memory_08001194(0xfffffffb, 0);\n    write_to_memory_08001194(0xfffffffc, 0);\n    write_to_memory_08001194(0xfffffffe, 0);\n    write_to_memory_08001194(0xffffffff, 0);\n}",
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_and_write_param_bits_08004ccc"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "result_bits",
                "uVar2": "exponent_bits_times_two",
                "uVar3": "fraction_bits",
                "in_r12": "fraction_bits_upper_threshold",
                "bVar4": "is_zero",
                "bVar5": "exponent_bits_less_than_threshold",
                "SCARRY4": "SCARRY4"
            },
            "code": "uint calculate_float_bits_08000a30(uint float_bits,uint exponent_bits)\n{\n  uint exponent_bits_times_two = exponent_bits * 2;\n  bool exponent_bits_less_than_threshold = exponent_bits_times_two < 0x70000000;\n  uint fraction_bits = exponent_bits_times_two + 0x90000000;\n  uint result_bits = fraction_bits;\n  if (!exponent_bits_less_than_threshold) {\n    uint fraction_bits_upper_threshold = exponent_bits_times_two + 0x8fe00000;\n    result_bits = fraction_bits_upper_threshold;\n  }\n  bool is_zero = result_bits == 0;\n  if (!exponent_bits_less_than_threshold && fraction_bits >= 0x200000) {\n    is_zero = fraction_bits_upper_threshold == 0x1fc00000;\n  }\n  if (((exponent_bits_less_than_threshold || fraction_bits < 0x200000) || 0x1fc00000 < fraction_bits_upper_threshold) || is_zero) {\n    if ((exponent_bits & 0x40000000) != 0) {\n      if (((int)exponent_bits_times_two >> 0x15 == -1) && ((float_bits | exponent_bits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return exponent_bits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_bits_times_two + 0x92e00000) < 0 != SCARRY4(fraction_bits,0x2e00000)) {\n      return exponent_bits & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (exponent_bits_times_two + 0x92e00000 >> 0x15);\n    uint fraction_bits_shifted = float_bits >> (shift_amount & 0xff);\n    if (float_bits << (0x20 - shift_amount & 0xff) != 0) {\n      fraction_bits_shifted = fraction_bits_shifted | 1;\n    }\n    uint fraction_bits_masked = exponent_bits & 0x1fffff | 0x100000;\n    float_bits = fraction_bits_shifted | fraction_bits_masked << (0x20 - shift_amount & 0xff);\n    fraction_bits_masked = (fraction_bits_masked >> (shift_amount & 0xff)) << 1;\n  }\n  result_bits = (exponent_bits & 0x80000000 | float_bits >> 0x1d) + fraction_bits_masked * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result_bits = result_bits & 0xfffffffe;\n  }\n  return result_bits;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08000a30"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "check_and_update_data_080023d0",
                "param_1": "data",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)data + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(data + 0xe)",
                "set_flags_08004d8c": "set_flags",
                "update_data_08002368": "update_data"
            },
            "code": "int check_and_update_data_080023d0(int *data)\n{\n    if (data != NULL) {\n        if (*(char *)((int)data + 0x39) == '\\0') {\n            *(char *)(data + 0xe) = '\\0';\n            set_flags();\n        }\n        *(char *)((int)data + 0x39) = 2;\n        update_data(*data, data + 1);\n        *(char *)((int)data + 0x39) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "check_and_update_data_080023d0"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "increment_and_store_08004c30",
                "param_1": "input_ptr",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "data_1",
                "uVar4": "uint_var",
                "iVar5": "int_var"
            },
            "code": "int * increment_and_store_08004c30(int *input_ptr)\n{\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  undefined data_1;\n  uint32_t uint_var;\n  int int_var;\n  data_ptr_1 = PTR_DAT_08004c58;\n  if (*input_ptr != DAT_08004c54) {\n    return input_ptr;\n  }\n  increment_and_store_08004c30_08003ec8(PTR_DAT_08004c5c,*PTR_DAT_08004c58);\n  data_ptr_2 = PTR_DAT_08004c60;\n  if ((PTR_DAT_08004c60[0x39] == '\\x01') || (PTR_DAT_08004c60[0x39] == '\\x12')) {\n    if (data_ptr_1 == (undefined *)0x0) {\n      return (int *)0x1;\n    }\n    if (PTR_DAT_08004c60[0x38] != '\\x01') {\n      PTR_DAT_08004c60[0x38] = 1;\n      *(undefined4 *)(data_ptr_2 + 0x3c) = 0;\n      *(undefined2 *)(data_ptr_2 + 0x2c) = 1;\n      *(undefined2 *)(data_ptr_2 + 0x2e) = 1;\n      data_ptr_2[0x38] = 0;\n      if (data_ptr_2[0x39] == '\\x12') {\n        data_1 = 0x32;\n      }\n      else {\n        data_1 = 0x22;\n      }\n      int_var = *(int *)data_ptr_2;\n      data_ptr_2[0x39] = data_1;\n      uint_var = *(uint32_t *)(int_var + 0xc);\n      *(undefined **)(data_ptr_2 + 0x28) = data_ptr_1;\n      *(uint32_t *)(int_var + 0xc) = uint_var | 0x100;\n      *(uint32_t *)(int_var + 0x14) = *(uint32_t *)(int_var + 0x14) | 1;\n      *(uint32_t *)(int_var + 0xc) = *(uint32_t *)(int_var + 0xc) | 0x20;\n      return (int *)0x0;\n    }\n  }\n  return (int *)0x2;\n}",
            "called": [
                "FUN_08003ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_0800290c"
            ],
            "imported": false,
            "current_name": "increment_and_store_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_parameter_in_global_data_structure_08003fdc",
                "param_1": "parameter",
                "PTR_DAT_08003fe4": "global_data_structure_ptr",
                "DAT_08003fe4": "global_data_structure",
                "offset": "parameter_offset",
                "parameter_ptr": "parameter_ptr"
            },
            "code": "void set_parameter_in_global_data_structure_08003fdc(int parameter) {\n    int* PTR_DAT_08003fe4 = *(int*)PTR_DAT_08003fe4;\n    int offset = 0x38;\n    int* parameter_ptr = PTR_DAT_08003fe4 + offset;\n    *parameter_ptr = parameter;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_in_global_data_structure_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_string_080009f0",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009f0(void)\n{\n  char current_char;\n  validate_and_return_values();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_bit_and_clear_flags_08004f10",
                "puVar1": "data_ptr",
                "DAT_08004f50": "data_array",
                "DAT_08004f54": "data_mask_1",
                "DAT_08004f58": "data_offset"
            },
            "code": "void set_bit_and_clear_flags_08004f10() {\n  uint *data_ptr;\n  data_ptr = DAT_08004f50;\n  *DAT_08004f50 |= 1;\n  data_ptr[1] = DAT_08004f50[1] & DAT_08004f54;\n  *data_ptr &= 0xfef6ffff;\n  *data_ptr &= 0xfffbffff;\n  data_ptr[1] &= 0xff80ffff;\n  data_ptr[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "reverse_and_copy_string_08005044",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "param_4": "output_length",
                "iVar1": "allocated_buffer",
                "iVar4": "input_offset",
                "uVar2": "min_output_length",
                "uVar3": "desired_output_length"
            },
            "code": "uint32_t reverse_and_copy_string_08005044(uint32_t *output_buffer, int *input_buffer, uint32_t input_length, uint32_t output_length)\n{\n    int input_offset = input_buffer[0] - input_buffer[4];\n    uint32_t min_output_length = input_length + 1 + input_offset;\n    uint32_t desired_output_length = (uint32_t)(input_buffer[5] * 3) / 2;\n    if (desired_output_length < min_output_length) {\n        desired_output_length = min_output_length;\n    }\n    if ((int)((uint32_t)*(uint16_t *)(input_buffer + 3) << 0x15) < 0) {\n        uint32_t allocated_buffer = allocate_memory_block(output_buffer, desired_output_length);\n        if (allocated_buffer == 0) {\n            *output_buffer = 0xc;\n            *(uint16_t *)(input_buffer + 3) = *(uint16_t *)(input_buffer + 3) | 0x40;\n            return 0xffffffff;\n        }\n        copy_data_to_buffer(allocated_buffer, input_buffer[4], input_offset);\n        *(uint16_t *)(input_buffer + 3) = *(uint16_t *)(input_buffer + 3) & 0xfb7f | 0x80;\n        input_buffer[4] = allocated_buffer;\n    }\n    else {\n        uint32_t allocated_buffer = allocate_and_copy_data(output_buffer, input_buffer[4], desired_output_length);\n        if (allocated_buffer == 0) {\n            insert_into_linked_list(output_buffer, input_buffer[4]);\n            *output_buffer = 0xc;\n            *(uint16_t *)(input_buffer + 3) = *(uint16_t *)(input_buffer + 3) | 0x40;\n            return 0xffffffff;\n        }\n        input_buffer[4] = allocated_buffer;\n    }\n    input_buffer[5] = desired_output_length;\n    input_buffer[2] = desired_output_length - input_offset;\n    uint32_t output_length_to_copy = output_length;\n    if (output_length_to_copy > input_length) {\n        output_length_to_copy = input_length;\n    }\n    reverse_copy_string(*output_buffer, input_buffer[2], output_length_to_copy);\n    input_buffer[2] = input_buffer[2] - output_length_to_copy;\n    input_buffer[0] = output_length_to_copy + input_buffer[0];\n    return 0;\n}",
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005630",
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_string_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "puVar3": "pointer3",
                "puVar4": "pointer4",
                "uVar5": "value1",
                "uVar6": "value2",
                "uVar7": "value3",
                "uVar8": "value4"
            },
            "code": "void initialize_system_08004194(void)\n{\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined *pointer3;\n  undefined *pointer4;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  perform_initial_task();\n  process_data();\n  process_imu_data_and_store_in_pointer();\n  decode_and_copy_data();\n  pointer3 = PTR_DAT_080049f0;\n  pointer2 = PTR_DAT_080049ec;\n  pointer1 = PTR_DAT_080049e8;\n  *(undefined4 *)(PTR_DAT_080049ec + 0x4c) = 1;\n  *(undefined4 *)(pointer1 + 0x4c) = 1;\n  *(undefined4 *)(pointer3 + 0x4c) = 0xffffffff;\n  value1 = DAT_080049f8;\n  pointer4 = PTR_DAT_080049f4;\n  *(undefined4 *)(PTR_DAT_080049f4 + 0x4c) = 1;\n  value2 = DAT_08004a00;\n  *(undefined4 *)(pointer2 + 0x20) = DAT_080049fc;\n  value3 = DAT_08004a08;\n  *(undefined4 *)(pointer1 + 0x20) = DAT_08004a04;\n  *(undefined4 *)(pointer3 + 0x20) = DAT_08004a0c;\n  *(undefined4 *)(pointer4 + 0x20) = 0;\n  *(undefined4 *)(pointer2 + 4) = value1;\n  value1 = DAT_08004a10;\n  *(undefined4 *)(pointer2 + 8) = DAT_08004a10;\n  *(undefined4 *)(pointer2 + 0xc) = value2;\n  *(undefined4 *)(pointer2 + 0x10) = value3;\n  value3 = DAT_08004a14;\n  *(undefined4 *)(pointer2 + 0x14) = value1;\n  *(undefined4 *)(pointer2 + 0x18) = value3;\n  value4 = DAT_08004a1c;\n  value3 = DAT_08004a18;\n  *(undefined4 *)(pointer1 + 4) = DAT_08004a18;\n  *(undefined4 *)(pointer1 + 8) = value1;\n  *(undefined4 *)(pointer1 + 0xc) = value4;\n  *(undefined4 *)(pointer1 + 0x10) = value3;\n  value3 = DAT_08004a20;\n  *(undefined4 *)(pointer1 + 0x14) = value1;\n  *(undefined4 *)(pointer1 + 0x18) = value3;\n  *(undefined4 *)(pointer3 + 4) = DAT_08004a24;\n  *(undefined4 *)(pointer3 + 8) = DAT_08004a28;\n  *(undefined4 *)(pointer3 + 0xc) = value2;\n  *(undefined4 *)(pointer3 + 0x10) = 0;\n  *(undefined4 *)(pointer3 + 0x14) = 0;\n  *(undefined4 *)(pointer3 + 0x18) = 0;\n  *(undefined4 *)(pointer4 + 4) = DAT_08004a2c;\n  *(undefined4 *)(pointer4 + 8) = 0;\n  *(undefined4 *)(pointer4 + 0xc) = 0;\n  *(undefined4 *)(pointer4 + 0x10) = 0;\n  *(undefined4 *)(pointer4 + 0x14) = 0;\n  *(undefined4 *)(pointer4 + 0x18) = 0;\n  return;\n}",
            "called": [
                "FUN_08002ea0",
                "FUN_08004028",
                "FUN_08004c70",
                "FUN_08003298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "initialize_system_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "toggle_flag_08001240",
                "param_1": "flag_value",
                "uVar1": "flag_register_value",
                "*DAT_08001254": "*flag_register"
            },
            "code": "void toggle_flag_08001240(int flag_value) {\n  uint32_t flag_register_value;\n  if (flag_value == 4) {\n    flag_register_value = *DAT_08001254 | 4;\n  }\n  else {\n    flag_register_value = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = flag_register_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "toggle_flag_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_new_index_08005840",
                "param_1": "previous_index",
                "param_2": "data",
                "iVar1": "new_index"
            },
            "code": "int calculate_new_index_08005840(int previous_index, int* data) {\n  int new_index = previous_index - 4;\n  if (previous_index < 0) {\n    new_index += data[new_index];\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "calculate_new_index_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "input_string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000150(char* input_string) {\n  char current_char;\n  char* current_position = input_string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "ptr_dat",
                "uVar2": "leading_zeroes"
            },
            "code": "void set_param_values_08003f3c(uint32_t* ptr_param_values, uint32_t param1, uint32_t param2, uint32_t param3)\n{\n  uint32_t* ptr_dat = PTR_DAT_08003f78;\n  uint32_t leading_zeroes = count_leading_zeroes(param1);\n  set_param_value_08001424(ptr_dat, 0x8000, leading_zeroes >> 5);\n  leading_zeroes = count_leading_zeroes(param2);\n  set_param_value_08001424(ptr_dat, 0x4000, leading_zeroes >> 5);\n  leading_zeroes = count_leading_zeroes(param3);\n  set_param_value_08001424(ptr_dat, 0x2000, leading_zeroes >> 5);\n  return;\n}",
            "called": [
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "FUN_08004028",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "set_param_values_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_value_from_pointer_08002214",
                "PTR_DAT_0800221c": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_08002214() {\n    int* PTR_DAT_0800221c = (int*)PTR_DAT_0800221c;\n    int value = *PTR_DAT_0800221c;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08002214"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "do_nothing_0800729c"
            },
            "code": "\nvoid do_nothing_0800729c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "FUN_080071c0"
            ],
            "imported": false,
            "current_name": "do_nothing_0800729c"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "param_1",
                "param_2": "param_2",
                "CONCAT44": "concatenate_64bits",
                "calculate_result_08000f9c": "calculate_result"
            },
            "code": "uint64_t concatenate_params_08001004(uint32_t param_1, uint32_t param_2){\n  calculate_result();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_08000f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "imported": false,
            "current_name": "concatenate_params_08001004"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "set_flags_based_on_data_08003ff4",
                "puVar1": "data_pointer",
                "PTR_DAT_0800401c": "PTR_DATA_START",
                "PTR_DAT_08004020": "DATA_OFFSET_1",
                "PTR_DAT_08004024": "DATA_OFFSET_2",
                "update_bit_and_set_flag_08002538": "set_flag_based_on_bit"
            },
            "code": "void set_flags_based_on_data_08003ff4(void)\n{\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_0800401c;\n  set_flag_based_on_bit(data_pointer + PTR_DAT_08004020, BIT_4);\n  set_flag_based_on_bit(data_pointer + PTR_DAT_08004024, BIT_8);\n  set_flag_based_on_bit(data_pointer, BIT_8);\n  set_flag_based_on_bit(data_pointer, BIT_12);\n  return;\n}",
            "called": [
                "FUN_08002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_data_08003ff4"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "run_program_080041ae",
                "convert_param_to_longlong_08003eb0": "convert_parameter_to_longlong",
                "initialize_system_08004194": "initialize_system",
                "increment_ptr_dat_value_0800114c": "increment_data_pointer",
                "FUNC_0800411c": "execute_function"
            },
            "code": "void run_program_080041ae(void)\n{\n  convert_parameter_to_longlong(0);\n  initialize_system();\n  do {\n    increment_data_pointer();\n    execute_function();\n  } while (true);\n}",
            "called": [
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_08003eb0",
                "FUN_0800114c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "run_program_080041ae"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "set_param_and_write_bits_08001128",
                "DAT_08001148": "ptr_dat_08001148",
                "set_param_bits_08001170": "set_param_bits",
                "write_to_memory_with_check_08001104": "write_to_memory_with_check",
                "set_and_write_param_bits_08004ccc": "set_and_write_param_bits"
            },
            "code": "int set_param_and_write_bits_08001128() {\n  int param_bits = 3;\n  int memory_write_result = write_to_memory_with_check(0);\n  int param_write_result = set_and_write_param_bits();\n  return param_write_result;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_08001170",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_param_and_write_bits_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "peripherals_init_08004514",
                "iVar1": "result",
                "uVar2": "value_from_pointer",
                "uVar3": "decode_and_clear_strings_param",
                "iVar4": "check_values_param_index",
                "local_44": "check_values_param_0",
                "local_40": "check_values_param_2",
                "local_3c": "check_values_param_3",
                "local_38": "check_values_param_1",
                "local_34": "check_values_param_4",
                "local_30": "constants",
                "local_20": "constants_0",
                "local_1c": "constants_1",
                "local_14": "constants_2",
                "local_10": "toggle_flag_param",
                "local_c": "write_to_memory_param_0",
                "decode_and_clear_strings_08004490": "decode_and_clear_strings",
                "PTR_s____Src_peripherals_c_08004588": "PERIPHERALS_SRC",
                "FUNC_08001b58": "peripherals_init_check",
                "check_values_0800209c": "check_values",
                "get_value_from_pointer_08002214": "get_value_from_pointer",
                "check_param_08001214": "check_param",
                "toggle_flag_08001240": "toggle_flag",
                "write_to_memory_08001194": "write_to_memory"
            },
            "code": "void peripherals_init_08004514()\n{\n    int init_result;\n    uint32_t decode_result;\n    uint32_t value_from_pointer;\n    uint32_t toggle_flag_value = 4;\n    uint32_t write_to_memory_value = 0xFFFFFFFF;\n    uint32_t write_to_memory_address = 0;\n    uint32_t write_to_memory_count = 0;\n    uint32_t constants[] = {2, 2, 0x380000};\n    uint32_t check_values_params[] = {0xF, 0x400, constants[0], constants[1], 0, 0};\n\n    init_result = peripherals_init_08004514_check(constants);\n    if (init_result == 0) {\n        return;\n    }\n\n    decode_result = decode_and_clear_strings(PTR_s____Src_peripherals_c_08004588, 0x3C);\n\n    while (1) {\n        decode_result = decode_and_clear_strings(PTR_s____Src_peripherals_c_08004588, 0x49);\n\n        if (check_values(check_values_params) == 0) {\n            break;\n        }\n    }\n\n    value_from_pointer = get_value_from_pointer();\n    check_param(value_from_pointer / 1000);\n    toggle_flag(toggle_flag_value);\n    write_to_memory(write_to_memory_value, write_to_memory_address, write_to_memory_count);\n}\n",
            "called": [
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_08001214",
                "FUN_08002214",
                "FUN_08001240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "peripherals_init_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "process_input_and_update_params_08004a84",
                "puVar1": "param_1_ptr",
                "puVar2": "param_2_ptr",
                "puVar3": "param_3_ptr",
                "puVar4": "param_4_ptr",
                "puVar5": "param_5_ptr",
                "uVar6": "new_value",
                "uVar7": "input_check_result",
                "iVar8": "input_check_result"
            },
            "code": "void process_input_and_update_params_08004a84(void)\n{\n    undefined *param_1_ptr;\n    undefined *param_2_ptr;\n    undefined *param_3_ptr;\n    undefined *param_4_ptr;\n    undefined *param_5_ptr;\n    undefined new_value;\n    int input_check_result;\n\n    new_value = calculate_new_value();\n    param_2_ptr = PTR_DAT_08004bf4;\n    param_1_ptr = PTR_DAT_08004bf0;\n    *(undefined4 *)(PTR_DAT_08004bf0 + 0x30) = new_value;\n    new_value = calculate_average();\n    *(undefined4 *)(param_2_ptr + 0x30) = new_value;\n    new_value = check_and_concatenate_params();\n    param_3_ptr = PTR_DAT_08004bf8;\n    *(undefined4 *)(PTR_DAT_08004bf8 + 0x30) = new_value;\n    update_values();\n    input_check_result = check_input_string(*(undefined4 *)(param_1_ptr + 0x30), 0);\n    if (input_check_result == 0)\n    {\n        input_check_result = is_end_of_string(*(undefined4 *)(param_1_ptr + 0x30), DAT_08004c00);\n    }\n    else\n    {\n        input_check_result = check_input_string(*(undefined4 *)(param_1_ptr + 0x30), DAT_08004bfc);\n    }\n    if (input_check_result == 0)\n    {\n        input_check_result = check_input_string(*(undefined4 *)(param_2_ptr + 0x30), 0);\n        if (input_check_result == 0)\n        {\n            input_check_result = is_end_of_string(*(undefined4 *)(param_2_ptr + 0x30), DAT_08004c00);\n        }\n        else\n        {\n            input_check_result = check_input_string(*(undefined4 *)(param_2_ptr + 0x30), DAT_08004bfc);\n        }\n        if (input_check_result == 0)\n        {\n            set_param_values(1, 1);\n            process_input(PTR_DAT_08004bf0);\n            param_4_ptr = PTR_DAT_08004c04;\n            process_input(PTR_DAT_08004bf4);\n            process_input(PTR_DAT_08004bf8);\n            param_5_ptr = PTR_DAT_08004c08;\n            if (param_4_ptr[1] != 0)\n            {\n                process_input(PTR_DAT_08004c08);\n                new_value = FUNC_08000adc(*(undefined4 *)(param_5_ptr + 0x48), DAT_08004c0c);\n                *(undefined4 *)(param_5_ptr + 0x48) = new_value;\n            }\n            *(undefined4 *)(param_5_ptr + 0x48) = *(undefined4 *)(param_4_ptr + 4);\n            if (*param_4_ptr == 0)\n            {\n                update_parameters_and_values();\n            }\n            else\n            {\n                calculate_and_update_values(*(undefined4 *)(param_5_ptr + 0x48), *(undefined4 *)(param_1_ptr + 0x48), *(undefined4 *)(param_2_ptr + 0x48), *(undefined4 *)(param_3_ptr + 0x48));\n            }\n            FUNC_08000cec(*(undefined4 *)(param_1_ptr + 4), DAT_08004c10);\n            new_value = check_uint();\n            param_4_ptr = PTR_DAT_08004c14;\n            *(undefined4 *)(param_4_ptr + 0xc) = DAT_08004c10;\n            param_4_ptr[3] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_1_ptr + 8), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x10) = DAT_08004c10;\n            param_4_ptr[4] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_2_ptr + 4), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x14) = DAT_08004c10;\n            *param_4_ptr = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_2_ptr + 8), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 4) = DAT_08004c10;\n            param_4_ptr[1] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_2_ptr + 0xc), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 8) = DAT_08004c10;\n            param_4_ptr[2] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_3_ptr + 4), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x18) = DAT_08004c10;\n            param_4_ptr[6] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_3_ptr + 8), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x1c) = DAT_08004c10;\n            param_4_ptr[7] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_3_ptr + 0xc), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x20) = DAT_08004c10;\n            param_4_ptr[8] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_5_ptr + 4), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x24) = DAT_08004c10;\n            param_4_ptr[9] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_5_ptr + 8), DAT_08004c10);\n            new_value = check_uint();\n            *(undefined4 *)(param_4_ptr + 0x28) = DAT_08004c10;\n            param_4_ptr[10] = new_value;\n            FUNC_08000cec(*(undefined4 *)(param_5_ptr + 0xc), DAT_08004c10);\n            new_value = check_uint();\n            param_4_ptr[0xb] = new_value;\n            return;\n        }\n    }\n    update_parameters_and_values();\n    set_param_values(0, 1);\n    return;\n}",
            "called": [
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0",
                "FUN_08001028",
                "FUN_0800483c",
                "FUN_08004a30",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_input_and_update_params_08004a84"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "update_parameters_and_values_080041c4",
                "param_1": "updated_param",
                "param_2": "value_to_update",
                "param_3": "global_parameter",
                "param_4": "struct_parameter",
                "extraout_r1": "updated_value",
                "set_param_in_memory_08003fc4": "set_param_in_memory",
                "update_value_in_struct_08003fd0": "update_value_in_struct",
                "set_parameter_in_global_data_structure_08003fdc": "set_parameter_in_global_data_structure",
                "set_parameter_in_struct_08003fe8": "set_parameter_in_struct"
            },
            "code": "void update_parameters_and_values_080041c4(int param_1, int param_2, int param_3, int param_4)\n{\n  int updated_param = 0;\n  int updated_value = 0;\n\n  set_param_in_memory(updated_param);\n  update_value_in_struct(updated_value);\n  set_parameter_in_global_data_structure(updated_param);\n  set_parameter_in_struct(updated_param, param_2, param_3, param_4);\n  return;\n}\n",
            "called": [
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4",
                "FUN_08003fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_parameters_and_values_080041c4"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08005424;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08005498;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar5 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08005614(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800557a:\n    *puVar3 = uVar6;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = decode_080052e4(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_data_080057d0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "index",
                "param_4": "extra_data",
                "uVar1": "allocated_memory",
                "uVar2": "new_index",
                "allocate_memory_block_08005714": "allocate_memory_block",
                "copy_data_to_buffer_08005630": "copy_data_to_buffer",
                "calculate_new_index_08005840": "calculate_new_index",
                "insert_into_linked_list_0800567c": "insert_into_linked_list"
            },
            "code": "uint allocate_and_copy_data_080057d0(uint data, uint size, uint index, uint extra_data) {\n  uint new_index;\n  uint allocated_memory;\n  if (size != 0) {\n    if (index == 0) {\n      insert_new_node();\n      allocated_memory = size;\n    }\n    else {\n      new_index = calculate_new_index();\n      allocated_memory = size;\n      if ((new_index < index) && (allocated_memory = allocate_memory_block(data, index), allocated_memory != 0)) {\n        copy_data_to_buffer(allocated_memory, size, index);\n        insert_into_linked_list(data, size);\n      }\n    }\n    return allocated_memory;\n  }\n  allocated_memory = allocate_memory_block(data, size, size, extra_data);\n  return allocated_memory;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08005630",
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "allocate_and_copy_data_080057d0"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "insert_into_linked_list_0800567c",
                "param_1": "head",
                "param_2": "data",
                "param_3": "tail",
                "param_4": "error_code",
                "puVar1": "pointer_to_data",
                "extraout_r1": "next_node",
                "ppiVar2": "next_node",
                "ppiVar3": "after_next",
                "piVar4": "node_data",
                "ppiVar5": "current_node",
                "ppiVar6": "next_node",
                "ppiVar7": "new_node"
            },
            "code": "void insert_into_linked_list_0800567c(int** head, int data, int** tail, int error_code) {\n    if (data == 0) {\n        return;\n    }\n    int** new_node = (int**)(data - 4);\n    if (*(int*)(data - 4) < 0) {\n        new_node = (int**)((int)new_node + *(int*)(data - 4));\n    }\n    do_nothing_0800583c();\n    int** current_node = *(int***)PTR_DAT_08005710;\n    if (current_node == NULL) {\n        new_node[1] = NULL;\n        *(int***)PTR_DAT_08005710 = new_node;\n        *head = new_node;\n        *tail = new_node;\n    }\n    else if (new_node < current_node) {\n        int** next_node = (int**)*new_node;\n        int** after_next = (int**)((int)new_node + (int)next_node);\n        if (current_node == after_next) {\n            int* node_data = *current_node;\n            current_node = (int**)current_node[1];\n            after_next = (int**)((int)node_data + (int)next_node);\n            *new_node = (int*)after_next;\n        }\n        new_node[1] = (int*)current_node;\n        *(int***)PTR_DAT_08005710 = new_node;\n        *head = new_node;\n    }\n    else {\n        while (current_node != NULL && current_node < new_node) {\n            int** next_node = current_node[1];\n            if (next_node == NULL) break;\n            current_node = next_node;\n        }\n        int** next_node = (int**)*current_node;\n        if ((int**)((int)current_node + (int)next_node) == new_node) {\n            next_node = (int**)((int)next_node + (int)*new_node);\n            *current_node = (int*)next_node;\n            if (next_node == (int**)((int)current_node + (int)next_node[1])) {\n                int* node_data = *next_node;\n                next_node = (int**)next_node[1];\n                next_node = (int**)((int)node_data + (int)next_node);\n                *current_node = (int*)next_node;\n                current_node[1] = (int*)next_node;\n            }\n        }\n        else if (new_node < (int**)((int)current_node + (int)next_node)) {\n            *error_code = 0xc;\n        }\n        else {\n            next_node = (int**)((int)new_node + (int)*new_node);\n            if (next_node == (int**)((int)current_node + (int)next_node[1])) {\n                int* node_data = *next_node;\n                next_node = (int**)next_node[1];\n                next_node = (int**)((int)node_data + (int)*new_node);\n                *new_node = (int*)next_node;\n            }\n            new_node[1] = (int*)next_node;\n            current_node[1] = (int*)new_node;\n            if (next_node == NULL) {\n                *tail = new_node;\n            }\n        }\n    }\n    do_nothing_0800583e(error_code, *head, *tail, DAT_08005714);\n}",
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  undefined4 uVar1;\n  undefined *puVar2;\n  int iVar3;\n  undefined4 uVar4;\n  int iVar5;\n  int local_58;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_40;\n  int local_3c;\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  undefined4 local_20;\n  int local_1c;\n  \n  set_param_and_write_bits_08001128();\n  peripherals_init_08004514();\n  uVar4 = DAT_08004800;\n  iVar3 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  iVar5 = 2;\n  *(uint *)(iVar3 + 0x18) = *(uint *)(iVar3 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar3 + 0x18) = *(uint *)(iVar3 + 0x18) | 8;\n  set_param_value_08001424(uVar4,0xe000,0,*(uint *)(iVar3 + 0x18) & 8);\n  set_param_value_08001424(DAT_08004808,0x20,0);\n  local_34 = 0xe000;\n  local_30 = 1;\n  local_28 = 2;\n  update_bitmask_08001264(DAT_08004800,&local_34);\n  local_34 = 0x20;\n  local_30 = 1;\n  local_28 = 2;\n  update_bitmask_08001264(DAT_08004808,&local_34);\n  puVar2 = PTR_DAT_0800480c;\n  *(undefined4 *)PTR_DAT_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar2 + 4) = uVar1;\n  *(undefined4 *)(puVar2 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar2 + 8) = 0;\n  *(undefined4 *)(puVar2 + 0xc) = 0;\n  *(undefined4 *)(puVar2 + 0x14) = 0;\n  *(undefined4 *)(puVar2 + 0x18) = 0;\n  *(undefined4 *)(puVar2 + 0x1c) = 0;\n  *(undefined4 *)(puVar2 + 0x20) = 0;\n  iVar3 = calculate_values_08001754();\n  if (iVar3 == 0) goto LAB_0800463a;\n  uVar4 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  iVar3 = decode_and_clear_strings_08004490(PTR_s____Src_peripherals_c_08004814,uVar4);\nLAB_0800463a:\n                                  uVar4 = DAT_0800481c;\n                                  puVar2 = PTR_DAT_08004818;\n                                  *(int *)(PTR_DAT_08004818 + 8) = iVar3;\n                                  *(int *)(puVar2 + 0xc) = iVar3;\n                                  *(int *)(puVar2 + 0x10) = iVar3;\n                                  *(int *)(puVar2 + 0x18) = iVar3;\n                                  *(int *)(puVar2 + 0x1c) = iVar3;\n                                  *(undefined4 *)puVar2 = uVar4;\n                                  *(undefined4 *)(puVar2 + 4) = 0x1c200;\n                                  *(undefined4 *)(puVar2 + 0x14) = 0xc;\n                                  iVar3 = process_input_08002724(puVar2);\n                                  uVar4 = DAT_08004824;\n                                  puVar2 = PTR_DAT_08004820;\n                                  if (iVar3 == 0) break;\n                                  uVar4 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_DAT_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar2 + 0x10) = 0;\n                                *(undefined4 *)(puVar2 + 0x14) = 0;\n                                *(undefined4 *)puVar2 = uVar4;\n                                *(int *)(puVar2 + 4) = iVar5;\n                                *(undefined4 *)(puVar2 + 0xc) = 1000;\n                                iVar3 = check_and_update_data_080023d0(puVar2);\n                                if (iVar3 == 0) break;\n                                uVar4 = 0x88;\n                              }\n                              local_58 = iVar3;\n                              local_54 = iVar3;\n                              iVar3 = set_flags_and_return_value_080025a4(puVar2,&local_58);\n                              if (iVar3 == 0) break;\n                              uVar4 = 0x8f;\n                            }\n                            local_50 = 0x60;\n                            local_4c = iVar3;\n                            local_48 = iVar3;\n                            local_40 = iVar3;\n                            local_3c = iVar3;\n                            local_38 = iVar3;\n                            iVar3 = update_data_0800245c(puVar2,&local_50,0xc);\n                            if (iVar3 == 0) break;\n                            uVar4 = 0x9a;\n                          }\n                          local_20 = 0x2000;\n                          local_34 = iVar3;\n                          local_30 = iVar3;\n                          local_2c = iVar3;\n                          local_28 = iVar3;\n                          local_24 = iVar3;\n                          local_1c = iVar3;\n                          iVar3 = check_and_set_flag_08002564(puVar2,&local_34);\n                          if (iVar3 == 0) break;\n                          uVar4 = 0xa6;\n                        }\n                        update_bitmask_08004e14(puVar2);\n                        puVar2 = PTR_DAT_08004828;\n                        *(undefined4 *)PTR_DAT_08004828 = 0x40000000;\n                        *(int *)(puVar2 + 4) = iVar5;\n                        *(undefined4 *)(puVar2 + 8) = 0;\n                        *(undefined4 *)(puVar2 + 0xc) = 1000;\n                        *(undefined4 *)(puVar2 + 0x10) = 0;\n                        iVar3 = check_and_update_data_080023d0(puVar2);\n                        if (iVar3 == 0) break;\n                        uVar4 = 0xc3;\n                      }\n                      local_50 = iVar3;\n                      local_4c = iVar3;\n                      iVar3 = set_flags_and_return_value_080025a4(puVar2,&local_50);\n                      if (iVar3 == 0) break;\n                      uVar4 = 0xca;\n                    }\n                    local_34 = 0x60;\n                    local_30 = iVar3;\n                    local_2c = iVar3;\n                    local_24 = iVar3;\n                    iVar3 = update_data_0800245c(puVar2,&local_34,4);\n                    if (iVar3 == 0) break;\n                    uVar4 = 0xd3;\n                  }\n                  update_bitmask_08004e14(puVar2);\n                  uVar4 = DAT_08004830;\n                  puVar2 = PTR_DAT_0800482c;\n                  *(undefined4 *)(PTR_DAT_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar2 = uVar4;\n                  *(int *)(puVar2 + 4) = iVar5;\n                  *(undefined4 *)(puVar2 + 8) = 0;\n                  *(undefined4 *)(puVar2 + 0x10) = 0;\n                  iVar3 = check_and_update_data_080023d0();\n                  if (iVar3 == 0) break;\n                  uVar4 = 0xf0;\n                }\n                local_50 = 0;\n                local_4c = 0;\n                iVar3 = set_flags_and_return_value_080025a4(PTR_DAT_0800482c,&local_50);\n                if (iVar3 == 0) break;\n                uVar4 = 0xf7;\n              }\n              local_34 = 0x60;\n              local_30 = iVar3;\n              local_2c = iVar3;\n              local_24 = iVar3;\n              iVar3 = update_data_0800245c(PTR_DAT_0800482c,&local_34,8);\n              if (iVar3 == 0) break;\n              uVar4 = 0x100;\n            }\n            iVar5 = update_data_0800245c(PTR_DAT_0800482c,&local_34,0xc);\n            if (iVar5 == 0) break;\n            uVar4 = 0x105;\n          }\n          update_bitmask_08004e14(PTR_DAT_0800482c);\n          puVar2 = PTR_DAT_08004834;\n          *(undefined4 *)PTR_DAT_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar2 + 4) = 2;\n          *(undefined4 *)(puVar2 + 8) = 0;\n          *(undefined4 *)(puVar2 + 0xc) = 1000;\n          *(undefined4 *)(puVar2 + 0x10) = 0;\n          iVar3 = check_and_update_data_080023d0(puVar2);\n          if (iVar3 == 0) break;\n          uVar4 = 0x122;\n        }\n        local_50 = iVar3;\n        local_4c = iVar3;\n        iVar3 = set_flags_and_return_value_080025a4(puVar2,&local_50);\n        if (iVar3 == 0) break;\n        uVar4 = 0x129;\n      }\n      local_34 = 0x60;\n      local_30 = iVar3;\n      local_2c = iVar3;\n      local_24 = iVar3;\n      iVar3 = update_data_0800245c(puVar2,&local_34,8);\n      if (iVar3 == 0) break;\n      uVar4 = 0x132;\n    }\n    iVar3 = update_data_0800245c(puVar2,&local_34,0xc);\n    if (iVar3 == 0) break;\n    uVar4 = 0x137;\n  }\n  update_bitmask_08004e14(puVar2);\n  return;\n}\n\n",
            "called": [
                "FUN_08001424",
                "FUN_080023d0",
                "FUN_080025a4",
                "FUN_08002564",
                "FUN_08004e14",
                "FUN_08002724",
                "FUN_08004490",
                "FUN_08001128",
                "FUN_08001754",
                "FUN_08004514",
                "FUN_08001264",
                "FUN_0800245c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "do_nothing_080072d4"
            },
            "code": "\nvoid do_nothing_080072d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "do_nothing_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "concatenate_params_and_swap_them_08000ffc",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "void concatenate_params_and_swap_them_08000ffc(undefined4 first_param, undefined4 second_param)\n{\n    concatenate_params_08001004(second_param, first_param);\n    return;\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "FUN_08001064",
                "FUN_08001050"
            ],
            "imported": false,
            "current_name": "concatenate_params_and_swap_them_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_value_at_pointer_080016f4",
                "param_1": "pointer_to_value",
                "param_2": "value_limit",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "code": "int check_value_at_pointer_080016f4(int *pointer_to_value, uint value_limit) {\n    int initial_value = get_initial_value();\n    while (true) {\n        int current_value = *pointer_to_value;\n        if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n            return 0;\n        }\n        if (*(int *)(current_value + 0x14) << 0x1b < 0) {\n            if ((value_limit == 0) || (current_value = get_initial_value(), value_limit < (uint)(current_value - initial_value))) {\n                pointer_to_value[14] |= 0x20;\n                *(undefined *)((int)pointer_to_value + 0x35) = 0x20;\n                *(undefined *)(pointer_to_value + 13) = 0;\n                return 3;\n            }\n        }\n        else {\n            *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n            pointer_to_value[14] = 0;\n            *(undefined *)(pointer_to_value + 13) = 0;\n            *(undefined *)((int)pointer_to_value + 0x35) = 0x20;\n            return 1;\n        }\n    }\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_value_at_pointer_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "set_flags_and_return_value_080025a4",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "uVar1": "flag3",
                "uVar2": "return_value",
                "iVar3": "ptr1",
                "uVar4": "flag2"
            },
            "code": "int set_flags_and_return_value_080025a4(int *ptr_param1, uint *ptr_param2) {\n  uint flag1;\n  int return_value;\n  uint flag2;\n  \n  return_value = 2;\n  flag1 = *(char *)(ptr_param1 + 0xe);\n  if (flag1 != 1) {\n    *(undefined *)((int)ptr_param1 + 0x39) = 2;\n    int ptr1 = *ptr_param1;\n    flag2 = *ptr_param2;\n    uint flag3 = ptr_param2[1];\n    *(uint *)(ptr1 + 4) = *(uint *)(ptr1 + 4) & 0xffffff8f;\n    *(uint *)(ptr1 + 4) = *(uint *)(ptr1 + 4) | flag2;\n    *(uint *)(ptr1 + 8) = *(uint *)(ptr1 + 8) & 0xffffff7f;\n    *(uint *)(ptr1 + 8) = *(uint *)(ptr1 + 8) | flag3;\n    *(undefined *)((int)ptr_param1 + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(ptr_param1 + 0xe) = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_value_080025a4"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "shift_bits_08002220",
                "uVar1": "leading_zeroes",
                "count_leading_zeroes": "count_leading_zeroes_in_word",
                "PTR_DAT_0800224c": "ptr_dat_index",
                "PTR_DAT_08002248": "ptr_dat_array",
                "DAT_08002244": "dat_index"
            },
            "code": "uint shift_bits_08002220(uint word) {\n    uint count = 0;\n    for (int i = 31; i >= 0; i--) {\n        if ((word >> i) & 1) {\n            return count;\n        }\n        count++;\n    }\n    return count;\n}\n\nuint shift_bits_08002220(void) {\n    uint leading_zeroes = shift_bits_08002220(0xe00000);\n    uint index = (*(uint *)PTR_DAT_0800224c) >> PTR_DAT_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes & 0xff)];\n    return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "shift_bits_08002220"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "validate_and_decode_strings_08003034",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "input_value",
                "param_4": "param_4",
                "local_c": "decoded_value",
                "PTR_s____Src_MS5611_c_08003064": "src_ms5611"
            },
            "code": "uint validate_and_decode_strings_08003034(uint8_t param_1, uint8_t param_2, uint32_t input_value, uint32_t param_4)\n{\n  uint32_t decoded_value;\n  decoded_value = param_4;\n  validate_input_and_decode_strings(0xee, 0, &decoded_value, 3, PTR_s____Src_MS5611_c_08003064, 0x8c, input_value);\n  return (uint)CONCAT12((undefined)decoded_value, CONCAT11(decoded_value._1_1_, decoded_value._2_1_));\n}",
            "called": [
                "FUN_080040b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "validate_and_decode_strings_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "update_bitmask_08004e7c",
                "*param_1": "*bitmask",
                "local_18": "bitmask_value_1",
                "local_14": "bitmask_value_2",
                "local_10": "bitmask_value_3",
                "local_c": "bitmask_value_4",
                "DAT_08004edc": "MASK_VALUE",
                "DAT_08004ee0": "bitmask",
                "update_bitmask_08001264": "update_bitmask",
                "write_to_memory_08001194": "write_to_memory",
                "set_bit_080011fc": "set_bit"
            },
            "code": "void update_bitmask_08004e7c(uint32_t *DAT_08004ee0, uint32_t value) {\n  uint32_t DAT_08004ee0_value_1 = 0x200;\n  uint32_t DAT_08004ee0_value_2 = 2;\n  uint32_t DAT_08004ee0_value_3 = 3;\n  uint32_t DAT_08004ee0_value_4 = 0x400;\n  if (*DAT_08004ee0 == DAT_08004edc) {\n    *(uint32_t *)(DAT_08004edc + 0xd818) |= 0x4000;\n    update_bitmask_08004e7c_08001264(DAT_08004ee0, &DAT_08004ee0_value_1);\n    update_bitmask_08004e7c_08001264(DAT_08004ee0, &DAT_08004ee0_value_4);\n    write_to_memory(0x25, 0, 0);\n    set_bit(0x25);\n  }\n}\n",
            "called": [
                "FUN_08001194",
                "FUN_080011fc",
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_bitmask_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "set_flag_08001530",
                "param_1": "flag_ptr",
                "param_2": "flag",
                "param_3": "flag_mask",
                "param_4": "flag_value",
                "param_5": "max_value",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "flag_data_ptr",
                "ppuVar4": "flag_data_ptr_ptr",
                "uVar5": "current_value",
                "uVar6": "current_mask"
            },
            "code": "int set_flag_08001530(uint **flag_ptr, uint flag, uint flag_mask, int flag_value, uint max_value) {\n  int value1;\n  int value2;\n  uint *flag_data_ptr;\n  uint **flag_data_ptr_ptr;\n  uint current_value;\n  uint current_mask;\n  \n  **flag_ptr |= flag_mask;\n  flag_data_ptr_ptr = flag_ptr;\n  current_value = flag;\n  current_mask = flag_mask;\n  value1 = get_value_from_pointer();\n  do {\n    flag_data_ptr = *flag_data_ptr_ptr;\n    do {\n      if ((int)(flag_data_ptr[5] << 0x1f) < 0) {\n        flag_data_ptr[4] = flag & 0xfe;\n        value1 = check_value(flag_ptr, DAT_080015e4, max_value, flag_data_ptr, flag_data_ptr_ptr, current_value, current_mask);\n        if (value1 == 0) {\n          value1 = check_flag(flag_ptr, max_value, (*flag_ptr)[5], (*flag_ptr)[6]);\n          if (value1 == 0) {\n            flag_data_ptr = *flag_ptr;\n            if (flag_value == 1) {\n              goto LAB_080015ca;\n            }\n            flag_data_ptr[4] = flag_value >> 8;\n            value1 = check_flag(flag_ptr, max_value);\n            if (value1 == 0) {\n              flag_data_ptr = *flag_ptr;\n              goto LAB_080015ca;\n            }\n          }\n          if (flag_ptr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **flag_ptr |= 0x200;\n        }\n        else if (flag_ptr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (max_value == 0xffffffff);\n    if ((max_value == 0) || (value2 = get_value_from_pointer(), max_value < (uint)(value2 - value1))) {\n      *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n      *(undefined *)(flag_ptr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "set_flag_08001530"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "store_parameter_in_pointer_08003314",
                "param_1": "param",
                "PTR_DAT_0800331c": "pointer_data"
            },
            "code": "void store_parameter_in_pointer_08003314(void* param){\n  *(void **)PTR_DAT_0800331c = param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "store_parameter_in_pointer_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "validate_input_and_return_shifted_value_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar1": "pointer_to_value",
                "iVar2": "is_valid",
                "puVar3": "pointer_to_returned_value",
                "piVar4": "pointer_to_validity",
                "uVar5": "return_value",
                "uVar6": "shifted_value",
                "local_48": "constant_one",
                "local_44": "pointer_to_constant_string",
                "local_40": "input_1_copy",
                "uStack_3c": "input_2_copy",
                "local_38": "input_1_copy2",
                "uStack_34": "input_2_copy2",
                "local_30": "left_shifted_value"
            },
            "code": "undefined8 validate_input_and_return_shifted_value_08005854(undefined4 input_1,undefined4 input_2)\n{\n  undefined *pointer_to_value;\n  int is_valid;\n  undefined8 shifted_value;\n  undefined8 return_value;\n  undefined4 local_48;\n  undefined *local_44;\n  undefined4 local_40;\n  undefined4 stack_3c;\n  undefined4 local_38;\n  undefined4 stack_34;\n  undefined8 left_shifted_value;\n  \n  return_value = get_current_time();\n  pointer_to_value = PTR_DAT_080058f8;\n  if (*PTR_DAT_080058f8 == -1) {\n    return return_value;\n  }\n  is_valid = is_valid_input(input_1,input_2,input_1,input_2);\n  if (is_valid != 0) {\n    return return_value;\n  }\n  shifted_value = do_nothing(input_1,input_2);\n  if (!is_end_of_string((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),0,DAT_080058ec)) {\n    return return_value;\n  }\n  local_48 = 1;\n  local_44 = PTR_DAT_080058f0;\n  local_40 = input_1;\n  stack_3c = input_2;\n  local_38 = input_1;\n  stack_34 = input_2;\n  left_shifted_value = shift_left_32_bits(PTR_DAT_080058f4);\n  if (*pointer_to_value != '\\x02') {\n    if (return_zero(&local_48) != 0) {\n      goto LAB_080058d0;\n    }\n  }\n  else {\n    *(undefined4 *)get_value_from_pointer_to_pointer() = 0x21;\n  }\n  if (is_valid != 0) {\n    *(int *)get_value_from_pointer_to_pointer() = is_valid;\n  }\n  return left_shifted_value;\n}\n",
            "called": [
                "FUN_08000a04",
                "FUN_0800709e",
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_shifted_value_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "check_input_string_is_not_empty_08001014",
                "in_ZR": "input_string",
                "concatenate_params_08001004": "concatenate_input_params"
            },
            "code": "bool check_input_string_is_not_empty_08001014(void)\n{\n  char input_string[MAX_INPUT_LENGTH];\n  concatenate_input_params(input_string);\n  return input_string[0] != '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_input_string_is_not_empty_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_080071c0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "shift_value",
                "iVar2": "var_3",
                "uVar3": "var_1",
                "uVar4": "var_2",
                "uVar5": "high_bits",
                "uVar6": "result",
                "FUNC_080004d0": "some_function_1",
                "DAT_08007290": "SOME_CONSTANT_1",
                "DAT_08007280": "SOME_CONSTANT_2",
                "DAT_08007284": "SOME_CONSTANT_3",
                "DAT_08007294": "SOME_CONSTANT_4",
                "SCARRY4": "SCARRY4",
                "DAT_08007298": "SOME_CONSTANT_5",
                "do_nothing_0800729c": "some_function_3",
                "DAT_08007288": "SOME_CONSTANT_7",
                "DAT_0800728c": "SOME_CONSTANT_8",
                "FUN_0800016c": "some_function_2"
            },
            "code": "unsigned long long calculate_080071c0(uint32_t first_param, uint32_t second_param, int third_param, undefined4 fourth_param) {\n    uint32_t shift_value = (second_param << 1) >> 0x15;\n    unsigned long long result = CONCAT44(second_param, first_param);\n    if (shift_value == 0) {\n        if ((second_param & 0x7fffffff | first_param) == 0) {\n            return result;\n        }\n        result = some_function_1(first_param, second_param, 0, DAT_08007290);\n        uint32_t var_1 = DAT_08007280;\n        uint32_t var_2 = DAT_08007284;\n        if (third_param < DAT_08007294) {\n            goto LABEL_1;\n        }\n        shift_value = ((uint32_t)((int64_t)(result >> 0x20) << 1) >> 0x15) - 0x36;\n    } else if (shift_value == 0x7ff) {\n        return some_function_2(first_param, second_param, first_param, second_param, fourth_param);\n    }\n    uint32_t high_bits = (uint32_t)(result >> 0x20);\n    int var_3 = shift_value + third_param;\n    if (var_3 < 0x7ff) {\n        if (0 < var_3) {\n            return result & 0xffffffff | (unsigned long long)(high_bits & 0x800fffff | var_3 * 0x100000) << 0x20;\n        }\n        if (var_3 + 0x35 < 0 == SCARRY4(var_3, 0x35)) {\n            result = result & 0xffffffff | (unsigned long long)(high_bits & 0x800fffff | (var_3 + 0x36) * 0x100000) << 0x20;\n            var_1 = 0;\n            var_2 = DAT_08007298;\n            goto LABEL_1;\n        }\n        if (third_param < SOME_CONSTANT_6) {\n            result = some_function_3(DAT_08007280, DAT_08007284, (int)result, high_bits);\n            var_1 = DAT_08007280;\n            var_2 = DAT_08007284;\n            goto LABEL_1;\n        }\n    }\n    result = some_function_3(DAT_08007288, DAT_0800728c, (int)result, high_bits);\n    var_1 = DAT_08007288;\n    var_2 = DAT_0800728c;\nLABEL_1:\n    result = some_function_1((int)result, (int)(result >> 0x20), var_1, var_2);\n    return result;\n}",
            "called": [
                "FUN_0800729c",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_char_in_string_08005614",
                "param_1": "str",
                "param_2": "ch",
                "param_3": "len",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_char_in_string_08005614(char* str, char ch, int len) {\n  char* current_char = str;\n  while (current_char != str + len) {\n    if (*current_char == ch) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = convert_float_to_uint_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08003330",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "shift_left_32_bits_080070a4",
                "DAT_080070ac": "value"
            },
            "code": "unsigned long long shift_left_32_bits_080070a4(unsigned int DAT_080070ac) {\n    return (unsigned long long)DAT_080070ac << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "FUN_08006228",
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "shift_left_32_bits_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "check_and_decode_strings_0800407c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "output_2",
                "iVar1": "result",
                "local_14": "decoded_char"
            },
            "code": "int check_and_decode_strings_0800407c(int input_1, int input_2, int output_1, int output_2)\n{\n  int result;\n  char decoded_char[8];\n  decoded_char[0] = 0;\n  result = FUNC_08001938(PTR_DAT_080040b4, input_1, input_2, 1, decoded_char, 1, 200);\n  if (result != 0) {\n    decode_and_clear_strings_08004490(output_1, output_2);\n  }\n  return decoded_char[0];\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "check_and_decode_strings_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\nundefined4\nFUNC_08001938(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined *param_5,ushort param_6,uint param_7)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  uint *puVar4;\n  uint uVar5;\n  undefined *puVar6;\n  bool bVar7;\n  \n  if (*(char *)((int)param_1 + 0x35) != ' ') {\n    return 2;\n  }\n  if (param_5 == (undefined *)0x0) {\n    return 1;\n  }\n  if (param_6 == 0) {\n    return 1;\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  while (puVar4 = *param_1, (~puVar4[6] & 2) == 0) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (10000 < (uint)(iVar3 - iVar2)) {\n      *(undefined *)(param_1 + 0xd) = 0;\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(param_1 + 0xd) == '\\x01') {\n    return 2;\n  }\n  uVar5 = *puVar4;\n  *(undefined *)(param_1 + 0xd) = 1;\n  *puVar4 = uVar5 & 0xfffff7ff;\n  *(undefined *)((int)param_1 + 0x35) = 0x22;\n  *(undefined *)((int)param_1 + 0x36) = 0x40;\n  param_1[0xe] = (uint *)0x0;\n  iVar2 = check_and_update_080015e8(param_1,param_2,param_3,param_4,param_7);\n  if (iVar2 != 0) {\n    *(undefined *)(param_1 + 0xd) = 0;\n    if (param_1[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  puVar4 = *param_1;\n  uVar5 = *puVar4;\n  if (param_6 == 1) {\n    *puVar4 = uVar5 & 0xfffffbff;\n    disableIRQinterrupts();\n    **param_1 = **param_1 | 0x200;\n    enableIRQinterrupts();\n    iVar2 = check_value_at_pointer_080016f4(param_1,param_7);\n    if (iVar2 == 0) {\n      *param_5 = (char)(*param_1)[4];\nLAB_08001ab8:\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      *(undefined *)((int)param_1 + 0x36) = 0;\n      *(undefined *)(param_1 + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (param_1[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (param_6 == 2) {\n    *puVar4 = uVar5 | 0x800;\n    disableIRQinterrupts();\n    **param_1 = **param_1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *puVar4 = uVar5 | 0x400;\n    while (3 < param_6) {\n      iVar2 = check_value_at_pointer_080016f4(param_1,param_7);\n      if (iVar2 != 0) goto LAB_08001a18;\n      *param_5 = (char)(*param_1)[4];\n      puVar4 = *param_1;\n      bVar7 = (int)(puVar4[5] << 0x1d) < 0;\n      if (bVar7) {\n        puVar4 = (uint *)puVar4[4];\n        puVar6 = param_5 + 2;\n        param_6 = param_6 - 2;\n      }\n      else {\n        puVar6 = param_5 + 1;\n        param_6 = param_6 - 1;\n      }\n      puVar1 = param_5 + 1;\n      param_5 = puVar6;\n      if (bVar7) {\n        *puVar1 = (char)puVar4;\n      }\n    }\n    if (param_6 != 2) {\n      iVar2 = get_value_from_pointer_0800115c();\n      do {\n        puVar4 = *param_1;\n        do {\n          if ((int)(puVar4[5] << 0x1d) < 0) {\n            *puVar4 = *puVar4 & 0xfffffbff;\n            disableIRQinterrupts();\n            *param_5 = (char)(*param_1)[4];\n            iVar2 = get_value_from_pointer_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (param_7 == 0xffffffff);\n      } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n      goto LAB_08001afa;\n    }\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  do {\n    do {\n      if ((int)((*param_1)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        puVar4 = *param_1;\n        *puVar4 = *puVar4 | 0x200;\n        *param_5 = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[1] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\nLAB_08001afa:\n  *(undefined *)((int)param_1 + 0x35) = 0x20;\n  *(undefined *)(param_1 + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    puVar4 = *param_1;\n    do {\n      if ((int)(puVar4[5] << 0x1d) < 0) {\n        *puVar4 = *puVar4 | 0x200;\n        param_5[1] = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[2] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "FUNC_0800411c"
            },
            "code": "\nvoid FUNC_0800411c(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  int iVar12;\n  undefined4 uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r4;\n  int iVar19;\n  int iVar20;\n  bool bVar21;\n  undefined8 uVar22;\n  \n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_08004188;\n  if (1 < (uint)(iVar12 - *(int *)PTR_DAT_08004188)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    process_sensor_data_08002f28();\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_0800418c;\n  if (2 < (uint)(iVar12 - *(int *)PTR_DAT_0800418c)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    process_input_and_update_params_08004a84();\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar5 = PTR_DAT_08004190;\n  if (3 < (uint)(iVar12 - *(int *)PTR_DAT_08004190)) {\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar5 = uVar13;\n    decode_and_xor_08004348();\n    decode_and_xor_08004384();\n    decode_and_xor_080043f0();\n    decode_and_xor_08004410();\n    decode_and_xor_08004434();\n    decode_and_xor_080043bc();\n    decode_and_xor_08004458();\n  }\n  puVar6 = PTR_DAT_08003254;\n  puVar5 = PTR_DAT_08003250;\n  if ((*PTR_DAT_08003250 != '\\0') && (*PTR_DAT_08003254 != '\\0')) {\n    iVar20 = *(int *)PTR_DAT_0800325c + (uint)*(ushort *)(PTR_DAT_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) * (longlong)iVar20) >>\n             0x17 | (int)((ulonglong)\n                          ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) *\n                          (longlong)iVar20) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) * (longlong)iVar20 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)iVar20) >> 8)\n    ;\n    iVar12 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000;\n    bVar21 = (int)uVar14 < 0;\n    if (1999 < iVar12) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar21 != SBORROW4(iVar12,2000)) {\n      iVar19 = uVar14 * uVar14 * 5;\n      uVar14 = iVar19 >> 2;\n      uVar4 = iVar19 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_DAT_08003260;\n    iVar19 = *(uint *)PTR_DAT_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)iVar20 >>\n                     0x28) + (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000)) -\n              ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar19 * 0x800;\n    uVar13 = calculate_hash_08000c44(uVar8 - uVar17 >> 0xf |\n                          (((iVar19 >> 0x15) -\n                           ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) *\n                                    (longlong)iVar20 >> 0x27) +\n                             (uint)CARRY4(uVar15,(uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000))\n                            - ((int)uVar4 >> 0x1f)) - (uint)(uVar16 < uVar4))) -\n                          (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar10 = FUNC_08000e54(uVar13,DAT_08003264);\n    *(undefined4 *)PTR_DAT_08003268 = uVar10;\n    uVar13 = calculate_hash_08000c44(iVar12);\n    uVar11 = FUNC_08000e54(uVar13,DAT_08003264);\n    uVar13 = DAT_08003270;\n    *(undefined4 *)PTR_DAT_0800326c = uVar11;\n    FUNC_08000e54(uVar10,uVar13);\n    uVar22 = convert_uint_to_ulonglong_08000428();\n    uVar22 = FUNC_08005900((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08003240,DAT_08003244);\n    uVar22 = FUNC_08000168(0,DAT_08003274,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n    FUNC_080004d0((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar13 = calculate_float_bits_08000a30();\n    puVar7 = PTR_DAT_08003278;\n    *(undefined4 *)PTR_DAT_0800327c = uVar13;\n    uVar10 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar10 = FUNC_08000adc(uVar10);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar13;\n    uVar13 = FUNC_08000adc(uVar10,uVar13);\n    uVar13 = FUNC_08000e54(uVar13,DAT_08003280);\n    *(undefined4 *)PTR_DAT_08003284 = uVar13;\n    iVar12 = extract_bits_from_uint_08001078();\n    puVar7 = PTR_DAT_0800328c;\n    *(int *)PTR_DAT_08003288 = iVar12 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    check_input_and_decode_strings_0800403c(0xee,bVar2 + 0x50,1);\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)PTR_DAT_08003290 = uVar13;\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar6 = PTR_DAT_08003294;\n  if (((10 < (uint)(iVar12 - *(int *)PTR_DAT_08003290)) && (*puVar5 == '\\0')) &&\n     (*PTR_DAT_08003254 == '\\0')) {\n    uVar13 = validate_and_decode_strings_08003034();\n    puVar7 = PTR_DAT_0800325c;\n    *puVar5 = 1;\n    *(undefined4 *)puVar7 = uVar13;\n    check_input_and_decode_strings_0800403c(0xee,(byte)*PTR_DAT_0800328c + 0x40,1,0,unaff_r4);\n    uVar13 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)puVar6 = uVar13;\n  }\n  iVar12 = thunk_get_value_from_pointer_0800115c();\n  puVar7 = PTR_DAT_08003254;\n  if (((10 < (uint)(iVar12 - *(int *)puVar6)) && (*puVar5 != '\\0')) && (*PTR_DAT_08003254 == '\\0'))\n  {\n    uVar13 = validate_and_decode_strings_08003034();\n    *(undefined4 *)PTR_DAT_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08004434",
                "FUN_08003034",
                "FUN_08000adc",
                "FUN_080043bc",
                "FUN_08001078",
                "FUN_08000c44",
                "FUN_08004384",
                "FUN_08000a30",
                "FUN_0800403c",
                "FUN_08000168",
                "FUN_08004458",
                "FUN_080043f0",
                "FUN_080004d0",
                "FUN_08005900",
                "FUN_08004a84",
                "FUN_08004410",
                "FUN_08000e54",
                "FUN_08000428",
                "FUN_08004348",
                "FUN_08002f28"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800411c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "FUNC_0800411c"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "update_data_080022d0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "DAT_08002320": "data2",
                "PTR_08002328": "ptr1",
                "PTR_0800232c": "ptr2",
                "PTR_08002330": "ptr3",
                "PTR_08002334": "ptr4"
            },
            "code": "void update_data_080022d0(int data, uint* params)\n{\n  uint bitmask1 = 0xfffffeff;\n  uint bitmask2 = 0xfffffdff;\n  uint bitmask3 = 0xfffff7ff;\n  uint bitmask4 = 0xfffffbff;\n  uint* PTR_08002328 = (uint*)(data + 0x20);\n  uint* PTR_0800232c = (uint*)(data + 0x4);\n  uint* PTR_08002330 = (uint*)(data + 0x1c);\n  uint* PTR_08002334 = (uint*)(data + 0x3c);\n  uint temp1 = *PTR_08002328 & bitmask1;\n  uint temp2 = *PTR_0800232c;\n  uint temp3 = *params;\n  uint temp4 = params[1];\n  uint temp5 = params[2] << 8;\n  if (data == DAT_08002320) {\n    temp5 |= params[3] << 8;\n    temp2 &= 0xffffcfff;\n    temp2 |= (params[5] | params[6]) << 4;\n    temp1 &= bitmask2;\n    temp1 |= temp5 & bitmask4;\n  }\n  *PTR_08002328 = temp1;\n  *PTR_0800232c = temp2;\n  *PTR_08002330 &= 0xffffff8c;\n  *PTR_08002330 |= temp3;\n  *PTR_08002334 = temp4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "check_uint_080010c4",
                "param_1": "input",
                "uVar1": "shift_amount",
                "is_negative": "is_negative",
                "is_overflow": "is_overflow",
                "shift": "shift",
                "result": "result"
            },
            "code": "uint check_uint_080010c4(uint input) {\n  uint result;\n  bool is_negative = (input & 0x80000000) != 0;\n  bool is_overflow = input << 1 < 0x7f000000;\n\n  if (is_negative || is_overflow) {\n    return 0;\n  }\n\n  uint shift = (input << 1) >> 0x18;\n  uint shift_amount = 0x9e - shift;\n\n  if ((int)shift_amount >= 0) {\n    result = (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  else if (shift_amount == 0xffffff9f && (input & 0x7fffff) != 0) {\n    return 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "check_uint_080010c4"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "validate_input_and_decode_strings_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "encoded_string",
                "param_6": "decoded_string",
                "iVar1": "result",
                "FUNC_08001938": "validate_input",
                "PTR_DAT_080040e4": "input_data"
            },
            "code": "void validate_input_and_decode_strings_080040b8(const int input1, const int input2, const int input3, const int input4, const char* encoded_string, char* decoded_string)\n{\n  int result = validate_input(PTR_DAT_080040e4, input1, input2, 1, input3, input4, 200, input4);\n  if (result != 0) {\n    decode_and_clear_strings_08004490(encoded_string, decoded_string);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "FUN_08003034"
            ],
            "imported": false,
            "current_name": "validate_input_and_decode_strings_080040b8"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "update_data_0800245c",
                "param_1": "data",
                "param_2": "update_type",
                "param_3": "update_value",
                "extraout_r1": "extraout_r1",
                "extraout_r1_00": "extraout_r1_00",
                "extraout_r1_01": "extraout_r1_01",
                "extraout_r1_02": "extraout_r1_02",
                "iVar1": "int_var_1",
                "iVar3": "int_var_3",
                "uVar2": "uint_var_2",
                "uVar3": "uint_var_3",
                "update_data_08002280": "update_data_case_0",
                "update_data_08002404": "update_data_case_4",
                "update_data_080022d0": "update_data_case_8",
                "update_config_08002324": "update_data_case_12"
            },
            "code": "void update_data_0800245c(int* data, int update_type, int update_value) {\n  if (*(char *)(data + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data + 0x39) = 2;\n  *(undefined *)(data + 0xe) = 1;\n  switch(update_type) {\n    case 0:\n      update_data_0800245c_08002280(*data);\n      int data1 = *data;\n      uint uVar2 = *(uint *)(extraout_r1 + 0x10);\n      *(uint *)(data1 + 0x18) = *(uint *)(data1 + 0x18) | 8;\n      *(uint *)(data1 + 0x18) = *(uint *)(data1 + 0x18) & 0xfffffffb;\n      uVar2 = *(uint *)(data1 + 0x18) | uVar2;\n      break;\n    default:\n      goto switchD_0800247a_caseD_1;\n    case 4:\n      update_data_0800245c_08002404(*data);\n      int data2 = *data;\n      int iVar1 = *(int *)(extraout_r1_00 + 0x10);\n      *(uint *)(data2 + 0x18) = *(uint *)(data2 + 0x18) | 0x800;\n      *(uint *)(data2 + 0x18) = *(uint *)(data2 + 0x18) & 0xfffffbff;\n      uVar2 = *(uint *)(data2 + 0x18) | iVar1 << 8;\n      break;\n    case 8:\n      update_data_0800245c_080022d0(*data);\n      int data3 = *data;\n      uint uVar3 = *(uint *)(extraout_r1_01 + 0x10);\n      *(uint *)(data3 + 0x1c) = *(uint *)(data3 + 0x1c) | 8;\n      *(uint *)(data3 + 0x1c) = *(uint *)(data3 + 0x1c) & 0xfffffffb;\n      uVar2 = *(uint *)(data3 + 0x1c) | uVar3;\n      goto LAB_080024fa;\n    case 0xc:\n      update_config_08002324(*data);\n      int data4 = *data;\n      int iVar2 = *(int *)(extraout_r1_02 + 0x10);\n      *(uint *)(data4 + 0x1c) = *(uint *)(data4 + 0x1c) | 0x800;\n      *(uint *)(data4 + 0x1c) = *(uint *)(data4 + 0x1c) & 0xfffffbff;\n      uVar2 = *(uint *)(data4 + 0x1c) | iVar2 << 8;\n      break;\n  }\n  *(uint *)(data1 + 0x18) = uVar2;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data + 0x39) = 1;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_08002324",
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_data_0800245c"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "decode_and_clear_strings_08004490",
                "param_1": "input_string",
                "param_2": "output_string",
                "uVar1": "input_value",
                "puVar2": "line_message",
                "puVar3": "error_message"
            },
            "code": "void decode_and_clear_strings_08004490(undefined4 input_string, undefined4 output_string) {\n  undefined4 input_value;\n  undefined *error_message = PTR_s_Error_with_08004510;\n  undefined *line_message = PTR_s__at_line__0800450c;\n  \n  set_param_value_08001424(DAT_08004508, 0x4000, 1);\n  set_param_value_08001424(DAT_08004508, 0x8000, 0);\n  set_param_value_08001424(DAT_08004508, 0x2000, 0);\n  input_value = DAT_08004508;\n  do {\n    xor_with_offset_0800142e(input_value, 0x4000);\n    xor_with_offset_0800142e(input_value, 0x8000);\n    xor_with_offset_0800142e(input_value, 0x2000);\n    decode_string_08004c8c(error_message);\n    decode_string_08004c8c(input_string);\n    decode_string_08004c8c(line_message);\n    decode_and_clear_string_08004cac(output_string);\n    decode_data_08004c18(10);\n    thunk_do_nothing_08001168(500);\n  } while (true);\n}",
            "called": [
                "FUN_08001424",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08004c18",
                "FUN_08004cac",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "FUN_0800403c",
                "FUN_080040b8",
                "FUN_0800458c",
                "FUN_0800407c",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "decode_and_clear_strings_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "check_and_update_080015e8",
                "param_1": "ptr_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "ptr",
                "ppuVar4": "ptr_param",
                "uVar5": "param_2",
                "uVar6": "param_3"
            },
            "code": "uint32_t check_and_update_080015e8(uint32_t **ptr_param, uint32_t param_2, uint32_t param_3, int param_4, uint32_t param_5) {\n  uint32_t *ptr = *ptr_param;\n  ptr[0] |= 0x400;\n  ptr[0] |= 0x100;\n  uint32_t value1 = get_value_from_pointer_0800115c();\n\n  while ((int)(ptr[5] << 0x1f) >= 0) {\n    if (param_5 == 0xffffffff) {\n      goto code_r0x0800165a;\n    }\n    uint32_t value2 = get_value_from_pointer_0800115c();\n    if (param_5 < (uint32_t)(value2 - value1)) {\n      goto code_r0x0800165a;\n    }\n  }\n\n  ptr[4] = param_2 & 0xfe;\n  if (check_value_08001460(ptr_param, DAT_080016f0, param_5, ptr, ptr_param, param_2, param_3) != 0) {\n    goto LAB_080016ba;\n  }\n\n  if (check_flag_080014e2(ptr_param, param_5, ptr[5], ptr[6]) == 0) {\n    if (param_4 != 1) {\n      ptr[4] = param_3 >> 8;\n      if (check_flag_080014e2(ptr_param, param_5) != 0) {\n        goto LAB_08001642;\n      }\n      ptr = *ptr_param;\n    }\n    ptr[4] = param_3 & 0xff;\n    if (check_flag_080014e2(ptr_param, param_5) == 0) {\n      (*ptr_param)[0] |= 0x100;\n      uint32_t value3 = get_value_from_pointer_0800115c();\n\n      while ((int)((*ptr_param)[5] << 0x1f) >= 0) {\n        if (param_5 == 0xffffffff) {\n          goto code_r0x0800165a;\n        }\n        uint32_t value4 = get_value_from_pointer_0800115c();\n        if (param_5 < (uint32_t)(value4 - value3)) {\n          goto code_r0x0800165a;\n        }\n      }\n\n      (*ptr_param)[4] = param_2 & 0xff | 1;\n      if (check_value_08001460(ptr_param, DAT_080016f0, param_5) == 0) {\n        return 0;\n      }\n      goto LAB_080016ba;\n    }\n  }\n\nLAB_08001642:\n  if ((*ptr_param)[0xe] == (uint32_t *)0x4) {\n    (*ptr_param)[0] |= 0x200;\n    return 1;\n  }\n  return 3;\n\ncode_r0x0800165a:\n  (*ptr_param)[0x35] = 0x20;\n  (*ptr_param)[0xd] = 0;\n  return 3;\n}\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_and_update_080015e8"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "update_bitmask_08004e14",
                "param_1": "value",
                "param_2": "bitmask_value",
                "param_3": "param_3",
                "local_18": "default_bitmask",
                "local_14": "param_5",
                "uStack_10": "param_6",
                "local_c": "param_4",
                "uVar1": "DAT_08004e6c",
                "iVar2": "current_value",
                "DAT_08004e68": "bitmask_value",
                "DAT_08004e70": "bitmask_3",
                "DAT_08004e74": "bitmask_2",
                "DAT_08004e78": "bitmask_4"
            },
            "code": "void update_bitmask_08004e14(int* value, int DAT_08004e68, int param_3)\n{\n  int current_value = *value;\n  int default_bitmask = 0x800;\n  int DAT_08004e74 = 2;\n  int DAT_08004e70 = 3;\n  int DAT_08004e78 = 0x300;\n  int new_bitmask = 0;\n  if (current_value == DAT_08004e68) {\n    new_bitmask = default_bitmask;\n  }\n  else if (current_value == 0x40000000) {\n    new_bitmask = DAT_08004e74;\n  }\n  else {\n    if (current_value == DAT_08004e70) {\n      new_bitmask = DAT_08004e70;\n    }\n    else {\n      if (current_value != DAT_08004e78) {\n        return;\n      }\n      new_bitmask = DAT_08004e78;\n    }\n  }\n  int param_4 = 2;\n  int param_5 = 2;\n  int param_6 = param_3;\n  update_bitmask_08004e14_08001264(DAT_08004e74, &new_bitmask);\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_bitmask_08004e14"
        }
    },
    "used_tokens": 147656,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08001264",
            "FUN_080070b0",
            "FUN_08001424",
            "FUN_080006ac",
            "FUN_08004c64",
            "FUN_08007092",
            "FUN_08005630",
            "FUN_08002368",
            "FUN_08002520",
            "FUN_08002008",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08000904",
            "FUN_0800114c",
            "FUN_080052e4",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003068",
            "FUN_08005646",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800115c",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_08001170",
            "FUN_08002ed4",
            "FUN_08000f9c",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_08000404",
            "FUN_08006070",
            "thunk_FUN_08006070",
            "FUN_08003fd0",
            "FUN_08000892",
            "FUN_08000134",
            "FUN_08003eb0",
            "thunk_FUN_0800115c",
            "FUN_080072b8",
            "FUN_080072ac",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08002324",
            "FUN_08001078",
            "FUN_08002564",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08004fb4",
            "FUN_08000428",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_08004f10",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08002214",
            "FUN_0800567c",
            "FUN_080025a4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_080022d0",
            "FUN_080010c4"
        ],
        [
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_080014e2",
            "FUN_08000990",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08004c18",
            "FUN_08001460",
            "FUN_08001104",
            "FUN_0800581c",
            "FUN_08004d48",
            "FUN_08004ccc",
            "FUN_080023d0",
            "FUN_08004c30",
            "FUN_08003f3c",
            "FUN_08001004",
            "FUN_080041c4",
            "FUN_080016f4",
            "FUN_08004e7c",
            "FUN_0800245c",
            "FUN_08004e14"
        ],
        [
            "FUN_08001028",
            "FUN_0800290c",
            "FUN_080009a0",
            "FUN_08000980",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_0800209c",
            "FUN_08004c8c",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_08005714",
            "FUN_08003ff4",
            "FUN_08001128",
            "FUN_08000ffc",
            "FUN_08001530",
            "FUN_08001014",
            "FUN_080015e8"
        ],
        [
            "FUN_08001828",
            "FUN_08004300",
            "FUN_08004028",
            "FUN_08005bc8",
            "FUN_0800299a",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_080009f0",
            "FUN_080057d0"
        ],
        [
            "FUN_08004410",
            "FUN_08004384",
            "FUN_08004434",
            "FUN_080043bc",
            "FUN_0800483c",
            "FUN_08004458",
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_080043f0",
            "FUN_08005044",
            "FUN_08005854"
        ],
        [
            "FUN_080050fc",
            "FUN_08004a84"
        ],
        [
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_08004514",
            "FUN_0800407c",
            "FUN_080040b8"
        ],
        [
            "FUN_080040e8",
            "FUN_08002ad0",
            "FUN_08003034"
        ],
        [
            "FUN_08003298",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ],
        [
            "FUN_08004f68"
        ]
    ],
    "locked_functions": []
}