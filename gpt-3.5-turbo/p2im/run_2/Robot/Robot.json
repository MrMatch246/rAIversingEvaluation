{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = extract_bits_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_and_update_080036a8",
                "param_1": "bits",
                "param_2": "bit_index",
                "DAT_080036f4": "ptr_end_of_bits",
                "*param_1": "*bits"
            },
            "code": "void set_bit_and_update_080036a8(uint **bits, uint bit_index)\n{\n    set_bit(*bits, bit_index);\n    if (*bits == DAT_080036f4)\n    {\n        (*bits)[17] |= 0x8000;\n    }\n    **bits |= 1;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      allocate_memory_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    do_nothing_with_pointer_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    do_nothing_with_pointer_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  do_nothing_with_pointer_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_and_run_system_08005224",
                "set_memory_value_and_update_bits_080014f0": "initialize_memory",
                "process_data_and_set_flag_if_four_080052a0": "process_data_and_set_flag_if_four",
                "set_flags_and_decode_080055f4": "set_flags_and_decode_data",
                "initialize_data_08005348": "initialize_data",
                "initialize_data_08005598": "initialize_additional_data",
                "set_permissions_and_flags_08005500": "set_permissions_and_flags",
                "initialize_and_decode_data_080053b0": "initialize_and_decode_additional_data",
                "PTR_DAT_0800527c": "system_functions.process_input_wrapper",
                "PTR_DAT_08005284": "system_functions.process_data",
                "PTR_DAT_0800528c": "system_functions.get_pointer_value",
                "set_bit_and_update_080036a8": "set_bit_and_update",
                "PTR_DAT_08005294": "PTR_system_flags",
                "initialize_params_and_calculate_hashes_0800491c": "initialize_params_and_calculate_hashes",
                "set_flags_0800360c": "set_flags",
                "check_trigger_system_interrupt_08004e74": "check_trigger_system_interrupt"
            },
            "code": "void initialize_and_run_system_08005224(void)\n{\n  initialize_memory();\n  process_data_and_set_flag_if_four();\n  set_flags_0800360c_and_decode_data();\n  initialize_data();\n  initialize_additional_data();\n  set_permissions_and_flags();\n  initialize_and_decode_additional_data();\n  PTR_DAT_0800527c = PTR_process_input_wrapper_08004ea4_1_08005280;\n  PTR_DAT_08005284 = PTR_process_data_08004ee8_1_08005288;\n  PTR_DAT_0800528c = PTR_get_pointer_value_08004f2c_1_08005290;\n  set_bit_and_update(PTR_DAT_08005294,0);\n  set_bit_and_update(PTR_DAT_08005294,0xc);\n  initialize_params_and_calculate_hashes(PTR_system_params);\n  set_flags_0800360c(PTR_DAT_08005294);\n  check_trigger_system_interrupt(0);\n  while(true);\n}",
            "called": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080055f4",
                "FUN_080036a8",
                "FUN_08004e74",
                "FUN_0800491c",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "initialize_and_run_system_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_value_08003440",
                "local_30": "factors",
                "local_2c": "coefficients",
                "uStack_28": "unused_1",
                "uStack_24": "unused_2",
                "uStack_20": "unused_3",
                "local_1c": "index",
                "local_18": "unused_4",
                "local_14": "flags",
                "local_10": "value",
                "local_c": "unused_5",
                "PTR_DAT_080034f0": "ptr_data_1",
                "PTR_DAT_080034f4": "ptr_data_2",
                "DAT_080034f8": "data_1",
                "DAT_080034fc": "coefficient",
                "DAT_08003500": "divisor"
            },
            "code": "uint calculate_value_08003440(void)\n{\n    uint value = 0;\n    uint flags = *(uint *)(DAT_080034f8 + 4);\n    uint DAT_080034fc = DAT_080034fc;\n    uint factor = 0;\n    if ((flags & 0xc) == 8)\n    {\n        uint index = flags >> 0x12 & 0xf;\n        uint16_t *DAT_080034fcs = (uint16_t *)&local_2c;\n        uint16_t *factors = (uint16_t *)&local_30;\n        factor = (uint)factors[index];\n        if ((flags & 0x10000) == 0)\n        {\n            DAT_080034fc *= factor;\n        }\n        else\n        {\n            uint DAT_08003500 = (uint)factors[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n            DAT_080034fc = (DAT_080034fc * factor) / DAT_08003500;\n        }\n    }\n    else if ((flags & 0xc) == 4)\n    {\n        factor = DAT_080034fc;\n    }\n    else\n    {\n        factor = DAT_080034fc;\n    }\n    value = factor;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_value_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_pointer_value_08004f2c",
                "uVar1": "pointer_value",
                "get_pointer_value_080015a0": "get_pointer_value_from_address"
            },
            "code": "int get_pointer_value_08004f2c(void)\n{\n  int pointer_value = 0;\n  pointer_value = get_pointer_value_08004f2c_080015a0();\n  return pointer_value;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_pointer_value_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "PTR_DAT_080053a0": "data_pointer",
                "DAT_080053a4": "DATA_VALUE_1",
                "DAT_080053a8": "DATA_VALUE_2",
                "calculate_value_08001ab0": "calculate_value",
                "infinite_loop_08005674": "infinite_loop",
                "PTR_s____src_main_c_080053ac": "source_pointer"
            },
            "code": "void initialize_data_08005348(void)\n{\n    int calculate_value_result;\n    PTR_DAT_080053a0->value1 = DAT_080053a4;\n    PTR_DAT_080053a0->value2 = DAT_080053a8;\n    PTR_DAT_080053a0->value3 = 0;\n    PTR_DAT_080053a0->value4 = 0;\n    PTR_DAT_080053a0->value5 = 0x4000;\n    PTR_DAT_080053a0->value6 = 0;\n    PTR_DAT_080053a0->value7 = 0;\n    PTR_DAT_080053a0->value8 = 0;\n    PTR_DAT_080053a0->value9 = 0;\n    calculate_value_result = calculate_value(PTR_DAT_080053a0);\n    if (calculate_value_result != 0)\n    {\n        infinite_loop_08005674(PTR_s____src_main_c_080053ac, 0x17a);\n    }\n    return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "input_array",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "temp1",
                "iVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "result"
            },
            "code": "void calculate_values_080046ec(int *input_array)\n{\n  longlong value1;\n  longlong value2;\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined8 result;\n  \n  *(uint *)(*input_array + 0x10) = input_array[3] | *(uint *)(*input_array + 0x10) & 0xffffcfff;\n  *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xffffe9f3 | input_array[5] | input_array[2] | input_array[4];\n  *(uint *)(*input_array + 0x14) = input_array[6] | *(uint *)(*input_array + 0x14) & 0xfffffcff;\n  if (*input_array == PTR_DAT_08004914) {\n    result = get_value_and_shift_1();\n    value1 = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(input_array[1] << 2));\n    temp1 = get_value_and_shift_1((int)result,(int)((ulonglong)result >> 0x20),(int)value1);\n    temp2 = input_array[1];\n    result = get_value_and_shift_1();\n    value2 = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(temp1 * 0x19) / (uint)(temp2 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    temp1 = get_value_and_shift_1((int)result,(int)((ulonglong)result >> 0x20),(int)value2);\n    temp3 = input_array[1];\n    temp2 = get_value_and_shift_1();\n    *(uint *)(*input_array + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(temp1 * 0x19) / (uint)(temp3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + (uint)((ulonglong)value1 >> 0x25) * 0x10 + ((uint)((ulonglong)value2 >> 0x25) & 0xf0);\n  }\n  else {\n    result = get_value_and_shift_2();\n    value1 = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(input_array[1] << 2));\n    temp1 = get_value_and_shift_2((int)result,(int)((ulonglong)result >> 0x20),(int)value1);\n    temp2 = input_array[1];\n    result = get_value_and_shift_2();\n    value2 = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(temp1 * 0x19) / (uint)(temp2 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    temp1 = get_value_and_shift_2((int)result,(int)((ulonglong)result >> 0x20),(int)value2);\n    temp3 = input_array[1];\n    temp2 = get_value_and_shift_2();\n    *(uint *)(*input_array + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(temp1 * 0x19) / (uint)(temp3 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + (uint)((ulonglong)value1 >> 0x25) * 0x10 + ((uint)((ulonglong)value2 >> 0x25) & 0xf0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "set_permissions_and_flags_08005500",
                "PTR_DAT_08005590": "data_pointer",
                "PTR_s____src_main_c_08005594": "source_pointer"
            },
            "code": "void set_permissions_and_flags_08005500(){\n  int check_result;\n  int permissions[4] = {0x1000,0,0,0};\n  check_result = check_values(PTR_DAT_08005590);\n  if (check_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1d0);\n  }\n  check_result = set_permissions_and_flags_08005500_08003a94(PTR_DAT_08005590,permissions);\n  if (check_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1d5);\n  }\n  int param = 0x20;\n  int flag = 0;\n  check_result = set_param_and_flag_080042de(PTR_DAT_08005590,&param);\n  if (check_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594,0x1dc);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080042de",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_permissions_and_flags_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_and_update_flag_08002c2e",
                "param_1": "flag_data",
                "param_2": "max_size",
                "param_3": "offset",
                "iVar1": "flag_check_result"
            },
            "code": "int check_and_update_flag_08002c2e(int *flag_data, uint max_size, int offset)\n{\n  int flag_check_result;\n  while (true) {\n    if ((*(uint *)(*flag_data + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_check_result = check_flag(flag_data);\n    if (flag_check_result != 0) {\n      break;\n    }\n    if ((max_size != 0xffffffff) && ((max_size == 0 || (flag_check_result = get_pointer_value(), max_size < (uint)(flag_check_result - offset))))) {\n      flag_data[0x10] = flag_data[0x10] | 0x20;\n      flag_data[0xc] = 0;\n      *(undefined *)((int)flag_data + 0x3d) = 0x20;\n      *(undefined *)(flag_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "count_down_08003568",
                "param_1": "num",
                "local_c": "countdown_value",
                "DAT_080035a0": "global_constant",
                "PTR_DAT_0800359c": "global_pointer"
            },
            "code": "void count_down_08003568(int num)\n{\n  int countdown_value = num * (uint)((ulonglong)DAT_080035a0 * (ulonglong)*PTR_DAT_0800359c >> 0x29);\n  do {\n    countdown_value = countdown_value + -1;\n  } while (countdown_value != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "count_down_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_hashes_and_store_080049cc",
                "param_1": "input",
                "local_20": "num_iterations",
                "local_c": "hash3",
                "local_10": "hash4",
                "local_14": "hash1",
                "local_18": "hash2",
                "local_1c": "zero",
                "local_24": "code_pointer",
                "local_28": "float_bits1",
                "local_2c": "float_bits2"
            },
            "code": "void calculate_hashes_and_store_080049cc(int input)\n{\n    int num_iterations = 1;\n    int zero = 0;\n    int hash1 = 0;\n    int hash2 = 0;\n    int hash3 = 0;\n    int hash4 = 0;\n    int float_bits1 = 0;\n    int float_bits2 = 0;\n    int hash_result = 0;\n    while(num_iterations <= zero)\n    {\n        float_bits1 = 0;\n        float_bits2 = 0;\n        calculate_hashes_and_store_080049cc_08004ae0(input);\n        calculate_float_bits_from_params_08004d78(input, &float_bits1, &float_bits2);\n        hash1 = calculate_hash_08000c10(num_iterations);\n        hash2 = calculate_hash_08000c10(num_iterations);\n        hash3 = calculate_hash_08000c10(num_iterations);\n        hash4 = calculate_hash_08000c10(num_iterations);\n        hash1 = hash_function_08000aa8(hash1,float_bits1);\n        hash2 = hash_function_08000aa8(hash2,float_bits2);\n        hash3 = hash_function_08000aa8(hash3,*(int *)(input + 0x10));\n        hash4 = hash_function_08000aa8(hash4,*(int *)(input + 0x14));\n        hash_result = calculate_hash_08000c10(num_iterations);\n        *(int *)(input + 0x1c) = hash_function_08000e20(hash3,hash_result);\n        *(int *)(input + 0x20) = hash_function_08000e20(hash4,hash_result);\n        *(int *)(input + 0x24) = hash_function_08000e20(hash1,hash_result);\n        *(int *)(input + 0x28) = hash_function_08000e20(hash2,hash_result);\n        num_iterations++;\n    }\n    return;\n}",
            "called": [
                "FUN_08000e20",
                "FUN_08004d78",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_hashes_and_store_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "set_values_08003c94",
                "param_1": "address",
                "param_2": "values",
                "local_c": "current_value",
                "DAT_08003d54": "original_address_1",
                "DAT_08003d58": "original_address_2",
                "DAT_08003d5c": "original_address_3"
            },
            "code": "void set_values_08003c94(uint *address, uint *values)\n{\n  uint current_value;\n  current_value = *address;\n  if ((((address == DAT_08003d54) || (address == (uint *)0x40000000)) || (address == DAT_08003d58)) || (address == DAT_08003d5c)) {\n    current_value = values[1] | current_value & 0xffffff8f;\n  }\n  if (((address == DAT_08003d54) || (address == (uint *)0x40000000)) || ((address == DAT_08003d58 || (address == DAT_08003d5c)))) {\n    current_value = values[3] | current_value & 0xfffffcff;\n  }\n  *address = values[5] | current_value & 0xffffff7f;\n  address[0xb] = values[2];\n  address[10] = *values;\n  if (address == DAT_08003d54) {\n    address[0xc] = values[4];\n  }\n  address[5] = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "set_values_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "validate_inputs_and_return_08000978",
                "param_1": "data_buffer",
                "param_2": "data_size",
                "param_3": "key_buffer",
                "param_4": "key_size",
                "validate_inputs_08000988": "validate_inputs",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void validate_inputs_and_return_08000978(void* data_buffer, uint32_t data_size, void* key_buffer, uint32_t key_size)\n{\n  validate_inputs(data_buffer, data_size, key_buffer, key_size);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "validate_inputs_and_return_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "base_address",
                "param_2": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "current_address",
                "iVar4": "padding",
                "uVar5": "flags",
                "PTR_DAT_080088e0": "ptr1",
                "do_nothing_with_pointer_080090a8": "do_nothing1",
                "PTR_DAT_080088e4": "ptr2",
                "add_value_to_pointer_08009744": "add_value_to_pointer",
                "do_nothing_with_pointer_080090b4": "do_nothing2",
                "PTR_DAT_080088e8": "old_address_2"
            },
            "code": "int allocate_memory_0800884c(void* base_address, int size){\n  void* PTR_DAT_080088e0 = PTR_DAT_080088e0;\n  do_nothing_with_pointer_080090a8();\n  uint32_t flags = *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) & 0xfffffffc;\n  int padding = ((0xfef - size) + flags & 0xfffff000) - 0x1000;\n  if (0xfff >= padding) {\n    int current_address = add_value_to_pointer_08009744(base_address,0);\n    if (current_address == *(int *)(PTR_DAT_080088e0 + 8) + flags) {\n      int new_address = add_value_to_pointer_08009744(base_address,-padding);\n      void* PTR_DAT_080088e4 = PTR_DAT_080088e4;\n      if (new_address != -1) {\n        int old_address = *(int *)PTR_DAT_080088e4;\n        *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) = flags - padding | 1;\n        *(int *)PTR_DAT_080088e4 = old_address - padding;\n        do_nothing_with_pointer_080090b4(base_address);\n        return 1;\n      }\n      int current_address_2 = add_value_to_pointer_08009744(base_address,0);\n      void* ptr3 = PTR_DAT_080088e4;\n      uint32_t diff = current_address_2 - *(int *)(PTR_DAT_080088e0 + 8);\n      if (0xf < (int)diff) {\n        int PTR_DAT_080088e8 = *(int *)PTR_DAT_080088e8;\n        *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) = diff | 1;\n        *(int *)ptr3 = current_address_2 - PTR_DAT_080088e8;\n      }\n    }\n  }\n  do_nothing_with_pointer_080090b4(base_address);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_byte_0800901c",
                "param_1": "buffer",
                "param_2": "length",
                "param_3": "byte_to_find",
                "puVar1": "current_buffer_position",
                "uVar2": "byte_pair",
                "uVar3": "xor_result",
                "puVar4": "next_buffer_position",
                "uVar5": "current_byte",
                "bVar6": "byte_found"
            },
            "code": "uint* find_byte_0800901c(uint* buffer, uint length, uint* byte_to_find) {\n    uint* current_buffer_position;\n    uint current_byte;\n    uint* buffer_end;\n    uint byte_pair;\n    bool byte_found;\n\n    current_byte = length & 0xff;\n    current_buffer_position = buffer;\n    if (((uint)buffer & 3) == 0) {\n        goto LAB_0800904a;\n    }\n    else {\n        buffer_end = (uint*)((int)byte_to_find - 1);\n        if (byte_to_find == (uint*)0x0) {\n            current_buffer_position = (uint*)0x0;\n        }\n        else if (*(byte*)current_buffer_position != current_byte) {\n            uint* next_buffer_position = (uint*)((int)current_buffer_position + 1);\n            do {\n                current_buffer_position = next_buffer_position;\n                next_buffer_position = current_buffer_position;\n                byte_to_find = buffer_end;\n                if (((uint)current_buffer_position & 3) == 0) {\n                    goto LAB_0800904a;\n                }\n                byte_found = byte_to_find == (uint*)0x0;\n                buffer_end = (uint*)((int)buffer_end - 1);\n                if (byte_found) {\n                    current_buffer_position = (uint*)0x0;\n                    break;\n                }\n                next_buffer_position = (uint*)((int)current_buffer_position + 1);\n            } while (*(byte*)current_buffer_position != current_byte);\n        }\n    }\n    return current_buffer_position;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_byte_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_four_0800177c",
                "param_1": "input_num",
                "*DAT_080017b0": "*flag_ptr"
            },
            "code": "void set_flag_if_four_0800177c(int input_num)\n{\n  if (input_num == 4) {\n    *DAT_080017b0 = *DAT_080017b0 | 4;\n  }\n  else {\n    *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "hash_and_store_pitch_080017b4",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void hash_and_store_pitch_080017b4()\n{\n    int pitch = 0;\n    hash_and_store_pitch_080017b4_08004f78(pitch);\n    return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "hash_and_store_pitch_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "validity_check_result",
                "PTR_DAT_080055e8": "data_ptr",
                "DAT_080055ec": "data_value",
                "PTR_s____src_main_c_080055f0": "error_report_location",
                "check_parameter_validity_0800438a": "check_data_validity",
                "infinite_loop_08005674": "report_error"
            },
            "code": "void initialize_data_08005598()\n{\n  int validity_check_result;\n  int initial_value = 0;\n  int data_size = 12;\n  int* PTR_DAT_080055e8 = (int*)PTR_DAT_080055e8;\n  *PTR_DAT_080055e8 = DAT_080055ec;\n  *(PTR_DAT_080055e8 + 1) = 0x1c200;\n  *(PTR_DAT_080055e8 + 2) = initial_value;\n  *(PTR_DAT_080055e8 + 3) = initial_value;\n  *(PTR_DAT_080055e8 + 4) = initial_value;\n  *(PTR_DAT_080055e8 + 5) = data_size;\n  *(PTR_DAT_080055e8 + 6) = initial_value;\n  *(PTR_DAT_080055e8 + 7) = initial_value;\n  validity_check_result = check_data_validity(PTR_DAT_080055e8);\n  if (validity_check_result != 0)\n  {\n    infinite_loop_08005674(PTR_s____src_main_c_080055f0, 0x1ed);\n  }\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "isEndOfString_08001030",
                "in_CY": "currentChar",
                "concatenate_integers_08000fc8": "concatenateIntegers"
            },
            "code": "bool isEndOfString_08001030(void)\n{\n  char currentChar;\n  concatenateIntegers();\n  return currentChar == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "isEndOfString_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "get_concatenated_values_080011ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "code": "uint64_t get_concatenated_values_080011ec(int value1, int value2, int value3, int value4)\n{\n    if ((value4 == 0) && (value3 == 0)) {\n        if (value2 != 0 || value1 != 0) {\n            value2 = -1;\n            value1 = -1;\n        }\n        return CONCAT44(value2, value1);\n    }\n    uint64_t result = function_0800121c();\n    return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "validate_and_process_input_08004f3c",
                "param_1": "param_1",
                "param_2": "param_2",
                "PTR_DAT_08004f5c": "data_ptr"
            },
            "code": "void validate_and_process_input_08004f3c(void* PTR_DAT_08004f5c, uint32_t param_1, uint16_t param_2){\n  validate_input_and_process_08004436(PTR_DAT_08004f5c, param_1, param_2, 0x32);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        do_nothing_with_pointer_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            reverse_copy_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          do_nothing_with_pointer_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          reverse_copy_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        reverse_copy_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009a18",
                "FUN_080090a8",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "check_and_update_pointer_08002640",
                "param_1": "pointer",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "max_offset",
                "param_5": "base_address",
                "param_6": "N/A",
                "iVar1": "result",
                "uVar2": "N/A",
                "**param_1": "*pointer",
                "(*param_1)[5]": "ptr[5]",
                "get_pointer_value_080015a0()": "get_pointer_value()",
                "param_1[0xc]": "pointer[0xc]",
                "(int)param_1 + 0x3d": "pointer[0x3d]",
                "(int)param_1 + 0x3e": "pointer[0x3e]",
                "param_1 + 0xf": "pointer[0xf]",
                "(*param_1)[4]": "ptr[4]",
                "DAT_080027f0": "DAT_080027f0",
                "check_if_bit_is_set_08002ad8": "check_if_bit_is_set",
                "check_and_update_08002bb4": "check_and_update",
                "param_1[0x10]": "pointer[0x10]"
            },
            "code": "uint32_t check_and_update_pointer_08002640(uint32_t **pointer, uint8_t flags, uint16_t value, uint32_t max_offset, int base_address)\n{\n    uint32_t result = 3;\n    uint32_t *ptr = *pointer;\n    ptr[0] |= 0x100;\n    if ((~ptr[5] & 1) == 0)\n    {\n        result = 0;\n    }\n    else if (max_offset == 0xffffffff || (max_offset != 0 && abs(get_pointer_value(base_address) - base_address) <= max_offset))\n    {\n        pointer[0xc] = NULL;\n        pointer[0x3d] = 0x20;\n        pointer[0x3e] = 0;\n        pointer[0xf] = 0;\n        if (result == 0)\n        {\n            ptr[4] = flags & 0xfe;\n            if (check_if_bit_is_set(pointer, DAT_080027f0, value, base_address) == 0)\n            {\n                if (check_and_update(pointer, value, base_address, ptr[6]) == 0)\n                {\n                    if (value == 1)\n                    {\n                        ptr[4] = (uint8_t)value;\n                    }\n                    else\n                    {\n                        ptr[4] = (uint8_t)(value >> 8);\n                        if (check_and_update(pointer, value, base_address) != 0)\n                        {\n                            if (pointer[0x10] == (uint32_t *)0x4)\n                            {\n                                ptr[0] |= 0x200;\n                                result = 1;\n                            }\n                            else\n                            {\n                                result = 3;\n                            }\n                        }\n                        else\n                        {\n                            ptr[4] = (uint8_t)value;\n                        }\n                    }\n                    result = 0;\n                }\n                else if (pointer[0x10] == (uint32_t *)0x4)\n                {\n                    ptr[0] |= 0x200;\n                    result = 1;\n                }\n                else\n                {\n                    result = 3;\n                }\n            }\n            else if (pointer[0x10] == (uint32_t *)0x4)\n            {\n                result = 1;\n            }\n            else\n            {\n                result = 3;\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_pointer_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_inputs_080008fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "xor_result",
                "bVar2": "is_input1_zero",
                "bVar3": "is_input4_less_than_input2",
                "is_negative1": "is_negative1",
                "is_negative2": "is_negative2",
                "is_negative3": "is_negative3",
                "is_xor_result_zero": "is_xor_result_zero",
                "is_xor_result_positive": "is_xor_result_positive",
                "is_input2_equal_input4": "is_input2_equal_input4",
                "is_input1_equal_input3": "is_input1_equal_input3",
                "result": "result"
            },
            "code": "uint check_inputs_080008fc(uint input1, uint input2, uint input3, uint input4)\n{\n  bool is_negative1 = ((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1);\n  bool is_negative2 = ((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0));\n  bool is_negative3 = ((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0));\n  if (is_negative1 && (is_negative2 || is_negative3)) {\n    return 1;\n  }\n  bool is_input1_zero = (input1 | input2 << 1) == 0;\n  bool is_input3_zero = (input3 | input4 << 1) == 0;\n  bool is_input2_equal_input4 = input2 == input4;\n  bool is_input1_equal_input3 = input1 == input3;\n  if (!is_input1_zero && !is_input3_zero && !is_input2_equal_input4 && !is_input1_equal_input3) {\n    uint xor_result = input2 ^ input4;\n    bool is_xor_result_zero = xor_result == 0;\n    bool is_xor_result_positive = -1 < (int)xor_result;\n    bool is_input4_less_than_input2 = param_4 <= input2;\n    bool is_input3_less_than_input1 = param_3 <= input1;\n    if (is_xor_result_positive) {\n      is_input4_less_than_input2 = is_input2_equal_input4;\n    }\n    if (is_xor_result_zero) {\n      is_input3_less_than_input1 = is_input1_equal_input3;\n    }\n    uint result = (int)input4 >> 0x1f;\n    if (!is_input4_less_than_input2) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_inputs_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "validate_inputs_08000988",
                "param_1": "input",
                "check_inputs_080008fc": "check_inputs"
            },
            "code": "undefined4 validate_inputs_08000988(undefined4 input)\n{\n  check_inputs_080008fc();\n  return input;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000978",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "imported": false,
            "current_name": "validate_inputs_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "update_bits_of_uint_08001714",
                "param_1": "param"
            },
            "code": "void update_bits_of_uint_08001714(uint32_t param){\n    update_bits_of_uint_08001714_080015b4(param);\n    return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "update_bits_of_uint_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "clear_first_byte_of_string_08005dfc",
                "param_1": "str",
                "param_2": "len",
                "param_3": "arg2",
                "param_4": "arg3",
                "local_80": "str_ptr",
                "local_78": "max_len",
                "uStack_74": "arg5",
                "local_70": "current_str_ptr",
                "local_6c": "arg4",
                "uStack_8": "arg6",
                "uStack_4": "arg7"
            },
            "code": "void clear_first_byte_of_string_08005dfc(char* str, int len, int arg2, int arg3)\n{\n  char* str_ptr[2];\n  int max_len = INT_MAX;\n  int arg4 = INT_MAX;\n  int arg5 = DAT_08005e3c;\n  str_ptr[0] = str;\n  char* current_str_ptr = str;\n  int arg6 = arg2;\n  int arg7 = arg3;\n  FUNC_08005e9c(*(int *)PTR_PTR_DAT_08005e38, str_ptr, len, &arg6);\n  *str_ptr[0] = 0;\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_first_byte_of_string_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_1": "numerator_array",
                "param_2": "denominator_array",
                "uVar1": "quotient",
                "puVar2": "numerator_ptr",
                "iVar3": "i",
                "iVar4": "last_index",
                "iVar5": "temp_denominator",
                "uVar6": "temp_quotient",
                "puVar7": "denominator_ptr",
                "puVar8": "numerator_ptr",
                "puVar9": "denominator_ptr",
                "puVar11": "numerator_ptr",
                "puVar12": "denominator_ptr"
            },
            "code": "uint calculate_quotient_080078c0(uint numerator_array[], uint denominator_array[], int numerator_size, int denominator_size)\n{\n  uint quotient = 0;\n  int i = 0;\n  uint temp_numerator = 0;\n  int temp_denominator = 0;\n  uint *numerator_ptr = numerator_array;\n  uint *denominator_ptr = denominator_array;\n  int last_index = denominator_size - 1;\n  if (numerator_size < denominator_size)\n  {\n    return 0;\n  }\n  if (denominator_array[last_index] == 0)\n  {\n    return 0;\n  }\n  quotient = numerator_array[last_index] / (denominator_array[last_index] + 1);\n  if (quotient != 0)\n  {\n    do\n    {\n      temp_denominator = *denominator_ptr++;\n      temp_numerator = quotient * (*numerator_ptr & 0xffff) + temp_numerator;\n      uint temp = quotient * (*numerator_ptr >> 0x10) + (temp_numerator >> 0x10);\n      temp_numerator = (i - (temp_numerator & 0xffff)) + (*denominator_ptr & 0xffff);\n      i = ((*numerator_ptr >> 0x10) - (temp & 0xffff)) + ((int)temp_numerator >> 0x10);\n      *numerator_ptr++ = temp_numerator & 0xffff | i * 0x10000;\n      i = i >> 0x10;\n      temp_numerator = temp >> 0x10;\n    } while (denominator_ptr <= denominator_array + last_index);\n    if (numerator_array[last_index] == 0)\n    {\n      if ((numerator_array < numerator_array + numerator_size - 2) && (numerator_array[numerator_size - 2] == 0))\n      {\n        uint *temp_ptr = numerator_array + numerator_size - 3;\n        do\n        {\n          last_index--;\n          if (temp_ptr <= numerator_array)\n          {\n            break;\n          }\n          temp_numerator = *temp_ptr;\n          temp_ptr--;\n        } while (temp_numerator == 0);\n      }\n      *(int *)(numerator_array + 0x10) = last_index;\n    }\n  }\n  if (compare_arrays() >= 0)\n  {\n    i = 0;\n    quotient = quotient + 1;\n    numerator_ptr = numerator_array;\n    do\n    {\n      uint *temp_ptr = denominator_array + 1;\n      temp_denominator = *temp_ptr++;\n      temp_numerator = (i - (*denominator_array & 0xffff)) + (*numerator_ptr & 0xffff);\n      i = ((*numerator_ptr >> 0x10) - (*denominator_array >> 0x10)) + ((int)temp_numerator >> 0x10);\n      *numerator_ptr++ = temp_numerator & 0xffff | i * 0x10000;\n      i = i >> 0x10;\n      denominator_ptr = temp_ptr;\n    } while (denominator_ptr <= denominator_array + last_index);\n    if (numerator_array[last_index] == 0)\n    {\n      if ((numerator_array < numerator_array + last_index - 1) && (numerator_array[last_index - 1] == 0))\n      {\n        uint *temp_ptr = numerator_array + last_index - 2;\n        do\n        {\n          last_index--;\n          if (temp_ptr <= numerator_array)\n          {\n            break;\n          }\n          temp_numerator = *temp_ptr;\n          temp_ptr--;\n        } while (temp_numerator == 0);\n      }\n      *(int *)(numerator_array + 0x10) = last_index;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_quotient_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "uVar3",
                "uVar4": "abs_param4",
                "uVar5": "abs_param2",
                "abs_param1": "abs_param1",
                "abs_param2": "abs_param2",
                "abs_param3": "abs_param3",
                "abs_param4": "abs_param4"
            },
            "code": "uint calculate_result_thunk_08005838(uint param1, uint param2, uint param3, uint param4)\n{\n  int difference;\n  uint result;\n  uint abs_param3 = abs(param3);\n  uint abs_param1 = abs(param1);\n  uint abs_param2 = abs(param2);\n  uint abs_param4 = abs(param4) & 0x7fffffff;\n  uint uVar3 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n  \n  if (DAT_080059e8 < (abs_param4 | (-abs_param3 | abs_param3) >> 0x1f) || DAT_080059e8 < (abs_param2 | (-abs_param1 | abs_param1) >> 0x1f)) {\n    result = FUNC_0800015c(param3, param4, param1, param2);\n  }\n  else {\n    if ((param4 + 0xc0100000 | param3) == 0) {\n      result = FUNC_080059f0();\n    }\n    else {\n      if ((abs_param4 | abs_param3) == 0) {\n        if (uVar3 == 2) {\n          result = DAT_080059b0;\n        }\n        else if (uVar3 == 3) {\n          result = DAT_080059a0;\n        }\n        else if (uVar3 == 1) {\n          result = 0;\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        if (abs_param4 == DAT_080059e8) {\n          if (abs_param2 == abs_param4) {\n            if (uVar3 == 2) {\n              result = DAT_080059e0;\n            }\n            else if (uVar3 == 3) {\n              result = DAT_080059d8;\n            }\n            else if (uVar3 == 1) {\n              result = DAT_080059d0;\n            }\n            else {\n              result = DAT_080059c8;\n            }\n          }\n          else {\n            if (uVar3 == 2) {\n              result = DAT_080059b0;\n            }\n            else if (uVar3 == 3) {\n              result = DAT_080059a0;\n            }\n            else if (uVar3 == 1) {\n              result = 0;\n            }\n            else {\n              result = 0;\n            }\n          }\n        }\n        else if (abs_param2 != DAT_080059e8) {\n          difference = (int)(abs_param2 - abs_param4) >> 0x14;\n          if (difference < 0x3d) {\n            if (((int)param4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n              result = 0;\n            }\n            else {\n              FUNC_0800071c(param1, param2, param3, param4, param4);\n              do_nothing_08005d0c();\n              result = FUNC_080059f0();\n            }\n          }\n          else {\n            uint param1_2 = (uint)((ulonglong)uVar6 >> 0x20);\n            uint param4_2 = (uint)uVar6;\n            if (uVar3 == 1) {\n              result = param4_2;\n            }\n            else if (uVar3 == 2) {\n              uVar6 = FUNC_08000158(param4_2, param1_2, DAT_080059a8, DAT_080059ac);\n              result = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)uVar6, (int)((ulonglong)uVar6 >> 0x20));\n            }\n            else if (uVar3 == 0) {\n              result = param4_2;\n            }\n            else {\n              uVar6 = FUNC_08000158(param4_2, param1_2, DAT_080059a8, DAT_080059ac);\n              result = FUNC_08000158((int)uVar6, (int)((ulonglong)uVar6 >> 0x20), DAT_080059b0, DAT_080059b4);\n            }\n          }\n        }\n        else {\n          if (-1 < (int)param2) {\n            result = DAT_080059b8;\n          }\n          else {\n            result = DAT_080059c0;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "input_value",
                "uVar1": "high_bits",
                "uVar2": "absolute_input_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_plus_21",
                "uVar6": "is_negative",
                "in_r12": "unused_register",
                "bVar7": "is_shift_amount_negative",
                "bVar8": "is_shift_amount_zero",
                "bVar9": "is_shift_amount_overflow"
            },
            "code": "ulonglong calculate_shifted_value_080003f4(uint input_value)\n{\n  uint absolute_input_value = input_value;\n  bool is_negative = false;\n  if (input_value == 0) {\n    return 0;\n  }\n  if ((int)input_value < 0) {\n    absolute_input_value = -input_value;\n    is_negative = true;\n  }\n  uint shift_amount = count_leading_zeroes(absolute_input_value) - 11;\n  if (shift_amount > 32) {\n    shift_amount = 32;\n  }\n  uint high_bits = 0;\n  if (shift_amount < 0) {\n    high_bits = -shift_amount;\n    shift_amount = 0;\n  }\n  if (shift_amount < 20) {\n    return ((ulonglong)absolute_input_value << shift_amount) | ((ulonglong)high_bits << (shift_amount + 32));\n  }\n  if (shift_amount > 1044) {\n    shift_amount = 1044;\n  }\n  uint low_bits = 1042 - shift_amount;\n  if (low_bits > 30) {\n    low_bits = 30;\n  }\n  if (low_bits == 0 || (shift_amount - 19 < 0) != (low_bits - 30 < 0)) {\n    shift_amount++;\n    return ((ulonglong)is_negative << 63) | ((ulonglong)absolute_input_value >> shift_amount) | ((ulonglong)high_bits << (shift_amount + 32));\n  }\n  return ((ulonglong)is_negative << 63) | ((ulonglong)absolute_input_value >> (32 - (shift_amount - 19))) | ((ulonglong)high_bits << (shift_amount - 12));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    extract_value_from_array_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = validate_inputs_and_return_status_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = calculate_buffer_size_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = shift_bits_and_concatenate_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = calculate_shifted_value_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = convert_to_int_0800119c();\n  iVar10 = is_end_of_input_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = calculate_shifted_value_080003f4(local_74);\n    iVar10 = validate_inputs_and_return_status_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = validate_input_and_return_null_terminator_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)allocate_or_get_buffer_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)allocate_or_get_buffer_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = is_end_of_input_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = calculate_shifted_value_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = calculate_shifted_value_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = calculate_shifted_value_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = convert_to_int_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = calculate_shifted_value_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = convert_to_int_0800119c();\n            uVar23 = calculate_shifted_value_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = is_end_of_input_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = validate_input_and_return_null_terminator_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = validate_input_and_return_null_terminator_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = validate_input_and_return_null_terminator_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = convert_to_int_0800119c();\n              uVar23 = calculate_shifted_value_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = is_end_of_input_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = is_end_of_input_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = validate_input_and_return_null_terminator_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = is_end_of_input_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    extract_value_from_array_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = convert_to_int_0800119c();\n        uVar21 = calculate_shifted_value_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = validate_inputs_and_return_status_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = convert_to_int_0800119c();\n            uVar22 = calculate_shifted_value_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = validate_inputs_and_return_status_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = validate_input_and_return_null_terminator_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = validate_inputs_and_return_status_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = validate_input_and_return_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = initialize_buffer_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = hash_table_lookup_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = hash_table_lookup_080093a4(param_1,uVar12,iVar9);\n          uVar8 = calculate_hash_08009258(param_1,uVar12,uVar3);\n          extract_value_from_array_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = hash_table_lookup_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = initialize_buffer_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = hash_table_lookup_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = count_leading_zero_bits_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = encode_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = encode_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = compare_arrays_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = calculate_hash_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = calculate_hash_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = calculate_hash_08009120(param_1,uVar5,5);\n        iVar9 = compare_arrays_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = calculate_quotient_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = calculate_hash_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = encode_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = allocate_or_get_buffer_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        copyMemoryImproved_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = encode_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = calculate_quotient_080078c0(uVar3,uVar5);\n      iVar13 = compare_arrays_080094f8(uVar3,local_80);\n      iVar10 = calculate_hash_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = compare_arrays_080094f8(uVar3);\n        extract_value_from_array_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      extract_value_from_array_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = encode_08009444(param_1,uVar3,1);\n          iVar13 = compare_arrays_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = calculate_hash_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = calculate_hash_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = calculate_hash_08009120(param_1,local_80,10,0);\n          uVar12 = calculate_hash_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = encode_08009444(param_1,uVar3,1);\n    iVar9 = compare_arrays_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    extract_value_from_array_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      extract_value_from_array_0800910c(param_1);\n    }\n  }\n  extract_value_from_array_0800910c(param_1,uVar12);\nLAB_08008294:\n  extract_value_from_array_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08001084",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800910c",
                "FUN_080093a4",
                "FUN_08000998",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_08009530",
                "FUN_080078c0",
                "FUN_08009258",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_08000158",
                "FUN_080009d4",
                "FUN_0800071c",
                "FUN_080094f8",
                "FUN_080090c0",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "apply_mask_0800166c",
                "param_1": "mask",
                "param_2": "value",
                "param_3": "target",
                "uVar1": "num_bits_to_keep",
                "masked_value": "masked_value",
                "shifted_value": "shifted_value"
            },
            "code": "uint apply_mask_0800166c(uint mask, uint value, uint target) {\n  uint num_bits_to_shift = mask & 7;\n  uint num_bits_to_keep = 7 - num_bits_to_shift;\n  if (num_bits_to_keep > 3) {\n    num_bits_to_keep = 4;\n  }\n  if (num_bits_to_shift + 4 < 7) {\n    num_bits_to_shift = 0;\n  } else {\n    num_bits_to_shift = num_bits_to_shift - 3;\n  }\n  uint masked_value = ~(-1 << (num_bits_to_shift & 0xff)) & target;\n  uint shifted_value = (~(-1 << (num_bits_to_keep & 0xff)) & value) << (num_bits_to_shift & 0xff);\n  return masked_value | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "apply_mask_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "data_ptr",
                "*param_1": "data",
                "(*param_1)[3]": "data[3]",
                "**param_1": "*data"
            },
            "code": "int set_flags_0800360c(uint** data_ptr)\n{\n  uint* data = *data_ptr;\n  data[3] |= 1;\n  *data |= 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "fill_buffer_with_value_08005d68",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "buffer_ptr",
                "puVar2": "byte_ptr",
                "uVar3": "remaining_bytes",
                "uVar4": "word_value",
                "bVar5": "is_remaining_bytes_zero",
                "is_buffer_aligned": "is_buffer_aligned"
            },
            "code": "void fill_buffer_with_value_08005d68(uint32_t *buffer, uint8_t value, uint32_t length)\n{\n  uint32_t *buffer_ptr;\n  uint32_t *buffer_end;\n  uint32_t word_value;\n  bool is_buffer_aligned;\n\n  is_buffer_aligned = ((uint)buffer & 3) == 0;\n  if (!is_buffer_aligned) {\n    uint32_t remaining_bytes = length - 1;\n    buffer_ptr = buffer;\n    if (length == 0) {\n      return;\n    }\n    while(true) {\n      buffer = (uint32_t *)((int)buffer_ptr + 1);\n      *(uint8_t *)buffer_ptr = value;\n      length = remaining_bytes;\n      if (((uint)buffer & 3) == 0) break;\n      bool is_remaining_bytes_zero = remaining_bytes == 0;\n      remaining_bytes = remaining_bytes - 1;\n      buffer_ptr = buffer;\n      if (is_remaining_bytes_zero) {\n        return;\n      }\n    }\n  }\n\n  if (length >= 16) {\n    word_value = (value << 24) | (value << 16) | (value << 8) | value;\n    buffer_end = buffer + (length >> 4) * 4;\n    while(buffer < buffer_end) {\n      buffer[0] = word_value;\n      buffer[1] = word_value;\n      buffer[2] = word_value;\n      buffer[3] = word_value;\n      buffer += 4;\n    }\n    length &= 0xf;\n    buffer_ptr = buffer_end;\n    if (length < 4) goto end;\n  }\n\n  word_value = (value << 24) | (value << 16) | (value << 8) | value;\n  while(length >= 4) {\n    length -= 4;\n    *buffer = word_value;\n    buffer++;\n  }\n  buffer_ptr = buffer;\n\nend:\n  if (length != 0) {\n    buffer_end = (uint32_t *)(length + (int)buffer_ptr);\n    while(buffer_ptr < buffer_end) {\n      uint8_t *byte_ptr = (uint8_t *)buffer_ptr;\n      *byte_ptr = value;\n      buffer_ptr = (uint32_t *)(byte_ptr + 1);\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_value_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "decode_flags_080017c4",
                "param_1": "flags",
                "param_2": "encoded_flags",
                "uVar1": "ptr_dat_08001a60",
                "uVar2": "ptr_dat_08001a5c",
                "uVar3": "bit_mask",
                "uVar4": "flag_mask",
                "uVar5": "flag_type",
                "puVar6": "flags_ptr",
                "iVar7": "index",
                "local_10": "decoded_value",
                "local_c": "flag_index"
            },
            "code": "void decode_flags_080017c4(uint *flags, uint *encoded_flags)\n{\n  uint bit_mask;\n  uint decoded_value;\n  uint *flags_ptr;\n  int index;\n  uint flag_index = 0;\n  uint bit_index = 0;\n  do {\n    if (flag_index > 15) {\n      return;\n    }\n    bit_mask = 1 << (flag_index & 0xff);\n    decoded_value = 0;\n    if ((*encoded_flags & bit_mask) == bit_mask) {\n      uint flag_type = encoded_flags[1];\n      if (flag_type == 0x12) {\n        decoded_value = encoded_flags[3] + 0xc;\n      }\n      else if (flag_type < 0x13) {\n        if (flag_type == 2) {\n          decoded_value = encoded_flags[3] + 8;\n        }\n        else if (flag_type < 3) {\n          if (flag_type == 0) goto LAB_08001882;\n          if (flag_type == 1) {\n            decoded_value = encoded_flags[3];\n          }\n        }\n        else if (flag_type == 3) {\n          decoded_value = 0;\n        }\n        else if (flag_type == PTR_DAT_08001a4c ||\n                 (flag_type == PTR_DAT_08001a50 && encoded_flags[1] == PTR_DAT_08001a54) ||\n                 flag_type == PTR_DAT_08001a58 || flag_type == PTR_DAT_08001a5c ||\n                 flag_type == PTR_DAT_08001a60) {\n          goto LAB_08001882;\n        }\n      }\n      else {\n        goto LAB_08001882;\n      }\n      if ((*encoded_flags & 0xff) < 0x100) {\n        flags_ptr = flags;\n        index = flag_index << 2;\n      }\n      else {\n        flags_ptr = flags + 1;\n        index = (flag_index - 8) * 4;\n      }\n      *flags_ptr = *flags_ptr & ~(0xf << (index & 0xff)) | decoded_value << (index & 0xff);\n      if ((encoded_flags[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        if (flags == PTR_DAT_08001a6c) {\n          index = 0;\n        }\n        else if (flags == PTR_DAT_08001a70) {\n          index = 1;\n        }\n        else if (flags == PTR_DAT_08001a74) {\n          index = 2;\n        }\n        else if (flags == PTR_DAT_08001a78) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((flag_index >> 2) + 2) * 4) =\n             index << ((flag_index & 3) << 2) |\n             ~(0xf << ((flag_index & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((flag_index >> 2) + 2) * 4);\n        if ((encoded_flags[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~bit_mask & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = bit_mask | *PTR_DAT_08001a7c;\n        }\n        if ((encoded_flags[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~bit_mask & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = bit_mask | PTR_DAT_08001a7c[1];\n        }\n        if ((encoded_flags[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~bit_mask & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = bit_mask | PTR_DAT_08001a7c[2];\n        }\n        if ((encoded_flags[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~bit_mask & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = bit_mask | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    flag_index++;\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "imported": false,
            "current_name": "decode_flags_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "check_values_set_080035a4",
                "param_1": "ptr_values",
                "uVar1": "result",
                "do_nothing_080035fa": "do_nothing"
            },
            "code": "int check_values_set_080035a4(int *ptr_values) {\n  int result;\n  if (ptr_values == NULL) {\n    result = 1;\n  }\n  else {\n    if (ptr_values[0x3d] == 0) {\n      ptr_values[0xf] = 0;\n      do_nothing_080035fa(ptr_values);\n    }\n    ptr_values[0x3d] = 2;\n    set_values(ptr_values[0], ptr_values + 1);\n    ptr_values[0x3d] = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_values_set_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_080041ea",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*": "*",
                "()": "()",
                "+": "+",
                "0x20": "0x20",
                "&": "&",
                "~": "~",
                "<<": "<<",
                "|": "|"
            },
            "code": "void set_bit_080041ea(uint32_t* bit_array, uint8_t bit_index, uint8_t bit_value) {\n    *bit_array = (*bit_array & ~(1 << (bit_index & 0xff))) | (bit_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "set_bit_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "calculate_hashes_and_store_08004ae0",
                "param_1": "hashes",
                "local_2c": "byte1",
                "local_2b": "byte2",
                "local_1e": "short6",
                "local_1c": "short5",
                "local_1a": "short4",
                "local_18": "short3",
                "local_16": "short2",
                "local_14": "short1"
            },
            "code": "void calculate_hashes_and_store_08004ae0(undefined4 *hashes)\n{\n  undefined4 hash;\n  undefined byte1;\n  undefined byte2;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,&byte1,0xe);\n  short1 = CONCAT11(byte2, byte1);\n  short2 = CONCAT11(local_28, local_27);\n  short3 = CONCAT11(local_26, local_25);\n  short4 = CONCAT11(local_24, local_23);\n  short5 = CONCAT11(local_22, local_21);\n  short6 = CONCAT11(local_20, local_1f);\n  hash = calculate_hash_08000c10((int)short1);\n  *hashes = hash;\n  hash = calculate_hash_08000c10((int)short2);\n  hashes[1] = hash;\n  hash = calculate_hash_08000c10((int)short3);\n  hashes[2] = hash;\n  hash = calculate_hash_08000c10((int)short4);\n  hashes[3] = hash;\n  hash = calculate_hash_08000c10((int)short5);\n  hashes[4] = hash;\n  hash = calculate_hash_08000c10((int)short6);\n  hashes[5] = hash;\n}\n",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hashes_and_store_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "decode_uint_08001044",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "return": "decoded_value"
            },
            "code": "uint decode_uint_08001044(uint encoded_value) {\n    uint decoded_value;\n    if (((encoded_value & 0x80000000) != 0) || (encoded_value << 1 < 0x7f000000)) {\n        return 0;\n    }\n    uint shift_amount = 0x9e - ((encoded_value << 1) >> 0x18);\n    if ((int)shift_amount >= 0) {\n        decoded_value = (encoded_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n        return decoded_value;\n    }\n    if ((shift_amount == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "decode_uint_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "encode_08009444",
                "param_1": "input",
                "param_2": "output",
                "param_3": "output_size",
                "iVar1": "temp1",
                "iVar2": "buffer_offset",
                "iVar3": "buffer_index",
                "uVar4": "output_buffer",
                "iVar5": "output_buffer_address",
                "iVar6": "temp2",
                "puVar7": "buffer",
                "puVar8": "input_buffer",
                "puVar9": "ptr",
                "puVar10": "next_ptr",
                "puVar11": "buffer_end",
                "iVar12": "bits_to_shift",
                "iVar13": "buffer_required_size",
                "uVar14": "carry"
            },
            "code": "void encode_08009444(uint32_t input, uint32_t *output, uint32_t output_size) {\n  uint32_t buffer_size = output[4];\n  uint32_t bits_to_shift = output_size >> 5;\n  uint32_t buffer_required_size = bits_to_shift + buffer_size + 1;\n  uint32_t buffer_index = output[1];\n  uint32_t buffer_offset = output[2];\n\n  while (buffer_offset < buffer_required_size) {\n    buffer_offset *= 2;\n    buffer_index++;\n  }\n\n  uint32_t buffer_address = allocate_or_get_buffer_080090c0(input, buffer_index);\n  uint32_t *buffer = (uint32_t *)(buffer_address + 0x14);\n\n  if (bits_to_shift > 0) {\n    uint32_t *buffer_end = buffer + bits_to_shift;\n    for (uint32_t *ptr = buffer; ptr < buffer_end; ptr++) {\n      *ptr = 0;\n    }\n  }\n\n  uint32_t *input_buffer = output + 5;\n\n  if (output_size == 0) {\n    buffer--;\n    uint32_t *buffer_end = input_buffer + buffer_size;\n    for (uint32_t *ptr = buffer_end; ptr >= input_buffer; ptr--) {\n      *(buffer++) = *ptr;\n    }\n  }\n  else {\n    uint32_t carry = 0;\n    uint32_t *input_buffer_end = input_buffer + buffer_size;\n    for (uint32_t *ptr = input_buffer; ptr < input_buffer_end; ptr++) {\n      *buffer = (*ptr << output_size) | carry;\n      carry = *ptr >> (0x20 - output_size);\n      buffer++;\n    }\n    *(buffer++) = carry;\n    if (carry != 0) {\n      buffer_required_size++;\n    }\n  }\n\n  uint32_t output_buffer_address = *(uint32_t *)(input + 0x4c);\n  uint32_t output_buffer_index = output[1];\n  uint32_t output_buffer = *(uint32_t *)(output_buffer_address + output_buffer_index * 4);\n  *(uint32_t *)(buffer_address + 0x10) = buffer_required_size - 1;\n  *output = output_buffer;\n  *(uint32_t **)(output_buffer_address + output_buffer_index * 4) = output;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "encode_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "extract_bits_from_uint_080015fc",
                "DAT_08001614": "PTR_data"
            },
            "code": "uint extract_bits_from_uint_080015fc(uint data) {\n    uint shifted_data = *(uint *)(DAT_08001614 + 0xc) >> 8; \n    uint extracted_bits = shifted_data & 7; \n    return extracted_bits; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "extract_bits_from_uint_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "validate_input_and_process_08004436",
                "param_1": "input",
                "param_2": "data",
                "param_3": "length",
                "param_4": "timeout",
                "iVar1": "pointer_start_value",
                "iVar2": "pointer_current_value",
                "uVar3": "validation_result",
                "local_58": "data_ptr"
            },
            "code": "int validate_input_and_process_08004436(uint **input, ushort *data, short length, uint timeout) {\n  int pointer_start_value;\n  int pointer_current_value;\n  int validation_result;\n  ushort *data_ptr;\n  \n  if (*(char *)((int)input + 0x39) == ' ') {\n    if ((data == (ushort *)0x0) || (length == 0)) {\n      validation_result = 1;\n    }\n    else if (*(char *)(input + 0xe) == '\\x01') {\n      validation_result = 2;\n    }\n    else {\n      *(undefined *)(input + 0xe) = 1;\n      input[0xf] = (uint *)0x0;\n      *(undefined *)((int)input + 0x39) = 0x21;\n      pointer_start_value = get_pointer_value_080015a0();\n      *(short *)(input + 9) = length;\n      *(short *)((int)input + 0x26) = length;\n      data_ptr = data;\n      while (*(short *)((int)input + 0x26) != 0) {\n        *(short *)((int)input + 0x26) = *(short *)((int)input + 0x26) + -1;\n        if (input[2] == (uint *)0x1000) {\n          do {\n            if ((**input & 0x80) == 0x80) {\n              validation_result = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) || ((timeout != 0 && (pointer_current_value = get_pointer_value_080015a0(), (uint)(pointer_current_value - pointer_start_value) <= timeout))));\n          (*input)[3] = (*input)[3] & 0xfffffe5f;\n          (*input)[5] = (*input)[5] & 0xfffffffe;\n          *(undefined *)((int)input + 0x39) = 0x20;\n          *(undefined *)((int)input + 0x3a) = 0x20;\n          *(undefined *)(input + 0xe) = 0;\n          validation_result = 3;\n          goto LAB_0800454c;\n        }\n        else {\n          do {\n            if ((**input & 0x80) == 0x80) {\n              validation_result = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) || ((timeout != 0 && (pointer_current_value = get_pointer_value_080015a0(), (uint)(pointer_current_value - pointer_start_value) <= timeout))));\n          (*input)[3] = (*input)[3] & 0xfffffe5f;\n          (*input)[5] = (*input)[5] & 0xfffffffe;\n          *(undefined *)((int)input + 0x39) = 0x20;\n          *(undefined *)((int)input + 0x3a) = 0x20;\n          *(undefined *)(input + 0xe) = 0;\n          validation_result = 3;\n          goto LAB_08004614;\n        }\n      }\n      do {\n        if ((**input & 0x40) == 0x40) {\n          validation_result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) || ((timeout != 0 && (pointer_current_value = get_pointer_value_080015a0(), (uint)(pointer_current_value - pointer_start_value) <= timeout))));\n      (*input)[3] = (*input)[3] & 0xfffffe5f;\n      (*input)[5] = (*input)[5] & 0xfffffffe;\n      *(undefined *)((int)input + 0x39) = 0x20;\n      *(undefined *)((int)input + 0x3a) = 0x20;\n      *(undefined *)(input + 0xe) = 0;\n      validation_result = 3;\n      goto LAB_080046c6;\n    }\n  }\n  else {\n    validation_result = 2;\n  }\n  return validation_result;\n\nLAB_0800454c:\n  if (validation_result != 0) {\n    (*input)[1] = *data_ptr & 0x1ff;\n    if (input[4] == (uint *)0x0) {\n      data_ptr = data_ptr + 1;\n    }\n    else {\n      data_ptr = (ushort *)((int)data_ptr + 1);\n    }\n  }\nLAB_08004614:\n  if (validation_result != 0) {\n    (*input)[1] = (uint)*(byte *)data_ptr;\n    data_ptr = (ushort *)((int)data_ptr + 1);\n  }\nLAB_080046c6:\n  if (validation_result == 0) {\n    *(undefined *)((int)input + 0x39) = 0x20;\n    *(undefined *)(input + 0xe) = 0;\n  }\n  else {\n    validation_result = 3;\n  }\n  return validation_result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "validate_input_and_process_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_and_return_param_08000110",
                "*param_1": "param",
                "*PTR_DAT_08000128": "ptr_dat",
                "DAT_0800012c": "dat",
                "PTR_FUN_08000130": "ptr_fun"
            },
            "code": "check_and_return_param_08000110bcheck_and_return_param_08000110ocheck_and_return_param_08000110ocheck_and_return_param_08000110lcheck_and_return_param_08000110 check_and_return_param_08000110icheck_and_return_param_08000110scheck_and_return_param_08000110_check_and_return_param_08000110*check_and_return_param_08000110Pcheck_and_return_param_08000110Tcheck_and_return_param_08000110Rcheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_080001108check_and_return_param_08000110_check_and_return_param_08000110echeck_and_return_param_08000110mcheck_and_return_param_08000110pcheck_and_return_param_08000110tcheck_and_return_param_08000110ycheck_and_return_param_08000110 check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_08000110(check_and_return_param_08000110*check_and_return_param_08000110Pcheck_and_return_param_08000110Tcheck_and_return_param_08000110Rcheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_080001108check_and_return_param_08000110 check_and_return_param_08000110=check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_08000110'check_and_return_param_08000110\\check_and_return_param_080001100check_and_return_param_08000110'check_and_return_param_08000110)check_and_return_param_08000110;check_and_return_param_08000110\ncheck_and_return_param_08000110bcheck_and_return_param_08000110ocheck_and_return_param_08000110ocheck_and_return_param_08000110lcheck_and_return_param_08000110 check_and_return_param_08000110icheck_and_return_param_08000110scheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_08000110ccheck_and_return_param_08000110_check_and_return_param_08000110ncheck_and_return_param_08000110ocheck_and_return_param_08000110tcheck_and_return_param_08000110_check_and_return_param_08000110zcheck_and_return_param_08000110echeck_and_return_param_08000110rcheck_and_return_param_08000110ocheck_and_return_param_08000110 check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_08000110(check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_08000110ccheck_and_return_param_08000110 check_and_return_param_08000110!check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_080001100check_and_return_param_08000110)check_and_return_param_08000110;check_and_return_param_08000110\ncheck_and_return_param_08000110\ncheck_and_return_param_08000110icheck_and_return_param_08000110fcheck_and_return_param_08000110 check_and_return_param_08000110(check_and_return_param_08000110icheck_and_return_param_08000110scheck_and_return_param_08000110_check_and_return_param_08000110*check_and_return_param_08000110Pcheck_and_return_param_08000110Tcheck_and_return_param_08000110Rcheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_080001108check_and_return_param_08000110_check_and_return_param_08000110echeck_and_return_param_08000110mcheck_and_return_param_08000110pcheck_and_return_param_08000110tcheck_and_return_param_08000110ycheck_and_return_param_08000110)check_and_return_param_08000110 check_and_return_param_08000110{check_and_return_param_08000110\ncheck_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110icheck_and_return_param_08000110fcheck_and_return_param_08000110 check_and_return_param_08000110(check_and_return_param_08000110icheck_and_return_param_08000110scheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_08000110ccheck_and_return_param_08000110_check_and_return_param_08000110ncheck_and_return_param_08000110ocheck_and_return_param_08000110tcheck_and_return_param_08000110_check_and_return_param_08000110zcheck_and_return_param_08000110echeck_and_return_param_08000110rcheck_and_return_param_08000110ocheck_and_return_param_08000110)check_and_return_param_08000110 check_and_return_param_08000110{check_and_return_param_08000110\ncheck_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110pcheck_and_return_param_08000110acheck_and_return_param_08000110rcheck_and_return_param_08000110acheck_and_return_param_08000110mcheck_and_return_param_08000110_check_and_return_param_080001101check_and_return_param_08000110 check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_08000110Pcheck_and_return_param_08000110Tcheck_and_return_param_08000110Rcheck_and_return_param_08000110_check_and_return_param_08000110Fcheck_and_return_param_08000110Ucheck_and_return_param_08000110Ncheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001103check_and_return_param_080001100check_and_return_param_08000110;check_and_return_param_08000110\ncheck_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110}check_and_return_param_08000110\ncheck_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110 check_and_return_param_08000110*check_and_return_param_08000110Pcheck_and_return_param_08000110Tcheck_and_return_param_08000110Rcheck_and_return_param_08000110_check_and_return_param_08000110Dcheck_and_return_param_08000110Acheck_and_return_param_08000110Tcheck_and_return_param_08000110_check_and_return_param_080001100check_and_return_param_080001108check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001100check_and_return_param_080001101check_and_return_param_080001102check_and_return_param_080001108check_and_return_param_08000110 check_and_return_param_08000110=check_and_return_param_08000110 check_and_return_param_080001101check_and_return_param_08000110;check_and_return_param_08000110\ncheck_and_return_param_08000110}check_and_return_param_08000110\ncheck_and_return_param_08000110\ncheck_and_return_param_08000110rcheck_and_return_param_08000110echeck_and_return_param_08000110tcheck_and_return_param_08000110ucheck_and_return_param_08000110rcheck_and_return_param_08000110ncheck_and_return_param_08000110 check_and_return_param_08000110pcheck_and_return_param_08000110acheck_and_return_param_08000110rcheck_and_return_param_08000110acheck_and_return_param_08000110mcheck_and_return_param_08000110_check_and_return_param_080001101check_and_return_param_08000110;check_and_return_param_08000110",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_param_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "PTR_DAT_08003514": "value_pointer"
            },
            "code": "int get_value_from_pointer_08003504() {\n  int* PTR_DAT_08003514 = (int*) PTR_DAT_08003514;\n  return *PTR_DAT_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "data_type",
                "PTR_DAT_08004f28": "PTR_DATA_ARRAY",
                "*(undefined4 *)PTR_DAT_08004f24": "*(uint32_t *)PTR_DATA_ARRAY_SIZE"
            },
            "code": "void process_data_08004ee8(void* data_ptr, void* data_size, int flag, int count, uint32_t timestamp, uint16_t data_type){\n  call_data_processing_func(PTR_DAT_08004f28, data_ptr, data_size, flag, count, timestamp, *(undefined4 *)PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "length_difference",
                "puVar2": "array2_ptr",
                "iVar3": "array2_length",
                "puVar4": "array1_ptr"
            },
            "code": "int compare_arrays_080094f8(int *array1, int *array2, int length)\n{\n  int array1_length = *(array1 + 4);\n  int array2_length = *(array2 + 4);\n  int length_difference = array1_length - array2_length;\n  \n  if (length_difference == 0) {\n    int *array1_ptr = array1 + 5;\n    int *array2_ptr = array2 + 5;\n    \n    for (int i = 0; i < array1_length; i++) {\n      if (*array1_ptr != *array2_ptr) {\n        if (*array2_ptr < *array1_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n      array1_ptr++;\n      array2_ptr++;\n    }\n  }\n  return length_difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "validate_inputs_and_return_status_08000998",
                "in_ZR": "input_char",
                "validate_inputs_08000988": "validate_inputs"
            },
            "code": "bool validate_inputs_and_return_status_08000998(void)\\n{\\n  char input_char;\\n  validate_inputs();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "validate_inputs_and_return_status_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_input_080009ac",
                "in_CY": "input_char",
                "validate_inputs_08000988": "validate_inputs"
            },
            "code": "bool is_end_of_input_080009ac(void)\n{\n  char input_char;\n  validate_inputs();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_input_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "concatenate_integers_08000fc8",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "code": "void concatenate_integers_08000fc8(int second_integer, int first_integer)\n{\n  concatenate_integers_08000fc8_08000fd0(second_integer, first_integer);\n  return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_parameter_validity_0800438a",
                "param_1": "parameter",
                "uVar1": "is_valid",
                "do_nothing_08004424": "do_nothing",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int check_parameter_validity_0800438a(int *parameter)\\n{\\n    int is_valid = 0;\\n\\n    if (parameter == NULL)\\n    {\\n        is_valid = 1;\\n    }\\n    else\\n    {\\n        if (*(char *)((int)parameter + 0x39) == \"\\0\")\\n        {\\n            *(undefined *)(parameter + 0xe) = 0;\\n            do_nothing_08004424(parameter);\\n        }\\n\\n        *(undefined *)((int)parameter + 0x39) = 0x24;\\n        *(uint *)(*parameter + 0xc) &= 0xffffdfff;\\n        calculate_values(parameter);\\n        *(uint *)(*parameter + 0x10) &= 0xffffb7ff;\\n        *(uint *)(*parameter + 0x14) &= 0xffffffd5;\\n        *(uint *)(*parameter + 0xc) |= 0x2000;\\n        parameter[0xf] = 0;\\n        *(undefined *)((int)parameter + 0x39) = 0x20;\\n        *(undefined *)((int)parameter + 0x3a) = 0x20;\\n        is_valid = 0;\\n    }\\n    return is_valid;\\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_parameter_validity_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_memory_value_and_update_bits_080014f0",
                "*DAT_08001518": "data_pointer",
                "update_bits_of_uint_08001714": "update_bits_of_uint",
                "check_and_set_memory_value_0800151c": "set_memory_value",
                "do_nothing_08002d8a": "do_nothing"
            },
            "code": "int set_memory_value_and_update_bits_080014f0(void)\n{\n  int* *DAT_08001518 = DAT_08001518;\n  **DAT_08001518 |= 0x10;\n  update_bits_of_uint_08001714(3);\n  check_and_set_memory_value_0800151c(0xf);\n  do_nothing_08002d8a();\n  return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_08001714",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_memory_value_and_update_bits_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "update_flags_and_values_08003908",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "operation_type",
                "uVar1": "return_value"
            },
            "code": "int update_flags_and_values_08003908(int *data_ptr, int data, int operation_type)\n{\n    int return_value;\n    if (*(char *)(data_ptr + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(undefined *)(data_ptr + 0xf) = 1;\n        *(undefined *)((int)data_ptr + 0x3d) = 2;\n        switch(operation_type) {\n            case 0:\n                set_flags_and_values(*data_ptr, data);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 8;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(data + 0x10) | *(uint *)(*data_ptr + 0x18);\n                break;\n            case 4:\n                update_data(*data_ptr, data);\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 0x800;\n                *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x18) = *(int *)(data + 0x10) << 8 | *(uint *)(*data_ptr + 0x18);\n                break;\n            case 8:\n                set_values(*data_ptr, data);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 8;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffffb;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(data + 0x10) | *(uint *)(*data_ptr + 0x1c);\n                break;\n            case 0xc:\n                set_data(*data_ptr, data);\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 0x800;\n                *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffbff;\n                *(uint *)(*data_ptr + 0x1c) = *(int *)(data + 0x10) << 8 | *(uint *)(*data_ptr + 0x1c);\n                break;\n        }\n        *(undefined *)((int)data_ptr + 0x3d) = 1;\n        *(undefined *)(data_ptr + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clearBuffer_08004f60",
                "PTR_DAT_08004f74": "bufferPointer",
                "fill_buffer_with_value_08005d68": "fillBufferWithValue"
            },
            "code": "void clearBuffer_08004f60(void)\n{\n  fill_buffer_with_value_08005d68(PTR_DAT_08004f74,0,0x40);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clearBuffer_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "validate_inputs_and_return_true_if_any_input_is_invalid_080009c0",
                "in_CY": "is_CY_invalid",
                "in_ZR": "is_ZR_invalid",
                "validate_inputs_08000988": "is_input_CY_invalid_08000988 and is_input_ZR_invalid_08000988"
            },
            "code": "bool validate_inputs_and_return_true_if_any_input_is_invalid_080009c0(void)\n{\n  bool is_CY_invalid;\n  bool is_ZR_invalid;\n  is_CY_invalid = is_input_CY_invalid_08000988();\n  is_ZR_invalid = is_input_ZR_invalid_08000988();\n  return is_CY_invalid || is_ZR_invalid;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "validate_inputs_and_return_true_if_any_input_is_invalid_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint32_t input1, int input2, uint32_t input3, int input4) {\n    bool is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    bool is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n    return is_input2_valid && is_input4_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "set_values_08003f18",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "local_value"
            },
            "code": "void set_values_08003f18(int data, uint *values)\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(data + 4);\n  value1 = *values;\n  value2 = values[2] << 8 | *(uint *)(data + 0x20) & 0xfffffdff;\n  if (data == DAT_08003ff4) {\n    value2 = (values[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = values[6] << 4 | values[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(data + 4) = local_value;\n  *(uint *)(data + 0x1c) = value1 | *(uint *)(data + 0x1c) & 0xffffff8c;\n  *(uint *)(data + 0x3c) = values[1];\n  *(uint *)(data + 0x20) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_values_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "reverse_copy_and_update_080097cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "source_end",
                "iVar1": "source_offset",
                "uVar2": "source_size_remaining",
                "iVar3": "destination_size",
                "iVar4": "destination_offset",
                "uVar5": "destination_start",
                "uVar6": "source_value",
                "puVar7": "source_ptr",
                "puVar8": "destination_ptr",
                "uVar9": "new_destination_ptr"
            },
            "code": "undefined4 reverse_copy_and_update_080097cc(uint32_t *destination, uint32_t *source, uint32_t *source_end)\\n\\\n{\\n\\\n  int source_size = source_end[2];\\n\\\n  uint32_t *source_ptr = (uint32_t *)*source_end;\\n\\\n  uint32_t *destination_ptr = destination;\\n\\\n  uint32_t source_value;\\n\\\n  uint32_t source_size_remaining;\\n\\\n  int destination_offset;\\n\\\n  int destination_size = destination[2];\\n\\\n  int source_offset = *source;\\n\\\n  int destination_start = *destination;\\n\\\n  int source_size_remaining = source_size;\\n\\\n  if (source_size != 0) {\\n\\\n    do {\\n\\\n      do {\\n\\\n        source_value = *source_ptr;\\n\\\n        source_size_remaining = source_ptr[1];\\n\\\n        source_ptr += 2;\\n\\\n      } while (source_size_remaining == 0);\\n\\\n      if ((source_size_remaining <= destination_size) && (*(ushort *)(source + 3) & 0x480) != 0) {\\n\\\n        destination_offset = source_offset - source[4];\\n\\\n        destination_size = (source[5] * 3) / 2;\\n\\\n        if (destination_size < source_size_remaining + 1 + destination_offset) {\\n\\\n          destination_size = source_size_remaining + 1 + destination_offset;\\n\\\n        }\\n\\\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\\n\\\n          uint32_t *new_destination_ptr = (uint32_t *)FUNC_08008af8(destination, destination_size);\\n\\\n          if (new_destination_ptr == 0) {\\n\\\n            *destination = 0xc;\\n\\\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\\n\\\n            source_end[1] = 0;\\n\\\n            source_end[2] = 0;\\n\\\n            return 0xffffffff;\\n\\\n          }\\n\\\n          copyMemoryImproved_08001084(new_destination_ptr, source[4], destination_offset);\\n\\\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\\n\\\n          destination_ptr = new_destination_ptr + destination_offset;\\n\\\n        }\\n\\\n        else {\\n\\\n          uint32_t *new_destination_ptr = (uint32_t *)FUNC_08009adc(destination);\\n\\\n          if (new_destination_ptr == 0) {\\n\\\n            FUNC_080088ec(destination, source[4]);\\n\\\n            *destination = 0xc;\\n\\\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\\n\\\n            source_end[1] = 0;\\n\\\n            source_end[2] = 0;\\n\\\n            return 0xffffffff;\\n\\\n          }\\n\\\n          destination_ptr = new_destination_ptr + destination_offset;\\n\\\n        }\\n\\\n        source_offset = destination_offset + (int)(source_ptr - (source_value + source_offset));\\n\\\n        destination[5] = destination_size;\\n\\\n        destination[4] = (int)destination_ptr;\\n\\\n        *destination = destination_start + (int)(destination_ptr - destination);\\n\\\n        destination_size = destination_size - destination_offset;\\n\\\n      }\\n\\\n      reverse_copy_08009a18(destination_ptr, source_value, source_size_remaining);\\n\\\n      source_size_remaining = source_end[2];\\n\\\n      destination_size = destination_size - source_size_remaining;\\n\\\n      source_offset = *source + source_size_remaining;\\n\\\n      destination_start = *destination + source_size_remaining;\\n\\\n      destination[2] = destination_size;\\n\\\n      source_end[2] = source_size_remaining - source_size_remaining;\\n\\\n    } while (source_size_remaining != 0);\\n\\\n  }\\n\\\n  source_end[1] = 0;\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08001084",
                "FUN_08009a18",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "reverse_copy_and_update_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = get_pointer_value_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = get_pointer_value_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = check_and_update_flags_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = check_pointer_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = check_pointer_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_if_bit_is_set_08002ad8",
                "param_1": "ptr_arr",
                "param_2": "bit_mask",
                "param_3": "bit_check",
                "param_4": "param_4",
                "iVar1": "ptr_offset",
                "cVar2": "bit_value",
                "uVar3": "mask",
                "bVar4": "is_bit_set"
            },
            "code": "int check_if_bit_is_set_08002ad8(uint **ptr_arr, uint bit_mask, uint bit_check, int param_4) {\n  int ptr_offset;\n  char bit_value;\n  uint mask;\n  bool is_bit_set;\n  do {\n    if ((bit_mask >> 0x10 & 0xff) == 1) {\n      mask = bit_mask & ~(*ptr_arr)[5] & 0xffff;\n      is_bit_set = mask != 0;\n      if (is_bit_set) {\n        mask = 1;\n      }\n      bit_value = (char)mask;\n      if (!is_bit_set) {\n        bit_value = '\\0';\n      }\n    }\n    else {\n      mask = bit_mask & ~(*ptr_arr)[6] & 0xffff;\n      is_bit_set = mask != 0;\n      if (is_bit_set) {\n        mask = 1;\n      }\n      bit_value = (char)mask;\n      if (!is_bit_set) {\n        bit_value = '\\0';\n      }\n    }\n    if (bit_value == '\\0') {\n      return 0;\n    }\n    if (((*ptr_arr)[5] & 0x400) == 0x400) {\n      **ptr_arr = **ptr_arr | 0x200;\n      (*ptr_arr)[5] = 0xfffffbff;\n      ptr_arr[0x10] = (uint *)0x4;\n      ptr_arr[0xc] = (uint *)0x0;\n      *(undefined *)((int)ptr_arr + 0x3d) = 0x20;\n      *(undefined *)(ptr_arr + 0xf) = 0;\n      return 1;\n    }\n  } while ((bit_check == 0xffffffff) || ((bit_check != 0 && (ptr_offset = get_pointer_value_080015a0(), (uint)(ptr_offset - param_4) <= bit_check))));\n  ptr_arr[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptr_arr + 0x3d) = 0x20;\n  *(undefined *)(ptr_arr + 0xf) = 0;\n  return 3;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_if_bit_is_set_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concatenate_integers_08000fd0",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "CONCAT44": "bitwise_concatenation"
            },
            "code": "uint64_t concatenate_integers_08000fd0(uint32_t first_integer, uint32_t second_integer) {\n    calculate_result();\n    return ((uint64_t)second_integer << 32) | first_integer;\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_flags_and_values_08003d60",
                "param_1": "flag",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "value4",
                "mask1": "0xfffffffe",
                "mask2": "0xfffffffd",
                "mask3": "0xfffffff7",
                "mask4": "0xfffffcff"
            },
            "code": "void set_flags_and_values_08003d60(int flag, uint *values)\n{\n  uint mask1 = 0xfffffffe;\n  uint mask2 = 0xfffffffd;\n  uint mask3 = 0xfffffff7;\n  uint mask4 = 0xfffffcff;\n  uint value1 = *values;\n  uint value2 = values[2] | (flag & mask2);\n  uint value3 = values[1];\n  uint value4 = 0;\n\n  if (flag == DAT_08003e34) {\n    value2 = (values[3] | (flag & mask3)) & mask2;\n    value4 = values[6] | values[5];\n    value4 |= (flag & mask4);\n  }\n\n  *(uint *)(flag + 4) = value4 | (flag & mask4);\n  *(uint *)(flag + 0x18) = value1 | (*(uint *)(flag + 0x18) & 0xffffff8c);\n  *(uint *)(flag + 0x34) = value3;\n  *(uint *)(flag + 0x20) = value2 & mask1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_value_from_pointer_and_shift_08003518",
                "uVar1": "value",
                "PTR_DAT_0800353c": "pointer_data",
                "DAT_08003538": "data",
                "index": "shift_index",
                "shifted_value": "shifted_value"
            },
            "code": "uint get_value_from_pointer_and_shift_08003518(void)\n{\n  uint value = get_value_from_pointer();\n  uint index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint shifted_value = value >> PTR_DAT_0800353c[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_080046ec",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_and_shift_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_byte_in_memory_08001618",
                "param_1": "address",
                "param_2": "value",
                "DAT_08001664": "data_section_ptr",
                "DAT_08001668": "data_section_ptr_2"
            },
            "code": "void set_byte_in_memory_08001618(byte address, uint value) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_08001664 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_08001668 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zero_bits_080091a4",
                "param_1": "input",
                "iVar1": "count"
            },
            "code": "int count_leading_zero_bits_080091a4(uint32_t input) {\n    int count = 0;\n    if ((input & 0xffff0000) == 0) {\n        input <<= 16;\n        count += 16;\n    }\n    if ((input & 0xff000000) == 0) {\n        input <<= 8;\n        count += 8;\n    }\n    if ((input & 0xf0000000) == 0) {\n        input <<= 4;\n        count += 4;\n    }\n    if ((input & 0xc0000000) == 0) {\n        input <<= 2;\n        count += 2;\n    }\n    if (input < 0) {\n        count += 1;\n    }\n    return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_leading_zero_bits_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "hash_and_store_pitch_08004f78",
                "PTR_DAT_080051e0": "pitch_data",
                "PTR_DAT_080051e4": "input_string",
                "PTR_DAT_080051ec": "input_string_copy",
                "PTR_DAT_080051f0": "hash1_input1",
                "PTR_DAT_080051f4": "hash1_output",
                "PTR_DAT_080051f8": "hash2_input1",
                "PTR_DAT_080051fc": "hash2_output",
                "PTR_DAT_08005200": "hash3_input1",
                "PTR_DAT_08005204": "hash3_output",
                "PTR_DAT_08005208": "input_string_start",
                "PTR_DAT_0800520c": "input_string_end",
                "PTR_DAT_08005210": "xor_value",
                "PTR_DAT_08005214": "hash2_input2",
                "PTR_DAT_08005218": "hash3_input2",
                "PTR_DAT_08005220": "parameters",
                "DAT_0800521c": "parameter_values"
            },
            "code": "void hash_and_store_pitch_08004f78() {\n  uint32_t hash1, hash2, hash3, hash4, hash5, hash6;\n  uint32_t input_hash = calculate_input_hash(PTR_DAT_080051e4);\n  uint32_t input_hash_calculated = calculate_hash_08000c10(*PTR_DAT_08005208);\n  uint32_t input_hash_end = calculate_hash_08000c10(*PTR_DAT_0800520c);\n  uint32_t input_hash_reversed = reverseBits_08000418(*(uint32_t*)PTR_DAT_080051e4);\n  uint32_t set_bit_index = find_first_set_bit_08005e40(PTR_DAT_080051ec);\n  uint32_t PTR_DAT_08005210 = *(uint32_t*)PTR_DAT_08005210 ^ 0x80000000;\n  uint32_t decoded_value;\n  if (check_PTR_DAT_080051e4_08000ff4_08000ff4(input_hash, *(uint32_t*)PTR_DAT_080051f4) == 0) {\n    if (isEndOfString_08001030(input_hash_calculated, *(uint32_t*)PTR_DAT_080051f4) != 0) {\n      *(uint32_t*)PTR_DAT_08005204 = input_hash_calculated;\n    }\n    else {\n      if (check_PTR_DAT_080051e4_08000ff4_08000ff4(input_hash_reversed, input_hash_end) == 0) {\n        decoded_value = decode_uint_08001044(input_hash_reversed);\n      }\n      else {\n        decoded_value = input_hash_end;\n      }\n      *(uint32_t*)(*(int*)PTR_DAT_08005220 + 0x34) = decoded_value;\n      *(uint32_t*)(*(int*)PTR_DAT_08005220 + 0x40) = decoded_value;\n    }\n  }\n  else {\n    *(uint32_t*)PTR_DAT_08005204 = input_hash_end;\n  }\n  hash1 = FUNC_08000aa4(*(uint32_t*)PTR_DAT_080051f0, *(uint32_t*)PTR_DAT_080051e4);\n  hash2 = FUNC_08000cb8(*(uint32_t*)PTR_DAT_080051f8, *(uint32_t*)PTR_DAT_080051f4);\n  hash3 = FUNC_08000cb8(*(uint32_t*)PTR_DAT_08005200, *(uint32_t*)PTR_DAT_080051f4);\n  hash4 = FUNC_08000aa8(hash3, *(uint32_t*)PTR_DAT_08005204);\n  hash5 = FUNC_08000aa8(hash4, *(uint32_t*)PTR_DAT_08005218);\n  hash6 = FUNC_08000aa8(hash5, PTR_DAT_08005210);\n  *(uint32_t*)PTR_DAT_080051f4 = hash1;\n  *(uint32_t*)PTR_DAT_080051fc = hash2;\n  *(uint32_t*)PTR_DAT_08005204 = hash6;\n  set_param_value_08001a80(DAT_0800521c, 2, isEndOfString_08001030(*(uint32_t*)PTR_DAT_080051f4, 0));\n  set_param_value_08001a80(DAT_0800521c, 4, isEndOfString_08001030(*(uint32_t*)PTR_DAT_080051f4, 0) == 0);\n  set_param_value_08001a80(DAT_0800521c, 8, isEndOfString_08001030(*(uint32_t*)PTR_DAT_080051f4, 0));\n  set_param_value_08001a80(DAT_0800521c, 16, isEndOfString_08001030(*(uint32_t*)PTR_DAT_080051f4, 0) == 0);\n}\n",
            "called": [
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08004f3c",
                "FUN_08001044",
                "FUN_08000c10",
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08005e40",
                "FUN_08000aa8",
                "FUN_08001030",
                "FUN_08000418",
                "FUN_08000c08",
                "FUN_08004bd8",
                "FUN_08004ae0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "hash_and_store_pitch_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_pointer_value_080015a0",
                "PTR_DAT_080015b0": "PTR_DATA"
            },
            "code": "int get_pointer_value_080015a0(void)\n{\n  int* pointer_to_data = (int*) PTR_DAT_080015b0;\n  return *pointer_to_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08002c2e",
                "FUN_08002ca8",
                "FUN_08001f6c",
                "FUN_08003260",
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08004f2c",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "get_pointer_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      count_down_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = get_pointer_value_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = get_pointer_value_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = get_pointer_value_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = get_pointer_value_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "set_byte_in_memory_0800172a",
                "param_1": "memory_address",
                "param_2": "extracted_bits",
                "param_3": "mask",
                "uVar1": "bits",
                "extract_bits_from_uint_080015fc": "extract_bits_from_uint",
                "apply_mask_0800166c": "apply_mask",
                "set_byte_in_memory_08001618": "set_byte_in_memory_at_address"
            },
            "code": "void set_byte_in_memory_0800172a(char memory_address, uint32_t extracted_bits) {\n    uint32_t bits = extract_bits_from_uint_080015fc();\n    uint32_t masked_bits = apply_mask_0800166c(bits, memory_address, extracted_bits);\n    set_byte_in_memory_0800172a_08001618((int)memory_address, masked_bits);\n    return;\n}",
            "called": [
                "FUN_080015fc",
                "FUN_0800166c",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "validate_input_and_return_080009d4",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "validate_inputs_and_return_08000978": "check_CY_is_zero",
                "!(bool)in_CY": "is_CY_zero",
                "(bool)in_ZR": "is_ZR_nonzero"
            },
            "code": "bool validate_input_and_return_080009d4() \n{\n  bool is_CY_zero = false;\n  bool is_ZR_nonzero = false;\n  \n  is_CY_zero = check_CY_is_zero();\n  is_ZR_nonzero = !check_ZR_is_zero();\n  return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_flags_08005780",
                "DAT_080057dc": "data_pointer_1",
                "DAT_080057e0": "data_pointer_2"
            },
            "code": "void set_bit_and_clear_flags_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 0x01;\n  DAT_080057dc[1] = DAT_080057dc[1] & DAT_080057e0;\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057dc[1] = DAT_080057dc[1] & 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "add_value_to_pointer_08009744",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "ptr",
                "iVar2": "add_result"
            },
            "code": "void add_value_to_pointer_08009744(int *result, int value) {\n    int *ptr = PTR_DAT_08009764;\n    *ptr = 0;\n    int add_result = add_value_to_pointer_08009744_08005728(value);\n    if (add_result == -1 && *ptr != 0) {\n        *result = *ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "add_value_to_pointer_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_parameter_values_08003640",
                "param_1": "param_values",
                "uVar1": "result",
                "perform_nothing_08003696": "perform_nothing"
            },
            "code": "int check_parameter_values_08003640(int *param_values)\\n{\\n  int result;\\n  if (param_values == NULL) {\\n    result = 1;\\n  }\\n  else {\\n    if (*((char *)(param_values + 0x3d)) == \"\\0\") {\\n      *(char *)(param_values + 0xf) = 0;\\n      perform_nothing(param_values);\\n    }\\n    *((char *)(param_values + 0x3d)) = 2;\\n    set_values(*param_values, param_values + 1);\\n    *((char *)(param_values + 0x3d)) = 1;\\n    result = 0;\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_parameter_values_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_buffer_08009980",
                "param_1": "buffer_start",
                "param_2": "buffer_width",
                "param_3": "buffer_height",
                "puVar1": "buffer_pointer",
                "uVar2": "buffer_size",
                "puVar3": "current_position"
            },
            "code": "undefined4 *allocate_buffer_08009980(undefined4 buffer_start, int buffer_width, int buffer_height) {\n    undefined4 *buffer_pointer = (undefined4 *)FUNC_08008af8(buffer_start, buffer_width * buffer_height);\n    if (buffer_pointer == (undefined4 *)0x0) {\n        return (undefined4 *)0x0;\n    }\n    uint buffer_size = (buffer_pointer[-1] & 0xfffffffc) - 4;\n    if (buffer_size < 0x25) {\n        undefined4 *current_position = buffer_pointer;\n        if (0x13 < buffer_size) {\n            *buffer_pointer = 0;\n            buffer_pointer[1] = 0;\n            if (0x1b < buffer_size) {\n                buffer_pointer[2] = 0;\n                buffer_pointer[3] = 0;\n                if (buffer_size == 0x24) {\n                    buffer_pointer[4] = 0;\n                    buffer_pointer[5] = 0;\n                    current_position = buffer_pointer + 6;\n                }\n                else {\n                    current_position = buffer_pointer + 4;\n                }\n                *current_position = 0;\n                current_position[1] = 0;\n                current_position[2] = 0;\n                return buffer_pointer;\n            }\n            current_position = buffer_pointer + 2;\n        }\n        *current_position = 0;\n        current_position[1] = 0;\n        current_position[2] = 0;\n        return buffer_pointer;\n    }\n    fill_buffer_with_value_08005d68(buffer_pointer, 0);\n    return buffer_pointer;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_buffer_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_default_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)find_first_set_bit_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_default_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)find_first_set_bit_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_default_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = is_valid_input_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = validate_inputs_and_return_true_if_any_input_is_invalid_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = is_end_of_input_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)is_valid_input_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_value_from_params_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = validate_inputs_and_return_status_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_value_from_params_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = validate_inputs_and_return_status_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = validate_inputs_and_return_status_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = validate_inputs_and_return_status_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)find_first_set_bit_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)find_byte_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        get_concatenated_values_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = get_concatenated_values_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = validate_inputs_and_return_status_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = convert_to_int_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = validate_input_and_return_null_terminator_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = validate_inputs_and_return_status_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = validate_inputs_and_return_status_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = validate_inputs_and_return_status_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800119c",
                "FUN_08001170",
                "FUN_08008ad4",
                "FUN_08000158",
                "FUN_080096e0",
                "FUN_080097cc",
                "FUN_08005e40",
                "FUN_080079e8",
                "FUN_08009768",
                "FUN_08008af8",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "first_param",
                "param_2": "second_param",
                "PTR_FUN_0800014c": "first_ptr",
                "PTR_DAT_08000148": "second_ptr"
            },
            "code": "typedef unsigned long long undefined8;\n\nundefined8 concatenate_params_08000134(undefined *first_param, undefined *second_param)\n{\n  undefined *PTR_FUN_0800014c = NULL;\n  undefined *PTR_DAT_08000148 = NULL;\n  if (DAT_08000144 != 0) {\n    PTR_FUN_0800014c = PTR_FUN_0800014c;\n    PTR_DAT_08000148 = PTR_DAT_08000148;\n  }\n  return CONCAT44(PTR_DAT_08000148, PTR_FUN_0800014c);\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_params_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "calculate_pitch_and_store_08005704",
                "add_byte_to_int_and_store_result_0800157c": "add_byte_to_integer_and_store_result",
                "hash_and_store_pitch_080017b4": "hash_pitch_and_store_result"
            },
            "code": "void calculate_pitch_and_store_08005704()\n{\n  add_byte_to_int_and_store_result_0800157c();\n  hash_pitch_and_store_result();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "calculate_pitch_and_store_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "reverseBits_08000418",
                "param_1": "n",
                "param_2": "",
                "param_3": "",
                "param_4": "",
                "uVar1": "highBits",
                "uVar2": "rev",
                "uVar3": "result",
                "uVar4": "shiftedBits",
                "uVar5": "temp",
                "uVar7": "leadingZeros",
                "iVar6": "numShifts",
                "in_r12": "",
                "bVar8": "isZeroShift",
                "bVar9": "isAllOnes",
                "bVar10": "isNegativeShift"
            },
            "code": "uint64_t reverseBits_08000418(uint32_t n) {\n    uint32_t rev = 0;\n    for (int i = 0; i < 32; i++) {\n        rev = (rev << 1) | (n & 1);\n        n >>= 1;\n    }\n    return (uint64_t)rev << 32 | n;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "reverseBits_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_pointer_08002ca8",
                "param_1": "pointer_array",
                "param_2": "pointer_array_size",
                "param_3": "offset",
                "iVar1": "pointer_value"
            },
            "code": "int check_pointer_08002ca8(int *pointer_array, uint pointer_array_size, int offset) {\n  int pointer_value;\n  while (true) {\n    if ((*(uint *)(pointer_array[0] + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(pointer_array[0] + 0x14) & 0x10) == 0x10) {\n      break;\n    }\n    if ((pointer_array_size == 0) || (pointer_value = get_pointer_value(), pointer_array_size < (uint)(pointer_value - offset))) {\n      pointer_array[0x10] |= 0x20;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n      *(undefined *)(pointer_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(pointer_array[0] + 0x14) = 0xffffffef;\n  pointer_array[0x10] = 0;\n  pointer_array[0xc] = 0;\n  *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n  *(undefined *)(pointer_array + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_pointer_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "set_permissions_and_flags_08003a94",
                "param_1": "process_info",
                "param_2": "permissions",
                "uVar1": "result",
                "uVar2": "perm_value"
            },
            "code": "int set_permissions_and_flags_08003a94(int *process_info, uint *permissions) {\n  int result;\n  if (*(char *)(process_info + 15) == 1) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(process_info + 15) = 1;\n    *(undefined *)((int)process_info + 61) = 2;\n    *(uint *)(*process_info + 8) = *(uint *)(*process_info + 8) & 0xffff0088;\n    uint perm_value = *permissions;\n    if (perm_value == 64) {\n      set_bits_and_shift_left(*process_info, permissions[1], permissions[3]);\n      set_permissions(*process_info, 64);\n    }\n    else if (perm_value < 65) {\n      if (perm_value == 16) {\n        set_permissions(*process_info, 16);\n      }\n      else if (perm_value < 17) {\n        if (perm_value == 0) {\n          set_permissions(*process_info, 0);\n        }\n      }\n      else if (perm_value == 32) {\n        set_permissions(*process_info, 32);\n      }\n      else if (perm_value == 48) {\n        set_permissions(*process_info, 48);\n      }\n    }\n    else if (perm_value == 112) {\n      set_param(*process_info, permissions[2], permissions[1], permissions[3]);\n      *(uint *)(*process_info + 8) = *(uint *)(*process_info + 8) & 0xffffff88 | 0x77;\n    }\n    else if (perm_value < 113) {\n      if (perm_value == 80) {\n        set_bits_and_shift_left(*process_info, permissions[1], permissions[3]);\n        set_permissions(*process_info, 80);\n      }\n      else if (perm_value == 96) {\n        update_flags(*process_info, permissions[1], permissions[3]);\n        set_permissions(*process_info, 96);\n      }\n    }\n    else if (perm_value == 4096) {\n      *(uint *)(*process_info + 8) = *(uint *)(*process_info + 8) & 0xfffffff8;\n    }\n    else if (perm_value == 8192) {\n      set_param(*process_info, permissions[2], permissions[1], permissions[3]);\n      *(uint *)(*process_info + 8) = *(uint *)(*process_info + 8) | 0x4000;\n    }\n    *(undefined *)((int)process_info + 61) = 1;\n    *(undefined *)(process_info + 15) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080041a8",
                "FUN_080040a0",
                "FUN_08004104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_permissions_and_flags_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_permissions_0800416a",
                "param_1": "file_descriptor",
                "param_2": "permissions",
                "*(uint *)(param_1 + 8)": "file_status_pointer",
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": "modified_status"
            },
            "code": "void set_permissions_0800416a(int file_descriptor, unsigned short permissions) {\n  unsigned int* file_status_pointer = (unsigned int*)(file_descriptor + 8);\n  unsigned int file_status = *file_status_pointer;\n  unsigned int modified_status = (file_status & 0xffffff8f) | (unsigned int)(permissions | 7);\n  *file_status_pointer = modified_status;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_flags_and_decode_080055f4",
                "local_18": "param",
                "local_14": "arg1",
                "local_c": "arg2",
                "DAT_0800566c": "ptr",
                "DAT_08005670": "data"
            },
            "code": "void set_flags_and_decode_080055f4(void)\n{\n  uint32_t flags = 0;\n  uint32_t* DAT_0800566c = (uint32_t*)DAT_0800566c;\n  flags |= 0x20;\n  flags |= 4;\n  flags |= 8;\n  *(DAT_0800566c + 6) = flags;\n  set_param_value_08001a80(DAT_08005670, 30, 0, (flags & 8));\n  uint32_t param = 30;\n  uint32_t arg1 = 1;\n  uint32_t arg2 = 2;\n  decode_flags_080017c4(DAT_08005670, &param);\n}\n",
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_and_decode_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = validate_input_and_return_null_terminator_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08005d0c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_and_decode_data_080053b0",
                "iVar1": "result",
                "local_58": "param_1",
                "local_54": "param_2",
                "local_50": "param_3",
                "local_4c": "param_4",
                "local_48": "param_5",
                "local_44": "param_6",
                "local_40": "param_7",
                "local_3c": "param_8",
                "local_38": "param_9",
                "local_34": "param_10",
                "local_30": "param_11",
                "local_2c": "param_12",
                "local_28": "param_13",
                "local_24": "param_14",
                "local_20": "param_15",
                "local_1c": "param_16",
                "local_18": "data",
                "PTR_DAT_080054f4": "data_pointer",
                "DAT_080054f8": "0x12345678",
                "PTR_s____src_main_c_080054fc": "source_file_name"
            },
            "code": "void initialize_and_decode_data_080053b0(void)\n{\n  int check_result;\n  int permissions_result;\n  int parameter_result;\n  int param_flag_result;\n  int flags_result;\n  int decode_flags_result;\n  \n  uint32_t data[7];\n  data[0] = 0x708;\n  data[1] = 0;\n  data[2] = 100;\n  data[3] = 0;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  \n  *(uint32_t *)PTR_DAT_080054f4 = data[0];\n  *(uint32_t *)(PTR_DAT_080054f4 + 4) = 0x708;\n  *(uint32_t *)(PTR_DAT_080054f4 + 8) = 0;\n  *(uint32_t *)(PTR_DAT_080054f4 + 12) = 100;\n  *(uint32_t *)(PTR_DAT_080054f4 + 16) = 0;\n  *(uint32_t *)(PTR_DAT_080054f4 + 20) = 0;\n  *(uint32_t *)(PTR_DAT_080054f4 + 24) = 0;\n  \n  check_result = check_values_set(PTR_DAT_080054f4);\n  if (check_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 399);\n  }\n  \n  data[0] = 0x1000;\n  permissions_result = set_permissions_and_flags(PTR_DAT_080054f4, data);\n  if (permissions_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 404);\n  }\n  \n  parameter_result = check_parameter_values(PTR_DAT_080054f4);\n  if (parameter_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 408);\n  }\n  \n  data[0] = 0;\n  data[1] = 0;\n  param_flag_result = set_param_and_flag(PTR_DAT_080054f4, data);\n  if (param_flag_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 415);\n  }\n  \n  data[0] = 0x60;\n  flags_result = update_flags_and_values(PTR_DAT_080054f4, data, 0);\n  if (flags_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 427);\n  }\n  \n  flags_result = update_flags_and_values(PTR_DAT_080054f4, data, 12);\n  if (flags_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 432);\n  }\n  \n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  data[3] = 0;\n  data[4] = 0;\n  data[5] = 0x2000;\n  data[6] = 0;\n  param_flag_result = set_param(PTR_DAT_080054f4, data);\n  if (param_flag_result != 0) {\n    infinite_loop(\"s____src_main_c_080054fc\", 442);\n  }\n  \n  decode_flags_result = decode_flags(PTR_DAT_080054f4);\n  \n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_08003a94",
                "FUN_08005680",
                "FUN_080042de",
                "FUN_080035a4",
                "FUN_08003908",
                "FUN_08003640",
                "FUN_0800422e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_and_decode_data_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "extract_bits_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp4",
                "in_r12": "mask",
                "uVar1": "temp5",
                "uVar2": "shift",
                "uVar3": "value",
                "bVar4": "check1",
                "check2": "check2",
                "temp1": "temp1",
                "temp2": "temp2",
                "temp3": "temp3",
                "temp4": "temp4",
                "mask": "mask",
                "shift": "shift",
                "value": "value"
            },
            "code": "ulonglong extract_bits_0800088a(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1, temp2, temp3, temp4;\n  bool check1, check2;\n  \n  temp2 = input2;\n  temp1 = input1;\n  temp3 = input3;\n  temp4 = input4;\n  \n  uint mask = 0x80000000;\n  \n  uint shift = 0x14;\n  uint value = input4 >> shift;\n  \n  if (input3 != mask || value != mask)\n  {\n    if (input3 == mask)\n    {\n      check1 = ((input1 | (input2 << 0xc)) == 0);\n      if (check1 && value != mask)\n      {\n        return (ulonglong)(((input2 ^ input4) & mask) | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (value == mask)\n    {\n      temp1 = input3;\n      temp2 = input4;\n      if ((input3 | (input4 << 0xc)) == 0)\n      {\n        return (ulonglong)(((input2 ^ input4) & mask)) << 0x20;\n      }\n    }\n    else\n    {\n      check1 = ((input1 | (input2 << 1)) == 0);\n      if (!check1)\n      {\n        check2 = ((input3 | (input4 << 1)) == 0);\n        if (!check2)\n        {\n          if (input3 == 0)\n          {\n            uint temp5 = input2 & mask;\n            do\n            {\n              uint temp6 = input1 & mask;\n              input1 = input1 << 1;\n              input2 = (input2 * 2) + (uint)(temp6 != 0);\n            } while ((input2 & 0x100000) == 0);\n            input2 = input2 | temp5;\n            if (value != 0)\n            {\n              return CONCAT44(input2, input1);\n            }\n          }\n          do\n          {\n            temp4 = input3 & mask;\n            input3 = input3 << 1;\n            input4 = (input4 * 2) + (uint)(temp4 != 0);\n          } while ((input4 & 0x100000) == 0);\n          return CONCAT44(input2, input1);\n        }\n        if ((input1 | (input2 << 1)) != 0)\n        {\n          return (ulonglong)(((input2 ^ input4) & mask) | 0x7ff00000) << 0x20;\n        }\n        if ((input3 | (input4 << 1)) != 0)\n        {\n          return (ulonglong)(((input2 ^ input4) & mask)) << 0x20;\n        }\n      }\n    }\n  }\n  return CONCAT44(temp2, temp1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "extract_bits_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "is_valid_address_080016d0",
                "param_1": "address",
                "bVar1": "valid_address",
                "DAT_08001710": "ptr_address",
                "set_byte_in_memory_08001618": "set_byte_in_memory"
            },
            "code": "bool is_valid_address_080016d0(unsigned int address) {\n  bool valid_address = address < 0x1000000;\n  if (valid_address) {\n    int* DAT_08001710 = (int*)(address - 1);\n    set_byte_in_memory_08001618(DAT_08001710, 0xffffffff, 0xf);\n    *(DAT_08001710 + 1) = 0;\n    *DAT_08001710 = 7;\n  }\n  return !valid_address;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "is_valid_address_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "process_input_08001ccc",
                "param_1": "input_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "data_1",
                "iVar2": "ptr_value_1",
                "cVar3": "result",
                "uVar4": "mask",
                "iVar5": "status",
                "uVar6": "status_2",
                "puVar7": "data_ptr",
                "bVar8": "is_mask_zero"
            },
            "code": "uint32_t process_input_08001ccc(uint32_t **input_ptr, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\n{\n  uint32_t ptr_value_1 = get_pointer_value();\n  uint32_t data_1 = 0x08001f64;\n\n  if (*(char *)((int)input_ptr + 0x3d) == ' ')\n  {\n    do\n    {\n      uint32_t data_2 = data_1 >> 0x10 & 0xff;\n      uint32_t mask = data_1 & ~(*input_ptr)[5] & 0xffff;\n      bool is_mask_zero = mask == 0;\n\n      if (is_mask_zero)\n      {\n        mask = 1;\n      }\n      char result = (char)mask;\n\n      if (!is_mask_zero)\n      {\n        result = '\\0';\n      }\n\n      if (result != '\\x01')\n      {\n        uint32_t ptr_value_2 = 0;\n        goto LAB_08001d9c;\n      }\n\n      uint32_t ptr_value_2 = get_pointer_value();\n    }\n    while ((ptr_value_2 - ptr_value_1) < 0x1a);\n\n    input_ptr[0xc] = (uint32_t *)0x0;\n    *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)input_ptr + 0x3e) = 0;\n    *(undefined *)(input_ptr + 0xf) = 0;\n    uint32_t status = 3;\n\nLAB_08001d9c:\n    if (ptr_value_2 == 0)\n    {\n      if (*(char *)(input_ptr + 0xf) == '\\x01')\n      {\n        status = 2;\n      }\n      else\n      {\n        *(undefined *)(input_ptr + 0xf) = 1;\n\n        if ((**input_ptr & 1) != 1)\n        {\n          **input_ptr = **input_ptr | 1;\n        }\n\n        **input_ptr = **input_ptr & 0xfffff7ff;\n        *(undefined *)((int)input_ptr + 0x3d) = 0x21;\n        *(undefined *)((int)input_ptr + 0x3e) = 0x40;\n        input_ptr[0x10] = (uint32_t *)0x0;\n        input_ptr[9] = param_5;\n        *(uint16_t *)((int)input_ptr + 0x2a) = param_6;\n        input_ptr[0xb] = 0x08001f68;\n        *(uint16_t *)(input_ptr + 10) = *(uint16_t *)((int)input_ptr + 0x2a);\n        uint32_t status = check_and_update_pointer(input_ptr, param_2, param_3, param_4, param_7, ptr_value_1);\n\n        if (status == 0)\n        {\n          while (*(uint16_t *)(input_ptr + 10) != 0)\n          {\n            uint32_t result = check_and_update(input_ptr, param_7, ptr_value_1);\n\n            if (result != 0)\n            {\n              if (input_ptr[0x10] == (uint32_t *)0x4)\n              {\n                **input_ptr = **input_ptr | 0x200;\n                return 1;\n              }\n\n              return 3;\n            }\n\n            uint32_t *data_ptr = input_ptr[9];\n            input_ptr[9] = (uint32_t *)((int)data_ptr + 1);\n            (*input_ptr)[4] = (uint32_t)*(uint8_t *)data_ptr;\n            *(uint16_t *)(input_ptr + 10) = *(uint16_t *)(input_ptr + 10) + -1;\n            *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) + -1;\n\n            if ((((*input_ptr)[5] & 4) == 4) && (*(uint16_t *)(input_ptr + 10) != 0))\n            {\n              uint32_t *data_ptr_2 = input_ptr[9];\n              input_ptr[9] = (uint32_t *)((int)data_ptr_2 + 1);\n              (*input_ptr)[4] = (uint32_t)*(uint8_t *)data_ptr_2;\n              *(uint16_t *)(input_ptr + 10) = *(uint16_t *)(input_ptr + 10) + -1;\n              *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) + -1;\n            }\n          }\n\n          uint32_t status_2 = check_and_update_flag(input_ptr, param_7, ptr_value_1);\n\n          if (status_2 == 0)\n          {\n            **input_ptr = **input_ptr | 0x200;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n            *(undefined *)((int)input_ptr + 0x3e) = 0;\n            *(undefined *)(input_ptr + 0xf) = 0;\n            uint32_t status = 0;\n          }\n          else if (input_ptr[0x10] == (uint32_t *)0x4)\n          {\n            **input_ptr = **input_ptr | 0x200;\n            uint32_t status = 1;\n          }\n          else\n          {\n            uint32_t status = 3;\n          }\n        }\n        else if (input_ptr[0x10] == (uint32_t *)0x4)\n        {\n          *(undefined *)(input_ptr + 0xf) = 0;\n          uint32_t status = 1;\n        }\n        else\n        {\n          *(undefined *)(input_ptr + 0xf) = 0;\n          uint32_t status = 3;\n        }\n      }\n    }\n    else\n    {\n      uint32_t status = 2;\n    }\n\n    return status;\n  }\n  else\n  {\n    return 2;\n  }\n}\n",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "process_input_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "add_byte_to_int_and_store_result_0800157c",
                "PTR_DAT_0800159c": "result_ptr",
                "PTR_DAT_08001598": "byte_ptr",
                "int": "int_ptr",
                "byte": "byte_as_uint"
            },
            "code": "void add_byte_to_int_and_store_result_0800157c(void)\n{\n  uint* PTR_DAT_0800159c = (uint*)PTR_DAT_0800159c;\n  int* int_ptr = (int*)PTR_DAT_0800159c;\n  byte* PTR_DAT_08001598 = (byte*)PTR_DAT_08001598;\n  uint byte_as_uint = (uint)(*PTR_DAT_08001598);\n  *PTR_DAT_0800159c = *int_ptr + byte_as_uint;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "add_byte_to_int_and_store_result_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_value_from_pointer_array_08005d14",
                "PTR_PTR_DAT_08005d1c": "PTR_PTR_DAT_08005d1c"
            },
            "code": "int get_value_from_pointer_array_08005d14() {\n    int *ptr_to_ptr = (int *)PTR_PTR_DAT_08005d1c;\n    int value = *ptr_to_ptr;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_array_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "update_bits_of_uint_080015b4",
                "param_1": "value",
                "PTR_DAT_080015f8": "ptr",
                "DAT_080015f8": "constant",
                "mask": "mask",
                "shifted_value": "shifted_value",
                "constant": "constant"
            },
            "code": "void update_bits_of_uint_080015b4(uint value) {\n    uint* PTR_DAT_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n    uint mask = 0xf8ff;\n    uint shifted_value = (value & 7) << 8;\n    uint DAT_080015f8 = 0x5fa0000;\n    *PTR_DAT_080015f8 = (*PTR_DAT_080015f8 & mask) | shifted_value | DAT_080015f8;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "update_bits_of_uint_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data",
                "*param_1": "*data",
                "PTR_08003c4a": "do_nothing_08003c4a",
                "PTR_08003c6e": "do_nothing_08003c6e",
                "PTR_08003c5c": "do_nothing_08003c5c",
                "PTR_08004f78": "hash_and_store_pitch_08004f78",
                "PTR_08004378": "do_nothing_08004378",
                "PTR_08003c80": "do_nothing_08003c80",
                "PTR_08004366": "do_nothing_08004366",
                "uint": "unsigned int",
                "flags": "data_flags",
                "control": "data_control",
                "options": "data_options",
                "status": "data_status"
            },
            "code": "void process_data_080036f8(int *data)\n{\n    uint *flags = (uint *)(*data + 0xc);\n    uint *control = (uint *)(*data + 0x10);\n    uint *options = (uint *)(*data + 0x18);\n    uint *status = (uint *)(*data + 0x1c);\n\n    if ((*flags & 2) && (*control & 2)) {\n        *control = 0xfffffffd;\n        data[7] = 1;\n        if ((*options & 3) == 0) {\n            PTR_08003c4a(data);\n            PTR_08003c6e(data);\n        }\n        else {\n            PTR_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*flags & 4) && (*control & 4)) {\n        *control = 0xfffffffb;\n        data[7] = 2;\n        if ((*options & 0x300) == 0) {\n            PTR_08003c4a(data);\n            PTR_08003c6e(data);\n        }\n        else {\n            PTR_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*flags & 8) && (*control & 8)) {\n        *control = 0xfffffff7;\n        data[7] = 4;\n        if ((*status & 3) == 0) {\n            PTR_08003c4a(data);\n            PTR_08003c6e(data);\n        }\n        else {\n            PTR_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*flags & 0x10) && (*control & 0x10)) {\n        *control = 0xffffffef;\n        data[7] = 8;\n        if ((*status & 0x300) == 0) {\n            PTR_08003c4a(data);\n            PTR_08003c6e(data);\n        }\n        else {\n            PTR_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*flags & 1) && (*control & 1)) {\n        *control = 0xfffffffe;\n        PTR_08004f78(data);\n    }\n\n    if ((*flags & 0x80) && (*control & 0x80)) {\n        *control = 0xffffff7f;\n        PTR_08004378(data);\n    }\n\n    if ((*flags & 0x40) && (*control & 0x40)) {\n        *control = 0xffffffbf;\n        PTR_08003c80(data);\n    }\n\n    if ((*flags & 0x20) && (*control & 0x20)) {\n        *control = 0xffffffdf;\n        PTR_08004366(data);\n    }\n}",
            "called": [
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_data_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_param_080041a8",
                "param_1": "param_buffer",
                "param_2": "param_value_1",
                "param_3": "param_value_2",
                "param_4": "param_offset",
                "PTR_": "param_",
                "DAT_": "param_"
            },
            "code": "void set_param_080041a8(uint8_t *PTR_buffer, uint32_t PTR_value_1, uint32_t PTR_value_2, uint8_t PTR_offset) {\n    uint32_t *PTR_ptr = (uint32_t *)(PTR_buffer + 8);\n    *PTR_ptr = (PTR_value_1 | (PTR_offset << 8) | PTR_value_2 | (*PTR_ptr & 0xffff00ff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_param_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08005e9c",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_default_value_08008ad4",
                "puVar1": "default_value"
            },
            "code": "undefined * get_default_value_08008ad4(void)\n{\n  undefined *default_value;\n  default_value = *(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (*(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34) == (undefined *)0x0) {\n    default_value = PTR_DAT_08008aec;\n  }\n  return default_value + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_default_value_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "validate_input_and_return_null_terminator_080009e8",
                "in_CY": "input_char"
            },
            "code": "bool validate_input_and_return_null_terminator_080009e8(void)\\n{\\n  char input_char;\\n  validate_inputs_and_return_08000978();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_null_terminator_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674(void)\n{\n  while(true){\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_buffer_size_08009630",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "output_param_1",
                "param_6": "output_param_2",
                "iVar1": "buffer",
                "uVar2": "buffer_size",
                "iVar3": "trailing_zeros",
                "iVar4": "buffer_size",
                "uVar5": "shifted_value",
                "uVar6": "shift_amount",
                "uVar7": "leading_zeros",
                "local_20": "local_input_1",
                "local_1c": "local_input_4"
            },
            "code": "int calculate_buffer_size_08009630(undefined4 input_param_1, undefined4 input_param_2, uint32_t input_param_3, uint32_t input_param_4, int *output_param_1, int *output_param_2)\n{\n    int buffer = allocate_or_get_buffer_080090c0(input_param_1, 1);\n    uint32_t local_1c = input_param_4 & 0xfffff;\n    uint32_t shift_amount = (input_param_4 << 1) >> 0x15;\n    if (shift_amount != 0) {\n        local_1c |= 0x100000;\n    }\n    if (input_param_3 == 0) {\n        int trailing_zeros = count_trailing_zeros_080091e4(&local_1c);\n        int buffer_size = trailing_zeros + 0x20;\n        *(undefined4 *)(buffer + 0x10) = 1;\n        *(uint32_t *)(buffer + 0x14) = local_1c;\n    }\n    else {\n        uint32_t local_20 = input_param_3;\n        int trailing_zeros = count_trailing_zeros_080091e4(&local_20);\n        if (trailing_zeros == 0) {\n            *(uint32_t *)(buffer + 0x14) = local_20;\n        }\n        else {\n            uint32_t shifted_value = local_1c << (0x20 - trailing_zeros & 0xff);\n            local_1c = local_1c >> (trailing_zeros & 0xff);\n            *(uint32_t *)(buffer + 0x14) = shifted_value | local_20;\n        }\n        int buffer_size = local_1c == 0 ? 1 : 2;\n        *(uint32_t *)(buffer + 0x18) = local_1c;\n        *(int *)(buffer + 0x10) = buffer_size;\n    }\n    if (shift_amount == 0) {\n        *output_param_1 = buffer_size - 0x432;\n        uint64_t leading_zeros = count_leading_zero_bits_080091a4(*(undefined4 *)(buffer + buffer_size * 4 + 0x10));\n        *output_param_2 = (int)(leading_zeros >> 0x20) * 0x20 - (int)leading_zeros;\n        return buffer;\n    }\n    *output_param_1 = (shift_amount - 0x433) + buffer_size;\n    *output_param_2 = 0x35 - buffer_size;\n    return buffer;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_buffer_size_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "update_flags_08004104",
                "param_1": "flags_ptr",
                "param_2": "new_flag_value",
                "param_3": "data_ptr",
                "*(uint *)(param_1 + 0x20)": "flags",
                "*(uint *)(param_1 + 0x18)": "data",
                "0xffffffef": "0b11101111",
                "0xffff0fff": "0b11111111111100001111",
                "0xffffff5f": "0b11111111111111010000"
            },
            "code": "void update_flags_08004104(int flags_ptr, int new_flag_value, int data_ptr)\n{\n    int* flags = (int*)(flags_ptr + 0x20);\n    int* data = (int*)(data_ptr + 0x18);\n    *flags = (*flags) & 0xffffffef;\n    *data = (new_flag_value << 0xc) | (*data & 0xffff0fff);\n    *flags = (new_flag_value << 4) | (*flags & 0xffffff5f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_flags_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "check_input_string_08000ff4_08000ff4",
                "in_CY": "input_char"
            },
            "code": "bool check_input_string_08000ff4_08000ff4(void)\n{\n  char input_char;\n  concatenate_integers_08000fd0();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "check_input_string_08000ff4_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "process_data_wrapper_08005714",
                "PTR_DAT_08005724": "PTR_DATA"
            },
            "code": "void process_data_wrapper_08005714(void)\n{\n  process_data(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "process_data_wrapper_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "address",
                "iVar1": "bit_index",
                "puVar2": "word_ptr",
                "iVar3": "leading_zero_bits",
                "uVar4": "word"
            },
            "code": "int find_first_set_bit_08005e40(uint32_t address) {\n  int bit_index = -(address & 3);\n  uint32_t word = *(uint32_t *)(address & 0xfffffffc);\n  if ((address & 3) != 0) {\n    word |= 0xffffffffU >> ((bit_index + 4U & 0x1f) << 3);\n  }\n  while ((word & 0x80808080) == 0) {\n    word = *(uint32_t *)((address += 4) & 0xfffffffc);\n    bit_index += 4;\n  }\n  int leading_zero_bits = __builtin_clz(word & -word);\n  return bit_index + ((31 - leading_zero_bits) >> 3);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "function_pointer",
                "iVar2": "i",
                "ppcVar3": "function_array_pointer",
                "iVar4": "num_functions"
            },
            "code": "void execute_functions_08005d20(void)\n{\n  undefined *function_pointer;\n  int num_functions, i;\n  code **function_array_pointer;\n  num_functions = (int)PTR_FUNCTION_ARRAY_END - (int)PTR_FUNCTION_ARRAY_START >> 2;\n  if (num_functions != 0) {\n    i = 0;\n    function_array_pointer = (code **)PTR_FUNCTION_ARRAY_START;\n    do {\n      i = i + 1;\n      (**function_array_pointer)();\n      function_array_pointer = function_array_pointer + 1;\n    } while (num_functions != i);\n  }\n  function_array_pointer = (code **)PTR_SECOND_FUNCTION_ARRAY_START;\n  function_pointer = PTR_SECOND_FUNCTION_ARRAY_END;\n  do_nothing_function();\n  num_functions = (int)function_pointer - (int)function_array_pointer >> 2;\n  if (num_functions != 0) {\n    i = 0;\n    do {\n      i = i + 1;\n      (**function_array_pointer)();\n      function_array_pointer = function_array_pointer + 1;\n    } while (num_functions != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_080078a0",
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned int"
            },
            "code": "void set_param_value_08001a80(int base_address, unsigned short value, char is_shifted) {\n    if (is_shifted == 0) {\n        *(unsigned int *)(base_address + 0x10) = (unsigned int)value << 0x10;\n    }\n    else {\n        *(unsigned int *)(base_address + 0x10) = (unsigned int)value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_value_08005838",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "difference",
                "uVar2": "temp1",
                "uVar3": "concatenated_value",
                "uVar4": "result1",
                "uVar5": "result2",
                "uVar6": "result3",
                "concat_var": "concatenated_variables",
                "unsigned_f_param": "unsigned_first_param",
                "unsigned_s_param": "unsigned_second_param"
            },
            "code": "uint calculate_value_08005838(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  int difference;\n  undefined4 temp1;\n  uint result1;\n  uint result2;\n  uint result3;\n  undefined8 concat_var;\n  concat_var = CONCAT44(DAT_080059bc, DAT_080059b8);\n  uint unsigned_f_param = first_param & 0x7fffffff;\n  uint unsigned_s_param = second_param & 0x7fffffff;\n  if ((DAT_080059e8 < (unsigned_f_param | (-third_param | third_param) >> 0x1f)) || (DAT_080059e8 < (unsigned_s_param | (-fourth_param | fourth_param) >> 0x1f))) {\n    result1 = FUNC_0800015c(third_param, fourth_param, first_param, second_param);\n    return result1;\n  }\n  if ((fourth_param + 0xc0100000 | third_param) == 0) {\n    result1 = FUNC_080059f0();\n    return result1;\n  }\n  uint uVar3 = (int)fourth_param >> 0x1e & 2U | second_param >> 0x1f;\n  if ((unsigned_f_param | first_param) == 0) {\n    if (uVar3 == 2) {\n      return DAT_080059b0;\n    }\n    result1 = DAT_080059a0;\n    if (uVar3 != 3) {\n      return first_param;\n    }\n  }\n  else {\n    if ((unsigned_f_param | third_param) != 0) {\n      if (unsigned_f_param == DAT_080059e8) {\n        if (unsigned_s_param == unsigned_f_param) {\n          if (uVar3 == 2) {\n            return DAT_080059e0;\n          }\n          if (uVar3 == 3) {\n            return DAT_080059d8;\n          }\n          if (uVar3 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (uVar3 == 2) {\n          return DAT_080059b0;\n        }\n        if (uVar3 == 3) {\n          return DAT_080059a0;\n        }\n        if (uVar3 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (unsigned_s_param != DAT_080059e8) {\n        difference = (int)(unsigned_s_param - unsigned_f_param) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)fourth_param < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n            concat_var = 0;\n          }\n          else {\n            FUNC_0800071c(first_param, second_param, third_param, fourth_param, fourth_param);\n            do_nothing_08005d0c();\n            concat_var = FUNC_080059f0();\n          }\n        }\n        temp1 = (undefined4)((ulonglong)concat_var >> 0x20);\n        result1 = (uint)concat_var;\n        if (uVar3 == 1) {\n          return result1;\n        }\n        if (uVar3 == 2) {\n          concat_var = FUNC_08000158(result1, temp1, DAT_080059a8, DAT_080059ac);\n          result1 = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)concat_var, (int)((ulonglong)concat_var >> 0x20));\n          return result1;\n        }\n        if (uVar3 == 0) {\n          return result1;\n        }\n        concat_var = FUNC_08000158(result1, temp1, DAT_080059a8, DAT_080059ac);\n        result1 = FUNC_08000158((int)concat_var, (int)((ulonglong)concat_var >> 0x20), DAT_080059b0, DAT_080059b4);\n        return result1;\n      }\n    }\n    result1 = DAT_080059c0;\n    if (-1 < (int)second_param) {\n      result1 = DAT_080059b8;\n    }\n  }\n  return result1;\n}",
            "called": [
                "FUN_08000158",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_080059f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_value_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080090b0": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "check_trigger_system_interrupt_08004e74",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "PTR_DAT",
                "trigger_system_interrupt_08004e6c": "trigger_system_interrupt"
            },
            "code": "int check_trigger_system_interrupt_08004e74(int param)\n{\n  int is_ptr_dat_zero = *(int *)PTR_DAT_08004ea0_08004ea0;\n  int result;\n  if (is_ptr_dat_zero == 0) {\n    result = trigger_system_interrupt_08004e6c(1, param, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "check_trigger_system_interrupt_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_value_from_params_080096e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "param4",
                "iVar1": "max_value",
                "iVar2": "offset",
                "uVar3": "abs_param2",
                "uVar4": "combined_params"
            },
            "code": "uint32_t calculate_value_from_params_080096e0(uint32_t param1, uint32_t param2, int* result, uint32_t param4) {\n  int max_value = MAX_VALUE;\n  uint64_t combined_params = CONCAT64(param2, param1);\n  int offset = 0;\n  uint32_t abs_param2 = param2 & 0x7fffffff;\n  *result = 0;\n  if (abs_param2 <= max_value && (abs_param2 | param1) != 0) {\n    if (abs_param2 < 0x100000) {\n      uint64_t calculated_value = FUNC_080004c8(param1, param2, 0, DAT_0800973c, param4);\n      offset = -54;\n      abs_param2 = (uint32_t)(calculated_value >> 32) & 0x7fffffff;\n    }\n    param1 = (uint32_t)combined_params;\n    param2 = (uint32_t)(combined_params >> 32) & 0x800fffff | 0x3fe00000;\n    *result = ((int)abs_param2 >> 20) - 1022 + offset;\n  }\n  return CONCAT64(param2, param1);\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_value_from_params_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "extract_value_from_array_0800910c",
                "param_1": "array_address",
                "param_2": "output_pointer",
                "iVar1": "array_base_address",
                "index": "index"
            },
            "code": "void extract_value_from_array_0800910c(int array_address, undefined4 *output_pointer) {\n  int array_base_address = *(int *)(array_address + 0x4c);\n  if (output_pointer != (undefined4 *)0x0) {\n    int index = output_pointer[1];\n    *output_pointer = *(undefined4 *)(array_base_address + index * 4);\n    *(undefined4 **)(array_base_address + index * 4) = output_pointer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "extract_value_from_array_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "process_data_and_set_flag_if_four_080052a0",
                "iVar2": "result",
                "uVar3": "value",
                "lVar1": "product",
                "local_44": "arg1",
                "local_40": "arg2",
                "local_3c": "arg3",
                "local_38": "arg4",
                "local_34": "arg5",
                "local_30": "count",
                "local_2c": "limit",
                "local_28": "zero",
                "local_20": "one",
                "local_14": "two",
                "local_10": "sixteen",
                "local_c": "eighteen"
            },
            "code": "void process_data_and_set_flag_if_four_080052a0() {\n  longlong product;\n  int result;\n  ulonglong value;\n  undefined4 count = 1;\n  undefined4 limit = 0x10000;\n  undefined4 zero = 0;\n  undefined4 one = 1;\n  undefined4 two = 2;\n  undefined4 sixteen = 0x10000;\n  undefined4 eighteen = 0x1c0000;\n  result = initialize(&count);\n  if (result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005340,0x151);\n  }\n  undefined4 arg1 = 0xf;\n  undefined4 arg2 = 2;\n  undefined4 arg3 = 0x80;\n  undefined4 arg4 = 0;\n  undefined4 arg5 = 0;\n  result = process_data(&arg1, 2);\n  if (result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005340,0x15e);\n  }\n  value = get_value_from_pointer();\n  product = (ulonglong)DAT_08005344 * (value & 0xffffffff);\n  is_address_valid((uint)((ulonglong)product >> 0x26),(int)(value >> 0x20),(int)product);\n  set_flag_if_four(4);\n  set_byte_in_memory(0xffffffff,0,0);\n  return;\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08003504",
                "FUN_08001762",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08002d98",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "process_data_and_set_flag_if_four_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "param_3": "num_words",
                "param_4": "seed",
                "puVar1": "new_buffer",
                "uVar2": "temp",
                "iVar3": "num_buffer_words",
                "puVar4": "words",
                "iVar5": "buffer_address"
            },
            "code": "undefined4* calculate_hash_08009120(int buffer_size, undefined4* buffer, int num_words, uint seed)\n{\n    undefined4* new_buffer;\n    uint carry = 0;\n    uint temp;\n    int i;\n    uint* words = buffer + 5;\n    int num_buffer_words = buffer[4];\n    for (i = 0; i < num_buffer_words; i++) {\n        temp = num_words * (words[i] & 0xffff) + carry;\n        carry = num_words * (words[i] >> 0x10) + (temp >> 0x10);\n        words[i] = (temp & 0xffff) + carry * 0x10000;\n        carry = carry >> 0x10;\n    }\n    new_buffer = buffer;\n    if (carry != 0) {\n        if (buffer[2] <= num_buffer_words) {\n            new_buffer = (undefined4*) allocate_or_get_buffer_080090c0(buffer_size, buffer[1] + 1);\n            copyMemoryImproved_08001084(new_buffer + 3, buffer + 3, (buffer[4] + 2) * 4);\n            int buffer_address = *(int*)(buffer_size + 0x4c);\n            *buffer = *(undefined4*)(buffer_address + buffer[1] * 4);\n            *(undefined4**)(buffer_address + buffer[1] * 4) = buffer;\n        }\n        new_buffer[num_buffer_words + 5] = carry;\n        new_buffer[4] = num_buffer_words + 1;\n    }\n    return new_buffer;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copyMemoryImproved_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "numBytes",
                "puVar1": "destPtr",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "uVar4": "i",
                "uVar5": "remainingBytes",
                "bVar6": "isAligned"
            },
            "code": "undefined4 *copyMemoryImproved_08001084(undefined4 *destination, undefined4 *source, uint numBytes)\n{\n    undefined4 *destPtr;\n    undefined4 *srcPtr;\n    uint remainingBytes;\n    uint i;\n    bool isAligned;\n    \n    destPtr = destination;\n    isAligned = (((uint)source | (uint)destination) & 3) == 0;\n    if (!isAligned) {\n        if (numBytes < 8) {\n            remainingBytes = numBytes - 4;\n            if (remainingBytes > 3) {\n                do {\n                    *destPtr = *source;\n                    destPtr = (undefined4 *)((int)destPtr + 1);\n                    source = (undefined4 *)((int)source + 1);\n                    remainingBytes--;\n                } while (remainingBytes > 0);\n                *(undefined *)(undefined4 *)((int)destPtr + 1) = *(undefined *)(undefined4 *)((int)source + 1);\n                *(undefined *)((int)destPtr + 2) = *(undefined *)((int)source + 2);\n                *(undefined *)((int)destPtr + 3) = *(undefined *)((int)source + 3);\n                return destination;\n            }\n            goto LAB_08001108;\n        }\n        if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n            remainingBytes = 4 - ((uint)destination & 3);\n            numBytes -= remainingBytes;\n            srcPtr = source;\n            destPtr = destination;\n            if (((uint)destination & 1) != 0) {\n                srcPtr = (undefined4 *)((int)source + 1);\n                destPtr = (undefined4 *)((int)destination + 1);\n                *(undefined *)destination = *(undefined *)source;\n            }\n            if ((remainingBytes & 2) != 0) {\n                srcPtr = (undefined4 *)((int)srcPtr + 2);\n                destPtr = (undefined4 *)((int)destPtr + 2);\n                *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n            }\n        }\n    }\n    for (i = 0; i < numBytes / 16; i++) {\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n    }\n    remainingBytes = numBytes % 16;\n    if (remainingBytes > 11) {\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        remainingBytes -= 12;\n    }\n    if (remainingBytes > 7) {\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        remainingBytes -= 8;\n    }\n    if (remainingBytes > 3) {\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        *destPtr++ = *source++;\n        remainingBytes -= 4;\n    }\n    if (remainingBytes > 0) {\n        *(undefined *)destPtr = *(undefined *)source;\n    }\n    return destination;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_080097cc",
                "FUN_08009120",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "copyMemoryImproved_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "decode_flags_08005680",
                "*param_1": "flag_ptr",
                "local_18": "decode_param1",
                "local_14": "decode_param2",
                "local_c": "decode_param3",
                "DAT_080056b4": "FLAG_CONSTANT",
                "DAT_080056b8": "FLAG_HELPER_CONSTANT",
                "decode_flags_080017c4": "decode_flags_helper"
            },
            "code": "void decode_flags_08005680(int *flag_ptr)\n{\n  int flag_value = *flag_ptr;\n  if (flag_value == DAT_080056b4) {\n    int decode_param1 = 0x900;\n    int decode_param2 = 2;\n    int decode_param3 = 2;\n    decode_flags_08005680_080017c4(DAT_080056b8, &decode_param1);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "decode_flags_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "process_data_08003260",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "ptr1Val",
                "iVar2": "ptr2Val",
                "uVar3": "mask",
                "uVar4": "result",
                "*DAT_08003430": "maskPtr",
                "DAT_08003434": "dataPtr",
                "PTR_DAT_08003438": "shiftPtr",
                "calculate_value_08003440": "calculate_value",
                "get_pointer_value_080015a0": "get_pointer_value",
                "check_and_set_memory_value_0800151c": "check_and_set_memory_value"
            },
            "code": "int process_data_08003260(uint *data, uint size) {\n    int ptr1Val, ptr2Val;\n    uint mask, result;\n    \n    if (((**DAT_08003430 & 7) < size) && (**DAT_08003430 = size | **DAT_08003430 & 0xfffffff8, size != (**DAT_08003430 & 7))) {\n        return 1;\n    }\n    else {\n        if ((*data & 2) != 0) {\n            *(*DAT_08003430 + 1) = data[2] | *(*DAT_08003430 + 1) & 0xffffff0f;\n        }\n        if ((*data & 1) == 0) {\n            while (1) {\n                if ((size < (**DAT_08003430 & 7)) && (**DAT_08003430 = size | **DAT_08003430 & 0xfffffff8, size != (**DAT_08003430 & 7))) {\n                    return 1;\n                }\n                else {\n                    if ((*data & 4) != 0) {\n                        *(*DAT_08003430 + 1) = data[3] | *(*DAT_08003430 + 1) & 0xfffff8ff;\n                    }\n                    if ((*data & 8) != 0) {\n                        *(*DAT_08003430 + 1) = data[4] << 3 | *(*DAT_08003430 + 1) & 0xffffc7ff;\n                    }\n                    result = calculate_value_08003440();\n                    *(uint *)DAT_08003434 = result >> *(PTR_DAT_08003438 + (*(*DAT_08003430 + 1) >> 4 & 0xf));\n                    check_and_set_memory_value(0xf);\n                    return 0;\n                }\n            }\n        }\n        else {\n            if (data[1] == 1) {\n                if ((**DAT_08003430 & 0x20000) == 0) {\n                    return 1;\n                }\n            }\n            else if ((data[1] != 2) && ((**DAT_08003430 & 2) == 0)) {\n                return 1;\n            }\n            *(*DAT_08003430 + 1) = data[1] | *(*DAT_08003430 + 1) & 0xfffffffc;\n            ptr1Val = get_pointer_value_080015a0();\n            if (data[1] == 1) {\n                while (1) {\n                    if ((*(*DAT_08003430 + 1) & 0xc) == 4) break;\n                    ptr2Val = get_pointer_value_080015a0();\n                    if ((uint)(ptr2Val - ptr1Val) >= 0x1389) {\n                        return 3;\n                    }\n                }\n            }\n            else if (data[1] == 2) {\n                while (1) {\n                    if ((*(*DAT_08003430 + 1) & 0xc) == 8) break;\n                    ptr2Val = get_pointer_value_080015a0();\n                    if ((uint)(ptr2Val - ptr1Val) >= 0x1389) {\n                        return 3;\n                    }\n                }\n            }\n            else {\n                while (1) {\n                    if ((*(*DAT_08003430 + 1) & 0xc) == 0) break;\n                    ptr2Val = get_pointer_value_080015a0();\n                    if ((uint)(ptr2Val - ptr1Val) >= 0x1389) {\n                        return 3;\n                    }\n                }\n            }\n            result = calculate_value_08003440();\n            *(uint *)DAT_08003434 = result >> *(PTR_DAT_08003438 + (*(*DAT_08003430 + 1) >> 4 & 0xf));\n            check_and_set_memory_value(0xf);\n            return 0;\n        }\n    }\n}",
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "process_data_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_value_08001ab0",
                "param_1": "value_ptr",
                "uVar1": "value",
                "cVar2": "valid_char",
                "uVar3": "result",
                "uVar4": "calculated_value",
                "bVar5": "is_valid",
                "DAT_08001ca4": "param1",
                "DAT_08001cac": "param2",
                "DAT_08001ca8": "param2",
                "get_value_from_pointer_and_shift_08003518": "get_value_from_pointer_and_shift",
                "do_nothing_08001cb8": "do_nothing"
            },
            "code": "int calculate_value_08001ab0(uint **value_ptr) {\n  uint value = **value_ptr;\n  if (value_ptr == NULL) {\n    return 1;\n  }\n  if (*(char *)((int)value_ptr + 0x3d) == 0) {\n    *(undefined *)(value_ptr + 0xf) = 0;\n    do_nothing_08001cb8(value_ptr);\n  }\n  *(undefined *)((int)value_ptr + 0x3d) = 0x24;\n  **value_ptr = **value_ptr & 0xfffffffe;\n  uint value_from_pointer = get_value_from_pointer_and_shift_08003518();\n  uint DAT_08001ca4 = value_ptr[1];\n  uint DAT_08001cac = DAT_08001ca4 < DAT_08001ca4 ? DAT_08001cac : DAT_08001ca8;\n  bool is_valid = value_from_pointer <= DAT_08001cac;\n  char valid_char = is_valid ? 1 : 0;\n  if (!is_valid) {\n    valid_char = value_from_pointer > DAT_08001cac ? 0 : 1;\n  }\n  if (valid_char == 0) {\n    uint calculated_value = (uint)((ulonglong)DAT_08001cb0 * (ulonglong)value_from_pointer >> 0x32);\n    (*value_ptr)[1] = calculated_value;\n    uint param3 = DAT_08001ca4 < DAT_08001ca4 ? (uint)((ulonglong)DAT_08001cb4 * (ulonglong)(calculated_value * 300) >> 0x26) : 0;\n    (*value_ptr)[8] = param3 + 1;\n    if (DAT_08001ca4 < DAT_08001ca4) {\n      uint divisor = value_ptr[2] == NULL ? (uint)((value_from_pointer - 1) / (DAT_08001ca4 * 3)) + 1 : (uint)((value_from_pointer - 1) / (DAT_08001ca4 * 0x19)) + 1;\n      char divisor_char = divisor == 0 ? 1 : 0;\n      if (!divisor_char) {\n        divisor_char = 0;\n      }\n      if (divisor_char == 0) {\n        if (value_ptr[2] == NULL) {\n          value_from_pointer = (value_from_pointer - 1) / (DAT_08001ca4 * 3) + 1 | 0x8000;\n        }\n        else {\n          value_from_pointer = (value_from_pointer - 1) / (DAT_08001ca4 * 0x19) + 1 | 0xc000;\n        }\n      }\n      else {\n        value_from_pointer = 1;\n      }\n    }\n    else {\n      value_from_pointer = (value_from_pointer - 1) / (DAT_08001ca4 << 1) + 1;\n      if (value_from_pointer < 4) {\n        value_from_pointer = 4;\n      }\n    }\n    (*value_ptr)[7] = value_from_pointer;\n    **value_ptr = (uint)value_ptr[8] | (uint)value_ptr[7];\n    (*value_ptr)[2] = (uint)value_ptr[3] | (uint)value_ptr[4];\n    (*value_ptr)[3] = (uint)value_ptr[6] | (uint)value_ptr[5];\n    **value_ptr = **value_ptr | 1;\n    value_ptr[0x10] = NULL;\n    *(undefined *)((int)value_ptr + 0x3d) = 0x20;\n    value_ptr[0xc] = NULL;\n    *(undefined *)((int)value_ptr + 0x3e) = 0;\n    return 0;\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_value_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_value_from_pointer_and_shift_08003540",
                "uVar1": "value_from_pointer",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "PTR_DAT_08003564": "pointer_data",
                "DAT_08003560": "data"
            },
            "code": "uint get_value_from_pointer_and_shift_08003540(void)\n{\n  uint value_from_pointer = get_value_from_pointer_08003504();\n  uint shifted_value = *(uint *)(DAT_08003560 + 4) >> 0xb & 7;\n  uint result = value_from_pointer >> PTR_DAT_08003564[shifted_value];\n  return result;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_and_shift_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "initialize_buffer_08009244",
                "param_1": "buffer_size",
                "param_2": "data",
                "iVar1": "buffer_address"
            },
            "code": "void initialize_buffer_08009244(int buffer_size, int data){\n  int buffer_address = allocate_or_get_buffer_080090c0(buffer_size,1);\n  *(int *)(buffer_address + 0x10) = 1;\n  *(int *)(buffer_address + 0x14) = data;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "initialize_buffer_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "trigger_system_interrupt_08004e6c"
            },
            "code": "void trigger_system_interrupt_08004e6c(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "is_address_valid_08001762",
                "param_1": "address",
                "uVar1": "validity"
            },
            "code": "int is_address_valid_08001762(unsigned int address) {\n  int validity = is_valid_address_080016d0(address);\n  return validity;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "is_address_valid_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_08005e9c",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dst_ptr",
                "uVar4": "current_word",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length) {\n  char current_char;\n  uint *dst_ptr;\n  uint *src_ptr;\n  uint current_word;\n\n  if (((uint)destination | (uint)source) & 3) {\n    return;\n  }\n\n  src_ptr = source;\n  dst_ptr = destination;\n\n  while (length > 3) {\n    current_word = *src_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n      return;\n    }\n    length -= 4;\n    *dst_ptr = current_word;\n    dst_ptr++;\n    src_ptr++;\n  }\n\n  while (length > 0) {\n    current_char = *(char *)src_ptr;\n    *(char *)dst_ptr = current_char;\n    dst_ptr = (uint *)((int)dst_ptr + 1);\n    src_ptr = (uint *)((int)src_ptr + 1);\n    length--;\n    if (current_char == '\\0') {\n      break;\n    }\n  }\n\n  while (length > 0) {\n    *(char *)dst_ptr = '\\0';\n    dst_ptr = (uint *)((int)dst_ptr + 1);\n    length--;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "set_data_08003ff8",
                "param_1": "data_address",
                "param_2": "data_values",
                "local_c": "data_offset",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "code": "void set_data_08003ff8(int data_address, int *data_values) {\n  int value1 = data_values[0];\n  int value2 = data_values[2];\n  uint data_offset = *(uint *)(data_address + 0x04);\n  if (data_address == current_data_address) {\n    data_offset = data_values[5] << 6 | data_offset & 0xffffbfff;\n  }\n  *(uint *)(data_address + 0x04) = data_offset;\n  *(uint *)(data_address + 0x1c) = value1 << 8 | *(uint *)(data_address + 0x1c) & 0xffff8cff;\n  *(int *)(data_address + 0x40) = data_values[1];\n  *(uint *)(data_address + 0x20) = value2 << 0xc | *(uint *)(data_address + 0x20) & 0xffffdfff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_data_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "process_input_wrapper_08004ea4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "flag",
                "param_4": "value",
                "PTR_DAT_08004ee4": "PTR_DAT_input",
                "PTR_DAT_08004ee0": "PTR_DAT_output"
            },
            "code": "void process_input_wrapper_08004ea4(const char* input, const char* output, int flag, int param, short value) {\n  process_input(PTR_DAT_08004ee4, input, output, flag, param, value, *(int*)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "process_input_wrapper_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_bits_and_shift_left_080040a0",
                "param_1": "buf",
                "param_2": "bits",
                "param_3": "val",
                "uVar1": "temp"
            },
            "code": "void set_bits_and_shift_left_080040a0(int *buf, unsigned int bits, int val)\n{\n  unsigned int uVar1;\n  \n  uVar1 = *(unsigned int *)(buf + 0x20);\n  *(unsigned int *)(buf + 0x20) = *(unsigned int *)(buf + 0x20) & 0xfffffffe;\n  *(unsigned int *)(buf + 0x18) = val << 4 | *(unsigned int *)(buf + 0x18) & 0xffffff0f;\n  *(unsigned int *)(buf + 0x20) = bits | uVar1 & 0xfffffff5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_bits_and_shift_left_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "n",
                "puVar1": "dst_aligned",
                "puVar2": "src_aligned",
                "iVar3": "i",
                "puVar4": "dst_remaining",
                "puVar5": "src_remaining",
                "uVar6": "remaining_size",
                "uVar7": "aligned_size"
            },
            "code": "void reverse_copy_08009a18(uint8_t *dst, const uint8_t *src, size_t n)\n{\n    if (dst < src || dst >= src + n) {\n        for (size_t i = 0; i < n; i++) {\n            dst[i] = src[n - i - 1];\n        }\n    }\n    else {\n        size_t n_aligned = n & ~0xf;\n        size_t n_remaining = n & 0xf;\n        uint32_t *dst_aligned = (uint32_t *)(dst + n_aligned);\n        const uint32_t *src_aligned = (const uint32_t *)(src + n_aligned);\n        for (size_t i = 0; i < n_aligned; i += 16) {\n            dst_aligned[-4] = src_aligned[-4];\n            dst_aligned[-3] = src_aligned[-3];\n            dst_aligned[-2] = src_aligned[-2];\n            dst_aligned[-1] = src_aligned[-1];\n            dst_aligned -= 4;\n            src_aligned -= 4;\n        }\n        for (size_t i = 0; i < n_remaining; i++) {\n            dst[n - i - 1] = src[i];\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_to_int_0800119c",
                "param_1": "input_val",
                "param_2": "shift_val",
                "uVar1": "result",
                "iVar2": "shifted_val",
                "uVar3": "shifted_val_abs",
                "uVar4": "shift_amount"
            },
            "code": "uint convert_to_int_0800119c(uint input_val, uint shift_val)\n{\n  uint result;\n  int shifted_val;\n  uint shifted_val_abs;\n  uint shift_amount;\n  \n  shifted_val = shift_val * 2 + 0x200000;\n  if (shift_val * 2 < 0xffe00000) {\n    if (-1 < shifted_val) {\n      return 0;\n    }\n    shift_amount = (-shifted_val) - 0x3e1;\n    shifted_val_abs = -shifted_val;\n    if (shifted_val_abs < 0xfffffc20 && shift_amount != 0) {\n      result = (shift_val << 0xb | 0x80000000 | input_val >> 0x15) >> (shift_amount & 0xff);\n      if ((shift_val & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_val | shift_val << 0xc) != 0) {\n    return 0;\n  }\n  shift_val = shift_val & 0x80000000;\n  if (shift_val == 0) {\n    shift_val = 0x7fffffff;\n  }\n  return shift_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_to_int_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "add_value_to_pointer_08005728",
                "param_1": "value",
                "puVar1": "new_ptr",
                "auStack_18": "end_ptr",
                "local_14": "value",
                "local_c": "return_val"
            },
            "code": "int add_value_to_pointer_08005728(int value)\n{\n  int *ptr = (int *)PTR_DAT_08005778;\n  if (*ptr == 0) {\n    *ptr = (int)PTR_DAT_0800577c;\n  }\n  int *end_ptr = (int *)((int)PTR_DAT_08005778 + sizeof(int));\n  if ((void *)end_ptr < (void *)(value + (int)PTR_DAT_08005778)) {\n    int *new_ptr = (int *)get_value_from_pointer_array_08005d14();\n    *new_ptr = 0xc;\n    return -1;\n  }\n  else {\n    *ptr = value + *ptr;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "add_value_to_pointer_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_pointer_080090b4",
                "PTR_DAT_080090bc": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_param_0800422e",
                "param_1": "ptr_param",
                "param_2": "ptr_values",
                "uVar1": "status"
            },
            "code": "int set_param_0800422e(uint32_t *ptr_param, uint32_t *ptr_values)\n{\n    int status = 0;\n    if (*(char *)(ptr_param + 0xf) == 1)\n    {\n        status = 2;\n    }\n    else\n    {\n        *(char *)(ptr_param + 0xf) = 1;\n        *(uint32_t *)(*ptr_param + 0x44) = ptr_values[6] |\n                                           (ptr_values[5] |\n                                           (ptr_values[4] |\n                                           (ptr_values[3] |\n                                           (ptr_values[2] |\n                                           (ptr_values[1] |\n                                           (*ptr_values & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n        *(char *)(ptr_param + 0xf) = 0;\n        status = 0;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_param_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "data_address",
                "param_2": "data_values",
                "iVar1": "new_value_1",
                "uVar2": "new_value_2",
                "local_10": "local_value_1"
            },
            "code": "void update_data_08003e38(int data_address, int *data_values){\n    int new_value_1;\n    uint new_value_2;\n    uint local_value_1;\n\n    *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n    local_value_1 = *(uint *)(data_address + 4);\n    new_value_1 = *data_values;\n    new_value_2 = data_values[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n    if (data_address == DAT_08003f14) {\n        new_value_2 = (data_values[3] << 4 | new_value_2 & 0xffffff7f) & 0xffffffbf;\n        local_value_1 = data_values[6] << 2 | data_values[5] << 2 | local_value_1 & 0xfffff3ff;\n    }\n    *(uint *)(data_address + 4) = local_value_1;\n    *(uint *)(data_address + 0x18) = new_value_1 << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n    *(int *)(data_address + 0x38) = data_values[1];\n    *(uint *)(data_address + 0x20) = new_value_2;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "check_and_set_memory_value_0800151c",
                "param_1": "input_param",
                "iVar1": "is_valid_address",
                "uVar2": "return_value",
                "PTR_DAT_08001570": "memory_address",
                "PTR_DAT_08001574": "memory_divisor",
                "PTR_DAT_08001578": "memory_location",
                "set_byte_in_memory_0800172a": "set_byte_in_memory",
                "is_address_valid_08001762": "is_address_valid"
            },
            "code": "int is_valid_address = check_and_set_memory_value_0800151c((int)((ulonglong)*(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574))); \nif (is_valid_address == 0) { \n    if (input_param < 0x10) { \n        set_byte_in_memory(0xffffffff, input_param, 0); \n        *(uint *)PTR_DAT_08001578 = input_param; \n        return 0; \n    } \n    else { \n        return 1; \n    } \n} \nelse { \n    return 1; \n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "check_and_set_memory_value_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_1",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "is_zero_1",
                "temp_2": "temp_6",
                "temp_3": "temp_1",
                "temp_4": "temp_3",
                "temp_5": "temp_4",
                "temp_6": "is_zero_2"
            },
            "code": "ulonglong calculate_result_080006a4(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  bool is_zero_1;\n  bool is_zero_2;\n  \n  temp_1 = input_4 >> 0x14;\n  if (input_2 != input_3 && temp_1 != input_3) {\n    is_zero_1 = (input_1 | input_2 << 1) == 0;\n    if (!is_zero_1) {\n      is_zero_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_3 == 0) {\n      temp_2 = input_2 & 0x80000000;\n      do {\n        temp_3 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_3 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_2;\n      if (temp_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_1 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_1 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero_1 = (input_1 | input_2 << 1) == 0;\n  if (is_zero_1) {\n    temp_2 = input_4;\n    temp_1 = input_3;\n  }\n  if (!is_zero_1) {\n    is_zero_2 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_3 = input_2;\n  if (((!is_zero_2) && ((input_2 != input_3 || ((input_1 | input_2 << 0xc) == 0)))) && ((temp_1 != input_3 || (input_1 = input_3, temp_3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_3,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "operand1",
                "param_2": "operand2",
                "uVar2": "operand1_times_2",
                "uVar3": "operand2_times_2",
                "uVar4": "result",
                "bVar1": "is_negative1",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_08000f68(uint operand1, uint operand2)\n{\n    bool is_negative1;\n    bool is_negative2;\n    uint operand1_times_2 = operand1 * 2;\n    uint operand2_times_2 = operand2 * 2;\n    \n    if (((int)operand1_times_2 >> 0x18 == -1 || (int)operand2_times_2 >> 0x18 == -1) && ((((int)operand1_times_2 >> 0x18 == -1 && ((operand1 & 0x7fffff) != 0)) || (((int)operand2_times_2 >> 0x18 == -1 && ((operand2 & 0x7fffff) != 0))))))\n    {\n        return 1;\n    }\n    \n    uint result = operand1_times_2 | operand2 & 0x7fffffff;\n    bool is_result_zero = result == 0;\n    \n    if (!is_result_zero)\n    {\n        result = operand1 ^ operand2;\n        is_result_zero = result == 0;\n    }\n    \n    is_negative1 = -1 < (int)result;\n    \n    if (is_negative1)\n    {\n        result = operand1_times_2 + operand2 * -2;\n        is_result_zero = result == 0;\n    }\n    \n    if (is_negative1 && operand2_times_2 <= operand1_times_2 && !is_result_zero)\n    {\n        result = (int)operand2 >> 0x1f;\n    }\n    \n    if (!is_negative1 || operand2_times_2 > operand1_times_2)\n    {\n        result = ~((int)operand2 >> 0x1f);\n    }\n    \n    if (!is_result_zero)\n    {\n        result = result | 1;\n    }\n    \n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "hash_size",
                "puVar1": "buffer_ptr1",
                "puVar2": "buffer_ptr2",
                "iVar3": "var1",
                "iVar9": "var2",
                "iVar10": "var3",
                "uVar4": "var4",
                "puVar5": "hash_ptr1",
                "puVar7": "ptr1",
                "puVar16": "buffer_ptr3",
                "puVar14": "hash_ptr3",
                "puVar15": "hash_ptr4",
                "puVar18": "hash_ptr1",
                "uVar6": "var6",
                "uVar11": "var11",
                "iVar12": "var5"
            },
            "code": "void calculate_hash_08009258(uint8_t* buffer, int buffer_size, int hash_size) {\n  uint32_t *buffer_ptr1 = (uint32_t *)(buffer + 0x10);\n  uint32_t *buffer_ptr2 = (uint32_t *)(hash_size + 0x10);\n  int var1 = *(int *)(buffer + 4);\n  int var2 = *(int *)(hash_size + 8);\n  int var3 = buffer_size;\n  if (var1 < var2) {\n    var3 = var1 + buffer_size;\n    var1 = var2;\n    buffer_ptr2 = (uint32_t *)(buffer + 0x10);\n    buffer_ptr1 = (uint32_t *)(hash_size + 0x10);\n  }\n  int var4 = var1 + var2;\n  if (*(int *)(buffer + 8) < var4) {\n    var3++;\n  }\n  int var5 = allocate_or_get_buffer_080090c0(buffer, var3);\n  uint32_t *hash_ptr1 = (uint32_t *)(var5 + 0x14);\n  uint32_t *hash_ptr2 = hash_ptr1 + var4;\n  for (uint32_t *ptr = hash_ptr1; ptr < hash_ptr2; ptr++) {\n    *ptr = 0;\n  }\n  uint32_t *buffer_ptr3 = (uint32_t *)(buffer + 0x14);\n  uint32_t *buffer_ptr4 = (uint32_t *)(buffer_size + 0x14);\n  if (buffer_ptr3 < buffer_ptr4) {\n    uint32_t *ptr1 = (uint32_t *)(buffer_ptr3 + ((buffer_ptr4 - buffer) - 0x15 & 0xfffffffc));\n    uint32_t *ptr2 = (uint32_t *)(buffer + 0x10);\n    do {\n      while (true) {\n        ptr2++;\n        uint32_t var6 = *ptr2 & 0xffff;\n        if (var6 != 0) {\n          break;\n        }\n        var6 = *ptr2 >> 0x10;\n        if (var6 == 0) {\n          goto LAB_080092d2;\n        }\nLAB_0800932c:\n        uint32_t var8 = *hash_ptr1;\n        uint32_t var4 = 0;\n        uint32_t *ptr3 = buffer_ptr3;\n        uint32_t *hash_ptr3 = hash_ptr1;\n        uint32_t var11 = var8;\n        do {\n          uint32_t *hash_ptr4 = hash_ptr3;\n          var4 = var4 + var6 * *(uint16_t *)ptr3 + (var11 >> 0x10);\n          *hash_ptr4 = var8 & 0xffff | var4 * 0x10000;\n          uint32_t *ptr4 = ptr3 + 1;\n          var11 = hash_ptr4[1];\n          var8 = var6 * (*ptr3 >> 0x10) + (var11 & 0xffff) + (var4 >> 0x10);\n          var4 = var8 >> 0x10;\n          ptr3 = ptr4;\n          hash_ptr3 = hash_ptr4 + 1;\n        } while (ptr4 < buffer_ptr3 + var1);\n        hash_ptr3[1] = var8;\n        hash_ptr1++;\n        if (ptr1 == ptr2) {\n          goto LAB_0800937a;\n        }\n      }\n      uint32_t var11 = 0;\n      uint32_t *ptr3 = hash_ptr1;\n      uint32_t *ptr4 = buffer_ptr3;\n      do {\n        uint32_t *hash_ptr4 = ptr3;\n        uint32_t *ptr5 = ptr4 + 1;\n        uint32_t var8 = var6 * (*ptr4 & 0xffff) + (*hash_ptr4 & 0xffff) + var11;\n        uint32_t var4 = var6 * (*ptr4 >> 0x10) + (*hash_ptr4 >> 0x10) + (var8 >> 0x10);\n        var11 = var4 >> 0x10;\n        *hash_ptr4 = var8 & 0xffff | var4 * 0x10000;\n        ptr3 = hash_ptr4 + 1;\n        ptr4 = ptr5;\n      } while (ptr5 < buffer_ptr3 + var1);\n      ptr3[1] = var11;\n      var6 = *ptr2 >> 0x10;\n      if (var6 != 0) {\n        goto LAB_0800932c;\n      }\nLAB_080092d2:\n      hash_ptr1++;\n    } while (ptr1 != ptr2);\n  }\nLAB_0800937a:\n  if (var4 > 0) {\n    uint32_t var6 = hash_ptr2[-1];\n    hash_ptr2--;\n    while ((var6 == 0 && (var4--, var4 != 0))) {\n      hash_ptr2--;\n      var6 = *hash_ptr2;\n    }\n  }\n  *(int *)(var5 + 0x10) = var4;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculateHash_08000c08",
                "param_1": "input",
                "iVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "iVar3": "a",
                "uVar4": "b",
                "c": "c",
                "d": "d",
                "result": "result"
            },
            "code": "uint calculateHash_08000c08(uint input)\n{\n    if (input == 0) {\n        return 0;\n    }\n    int leadingZeroes = count_leading_zeroes(input);\n    int shiftAmount = leadingZeroes - 8;\n    int a = shiftAmount * -0x800000 + 0x4a800000;\n    if (leadingZeroes > 7) {\n        uint b = 0 << (shiftAmount & 0xff);\n        uint c = input << (shiftAmount & 0xff);\n        uint d = (0U >> (0x20 - shiftAmount & 0xff));\n        uint e = (uint)(0x7fffffff < b);\n        uint result = a + c + d + e;\n        if (b == 0x80000000) {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    uint b = input << (leadingZeroes + 0x18U & 0xff);\n    int c = (input >> (0x20 - (leadingZeroes + 0x18U) & 0xff));\n    uint d = ((int)b >> 0x1f);\n    uint result = a + c - d;\n    if ((b & 0x7fffffff) == 0) {\n        result = result & ~(b >> 0x1f);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculateHash_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_param_and_flag_080042de",
                "param_1": "param_array",
                "param_2": "param_values",
                "uVar1": "status",
                "*(char *)(param_1 + 0xf)": "*(char *)(param_array + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)param_array + 0x3d)",
                "*(uint *)(*param_1 + 4)": "*(uint *)(*param_array + 4)",
                "*(uint *)(*param_1 + 8)": "*(uint *)(*param_array + 8)"
            },
            "code": "int set_param_and_flag_080042de(int *param_array, uint *param_values) {\n  int status = 0;\n  if (*(char *)(param_array + 0xf) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(char *)(param_array + 0xf) = 1;\n    *(char *)((int)param_array + 0x3d) = 2;\n    *(uint *)(*param_array + 4) = *(uint *)(*param_array + 4) & 0xffffff8f;\n    *(uint *)(*param_array + 4) = param_values[0] | *(uint *)(*param_array + 4);\n    *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffffff7f;\n    *(uint *)(*param_array + 8) = param_values[1] | *(uint *)(*param_array + 8);\n    *(char *)((int)param_array + 0x3d) = 1;\n    *(char *)(param_array + 0xf) = 0;\n    status = 0;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_param_and_flag_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "calculate_hash_08009530",
                "param_1": "hash_type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "param_4",
                "iVar1": "buffer",
                "iVar5": "diff",
                "iVar12": "carry",
                "puVar2": "ptr1",
                "puVar6": "output",
                "puVar7": "ptr2",
                "puVar8": "next",
                "puVar9": "end1",
                "puVar10": "next2",
                "puVar11": "end2",
                "puVar13": "end1"
            },
            "code": "void calculate_hash_08009530(uint32_t param_1, uint32_t *data1, uint32_t *data2, uint32_t param_4)\n{\n  int diff = data1[4] - (int)data2[4];\n  uint32_t *ptr1 = data1 + 5;\n  uint32_t *ptr2 = data2 + 5;\n  uint32_t *end1 = ptr1 + diff;\n  uint32_t *end2 = ptr2 + diff;\n  if (diff == 0) {\n    while (end1 != data1 + 5) {\n      end1--;\n      end2--;\n      if (*end1 != *end2) break;\n      if (end1 == ptr1) {\n        int buffer = allocate_or_get_buffer_080090c0(param_1, 0, end1, end2, param_4);\n        *(uint32_t *)(buffer + 0x10) = 1;\n        *(uint32_t *)(buffer + 0x14) = 0;\n        return;\n      }\n    }\n    if (*end2 <= *end1) goto LAB_08009578;\n  }\n  else if (diff < 0) {\n    diff = 1;\n    ptr1 = data2;\n    ptr2 = data1;\n    end1 = data1 + 5;\n    end2 = data2 + 5;\n  }\n  else {\n    diff = 0;\n  }\n  int buffer = allocate_or_get_buffer_080090c0(param_1, ptr2[1], ptr1, ptr2, param_4);\n  int carry = 0;\n  uint32_t size1 = data2[4];\n  uint32_t size2 = data1[4];\n  *(int *)(buffer + 0xc) = diff;\n  uint32_t *output = (uint32_t *)(buffer + 0x14);\n  while (ptr2 != end2) {\n    uint32_t *next1 = ptr1 + 1;\n    uint32_t *next2 = ptr2 + 1;\n    uint32_t sum = ((*ptr1 & 0xffff) + carry) - (*ptr2 & 0xffff);\n    carry = ((*ptr1 >> 0x10) - (*ptr2 >> 0x10)) + ((int)sum >> 0x10);\n    sum = sum & 0xffff | carry * 0x10000;\n    *output = sum;\n    carry = carry >> 0x10;\n    ptr1 = next1;\n    ptr2 = next2;\n    output++;\n  }\n  output = ptr1;\n  while (ptr2 < end2) {\n    uint32_t *next = output + 1;\n    uint32_t sum = (*output & 0xffff) + carry;\n    carry = ((int)sum >> 0x10) + (*output >> 0x10);\n    sum = sum & 0xffff | carry * 0x10000;\n    *(output + 1) = sum;\n    carry = carry >> 0x10;\n    output = next;\n  }\n  output--;\n  while (*output == 0) {\n    output--;\n    size1--;\n  }\n  *(uint32_t *)(buffer + 0x10) = size1;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    do_nothing_with_pointer_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    do_nothing_with_pointer_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)add_value_to_pointer_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = add_value_to_pointer_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    do_nothing_with_pointer_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  do_nothing_with_pointer_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_and_update_08002bb4",
                "param_1": "pointer_array",
                "param_2": "pointer_array_length",
                "param_3": "param_3",
                "iVar1": "flag_check_result"
            },
            "code": "int check_and_update_08002bb4(int *pointer_array, uint pointer_array_length, int param_3) {\n  int flag_check_result;\n  while (true) {\n    if ((*(uint *)(*pointer_array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_check_result = check_flag(pointer_array);\n    if (flag_check_result != 0) {\n      break;\n    }\n    if ((pointer_array_length != 0xffffffff) && ((pointer_array_length == 0 || (flag_check_result = get_pointer_value(), pointer_array_length < (uint)(flag_check_result - param_3))))) {\n      pointer_array[0x10] = pointer_array[0x10] | 0x20;\n      pointer_array[0xc] = 0;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n      *(undefined *)(pointer_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "is_flag_set",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*flag_ptr + 0x14)",
                "*(undefined4 *)(*param_1 + 0x14)": "*(undefined4 *)(*flag_ptr + 0x14)",
                "param_1[0x10]": "flag_ptr[0x10]",
                "param_1[0xc]": "flag_ptr[0xc]",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)flag_ptr + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(flag_ptr + 0xf)"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr)\n{\n  bool is_flag_set;\n  is_flag_set = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return is_flag_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "reverse_and_calculate_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "reversed_bits_1",
                "uVar2": "reversed_bits_2",
                "uVar3": "reversed_bits_3",
                "PTR_DAT_08004d60": "calculated_value_1",
                "PTR_DAT_08004d64": "calculated_value_2",
                "PTR_DAT_08004d68": "calculated_value_3",
                "PTR_DAT_08004d70": "calculated_value_4",
                "DAT_08004d40": "constant_1",
                "DAT_08004d44": "constant_2",
                "DAT_08004d48": "constant_3",
                "DAT_08004d4c": "constant_4",
                "DAT_08004d50": "constant_5",
                "DAT_08004d54": "constant_6",
                "DAT_08004d58": "constant_7",
                "DAT_08004d5c": "constant_8",
                "reverseBits_08000418": "reverse_bits",
                "FUNC_08000aa4": "get_value_at_offset",
                "FUNC_080004c8": "calculate_value",
                "FUNC_0800071c": "calculate_result",
                "FUNC_08000158": "calculate_final_result",
                "FUNC_0800015c": "calculate_float_bits"
            },
            "code": "void reverse_and_calculate_08004bd8(int input, int* output)\n{\n    int reversed_bits_1 = reverseBits_08000418(FUNC_08000aa4(input, 0x10), FUNC_08000aa4(input, 0x1c));\n    int reversed_bits_2 = reverseBits_08000418(FUNC_08000aa4(input, 4), 0);\n    int reversed_bits_3 = reverseBits_08000418(FUNC_08000aa4(input, 8), 0);\n    int reversed_bits_4 = reverseBits_08000418(FUNC_08000aa4(input, 0x24), 0);\n    int PTR_DAT_08004d60 = FUNC_080004c8(reversed_bits_1);\n    int PTR_DAT_08004d64 = FUNC_080004c8(reversed_bits_2);\n    int PTR_DAT_08004d68 = FUNC_080004c8(reversed_bits_3);\n    int PTR_DAT_08004d70 = FUNC_080004c8(reversed_bits_4);\n    int result_1 = FUNC_0800071c(PTR_DAT_08004d64, PTR_DAT_08004d68);\n    int result_2 = FUNC_0800071c(result_1, PTR_DAT_08004d70);\n    int final_result = FUNC_08000158(PTR_DAT_08004d60, result_2);\n    *output = final_result;\n}\n",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009fc",
                "FUN_0800071c",
                "FUN_08000418",
                "FUN_08000aa4",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "reverse_and_calculate_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_or_get_buffer_080090c0",
                "param_1": "buffer_address",
                "param_2": "index",
                "puVar1": "buffer_pointer",
                "iVar2": "buffer_address_2"
            },
            "code": "undefined4* allocate_or_get_buffer_080090c0(int buffer_address, uint32_t index)\n{\n    undefined4* buffer_pointer;\n    int buffer_address_2 = *(int*)(buffer_address + 0x4c);\n    if (buffer_address_2 == 0)\n    {\n        buffer_address_2 = allocate_buffer_08009980(buffer_address, 4, 0x21);\n        *(int*)(buffer_address + 0x4c) = buffer_address_2;\n        if (buffer_address_2 == 0)\n        {\n            return (undefined4*)0x0;\n        }\n    }\n    buffer_pointer = *(undefined4**)(buffer_address_2 + index * 4);\n    if (buffer_pointer == (undefined4*)0x0)\n    {\n        int buffer_size = 1 << (index & 0xff);\n        buffer_pointer = (undefined4*)allocate_buffer_08009980(buffer_address, 1, (buffer_size + 5) * 4);\n        if (buffer_pointer == (undefined4*)0x0)\n        {\n            return (undefined4*)0x0;\n        }\n        buffer_pointer[1] = index;\n        buffer_pointer[2] = buffer_size;\n    }\n    else\n    {\n        *(undefined4*)(buffer_address_2 + index * 4) = *buffer_pointer;\n    }\n    buffer_pointer[3] = 0;\n    buffer_pointer[4] = 0;\n    return buffer_pointer;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009244",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_080079e8",
                "FUN_08009530",
                "FUN_08009258"
            ],
            "imported": false,
            "current_name": "allocate_or_get_buffer_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "number",
                "uVar1": "trailing_zeros_count",
                "uVar2": "temp_number"
            },
            "code": "uint count_trailing_zeros_080091e4(uint *number)\n{\n  uint trailing_zeros_count = *number & 7;\n  uint temp_number = *number;\n  if (trailing_zeros_count == 0) {\n    if ((temp_number & 0xffff) == 0) {\n      temp_number = temp_number >> 0x10;\n      trailing_zeros_count = 0x10;\n    }\n    if ((temp_number & 0xff) == 0) {\n      temp_number = temp_number >> 8;\n      trailing_zeros_count += 8;\n    }\n    if ((temp_number & 0xf) == 0) {\n      temp_number = temp_number >> 4;\n      trailing_zeros_count += 4;\n    }\n    if ((temp_number & 3) == 0) {\n      temp_number = temp_number >> 2;\n      trailing_zeros_count += 2;\n    }\n    if (-1 < (int)(temp_number << 0x1f)) {\n      temp_number = temp_number >> 1;\n      if (temp_number == 0) {\n        return 0x20;\n      }\n      trailing_zeros_count++;\n    }\n    *number = temp_number;\n    return trailing_zeros_count;\n  }\n  if (-1 < (int)(temp_number << 0x1f)) {\n    if ((int)(temp_number << 0x1e) < 0) {\n      *number = temp_number >> 1;\n      return 1;\n    }\n    *number = temp_number >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_trailing_zeros_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "output1",
                "uVar2": "output2",
                "uVar3": "output3",
                "in_r12": "temp",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "code": "uint calculate_float_bits_080009fc(uint input1, uint input2) {\n  uint output1;\n  uint output2;\n  uint output3;\n  uint temp;\n  bool condition1;\n  bool condition2;\n  output2 = input2 * 2;\n  condition2 = output2 < 0x70000000;\n  output3 = output2 + 0x90000000;\n  output1 = output3;\n  if (!condition2) {\n    temp = output2 + 0x8fe00000;\n    output1 = temp;\n  }\n  condition1 = output1 == 0;\n  if (!condition2 && output3 >= 0x200000) {\n    condition1 = temp == 0x1fc00000;\n  }\n  if (((condition2 || output3 < 0x200000) || 0x1fc00000 < temp) || condition1) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)output2 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(output2 + 0x92e00000) < 0 != SCARRY4(output3,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    output2 = 0x18 - (output2 + 0x92e00000 >> 0x15);\n    output1 = input1 >> (output2 & 0xff);\n    if (input1 << (0x20 - output2 & 0xff) != 0) {\n      output1 = output1 | 1;\n    }\n    output3 = input2 & 0x1fffff | 0x100000;\n    input1 = output1 | output3 << (0x20 - output2 & 0xff);\n    output3 = (output3 >> (output2 & 0xff)) << 1;\n  }\n  output1 = (input2 & 0x80000000 | input1 >> 0x1d) + output3 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    output1 = output1 & 0xfffffffe;\n  }\n  return output1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "hash_table_lookup_080093a4",
                "param_1": "table_base",
                "param_2": "key",
                "param_3": "key_size",
                "iVar1": "index",
                "iVar2": "num_words",
                "puVar3": "table_ptr",
                "puVar4": "current_node_ptr"
            },
            "code": "undefined4 * hash_table_lookup_080093a4(int table_base, undefined4 *key, uint key_size)\n{\n  int num_words = (int)key_size >> 2;\n  undefined4 *table_ptr;\n  undefined4 *current_node_ptr;\n  if ((key_size & 3) != 0) {\n    key = (undefined4 *)calculate_hash_08009120(table_base, key, *(undefined4 *)(PTR_DAT_08009440 + ((key_size & 3) - 1) * 4), 0);\n  }\n  if (num_words != 0) {\n    table_ptr = *(undefined4 **)(table_base + 0x48);\n    if (table_ptr == (undefined4 *)0x0) {\n      table_ptr = (undefined4 *)allocate_or_get_buffer_080090c0(table_base, 1);\n      table_ptr[4] = 1;\n      table_ptr[5] = 0x271;\n      *(undefined4 **)(table_base + 0x48) = table_ptr;\n      *table_ptr = 0;\n    }\n    current_node_ptr = key;\n    if (num_words << 0x1f >= 0) {\n      while (num_words != 0) {\n        undefined4 *next_node_ptr = (undefined4 *)*table_ptr;\n        if (next_node_ptr == (undefined4 *)0x0) {\n          next_node_ptr = (undefined4 *)calculate_hash_08009258(table_base, table_ptr, table_ptr);\n          *table_ptr = next_node_ptr;\n          *next_node_ptr = 0;\n        }\n        table_ptr = key;\n        num_words = num_words >> 1;\n        if (num_words == 0) {\n          return table_ptr;\n        }\n        current_node_ptr = (undefined4 *)calculate_hash_08009258(table_base, table_ptr, next_node_ptr);\n        if (table_ptr == (undefined4 *)0x0) {\n          break;\n        }\n        int index = *(int *)(table_base + 0x4c);\n        *table_ptr = *(undefined4 *)(index + table_ptr[1] * 4);\n        *(undefined4 **)(index + table_ptr[1] * 4) = table_ptr;\n        table_ptr = next_node_ptr;\n      }\n    }\n    else {\n      do {\n        current_node_ptr = (undefined4 *)*table_ptr;\n        if (current_node_ptr == (undefined4 *)0x0) {\n          current_node_ptr = (undefined4 *)calculate_hash_08009258(table_base, table_ptr, table_ptr);\n          *table_ptr = current_node_ptr;\n          *current_node_ptr = 0;\n        }\n        table_ptr = key;\n        num_words = num_words >> 1;\n        if (num_words == 0) {\n          return table_ptr;\n        }\n        next_node_ptr = (undefined4 *)calculate_hash_08009258(table_base, table_ptr, current_node_ptr);\n        if (key == (undefined4 *)0x0) {\n          break;\n        }\n        int index = *(int *)(table_base + 0x4c);\n        *key = *(undefined4 *)(index + key[1] * 4);\n        *(undefined4 **)(index + key[1] * 4) = key;\n        key = current_node_ptr;\n        current_node_ptr = next_node_ptr;\n      } while (num_words != 0);\n    }\n  }\n  return key;\n}",
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "hash_table_lookup_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "addOrUpdateRecord_080098c0",
                "param_1": "recordType",
                "param_2": "recordValue",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "recordCount",
                "uVar4": "recordIndex",
                "iVar5": "recordTableEntry",
                "iVar6": "recordTable",
                "iVar7": "ptr2"
            },
            "code": "undefined4 addOrUpdateRecord_080098c0(int recordType, undefined4 recordValue, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr1;\n  undefined4 result;\n  uint recordCount;\n  uint recordIndex;\n  int ptr2;\n  int recordTable;\n  int recordTableEntry;\n\n  ptr1 = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  recordTable = *(int *)PTR_PTR_DAT_08009978;\n  recordTableEntry = *(int *)(recordTable + 0x148);\n  if (recordTableEntry == 0) {\n    recordTableEntry = recordTable + 0x14c;\n    *(int *)(recordTable + 0x148) = recordTableEntry;\n  }\n  recordCount = *(uint *)(recordTableEntry + 4);\n  if ((int)recordCount < 0x20) {\n    recordIndex = recordCount + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)ptr1);\n      return 0xffffffff;\n    }\n    recordTableEntry = 400;\n    recordCount = 0;\n    _DAT_00000190 = *(undefined4 *)(recordTable + 0x148);\n    recordIndex = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(recordTable + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (recordType != 0) {\n    ptr2 = recordTableEntry + recordCount * 4;\n    *(undefined4 *)(ptr2 + 0x88) = param_3;\n    recordIndex = 1 << (recordCount & 0xff);\n    *(uint *)(recordTableEntry + 0x188) = *(uint *)(recordTableEntry + 0x188) | recordIndex;\n    *(undefined4 *)(ptr2 + 0x108) = param_4;\n    if (recordType == 2) {\n      *(uint *)(recordTableEntry + 0x18c) = recordIndex | *(uint *)(recordTableEntry + 0x18c);\n    }\n  }\n  *(int *)(recordTableEntry + 4) = recordIndex;\n  result = *(undefined4 *)ptr1;\n  *(undefined4 *)(recordTableEntry + (recordCount + 2) * 4) = recordValue;\n  do_nothing_08008af4(result);\n  return 0;\n}",
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "addOrUpdateRecord_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "check_and_update_flags_080027f4",
                "param_1": "pointer_to_pointer_to_uint",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "data_size",
                "param_5": "max_distance",
                "param_6": "base_address",
                "iVar1": "check_result",
                "uVar2": "return_value"
            },
            "code": "undefined4 check_and_update_flags_080027f4(uint **pointer_to_pointer_to_uint, byte flags, undefined2 data, short data_size, uint max_distance, int base_address)\n{\n  int check_result;\n  undefined4 return_value;\n  \n  **pointer_to_pointer_to_uint |= 0x400;\n  **pointer_to_pointer_to_uint |= 0x100;\n  \n  do {\n    if ((~(*pointer_to_pointer_to_uint)[5] & 1) == 0) {\n      check_result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((max_distance == 0xffffffff) ||\n          ((max_distance != 0 && (check_result = get_pointer_value(), (uint)(check_result - base_address) <= max_distance))));\n  \n  pointer_to_pointer_to_uint[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer_to_pointer_to_uint + 0x3d) = 0x20;\n  *(undefined *)((int)pointer_to_pointer_to_uint + 0x3e) = 0;\n  *(undefined *)(pointer_to_pointer_to_uint + 0xf) = 0;\n  check_result = 3;\n  \nLAB_080028d2:\n  \n  if (check_result == 0) {\n    (*pointer_to_pointer_to_uint)[4] = flags & 0xfe;\n    check_result = check_if_bit_is_set(pointer_to_pointer_to_uint, DAT_08002ad4, max_distance, base_address);\n    \n    if (check_result == 0) {\n      check_result = check_and_update(pointer_to_pointer_to_uint, max_distance, base_address, (*pointer_to_pointer_to_uint)[6]);\n      \n      if (check_result == 0) {\n        if (data_size == 1) {\n          (*pointer_to_pointer_to_uint)[4] = (uint)(byte)data;\n        }\n        else {\n          (*pointer_to_pointer_to_uint)[4] = (uint)(byte)((ushort)data >> 8);\n          check_result = check_and_update(pointer_to_pointer_to_uint, max_distance, base_address);\n          \n          if (check_result != 0) {\n            if (pointer_to_pointer_to_uint[0x10] == (uint *)0x4) {\n              **pointer_to_pointer_to_uint |= 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*pointer_to_pointer_to_uint)[4] = (uint)(byte)data;\n        }\n        \n        check_result = check_and_update(pointer_to_pointer_to_uint, max_distance, base_address);\n        \n        if (check_result == 0) {\n          **pointer_to_pointer_to_uint |= 0x100;\n          \n          do {\n            if ((~(*pointer_to_pointer_to_uint)[5] & 1) == 0) {\n              check_result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((max_distance == 0xffffffff) ||\n                  ((max_distance != 0 && (check_result = get_pointer_value(), (uint)(check_result - base_address) <= max_distance))));\n          \n          pointer_to_pointer_to_uint[0xc] = (uint *)0x0;\n          *(undefined *)((int)pointer_to_pointer_to_uint + 0x3d) = 0x20;\n          *(undefined *)((int)pointer_to_pointer_to_uint + 0x3e) = 0;\n          *(undefined *)(pointer_to_pointer_to_uint + 0xf) = 0;\n          check_result = 3;\n          \nLAB_08002a90:\n          \n          if (check_result == 0) {\n            (*pointer_to_pointer_to_uint)[4] = (uint)(flags | 1);\n            check_result = check_if_bit_is_set(pointer_to_pointer_to_uint, DAT_08002ad4, max_distance, base_address);\n            \n            if (check_result == 0) {\n              return_value = 0;\n            }\n            else if (pointer_to_pointer_to_uint[0x10] == (uint *)0x4) {\n              return_value = 1;\n            }\n            else {\n              return_value = 3;\n            }\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (pointer_to_pointer_to_uint[0x10] == (uint *)0x4) {\n          **pointer_to_pointer_to_uint |= 0x200;\n          return_value = 1;\n        }\n        else {\n          return_value = 3;\n        }\n      }\n      else if (pointer_to_pointer_to_uint[0x10] == (uint *)0x4) {\n        **pointer_to_pointer_to_uint |= 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (pointer_to_pointer_to_uint[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "shift_bits_and_concatenate_080003d4",
                "param_1": "input",
                "uVar1": "upper_bits",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp",
                "in_r12": "unused",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "unused"
            },
            "code": "unsigned long long shift_bits_and_concatenate_080003d4(uint input)\n{\n  unsigned int leading_zeroes = 0;\n  unsigned int shift_amount = 0;\n  unsigned int upper_bits = 0;\n  unsigned long long result = 0;\n  bool is_negative = false;\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input);\n  shift_amount = leading_zeroes + 21;\n  is_negative = shift_amount < 32;\n  if (is_negative) {\n    shift_amount = leading_zeroes + 12;\n    is_negative = shift_amount < 0;\n    if (is_negative) {\n      upper_bits = 32 - shift_amount;\n      result = (unsigned long long)input << shift_amount;\n      result |= 0U >> upper_bits;\n    } else {\n      result = (unsigned long long)input << shift_amount;\n    }\n  } else {\n    upper_bits = 32 - shift_amount;\n    result = (unsigned long long)input << shift_amount;\n    result |= 0U >> upper_bits;\n    result |= 0U << shift_amount;\n  }\n  if (shift_amount < 1075) {\n    result = result + (1074 - shift_amount) * 4294967296;\n  } else {\n    shift_amount = ~(1074 - shift_amount);\n    if (shift_amount > 30) {\n      result = (unsigned long long)input >> (shift_amount - 31);\n    } else {\n      int temp = shift_amount - 19;\n      if (temp == 0 || (temp < 0) != ((shift_amount - 31) < 0)) {\n        shift_amount++;\n        result = ((unsigned long long)input >> shift_amount) | ((unsigned long long)input << (32 - shift_amount));\n      } else {\n        result = ((unsigned long long)input >> (32 - (12 - temp))) | ((unsigned long long)input << (12 - temp));\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "shift_bits_and_concatenate_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_float_bits_from_params_08004d78",
                "param_1": "input_params[0]",
                "param_2": "input_params[1]",
                "param_3": "input_params[2]",
                "uVar1": "calculated_param_1",
                "uVar2": "reversed_param_2",
                "uVar3": "reversed_param_3",
                "uVar4": "result",
                "uVar5": "result_2",
                "DAT_08004e68": "0",
                "DAT_08004e60": "0x3f800000",
                "DAT_08004e64": "0x3f000000",
                "FUNC_08000e20": "not renamed",
                "reverseBits_08000418": "reverse_bits",
                "calculate_result_thunk_08005838": "calculate_result",
                "FUNC_080004c8": "not renamed",
                "FUNC_0800071c": "not renamed",
                "calculate_float_bits_080009fc": "calculate_float_bits"
            },
            "code": "void calculate_float_bits_from_params_08004d78(float* input_params, float* output_param_1, float* output_param_2) {\n  float param_1 = input_params[DAT_08004e68];\n  float param_2 = input_params[1];\n  float param_3 = input_params[2];\n  float reversed_param_2 = reverse_bits(param_2);\n  float reversed_param_3 = reverse_bits(param_3);\n  float result = calculate_result(param_1, reversed_param_2, param_3, reversed_param_3);\n  float calculated_param_1 = calculate_float_bits(result);\n  float reversed_param_1 = reverse_bits(param_1);\n  float result_2 = calculate_result(reversed_param_1, param_3, reversed_param_3, param_3);\n  float calculated_param_2 = calculate_float_bits(result_2);\n  *output_param_1 = calculated_param_1;\n  *output_param_2 = calculated_param_2;\n}\n\nfloat reverse_bits(float num) {\n  // implementation of reverseBits_DAT_08004e688DAT_08004e68DAT_08004e68DAT_08004e68418\n}\n\nfloat calculate_result(float param_1, float reversed_param_2, float param_3, float reversed_param_3) {\n  // implementation of calculate_result_thunk_DAT_08004e688DAT_08004e68DAT_08004e685838\n}\n\nfloat calculate_float_bits(float num) {\n  // implementation of calculate_float_bits_DAT_08004e688DAT_08004e68DAT_08004e68DAT_08004e689fc\n}",
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "FUN_0800071c",
                "FUN_08000418",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_from_params_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar4": "hash",
                "uVar3": "sign_bit",
                "uVar5": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08000c10(uint input) {\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint sign_bit = input & 0x80000000;\n  input = input & 0x7fffffff;\n  if (input == 0) {\n    return 0;\n  }\n  uint shift_amount = leading_zeroes_count - 8;\n  uint hash = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint left_shifted_input = input << (shift_amount & 0xff);\n    uint right_shifted_input = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < left_shifted_input);\n    hash = hash + left_shifted_input + right_shifted_input + carry;\n    if (left_shifted_input == 0x80000000) {\n      hash = hash & 0xfffffffe;\n    }\n    return hash;\n  }\n  uint left_shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  uint right_shifted_input = (input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)left_shifted_input >> 0x1f);\n  if ((left_shifted_input & 0x7fffffff) == 0) {\n    hash = hash & ~(left_shifted_input >> 0x1f);\n  }\n  hash = hash + right_shifted_input;\n  return hash;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78",
                "FUN_08004ae0"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_params_and_calculate_hashes_0800491c",
                "*param_1": "params",
                "local_13": "zero",
                "local_12": "buffer2",
                "local_11": "buffer3"
            },
            "code": "void initialize_params_and_calculate_hashes_0800491c(undefined4 *params)\n{\n  undefined zero = 0;\n  undefined buffer1 = 0;\n  undefined buffer2 = 0x10;\n  byte buffer3[5] = {8};\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&zero,1);\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&buffer2,1);\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,buffer3,1);\n  for(int i = 0; i < 11; i++){\n    params[i] = 0;\n  }\n  calculate_hashes_and_store_080049cc(params);\n  return;\n}",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_params_and_calculate_hashes_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "checkAndUpdateRecord_080078a0",
                "DAT_080078ac": "isRecordAvailable",
                "addOrUpdateRecord_080098c0": "addOrUpdateRecord",
                "PTR_LAB_08008818_1_080078b0": "recordPointer"
            },
            "code": "void checkAndUpdateRecord_080078a0(void)\n{\n  if (DAT_080078ac) {\n    addOrUpdateRecord_080098c0(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "checkAndUpdateRecord_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_and_clear_memory_080057e8",
                "iVar1": "index",
                "puVar2": "data_pointer",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_080057e8(void)\n{\n  int index;\n  undefined4 *data_pointer;\n  code *jump_table;\n\n  for (index = 0; PTR_DAT_08005820 + index < PTR_DAT_08005824; index += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + index) = *(undefined4 *)(DAT_0800581c + index);\n  }\n  for (data_pointer = (undefined4 *)PTR_DAT_08005828; data_pointer < PTR_DAT_0800582c; data_pointer++) {\n    *data_pointer = 0;\n  }\n  set_bit_and_clear_flags();\n  execute_functions();\n  jump_table = (code *)0x800581a;\n  initialize_and_run_system();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005d20",
                "FUN_08005224",
                "FUN_08005780"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_080057e8"
        }
    },
    "used_tokens": 146693,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_08004f2c",
            "FUN_08002c2e",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_080078c0",
            "FUN_080035a4",
            "FUN_08004ae0",
            "FUN_08004436",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003518",
            "FUN_0800172a",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_080055f4",
            "FUN_080016d0",
            "FUN_08004e74",
            "FUN_08005680",
            "FUN_08003540",
            "FUN_08005728",
            "FUN_08002bb4",
            "FUN_080009fc",
            "FUN_080078a0"
        ],
        [
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08000978",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_080009c0",
            "FUN_08009744",
            "FUN_080053b0",
            "FUN_08000ff4",
            "FUN_08001ab0",
            "FUN_08001762",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080027f4",
            "FUN_08004d78"
        ],
        [
            "FUN_08005348",
            "FUN_080049cc",
            "FUN_0800884c",
            "FUN_08001030",
            "FUN_08009444",
            "FUN_0800438a",
            "FUN_080009d4",
            "FUN_08001ccc",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_0800151c",
            "FUN_08009258",
            "FUN_08009530"
        ],
        [
            "FUN_08005598",
            "FUN_080014f0",
            "FUN_08004f78",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_080093a4",
            "FUN_0800491c"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_080052a0"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714"
        ],
        [
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}