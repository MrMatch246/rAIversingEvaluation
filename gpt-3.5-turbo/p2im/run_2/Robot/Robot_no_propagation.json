{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_and_convert_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateAndConvert_08000134(undefined4 input1,undefined4 input2)\n\n{\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_and_convert_08000134",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_checksum_08000158",
            "code": "\nulonglong calculateChecksum_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int bitsShifted;\n  byte carryFlag;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  int bitsShifted2;\n  uint resultVar1;\n  uint resultVar2;\n  uint resultVar3;\n  uint resultVar4;\n  bool isZeroFlag1;\n  bool isZeroFlag2;\n  bool isCarryFlag3;\n  \n  tempVar4 = input4 ^ 0x80000000;\n  resultVar1 = input2 << 1;\n  input4 = input4 << 1;\n  isZeroFlag1 = ((input2 ^ tempVar4) & 0x7fffffff) == 0;\n  isZeroFlag2 = isZeroFlag1 && input1 == input3;\n  if (!isZeroFlag1 || input1 != input3) {\n    isZeroFlag2 = (resultVar1 | input1) == 0;\n  }\n  if (!isZeroFlag2) {\n    isZeroFlag2 = (input4 | input3) == 0;\n  }\n  bitsShifted2 = (int)resultVar1 >> 0x15;\n  if (!isZeroFlag2) {\n    isZeroFlag2 = bitsShifted2 == -1;\n  }\n  bitsShifted = (int)input4 >> 0x15;\n  if (!isZeroFlag2) {\n    isZeroFlag2 = bitsShifted == -1;\n  }\n  if (isZeroFlag2) {\n    if (bitsShifted2 == -1 || bitsShifted == -1) {\n      resultVar1 = tempVar4;\n      resultVar3 = input3;\n      if (bitsShifted2 == -1) {\n        resultVar1 = input2;\n        resultVar3 = input1;\n      }\n      if (bitsShifted2 != -1 || bitsShifted != -1) {\n        input3 = resultVar3;\n        tempVar4 = resultVar1;\n      }\n      isZeroFlag2 = (resultVar3 | resultVar1 << 0xc) == 0;\n      if (isZeroFlag2) {\n        isZeroFlag2 = (input3 | tempVar4 << 0xc) == 0;\n      }\n      if (isZeroFlag2) {\n        isZeroFlag2 = resultVar1 == tempVar4;\n      }\n      if (!isZeroFlag2) {\n        resultVar1 = resultVar1 | 0x80000;\n      }\n      return CONCAT44(resultVar1,resultVar3);\n    }\n    if (((input2 ^ tempVar4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((resultVar1 | input1) == 0) {\n        input1 = input3;\n        input2 = tempVar4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != tempVar4) {\n      return 0;\n    }\n    if (resultVar1 >> 0x15 == 0) {\n      isZeroFlag2 = (input1 & 0x80000000) != 0;\n      tempVar4 = input2 * 2 + (uint)isZeroFlag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isZeroFlag2)) {\n        tempVar4 = tempVar4 | 0x80000000;\n      }\n      return CONCAT44(tempVar4,input1 << 1);\n    }\n    if (resultVar1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  resultVar1 = resultVar1 >> 0x15;\n  input4 = input4 >> 0x15;\n  resultVar3 = input4 - resultVar1;\n  isZeroFlag2 = resultVar3 != 0;\n  if (input4 < resultVar1) {\n    resultVar3 = -resultVar3;\n  }\n  resultVar2 = input1;\n  tempVar5 = input2;\n  if (isZeroFlag2 && resultVar1 <= input4) {\n    resultVar1 = resultVar1 + resultVar3;\n    resultVar2 = input3;\n    tempVar5 = tempVar4;\n    input3 = input1;\n    tempVar4 = input2;\n  }\n  if (0x36 < resultVar3) {\n    return CONCAT44(tempVar5,resultVar2);\n  }\n  tempVar2 = tempVar5 & 0xfffff | 0x100000;\n  if ((tempVar5 & 0x80000000) != 0) {\n    isZeroFlag2 = resultVar2 != 0;\n    resultVar2 = -resultVar2;\n    tempVar2 = -tempVar2 - (uint)isZeroFlag2;\n  }\n  tempVar5 = tempVar4 & 0xfffff | 0x100000;\n  if ((tempVar4 & 0x80000000) != 0) {\n    isZeroFlag2 = input3 != 0;\n    input3 = -input3;\n    tempVar5 = -tempVar5 - (uint)isZeroFlag2;\n  }\n  if (resultVar1 == resultVar3) {\n    tempVar5 = tempVar5 ^ 0x100000;\n    if (resultVar1 == 0) {\n      tempVar2 = tempVar2 ^ 0x100000;\n      resultVar1 = 1;\n    }\n    else {\n      resultVar3 = resultVar3 - 1;\n    }\n  }\n  tempVar4 = -resultVar3 + 0x20;\n  if ((int)resultVar3 < 0x21) {\n    resultVar4 = input3 << (tempVar4 & 0xff);\n    input3 = input3 >> (resultVar3 & 0xff);\n    tempVar1 = resultVar2 + input3;\n    tempVar3 = tempVar5 << (tempVar4 & 0xff);\n    tempVar4 = tempVar1 + tempVar3;\n    tempVar2 = tempVar2 + CARRY4(resultVar2,input3) + ((int)tempVar5 >> (resultVar3 & 0xff)) +\n            (uint)CARRY4(tempVar1,tempVar3);\n  }\n  else {\n    resultVar4 = tempVar5 << (-resultVar3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      resultVar4 = resultVar4 | 2;\n    }\n    tempVar5 = (int)tempVar5 >> (resultVar3 - 0x20 & 0xff);\n    tempVar4 = resultVar2 + tempVar5;\n    tempVar2 = tempVar2 + ((int)tempVar5 >> 0x1f) + (uint)CARRY4(resultVar2,tempVar5);\n  }\n  input2 = tempVar2 & 0x80000000;\n  resultVar3 = tempVar2;\n  if ((int)tempVar2 < 0) {\n    isZeroFlag2 = resultVar4 == 0;\n    resultVar4 = -resultVar4;\n    resultVar3 = -tempVar4;\n    tempVar4 = -(uint)!isZeroFlag2 - tempVar4;\n    resultVar3 = -(uint)(isZeroFlag2 <= resultVar3) - tempVar2;\n  }\n  if (0xfffff < resultVar3) {\n    resultVar2 = resultVar1 - 1;\n    if (0x1fffff < resultVar3) {\n      resultVar2 = resultVar3 & 1;\n      resultVar3 = resultVar3 >> 1;\n      carryFlag = (byte)tempVar4;\n      tempVar4 = (uint)(resultVar2 != 0) << 0x1f | tempVar4 >> 1;\n      resultVar4 = (uint)(carryFlag & 1) << 0x1f | resultVar4 >> 1;\n      resultVar2 = resultVar1;\n      if (0xffbfffff < resultVar1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isZeroFlag2 = 0x7fffffff < resultVar4;\n    if (resultVar4 == 0x80000000) {\n      isZeroFlag2 = (tempVar4 & 1) != 0;\n    }\n    return CONCAT44(resultVar3 + resultVar2 * 0x100000 + (uint)CARRY4(tempVar4,(uint)isZeroFlag2) | input2,\n                    tempVar4 + isZeroFlag2);\n  }\n  isZeroFlag1 = (resultVar4 & 0x80000000) != 0;\n  resultVar4 = resultVar4 << 1;\n  resultVar2 = tempVar4 * 2;\n  isZeroFlag2 = CARRY4(tempVar4,tempVar4);\n  tempVar4 = tempVar4 * 2 + (uint)isZeroFlag1;\n  resultVar3 = resultVar3 * 2 + (uint)(isZeroFlag2 || CARRY4(resultVar2,(uint)isZeroFlag1));\n  resultVar2 = resultVar1 - 2;\n  if ((resultVar3 & 0x100000) != 0) goto LAB_08000268;\n  tempVar5 = tempVar4;\n  resultVar1 = resultVar3;\n  if (resultVar3 == 0) {\n    tempVar5 = 0;\n    resultVar1 = tempVar4;\n  }\n  bitsShifted2 = LZCOUNT(resultVar1);\n  if (resultVar3 == 0) {\n    bitsShifted2 = bitsShifted2 + 0x20;\n  }\n  resultVar3 = bitsShifted2 - 0xb;\n  isCarryFlag3 = SBORROW4(resultVar3,0x20);\n  tempVar4 = bitsShifted2 - 0x2b;\n  isZeroFlag2 = (int)tempVar4 < 0;\n  isZeroFlag1 = tempVar4 == 0;\n  if ((int)resultVar3 < 0x20) {\n    isCarryFlag3 = SCARRY4(tempVar4,0xc);\n    bitsShifted2 = bitsShifted2 + -0x1f;\n    isZeroFlag2 = bitsShifted2 < 0;\n    isZeroFlag1 = bitsShifted2 == 0;\n    tempVar4 = resultVar3;\n    if (!isZeroFlag1 && isZeroFlag2 == isCarryFlag3) {\n      tempVar5 = resultVar1 << (resultVar3 & 0xff);\n      resultVar1 = resultVar1 >> (0xcU - bitsShifted2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZeroFlag1 || isZeroFlag2 != isCarryFlag3) {\n    resultVar4 = 0x20 - tempVar4;\n  }\n  resultVar1 = resultVar1 << (tempVar4 & 0xff);\n  if (isZeroFlag1 || isZeroFlag2 != isCarryFlag3) {\n    resultVar1 = resultVar1 | tempVar5 >> (resultVar4 & 0xff);\n  }\n  if (isZeroFlag1 || isZeroFlag2 != isCarryFlag3) {\n    tempVar5 = tempVar5 << (tempVar4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)resultVar3 <= (int)resultVar2) {\n    return CONCAT44(resultVar1 + (resultVar2 - resultVar3) * 0x100000 | input2,tempVar5);\n  }\n  tempVar4 = ~(resultVar2 - resultVar3);\n  if ((int)tempVar4 < 0x1f) {\n    bitsShifted2 = tempVar4 - 0x13;\n    if (bitsShifted2 != 0 && bitsShifted2 < 0 == SCARRY4(tempVar4 - 0x1f,0xc)) {\n      return CONCAT44(tempVar2,tempVar5 >> (0x20 - (0xcU - bitsShifted2) & 0xff) | resultVar1 << (0xcU - bitsShifted2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar4 = tempVar4 + 1;\n    return CONCAT44(input2 | resultVar1 >> (tempVar4 & 0xff),\n                    tempVar5 >> (tempVar4 & 0xff) | resultVar1 << (0x20 - tempVar4 & 0xff));\n  }\n  return CONCAT44(tempVar2,resultVar1 >> (tempVar4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_checksum_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "bitsShifted",
                "bVar2": "carryFlag",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "tempVar4",
                "uVar7": "tempVar5",
                "iVar8": "bitsShifted2",
                "uVar9": "resultVar1",
                "uVar10": "resultVar2",
                "uVar11": "resultVar3",
                "uVar12": "resultVar4",
                "bVar13": "isZeroFlag1",
                "bVar14": "isZeroFlag2",
                "bVar15": "isCarryFlag3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_addition_fraction_0800015c",
            "code": "\nulonglong calculate_addition_fraction_0800015c(uint numerator1,uint denominator1,uint numerator2,uint denominator2)\n\n{\n  int shiftedNumerator1;\n  byte carryBit;\n  uint tempValue1;\n  uint shiftedNumerator2;\n  uint tempValue2;\n  int shiftedNumerator1_bits;\n  uint numerator1_bits;\n  uint numerator1_temp;\n  uint denominator1_bits;\n  uint numerator2_bits;\n  uint numerator2_temp;\n  uint carryValue;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  \n  numerator1_bits = denominator1 << 1;\n  denominator1_bits = denominator2 << 1;\n  isEqual = ((denominator1 ^ denominator2) & 0x7fffffff) == 0;\n  isZero = isEqual && numerator1 == numerator2;\n  if (!isEqual || numerator1 != numerator2) {\n    isZero = (numerator1_bits | numerator1) == 0;\n  }\n  if (!isZero) {\n    isZero = (denominator1_bits | numerator2) == 0;\n  }\n  shiftedNumerator1_bits = (int)numerator1_bits >> 0x15;\n  if (!isZero) {\n    isZero = shiftedNumerator1_bits == -1;\n  }\n  shiftedNumerator1 = (int)denominator1_bits >> 0x15;\n  if (!isZero) {\n    isZero = shiftedNumerator1 == -1;\n  }\n  if (isZero) {\n    if (shiftedNumerator1_bits == -1 || shiftedNumerator1 == -1) {\n      denominator1_bits = denominator2;\n      numerator1_bits = numerator2;\n      if (shiftedNumerator1_bits == -1) {\n        denominator1_bits = denominator1;\n        numerator1_bits = numerator1;\n      }\n      if (shiftedNumerator1_bits != -1 || shiftedNumerator1 != -1) {\n        numerator2 = numerator1_bits;\n        denominator2 = denominator1_bits;\n      }\n      isZero = (numerator1_bits | denominator1_bits << 0xc) == 0;\n      if (isZero) {\n        isZero = (numerator2 | denominator2 << 0xc) == 0;\n      }\n      if (isZero) {\n        isZero = denominator1_bits == denominator2;\n      }\n      if (!isZero) {\n        denominator1_bits = denominator1_bits | 0x80000;\n      }\n      return CONCAT44(denominator1_bits,numerator1_bits);\n    }\n    if (((denominator1 ^ denominator2) & 0x7fffffff) != 0 || numerator1 != numerator2) {\n      if ((numerator1_bits | numerator1) == 0) {\n        numerator1 = numerator2;\n        denominator1 = denominator2;\n      }\n      return CONCAT44(denominator1,numerator1);\n    }\n    if (denominator1 != denominator2) {\n      return 0;\n    }\n    if (numerator1_bits >> 0x15 == 0) {\n      isZero = (numerator1 & 0x80000000) != 0;\n      denominator1_bits = denominator1 * 2 + (uint)isZero;\n      if (CARRY4(denominator1,denominator1) || CARRY4(denominator1 * 2,(uint)isZero)) {\n        denominator1_bits = denominator1_bits | 0x80000000;\n      }\n      return CONCAT44(denominator1_bits,numerator1 << 1);\n    }\n    if (numerator1_bits < 0xffc00000) {\n      return CONCAT44(denominator1 + 0x100000,numerator1);\n    }\n    denominator1 = denominator1 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(denominator1 | 0x7ff00000) << 0x20;\n  }\n  numerator1_bits = numerator1_bits >> 0x15;\n  denominator1_bits = denominator1_bits >> 0x15;\n  numerator2_bits = denominator1_bits - numerator1_bits;\n  isZero = numerator2_bits != 0;\n  if (denominator1_bits < numerator1_bits) {\n    numerator2_bits = -numerator2_bits;\n  }\n  numerator1_temp = numerator1;\n  tempValue2 = denominator1;\n  if (isZero && numerator1_bits <= denominator1_bits) {\n    numerator1_bits = numerator1_bits + numerator2_bits;\n    numerator1_temp = numerator2;\n    tempValue2 = denominator2;\n    numerator2 = numerator1;\n    denominator2 = denominator1;\n  }\n  if (0x36 < numerator2_bits) {\n    return CONCAT44(tempValue2,numerator1_temp);\n  }\n  denominator1_bits = tempValue2 & 0xfffff | 0x100000;\n  if ((tempValue2 & 0x80000000) != 0) {\n    isZero = numerator1_temp != 0;\n    numerator1_temp = -numerator1_temp;\n    denominator1_bits = -denominator1_bits - (uint)isZero;\n  }\n  tempValue2 = denominator2 & 0xfffff | 0x100000;\n  if ((denominator2 & 0x80000000) != 0) {\n    isZero = numerator2 != 0;\n    numerator2 = -numerator2;\n    tempValue2 = -tempValue2 - (uint)isZero;\n  }\n  if (numerator1_bits == numerator2_bits) {\n    tempValue2 = tempValue2 ^ 0x100000;\n    if (numerator1_bits == 0) {\n      denominator1_bits = denominator1_bits ^ 0x100000;\n      numerator1_bits = 1;\n    }\n    else {\n      numerator2_bits = numerator2_bits - 1;\n    }\n  }\n  carryValue = -numerator2_bits + 0x20;\n  if ((int)numerator2_bits < 0x21) {\n    numerator2_temp = numerator2 << (carryValue & 0xff);\n    numerator2 = numerator2 >> (numerator2_bits & 0xff);\n    tempValue1 = numerator1_temp + numerator2;\n    shiftedNumerator2 = tempValue2 << (carryValue & 0xff);\n    carryValue = tempValue1 + shiftedNumerator2;\n    denominator1_bits = denominator1_bits + CARRY4(numerator1_temp,numerator2) + ((int)tempValue2 >> (numerator2_bits & 0xff)) +\n            (uint)CARRY4(tempValue1,shiftedNumerator2);\n  }\n  else {\n    numerator2_temp = tempValue2 << (-numerator2_bits + 0x40 & 0xff);\n    if (numerator2 != 0) {\n      numerator2_temp = numerator2_temp | 2;\n    }\n    tempValue2 = (int)tempValue2 >> (numerator2_bits - 0x20 & 0xff);\n    carryValue = numerator1_temp + tempValue2;\n    denominator1_bits = denominator1_bits + ((int)tempValue2 >> 0x1f) + (uint)CARRY4(numerator1_temp,tempValue2);\n  }\n  denominator1 = denominator1_bits & 0x80000000;\n  numerator2_bits = denominator1_bits;\n  if ((int)denominator1_bits < 0) {\n    isZero = numerator2_temp == 0;\n    numerator2_temp = -numerator2_temp;\n    numerator2_bits = -carryValue;\n    carryValue = -(uint)!isZero - carryValue;\n    numerator2_bits = -(uint)(isZero <= numerator2_bits) - denominator1_bits;\n  }\n  if (0xfffff < numerator2_bits) {\n    numerator1_temp = numerator1_bits - 1;\n    if (0x1fffff < numerator2_bits) {\n      denominator1_bits = numerator2_bits & 1;\n      numerator2_bits = numerator2_bits >> 1;\n      carryBit = (byte)carryValue;\n      carryValue = (uint)(denominator1_bits != 0) << 0x1f | carryValue >> 1;\n      numerator2_temp = (uint)(carryBit & 1) << 0x1f | numerator2_temp >> 1;\n      numerator1_temp = numerator1_bits;\n      if (0xffbfffff < numerator1_bits * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isZero = 0x7fffffff < numerator2_temp;\n    if (numerator2_temp == 0x80000000) {\n      isZero = (carryValue & 1) != 0;\n    }\n    return CONCAT44(numerator2_bits + numerator1_temp * 0x100000 + (uint)CARRY4(carryValue,(uint)isZero) | denominator1,\n                    carryValue + isZero);\n  }\n  isEqual = (numerator2_temp & 0x80000000) != 0;\n  numerator2_temp = numerator2_temp << 1;\n  numerator1_temp = carryValue * 2;\n  isZero = CARRY4(carryValue,carryValue);\n  carryValue = carryValue * 2 + (uint)isEqual;\n  numerator2_bits = numerator2_bits * 2 + (uint)(isZero || CARRY4(numerator1_temp,(uint)isEqual));\n  numerator1_temp = numerator1_bits - 2;\n  if ((numerator2_bits & 0x100000) != 0) goto LAB_08000268;\n  tempValue2 = carryValue;\n  numerator1_bits = numerator2_bits;\n  if (numerator2_bits == 0) {\n    tempValue2 = 0;\n    numerator1_bits = carryValue;\n  }\n  shiftedNumerator1_bits = LZCOUNT(numerator1_bits);\n  if (numerator2_bits == 0) {\n    shiftedNumerator1_bits = shiftedNumerator1_bits + 0x20;\n  }\n  carryValue = shiftedNumerator1_bits - 0xb;\n  isNegative = SBORROW4(carryValue,0x20);\n  numerator2_bits = shiftedNumerator1_bits - 0x2b;\n  isZero = (int)numerator2_bits < 0;\n  isEqual = numerator2_bits == 0;\n  if ((int)carryValue < 0x20) {\n    isNegative = SCARRY4(numerator2_bits,0xc);\n    shiftedNumerator1_bits = shiftedNumerator1_bits + -0x1f;\n    isZero = shiftedNumerator1_bits < 0;\n    isEqual = shiftedNumerator1_bits == 0;\n    numerator2_bits = carryValue;\n    if (!isEqual && isZero == isNegative) {\n      tempValue2 = numerator1_bits << (carryValue & 0xff);\n      numerator1_bits = numerator1_bits >> (0xcU - shiftedNumerator1_bits & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isEqual || isZero != isNegative) {\n    numerator2_temp = 0x20 - numerator2_bits;\n  }\n  numerator1_bits = numerator1_bits << (numerator2_bits & 0xff);\n  if (isEqual || isZero != isNegative) {\n    numerator1_bits = numerator1_bits | tempValue2 >> (numerator2_temp & 0xff);\n  }\n  if (isEqual || isZero != isNegative) {\n    tempValue2 = tempValue2 << (numerator2_bits & 0xff);\n  }\nLAB_080002e0:\n  if ((int)carryValue <= (int)numerator1_temp) {\n    return CONCAT44(numerator1_bits + (numerator1_temp - carryValue) * 0x100000 | denominator1,tempValue2);\n  }\n  numerator2_bits = ~(numerator1_temp - carryValue);\n  if ((int)numerator2_bits < 0x1f) {\n    shiftedNumerator1_bits = numerator2_bits - 0x13;\n    if (shiftedNumerator1_bits != 0 && shiftedNumerator1_bits < 0 == SCARRY4(numerator2_bits - 0x1f,0xc)) {\n      return CONCAT44(denominator1_bits,tempValue2 >> (0x20 - (0xcU - shiftedNumerator1_bits) & 0xff) | numerator1_bits << (0xcU - shiftedNumerator1_bits & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    numerator2_bits = numerator2_bits + 1;\n    return CONCAT44(denominator1 | numerator1_bits >> (numerator2_bits & 0xff),\n                    tempValue2 >> (numerator2_bits & 0xff) | numerator1_bits << (0x20 - numerator2_bits & 0xff));\n  }\n  return CONCAT44(denominator1_bits,numerator1_bits >> (numerator2_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_addition_fraction_0800015c",
                "param_1": "numerator1",
                "param_2": "denominator1",
                "param_3": "numerator2",
                "param_4": "denominator2",
                "iVar1": "shiftedNumerator1",
                "bVar2": "carryBit",
                "uVar3": "tempValue1",
                "uVar4": "shiftedNumerator2",
                "uVar5": "tempValue2",
                "iVar6": "shiftedNumerator1_bits",
                "uVar7": "numerator1_bits",
                "uVar8": "numerator1_temp",
                "uVar9": "denominator1_bits",
                "uVar10": "numerator2_bits",
                "uVar11": "numerator2_temp",
                "uVar12": "carryValue",
                "bVar13": "isEqual",
                "bVar14": "isZero",
                "bVar15": "isNegative"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "shift_and_concatenate_080003d4",
            "code": "\nulonglong shift_and_concatenate_080003d4(uint input_value)\n\n{\n  uint concatenated_value;\n  uint shift_amount;\n  int leading_zero_count;\n  uint shifted_amount;\n  uint bit_mask;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  concatenated_value = 0;\n  leading_zero_count = LZCOUNT(input_value);\n  shifted_amount = leading_zero_count + 0x15;\n  is_overflow = SBORROW4(shifted_amount,0x20);\n  shift_amount = leading_zero_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shifted_amount < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zero_count + 1 == 0;\n    shift_amount = shifted_amount;\n    if (!is_zero && is_overflow == false) {\n      concatenated_value = input_value << shifted_amount;\n      input_value = input_value >> (0xcU - (leading_zero_count + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    bit_mask = 0x20 - shift_amount;\n  }\n  input_value = input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input_value = input_value | 0U >> (bit_mask & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    concatenated_value = 0 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if (shifted_amount < 0x433) {\n    return CONCAT44(input_value + (0x432 - shifted_amount) * 0x100000,concatenated_value);\n  }\n  shift_amount = ~(0x432 - shifted_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input_value >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zero_count = shift_amount - 0x13;\n  if (leading_zero_count == 0 || leading_zero_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input_value >> (shift_amount & 0xff),\n                    concatenated_value >> (shift_amount & 0xff) | input_value << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(concatenated_value >> (0x20 - (0xcU - leading_zero_count) & 0xff) | input_value << (0xcU - leading_zero_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "shift_and_concatenate_080003d4",
                "param_1": "input_value",
                "uVar1": "concatenated_value",
                "uVar2": "shift_amount",
                "iVar3": "leading_zero_count",
                "uVar4": "shifted_amount",
                "in_r12": "bit_mask",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "extract_bits_080003f4",
            "code": "\nulonglong extract_bits_080003f4(uint input)\n\n{\n  uint count;\n  uint abs_input;\n  uint shift;\n  int leading_zeroes;\n  uint mask_shift;\n  uint sign_bit;\n  uint remainder;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  count = 0;\n  leading_zeroes = LZCOUNT(abs_input);\n  mask_shift = leading_zeroes + 0x15;\n  is_carry = SBORROW4(mask_shift,0x20);\n  shift = leading_zeroes - 0xb;\n  is_negative = (int)shift < 0;\n  is_zero = shift == 0;\n  if (mask_shift < 0x20) {\n    is_carry = SCARRY4(shift,0xc);\n    is_negative = false;\n    is_zero = leading_zeroes + 1 == 0;\n    shift = mask_shift;\n    if (!is_zero && is_carry == false) {\n      count = abs_input << mask_shift;\n      abs_input = abs_input >> (0xcU - (leading_zeroes + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remainder = 0x20 - shift;\n  }\n  abs_input = abs_input << (shift & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remainder & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    count = 0 << (shift & 0xff);\n  }\nLAB_080002e0:\n  if (mask_shift < 0x433) {\n    return CONCAT44(abs_input + (0x432 - mask_shift) * 0x100000 | sign_bit,count);\n  }\n  shift = ~(0x432 - mask_shift);\n  if (0x1e < (int)shift) {\n    return CONCAT44(input,abs_input >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeroes = shift - 0x13;\n  if (leading_zeroes == 0 || leading_zeroes < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift & 0xff),\n                    count >> (shift & 0xff) | abs_input << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(input,count >> (0x20 - (0xcU - leading_zeroes) & 0xff) | abs_input << (0xcU - leading_zeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "extract_bits_080003f4",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "abs_input",
                "uVar3": "shift",
                "iVar4": "leading_zeroes",
                "uVar5": "mask_shift",
                "uVar6": "sign_bit",
                "in_r12": "remainder",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "extract_bits_08000418",
            "code": "\nulonglong extract_bits_08000418(uint input_value,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  uint bit_31;\n  uint upper_shifted;\n  uint bit_31_shifted;\n  uint shifted_value;\n  uint shifted_input;\n  int leading_zeros;\n  uint trailing_ones;\n  uint remaining_bits;\n  bool is_negative_shift;\n  bool is_zero_shift;\n  bool is_negative_sub;\n  \n  shifted_input = input_value << 1;\n  is_zero_shift = shifted_input == 0;\n  bit_31 = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shifted_value = (uint)((int)shifted_input >> 3) >> 1;\n  bit_31_shifted = bit_31 | shifted_value;\n  input_value = input_value << 0x1d;\n  if (!is_zero_shift) {\n    param_4 = shifted_input & 0xff000000;\n    is_zero_shift = param_4 == 0;\n  }\n  if (!is_zero_shift) {\n    is_zero_shift = param_4 == 0xff000000;\n  }\n  if (!is_zero_shift) {\n    return result(bit_31_shifted,input_value) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return result(bit_31_shifted,input_value);\n  }\n  if (param_4 == 0xff000000) {\n    return result(bit_31_shifted,input_value) | 0x8000000000000;\n  }\n  upper_shifted = input_value;\n  shifted_input = shifted_value;\n  if (shifted_value == 0) {\n    upper_shifted = 0;\n    shifted_input = input_value;\n  }\n  leading_zeros = count_leading_zeros(shifted_input);\n  if (shifted_value == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  trailing_ones = leading_zeros - 0xb;\n  is_negative_sub = is_sub_negative(trailing_ones,0x20);\n  shifted_value = leading_zeros - 0x2b;\n  is_zero_shift = (int)shifted_value < 0;\n  is_negative_shift = shifted_value == 0;\n  if ((int)trailing_ones < 0x20) {\n    is_negative_sub = is_carry(shifted_value,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    is_zero_shift = leading_zeros < 0;\n    is_negative_shift = leading_zeros == 0;\n    shifted_value = trailing_ones;\n    if (!is_negative_shift && is_zero_shift == is_negative_sub) {\n      upper_shifted = shifted_input << (trailing_ones & 0xff);\n      shifted_input = shifted_input >> (0xcU - leading_zeros & 0xff);\n      goto shifted_input_calculation;\n    }\n  }\n  if (is_negative_shift || is_zero_shift != is_negative_sub) {\n    remaining_bits = 0x20 - shifted_value;\n  }\n  shifted_input = shifted_input << (shifted_value & 0xff);\n  if (is_negative_shift || is_zero_shift != is_negative_sub) {\n    shifted_input = shifted_input | upper_shifted >> (remaining_bits & 0xff);\n  }\n  if (is_negative_shift || is_zero_shift != is_negative_sub) {\n    upper_shifted = upper_shifted << (shifted_value & 0xff);\n  }\nshifted_input_calculation:\n  if ((int)trailing_ones < 0x381) {\n    return result(shifted_input + (0x380 - trailing_ones) * 0x100000 | bit_31,upper_shifted);\n  }\n  shifted_value = ~(0x380 - trailing_ones);\n  if (0x1e < (int)shifted_value) {\n    return result(bit_31_shifted,shifted_input >> (shifted_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shifted_value - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_carry(shifted_value - 0x1f,0xc)) {\n    shifted_value = shifted_value + 1;\n    return result(bit_31 | shifted_input >> (shifted_value & 0xff),\n                    upper_shifted >> (shifted_value & 0xff) | shifted_input << (0x20 - shifted_value & 0xff));\n  }\n  return result(bit_31_shifted,upper_shifted >> (0x20 - (0xcU - leading_zeros) & 0xff) | shifted_input << (0xcU - leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "extract_bits_08000418",
                "param_1": "input_value",
                "uVar1": "bit_31",
                "uVar2": "upper_shifted",
                "uVar3": "bit_31_shifted",
                "uVar4": "shifted_value",
                "uVar5": "shifted_input",
                "iVar6": "leading_zeros",
                "uVar7": "trailing_ones",
                "in_r12": "remaining_bits",
                "bVar8": "is_negative_shift",
                "bVar9": "is_zero_shift",
                "bVar10": "is_negative_sub",
                "CONCAT44": "result",
                "LZCOUNT": "count_leading_zeros",
                "SBORROW4": "is_sub_negative",
                "SCARRY4": "is_carry",
                "LAB_080002e0": "shifted_input_calculation"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_floating_point_080004c8",
            "code": "\nulonglong calculateFloatingPoint_080004c8(undefined4 unsign_sign_bit,uint exponent_significand,uint sign_bit,uint exponent)\n\n{\n  ulonglong product_lower_32;\n  longlong temp;\n  uint product_upper_32;\n  uint exponent_lower;\n  int sum_of_exponents;\n  uint temp_exponent;\n  uint temp_exponent_2;\n  uint sum_of_exponents_2;\n  uint temp_exponent_lower;\n  bool is_zero;\n  bool is_negative_expected;\n  bool is_negative_actual;\n  ulonglong product;\n  \n  product = CONCAT44(exponent_significand,unsign_sign_bit);\n  sum_of_exponents_2 = 0x7ff;\n  exponent_lower = exponent_significand >> 0x14 & 0x7ff;\n  is_zero = exponent_lower == 0;\n  if (!is_zero) {\n    temp_exponent_2 = exponent >> 0x14 & 0x7ff;\n    is_zero = temp_exponent_2 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent_lower == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp_exponent_2 == 0x7ff;\n  }\n  if (is_zero) {\n    product = FUN_080006a4();\n  }\n  product_upper_32 = (uint)(product >> 0x20);\n  sum_of_exponents = exponent_lower + temp_exponent_2;\n  exponent_lower = product_upper_32 ^ exponent;\n  product_upper_32 = product_upper_32 & ~(sum_of_exponents_2 << 0x15);\n  exponent = exponent & ~(sum_of_exponents_2 << 0x15);\n  is_zero = ((uint)product | product_upper_32 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (sign_bit | exponent << 0xc) == 0;\n  }\n  product_upper_32 = product_upper_32 | 0x100000;\n  exponent = exponent | 0x100000;\n  if (is_zero) {\n    sign_bit = (uint)product | sign_bit;\n    exponent = (exponent_lower & 0x80000000 | product_upper_32) ^ exponent;\n    exponent_lower = sum_of_exponents_2 >> 1;\n    is_negative_actual = SBORROW4(sum_of_exponents,exponent_lower);\n    temp_exponent = sum_of_exponents - exponent_lower;\n    is_zero = temp_exponent == 0;\n    product_upper_32 = temp_exponent;\n    if (!is_zero && (int)exponent_lower <= sum_of_exponents) {\n      is_negative_actual = SBORROW4(sum_of_exponents_2,temp_exponent);\n      product_upper_32 = sum_of_exponents_2 - temp_exponent;\n      is_zero = sum_of_exponents_2 == temp_exponent;\n    }\n    if (!is_zero && (int)product_upper_32 < 0 == is_negative_actual) {\n      exponent = exponent | temp_exponent * 0x100000;\n    }\n    if (!is_zero && (int)product_upper_32 < 0 == is_negative_actual) {\n      return CONCAT44(exponent,sign_bit);\n    }\n    exponent = exponent | 0x100000;\n    sum_of_exponents_2 = 0;\n    is_negative_actual = SBORROW4(temp_exponent,1);\n    temp_exponent = temp_exponent - 1;\n    is_zero = temp_exponent == 0;\n    exponent_lower = temp_exponent;\n  }\n  else {\n    product_lower_32 = (product & 0xffffffff) * (ulonglong)sign_bit;\n    product = (product & 0xffffffff) * (ulonglong)exponent +\n             (ulonglong)product_upper_32 * (ulonglong)sign_bit + (product_lower_32 >> 0x20);\n    temp_exponent_lower = (uint)product;\n    temp = (ulonglong)product_upper_32 * (ulonglong)exponent + (product >> 0x20);\n    sum_of_exponents_2 = (uint)temp;\n    product_upper_32 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)product_lower_32 != 0) {\n      temp_exponent_lower = temp_exponent_lower | 1;\n    }\n    temp_exponent = (sum_of_exponents + -0x3ff) - (uint)(product_upper_32 < 0x200);\n    if (product_upper_32 < 0x200) {\n      is_zero = (temp_exponent_lower & 0x80000000) != 0;\n      temp_exponent_lower = temp_exponent_lower << 1;\n      temp = CONCAT44(product_upper_32 * 2 + (uint)(CARRY4(sum_of_exponents_2,sum_of_exponents_2) || CARRY4(sum_of_exponents_2 * 2,(uint)is_zero)),\n                       sum_of_exponents_2 * 2 + (uint)is_zero);\n    }\n    exponent = exponent_lower & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    sign_bit = (uint)temp << 0xb | temp_exponent_lower >> 0x15;\n    sum_of_exponents_2 = temp_exponent_lower * 0x800;\n    is_negative_expected = 0xfc < temp_exponent;\n    is_negative_actual = SBORROW4(temp_exponent,0xfd);\n    product_upper_32 = temp_exponent - 0xfd;\n    is_zero = product_upper_32 == 0;\n    exponent_lower = product_upper_32;\n    if (is_negative_expected && !is_zero) {\n      is_negative_expected = 0x6ff < product_upper_32;\n      is_negative_actual = SBORROW4(product_upper_32,0x700);\n      exponent_lower = temp_exponent - 0x7fd;\n      is_zero = product_upper_32 == 0x700;\n    }\n    if (!is_negative_expected || is_zero) {\n      is_zero = 0x7fffffff < sum_of_exponents_2;\n      if (sum_of_exponents_2 == 0x80000000) {\n        is_zero = (temp_exponent_lower >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(exponent + temp_exponent * 0x100000 + (uint)CARRY4(sign_bit,(uint)is_zero),sign_bit + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)exponent_lower < 0 == is_negative_actual) {\n    return (ulonglong)(exponent & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_negative_expected = SCARRY4(temp_exponent,0x36);\n  is_zero = (int)(temp_exponent + 0x36) < 0;\n  is_negative_actual = temp_exponent == 0xffffffca;\n  if (is_negative_actual || is_zero != is_negative_expected) {\n    sign_bit = 0;\n  }\n  if (is_negative_actual || is_zero != is_negative_expected) {\n    exponent = exponent & 0x80000000;\n  }\n  if (is_negative_actual || is_zero != is_negative_expected) {\n    return CONCAT44(exponent,sign_bit);\n  }\n  exponent_lower = -temp_exponent;\n  product_upper_32 = exponent_lower - 0x20;\n  if (0x1f < (int)exponent_lower) {\n    temp_exponent = sign_bit >> (product_upper_32 & 0xff) | exponent << (0x20 - product_upper_32 & 0xff);\n    exponent_lower = (exponent >> (product_upper_32 & 0xff) & ~((exponent & 0x80000000) >> (product_upper_32 & 0xff))) -\n            ((int)temp_exponent >> 0x1f);\n    if ((sum_of_exponents_2 | sign_bit << (0x20 - product_upper_32 & 0xff) | temp_exponent << 1) == 0) {\n      exponent_lower = exponent_lower & ~(temp_exponent >> 0x1f);\n    }\n    return CONCAT44(exponent,exponent_lower) & 0x80000000ffffffff;\n  }\n  sum_of_exponents = exponent_lower - 0x14;\n  if (sum_of_exponents == 0 || sum_of_exponents < 0 != SCARRY4(product_upper_32,0xc)) {\n    temp_exponent_lower = sign_bit << (temp_exponent + 0x20 & 0xff);\n    product_upper_32 = sign_bit >> (exponent_lower & 0xff) | exponent << (temp_exponent + 0x20 & 0xff);\n    temp_exponent = product_upper_32 + -((int)temp_exponent_lower >> 0x1f);\n    if ((sum_of_exponents_2 | temp_exponent_lower << 1) == 0) {\n      temp_exponent = temp_exponent & ~(temp_exponent_lower >> 0x1f);\n    }\n    return CONCAT44((exponent & 0x80000000) +\n                    ((exponent & 0x7fffffff) >> (exponent_lower & 0xff)) +\n                    (uint)CARRY4(product_upper_32,-((int)temp_exponent_lower >> 0x1f)),temp_exponent);\n  }\n  exponent_lower = 0xc - sum_of_exponents;\n  temp_exponent = sign_bit << (exponent_lower & 0xff);\n  exponent_lower = sign_bit >> (0x20 - exponent_lower & 0xff) | exponent << (exponent_lower & 0xff);\n  product_upper_32 = exponent_lower + -((int)temp_exponent >> 0x1f);\n  if ((sum_of_exponents_2 | temp_exponent << 1) == 0) {\n    product_upper_32 = product_upper_32 & ~(temp_exponent >> 0x1f);\n  }\n  return CONCAT44((exponent & 0x80000000) + (uint)CARRY4(exponent_lower,-((int)temp_exponent >> 0x1f)),product_upper_32);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_floating_point_080004c8",
                "param_1": "unsign_sign_bit",
                "param_2": "exponent_significand",
                "param_3": "sign_bit",
                "param_4": "exponent",
                "uVar1": "product_lower_32",
                "lVar2": "temp",
                "uVar3": "product_upper_32",
                "uVar4": "exponent_lower",
                "iVar5": "sum_of_exponents",
                "uVar6": "temp_exponent",
                "unaff_r5": "temp_exponent_2",
                "uVar7": "sum_of_exponents_2",
                "uVar8": "temp_exponent_lower",
                "bVar9": "is_zero",
                "bVar10": "is_negative_expected",
                "bVar11": "is_negative_actual",
                "uVar12": "product"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_shifted_xor_080006a4",
            "code": "\nulonglong calculate_shifted_xor_080006a4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint shifted_num1;\n  uint temp1;\n  uint shifted_temp4;\n  uint shifted_temp3;\n  uint temp4;\n  bool isZero;\n  \n  shifted_temp4 = temp4 & num4 >> 0x14;\n  if (temp1 != temp4 && shifted_temp4 != temp4) {\n    isZero = (num1 | num2 << 1) == 0;\n    if (!isZero) {\n      isZero = (num3 | num4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      shifted_temp3 = num2 & 0x80000000;\n      do {\n        shifted_num1 = num1 & 0x80000000;\n        num1 = num1 << 1;\n        num2 = num2 * 2 + (uint)(shifted_num1 != 0);\n      } while ((num2 & 0x100000) == 0);\n      num2 = num2 | shifted_temp3;\n      if (shifted_temp4 != 0) {\n        return CONCAT44(num2,num1);\n      }\n    }\n    do {\n      shifted_temp4 = num3 & 0x80000000;\n      num3 = num3 << 1;\n      num4 = num4 * 2 + (uint)(shifted_temp4 != 0);\n    } while ((num4 & 0x100000) == 0);\n    return CONCAT44(num2,num1);\n  }\n  isZero = (num1 | num2 << 1) == 0;\n  if (isZero) {\n    num2 = num4;\n    num1 = num3;\n  }\n  if (!isZero) {\n    isZero = (num3 | num4 << 1) == 0;\n  }\n  shifted_temp3 = num2;\n  if (((!isZero) && ((temp1 != temp4 || ((num1 | num2 << 0xc) == 0)))) &&\n     ((shifted_temp4 != temp4 || (num1 = num3, shifted_temp3 = num4, (num3 | num4 << 0xc) == 0)))) {\n    return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(shifted_temp3,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_shifted_xor_080006a4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "shifted_num1",
                "unaff_r4": "temp1",
                "uVar2": "shifted_temp4",
                "uVar3": "shifted_temp3",
                "in_r12": "temp4",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 signAndExponent,uint mantissa,uint operand1,uint operand2)\n\n{\n  uint x1;\n  uint x2;\n  uint x3;\n  uint x4;\n  uint x5;\n  uint x6;\n  uint x7;\n  int difference;\n  uint normDifference;\n  uint unaff_r5;\n  uint normOperand1;\n  uint normOperand2;\n  uint fractionalDiff;\n  uint maximumExponent;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(mantissa,signAndExponent);\n  maximumExponent = 0x7ff;\n  x7 = mantissa >> 0x14 & 0x7ff;\n  flag1 = x7 == 0;\n  if (!flag1) {\n    unaff_r5 = operand2 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = x7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_0800088a();\n  }\n  normDifference = (uint)((ulonglong)result >> 0x20);\n  normOperand2 = (uint)result;\n  difference = x7 - unaff_r5;\n  if ((operand1 | operand2 << 0xc) == 0) {\n    x7 = (normDifference ^ operand2) & 0x80000000 | normDifference & 0xfffff;\n    flag3 = SCARRY4(difference,maximumExponent >> 1);\n    normDifference = difference + (maximumExponent >> 1);\n    flag1 = (int)normDifference < 0;\n    flag2 = normDifference == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(maximumExponent,normDifference);\n      flag1 = (int)(maximumExponent - normDifference) < 0;\n      flag2 = maximumExponent == normDifference;\n    }\n    if (!flag2 && flag1 == flag3) {\n      x7 = x7 | normDifference * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(x7,normOperand2);\n    }\n    x7 = x7 | 0x100000;\n    maximumExponent = 0;\n    flag2 = SBORROW4(normDifference,1);\n    normDifference = normDifference - 1;\n    flag1 = normDifference == 0;\n    x3 = normDifference;\n  }\n  else {\n    x3 = (operand2 << 0xc) >> 4 | 0x10000000 | operand1 >> 0x18;\n    maximumExponent = operand1 << 8;\n    normOperand1 = (normDifference << 0xc) >> 4 | 0x10000000 | normOperand2 >> 0x18;\n    normOperand2 = normOperand2 * 0x100;\n    x7 = (normDifference ^ operand2) & 0x80000000;\n    flag1 = x3 <= normOperand1;\n    if (normOperand1 == x3) {\n      flag1 = maximumExponent <= normOperand2;\n    }\n    difference = difference + (uint)flag1;\n    normDifference = difference + 0x3fd;\n    if (flag1 == false) {\n      x3 = x3 >> 1;\n      maximumExponent = (uint)((operand1 >> 0x18 & 1) != 0) << 0x1f | maximumExponent >> 1;\n    }\n    fractionalDiff = normOperand2 - maximumExponent;\n    normOperand1 = (normOperand1 - x3) - (uint)(normOperand2 < maximumExponent);\n    x4 = x3 >> 1;\n    x1 = (uint)((x3 & 1) != 0) << 0x1f | maximumExponent >> 1;\n    normOperand2 = 0x100000;\n    x3 = 0x80000;\n    while( true ) {\n      flag1 = x1 <= fractionalDiff;\n      if (x4 < normOperand1 || normOperand1 - x4 < (uint)flag1) {\n        fractionalDiff = fractionalDiff - x1;\n        normOperand2 = normOperand2 | x3;\n        normOperand1 = (normOperand1 - x4) - (uint)!flag1;\n      }\n      x5 = x4 >> 1;\n      x1 = (uint)((x4 & 1) != 0) << 0x1f | x1 >> 1;\n      flag2 = x1 <= fractionalDiff;\n      flag1 = normOperand1 - x5 < (uint)flag2;\n      maximumExponent = normOperand1;\n      if (x5 < normOperand1 || flag1) {\n        fractionalDiff = fractionalDiff - x1;\n        maximumExponent = (normOperand1 - x5) - (uint)!flag2;\n      }\n      if (x5 < normOperand1 || flag1) {\n        normOperand2 = normOperand2 | x3 >> 1;\n      }\n      normOperand1 = x4 >> 2;\n      x2 = (uint)((x5 & 1) != 0) << 0x1f | x1 >> 1;\n      flag2 = x2 <= fractionalDiff;\n      flag1 = maximumExponent - normOperand1 < (uint)flag2;\n      x5 = maximumExponent;\n      if (normOperand1 < maximumExponent || flag1) {\n        fractionalDiff = fractionalDiff - x2;\n        x5 = (maximumExponent - normOperand1) - (uint)!flag2;\n      }\n      if (normOperand1 < maximumExponent || flag1) {\n        normOperand2 = normOperand2 | x3 >> 2;\n      }\n      x6 = x4 >> 3;\n      x1 = (uint)((normOperand1 & 1) != 0) << 0x1f | x2 >> 1;\n      flag2 = x1 <= fractionalDiff;\n      flag1 = x5 - x6 < (uint)flag2;\n      normOperand1 = x5;\n      if (x6 < x5 || flag1) {\n        fractionalDiff = fractionalDiff - x1;\n        normOperand1 = (x5 - x6) - (uint)!flag2;\n      }\n      if (x6 < x5 || flag1) {\n        normOperand2 = normOperand2 | x3 >> 3;\n      }\n      maximumExponent = normOperand1 | fractionalDiff;\n      if (maximumExponent == 0) break;\n      normOperand1 = normOperand1 << 4 | fractionalDiff >> 0x1c;\n      fractionalDiff = fractionalDiff << 4;\n      x4 = x4 & 0xfffffff8 | x1 >> 0x1d;\n      x1 = (x2 >> 1) << 3;\n      x3 = x3 >> 4;\n      if (x3 == 0) {\n        x6 = x4;\n        if ((x7 & 0x100000) != 0) goto LAB_0800083a;\n        x7 = x7 | normOperand2;\n        normOperand2 = 0;\n        x3 = 0x80000000;\n      }\n    }\n    if ((x7 & 0x100000) == 0) {\n      x7 = x7 | normOperand2;\n      normOperand2 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < normDifference;\n    flag2 = SBORROW4(normDifference,0xfd);\n    x4 = difference + 0x300;\n    flag1 = x4 == 0;\n    x3 = x4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < x4;\n      flag2 = SBORROW4(x4,0x700);\n      x3 = difference - 0x400;\n      flag1 = x4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = x6 <= normOperand1;\n      if (normOperand1 == x6) {\n        flag1 = x1 <= fractionalDiff;\n      }\n      if (normOperand1 == x6 && fractionalDiff == x1) {\n        flag1 = (normOperand2 & 1) != 0;\n      }\n      return CONCAT44(x7 + normDifference * 0x100000 + (uint)CARRY4(normOperand2,(uint)flag1),normOperand2 + flag1);\n    }\n  }\n  if (!flag1 && (int)x3 < 0 == flag2) {\n    return (ulonglong)(x7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(normDifference,0x36);\n  flag1 = (int)(normDifference + 0x36) < 0;\n  flag2 = normDifference == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    normOperand2 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    x7 = x7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(x7,normOperand2);\n  }\n  x3 = -normDifference;\n  normOperand1 = x3 - 0x20;\n  if (0x1f < (int)x3) {\n    x3 = normOperand2 >> (normOperand1 & 0xff) | x7 << (0x20 - normOperand1 & 0xff);\n    normDifference = (x7 >> (normOperand1 & 0xff) & ~((x7 & 0x80000000) >> (normOperand1 & 0xff))) -\n            ((int)x3 >> 0x1f);\n    if ((maximumExponent | normOperand2 << (0x20 - normOperand1 & 0xff) | x3 << 1) == 0) {\n      normDifference = normDifference & ~(x3 >> 0x1f);\n    }\n    return CONCAT44(x7,normDifference) & 0x80000000ffffffff;\n  }\n  difference = x3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(normOperand1,0xc)) {\n    normDifference = 0xc - difference;\n    x3 = normOperand2 << (normDifference & 0xff);\n    normOperand2 = normOperand2 >> (0x20 - normDifference & 0xff) | x7 << (normDifference & 0xff);\n    normDifference = normOperand2 + -((int)x3 >> 0x1f);\n    if ((maximumExponent | x3 << 1) == 0) {\n      normDifference = normDifference & ~(x3 >> 0x1f);\n    }\n    return CONCAT44((x7 & 0x80000000) + (uint)CARRY4(normOperand2,-((int)x3 >> 0x1f)),normDifference);\n  }\n  normOperand1 = normOperand2 << (normDifference + 0x20 & 0xff);\n  normOperand2 = normOperand2 >> (x3 & 0xff) | x7 << (normDifference + 0x20 & 0xff);\n  normDifference = normOperand2 + -((int)normOperand1 >> 0x1f);\n  if ((maximumExponent | normOperand1 << 1) == 0) {\n    normDifference = normDifference & ~(normOperand1 >> 0x1f);\n  }\n  return CONCAT44((x7 & 0x80000000) +\n                  ((x7 & 0x7fffffff) >> (x3 & 0xff)) +\n                  (uint)CARRY4(normOperand2,-((int)normOperand1 >> 0x1f)),normDifference);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "signAndExponent",
                "param_2": "mantissa",
                "param_3": "operand1",
                "param_4": "operand2",
                "uVar1": "x1",
                "uVar2": "x2",
                "uVar3": "x3",
                "uVar4": "x4",
                "uVar5": "x5",
                "uVar6": "x6",
                "uVar7": "x7",
                "iVar8": "difference",
                "uVar9": "normDifference",
                "uVar10": "normOperand1",
                "uVar11": "normOperand2",
                "uVar12": "fractionalDiff",
                "uVar13": "maximumExponent",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "decode_and_shift_0800088a",
            "code": "\nulonglong decode_and_shift_0800088a(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint constant_1;\n  uint shifted_input_4;\n  uint temp;\n  uint constant_2;\n  bool is_zero;\n  \n  shifted_input_4 = constant_2 & input_4 >> 0x14;\n  temp = input_2;\n  if (constant_1 != constant_2 || shifted_input_4 != constant_2) {\n    if (constant_1 == constant_2) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, temp = input_4, shifted_input_4 != constant_2)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (shifted_input_4 == constant_2) {\n      input_1 = input_3;\n      temp = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input_1 | input_2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input_3 | input_4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (constant_1 == 0) {\n          temp = input_2 & 0x80000000;\n          do {\n            bit_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp;\n          if (shifted_input_4 != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          temp = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto LAB_080006fc;\n      if ((input_3 | input_4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(temp,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "decode_and_shift_0800088a",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "constant_1",
                "uVar2": "shifted_input_4",
                "uVar3": "temp",
                "in_r12": "constant_2",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_equality_and_comparison_080008fc",
            "code": "\nuint checkEqualityAndComparison_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_equality_and_comparison_080008fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid execute_function_08000978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  FUN_08000988(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "initialize_08000988",
            "code": "\nundefined4 initialize_08000988(undefined4 input)\n\n{\n  FUN_080008fc();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000988": "initialize_08000988",
                "param_1": "input"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_character_exists_08000998",
            "code": "\nbool checkIfCharacterExists_08000998(void)\n\n{\n  char characterExists;\n  \n  FUN_08000988();\n  return characterExists != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_character_exists_08000998",
                "in_ZR": "characterExists"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_null_terminated_080009ac",
            "code": "\nbool check_if_null_terminated_080009ac(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_null_terminated_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_carry_and_zero_080009c0",
            "code": "\nbool check_carry_and_zero_080009c0(void)\n\n{\n  undefined is_zero;\n  undefined has_carry;\n  \n  FUN_08000988();\n  return !(bool)has_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_carry_and_zero_080009c0",
                "in_ZR": "is_zero",
                "in_CY": "has_carry"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_zero_and_carry_flag_080009d4",
            "code": "\nbool checkZeroAndCarryFlag_080009d4(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_08000978();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_zero_and_carry_flag_080009d4",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_string_empty_080009e8",
            "code": "\nbool checkIfStringEmpty_080009e8(void)\n\n{\n  char inputChar;\n  \n  FUN_08000978();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_string_empty_080009e8",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_080009fc",
            "code": "\nuint calculateFloat_080009fc(uint inputA,uint inputB)\n\n{\n  uint result;\n  uint temp;\n  uint newTemp;\n  uint checkValue;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp = inputB * 2;\n  isLessThanThreshold = temp < 0x70000000;\n  newTemp = temp + 0x90000000;\n  result = newTemp;\n  if (!isLessThanThreshold) {\n    checkValue = temp + 0x8fe00000;\n    result = checkValue;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && newTemp >= 0x200000) {\n    isZero = checkValue == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || newTemp < 0x200000) || 0x1fc00000 < checkValue) || isZero) {\n    if ((inputB & 0x40000000) != 0) {\n      if (((int)temp >> 0x15 == -1) && ((inputA | inputB << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputB & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp + 0x92e00000) < 0 != SCARRY4(newTemp,0x2e00000)) {\n      return inputB & 0x80000000;\n    }\n    temp = 0x18 - (temp + 0x92e00000 >> 0x15);\n    result = inputA >> (temp & 0xff);\n    if (inputA << (0x20 - temp & 0xff) != 0) {\n      result = result | 1;\n    }\n    newTemp = inputB & 0x1fffff | 0x100000;\n    inputA = result | newTemp << (0x20 - temp & 0xff);\n    newTemp = (newTemp >> (temp & 0xff)) << 1;\n  }\n  result = (inputB & 0x80000000 | inputA >> 0x1d) + newTemp * 4 + (uint)(0x7fffffff < inputA * 8);\n  if (inputA * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "inputA",
                "param_2": "inputB",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "newTemp",
                "in_r12": "checkValue",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_new_float_08000aa4",
            "code": "\nuint calculate_new_float_08000aa4(uint input_float,uint mask,undefined4 constant,uint shift)\n\n{\n  int shifted_input;\n  int shifted_mask;\n  uint temp1;\n  uint temp2;\n  uint result;\n  uint shifted_result;\n  uint difference;\n  bool check;\n  \n  temp1 = mask ^ 0x80000000;\n  result = input_float << 1;\n  check = result == 0;\n  if (!check) {\n    shift = mask << 1;\n    check = shift == 0;\n  }\n  if (!check) {\n    check = result == shift;\n  }\n  shifted_input = (int)result >> 0x18;\n  if (!check) {\n    check = shifted_input == -1;\n  }\n  if (!check) {\n    check = (int)shift >> 0x18 == -1;\n  }\n  if (check) {\n    shifted_mask = (int)(mask << 1) >> 0x18;\n    if (shifted_input == -1 || shifted_mask == -1) {\n      result = temp1;\n      if (shifted_input == -1) {\n        result = input_float;\n      }\n      if (shifted_input != -1 || shifted_mask != -1) {\n        temp1 = result;\n      }\n      check = (result & 0x7fffff) == 0;\n      if (check) {\n        check = (temp1 & 0x7fffff) == 0;\n      }\n      if (check) {\n        check = result == temp1;\n      }\n      if (!check) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input_float ^ temp1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input_float = temp1;\n      }\n      return input_float;\n    }\n    if (input_float != temp1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp1 = input_float << 1;\n      if ((input_float & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result < 0xfe000000) {\n      return input_float + 0x800000;\n    }\n    input_float = input_float & 0x80000000;\nLAB_08000bde:\n    return input_float | 0x7f800000;\n  }\n  result = result >> 0x18;\n  shift = shift >> 0x18;\n  difference = shift - result;\n  check = difference != 0;\n  shifted_result = result;\n  if (check && result <= shift) {\n    shifted_result = result + difference;\n  }\n  if (check && result <= shift) {\n    temp1 = temp1 ^ input_float;\n  }\n  if (check && result <= shift) {\n    input_float = input_float ^ temp1;\n  }\n  if (check && result <= shift) {\n    temp1 = temp1 ^ input_float;\n  }\n  if (shift < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_float;\n  }\n  result = input_float & 0xffffff | 0x800000;\n  if ((input_float & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (shifted_result == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (shifted_result == 0) {\n      result = result ^ 0x800000;\n      shifted_result = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input_float = result & 0x80000000;\n  if ((int)result < 0) {\n    check = temp2 != 0;\n    temp2 = -temp2;\n    result = -result - (uint)check;\n  }\n  if (result < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result = result * 2 + (uint)(temp1 != 0);\n    temp1 = shifted_result - 2;\n    if ((result & 0x800000) == 0) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result = result >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result = result + (temp1 - difference) * 0x800000;\n      }\n      return result | input_float;\n    }\n  }\n  else {\n    temp1 = shifted_result - 1;\n    if (0xffffff < result) {\n      temp1 = result & 1;\n      result = result >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = shifted_result;\n      if (0xfd < shifted_result) goto LAB_08000bde;\n    }\n  }\n  result = result + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input_float;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_new_float_08000aa4",
                "param_1": "input_float",
                "param_2": "mask",
                "param_3": "constant",
                "param_4": "shift",
                "iVar1": "shifted_input",
                "iVar2": "shifted_mask",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result",
                "uVar6": "shifted_result",
                "uVar7": "difference",
                "bVar8": "check"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_08000aa8",
            "code": "\nuint calculateFloat_08000aa8(uint input1,uint input2,undefined4 flags,uint result)\n\n{\n  int input1Sign;\n  int input2Sign;\n  uint input1Fraction;\n  uint input2Fraction;\n  uint fraction1;\n  uint fraction2;\n  bool isZero;\n  \n  input2Fraction = input1 << 1;\n  isZero = input2Fraction == 0;\n  if (!isZero) {\n    result = input2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = input2Fraction == result;\n  }\n  input1Sign = (int)input2Fraction >> 0x18;\n  if (!isZero) {\n    isZero = input1Sign == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    input2Sign = (int)(input2 << 1) >> 0x18;\n    if (input1Sign == -1 || input2Sign == -1) {\n      input2Fraction = input2;\n      if (input1Sign == -1) {\n        input2Fraction = input1;\n      }\n      if (input1Sign != -1 || input2Sign != -1) {\n        input2 = input2Fraction;\n      }\n      isZero = (input2Fraction & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = input2Fraction == input2;\n      }\n      if (!isZero) {\n        input2Fraction = input2Fraction | 0x400000;\n      }\n      return input2Fraction;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (input2Fraction == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((input2Fraction & 0xff000000) == 0) {\n      input2Fraction = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        input2Fraction = input2Fraction | 0x80000000;\n      }\n      return input2Fraction;\n    }\n    if (input2Fraction < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  input2Fraction = input2Fraction >> 0x18;\n  result = result >> 0x18;\n  fraction2 = result - input2Fraction;\n  isZero = fraction2 != 0;\n  fraction1 = input2Fraction;\n  if (isZero && input2Fraction <= result) {\n    fraction1 = input2Fraction + fraction2;\n  }\n  if (isZero && input2Fraction <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && input2Fraction <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && input2Fraction <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < input2Fraction) {\n    fraction2 = -fraction2;\n  }\n  if (0x19 < fraction2) {\n    return input1;\n  }\n  input2Fraction = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    input2Fraction = -input2Fraction;\n  }\n  input1Fraction = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    input1Fraction = -input1Fraction;\n  }\n  if (fraction1 == fraction2) {\n    input1Fraction = input1Fraction ^ 0x800000;\n    if (fraction1 == 0) {\n      input2Fraction = input2Fraction ^ 0x800000;\n      fraction1 = 1;\n    }\n    else {\n      fraction2 = fraction2 - 1;\n    }\n  }\n  input2Fraction = input2Fraction + ((int)input1Fraction >> (fraction2 & 0xff));\n  input1Fraction = input1Fraction << (0x20 - fraction2 & 0xff);\n  input1 = input2Fraction & 0x80000000;\n  if ((int)input2Fraction < 0) {\n    isZero = input1Fraction != 0;\n    input1Fraction = -input1Fraction;\n    input2Fraction = -input2Fraction - (uint)isZero;\n  }\n  if (input2Fraction < 0x800000) {\n    fraction2 = input1Fraction & 0x80000000;\n    input1Fraction = input1Fraction << 1;\n    input2Fraction = input2Fraction * 2 + (uint)(fraction2 != 0);\n    fraction2 = fraction1 - 2;\n    if ((input2Fraction & 0x800000) == 0) {\n      fraction1 = leadingZeroCount(input2Fraction) - 8;\n      input2Fraction = input2Fraction << (fraction1 & 0xff);\n      if ((int)fraction2 < (int)fraction1) {\n        input2Fraction = input2Fraction >> (-(fraction2 - fraction1) & 0xff);\n      }\n      else {\n        input2Fraction = input2Fraction + (fraction2 - fraction1) * 0x800000;\n      }\n      return input2Fraction | input1;\n    }\n  }\n  else {\n    fraction2 = fraction1 - 1;\n    if (0xffffff < input2Fraction) {\n      fraction2 = input2Fraction & 1;\n      input2Fraction = input2Fraction >> 1;\n      input1Fraction = (uint)(fraction2 != 0) << 0x1f | input1Fraction >> 1;\n      fraction2 = fraction1;\n      if (0xfd < fraction1) goto LAB_08000bde;\n    }\n  }\n  input2Fraction = input2Fraction + fraction2 * 0x800000 + (uint)(0x7fffffff < input1Fraction);\n  if (input1Fraction == 0x80000000) {\n    input2Fraction = input2Fraction & 0xfffffffe;\n  }\n  return input2Fraction | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flags",
                "param_4": "result",
                "iVar1": "input1Sign",
                "iVar2": "input2Sign",
                "uVar3": "input1Fraction",
                "uVar4": "input2Fraction",
                "uVar5": "fraction1",
                "uVar6": "fraction2",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_result_08000c08",
            "code": "\nuint calculateResult_08000c08(uint input)\n\n{\n  uint leadingZeroCount;\n  uint shiftAmount;\n  int baseValue;\n  uint shiftedBit;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroCount = LZCOUNT(input);\n  shiftAmount = leadingZeroCount - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroCount) {\n    shiftedBit = 0 << (shiftAmount & 0xff);\n    leadingZeroCount = baseValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedBit);\n    if (shiftedBit == 0x80000000) {\n      leadingZeroCount = leadingZeroCount & 0xfffffffe;\n    }\n    return leadingZeroCount;\n  }\n  shiftAmount = input << leadingZeroCount + 0x18;\n  leadingZeroCount = baseValue + ((input >> (0x20 - (leadingZeroCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroCount = leadingZeroCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroCount;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_result_08000c08",
                "param_1": "input",
                "uVar1": "leadingZeroCount",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "shiftedBit"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "convert_unsigned_int_08000c10",
            "code": "\nuint convertUnsignedInt_08000c10(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint sign;\n  int result;\n  \n  sign = input & 0x80000000;\n  if ((int)sign < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((sign | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    sign = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      sign = sign & 0xfffffffe;\n    }\n    return sign;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  sign = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    sign = sign & ~(shiftAmount >> 0x1f);\n  }\n  return sign;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "convert_unsigned_int_08000c10",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "sign",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_float_sum_08000cb8",
            "code": "\nuint calculateFloatSum_08000cb8(uint operand1,uint operand2,undefined4 param3,uint operand3)\n\n{\n  longlong product;\n  uint result;\n  uint shiftOperand1;\n  int shiftSum;\n  int shiftDiff;\n  uint shiftedProduct;\n  int shift;\n  uint modifiedOperand;\n  bool isZero;\n  bool isNegative;\n  \n  shiftOperand1 = operand1 >> 0x17 & 0xff;\n  isZero = shiftOperand1 == 0;\n  if (!isZero) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    isZero = operand3 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftOperand1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = operand3 == 0xff;\n  }\n  if (isZero) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    if (shiftOperand1 == 0xff || operand3 == 0xff) {\n      isZero = operand1 == 0 || operand1 == 0x80000000;\n      result = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        isZero = operand2 == 0;\n        result = operand1;\n      }\n      if (!isZero) {\n        isZero = operand2 == 0x80000000;\n      }\n      modifiedOperand = result;\n      if (((isZero) || ((shiftOperand1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((operand3 == 0xff && (modifiedOperand = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return modifiedOperand | 0x7fc00000;\n      }\n      result = result ^ operand2;\n      goto LAB_08000e08;\n    }\n    isZero = (operand1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (operand2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    isZero = shiftOperand1 == 0;\n    result = operand1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        operand1 = operand1 << 1;\n        isZero = (operand1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shiftOperand1 = shiftOperand1 - 1;\n    }\n    operand1 = operand1 | result;\n    isZero = operand3 == 0;\n    result = operand2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        operand2 = operand2 << 1;\n        isZero = (operand2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      operand3 = operand3 - 1;\n    }\n    operand2 = operand2 | result;\n  }\n  shiftSum = shiftOperand1 + operand3;\n  modifiedOperand = operand1 ^ operand2;\n  shiftOperand1 = operand1 << 9;\n  isZero = shiftOperand1 == 0;\n  if (!isZero) {\n    operand2 = operand2 << 9;\n    isZero = operand2 == 0;\n  }\n  if (isZero) {\n    if (shiftOperand1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    result = modifiedOperand & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    isNegative = SBORROW4(shiftSum,0x7f);\n    shiftDiff = shiftSum + -0x7f;\n    isZero = shiftDiff == 0;\n    shift = shiftDiff;\n    if (!isZero && 0x7e < shiftSum) {\n      isNegative = SBORROW4(0xff,shiftDiff);\n      shift = 0xff - shiftDiff;\n      isZero = shiftDiff == 0xff;\n    }\n    if (!isZero && shift < 0 == isNegative) {\n      result = result | shiftDiff * 0x800000;\n    }\n    if (!isZero && shift < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    shiftedProduct = 0;\n    isNegative = SBORROW4(shiftDiff,1);\n    modifiedOperand = shiftSum - 0x80;\n    isZero = modifiedOperand == 0;\n    shiftOperand1 = modifiedOperand;\n  }\n  else {\n    product = (ulonglong)(shiftOperand1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    shiftedProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | shiftedProduct >> 0x1f;\n      shiftedProduct = shiftedProduct << 1;\n    }\n    result = modifiedOperand & 0x80000000 | result;\n    modifiedOperand = (shiftSum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(modifiedOperand,0xfd);\n    isZero = modifiedOperand == 0xfd;\n    shiftOperand1 = modifiedOperand - 0xfd;\n    if (modifiedOperand < 0xfe) {\n      result = result + modifiedOperand * 0x800000 + (uint)(0x7fffffff < shiftedProduct);\n      if (shiftedProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)shiftOperand1 < 0 != isNegative) {\n    isZero = (int)(modifiedOperand + 0x19) < 0;\n    if (modifiedOperand == 0xffffffe7 || isZero != SCARRY4(modifiedOperand,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (modifiedOperand != 0xffffffe7 && isZero == SCARRY4(modifiedOperand,0x19)) {\n      shiftOperand1 = (result << 1) >> (-modifiedOperand & 0xff);\n      modifiedOperand = result << (modifiedOperand + 0x20 & 0xff);\n      shiftOperand1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftOperand1 >> 1) + (uint)((byte)shiftOperand1 & 1);\n      if ((shiftedProduct | modifiedOperand << 1) == 0) {\n        shiftOperand1 = shiftOperand1 & ~(modifiedOperand >> 0x1f);\n      }\n      return shiftOperand1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_float_sum_08000cb8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "param3",
                "param_4": "operand3",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shiftOperand1",
                "iVar4": "shiftSum",
                "iVar5": "shiftDiff",
                "uVar6": "shiftedProduct",
                "iVar7": "shift",
                "uVar8": "modifiedOperand",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_float_value_08000e20",
            "code": "\nuint calculateFloatValue_08000e20(uint number1,uint number2,undefined4 value1,uint value2)\n\n{\n  uint exponent1;\n  uint exponent2;\n  int difference;\n  uint tmp;\n  int tmp2;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool isOverflow;\n  \n  exponent2 = number1 >> 0x17 & 0xff;\n  isZero = exponent2 == 0;\n  if (!isZero) {\n    value2 = number2 >> 0x17 & 0xff;\n    isZero = value2 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = value2 == 0xff;\n  }\n  if (isZero) {\n    value2 = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (exponent2 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, value2 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (value2 == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (number1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (number2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent2 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number1 = number1 << 1;\n            isZero = (number1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent2 = exponent2 - 1;\n        }\n        number1 = number1 | result;\n        isZero = value2 == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number2 = number2 << 1;\n            isZero = (number2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          value2 = value2 - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_08000e38;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_08000e38:\n    difference = exponent2 - value2;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      isOverflow = SCARRY4(difference,0x7f);\n      tmp2 = difference + 0x7f;\n      isZero = tmp2 < 0;\n      isNegative = tmp2 == 0;\n      if (!isNegative && isZero == isOverflow) {\n        isOverflow = SBORROW4(0xff,tmp2);\n        isZero = 0xff - tmp2 < 0;\n        isNegative = tmp2 == 0xff;\n      }\n      if (!isNegative && isZero == isOverflow) {\n        number1 = number1 | tmp2 * 0x800000;\n      }\n      if (!isNegative && isZero == isOverflow) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      exponent2 = 0;\n      isNegative = SBORROW4(tmp2,1);\n      tmp = difference + 0x7e;\n      isZero = tmp == 0;\n      result = tmp;\n    }\n    else {\n      exponent1 = (number2 << 9) >> 4 | 0x10000000;\n      exponent2 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      isZero = exponent1 <= exponent2;\n      if (!isZero) {\n        exponent2 = exponent2 << 1;\n      }\n      tmp = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (exponent1 <= exponent2) {\n          exponent2 = exponent2 - exponent1;\n          number1 = number1 | result;\n        }\n        isZero = exponent1 >> 1 <= exponent2;\n        if (isZero) {\n          exponent2 = exponent2 - (exponent1 >> 1);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 1;\n        }\n        isZero = exponent1 >> 2 <= exponent2;\n        if (isZero) {\n          exponent2 = exponent2 - (exponent1 >> 2);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 2;\n        }\n        isZero = exponent1 >> 3 <= exponent2;\n        if (isZero) {\n          exponent2 = exponent2 - (exponent1 >> 3);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 3;\n        }\n        exponent2 = exponent2 * 0x10;\n        isZero = exponent2 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(tmp,0xfd);\n      isZero = tmp == 0xfd;\n      result = tmp - 0xfd;\n      if (tmp < 0xfe) {\n        number1 = number1 + tmp * 0x800000 + (uint)(exponent1 <= exponent2);\n        if (exponent2 - exponent1 == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(tmp + 0x19) < 0;\n      if (tmp == 0xffffffe7 || isZero != SCARRY4(tmp,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (tmp == 0xffffffe7 || isZero != SCARRY4(tmp,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-tmp & 0xff);\n      tmp = number1 << (tmp + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent2 | tmp << 1) == 0) {\n        result = result & ~(tmp >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_float_value_08000e20",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "exponent1",
                "uVar2": "exponent2",
                "iVar3": "difference",
                "uVar4": "tmp",
                "iVar5": "tmp2",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "isOverflow"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "check_overflow_08000f68",
            "code": "\nuint check_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_overflow;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_overflow = -1 < (int)combined_inputs;\n  if (is_overflow) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_overflow && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_overflow || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "check_overflow_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_overflow",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "initialize_data_08000fc8",
            "code": "\nvoid initializeData_08000fc8(undefined4 data1,undefined4 data2)\n\n{\n  FUN_08000fd0(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "initialize_data_08000fc8",
                "param_1": "data1",
                "param_2": "data2"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "combine_parameters_08000fd0",
            "code": "\nundefined8 combineParameters_08000fd0(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  FUN_08000f68();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "combine_parameters_08000fd0",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_string_empty_08000ff4",
            "code": "\nbool isStringEmpty_08000ff4(void)\n\n{\n  char inputChar;\n  \n  FUN_08000fd0();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_string_empty_08000ff4",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_end_of_string_08001030",
            "code": "\nbool check_end_of_string_08001030(void)\n\n{\n  char character;\n  \n  FUN_08000fc8();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_end_of_string_08001030",
                "in_CY": "character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "validate_param_08001044",
            "code": "\nuint validate_param_08001044(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "validate_param_08001044",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *copyPtr;\n  uint remainingBytes;\n  uint remainingWords;\n  bool flag;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remainingWords = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          copyPtr = srcPtr;\n          flag = remainingWords != 0;\n          remainingWords = remainingWords - 1;\n          *(undefined *)copyPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)copyPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (flag);\n        *(undefined *)(undefined4 *)((int)copyPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)copyPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)copyPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingWords = 4 - ((uint)destination & 3);\n      size = size - remainingWords;\n      destPtr = destination;\n      copyPtr = source;\n      if (((uint)destination & 1) != 0) {\n        copyPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = destPtr;\n      source = copyPtr;\n      if ((remainingWords & 2) != 0) {\n        source = (undefined4 *)((int)copyPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)copyPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingBytes = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      flag = 0xf < remainingBytes;\n      remainingBytes = remainingBytes - 0x10;\n    } while (flag);\n  }\n  remainingWords = remainingBytes + 0xc;\n  copyPtr = srcPtr;\n  destPtr = source;\n  if (0xfffffff3 < remainingBytes) {\n    do {\n      source = destPtr + 1;\n      *copyPtr = *destPtr;\n      flag = 3 < remainingWords;\n      remainingWords = remainingWords - 4;\n      srcPtr = copyPtr + 1;\n      copyPtr = copyPtr + 1;\n      destPtr = source;\n    } while (flag);\n  }\nLAB_08001108:\n  if (remainingWords + 4 != 0) {\n    destPtr = srcPtr;\n    copyPtr = source;\n    if ((remainingWords & 1) != 0) {\n      copyPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((remainingWords + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)copyPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "copyPtr",
                "uVar4": "remainingBytes",
                "uVar5": "remainingWords",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_conditions_08001170",
            "code": "\nundefined4 check_conditions_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_conditions_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "perform_computation_0800119c",
            "code": "\nuint performComputation_0800119c(uint input1,uint input2)\n\n{\n  uint result1;\n  int result2;\n  uint result3;\n  \n  result2 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < result2) {\n      return 0;\n    }\n    result1 = result2 >> 0x15;\n    result3 = -result1 - 0x3e1;\n    if (result1 < 0xfffffc20 && result3 != 0) {\n      result1 = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (result3 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result1 = -result1;\n      }\n      return result1;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "perform_computation_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_validity_080011ec",
            "code": "\nundefined8 checkValidity_080011ec(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return combineInputs(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_validity_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "CONCAT44": "combineInputs"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_remainder_0800121c(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong temp;\n  uint dividend_low;\n  uint quotient_low;\n  uint quotient_high;\n  int shift_amount;\n  uint quotient_combined;\n  uint dividend_combined;\n  uint temp_combined;\n  uint *remainder_ptr;\n  uint quotient_high_temp;\n  uint divisor_low;\n  uint temp_multiplier;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      dividend_combined = divisor;\n      if (shift_amount != 0) {\n        dividend_combined = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      divisor_low = dividend_combined >> 0x10;\n      temp_combined = dividend_high / divisor_low;\n      quotient_high_temp = temp_combined * (dividend_combined & 0xffff);\n      quotient_combined = dividend >> 0x10 | (dividend_high - divisor_low * temp_combined) * 0x10000;\n      quotient_low = temp_combined;\n      if (quotient_combined <= quotient_high_temp && quotient_high_temp - quotient_combined != 0) {\n        carry_flag = CARRY4(dividend_combined,quotient_combined);\n        quotient_combined = dividend_combined + quotient_combined;\n        quotient_low = temp_combined - 1;\n        if ((carry_flag == false) && (quotient_combined <= quotient_high_temp && quotient_high_temp - quotient_combined != 0)) {\n          quotient_low = temp_combined - 2;\n          quotient_combined = quotient_combined + dividend_combined;\n        }\n      }\n      dividend_low = (quotient_combined - quotient_high_temp) / divisor_low;\n      quotient_high = dividend_low * (dividend_combined & 0xffff);\n      temp_combined = dividend & 0xffff | ((quotient_combined - quotient_high_temp) - divisor_low * dividend_low) * 0x10000;\n      quotient_combined = dividend_low;\n      if (temp_combined <= quotient_high && quotient_high - temp_combined != 0) {\n        carry_flag = CARRY4(dividend_combined,temp_combined);\n        temp_combined = dividend_combined + temp_combined;\n        quotient_combined = dividend_low - 1;\n        if ((carry_flag == false) && (temp_combined <= quotient_high && quotient_high - temp_combined != 0)) {\n          quotient_combined = dividend_low - 2;\n          temp_combined = temp_combined + dividend_combined;\n        }\n      }\n      quotient_combined = quotient_combined | quotient_low << 0x10;\n      remainder_ptr = (uint *)0x0;\n      temp_combined = temp_combined - quotient_high;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        remainder_ptr = (uint *)0x1;\n        dividend_high = dividend_high - divisor;\n        divisor_low = divisor >> 0x10;\n        dividend_low = divisor & 0xffff;\n        dividend_combined = divisor;\n      }\n      else {\n        dividend_combined = divisor << shift_amount;\n        quotient_combined = dividend_high >> (0x20U - shift_amount & 0xff);\n        divisor_low = dividend_combined >> 0x10;\n        quotient_high_temp = quotient_combined / divisor_low;\n        dividend_low = dividend_combined & 0xffff;\n        quotient_high = quotient_high_temp * dividend_low;\n        temp_combined = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_low = temp_combined >> 0x10 | (quotient_combined - divisor_low * quotient_high_temp) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_combined = quotient_high_temp;\n        if (quotient_low <= quotient_high && quotient_high - quotient_low != 0) {\n          carry_flag = CARRY4(dividend_combined,quotient_low);\n          quotient_low = dividend_combined + quotient_low;\n          quotient_combined = quotient_high_temp - 1;\n          if ((carry_flag == false) && (quotient_low <= quotient_high && quotient_high - quotient_low != 0)) {\n            quotient_combined = quotient_high_temp - 2;\n            quotient_low = quotient_low + dividend_combined;\n          }\n        }\n        quotient_high_temp = (quotient_low - quotient_high) / divisor_low;\n        temp_multiplier = quotient_high_temp * dividend_low;\n        dividend_high = temp_combined & 0xffff | ((quotient_low - quotient_high) - divisor_low * quotient_high_temp) * 0x10000;\n        quotient_low = quotient_high_temp;\n        if (dividend_high <= temp_multiplier && temp_multiplier - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_combined,dividend_high);\n          dividend_high = dividend_combined + dividend_high;\n          quotient_low = quotient_high_temp - 1;\n          if ((carry_flag == false) && (dividend_high <= temp_multiplier && temp_multiplier - dividend_high != 0)) {\n            quotient_low = quotient_high_temp - 2;\n            dividend_high = dividend_high + dividend_combined;\n          }\n        }\n        dividend_high = dividend_high - temp_multiplier;\n        remainder_ptr = (uint *)(quotient_low | quotient_combined << 0x10);\n      }\n      quotient_high_temp = dividend_high / divisor_low;\n      quotient_combined = dividend_low * quotient_high_temp;\n      temp_combined = dividend >> 0x10 | (dividend_high - divisor_low * quotient_high_temp) * 0x10000;\n      quotient_low = quotient_high_temp;\n      if (temp_combined <= quotient_combined && quotient_combined - temp_combined != 0) {\n        carry_flag = CARRY4(dividend_combined,temp_combined);\n        temp_combined = dividend_combined + temp_combined;\n        quotient_low = quotient_high_temp - 1;\n        if ((carry_flag == false) && (temp_combined <= quotient_combined && quotient_combined - temp_combined != 0)) {\n          quotient_low = quotient_high_temp - 2;\n          temp_combined = temp_combined + dividend_combined;\n        }\n      }\n      quotient_high_temp = (temp_combined - quotient_combined) / divisor_low;\n      dividend_low = dividend_low * quotient_high_temp;\n      temp_combined = dividend & 0xffff | ((temp_combined - quotient_combined) - divisor_low * quotient_high_temp) * 0x10000;\n      quotient_combined = quotient_high_temp;\n      if (temp_combined <= dividend_low && dividend_low - temp_combined != 0) {\n        carry_flag = CARRY4(dividend_combined,temp_combined);\n        temp_combined = dividend_combined + temp_combined;\n        quotient_combined = quotient_high_temp - 1;\n        if ((carry_flag == false) && (temp_combined <= dividend_low && dividend_low - temp_combined != 0)) {\n          quotient_combined = quotient_high_temp - 2;\n          temp_combined = temp_combined + dividend_combined;\n        }\n      }\n      temp_combined = temp_combined - dividend_low;\n      quotient_combined = quotient_combined | quotient_low << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp_combined >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    remainder_ptr = remainder;\n    if (dividend_high < divisor_high) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = dividend_high;\n        return 0;\n      }\n      quotient_combined = 0;\n    }\n    else {\n      shift_amount = LZCOUNT(divisor_high);\n      if (shift_amount == 0) {\n        if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n          quotient_combined = 1;\n        }\n        else {\n          quotient_combined = 0;\n        }\n        remainder_ptr = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = dividend_high;\n        }\n      }\n      else {\n        temp_combined = 0x20 - shift_amount;\n        dividend_low = divisor >> (temp_combined & 0xff) | divisor_high << shift_amount;\n        dividend_combined = dividend_high >> (temp_combined & 0xff);\n        quotient_high = dividend_low >> 0x10;\n        quotient_high_temp = dividend_combined / quotient_high;\n        divisor_low = quotient_high_temp * (dividend_low & 0xffff);\n        quotient_combined = dividend_high << shift_amount | dividend >> (temp_combined & 0xff);\n        quotient_low = quotient_combined >> 0x10 | (dividend_combined - quotient_high * quotient_high_temp) * 0x10000;\n        dividend = dividend << shift_amount;\n        dividend_combined = quotient_high_temp;\n        if (quotient_low <= divisor_low && divisor_low - quotient_low != 0) {\n          carry_flag = CARRY4(dividend_low,quotient_low);\n          quotient_low = dividend_low + quotient_low;\n          dividend_combined = quotient_high_temp - 1;\n          if ((carry_flag == false) && (quotient_low <= divisor_low && divisor_low - quotient_low != 0)) {\n            dividend_combined = quotient_high_temp - 2;\n            quotient_low = quotient_low + dividend_low;\n          }\n        }\n        quotient_high_temp = (quotient_low - divisor_low) / quotient_high;\n        temp_multiplier = quotient_high_temp * (dividend_low & 0xffff);\n        quotient_low = quotient_combined & 0xffff | ((quotient_low - divisor_low) - quotient_high * quotient_high_temp) * 0x10000;\n        quotient_combined = quotient_high_temp;\n        if (quotient_low <= temp_multiplier && temp_multiplier - quotient_low != 0) {\n          carry_flag = CARRY4(dividend_low,quotient_low);\n          quotient_low = dividend_low + quotient_low;\n          quotient_combined = quotient_high_temp - 1;\n          if ((carry_flag == false) && (quotient_low <= temp_multiplier && temp_multiplier - quotient_low != 0)) {\n            quotient_combined = quotient_high_temp - 2;\n            quotient_low = quotient_low + dividend_low;\n          }\n        }\n        quotient_combined = quotient_combined | dividend_combined << 0x10;\n        temp = (ulonglong)quotient_combined * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(quotient_low - temp_multiplier,dividend) < temp) {\n          quotient_combined = quotient_combined - 1;\n          temp = temp - CONCAT44(dividend_low,divisor << shift_amount);\n        }\n        if (remainder != (uint *)0x0) {\n          dividend_combined = ((quotient_low - temp_multiplier) - (int)(temp >> 0x20)) - (uint)(dividend < (uint)temp);\n          *remainder = dividend_combined << (temp_combined & 0xff) | dividend - (uint)temp >> shift_amount;\n          remainder[1] = dividend_combined >> shift_amount;\n          remainder_ptr = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(remainder_ptr,quotient_combined);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "temp",
                "uVar2": "dividend_low",
                "uVar3": "quotient_low",
                "uVar4": "quotient_high",
                "iVar5": "shift_amount",
                "uVar6": "quotient_combined",
                "uVar7": "dividend_combined",
                "uVar8": "temp_combined",
                "puVar9": "remainder_ptr",
                "uVar10": "quotient_high_temp",
                "uVar11": "divisor_low",
                "uVar12": "temp_multiplier",
                "bVar13": "carry_flag",
                "uVar14": "result"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "set_flag_and_call_functions_080014f0",
            "code": "\n\n\nundefined4 setFlagAndCallFunctions_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_functions_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "calculate_time_divisor_0800151c",
            "code": "\nundefined4 calculateTimeDivisor_0800151c(uint inputValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (inputValue < 0x10) {\n      FUN_0800172a(0xffffffff,inputValue,0);\n      returnValue = 0;\n      DAT_20000000 = inputValue;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "calculate_time_divisor_0800151c",
                "param_1": "inputValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increment_global_sum_0800157c",
            "code": "\nvoid incrementGlobalSum_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increment_global_sum_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_value_080015a0",
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_data_register_080015b4",
            "code": "\n\n\nvoid set_data_register_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_data_register_080015b4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bits_080015fc",
            "code": "\n\n\nuint getShiftedBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_value_08001618",
            "code": "\nvoid writeValue_08001618(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_value_08001618",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_0800166c",
            "code": "\nuint bitwise_operation_0800166c(uint input_mask,uint input_value,uint output_value)\n\n{\n  uint num_bits_to_shift;\n  \n  input_mask = input_mask & 7;\n  num_bits_to_shift = 7 - input_mask;\n  if (3 < num_bits_to_shift) {\n    num_bits_to_shift = 4;\n  }\n  if (input_mask + 4 < 7) {\n    input_mask = 0;\n  }\n  else {\n    input_mask = input_mask - 3;\n  }\n  return output_value & ~(-1 << (input_mask & 0xff)) |\n         (~(-1 << (num_bits_to_shift & 0xff)) & input_value) << (input_mask & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "input_mask",
                "param_2": "input_value",
                "param_3": "output_value",
                "uVar1": "num_bits_to_shift"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_set_param_080016d0",
            "code": "\n\n\nbool checkAndSetParam_080016d0(int inputParam)\n\n{\n  bool isWithinRange;\n  \n  isWithinRange = inputParam - 1U < 0x1000000;\n  if (isWithinRange) {\n    _DAT_e000e014 = inputParam + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isWithinRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_set_param_080016d0",
                "param_1": "inputParam",
                "bVar1": "isWithinRange"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "execute_initial_process_08001714",
            "code": "\nvoid executeInitialProcess_08001714(undefined4 inputData)\n\n{\n  FUN_080015b4(inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "execute_initial_process_08001714",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char inputData,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,param1,param2);\n  FUN_08001618((int)inputData,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "inputData",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "process_and_return_result_08001762",
            "code": "\nundefined4 processAndReturnResult_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "process_and_return_result_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "update_register_flag_0800177c",
            "code": "\n\n\nvoid updateRegisterFlag_0800177c(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "update_register_flag_0800177c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "execute_initial_setup_080017b4",
            "code": "\nvoid executeInitialSetup_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "execute_initial_setup_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_settings_080017c4",
            "code": "\n\n\nvoid updateSettings_080017c4(uint *settings1,uint *settings2)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint checkValue;\n  uint *ptr;\n  int index;\n  uint newValue;\n  uint counter;\n  \n  newValue = 0;\n  counter = 0;\n  do {\n    if (0xf < counter) {\n      return;\n    }\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *settings2 & bitMask;\n    if (bitCheck == bitMask) {\n      checkValue = settings2[1];\n      if (checkValue == 0x12) {\n        newValue = settings2[3] + 0xc;\n      }\n      else if (checkValue < 0x13) {\n        if (checkValue == 2) {\n          newValue = settings2[3] + 8;\n        }\n        else if (checkValue < 3) {\n          if (checkValue == 0) goto LAB_08001882;\n          if (checkValue == 1) {\n            newValue = settings2[3];\n          }\n        }\n        else if (checkValue == 3) {\n          newValue = 0;\n        }\n        else if (checkValue == 0x11) {\n          newValue = settings2[3] + 4;\n        }\n      }\n      else if (checkValue == 0x10210000) {\nLAB_08001882:\n        if (settings2[2] == 0) {\n          newValue = 4;\n        }\n        else if (settings2[2] == 1) {\n          newValue = 8;\n          settings1[4] = bitMask;\n        }\n        else {\n          newValue = 8;\n          settings1[5] = bitMask;\n        }\n      }\n      else if (checkValue < 0x10210001) {\n        if ((checkValue == 0x10110000) || (checkValue == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((checkValue == 0x10310000) || (checkValue == 0x10320000)) || (checkValue == 0x10220000))\n      goto LAB_08001882;\n      if (bitCheck < 0x100) {\n        bitMask = counter << 2;\n        ptr = settings1;\n      }\n      else {\n        ptr = settings1 + 1;\n        bitMask = (counter - 8) * 4;\n      }\n      *ptr = *ptr & ~(0xf << (bitMask & 0xff)) | newValue << (bitMask & 0xff);\n      if ((settings2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (settings1 == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (settings1 == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (settings1 == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (settings1 == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) =\n             index << ((counter & 3) << 2) |\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000);\n        if ((settings2[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitCheck | _DAT_40010400;\n        }\n        if ((settings2[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitCheck | _DAT_40010404;\n        }\n        if ((settings2[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitCheck | _DAT_40010408;\n        }\n        if ((settings2[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_settings_080017c4",
                "param_1": "settings1",
                "param_2": "settings2",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "uVar3": "checkValue",
                "puVar4": "ptr",
                "iVar5": "index",
                "local_10": "newValue",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "update_param_08001a80",
            "code": "\nvoid updateParam_08001a80(int ptr,ushort value,char condition)\n\n{\n  if (condition == '\\0') {\n    *(uint *)(ptr + 0x10) = (uint)value << 0x10;\n  }\n  else {\n    *(uint *)(ptr + 0x10) = (uint)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "update_param_08001a80",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "condition"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_parameters_08001ab0",
            "code": "\nundefined4 calculateParameters_08001ab0(uint **inputArray)\n\n{\n  uint tempVar;\n  char conditionVar;\n  undefined4 returnValue;\n  uint calcVar;\n  bool isZero;\n  \n  if (inputArray == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)inputArray + 0x3d) == '\\0') {\n      *(undefined *)(inputArray + 0xf) = 0;\n      FUNC_08001cb8(inputArray);\n    }\n    *(undefined *)((int)inputArray + 0x3d) = 0x24;\n    **inputArray = **inputArray & 0xfffffffe;\n    tempVar = FUN_08003518();\n    if (dataPointer < (uint *)0x186a1) {\n      calcVar = tempVar;\n      if (tempVar < 2000000) {\n        calcVar = 1;\n      }\n      conditionVar = (char)calcVar;\n      if (1999999 < tempVar) {\n        conditionVar = '\\0';\n      }\n    }\n    else {\n      calcVar = tempVar;\n      if (tempVar < 4000000) {\n        calcVar = 1;\n      }\n      conditionVar = (char)calcVar;\n      if (3999999 < tempVar) {\n        conditionVar = '\\0';\n      }\n    }\n    if (conditionVar == '\\0') {\n      calcVar = tempVar / 1000000;\n      (*inputArray)[1] = calcVar;\n      if ((uint *)0x186a0 < dataPointer) {\n        calcVar = (calcVar * 300) / 1000;\n      }\n      (*inputArray)[8] = calcVar + 1;\n      if (dataPointer < (uint *)0x186a1) {\n        tempVar = (tempVar - 1) / (uint)((int)dataPointer << 1) + 1 & 0xfff;\n        if (tempVar < 4) {\n          tempVar = 4;\n        }\n      }\n      else {\n        if (inputArray[2] == (uint *)0x0) {\n          calcVar = (tempVar - 1) / (uint)((int)dataPointer * 3) + 1 & 0xfff;\n          isZero = calcVar == 0;\n          if (isZero) {\n            calcVar = 1;\n          }\n          conditionVar = (char)calcVar;\n          if (!isZero) {\n            conditionVar = '\\0';\n          }\n        }\n        else {\n          calcVar = (tempVar - 1) / (uint)((int)dataPointer * 0x19) + 1 & 0xfff;\n          isZero = calcVar == 0;\n          if (isZero) {\n            calcVar = 1;\n          }\n          conditionVar = (char)calcVar;\n          if (!isZero) {\n            conditionVar = '\\0';\n          }\n        }\n        if (conditionVar == '\\0') {\n          if (inputArray[2] == (uint *)0x0) {\n            tempVar = (tempVar - 1) / (uint)((int)dataPointer * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            tempVar = (tempVar - 1) / (uint)((int)dataPointer * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          tempVar = 1;\n        }\n      }\n      (*inputArray)[7] = tempVar;\n      **inputArray = (uint)inputArray[8] | (uint)inputArray[7];\n      (*inputArray)[2] = (uint)inputArray[3] | (uint)inputArray[4];\n      (*inputArray)[3] = (uint)inputArray[6] | (uint)inputArray[5];\n      **inputArray = **inputArray | 1;\n      inputArray[0x10] = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x3d) = 0x20;\n      inputArray[0xc] = (uint *)0x0;\n      *(undefined *)((int)inputArray + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_parameters_08001ab0",
                "param_1": "inputArray",
                "uVar1": "tempVar",
                "cVar2": "conditionVar",
                "uVar3": "returnValue",
                "uVar4": "calcVar",
                "bVar5": "isZero",
                "param_1[1]": "dataPointer"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessData_08001ccc(uint **data,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,undefined4 param7)\n\n{\n  int status;\n  int iteration;\n  undefined4 result;\n  uint *pointer;\n  \n  status = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        iteration = 0;\n        goto LAB_08001d9c;\n      }\n      iteration = FUN_080015a0();\n    } while ((uint)(iteration - status) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    iteration = 3;\nLAB_08001d9c:\n    if (iteration == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        iteration = FUN_08002640(data,param2,param3,param4,param7,status);\n        if (iteration == 0) {\n          while (*(short *)(data + 10) != 0) {\n            iteration = FUN_08002bb4(data,param7,status);\n            if (iteration != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            pointer = data[9];\n            data[9] = (uint *)((int)pointer + 1);\n            (*data)[4] = (uint)*(byte *)pointer;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              (*data)[4] = (uint)*(byte *)pointer;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          status = FUN_08002c2e(data,param7,status);\n          if (status == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            result = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "status",
                "iVar2": "iteration",
                "uVar3": "result",
                "puVar4": "pointer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "perform_operation_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nperformOperation_08001f6c(uint **operand1,undefined2 input1,undefined2 input2,undefined2 input3,uint *data,\n            undefined2 input4,uint maxIterations)\n\n{\n  int startValue;\n  uint tempValue;\n  int counter;\n  undefined4 returnValue;\n  uint *pointer;\n  \n  startValue = FUN_080015a0();\n  if (*(char *)((int)operand1 + 0x3d) == ' ') {\n    do {\n      if ((~(*operand1)[6] & 2) != 0) {\n        counter = 0;\n        goto LAB_08002040;\n      }\n      counter = FUN_080015a0();\n    } while ((uint)(counter - startValue) < 0x1a);\n    operand1[0xc] = (uint *)0x0;\n    *(undefined *)((int)operand1 + 0x3d) = 0x20;\n    *(undefined *)((int)operand1 + 0x3e) = 0;\n    *(undefined *)(operand1 + 0xf) = 0;\n    counter = 3;\nLAB_08002040:\n    if (counter == 0) {\n      if (*(char *)(operand1 + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(operand1 + 0xf) = 1;\n        if ((**operand1 & 1) != 1) {\n          **operand1 = **operand1 | 1;\n        }\n        **operand1 = **operand1 & 0xfffff7ff;\n        *(undefined *)((int)operand1 + 0x3d) = 0x22;\n        *(undefined *)((int)operand1 + 0x3e) = 0x40;\n        operand1[0x10] = (uint *)0x0;\n        operand1[9] = data;\n        *(undefined2 *)((int)operand1 + 0x2a) = input4;\n        operand1[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(operand1 + 10) = *(undefined2 *)((int)operand1 + 0x2a);\n        counter = FUN_080027f4(operand1,input1,input2,input3,maxIterations,startValue);\n        if (counter == 0) {\n          if (*(short *)(operand1 + 10) == 0) {\n            **operand1 = **operand1 | 0x200;\n          }\n          else if (*(short *)(operand1 + 10) == 1) {\n            **operand1 = **operand1 & 0xfffffbff;\n            disableInterrupts();\n            **operand1 = **operand1 | 0x200;\n            enableInterrupts();\n          }\n          else if (*(short *)(operand1 + 10) == 2) {\n            **operand1 = **operand1 | 0x800;\n            disableInterrupts();\n            **operand1 = **operand1 & 0xfffffbff;\n            enableInterrupts();\n          }\n          else {\n            **operand1 = **operand1 | 0x400;\n          }\n          while (*(short *)(operand1 + 10) != 0) {\n            if (*(ushort *)(operand1 + 10) < 4) {\n              if (*(short *)(operand1 + 10) == 1) {\n                counter = FUN_08002ca8(operand1,maxIterations,startValue);\n                if (counter != 0) {\n                  if (operand1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n              }\n              else if (*(short *)(operand1 + 10) == 2) {\n                do {\n                  if ((~(*operand1)[5] & 4) == 0) {\n                    counter = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((maxIterations == 0xffffffff) ||\n                        ((maxIterations != 0 && (counter = FUN_080015a0(), (uint)(counter - startValue) <= maxIterations)\n                         )));\n                operand1[0xc] = (uint *)0x0;\n                *(undefined *)((int)operand1 + 0x3d) = 0x20;\n                *(undefined *)((int)operand1 + 0x3e) = 0;\n                *(undefined *)(operand1 + 0xf) = 0;\n                counter = 3;\nLAB_080022fa:\n                if (counter != 0) {\n                  return 3;\n                }\n                disableInterrupts();\n                **operand1 = **operand1 | 0x200;\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n                enableInterrupts();\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*operand1)[5] & 4) == 0) {\n                    counter = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((maxIterations == 0xffffffff) ||\n                        ((maxIterations != 0 && (counter = FUN_080015a0(), (uint)(counter - startValue) <= maxIterations)\n                         )));\n                operand1[0xc] = (uint *)0x0;\n                *(undefined *)((int)operand1 + 0x3d) = 0x20;\n                *(undefined *)((int)operand1 + 0x3e) = 0;\n                *(undefined *)(operand1 + 0xf) = 0;\n                counter = 3;\nLAB_08002418:\n                if (counter != 0) {\n                  return 3;\n                }\n                **operand1 = **operand1 & 0xfffffbff;\n                disableInterrupts();\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n                do {\n                  if ((~(*operand1)[5] & 4) == 0) {\n                    counter = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((maxIterations == 0xffffffff) ||\n                        ((maxIterations != 0 && (counter = FUN_080015a0(), (uint)(counter - startValue) <= maxIterations)\n                         )));\n                operand1[0xc] = (uint *)0x0;\n                *(undefined *)((int)operand1 + 0x3d) = 0x20;\n                *(undefined *)((int)operand1 + 0x3e) = 0;\n                *(undefined *)(operand1 + 0xf) = 0;\n                counter = 3;\nLAB_0800250a:\n                if (counter != 0) {\n                  return 3;\n                }\n                **operand1 = **operand1 | 0x200;\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n                enableInterrupts();\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n              }\n            }\n            else {\n              counter = FUN_08002ca8(operand1,maxIterations,startValue);\n              if (counter != 0) {\n                if (operand1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              tempValue = (*operand1)[4];\n              pointer = operand1[9];\n              operand1[9] = (uint *)((int)pointer + 1);\n              *(char *)pointer = (char)tempValue;\n              *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n              *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n              if (((*operand1)[5] & 4) == 4) {\n                tempValue = (*operand1)[4];\n                pointer = operand1[9];\n                operand1[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)tempValue;\n                *(short *)(operand1 + 10) = *(short *)(operand1 + 10) + -1;\n                *(short *)((int)operand1 + 0x2a) = *(short *)((int)operand1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)operand1 + 0x3d) = 0x20;\n          *(undefined *)((int)operand1 + 0x3e) = 0;\n          *(undefined *)(operand1 + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (operand1[0x10] == (uint *)0x4) {\n          *(undefined *)(operand1 + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(operand1 + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "perform_operation_08001f6c",
                "param_1": "operand1",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "data",
                "param_6": "input4",
                "param_7": "maxIterations",
                "iVar1": "startValue",
                "uVar2": "tempValue",
                "iVar3": "counter",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "disableIRQinterrupts": "disableInterrupts",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "process_data_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nprocessData_08002640(uint **data,byte flag,undefined2 value1,short value2,uint limit,int threshold)\n\n{\n  int status;\n  undefined4 result;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      status = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (status = FUN_080015a0(), (uint)(status - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  status = 3;\nLAB_0800270a:\n  if (status == 0) {\n    (*data)[4] = flag & 0xfe;\n    status = FUN_08002ad8(data,0x10002,limit,threshold);\n    if (status == 0) {\n      status = FUN_08002bb4(data,limit,threshold,(*data)[6]);\n      if (status == 0) {\n        if (value2 == 1) {\n          (*data)[4] = (uint)(byte)value1;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value1 >> 8);\n          status = FUN_08002bb4(data,limit,threshold);\n          if (status != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value1;\n        }\n        result = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002640": "process_data_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "update_permissions_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdatePermissions_080027f4(uint **permissionArray,byte permissionFlag,undefined2 permissionType,short permissionMask,uint param5,int param6)\n\n{\n  int returnValue;\n  undefined4 updatedValue;\n  \n  **permissionArray = **permissionArray | 0x400;\n  **permissionArray = **permissionArray | 0x100;\n  do {\n    if ((~(*permissionArray)[5] & 1) == 0) {\n      returnValue = 0;\n      goto LAB_080028d2;\n    }\n  } while ((param5 == 0xffffffff) ||\n          ((param5 != 0 && (returnValue = FUN_080015a0(), (uint)(returnValue - param6) <= param5))));\n  permissionArray[0xc] = (uint *)0x0;\n  *(undefined *)((int)permissionArray + 0x3d) = 0x20;\n  *(undefined *)((int)permissionArray + 0x3e) = 0;\n  *(undefined *)(permissionArray + 0xf) = 0;\n  returnValue = 3;\nLAB_080028d2:\n  if (returnValue == 0) {\n    (*permissionArray)[4] = permissionFlag & 0xfe;\n    returnValue = FUN_08002ad8(permissionArray,0x10002,param5,param6);\n    if (returnValue == 0) {\n      returnValue = FUN_08002bb4(permissionArray,param5,param6,(*permissionArray)[6]);\n      if (returnValue == 0) {\n        if (permissionMask == 1) {\n          (*permissionArray)[4] = (uint)(byte)permissionType;\n        }\n        else {\n          (*permissionArray)[4] = (uint)(byte)((ushort)permissionType >> 8);\n          returnValue = FUN_08002bb4(permissionArray,param5,param6);\n          if (returnValue != 0) {\n            if (permissionArray[0x10] == (uint *)0x4) {\n              **permissionArray = **permissionArray | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*permissionArray)[4] = (uint)(byte)permissionType;\n        }\n        returnValue = FUN_08002bb4(permissionArray,param5,param6);\n        if (returnValue == 0) {\n          **permissionArray = **permissionArray | 0x100;\n          do {\n            if ((~(*permissionArray)[5] & 1) == 0) {\n              returnValue = 0;\n              goto LAB_08002a90;\n            }\n          } while ((param5 == 0xffffffff) ||\n                  ((param5 != 0 && (returnValue = FUN_080015a0(), (uint)(returnValue - param6) <= param5))));\n          permissionArray[0xc] = (uint *)0x0;\n          *(undefined *)((int)permissionArray + 0x3d) = 0x20;\n          *(undefined *)((int)permissionArray + 0x3e) = 0;\n          *(undefined *)(permissionArray + 0xf) = 0;\n          returnValue = 3;\nLAB_08002a90:\n          if (returnValue == 0) {\n            (*permissionArray)[4] = (uint)(permissionFlag | 1);\n            returnValue = FUN_08002ad8(permissionArray,0x10002,param5,param6);\n            if (returnValue == 0) {\n              updatedValue = 0;\n            }\n            else if (permissionArray[0x10] == (uint *)0x4) {\n              updatedValue = 1;\n            }\n            else {\n              updatedValue = 3;\n            }\n          }\n          else {\n            updatedValue = 3;\n          }\n        }\n        else if (permissionArray[0x10] == (uint *)0x4) {\n          **permissionArray = **permissionArray | 0x200;\n          updatedValue = 1;\n        }\n        else {\n          updatedValue = 3;\n        }\n      }\n      else if (permissionArray[0x10] == (uint *)0x4) {\n        **permissionArray = **permissionArray | 0x200;\n        updatedValue = 1;\n      }\n      else {\n        updatedValue = 3;\n      }\n    }\n    else if (permissionArray[0x10] == (uint *)0x4) {\n      updatedValue = 1;\n    }\n    else {\n      updatedValue = 3;\n    }\n  }\n  else {\n    updatedValue = 3;\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "update_permissions_080027f4",
                "param_1": "permissionArray",
                "param_2": "permissionFlag",
                "param_3": "permissionType",
                "param_4": "permissionMask",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "returnValue",
                "uVar2": "updatedValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_condition_and_update_08002ad8",
            "code": "\nundefined4 checkConditionAndUpdate_08002ad8(uint **paramList,uint inputValue,uint conditionValue,int comparisonValue)\n\n{\n  int result;\n  char flag;\n  uint tempValue;\n  bool isNonZero;\n  \n  do {\n    if ((inputValue >> 0x10 & 0xff) == 1) {\n      tempValue = inputValue & ~(*paramList)[5] & 0xffff;\n      isNonZero = tempValue != 0;\n      if (isNonZero) {\n        tempValue = 1;\n      }\n      flag = (char)tempValue;\n      if (!isNonZero) {\n        flag = '\\0';\n      }\n    }\n    else {\n      tempValue = inputValue & ~(*paramList)[6] & 0xffff;\n      isNonZero = tempValue != 0;\n      if (isNonZero) {\n        tempValue = 1;\n      }\n      flag = (char)tempValue;\n      if (!isNonZero) {\n        flag = '\\0';\n      }\n    }\n    if (flag == '\\0') {\n      return 0;\n    }\n    if (((*paramList)[5] & 0x400) == 0x400) {\n      **paramList = **paramList | 0x200;\n      (*paramList)[5] = 0xfffffbff;\n      param1Value10 = (uint *)0x4;\n      param1ValueC = (uint *)0x0;\n      *(undefined *)((int)paramList + 0x3d) = 0x20;\n      *(undefined *)(paramList + 0xf) = 0;\n      return 1;\n    }\n  } while ((conditionValue == 0xffffffff) ||\n          ((conditionValue != 0 && (result = FUN_080015a0(), (uint)(result - comparisonValue) <= conditionValue))));\n  param1ValueC = (uint *)0x0;\n  *(undefined *)((int)paramList + 0x3d) = 0x20;\n  *(undefined *)(paramList + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_condition_and_update_08002ad8",
                "param_1": "paramList",
                "param_2": "inputValue",
                "param_3": "conditionValue",
                "param_4": "comparisonValue",
                "iVar1": "result",
                "cVar2": "flag",
                "uVar3": "tempValue",
                "bVar4": "isNonZero",
                "param_1[0x10]": "param1Value10",
                "param_1[0xc]": "param1ValueC"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_data_validity_08002bb4",
            "code": "\nundefined4 check_data_validity_08002bb4(int *data_ptr,uint data_length,int desired_length)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(data_ptr);\n    if (result != 0) break;\n    if ((data_length != 0xffffffff) &&\n       ((data_length == 0 || (result = FUN_080015a0(), data_length < (uint)(result - desired_length))))) {\n      data_ptr[0x10] = data_ptr[0x10] | 0x20;\n      data_ptr[0xc] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_data_validity_08002bb4",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "desired_length",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_modify_flags_08002c2e",
            "code": "\nundefined4 checkAndModifyFlags_08002c2e(int *inputData,uint limit,int offset)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    if ((*(uint *)(*inputData + 0x14) & 4) == 4) {\n      return 0;\n    }\n    returnValue = FUN_08002d3c(inputData);\n    if (returnValue != 0) break;\n    if ((limit != 0xffffffff) &&\n       ((limit == 0 || (returnValue = FUN_080015a0(), limit < (uint)(returnValue - offset))))) {\n      inputData[0x10] = inputData[0x10] | 0x20;\n      inputData[0xc] = 0;\n      *(undefined *)((int)inputData + 0x3d) = 0x20;\n      *(undefined *)(inputData + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_modify_flags_08002c2e",
                "param_1": "inputData",
                "param_2": "limit",
                "param_3": "offset",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_conditions_and_update_status_08002ca8",
            "code": "\nundefined4 check_conditions_and_update_status_08002ca8(int *status,uint size,int offset)\n\n{\n  int required_size;\n  \n  while( true ) {\n    if ((*(uint *)(*status + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*status + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (required_size = FUN_080015a0(), size < (uint)(required_size - offset))) {\n      status[0x10] = status[0x10] | 0x20;\n      *(undefined *)((int)status + 0x3d) = 0x20;\n      *(undefined *)(status + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*status + 0x14) = 0xffffffef;\n  status[0x10] = 0;\n  status[0xc] = 0;\n  *(undefined *)((int)status + 0x3d) = 0x20;\n  *(undefined *)(status + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_conditions_and_update_status_08002ca8",
                "param_1": "status",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "required_size"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool checkFlagStatus_08002d3c(int *flagStatus)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*flagStatus + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*flagStatus + 0x14) = 0xfffffbff;\n    flagStatus[0x10] = 4;\n    flagStatus[0xc] = 0;\n    *(undefined *)((int)flagStatus + 0x3d) = 0x20;\n    *(undefined *)(flagStatus + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flagStatus",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_control_function_08002d98",
            "code": "\n\n\nundefined4 checkAndControlFunction_08002d98(uint *flags)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 result;\n  bool flag;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = FUN_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = FUN_080015a0();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = FUN_080015a0();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = FUN_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = FUN_080015a0();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentValue = FUN_080015a0();\n          if (2 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentValue = FUN_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentValue = FUN_080015a0();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_control_function_08002d98",
                "param_1": "flags",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "configure_memory_access_08003260",
            "code": "\n\n\nundefined4 configureMemoryAccess_08003260(uint *configParams,uint numConfigParams)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  undefined4 status;\n  \n  if (((_DAT_40022000 & 7) < numConfigParams) &&\n     (_DAT_40022000 = numConfigParams | _DAT_40022000 & 0xfffffff8, numConfigParams != (numConfigParams & 7))) {\n    status = 1;\n  }\n  else {\n    if ((*configParams & 2) != 0) {\n      _DAT_40021004 = configParams[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*configParams & 1) == 0) {\nLAB_08003394:\n      if ((numConfigParams < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = numConfigParams | _DAT_40022000 & 0xfffffff8, numConfigParams != (numConfigParams & 7))) {\n        status = 1;\n      }\n      else {\n        if ((*configParams & 4) != 0) {\n          _DAT_40021004 = configParams[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*configParams & 8) != 0) {\n          _DAT_40021004 = configParams[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        uVar3 = FUN_08003440();\n        DAT_20000018 = uVar3 >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        status = 0;\n      }\n    }\n    else {\n      if (configParams[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configParams[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = configParams[1] | _DAT_40021004 & 0xfffffffc;\n      iVar1 = FUN_080015a0();\n      if (configParams[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          iVar2 = FUN_080015a0();\n        } while ((uint)(iVar2 - iVar1) < 0x1389);\n        status = 3;\n      }\n      else if (configParams[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          iVar2 = FUN_080015a0();\n        } while ((uint)(iVar2 - iVar1) < 0x1389);\n        status = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          iVar2 = FUN_080015a0();\n        } while ((uint)(iVar2 - iVar1) < 0x1389);\n        status = 3;\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003260": "configure_memory_access_08003260",
                "param_1": "configParams",
                "param_2": "numConfigParams",
                "uVar4": "status"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_delay_08003440",
            "code": "\n\n\nuint calculateDelay_08003440(void)\n\n{\n  undefined2 delayConstant;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint result;\n  undefined4 temp;\n  uint local_14;\n  uint delayTime;\n  uint temp2;\n  \n  value1 = 0x5040302;\n  value2 = 0x9080706;\n  value3 = 0xd0c0b0a;\n  value4 = 0x10100f0e;\n  delayConstant = 0x201;\n  temp = 0;\n  temp2 = 0;\n  result = 0;\n  delayTime = 0;\n  local_14 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    delayTime = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&value1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp2 = result * 4000000;\n    }\n    else {\n      temp2 = (result * 8000000) / (uint)*(byte *)((int)&delayConstant + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    delayTime = temp2;\n  }\n  else {\n    delayTime = 8000000;\n  }\n  return delayTime;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_delay_08003440",
                "local_30": "delayConstant",
                "local_2c": "value1",
                "uStack_28": "value2",
                "uStack_24": "value3",
                "uStack_20": "value4",
                "local_1c": "result",
                "local_18": "temp",
                "local_10": "delayTime",
                "local_c": "temp2"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_data_variable_08003504",
            "code": "\nundefined4 get_data_variable_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_data_variable_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "bitwise_shift_function_08003518",
            "code": "\n\n\nuint bitwiseShiftFunction_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shiftAmount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "bitwise_shift_function_08003518",
                "uVar1": "result",
                "sbyte": "shiftAmount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shifted_value_from_func_08003540",
            "code": "\n\n\nuint shiftedValueFromFunc_08003540(void)\n\n{\n  uint resultFromFunc;\n  \n  resultFromFunc = FUN_08003504();\n  return resultFromFunc >> *(signedByte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shifted_value_from_func_08003540",
                "uVar1": "resultFromFunc",
                "sbyte": "signedByte"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int milliseconds)\n\n{\n  bool isNotZero;\n  int iterationCount;\n  \n  iterationCount = milliseconds * (DAT_20000018 / 8000);\n  do {\n    isNotZero = iterationCount != 0;\n    iterationCount = iterationCount + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "milliseconds",
                "local_c": "iterationCount",
                "bVar1": "isNotZero"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_param_and_execute_080035a4",
            "code": "\nundefined4 check_param_and_execute_080035a4(undefined4 *param)\n\n{\n  undefined4 result;\n  \n  if (param == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)param + 0x3d) == '\\0') {\n      *(undefined *)(param + 0xf) = 0;\n      FUNC_080035fa(param);\n    }\n    *(undefined *)((int)param + 0x3d) = 2;\n    FUN_08003c94(*param,param + 1);\n    *(undefined *)((int)param + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_param_and_execute_080035a4",
                "param_1": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_and_values_0800360c",
            "code": "\nundefined4 setFlagsAndValues_0800360c(uint **ptrArr)\n\n{\n  (*ptrArr)[3] = (*ptrArr)[3] | 1;\n  **ptrArr = **ptrArr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_and_values_0800360c",
                "param_1": "ptrArr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "validate_and_process_data_08003640",
            "code": "\nundefined4 validate_and_process_data_08003640(undefined4 *input_data)\n\n{\n  undefined4 return_value;\n  \n  if (input_data == (undefined4 *)0x0) {\n    return_value = 1;\n  }\n  else {\n    if (*(char *)((int)input_data + 0x3d) == '\\0') {\n      *(undefined *)(input_data + 0xf) = 0;\n      FUNC_08003696(input_data);\n    }\n    *(undefined *)((int)input_data + 0x3d) = 2;\n    FUN_08003c94(*input_data,input_data + 1);\n    *(undefined *)((int)input_data + 0x3d) = 1;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08003640": "validate_and_process_data_08003640",
                "param_1": "input_data",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "apply_flag_to_value_080036a8",
            "code": "\nundefined4 applyFlagToValue_080036a8(uint **data,undefined4 flag)\n\n{\n  FUN_080041ea(*data,flag,1);\n  if (*data == (uint *)0x40012c00) {\n    (*data)[0x11] = (*data)[0x11] | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "apply_flag_to_value_080036a8",
                "param_1": "data",
                "param_2": "flag"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_flags_080036f8",
            "code": "\nvoid processFlags_080036f8(int *ptr)\n\n{\n  if (((*(uint *)(*ptr + 0x10) & 2) == 2) && ((*(uint *)(*ptr + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(ptr + 7) = 1;\n    if ((*(uint *)(*ptr + 0x18) & 3) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 4) == 4) && ((*(uint *)(*ptr + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(ptr + 7) = 2;\n    if ((*(uint *)(*ptr + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 8) == 8) && ((*(uint *)(*ptr + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(ptr + 7) = 4;\n    if ((*(uint *)(*ptr + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x10) == 0x10) && ((*(uint *)(*ptr + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffef;\n    *(undefined *)(ptr + 7) = 8;\n    if ((*(uint *)(*ptr + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(ptr);\n      FUNC_08003c6e(ptr);\n    }\n    else {\n      FUNC_08003c5c(ptr);\n    }\n    *(undefined *)(ptr + 7) = 0;\n  }\n  if (((*(uint *)(*ptr + 0x10) & 1) == 1) && ((*(uint *)(*ptr + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*ptr + 0x10) = 0xfffffffe;\n    FUN_08004f78(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x80) == 0x80) && ((*(uint *)(*ptr + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffff7f;\n    FUNC_08004378(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x40) == 0x40) && ((*(uint *)(*ptr + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffbf;\n    FUNC_08003c80(ptr);\n  }\n  if (((*(uint *)(*ptr + 0x10) & 0x20) == 0x20) && ((*(uint *)(*ptr + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*ptr + 0x10) = 0xffffffdf;\n    FUNC_08004366(ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "process_data_08003908",
            "code": "\nundefined4 processData_08003908(int *dataPointer,int size,undefined4 option)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(dataPointer + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(dataPointer + 0xf) = 1;\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      FUN_08003d60(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 8;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(size + 0x10) | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) | 0x800;\n      *(uint *)(*dataPointer + 0x18) = *(uint *)(*dataPointer + 0x18) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x18) = *(int *)(size + 0x10) << 8 | *(uint *)(*dataPointer + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 8;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffffb;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(size + 0x10) | *(uint *)(*dataPointer + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*dataPointer,size);\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) | 0x800;\n      *(uint *)(*dataPointer + 0x1c) = *(uint *)(*dataPointer + 0x1c) & 0xfffffbff;\n      *(uint *)(*dataPointer + 0x1c) = *(int *)(size + 0x10) << 8 | *(uint *)(*dataPointer + 0x1c);\n    }\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    *(undefined *)(dataPointer + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "option",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_settings_08003a94",
            "code": "\nundefined4 updateSettings_08003a94(int *settings,uint *values)\n\n{\n  undefined4 statusCode;\n  uint value;\n  \n  if (*(char *)(settings + 0xf) == '\\x01') {\n    statusCode = 2;\n  }\n  else {\n    *(undefined *)(settings + 0xf) = 1;\n    *(undefined *)((int)settings + 0x3d) = 2;\n    *(uint *)(*settings + 8) = *(uint *)(*settings + 8) & 0xffff0088;\n    value = *values;\n    if (value == 0x40) {\n      FUN_080040a0(*settings,values[1],values[3]);\n      FUN_0800416a(*settings,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        FUN_0800416a(*settings,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          FUN_0800416a(*settings,0);\n        }\n      }\n      else if (value == 0x20) {\n        FUN_0800416a(*settings,0x20);\n      }\n      else if (value == 0x30) {\n        FUN_0800416a(*settings,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      FUN_080041a8(*settings,values[2],values[1],values[3]);\n      *(uint *)(*settings + 8) = *(uint *)(*settings + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        FUN_080040a0(*settings,values[1],values[3]);\n        FUN_0800416a(*settings,0x50);\n      }\n      else if (value == 0x60) {\n        FUN_08004104(*settings,values[1],values[3]);\n        FUN_0800416a(*settings,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*settings + 8) = *(uint *)(*settings + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      FUN_080041a8(*settings,values[2],values[1],values[3]);\n      *(uint *)(*settings + 8) = *(uint *)(*settings + 8) | 0x4000;\n    }\n    *(undefined *)((int)settings + 0x3d) = 1;\n    *(undefined *)(settings + 0xf) = 0;\n    statusCode = 0;\n  }\n  return statusCode;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_settings_08003a94",
                "param_1": "settings",
                "param_2": "values",
                "uVar1": "statusCode",
                "uVar2": "value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_configuration_08003c94",
            "code": "\nvoid updateConfiguration_08003c94(uint *configuration,uint *newValues)\n\n{\n  uint currentValue;\n  \n  currentValue = *configuration;\n  if ((((configuration == (uint *)0x40012c00) || (configuration == (uint *)0x40000000)) ||\n      (configuration == (uint *)0x40000400)) || (configuration == (uint *)0x40000800)) {\n    currentValue = newValues[1] | currentValue & 0xffffff8f;\n  }\n  if (((configuration == (uint *)0x40012c00) || (configuration == (uint *)0x40000000)) ||\n     ((configuration == (uint *)0x40000400 || (configuration == (uint *)0x40000800)))) {\n    currentValue = newValues[3] | currentValue & 0xfffffcff;\n  }\n  *configuration = newValues[5] | currentValue & 0xffffff7f;\n  configuration[0xb] = newValues[2];\n  configuration[10] = *newValues;\n  if (configuration == (uint *)0x40012c00) {\n    uRam40012c30 = newValues[4];\n  }\n  configuration[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_configuration_08003c94",
                "param_1": "configuration",
                "param_2": "newValues",
                "local_c": "currentValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_and_set_flags_08003d60",
            "code": "\nvoid updateAndSetFlags_08003d60(int address,uint *data)\n\n{\n  uint firstValue;\n  uint secondValue;\n  uint tempValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  tempValue = *(uint *)(address + 4);\n  firstValue = *data;\n  secondValue = data[2] | *(uint *)(address + 0x20) & 0xfffffffd;\n  if (address == 0x40012c00) {\n    secondValue = (data[3] | secondValue & 0xfffffff7) & 0xfffffffb;\n    tempValue = data[6] | data[5] | tempValue & 0xfffffcff;\n  }\n  *(uint *)(address + 4) = tempValue;\n  *(uint *)(address + 0x18) = firstValue | *(uint *)(address + 0x18) & 0xffffff8c;\n  *(uint *)(address + 0x34) = data[1];\n  *(uint *)(address + 0x20) = secondValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_and_set_flags_08003d60",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_register_08003e38",
            "code": "\nvoid updateRegister_08003e38(int registerAddress,int *registerValues)\n\n{\n  int value;\n  uint updatedValue;\n  uint tempValue;\n  \n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & 0xffffffef;\n  tempValue = *(uint *)(registerAddress + 4);\n  value = *registerValues;\n  updatedValue = registerValues[2] << 4 | *(uint *)(registerAddress + 0x20) & 0xffffffdf;\n  if (registerAddress == 0x40012c00) {\n    updatedValue = (registerValues[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    tempValue = registerValues[6] << 2 | registerValues[5] << 2 | tempValue & 0xfffff3ff;\n  }\n  *(uint *)(registerAddress + 4) = tempValue;\n  *(uint *)(registerAddress + 0x18) = value << 8 | *(uint *)(registerAddress + 0x18) & 0xffff8cff;\n  *(int *)(registerAddress + 0x38) = registerValues[1];\n  *(uint *)(registerAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_register_08003e38",
                "param_1": "registerAddress",
                "param_2": "registerValues",
                "iVar1": "value",
                "uVar2": "updatedValue",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_registers_08003f18",
            "code": "\nvoid updateRegisters_08003f18(int register,uint *values)\n\n{\n  uint newValue1;\n  uint newValue2;\n  uint localValue1;\n  \n  *(uint *)(register + 0x20) = *(uint *)(register + 0x20) & 0xfffffeff;\n  localValue1 = *(uint *)(register + 4);\n  newValue1 = *values;\n  newValue2 = value2 << 8 | *(uint *)(register + 0x20) & 0xfffffdff;\n  if (register == 0x40012c00) {\n    newValue2 = (values[3] << 8 | newValue2 & 0xfffff7ff) & 0xfffffbff;\n    localValue1 = value4 << 4 | value5 << 4 | localValue1 & 0xffffcfff;\n  }\n  *(uint *)(register + 4) = localValue1;\n  *(uint *)(register + 0x1c) = newValue1 | *(uint *)(register + 0x1c) & 0xffffff8c;\n  *(uint *)(register + 0x3c) = value3;\n  *(uint *)(register + 0x20) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_registers_08003f18",
                "param_1": "register",
                "param_2": "values",
                "uVar1": "newValue1",
                "uVar2": "newValue2",
                "local_10": "localValue1",
                "param_2[2]": "value2",
                "param_2[1]": "value3",
                "param_2[6]": "value4",
                "param_2[5]": "value5"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_memory_08003ff8",
            "code": "\nvoid updateMemory_08003ff8(int memoryAddress,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint value;\n  \n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & 0xffffefff;\n  value = *(uint *)(memoryAddress + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (memoryAddress == 0x40012c00) {\n    value = parameters[5] << 6 | value & 0xffffbfff;\n  }\n  *(uint *)(memoryAddress + 4) = value;\n  *(uint *)(memoryAddress + 0x1c) = value1 << 8 | *(uint *)(memoryAddress + 0x1c) & 0xffff8cff;\n  *(int *)(memoryAddress + 0x40) = parameters[1];\n  *(uint *)(memoryAddress + 0x20) = value2 << 0xc | *(uint *)(memoryAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_memory_08003ff8",
                "param_1": "memoryAddress",
                "param_2": "parameters",
                "local_c": "value",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_bitwise_values_080040a0",
            "code": "\nvoid updateBitwiseValues_080040a0(int ptr,uint value,int data)\n\n{\n  uint originalValue;\n  \n  originalValue = *(uint *)(ptr + 0x20);\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xfffffffe;\n  *(uint *)(ptr + 0x18) = data << 4 | *(uint *)(ptr + 0x18) & 0xffffff0f;\n  *(uint *)(ptr + 0x20) = value | originalValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_bitwise_values_080040a0",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "data",
                "uVar1": "originalValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_and_shift_values_08004104",
            "code": "\nvoid updateAndShiftValues_08004104(int ptr_buffer,int value1,int value2)\n\n{\n  *(uint *)(ptr_buffer + 0x20) = *(uint *)(ptr_buffer + 0x20) & 0xffffffef;\n  *(uint *)(ptr_buffer + 0x18) = value2 << 0xc | *(uint *)(ptr_buffer + 0x18) & 0xffff0fff;\n  *(uint *)(ptr_buffer + 0x20) = value1 << 4 | *(uint *)(ptr_buffer + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_and_shift_values_08004104",
                "param_1": "ptr_buffer",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_param_0800416a",
            "code": "\nvoid updateParam_0800416a(int ptr,ushort data)\n\n{\n  *(unsigned_int *)(ptr + 8) = *(unsigned_int *)(ptr + 8) & 0xffffff8f | (unsigned_int)(data | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_param_0800416a",
                "param_1": "ptr",
                "param_2": "data",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_data_080041a8",
            "code": "\nvoid updateData_080041a8(int dataPtr,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(dataPtr + 8) = value1 | value3 << 8 | value2 | *(uint *)(dataPtr + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_data_080041a8",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bits_080041ea",
            "code": "\nvoid updateBits_080041ea(int address,uint bit_position,int new_value)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bits_080041ea",
                "param_1": "address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "set_flag_value_0800422e",
            "code": "\nundefined4 setFlagValue_0800422e(int *ptrFlag,uint *ptrData)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(ptrFlag + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(ptrFlag + 0xf) = 1;\n    *(uint *)(*ptrFlag + 0x44) =\n         ptrData[6] |\n         (ptrData[6] |\n         (ptrData[5] |\n         (ptrData[4] |\n         (*ptrData | (ptrData[1] | (ptrData[2] | ptrData[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(ptrFlag + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "set_flag_value_0800422e",
                "param_1": "ptrFlag",
                "param_2": "ptrData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "set_flag_value_080042de",
            "code": "\nundefined4 setFlagValue_080042de(int *flagArray,uint *bitmaskArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(flagArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(flagArray + 0xf) = 1;\n    *(undefined *)((int)flagArray + 0x3d) = 2;\n    *(uint *)(*flagArray + 4) = *(uint *)(*flagArray + 4) & 0xffffff8f;\n    *(uint *)(*flagArray + 4) = *bitmaskArray | *(uint *)(*flagArray + 4);\n    *(uint *)(*flagArray + 8) = *(uint *)(*flagArray + 8) & 0xffffff7f;\n    *(uint *)(*flagArray + 8) = bitmaskArray[1] | *(uint *)(*flagArray + 8);\n    *(undefined *)((int)flagArray + 0x3d) = 1;\n    *(undefined *)(flagArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "set_flag_value_080042de",
                "param_1": "flagArray",
                "param_2": "bitmaskArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_structure_0800438a",
            "code": "\nundefined4 initializeDataStructure_0800438a(int *dataStructure)\n\n{\n  undefined4 status;\n  \n  if (dataStructure == (int *)0x0) {\n    status = 1;\n  }\n  else {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_08004424(dataStructure);\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    FUN_080046ec(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    dataStructure[0xf] = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "param_1": "dataStructure",
                "uVar1": "status"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "reverse_and_improve_08004436",
            "code": "\nundefined4 reverse_and_improve_08004436(uint **param_ptr,ushort *input_data,short input_length,uint timeout)\n\n{\n  int inner_result;\n  int check_result;\n  undefined4 result;\n  ushort *current_element;\n  \n  if (*(char *)((int)param_ptr + 0x39) == ' ') {\n    if ((input_data == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(param_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_ptr + 0xe) = 1;\n      param_ptr[0xf] = (uint *)0x0;\n      *(undefined *)((int)param_ptr + 0x39) = 0x21;\n      inner_result = FUN_080015a0();\n      *(short *)(param_ptr + 9) = input_length;\n      *(short *)((int)param_ptr + 0x26) = input_length;\n      current_element = input_data;\n      while (*(short *)((int)param_ptr + 0x26) != 0) {\n        *(short *)((int)param_ptr + 0x26) = *(short *)((int)param_ptr + 0x26) + -1;\n        if (param_ptr[2] == (uint *)0x1000) {\n          do {\n            if ((**param_ptr & 0x80) == 0x80) {\n              check_result = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (check_result = FUN_080015a0(), (uint)(check_result - inner_result) <= timeout))));\n          (*param_ptr)[3] = (*param_ptr)[3] & 0xfffffe5f;\n          (*param_ptr)[5] = (*param_ptr)[5] & 0xfffffffe;\n          *(undefined *)((int)param_ptr + 0x39) = 0x20;\n          *(undefined *)((int)param_ptr + 0x3a) = 0x20;\n          *(undefined *)(param_ptr + 0xe) = 0;\n          check_result = 3;\nLAB_0800454c:\n          if (check_result != 0) {\n            return 3;\n          }\n          (*param_ptr)[1] = *current_element & 0x1ff;\n          if (param_ptr[4] == (uint *)0x0) {\n            current_element = current_element + 1;\n          }\n          else {\n            current_element = (ushort *)((int)current_element + 1);\n          }\n        }\n        else {\n          do {\n            if ((**param_ptr & 0x80) == 0x80) {\n              check_result = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (check_result = FUN_080015a0(), (uint)(check_result - inner_result) <= timeout))));\n          (*param_ptr)[3] = (*param_ptr)[3] & 0xfffffe5f;\n          (*param_ptr)[5] = (*param_ptr)[5] & 0xfffffffe;\n          *(undefined *)((int)param_ptr + 0x39) = 0x20;\n          *(undefined *)((int)param_ptr + 0x3a) = 0x20;\n          *(undefined *)(param_ptr + 0xe) = 0;\n          check_result = 3;\nLAB_08004614:\n          if (check_result != 0) {\n            return 3;\n          }\n          (*param_ptr)[1] = (uint)*(byte *)current_element;\n          current_element = (ushort *)((int)current_element + 1);\n        }\n      }\n      do {\n        if ((**param_ptr & 0x40) == 0x40) {\n          inner_result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (check_result = FUN_080015a0(), (uint)(check_result - inner_result) <= timeout))));\n      (*param_ptr)[3] = (*param_ptr)[3] & 0xfffffe5f;\n      (*param_ptr)[5] = (*param_ptr)[5] & 0xfffffffe;\n      *(undefined *)((int)param_ptr + 0x39) = 0x20;\n      *(undefined *)((int)param_ptr + 0x3a) = 0x20;\n      *(undefined *)(param_ptr + 0xe) = 0;\n      inner_result = 3;\nLAB_080046c6:\n      if (inner_result == 0) {\n        *(undefined *)((int)param_ptr + 0x39) = 0x20;\n        *(undefined *)(param_ptr + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004436": "reverse_and_improve_08004436",
                "param_1": "param_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "timeout",
                "uVar3": "result",
                "local_58": "current_element",
                "iVar1": "inner_result",
                "iVar2": "check_result"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "update_config_080046ec",
            "code": "\nvoid updateConfig_080046ec(int *config)\n\n{\n  ulonglong ratio;\n  int tempVar1;\n  int tempVar2;\n  uint threshold;\n  int tempVar3;\n  undefined8 randomVal;\n  \n  *(uint *)(*config + 0x10) = config[3] | *(uint *)(*config + 0x10) & 0xffffcfff;\n  *(uint *)(*config + 0xc) =\n       *(uint *)(*config + 0xc) & 0xffffe9f3 | config[5] | config[2] | config[4];\n  *(uint *)(*config + 0x14) = config[6] | *(uint *)(*config + 0x14) & 0xfffffcff;\n  if (*config == 0x40013800) {\n    randomVal = FUN_08003540();\n    ratio = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(config[1] << 2);\n    tempVar1 = FUN_08003540((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(ratio * 0x51eb851f));\n    tempVar2 = config[1];\n    randomVal = FUN_08003540();\n    threshold = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003540((int)randomVal,(int)((ulonglong)randomVal >> 0x20),threshold * 0x51eb851f);\n    tempVar3 = config[1];\n    tempVar2 = FUN_08003540();\n    *(uint *)(*config + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar3 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(ratio / 100) * 0x10 + (threshold / 100 & 0xf0);\n  }\n  else {\n    randomVal = FUN_08003518();\n    ratio = (ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(config[1] << 2);\n    tempVar1 = FUN_08003518((int)randomVal,(int)((ulonglong)randomVal >> 0x20),(int)(ratio * 0x51eb851f));\n    tempVar2 = config[1];\n    randomVal = FUN_08003518();\n    threshold = ((uint)(tempVar1 * 0x19) / (uint)(tempVar2 << 2) +\n            (int)(((ulonglong)(uint)((int)randomVal * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar1 = FUN_08003518((int)randomVal,(int)((ulonglong)randomVal >> 0x20),threshold * 0x51eb851f);\n    tempVar3 = config[1];\n    tempVar2 = FUN_08003518();\n    *(uint *)(*config + 8) =\n         ((((uint)(tempVar1 * 0x19) / (uint)(tempVar3 << 2) +\n           (int)(((ulonglong)(uint)(tempVar2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(ratio / 100) * 0x10 + (threshold / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "update_config_080046ec",
                "param_1": "config",
                "uVar1": "ratio",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "uVar4": "threshold",
                "iVar5": "tempVar3",
                "uVar6": "randomVal"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *dataPointer)\n\n{\n  undefined firstByte;\n  undefined secondByte;\n  undefined byteArray [5];\n  \n  firstByte = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&firstByte,1);\n  secondByte = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&secondByte,1);\n  byteArray[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byteArray,1);\n  *dataPointer = 0;\n  dataPointer[1] = 0;\n  dataPointer[2] = 0;\n  dataPointer[3] = 0;\n  dataPointer[4] = 0;\n  dataPointer[5] = 0;\n  dataPointer[6] = 0;\n  dataPointer[7] = 0;\n  dataPointer[8] = 0;\n  dataPointer[9] = 0;\n  dataPointer[10] = 0;\n  FUN_080049cc(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "dataPointer",
                "local_13": "firstByte",
                "local_12": "secondByte",
                "local_11": "byteArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_values_080049cc",
            "code": "\nvoid calculateValues_080049cc(int input)\n\n{\n  undefined4 uVar1;\n  undefined4 sum1;\n  undefined4 sum2;\n  undefined4 currentValue;\n  int count;\n  int iteration;\n  undefined4 maxSum1;\n  undefined4 maxSum2;\n  undefined4 maxValue1;\n  undefined4 maxValue2;\n  \n  count = 1;\n  maxValue2 = 0;\n  maxValue1 = 0;\n  maxSum2 = 0;\n  maxSum1 = 0;\n  currentValue = (*DAT_20000a50)();\n  iteration = 0;\n  while( true ) {\n    if (count <= iteration) break;\n    sum2 = 0;\n    sum1 = 0;\n    FUN_08004ae0(input);\n    FUN_08004d78(input,&sum2,&sum1);\n    maxSum2 = FUN_08000aa8(maxSum2,sum2);\n    maxSum1 = FUN_08000aa8(maxSum1,sum1);\n    maxValue2 = FUN_08000aa8(maxValue2,*(undefined4 *)(input + 0x10));\n    maxValue1 = FUN_08000aa8(maxValue1,*(undefined4 *)(input + 0x14));\n    currentValue = (*DAT_20000a50)();\n    iteration = iteration + 1;\n  }\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxValue2,uVar1);\n  *(undefined4 *)(input + 0x1c) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxValue1,uVar1);\n  *(undefined4 *)(input + 0x20) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxSum2,uVar1);\n  *(undefined4 *)(input + 0x24) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxSum1,uVar1);\n  *(undefined4 *)(input + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_values_080049cc",
                "param_1": "input",
                "local_2c": "sum1",
                "local_28": "sum2",
                "local_24": "currentValue",
                "local_20": "count",
                "local_1c": "iteration",
                "local_18": "maxSum1",
                "local_14": "maxSum2",
                "local_10": "maxValue1",
                "local_c": "maxValue2"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "initialize_param_array_08004ae0",
            "code": "\nvoid initializeParamArray_08004ae0(undefined4 *paramArray)\n\n{\n  undefined4 uVar1;\n  undefined var0;\n  undefined var1;\n  undefined var2;\n  undefined var3;\n  undefined var4;\n  undefined var5;\n  undefined var6;\n  undefined var7;\n  undefined var8;\n  undefined var9;\n  undefined var10;\n  undefined var11;\n  undefined var12;\n  undefined var13;\n  short var14;\n  short var15;\n  short var16;\n  short var17;\n  short var18;\n  short var19;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&var0,0xe);\n  var19 = CONCAT11(var2,var3);\n  var18 = CONCAT11(var4,var5);\n  var17 = CONCAT11(var6,var7);\n  var16 = CONCAT11(var8,var9);\n  var15 = CONCAT11(var10,var11);\n  var14 = CONCAT11(var12,var13);\n  uVar1 = FUN_08000c10((int)CONCAT11(var0,var1));\n  *paramArray = uVar1;\n  uVar1 = FUN_08000c10((int)var19);\n  paramArray[1] = uVar1;\n  uVar1 = FUN_08000c10((int)var18);\n  paramArray[2] = uVar1;\n  uVar1 = FUN_08000c10((int)var17);\n  paramArray[3] = uVar1;\n  uVar1 = FUN_08000c10((int)var16);\n  paramArray[4] = uVar1;\n  uVar1 = FUN_08000c10((int)var15);\n  paramArray[5] = uVar1;\n  uVar1 = FUN_08000c10((int)var14);\n  paramArray[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "initialize_param_array_08004ae0",
                "param_1": "paramArray",
                "local_2c": "var0",
                "local_2b": "var1",
                "local_2a": "var2",
                "local_29": "var3",
                "local_28": "var4",
                "local_27": "var5",
                "local_26": "var6",
                "local_25": "var7",
                "local_24": "var8",
                "local_23": "var9",
                "local_22": "var10",
                "local_21": "var11",
                "local_20": "var12",
                "local_1f": "var13",
                "local_1e": "var14",
                "local_1c": "var15",
                "local_1a": "var16",
                "local_18": "var17",
                "local_16": "var18",
                "local_14": "var19"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculateResult_08004bd8(int input,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_results_08004d78",
            "code": "\nvoid calculateResults_08004d78(undefined4 *values,undefined4 *result1,undefined4 *result2)\n\n{\n  undefined4 calculatedValue1;\n  undefined4 calculatedValue2;\n  undefined4 calculatedValue3;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  \n  calculatedValue1 = FUN_08000e20(*values,0x45800000);\n  calculatedValue2 = FUN_08000e20(values[1],0x45800000);\n  calculatedValue3 = FUN_08000e20(values[2],0x45800000);\n  tempResult1 = FUN_08000418(calculatedValue2);\n  tempResult2 = FUN_08000418(calculatedValue3);\n  tempResult1 = thunk_FUN_08005838((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                             (int)((ulonglong)tempResult2 >> 0x20));\n  tempResult1 = FUN_080004c8((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x40668000);\n  tempResult1 = FUN_0800071c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x54442d18,0x400921fb);\n  calculatedValue2 = FUN_080009fc((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n  tempResult1 = FUN_08000418(calculatedValue1);\n  tempResult2 = FUN_08000418(calculatedValue3);\n  tempResult1 = thunk_FUN_08005838((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                             (int)((ulonglong)tempResult2 >> 0x20));\n  tempResult1 = FUN_080004c8((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,0x40668000);\n  tempResult1 = FUN_0800071c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0x54442d18,0x400921fb);\n  calculatedValue1 = FUN_080009fc((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n  *result1 = calculatedValue2;\n  *result2 = calculatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_results_08004d78",
                "param_1": "values",
                "param_2": "result1",
                "param_3": "result2",
                "uVar1": "calculatedValue1",
                "uVar2": "calculatedValue2",
                "uVar3": "calculatedValue3",
                "uVar4": "tempResult1",
                "uVar5": "tempResult2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_software_interrupt_08004e6c",
            "code": "\nvoid executeSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_data_08004e74",
            "code": "\nundefined4 initializeData_08004e74(undefined4 input)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,input,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "initialize_data_08004ea4",
            "code": "\nvoid initializeData_08004ea4(undefined dataPointer1,undefined dataPointer2,undefined4 value1,undefined2 value2)\n\n{\n  FUN_08001ccc(&DAT_20000a88,dataPointer1,dataPointer2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "initialize_data_08004ea4",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "process_data_08004ee8",
            "code": "\nvoid processData_08004ee8(undefined input1,undefined input2,undefined4 value1,undefined2 value2)\n\n{\n  FUN_08001f6c(&DAT_20000a88,input1,input2,1,value1,value2,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_application_08004f2c",
            "code": "\nundefined4 initializeApplication_08004f2c(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015a0();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_application_08004f2c",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataPointer,undefined2 dataValue)\n\n{\n  FUN_08004436(&DAT_20000adc,dataPointer,dataValue,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataPointer",
                "param_2": "dataValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initializeData_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "initialize_audio_08004f78",
            "code": "\nvoid initializeAudio_08004f78(void)\n\n{\n  undefined4 status;\n  int result;\n  undefined4 value;\n  uint mask;\n  undefined8 pitch;\n  byte pitchValue;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch,(int)((ulonglong)pitch >> 0x20));\n  status = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,status);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  status = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(status,DAT_20000b5c);\n  status = FUN_08000c10(DAT_20000010);\n  result = FUN_08000ff4(status,DAT_20000b5c);\n  if (result == 0) {\n    status = FUN_08000c10(DAT_200009f4);\n    result = FUN_08001030(status,DAT_20000b5c);\n    if (result != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  mask = DAT_20000a08 ^ 0x80000000;\n  status = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(mask,status);\n  status = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  status = FUN_08000aa8(status,DAT_20000a58);\n  value = FUN_08000c10(DAT_20000010);\n  result = FUN_08001030(status,value);\n  if (result == 0) {\n    value = FUN_08000c10(DAT_200009f4);\n    result = FUN_08000ff4(status,value);\n    if (result == 0) {\n      pitchValue = FUN_08001044(status);\n    }\n    else {\n      pitchValue = DAT_200009f4;\n    }\n  }\n  else {\n    pitchValue = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,result == 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,result == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitchValue;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitchValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "initialize_audio_08004f78",
                "uVar1": "status",
                "iVar2": "result",
                "uVar3": "value",
                "uVar4": "mask",
                "uVar5": "pitch",
                "local_11": "pitchValue"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_and_loop_08005224",
            "code": "\nvoid initialize_and_loop_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_and_loop_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_system_080052a0",
            "code": "\nvoid initializeSystem_080052a0(void)\n\n{\n  int result;\n  undefined8 uVar2;\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 isEnabled;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  undefined4 constant6;\n  \n  isEnabled = 1;\n  constant1 = 0x10000;\n  constant2 = 0;\n  constant3 = 1;\n  constant4 = 2;\n  constant5 = 0x10000;\n  constant6 = 0x1c0000;\n  result = FUN_08002d98(&isEnabled);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  flag = 0xf;\n  value1 = 2;\n  value2 = 0x80;\n  value3 = 0;\n  value4 = 0;\n  result = FUN_08003260(&flag,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  uVar2 = FUN_08003504();\n  FUN_08001762((uint)uVar2 / 1000,(int)((ulonglong)uVar2 >> 0x20),(uint)uVar2 * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "local_44": "flag",
                "local_40": "value1",
                "local_3c": "value2",
                "local_38": "value3",
                "local_34": "value4",
                "local_30": "isEnabled",
                "local_2c": "constant1",
                "local_28": "constant2",
                "local_20": "constant3",
                "local_14": "constant4",
                "local_10": "constant5",
                "local_c": "constant6",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initializeProgram_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  undefined4 var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 var14;\n  undefined4 var15;\n  undefined4 var16;\n  undefined4 arrayVar [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  arrayVar[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,arrayVar);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  var15 = 0;\n  var16 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&var15);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  var8 = 0x60;\n  var9 = 0;\n  var10 = 0;\n  var11 = 0;\n  var12 = 0;\n  var13 = 0;\n  var14 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&var8,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&var8,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0x2000;\n  var7 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&var1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_44": "var6",
                "local_40": "var7",
                "local_3c": "var8",
                "local_38": "var9",
                "local_34": "var10",
                "local_30": "var11",
                "local_2c": "var12",
                "local_28": "var13",
                "local_24": "var14",
                "local_20": "var15",
                "local_1c": "var16",
                "local_18": "arrayVar"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_application_08005500",
            "code": "\nvoid initializeApplication_08005500(void)\n\n{\n  int returnValue;\n  undefined4 bufferSize;\n  undefined4 initialValue;\n  undefined4 memoryArray [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  returnValue = FUN_080035a4(&DAT_20000b60);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  memoryArray[0] = 0x1000;\n  returnValue = FUN_08003a94(&DAT_20000b60,memoryArray);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  initialValue = 0;\n  returnValue = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (returnValue != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_application_08005500",
                "local_20": "bufferSize",
                "local_1c": "initialValue",
                "local_18": "memoryArray",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int iVar1;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  iVar1 = FUN_0800438a(&DAT_20000adc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_data_080055f4",
            "code": "\n\n\nvoid initializeData_080055f4(void)\n\n{\n  undefined4 dataSize;\n  undefined4 param1;\n  undefined4 param2;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  dataSize = 0x1e;\n  param1 = 1;\n  param2 = 2;\n  FUN_080017c4(0x40010800,&dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_data_080055f4",
                "local_18": "dataSize",
                "local_14": "param1",
                "local_c": "param2"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "endless_loop_08005674",
            "code": "\nvoid endlessLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "endless_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_configuration_08005680",
            "code": "\nvoid initializeConfiguration_08005680(int *configuration)\n\n{\n  undefined4 value;\n  undefined4 count;\n  undefined4 index;\n  \n  if (*configuration == 0x40012c00) {\n    value = 0x900;\n    count = 2;\n    index = 2;\n    FUN_080017c4(0x40010800,&value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_configuration_08005680",
                "param_1": "configuration",
                "local_18": "value",
                "local_14": "count",
                "local_c": "index"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_application_08005704",
            "code": "\nvoid initialize_application_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_application_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_08005714",
            "code": "\nvoid initializeData_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *resultPointer;\n  undefined *returnValue;\n  undefined tempBuffer [4];\n  int remainingSize;\n  undefined *currentPointer;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentPointer = DAT_20000a10;\n  if (tempBuffer < DAT_20000a10 + size) {\n    remainingSize = size;\n    resultPointer = (undefined4 *)FUN_08005d14();\n    *resultPointer = 0xc;\n    returnValue = (undefined *)0xffffffff;\n  }\n  else {\n    returnValue = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "resultPointer",
                "puVar2": "returnValue",
                "auStack_18": "tempBuffer",
                "local_14": "remainingSize",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_hardware_settings_08005780",
            "code": "\n\n\nvoid initializeHardwareSettings_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_hardware_settings_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "check_param_thunk_08005838",
            "code": "\nuint check_param_thunk_08005838(uint var1,uint var2,uint var3,uint var4)\n\n{\n  int var5;\n  undefined4 var6;\n  uint var7;\n  uint var8;\n  uint var9;\n  undefined8 var10;\n  \n  var8 = var4 & 0x7fffffff;\n  if ((0x7ff00000 < (var8 | (-var3 | var3) >> 0x1f)) ||\n     (var9 = var2 & 0x7fffffff, 0x7ff00000 < (var9 | (-var1 | var1) >> 0x1f))) {\n    var8 = FUN_0800015c(var3,var4,var1,var2);\n    return var8;\n  }\n  if ((var4 + 0xc0100000 | var3) == 0) {\n    var8 = FUN_080059f0();\n    return var8;\n  }\n  var7 = (int)var4 >> 0x1e & 2U | var2 >> 0x1f;\n  if ((var9 | var1) == 0) {\n    if (var7 == 2) {\n      return 0x54442d18;\n    }\n    if (var7 != 3) {\n      return var1;\n    }\n  }\n  else if ((var8 | var3) != 0) {\n    if (var8 == 0x7ff00000) {\n      if (var9 == 0x7ff00000) {\n        if (var7 == 2) {\n          return 0x7f3321d2;\n        }\n        if (var7 == 3) {\n          return 0x7f3321d2;\n        }\n        if (var7 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (var7 == 2) {\n        return 0x54442d18;\n      }\n      if (var7 != 3) {\n        if (var7 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (var9 != 0x7ff00000) {\n      var5 = (int)(var9 - var8) >> 0x14;\n      if (var5 < 0x3d) {\n        if (((int)var4 < 0) && (var5 + 0x3c < 0 != SCARRY4(var5,0x3c))) {\n          var10 = 0;\n        }\n        else {\n          FUN_0800071c(var1,var2,var3,var4,var4);\n          FUNC_08005d0c();\n          var10 = FUN_080059f0();\n        }\n      }\n      else {\n        var10 = 0x3ff921fb54442d18;\n      }\n      var6 = (undefined4)((ulonglong)var10 >> 0x20);\n      var8 = (uint)var10;\n      if (var7 == 1) {\n        return var8;\n      }\n      if (var7 == 2) {\n        var10 = FUN_08000158(var8,var6,0x33145c07,0x3ca1a626);\n        var8 = FUN_08000158(0x54442d18,0x400921fb,(int)var10,(int)((ulonglong)var10 >> 0x20));\n        return var8;\n      }\n      if (var7 != 0) {\n        var10 = FUN_08000158(var8,var6,0x33145c07,0x3ca1a626);\n        var8 = FUN_08000158((int)var10,(int)((ulonglong)var10 >> 0x20),0x54442d18,0x400921fb);\n        return var8;\n      }\n      return var8;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "check_param_thunk_08005838",
                "param_1": "var1",
                "param_2": "var2",
                "param_3": "var3",
                "param_4": "var4",
                "iVar1": "var5",
                "uVar2": "var6",
                "uVar3": "var7",
                "uVar4": "var8",
                "uVar5": "var9",
                "uVar6": "var10"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculateResult_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (tempVar4 | (-input3 | input3) >> 0x1f)) ||\n     (tempVar5 = input2 & 0x7fffffff, 0x7ff00000 < (tempVar5 | (-input1 | input1) >> 0x1f))) {\n    tempVar4 = FUN_0800015c(input3,input4,input1,input2);\n    return tempVar4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    tempVar4 = FUN_080059f0();\n    return tempVar4;\n  }\n  tempVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((tempVar5 | input1) == 0) {\n    if (tempVar3 == 2) {\n      return 0x54442d18;\n    }\n    if (tempVar3 != 3) {\n      return input1;\n    }\n  }\n  else if ((tempVar4 | input3) != 0) {\n    if (tempVar4 == 0x7ff00000) {\n      if (tempVar5 == 0x7ff00000) {\n        if (tempVar3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (tempVar3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (tempVar3 == 2) {\n        return 0x54442d18;\n      }\n      if (tempVar3 != 3) {\n        if (tempVar3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (tempVar5 != 0x7ff00000) {\n      tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n      if (tempVar1 < 0x3d) {\n        if (((int)input4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n          tempVar6 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          tempVar6 = FUN_080059f0();\n        }\n      }\n      else {\n        tempVar6 = 0x3ff921fb54442d18;\n      }\n      tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n      tempVar4 = (uint)tempVar6;\n      if (tempVar3 == 1) {\n        return tempVar4;\n      }\n      if (tempVar3 == 2) {\n        tempVar6 = FUN_08000158(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n        tempVar4 = FUN_08000158(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n        return tempVar4;\n      }\n      if (tempVar3 != 0) {\n        tempVar6 = FUN_08000158(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n        tempVar4 = FUN_08000158((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n        return tempVar4;\n      }\n      return tempVar4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_improved_value_080059f0",
            "code": "\nundefined8 calculateImprovedValue_080059f0(int input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint temp;\n  int selection;\n  undefined8 finalResult;\n  undefined8 tempResult;\n  \n  tempResult = combineValues(input2,input1);\n  temp = input2 & 0x7fffffff;\n  if (temp < 0x44100000) {\n    if (temp < 0x3fdc0000) {\n      if (temp < 0x3e200000) {\n        finalResult = FUN_0800015c(input1,input2,0x8800759c,0x7e37e43c,param4);\n        selection = FUN_080009e8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n        if (selection != 0) {\n          return combineValues(input2,input1);\n        }\n      }\n      selection = -1;\n    }\n    else {\n      tempResult = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)tempResult >> 0x20);\n      result1 = (undefined4)tempResult;\n      if (temp < 0x3ff30000) {\n        if (temp < 0x3fe60000) {\n          tempResult = FUN_0800015c(result1,result4,result1,result4);\n          tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n          finalResult = FUN_0800015c(result1,result4,0,0x40000000);\n          tempResult = FUN_0800071c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)finalResult,\n                                (int)((ulonglong)finalResult >> 0x20));\n          selection = 0;\n        }\n        else {\n          tempResult = FUN_08000158(result1,result4,0,0x3ff00000);\n          finalResult = FUN_0800015c(result1,result4,0,0x3ff00000);\n          tempResult = FUN_0800071c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)finalResult,\n                                (int)((ulonglong)finalResult >> 0x20));\n          selection = 1;\n        }\n      }\n      else if (temp < 0x40038000) {\n        tempResult = FUN_08000158(result1,result4,0,0x3ff80000);\n        finalResult = FUN_080004c8(result1,result4,0,0x3ff80000);\n        finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n        tempResult = FUN_0800071c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)finalResult,\n                              (int)((ulonglong)finalResult >> 0x20));\n        selection = 2;\n      }\n      else {\n        tempResult = FUN_0800071c(0,0xbff00000,result1,result4);\n        selection = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)tempResult >> 0x20);\n    result5 = (undefined4)tempResult;\n    tempResult = FUN_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)tempResult >> 0x20);\n    result1 = (undefined4)tempResult;\n    tempResult = FUN_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)tempResult >> 0x20);\n    result4 = (undefined4)tempResult;\n    tempResult = FUN_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x24760deb,0x3fa97b4b);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xc54c206e,0x3fb745cd);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x920083ff,0x3fc24924);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x5555550d,0x3fd55555);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result1,result2);\n    finalResult = FUN_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x52defd9a,0x3fadde2d);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xfe231671,0x3fbc71c6);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x9998ebc4,0x3fc99999);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)finalResult,\n                          (int)((ulonglong)finalResult >> 0x20));\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)tempResult >> 0x20);\n    if (selection == -1) {\n      tempResult = FUN_08000158(result5,result6,(int)tempResult,result1);\n      return tempResult;\n    }\n    selection = selection * 8;\n    tempResult = FUN_08000158((int)tempResult,result1,*(undefined4 *)(&variable1 + selection),\n                          *(undefined4 *)(&variable3 + selection));\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result5,result6);\n    tempResult = FUN_08000158(*(undefined4 *)(&variable5 + selection),\n                          *(undefined4 *)(&variable7 + selection),(int)tempResult,\n                          (int)((ulonglong)tempResult >> 0x20));\n    if ((int)input2 < 0) {\n      return combineValues((int)((ulonglong)tempResult >> 0x20) + -0x80000000,(int)tempResult);\n    }\n  }\n  else {\n    if ((temp < 0x7ff00001) && ((temp != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return combineValues(result1,0x54442d18);\n    }\n    tempResult = FUN_0800015c(input1,input2,input1,input2,param4);\n  }\n  return tempResult;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_improved_value_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "temp",
                "iVar8": "selection",
                "uVar9": "finalResult",
                "uVar10": "tempResult",
                "CONCAT44": "combineValues",
                "UNK_08009ee8": "variable1",
                "UNK_08009eec": "variable3",
                "UNK_08009ec8": "variable5",
                "UNK_08009ecc": "variable7"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_global_data_08005d14",
            "code": "\nundefined4 getGlobalData_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_global_data_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPtrs;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPtrs = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPtrs)();\n    functionPtrs = functionPtrs + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPtrs"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_with_byte_08005d68",
            "code": "\nvoid fillMemoryWithByte_08005d68(undefined4 *destination,undefined byteValue,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  uint remainingLength;\n  undefined4 pattern;\n  bool isLengthZero;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingLength = length - 1;\n    destPtr = destination;\n    if (length == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = byteValue;\n      length = remainingLength;\n      if (((uint)destination & 3) == 0) break;\n      isLengthZero = remainingLength == 0;\n      remainingLength = remainingLength - 1;\n      destPtr = destination;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    pattern = CONCAT22(CONCAT11(byteValue,byteValue),CONCAT11(byteValue,byteValue));\n    remainingLength = length;\n    destPtr = destination;\n    if (0xf < length) {\n      remainingLength = length - 0x10;\n      destPtr = destination + 4;\n      do {\n        destPtr[-4] = pattern;\n        destPtr[-3] = pattern;\n        destPtr[-2] = pattern;\n        destPtr[-1] = pattern;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingLength & 0xfffffff0) + 0x20));\n      length = length & 0xf;\n      destination = destination + ((remainingLength >> 4) + 1) * 4;\n      remainingLength = length;\n      destPtr = destination;\n      if (length < 4) goto LAB_08005de4;\n    }\n    do {\n      length = length - 4;\n      *destination = pattern;\n      destination = destination + 1;\n    } while (3 < length);\n    destination = (undefined4 *)((int)destPtr + (remainingLength - 4 & 0xfffffffc) + 4);\n    length = remainingLength & 3;\n  }\nLAB_08005de4:\n  if (length != 0) {\n    destPtr = destination;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = byteValue;\n      destPtr = tempPtr;\n    } while ((undefined4 *)(length + (int)destination) != tempPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_with_byte_08005d68",
                "param_1": "destination",
                "param_2": "byteValue",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "remainingLength",
                "uVar4": "pattern",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *memory,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *local_80 [2];\n  undefined4 maxValue1;\n  undefined4 maxValue2;\n  undefined *currentMemory;\n  undefined4 minValue;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  minValue = 0x7fffffff;\n  maxValue1 = 0x7fffffff;\n  maxValue2 = 0xffff0208;\n  local_80[0] = memory;\n  currentMemory = memory;\n  param_3_copy = value1;\n  param_4_copy = value2;\n  FUNC_08005e9c(DAT_2000001c,local_80,size,&param_3_copy);\n  *local_80[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "memory",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_78": "maxValue1",
                "uStack_74": "maxValue2",
                "local_70": "currentMemory",
                "local_6c": "minValue",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "find_most_significant_bit_position_08005e40",
            "code": "\nint findMostSignificantBitPosition_08005e40(uint inputValue)\n\n{\n  int remainder;\n  uint *ptr;\n  uint maskValue;\n  \n  ptr = (uint *)(inputValue & 0xfffffffc);\n  remainder = -(inputValue & 3);\n  maskValue = *ptr;\n  if ((inputValue & 3) != 0) {\n    maskValue = maskValue | 0xffffffffU >> ((remainder + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    maskValue = maskValue + 0xfefefeff & ~maskValue & 0x80808080;\n    if (maskValue != 0) break;\n    maskValue = *ptr;\n    remainder = remainder + 4;\n  }\n  return remainder + (0x1fU - LZCOUNT(maskValue & -maskValue) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "find_most_significant_bit_position_08005e40",
                "param_1": "inputValue",
                "iVar1": "remainder",
                "puVar2": "ptr",
                "uVar3": "maskValue"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculateDivision_080078c0(int numerator,int denominator)\n\n{\n  uint quotient;\n  uint *numeratorPtr;\n  int carry;\n  int denominatorCount;\n  int lastIndex;\n  uint result;\n  uint *denominatorPtr;\n  uint *numeratorPtr;\n  uint *lastDenominatorPtr;\n  uint temp;\n  uint *currentDenominatorPtr;\n  uint *nextDenominatorPtr;\n  \n  denominatorCount = *(int *)(denominator + 0x10);\n  if (*(int *)(numerator + 0x10) < denominatorCount) {\n    return 0;\n  }\n  lastIndex = denominatorCount + -1;\n  denominatorPtr = (uint *)(denominator + 0x14);\n  numeratorPtr = (uint *)(numerator + 0x14);\n  result = numeratorPtr[lastIndex] / (denominatorPtr[lastIndex] + 1);\n  lastDenominatorPtr = denominatorPtr + lastIndex;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    numeratorPtr = numeratorPtr;\n    currentDenominatorPtr = denominatorPtr;\n    do {\n      nextDenominatorPtr = currentDenominatorPtr + 1;\n      quotient = result * (*currentDenominatorPtr & 0xffff) + quotient;\n      temp = result * (*currentDenominatorPtr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*numeratorPtr & 0xffff);\n      carry = ((*numeratorPtr >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *numeratorPtr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      numeratorPtr = numeratorPtr + 1;\n      currentDenominatorPtr = nextDenominatorPtr;\n    } while (nextDenominatorPtr <= lastDenominatorPtr);\n    if (numeratorPtr[lastIndex] == 0) {\n      if ((numeratorPtr < numeratorPtr + denominatorCount + -2) && (numeratorPtr[denominatorCount + -2] == 0)) {\n        numeratorPtr = numeratorPtr + denominatorCount + -3;\n        do {\n          lastIndex = lastIndex + -1;\n          if (numeratorPtr <= numeratorPtr) break;\n          quotient = *numeratorPtr;\n          numeratorPtr = numeratorPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = lastIndex;\n    }\n  }\n  denominatorCount = FUN_080094f8();\n  if (-1 < denominatorCount) {\n    denominatorCount = 0;\n    result = result + 1;\n    numeratorPtr = numeratorPtr;\n    do {\n      currentDenominatorPtr = denominatorPtr + 1;\n      quotient = (denominatorCount - (*denominatorPtr & 0xffff)) + (*numeratorPtr & 0xffff);\n      denominatorCount = ((*numeratorPtr >> 0x10) - (*denominatorPtr >> 0x10)) + ((int)quotient >> 0x10);\n      *numeratorPtr = quotient & 0xffff | denominatorCount * 0x10000;\n      denominatorCount = denominatorCount >> 0x10;\n      numeratorPtr = numeratorPtr + 1;\n      denominatorPtr = currentDenominatorPtr;\n    } while (currentDenominatorPtr <= lastDenominatorPtr);\n    if (numeratorPtr[lastIndex] == 0) {\n      if ((numeratorPtr < numeratorPtr + lastIndex + -1) && (numeratorPtr[lastIndex + -1] == 0)) {\n        denominatorPtr = numeratorPtr + lastIndex + -2;\n        do {\n          lastIndex = lastIndex + -1;\n          if (denominatorPtr <= numeratorPtr) break;\n          quotient = *denominatorPtr;\n          denominatorPtr = denominatorPtr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = lastIndex;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "quotient",
                "puVar2": "numeratorPtr",
                "iVar3": "carry",
                "iVar4": "denominatorCount",
                "iVar5": "lastIndex",
                "uVar6": "result",
                "puVar7": "denominatorPtr",
                "puVar8": "numeratorPtr",
                "puVar9": "lastDenominatorPtr",
                "uVar10": "temp",
                "puVar11": "currentDenominatorPtr",
                "puVar12": "nextDenominatorPtr"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "improve_and_convert_to_string_080079e8",
            "code": "\nchar * improve_and_convert_to_string_080079e8(int input,undefined4 arg1,uint arg2,uint arg3,uint arg4,\n                   uint arg5,int *result_len,uint *carry,char **output_str)\n\n{\n  bool is_negative;\n  bool is_denormalized;\n  bool is_round_up;\n  char current_char;\n  byte temp_byte;\n  undefined4 temp_value;\n  int temp_int;\n  int temp_int2;\n  int temp_int3;\n  char *pcVar10;\n  uint temp_value4;\n  undefined4 temp_value5;\n  undefined4 temp_value6;\n  int current_index;\n  int remaining_digits;\n  undefined4 temp_value7;\n  uint temp_value8;\n  uint temp_value9;\n  int temp_index;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 temp_value10;\n  int temp_int4;\n  bool is_denormalized5;\n  undefined8 temp_value11;\n  undefined8 temp_value12;\n  undefined8 temp_value13;\n  uint arg5_copy;\n  uint arg4_copy;\n  uint current_exponent;\n  int current_index2;\n  uint fractional_digits;\n  int arg2_copy;\n  int current_index3;\n  uint fractional_digits2;\n  uint temp_value2;\n  uint temp_value3;\n  uint arg4_copy2;\n  uint remaining_digits2;\n  int temp_index2;\n  int temp_int_arr [2];\n  \n  current_index = *(int *)(input + 0x40);\n  if (current_index != 0) {\n    temp_value9 = *(uint *)(input + 0x44);\n    *(uint *)(current_index + 4) = temp_value9;\n    *(int *)(current_index + 8) = 1 << (temp_value9 & 0xff);\n    FUN_0800910c(input,current_index);\n    *(undefined4 *)(input + 0x40) = 0;\n  }\n  is_denormalized5 = (int)arg3 < 0;\n  temp_value9 = arg3;\n  if (is_denormalized5) {\n    temp_value9 = arg3 & 0x7fffffff;\n  }\n  *carry = (uint)is_denormalized5;\n  arg4_copy = arg3;\n  if (is_denormalized5) {\n    arg4_copy = temp_value9;\n  }\n  temp_value8 = arg4_copy;\n  if ((~temp_value9 & 0x7ff00000) == 0) {\n    *result_len = 9999;\n    if ((arg2 == 0) && ((temp_value9 & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (output_str == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (output_str == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *output_str = pcVar21;\n    return pcVar10;\n  }\n  temp_value11 = FUN_08000998(arg2,arg4_copy,0,0);\n  if ((int)temp_value11 != 0) {\n    *result_len = 1;\n    if (output_str != (char **)0x0) {\n      *output_str = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  temp_value = FUN_08009630(input,(int)((ulonglong)temp_value11 >> 0x20),arg2,arg4_copy,temp_int_arr,&temp_index2)\n  ;\n  current_index = temp_index2;\n  if (temp_value9 >> 0x14 == 0) {\n    temp_index = temp_int_arr[0] + temp_index2;\n    remaining_digits = temp_index + 0x432;\n    if (remaining_digits < 0x21) {\n      temp_value9 = arg2 << (0x20U - remaining_digits & 0xff);\n    }\n    else {\n      temp_value9 = arg2 >> (temp_index + 0x412U & 0xff) | temp_value9 << (0x40U - remaining_digits & 0xff);\n    }\n    temp_value11 = FUN_080003d4(temp_value9);\n    temp_index = temp_index + -1;\n    is_denormalized5 = true;\n    temp_value4 = (int)((ulonglong)temp_value11 >> 0x20) + 0xfe100000;\n    temp_value9 = (uint)temp_value11;\n  }\n  else {\n    temp_index = (temp_value9 >> 0x14) - 0x3ff;\n    temp_value4 = arg4_copy & 0xfffff | 0x3ff00000;\n    is_denormalized5 = false;\n    temp_value9 = arg2;\n  }\n  temp_value11 = FUN_08000158(temp_value9,temp_value4,0,0x3ff80000);\n  temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0x636f4361,0x3fd287a7);\n  temp_value11 = FUN_0800015c((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_value12 = FUN_080003f4(temp_index);\n  temp_value12 = FUN_080004c8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),0x509f79fb,0x3fd34413);\n  temp_value11 = FUN_0800015c((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),(int)temp_value12,\n                        (int)((ulonglong)temp_value12 >> 0x20));\n  temp_value6 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n  current_exponent = FUN_0800119c();\n  remaining_digits = FUN_080009ac((int)temp_value11,temp_value6,0,0);\n  if (remaining_digits != 0) {\n    temp_value12 = FUN_080003f4(current_exponent);\n    remaining_digits = FUN_08000998((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),(int)temp_value11,temp_value6);\n    if (remaining_digits == 0) {\n      current_exponent = current_exponent - 1;\n    }\n  }\n  if (current_exponent < 0x17) {\n    remaining_digits = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + current_exponent * 8),\n                          *(undefined4 *)(&DAT_08009fac + current_exponent * 8),arg2,arg4_copy);\n    if (remaining_digits == 0) {\n      is_denormalized = false;\n    }\n    else {\n      current_exponent = current_exponent - 1;\n      is_denormalized = false;\n    }\n  }\n  else {\n    is_denormalized = true;\n  }\n  remaining_digits = (current_index - temp_index) + -1;\n  if (remaining_digits < 0) {\n    current_index2 = 1 - (current_index - temp_index);\n    remaining_digits = 0;\n  }\n  else {\n    current_index2 = 0;\n  }\n  if ((int)current_exponent < 0) {\n    fractional_digits2 = 0;\n    current_index2 = current_index2 - current_exponent;\n    current_index3 = -current_exponent;\n  }\n  else {\n    remaining_digits = remaining_digits + current_exponent;\n    fractional_digits2 = current_exponent;\n    current_index3 = 0;\n  }\n  if (9 < arg4) {\n    arg4_copy2 = 0xffffffff;\n    is_negative = true;\n    fractional_digits = 0xffffffff;\n    is_round_up = true;\n    arg4 = 0;\n    arg5 = 0;\n    goto LAB_08007c24;\n  }\n  is_negative = (int)arg4 < 6;\n  if (!is_negative) {\n    arg4 = arg4 - 4;\n  }\n  switch(arg4) {\n  case 2:\n    is_round_up = false;\n    break;\n  case 3:\n    is_round_up = false;\n    goto LAB_08008300;\n  case 4:\n    is_round_up = true;\n    break;\n  case 5:\n    is_round_up = true;\nLAB_08008300:\n    arg4_copy2 = current_exponent + arg5;\n    fractional_digits = arg4_copy2 + 1;\n    temp_value9 = fractional_digits;\n    if ((int)fractional_digits < 1) {\n      temp_value9 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(input + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(input,0);\n    arg4_copy2 = 0xffffffff;\n    fractional_digits = 0xffffffff;\n    arg5 = 0;\n    *(char **)(input + 0x40) = pcVar10;\n    is_round_up = true;\n    goto LAB_08007e36;\n  }\n  if ((int)arg5 < 1) {\n    arg4_copy2 = 1;\n    arg5 = 1;\n    fractional_digits = 1;\nLAB_08007c24:\n    *(undefined4 *)(input + 0x44) = 0;\n    temp_value4 = arg4_copy2;\n  }\n  else {\n    arg4_copy2 = arg5;\n    fractional_digits = arg5;\n    temp_value9 = arg5;\nLAB_08008314:\n    *(undefined4 *)(input + 0x44) = 0;\n    temp_value4 = fractional_digits;\n    if (0x17 < (int)temp_value9) {\n      temp_index = 4;\n      current_index = 1;\n      do {\n        temp_int = current_index;\n        temp_index = temp_index * 2;\n        current_index = temp_int + 1;\n      } while (temp_index + 0x14U <= temp_value9);\n      *(int *)(input + 0x44) = temp_int;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(input);\n  *(char **)(input + 0x40) = pcVar10;\n  if ((temp_value4 < 0xf) && (is_negative)) {\n    if ((int)current_exponent < 1) {\n      if (current_exponent == 0) {\n        current_index = 2;\n        arg5_copy = arg2;\n      }\n      else {\n        current_index = (-current_exponent & 0xf) * 8;\n        temp_value11 = FUN_080004c8(arg2,arg4_copy,*(undefined4 *)(&DAT_08009fa8 + current_index),\n                              *(undefined4 *)(&DAT_08009fac + current_index));\n        arg4_copy = (uint)((ulonglong)temp_value11 >> 0x20);\n        arg5_copy = (uint)temp_value11;\n        temp_index = (int)-current_exponent >> 4;\n        if (temp_index == 0) {\n          current_index = 2;\n        }\n        else {\n          is_negative = false;\n          current_index = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (temp_index << 0x1f < 0) {\n              temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              is_negative = true;\n              current_index = current_index + 1;\n            }\n            temp_index = temp_index >> 1;\n            puVar22 = puVar22 + 2;\n          } while (temp_index != 0);\n          if (is_negative) {\n            arg5_copy = (uint)temp_value11;\n            arg4_copy = (uint)((ulonglong)temp_value11 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      temp_value9 = (int)current_exponent >> 4;\n      temp_value12 = *(undefined8 *)(&DAT_08009fa8 + (current_exponent & 0xf) * 8);\n      temp_value11 = *(undefined8 *)(&DAT_08009fa8 + (current_exponent & 0xf) * 8);\n      if ((int)(temp_value9 << 0x1b) < 0) {\n        temp_value13 = FUN_0800071c(arg2,arg4_copy,0x7f73bf3c,0x75154fdd);\n        temp_value3 = (uint)((ulonglong)temp_value13 >> 0x20);\n        temp_value2 = (uint)temp_value13;\n        current_index = 3;\n        temp_value9 = temp_value9 & 0xf;\n      }\n      else {\n        current_index = 2;\n        temp_value3 = arg4_copy;\n        temp_value2 = arg2;\n      }\n      if (temp_value9 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(temp_value9 << 0x1f) < 0) {\n            temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),*puVar22,puVar22[1]);\n            current_index = current_index + 1;\n          }\n          temp_value9 = (int)temp_value9 >> 1;\n          puVar22 = puVar22 + 2;\n          temp_value12 = temp_value11;\n        } while (temp_value9 != 0);\n      }\n      arg4_copy = (uint)((ulonglong)temp_value12 >> 0x20);\n      arg5_copy = (uint)temp_value12;\n      temp_value11 = FUN_0800071c(temp_value2,temp_value3,arg5_copy,arg4_copy);\n      arg5_copy = (uint)temp_value11;\n      arg4_copy = (uint)((ulonglong)temp_value11 >> 0x20);\n    }\n    temp_value11 = CONCAT44(arg4_copy,arg5_copy);\n    if ((is_denormalized) && (temp_index = FUN_080009ac(arg5_copy,arg4_copy,0,0x3ff00000), temp_index != 0)) {\n      if (fractional_digits == 0) {\n        temp_value11 = FUN_080003f4(current_index);\n        temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),arg5_copy,arg4_copy);\n        temp_value11 = FUN_0800015c((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0x401c0000);\n        temp_value6 = (undefined4)temp_value11;\n        current_index = (int)((ulonglong)temp_value11 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)arg4_copy2) {\n        temp_value11 = FUN_080004c8(arg5_copy,arg4_copy,0,0x40240000);\n        temp_value12 = FUN_080003f4(current_index + 1);\n        temp_value12 = FUN_080004c8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),(int)temp_value11,\n                              (int)((ulonglong)temp_value11 >> 0x20));\n        temp_value12 = FUN_0800015c((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),0,0x401c0000);\n        temp_value6 = (undefined4)temp_value12;\n        temp_value2 = arg4_copy2;\n        remaining_digits2 = current_exponent - 1;\n        current_index = (int)((ulonglong)temp_value12 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_value12 = FUN_080003f4(current_index);\n    temp_value12 = FUN_080004c8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),arg5_copy,arg4_copy);\n    temp_value12 = FUN_0800015c((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),0,0x401c0000);\n    temp_value6 = (undefined4)temp_value12;\n    current_index = (int)((ulonglong)temp_value12 >> 0x20) + -0x3400000;\n    if (fractional_digits != 0) {\n      remaining_digits2 = current_exponent;\n      temp_value2 = fractional_digits;\nLAB_08007cfa:\n      arg4_copy = (uint)((ulonglong)temp_value11 >> 0x20);\n      arg5_copy = (uint)temp_value11;\n      current_char = FUN_0800119c(arg5_copy,arg4_copy);\n      current_char = current_char + '0';\n      temp_value7 = (&DAT_08009fa0)[temp_value2 * 2];\n      temp_value5 = (&DAT_08009fa4)[temp_value2 * 2];\n      temp_value11 = FUN_080003f4();\n      temp_value11 = FUN_08000158(arg5_copy,arg4_copy,(int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20));\n      temp_value10 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (is_round_up) {\n        temp_value12 = FUN_0800071c(0,0x3fe00000,temp_value7,temp_value5);\n        temp_value12 = FUN_08000158((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),temp_value6,current_index);\n        temp_value6 = (undefined4)((ulonglong)temp_value12 >> 0x20);\n        *pcVar10 = current_char;\n        current_index = FUN_080009e8((int)temp_value12,temp_value6,(int)temp_value11,temp_value10);\n        if (current_index != 0) {\nLAB_08008784:\n          current_exponent = remaining_digits2;\n          goto LAB_08008294;\n        }\n        temp_value13 = FUN_08000158(0,0x3ff00000,(int)temp_value11,temp_value10);\n        current_index = FUN_080009e8((int)temp_value12,temp_value6,(int)temp_value13,(int)((ulonglong)temp_value13 >> 0x20));\n        if (current_index == 0) {\n          if (temp_value2 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              temp_value12 = FUN_080004c8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),0,0x40240000);\n              temp_value6 = (undefined4)((ulonglong)temp_value12 >> 0x20);\n              temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0x40240000);\n              current_char = FUN_0800119c();\n              temp_value13 = FUN_080003f4();\n              temp_value11 = FUN_08000158((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),(int)temp_value13,\n                                    (int)((ulonglong)temp_value13 >> 0x20));\n              temp_value7 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n              current_char = current_char + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = current_char;\n              current_index = FUN_080009ac((int)temp_value11,temp_value7,(int)temp_value12,temp_value6);\n              if (current_index != 0) {\n                current_exponent = remaining_digits2;\n                goto LAB_08008294;\n              }\n              temp_value13 = FUN_08000158(0,0x3ff00000,(int)temp_value11,temp_value7);\n              current_index = FUN_080009ac((int)temp_value13,(int)((ulonglong)temp_value13 >> 0x20),(int)temp_value12,temp_value6)\n              ;\n              if (current_index != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + temp_value2);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        current_exponent = remaining_digits2;\n      }\n      else {\n        temp_value12 = FUN_080004c8(temp_value6,current_index,temp_value7,temp_value5);\n        temp_value6 = (undefined4)((ulonglong)temp_value12 >> 0x20);\n        *pcVar10 = current_char;\n        if (temp_value2 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0x40240000);\n            current_char = FUN_0800119c();\n            temp_value13 = FUN_080003f4();\n            temp_value11 = FUN_08000158((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),(int)temp_value13,\n                                  (int)((ulonglong)temp_value13 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = current_char + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + temp_value2);\n        }\n        temp_value7 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n        temp_value13 = FUN_0800015c((int)temp_value12,temp_value6,0,0x3fe00000);\n        current_index = FUN_080009ac((int)temp_value13,(int)((ulonglong)temp_value13 >> 0x20),(int)temp_value11,temp_value7);\n        if (current_index == 0) {\n          temp_value12 = FUN_08000158(0,0x3fe00000,(int)temp_value12,temp_value6);\n          current_index = FUN_080009e8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),(int)temp_value11,temp_value7);\n          pcVar20 = pcVar21;\n          if (current_index == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        current_exponent = remaining_digits2;\n        current_char = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp_value11 = FUN_08000158(arg5_copy,arg4_copy,0,0x40140000);\n    temp_value7 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n    temp_index = FUN_080009e8((int)temp_value11,temp_value7,temp_value6,current_index);\n    if (temp_index == 0) {\n      current_index = FUN_080009ac((int)temp_value11,temp_value7,temp_value6,current_index + -0x80000000);\n      if (current_index == 0) goto LAB_08007e36;\n      temp_index = 0;\n      current_index = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    remaining_digits = 0;\n    temp_int = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    current_exponent = current_exponent + 1;\n    pcVar21 = pcVar10 + 1;\n    temp_index = temp_int;\n    current_index = remaining_digits;\nLAB_08008416:\n    FUN_0800910c(input,current_index);\n    if (temp_index == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < temp_int_arr[0]) && ((int)current_exponent < 0xf)) {\n      temp_value6 = *(undefined4 *)(&DAT_08009fa8 + current_exponent * 8);\n      temp_value7 = *(undefined4 *)(&DAT_08009fac + current_exponent * 8);\n      if ((-1 < (int)arg5) || (0 < (int)fractional_digits)) {\n        FUN_0800071c(arg2,temp_value8,temp_value6,temp_value7);\n        temp_byte = FUN_0800119c();\n        temp_value11 = FUN_080003f4();\n        temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),temp_value6,temp_value7);\n        temp_value11 = FUN_08000158(arg2,temp_value8,(int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20));\n        *pcVar10 = temp_byte + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (fractional_digits != 1) {\n          temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0x40240000);\n          current_index = FUN_08000998((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0);\n          while (current_index == 0) {\n            temp_value10 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n            FUN_0800071c((int)temp_value11,temp_value10,temp_value6,temp_value7);\n            temp_byte = FUN_0800119c();\n            temp_value12 = FUN_080003f4();\n            temp_value12 = FUN_080004c8((int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20),temp_value6,temp_value7);\n            temp_value11 = FUN_08000158((int)temp_value11,temp_value10,(int)temp_value12,(int)((ulonglong)temp_value12 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = temp_byte + 0x30;\n            pcVar21 = pcVar20;\n            if (fractional_digits == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            temp_value11 = FUN_080004c8((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0x40240000);\n            current_index = FUN_08000998((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp_value11 = FUN_0800015c((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20));\n        temp_value10 = (undefined4)((ulonglong)temp_value11 >> 0x20);\n        current_index = FUN_080009e8((int)temp_value11,temp_value10,temp_value6,temp_value7);\n        if ((current_index == 0) &&\n           ((current_index = FUN_08000998((int)temp_value11,temp_value10,temp_value6,temp_value7), current_index == 0 ||\n            ((temp_byte & 1) == 0)))) goto LAB_08008294;\n        current_char = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, current_char == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            current_char = pcVar21[-1];\n            current_exponent = current_exponent + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          current_char = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = current_char + '\\x01';\n        goto LAB_08008294;\n      }\n      if (fractional_digits == 0) {\n        temp_value11 = FUN_080004c8(temp_value6,temp_value7,0,0x40140000);\n        temp_int3 = FUN_080009d4((int)temp_value11,(int)((ulonglong)temp_value11 >> 0x20),arg2,temp_value8);\n        temp_index = 0;\n        remaining_digits = 0;\n        temp_int = 0;\n        current_index = 0;\n        if (temp_int3 == 0) goto LAB_08008406;\n      }\n      else {\n        temp_index = 0;\n        current_index = 0;\n      }\nLAB_080084f0:\n      current_exponent = ~arg5;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    current_index = current_index3;\n    if (is_round_up) {\n      if ((int)arg4 < 2) {\n        if (is_denormalized5) {\n          arg2_copy = current_index2;\n          current_index2 = current_index2 + temp_int_arr[0] + 0x433;\n          remaining_digits = remaining_digits + temp_int_arr[0] + 0x433;\n        }\n        else {\n          arg2_copy = current_index2;\n          current_index2 = current_index2 + (0x36 - temp_index2);\n          remaining_digits = remaining_digits + (0x36 - temp_index2);\n        }\n      }\n      else {\n        temp_index = fractional_digits - 1;\n        if (current_index3 < temp_index) {\n          fractional_digits2 = fractional_digits2 + (temp_index - current_index3);\n          current_index = 0;\n          current_index3 = temp_index;\n        }\n        else {\n          current_index = current_index3 - temp_index;\n        }\n        if ((int)fractional_digits < 0) {\n          arg2_copy = current_index2 - fractional_digits;\n        }\n        else {\n          remaining_digits = remaining_digits + fractional_digits;\n          arg2_copy = current_index2;\n          current_index2 = current_index2 + fractional_digits;\n        }\n      }\n      temp_index = FUN_08009244(input,1);\n    }\n    else {\n      arg2_copy = current_index2;\n      temp_index = 0;\n    }\n    if ((0 < arg2_copy) && (0 < remaining_digits)) {\n      temp_int = arg2_copy;\n      if (remaining_digits <= arg2_copy) {\n        temp_int = remaining_digits;\n      }\n      remaining_digits = remaining_digits - temp_int;\n      current_index2 = current_index2 - temp_int;\n      arg2_copy = arg2_copy - temp_int;\n    }\n    if (current_index3 != 0) {\n      if (is_round_up) {\n        temp_value6 = temp_value;\n        if (current_index != 0) {\n          temp_index = FUN_080093a4(input,temp_index,current_index);\n          temp_value6 = FUN_08009258(input,temp_index,temp_value);\n          FUN_0800910c(input,temp_value);\n          temp_value = temp_value6;\n          if (current_index3 - current_index == 0) goto LAB_08008062;\n        }\n        temp_value = FUN_080093a4(input,temp_value6,current_index3 - current_index);\n      }\n      else {\n        temp_value = FUN_080093a4(input,temp_value,current_index3);\n      }\n    }\nLAB_08008062:\n    current_index = FUN_08009244(input,1);\n    if (fractional_digits2 == 0) {\n      if (((int)arg4 < 2) && (arg2 == 0)) {\nLAB_0800835a:\n        if ((temp_value8 & 0xfffff) == 0) {\n          temp_value8 = temp_value8 & 0x7ff00000;\n          if (temp_value8 != 0) {\n            remaining_digits = remaining_digits + 1;\n            current_index2 = current_index2 + 1;\n            temp_value8 = 1;\n          }\n        }\n        else {\n          temp_value8 = 0;\n        }\n        is_denormalized5 = fractional_digits2 != 0;\n        temp_value9 = arg2;\n        fractional_digits2 = temp_value8;\n        if (is_denormalized5) goto LAB_080082d4;\n      }\n      temp_int = 1;\n    }\n    else {\n      temp_value11 = FUN_080093a4(input,current_index);\n      current_index = (int)temp_value11;\n      if (((int)arg4 < 2) && (arg2 == 0)) goto LAB_0800835a;\n      fractional_digits2 = 0;\n      temp_value9 = (uint)((ulonglong)temp_value11 >> 0x20);\nLAB_080082d4:\n      temp_int = FUN_080091a4(*(undefined4 *)(current_index + *(int *)(current_index + 0x10) * 4 + 0x10),temp_value9);\n      temp_int = 0x20 - temp_int;\n    }\n    temp_value9 = temp_int + remaining_digits & 0x1f;\n    if (temp_value9 == 0) {\n      temp_int = 0x1c;\nLAB_08008096:\n      remaining_digits = remaining_digits + temp_int;\n      current_index2 = current_index2 + temp_int;\n      arg2_copy = arg2_copy + temp_int;\n    }\n    else {\n      if (4 < (int)(0x20 - temp_value9)) {\n        temp_int = 0x1c - temp_value9;\n        goto LAB_08008096;\n      }\n      if (0x20 - temp_value9 != 4) {\n        temp_int = 0x3c - temp_value9;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < current_index2) {\n      temp_value = FUN_08009444(input,temp_value,current_index2);\n    }\n    if (0 < remaining_digits) {\n      current_index = FUN_08009444(input,current_index,remaining_digits);\n    }\n    pcVar20 = pcVar10;\n    if ((is_denormalized) && (remaining_digits = FUN_080094f8(temp_value,current_index), remaining_digits < 0)) {\n      current_exponent = current_exponent - 1;\n      temp_value = FUN_08009120(input,temp_value,10,0);\n      if (is_round_up) {\n        temp_index = FUN_08009120(input,temp_index,10,0);\n        if ((0 < (int)arg4_copy2) || ((int)arg4 < 3)) {\n          fractional_digits = arg4_copy2;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)arg4_copy2) || ((int)arg4 < 3)) {\n        fractional_digits = arg4_copy2;\n        goto LAB_0800820a;\n      }\n      fractional_digits = arg4_copy2;\nLAB_080084e8:\n      if (fractional_digits == 0) {\n        remaining_digits = FUN_08009120(input,current_index,5);\n        temp_int3 = FUN_080094f8(temp_value,remaining_digits);\n        temp_int = temp_index;\n        current_index = remaining_digits;\n        if (0 < temp_int3) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)fractional_digits < 1) && (2 < (int)arg4)) goto LAB_080084e8;\n    if (is_round_up) {\nLAB_080080de:\n      arg5_copy = temp_index;\n      if (0 < arg2_copy) {\n        arg5_copy = FUN_08009444(input,temp_index,arg2_copy);\n      }\n      temp_index = arg5_copy;\n      if (fractional_digits2 != 0) {\n        temp_index = FUN_080090c0(input,*(undefined4 *)(arg5_copy + 4));\n        FUN_08001084(temp_index + 0xc,arg5_copy + 0xc,(*(int *)(arg5_copy + 0x10) + 2) * 4);\n        temp_index = FUN_08009444(input,temp_index,1);\n      }\nLAB_08008108:\n      remaining_digits = FUN_080078c0(temp_value,current_index);\n      temp_int = FUN_080094f8(temp_value,arg5_copy);\n      temp_int3 = FUN_08009530(input,current_index,temp_index);\n      temp_int4 = remaining_digits + 0x30;\n      if (*(int *)(temp_int3 + 0xc) == 0) {\n        temp_int2 = FUN_080094f8(temp_value);\n        FUN_0800910c(input,temp_int3);\n        if ((temp_int2 != 0) || (arg4 != 0)) goto LAB_0800815a;\n        if ((arg2 & 1) != 0) {\n          temp_int2 = 0;\n          goto LAB_0800815a;\n        }\n        if (temp_int4 != 0x39) {\n          if (0 < temp_int) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        current_char = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(input,temp_int3);\n      temp_int2 = 1;\nLAB_0800815a:\n      if ((temp_int < 0) || (((temp_int == 0 && (arg4 == 0)) && ((arg2 & 1) == 0)))) {\n        if (0 < temp_int2) {\n          temp_value = FUN_08009444(input,temp_value,1);\n          temp_int = FUN_080094f8(temp_value,current_index);\n          if ((0 < temp_int) || ((temp_int == 0 && (remaining_digits << 0x1f < 0)))) {\n            if (temp_int4 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            temp_int4 = remaining_digits + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)temp_int4;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < temp_int2) {\n        if (temp_int4 == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)remaining_digits + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)temp_int4;\n      if (pcVar10 + (fractional_digits - 1) != pcVar20) {\n        temp_value = FUN_08009120(input,temp_value,10,0);\n        pcVar20 = pcVar21;\n        if (arg5_copy == temp_index) {\n          arg5_copy = FUN_08009120(input,arg5_copy,10,0);\n          temp_index = arg5_copy;\n        }\n        else {\n          arg5_copy = FUN_08009120(input,arg5_copy,10,0);\n          temp_index = FUN_08009120(input,temp_index,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        temp_int4 = FUN_080078c0(temp_value,current_index);\n        temp_int4 = temp_int4 + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)temp_int4;\n        if ((int)fractional_digits <= (int)pcVar21 - (int)pcVar10) break;\n        temp_value = FUN_08009120(input,temp_value,10,0);\n        pcVar20 = pcVar21;\n      }\n      arg5_copy = 0;\n    }\n    temp_value = FUN_08009444(input,temp_value,1);\n    remaining_digits = FUN_080094f8(temp_value,current_index);\n    current_char = pcVar21[-1];\n    if ((0 < remaining_digits) || ((remaining_digits == 0 && (temp_int4 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (current_char != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          current_exponent = current_exponent + 1;\n          goto LAB_08008274;\n        }\n        current_char = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (current_char == '0') {\n      current_char = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(input,current_index);\n    if (temp_index == 0) goto LAB_08008294;\n    if ((arg5_copy != 0) && (arg5_copy != temp_index)) {\n      FUN_0800910c(input);\n    }\n  }\n  FUN_0800910c(input,temp_index);\nLAB_08008294:\n  FUN_0800910c(input,temp_value);\n  *pcVar21 = '\\0';\n  *result_len = current_exponent + 1;\n  if (output_str == (char **)0x0) {\n    return pcVar10;\n  }\n  *output_str = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = current_char + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "improve_and_convert_to_string_080079e8",
                "param_1": "input",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "arg4",
                "param_6": "arg5",
                "param_7": "result_len",
                "param_8": "carry",
                "param_9": "output_str",
                "bVar1": "is_negative",
                "bVar2": "is_denormalized",
                "bVar3": "is_round_up",
                "cVar4": "current_char",
                "bVar5": "temp_byte",
                "uVar6": "temp_value",
                "iVar7": "temp_int",
                "iVar8": "temp_int2",
                "iVar9": "temp_int3",
                "iVar14": "current_index",
                "iVar15": "remaining_digits",
                "iVar19": "temp_index",
                "iVar24": "temp_int4",
                "local_80": "arg5_copy",
                "local_7c": "arg4_copy",
                "local_74": "current_exponent",
                "local_70": "current_index2",
                "local_68": "fractional_digits",
                "local_60": "arg2_copy",
                "local_5c": "current_index3",
                "local_58": "fractional_digits2",
                "local_48": "temp_value2",
                "uStack_44": "temp_value3",
                "local_38": "arg4_copy2",
                "local_34": "remaining_digits2",
                "local_30": "temp_index2",
                "local_2c": "temp_int_arr",
                "uVar11": "temp_value4",
                "uVar12": "temp_value5",
                "uVar13": "temp_value6",
                "uVar16": "temp_value7",
                "uVar17": "temp_value8",
                "uVar18": "temp_value9",
                "uVar23": "temp_value10",
                "uVar26": "temp_value11",
                "uVar27": "temp_value12",
                "uVar28": "temp_value13"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_memory_block_0800884c",
            "code": "\nundefined4 allocate_memory_block_0800884c(undefined4 data_pointer,int block_size)\n\n{\n  int result;\n  int adjusted_memory_end;\n  uint original_memory_end;\n  \n  FUN_080090a8();\n  original_memory_end = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_memory_end = ((0xfef - block_size) + original_memory_end & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_memory_end) {\n    result = FUN_08009744(data_pointer,0);\n    if (result == DAT_20000454 + original_memory_end) {\n      result = FUN_08009744(data_pointer,-adjusted_memory_end);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_memory_end;\n        *(uint *)(DAT_20000454 + 4) = original_memory_end - adjusted_memory_end | 1;\n        FUN_080090b4(data_pointer);\n        return 1;\n      }\n      adjusted_memory_end = FUN_08009744(data_pointer,0);\n      if (0xf < adjusted_memory_end - DAT_20000454) {\n        DAT_20000a14 = adjusted_memory_end - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_memory_end - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(data_pointer);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "data_pointer",
                "param_2": "block_size",
                "iVar1": "result",
                "iVar2": "adjusted_memory_end",
                "uVar3": "original_memory_end"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "deallocate_memory_block_080088ec",
            "code": "\nvoid deallocateMemoryBlock_080088ec(undefined4 param1,int size,undefined4 param3,undefined4 param4)\n\n{\n  int currentIndex;\n  uint *currentPointer;\n  uint *nextPointer;\n  undefined *previousPointer;\n  uint currentSize;\n  uint nextSize;\n  undefined *firstPointer;\n  undefined *lastPointer;\n  undefined4 *tempPointer;\n  int iterationIdx;\n  uint nextBlockFlag;\n  uint tempSize;\n  \n  if (size == 0) {\n    return;\n  }\n  FUN_080090a8();\n  nextBlockFlag = *(uint *)(size + -4);\n  currentPointer = (uint *)(size + -8);\n  currentSize = nextBlockFlag & 0xfffffffe;\n  nextPointer = (uint *)((int)currentPointer + currentSize);\n  nextSize = nextPointer[1] & 0xfffffffc;\n  if (DAT_20000454 == nextPointer) {\n    currentSize = currentSize + nextSize;\n    if ((nextBlockFlag & 1) == 0) {\n      currentPointer = (uint *)((int)currentPointer - *(int *)(size + -8));\n      nextSize = currentPointer[2];\n      nextBlockFlag = currentPointer[3];\n      currentSize = currentSize + *(int *)(size + -8);\n      *(uint *)(nextSize + 0xc) = nextBlockFlag;\n      *(uint *)(nextBlockFlag + 8) = nextSize;\n    }\n    nextSize = DAT_20000858;\n    currentPointer[1] = currentSize | 1;\n    DAT_20000454 = currentPointer;\n    if (nextSize <= currentSize) {\n      FUN_0800884c(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(param1);\n    return;\n  }\n  nextPointer[1] = nextSize;\n  if ((nextBlockFlag & 1) == 0) {\n    currentPointer = (uint *)((int)currentPointer - *(int *)(size + -8));\n    tempPointer = (undefined4 *)currentPointer[2];\n    currentSize = currentSize + *(int *)(size + -8);\n    nextBlockFlag = *(uint *)((int)nextPointer + nextSize + 4) & 1;\n    if ((uint **)tempPointer == &DAT_20000454) {\n      if (nextBlockFlag == 0) {\n        nextBlockFlag = nextPointer[2];\n        tempSize = nextPointer[3];\n        currentSize = currentSize + nextSize;\n        *(uint *)(nextBlockFlag + 0xc) = tempSize;\n        *(uint *)(tempSize + 8) = nextBlockFlag;\n        currentPointer[1] = currentSize | 1;\n        *(uint *)((int)currentPointer + currentSize) = currentSize;\n      }\n      else {\n        currentPointer[1] = currentSize | 1;\n        *nextPointer = currentSize;\n      }\n      goto LAB_080089f0;\n    }\n    tempSize = currentPointer[3];\n    tempPointer[3] = tempSize;\n    *(undefined4 **)(tempSize + 8) = tempPointer;\n  }\n  else {\n    nextBlockFlag = *(uint *)((int)nextPointer + nextSize + 4) & 1;\n  }\n  if (nextBlockFlag == 0) {\n    tempPointer = (undefined4 *)nextPointer[2];\n    currentSize = currentSize + nextSize;\n    if ((uint **)tempPointer == &DAT_20000454) {\n      DAT_2000045c = currentPointer;\n      DAT_20000460 = currentPointer;\n      currentPointer[2] = (uint)&DAT_20000454;\n      currentPointer[3] = (uint)&DAT_20000454;\n      currentPointer[1] = currentSize | 1;\n      *(uint *)((int)currentPointer + currentSize) = currentSize;\n      goto LAB_080089f0;\n    }\n    nextSize = nextPointer[3];\n    tempPointer[3] = nextSize;\n    *(undefined4 **)(nextSize + 8) = tempPointer;\n    currentPointer[1] = currentSize | 1;\n    *(uint *)((int)currentPointer + currentSize) = currentSize;\n  }\n  else {\n    currentPointer[1] = currentSize | 1;\n    *(uint *)((int)currentPointer + currentSize) = currentSize;\n  }\n  if (currentSize < 0x200) {\n    iterationIdx = (currentSize >> 3) + 1;\n    currentSize = 1 << ((int)(currentSize >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    nextSize = *(uint *)(&DAT_2000044c + iterationIdx * 8);\n    currentPointer[2] = nextSize;\n    currentPointer[3] = (uint)(&DAT_20000444 + iterationIdx * 8);\n    DAT_20000450 = (undefined *)currentSize;\n    *(uint **)(&DAT_2000044c + iterationIdx * 8) = currentPointer;\n    *(uint **)(nextSize + 0xc) = currentPointer;\n    FUN_080090b4(param1,currentPointer,currentSize,param4);\n    return;\n  }\n  nextSize = currentSize >> 9;\n  if (nextSize < 5) {\n    iterationIdx = ((currentSize >> 6) + 0x39) * 8;\n    currentIndex = (currentSize >> 6) + 0x38;\n  }\n  else if (nextSize < 0x15) {\n    iterationIdx = (nextSize + 0x5c) * 8;\n    currentIndex = nextSize + 0x5b;\n  }\n  else if (nextSize < 0x55) {\n    iterationIdx = ((currentSize >> 0xc) + 0x6f) * 8;\n    currentIndex = (currentSize >> 0xc) + 0x6e;\n  }\n  else if (nextSize < 0x155) {\n    iterationIdx = ((currentSize >> 0xf) + 0x78) * 8;\n    currentIndex = (currentSize >> 0xf) + 0x77;\n  }\n  else if (nextSize < 0x555) {\n    iterationIdx = ((currentSize >> 0x12) + 0x7d) * 8;\n    currentIndex = (currentSize >> 0x12) + 0x7c;\n  }\n  else {\n    iterationIdx = 0x3f8;\n    currentIndex = 0x7e;\n  }\n  previousPointer = *(undefined **)(&DAT_2000044c + iterationIdx);\n  firstPointer = &DAT_20000444 + iterationIdx;\n  if (firstPointer == previousPointer) {\n    previousPointer = (undefined *)(1 << (currentIndex >> 2 & 0xffU) | (uint)DAT_20000450);\n    lastPointer = firstPointer;\n    DAT_20000450 = previousPointer;\n  }\n  else {\n    do {\n      lastPointer = previousPointer;\n      if ((*(uint *)(previousPointer + 4) & 0xfffffffc) <= currentSize) break;\n      previousPointer = *(undefined **)(previousPointer + 8);\n      lastPointer = firstPointer;\n    } while (firstPointer != previousPointer);\n    firstPointer = *(undefined **)(lastPointer + 0xc);\n  }\n  currentPointer[2] = (uint)lastPointer;\n  currentPointer[3] = (uint)firstPointer;\n  *(uint **)(firstPointer + 8) = currentPointer;\n  *(uint **)(lastPointer + 0xc) = currentPointer;\n  FUN_080090b4(param1,currentPointer,previousPointer,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "deallocate_memory_block_080088ec",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "currentIndex",
                "puVar2": "currentPointer",
                "puVar3": "nextPointer",
                "puVar4": "previousPointer",
                "uVar5": "currentSize",
                "uVar6": "nextSize",
                "puVar7": "firstPointer",
                "puVar8": "lastPointer",
                "puVar9": "tempPointer",
                "iVar10": "iterationIdx",
                "uVar11": "nextBlockFlag",
                "uVar12": "tempSize"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_updated_pointer_value_08008ad4",
            "code": "\nint getUpdatedPointerValue_08008ad4(void)\n\n{\n  int currentValue;\n  \n  currentValue = *(int *)(DAT_2000001c + 0x34);\n  if (currentValue == 0) {\n    currentValue = 0x2000085c;\n  }\n  return currentValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_updated_pointer_value_08008ad4",
                "iVar1": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *output_pointer,uint size)\n\n{\n  undefined *ptr1;\n  uint temp;\n  uint temp2;\n  int index;\n  undefined *ptr2;\n  uint var1;\n  uint var2;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result_pointer;\n  uint var3;\n  uint var4;\n  int index2;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  \n  var3 = size + 0xb;\n  if (var3 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    var4 = 0x10;\n    index = 0x18;\n    var3 = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      var3 = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      index2 = *(int *)(ptr5 + 8);\n      *(int *)(index2 + 0xc) = index;\n      *(int *)(index + 8) = index2;\n      *(uint *)(ptr2 + 4) = var3 | 1;\n      FUN_080090b4(output_pointer);\n      return (int *)(ptr5 + 8);\n    }\n    var3 = var3 + 2;\n  }\n  else {\n    var4 = var3 & 0xfffffff8;\n    if (((int)var4 < 0) || (var4 < size)) {\nLAB_08008c7a:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (var4 < 0x1f8) {\n      var3 = var3 >> 3;\n      index = var4 + 8;\n      goto LAB_08008b18;\n    }\n    temp = var3 >> 9;\n    if (temp == 0) {\n      index = 0x200;\n      var1 = 0x40;\n      temp = 0x3f;\n    }\n    else if (temp < 5) {\n      var1 = (var3 >> 6) + 0x39;\n      temp = (var3 >> 6) + 0x38;\n      index = var1 * 8;\n    }\n    else if (temp < 0x15) {\n      var1 = temp + 0x5c;\n      temp = temp + 0x5b;\n      index = var1 * 8;\n    }\n    else if (temp < 0x55) {\n      var1 = (var3 >> 0xc) + 0x6f;\n      temp = (var3 >> 0xc) + 0x6e;\n      index = var1 * 8;\n    }\n    else if (temp < 0x155) {\n      var1 = (var3 >> 0xf) + 0x78;\n      temp = (var3 >> 0xf) + 0x77;\n      index = var1 * 8;\n    }\n    else if (temp < 0x555) {\n      var1 = (var3 >> 0x12) + 0x7d;\n      temp = (var3 >> 0x12) + 0x7c;\n      index = var1 * 8;\n    }\n    else {\n      index = 0x3f8;\n      var1 = 0x7f;\n      temp = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); var3 = var1,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      index2 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - var4;\n      var3 = temp;\n      if (0xf < index2) break;\n      if (-1 < index2) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        var3 = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var1 = 1 << ((int)var3 >> 2 & 0xffU);\n    temp = DAT_20000450;\n    if (var1 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var1 = DAT_2000045c[1];\n    var2 = var1 & 0xfffffffc;\n    temp = var2 - var4;\n    if (0xf < (int)temp) {\n      ptr7 = (undefined4 *)(var4 + (int)DAT_2000045c);\n      DAT_2000045c[1] = var4 | 1;\n      DAT_2000045c = ptr7;\n      DAT_20000460 = ptr7;\n      ptr7[2] = &DAT_20000454;\n      ptr7[3] = &DAT_20000454;\n      ptr7[1] = temp | 1;\n      *(uint *)((int)ptr6 + var2) = temp;\n      FUN_080090b4(output_pointer);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp) {\n      *(uint *)((int)ptr6 + var2 + 4) = *(uint *)((int)ptr6 + var2 + 4) | 1;\n      FUN_080090b4(output_pointer);\n      return ptr6 + 2;\n    }\n    if (var2 < 0x200) {\n      index = (var1 >> 3) + 1;\n      index2 = *(int *)(&DAT_2000044c + index * 8);\n      temp = 1 << ((int)(var1 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = index2;\n      ptr6[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = temp;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = ptr6;\n      *(undefined4 **)(index2 + 0xc) = ptr6;\n    }\n    else {\n      temp = var1 >> 9;\n      if (temp < 5) {\n        index = ((var1 >> 6) + 0x39) * 8;\n        index2 = (var1 >> 6) + 0x38;\n      }\n      else if (temp < 0x15) {\n        index = (temp + 0x5c) * 8;\n        index2 = temp + 0x5b;\n      }\n      else if (temp < 0x55) {\n        index = ((var1 >> 0xc) + 0x6f) * 8;\n        index2 = (var1 >> 0xc) + 0x6e;\n      }\n      else if (temp < 0x155) {\n        index = ((var1 >> 0xf) + 0x78) * 8;\n        index2 = (var1 >> 0xf) + 0x77;\n      }\n      else if (temp < 0x555) {\n        index = ((var1 >> 0x12) + 0x7d) * 8;\n        index2 = (var1 >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        index2 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (index2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var2) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      temp = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    var1 = 1 << ((int)var3 >> 2 & 0xffU);\n    if (var1 <= temp) {\nLAB_08008c06:\n      if ((var1 & temp) == 0) {\n        var3 = var3 & 0xfffffffc;\n        do {\n          var1 = var1 << 1;\n          var3 = var3 + 4;\n        } while ((var1 & temp) == 0);\n      }\n      do {\n        ptr7 = (undefined4 *)(&DAT_2000044c + var3 * 8);\n        temp = var3;\n        ptr6 = ptr7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            var2 = ptr3[1] & 0xfffffffc;\n            temp2 = var2 - var4;\n            if (0xf < (int)temp2) {\n              index2 = ptr3[2];\n              index = ptr3[3];\n              ptr6 = (undefined4 *)(var4 + (int)ptr3);\n              ptr3[1] = var4 | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = temp2 | 1;\n              *(uint *)((int)ptr3 + var2) = temp2;\n              FUN_080090b4(output_pointer);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)temp2) {\n              index = ptr3[3];\n              index2 = ptr3[2];\n              *(uint *)((int)ptr3 + var2 + 4) = *(uint *)((int)ptr3 + var2 + 4) | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              FUN_080090b4(output_pointer);\n              return ptr3 + 2;\n            }\n          }\n          temp = temp + 1;\n          ptr6 = ptr6 + 2;\n        } while ((temp & 3) != 0);\n        do {\n          var2 = var3 & 3;\n          ptr6 = ptr7 + -2;\n          var3 = var3 - 1;\n          if (var2 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var1;\n            break;\n          }\n          ptr7 = (undefined4 *)*ptr7;\n        } while (ptr7 == ptr6);\n        var1 = var1 * 2;\n        if ((DAT_20000450 <= var1 && var1 - DAT_20000450 != 0) || (var3 = temp, var1 == 0))\n        break;\n        for (; (var1 & DAT_20000450) == 0; var1 = var1 << 1) {\n          var3 = var3 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  var3 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((var4 <= var3) && (temp = var3 - var4, 0xf < (int)temp)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp = var4 + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp = var4 + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(output_pointer,temp);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    var3 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + var3;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + temp;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = var3 + temp | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      var1 = (uint)ptr2 & 7;\n      if (var1 == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - var1);\n        index = 0x1008 - var1;\n      }\n      index = index - ((uint)(ptr2 + temp) & 0xfff);\n      index2 = FUN_08009744(output_pointer,index);\n      if (index2 == -1) {\n        temp = 1;\n        index = 0;\n      }\n      else {\n        temp = (index2 - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = temp;\n      if (ptr5 != &DAT_2000044c) {\n        if (var3 < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var3 = var3 - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | var3;\n        *(undefined4 *)(ptr5 + var3 + 4) = 5;\n        *(undefined4 *)(ptr5 + var3 + 8) = 5;\n        if (0xf < var3) {\n          FUN_080088ec(output_pointer,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    var3 = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  temp = (var3 & 0xfffffffc) - var4;\n  if ((var4 <= (var3 & 0xfffffffc)) && (0xf < (int)temp)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + var4;\n    *(uint *)(DAT_20000454 + 4) = var4 | 1;\n    result_pointer = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = temp | 1;\n    FUN_080090b4(output_pointer);\n    return result_pointer;\n  }\nLAB_08008eee:\n  FUN_080090b4(output_pointer);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "output_pointer",
                "param_2": "size",
                "puVar1": "ptr1",
                "uVar2": "temp",
                "uVar3": "temp2",
                "iVar4": "index",
                "puVar5": "ptr2",
                "uVar6": "var1",
                "uVar7": "var2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "piVar11": "result_pointer",
                "uVar12": "var3",
                "uVar13": "var4",
                "iVar14": "index2",
                "puVar15": "ptr6",
                "puVar16": "ptr7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_first_occurrence_0800901c",
            "code": "\nuint * find_first_occurrence_0800901c(uint *input_array,uint pattern,uint array_length)\n\n{\n  uint temp;\n  uint combined;\n  uint *current_element;\n  uint pattern_byte;\n  bool is_length_zero;\n  \n  pattern_byte = pattern & 0xff;\n  if (((uint)input_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined = (pattern & 0xff) << 8 | pattern_byte;\n      current_element = input_array;\n      do {\n        temp = *current_element ^ (combined | combined << 0x10);\n        input_array = current_element + 1;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        current_element = input_array;\n      } while (3 < array_length);\n    }\n    current_element = input_array;\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      input_array = current_element;\n      if (*(byte *)input_array != pattern_byte) {\n        current_element = (uint *)(array_length + (int)input_array);\n        do {\n          input_array = (uint *)((int)input_array + 1);\n          if (current_element == input_array) goto LAB_0800906c;\n        } while (*(byte *)input_array != pattern_byte);\n      }\n    }\n  }\n  else {\n    combined = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      input_array = (uint *)0x0;\n    }\n    else if (*(byte *)input_array != pattern_byte) {\n      current_element = (uint *)((int)input_array + 1);\n      do {\n        input_array = current_element;\n        array_length = combined;\n        if (((uint)input_array & 3) == 0) goto LAB_0800904a;\n        is_length_zero = combined == 0;\n        combined = combined - 1;\n        if (is_length_zero) goto LAB_0800906c;\n        current_element = (uint *)((int)input_array + 1);\n      } while (*(byte *)input_array != pattern_byte);\n    }\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_first_occurrence_0800901c",
                "param_1": "input_array",
                "param_2": "pattern",
                "param_3": "array_length",
                "uVar1": "temp",
                "uVar2": "combined",
                "puVar3": "current_element",
                "uVar4": "pattern_byte",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_structure_080090a8",
            "code": "\nvoid initialize_data_structure_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_structure_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_080090b4",
            "code": "\nvoid initialize_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "initialize_array_080090c0",
            "code": "\nundefined4 * initializeArray_080090c0(int array,uint index)\n\n{\n  undefined4 *elementPtr;\n  int arrayPtr;\n  \n  arrayPtr = *(int *)(array + 0x4c);\n  if (arrayPtr == 0) {\n    arrayPtr = FUN_08009980(array,4,0x21);\n    *(int *)(array + 0x4c) = arrayPtr;\n    if (arrayPtr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  elementPtr = *(undefined4 **)(arrayPtr + index * 4);\n  if (elementPtr == (undefined4 *)0x0) {\n    arrayPtr = 1 << (index & 0xff);\n    elementPtr = (undefined4 *)FUN_08009980(array,1,(arrayPtr + 5) * 4);\n    if (elementPtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    elementPtr[1] = index;\n    elementPtr[2] = arrayPtr;\n  }\n  else {\n    *(undefined4 *)(arrayPtr + index * 4) = *elementPtr;\n  }\n  elementPtr[3] = 0;\n  elementPtr[4] = 0;\n  return elementPtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "initialize_array_080090c0",
                "param_1": "array",
                "param_2": "index",
                "puVar1": "elementPtr",
                "iVar2": "arrayPtr"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_int_array_element_and_swap_0800910c",
            "code": "\nvoid updateIntArrayElementAndSwap_0800910c(int arrayIndex,undefined4 *arrayPointer)\n\n{\n  int arrayBaseAddress;\n  \n  if (arrayPointer != (undefined4 *)0x0) {\n    arrayBaseAddress = *(int *)(arrayIndex + 0x4c);\n    *arrayPointer = *(undefined4 *)(arrayBaseAddress + arrayPointer[1] * 4);\n    *(undefined4 **)(arrayBaseAddress + arrayPointer[1] * 4) = arrayPointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_int_array_element_and_swap_0800910c",
                "param_1": "arrayIndex",
                "param_2": "arrayPointer",
                "iVar1": "arrayBaseAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculateChecksum_08009120(int param_1,undefined4 *checksumData,int multiplier,uint initialChecksum)\n\n{\n  undefined4 *result;\n  uint partialChecksum;\n  int numElements;\n  uint *ptrToData;\n  int index;\n  \n  index = 0;\n  numElements = checksumData[4];\n  ptrToData = checksumData + 5;\n  do {\n    index = index + 1;\n    initialChecksum = multiplier * (*ptrToData & 0xffff) + initialChecksum;\n    partialChecksum = multiplier * (*ptrToData >> 0x10) + (initialChecksum >> 0x10);\n    *ptrToData = (initialChecksum & 0xffff) + partialChecksum * 0x10000;\n    initialChecksum = partialChecksum >> 0x10;\n    ptrToData = ptrToData + 1;\n  } while (index < numElements);\n  result = checksumData;\n  if (initialChecksum != 0) {\n    if ((int)checksumData[2] <= numElements) {\n      result = (undefined4 *)FUN_080090c0(param_1,checksumData[1] + 1);\n      FUN_08001084(result + 3,checksumData + 3,(checksumData[4] + 2) * 4);\n      index = *(int *)(param_1 + 0x4c);\n      *checksumData = *(undefined4 *)(index + checksumData[1] * 4);\n      *(undefined4 **)(index + checksumData[1] * 4) = checksumData;\n    }\n    result[numElements + 5] = initialChecksum;\n    result[4] = numElements + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_2": "checksumData",
                "param_3": "multiplier",
                "param_4": "initialChecksum",
                "puVar1": "result",
                "uVar2": "partialChecksum",
                "iVar3": "numElements",
                "puVar4": "ptrToData",
                "iVar5": "index"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "find_highest_set_bit_index_080091a4",
            "code": "\nint findHighestSetBitIndex_080091a4(uint num)\n\n{\n  int highestBitIndex;\n  \n  if ((num & 0xffff0000) == 0) {\n    num = num << 0x10;\n    highestBitIndex = 0x10;\n  }\n  else {\n    highestBitIndex = 0;\n  }\n  if ((num & 0xff000000) == 0) {\n    num = num << 8;\n    highestBitIndex = highestBitIndex + 8;\n  }\n  if ((num & 0xf0000000) == 0) {\n    num = num << 4;\n    highestBitIndex = highestBitIndex + 4;\n  }\n  if ((num & 0xc0000000) == 0) {\n    num = num << 2;\n    highestBitIndex = highestBitIndex + 2;\n  }\n  if (-1 < (int)num) {\n    if ((int)(num << 1) < 0) {\n      return highestBitIndex + 1;\n    }\n    highestBitIndex = 0x20;\n  }\n  return highestBitIndex;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "find_highest_set_bit_index_080091a4",
                "param_1": "num",
                "iVar1": "highestBitIndex"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "calculate_leading_zeros_080091e4",
            "code": "\nint calculateLeadingZeros_080091e4(uint *number)\n\n{\n  int leadingZeros;\n  uint tempNumber;\n  \n  tempNumber = *number;\n  if ((tempNumber & 7) == 0) {\n    if ((tempNumber & 0xffff) == 0) {\n      tempNumber = tempNumber >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((tempNumber & 0xff) == 0) {\n      tempNumber = tempNumber >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((tempNumber & 0xf) == 0) {\n      tempNumber = tempNumber >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((tempNumber & 3) == 0) {\n      tempNumber = tempNumber >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(tempNumber << 0x1f)) {\n      tempNumber = tempNumber >> 1;\n      if (tempNumber == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *number = tempNumber;\n    return leadingZeros;\n  }\n  if ((int)(tempNumber << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(tempNumber << 0x1e)) {\n    *number = tempNumber >> 2;\n    return 2;\n  }\n  *number = tempNumber >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "calculate_leading_zeros_080091e4",
                "param_1": "number",
                "iVar1": "leadingZeros",
                "uVar2": "tempNumber"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 dataPointer,undefined4 value)\n\n{\n  int dataAddress;\n  \n  dataAddress = FUN_080090c0(dataPointer,1);\n  *(undefined4 *)(dataAddress + 0x10) = 1;\n  *(undefined4 *)(dataAddress + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "dataAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_array_08009258",
            "code": "\nvoid initializeArray_08009258(undefined4 inputArray,int size1,int size2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int size3;\n  uint temp1;\n  uint *ptr3;\n  uint temp2;\n  uint *ptr4;\n  uint temp3;\n  int size1_backup;\n  int size2_backup;\n  uint temp4;\n  int size1_temp;\n  int size2_temp;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  size1_temp = *(int *)(size1 + 0x10);\n  size1_backup = *(int *)(size2 + 0x10);\n  size2_backup = size1_backup;\n  size2_temp = size1;\n  if (size1_temp < size1_backup) {\n    size2_backup = size1_temp;\n    size1_temp = size1_backup;\n    size2_temp = size2;\n    size2 = size1;\n  }\n  size1_backup = size1_temp + size2_backup;\n  size3 = *(int *)(size2_temp + 4);\n  if (*(int *)(size2_temp + 8) < size1_backup) {\n    size3 = size3 + 1;\n  }\n  size3 = FUN_080090c0(inputArray,size3);\n  ptr9 = (uint *)(size3 + 0x14);\n  ptr8 = ptr9 + size1_backup;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  temp2 = size2 + 0x14;\n  temp4 = temp2 + size2_backup * 4;\n  ptr3 = (uint *)(size2_temp + 0x14);\n  if (temp2 < temp4) {\n    ptr4 = (uint *)(temp2 + ((temp4 - size2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(size2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        temp2 = *ptr7 & 0xffff;\n        if (temp2 != 0) break;\n        temp2 = *ptr7 >> 0x10;\n        if (temp2 == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp3 = *ptr9;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        temp4 = temp3;\n        do {\n          ptr6 = ptr5;\n          temp1 = temp1 + temp2 * *(ushort *)ptr1 + (temp4 >> 0x10);\n          *ptr6 = temp3 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp4 = ptr6[1];\n          temp3 = temp2 * (*ptr1 >> 0x10) + (temp4 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp3 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + size1_temp);\n        ptr6[1] = temp3;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      temp4 = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp3 = temp2 * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + temp4;\n        temp1 = temp2 * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp3 >> 0x10);\n        temp4 = temp1 >> 0x10;\n        *ptr2 = temp3 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + size1_temp);\n      ptr2[1] = temp4;\n      temp2 = *ptr7 >> 0x10;\n      if (temp2 != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < size1_backup) {\n    temp2 = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((temp2 == 0 && (size1_backup = size1_backup + -1, size1_backup != 0))) {\n      ptr8 = ptr8 + -1;\n      temp2 = *ptr8;\n    }\n  }\n  *(int *)(size3 + 0x10) = size1_backup;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_array_08009258",
                "param_1": "inputArray",
                "param_2": "size1",
                "param_3": "size2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "size3",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "temp2",
                "puVar7": "ptr4",
                "uVar8": "temp3",
                "iVar9": "size1_backup",
                "iVar10": "size2_backup",
                "uVar11": "temp4",
                "iVar12": "size1_temp",
                "iVar13": "size2_temp",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int input_data,undefined4 *output_data,uint data_length)\n\n{\n  int index;\n  int num_iterations;\n  undefined4 *current_data;\n  undefined4 *new_data;\n  \n  if ((data_length & 3) != 0) {\n    output_data = (undefined4 *)\n              FUN_08009120(input_data,output_data,*(undefined4 *)(&DAT_0800a070 + ((data_length & 3) - 1) * 4),\n                           0);\n  }\n  num_iterations = (int)data_length >> 2;\n  if (num_iterations != 0) {\n    new_data = *(undefined4 **)(input_data + 0x48);\n    if (new_data == (undefined4 *)0x0) {\n      new_data = (undefined4 *)FUN_080090c0(input_data,1);\n      new_data[4] = 1;\n      new_data[5] = 0x271;\n      *(undefined4 **)(input_data + 0x48) = new_data;\n      *new_data = 0;\n    }\n    current_data = output_data;\n    if (num_iterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    num_iterations = num_iterations >> 1;\n    current_data = new_data;\n    if (num_iterations != 0) {\n      while( true ) {\n        new_data = (undefined4 *)*current_data;\n        if (new_data == (undefined4 *)0x0) {\n          new_data = (undefined4 *)FUN_08009258(input_data,current_data,current_data);\n          *current_data = new_data;\n          *new_data = 0;\n        }\n        current_data = output_data;\n        if (-1 < num_iterations << 0x1f) break;\nLAB_080093d2:\n        output_data = (undefined4 *)FUN_08009258(input_data,current_data,new_data);\n        if (current_data == (undefined4 *)0x0) break;\n        index = *(int *)(input_data + 0x4c);\n        num_iterations = num_iterations >> 1;\n        *current_data = *(undefined4 *)(index + current_data[1] * 4);\n        *(undefined4 **)(index + current_data[1] * 4) = current_data;\n        current_data = new_data;\n        if (num_iterations == 0) {\n          return output_data;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "data_length",
                "iVar1": "index",
                "iVar2": "num_iterations",
                "puVar3": "current_data",
                "puVar4": "new_data"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reorganize_binary_data_08009444",
            "code": "\nvoid reorganize_binary_data_08009444(int input_variable,undefined4 *data_array,uint data_length)\n\n{\n  int temp_var_1;\n  int temp_var_2;\n  int temp_var_3;\n  undefined4 temp_var_4;\n  int temp_var_5;\n  int temp_var_6;\n  uint *ptr_var_1;\n  uint *ptr_var_2;\n  uint *ptr_var_4;\n  uint *ptr_var_5;\n  int loop_counter_1;\n  int loop_counter_2;\n  uint bit_shift_val;\n  uint *ptr_var_3;\n  \n  temp_var_5 = data_array[4];\n  loop_counter_1 = (int)data_length >> 5;\n  loop_counter_2 = loop_counter_1 + temp_var_5 + 1;\n  temp_var_3 = data_array[1];\n  temp_var_2 = data_array[2];\n  if ((int)data_array[2] < loop_counter_2) {\n    do {\n      temp_var_6 = temp_var_2 * 2;\n      temp_var_1 = temp_var_2 * -2;\n      temp_var_3 = temp_var_3 + 1;\n      temp_var_2 = temp_var_6;\n    } while (loop_counter_2 != temp_var_6 && loop_counter_2 + temp_var_1 < 0 == SBORROW4(loop_counter_2,temp_var_6));\n  }\n  temp_var_2 = FUN_080090c0(input_variable,temp_var_3);\n  ptr_var_1 = (uint *)(temp_var_2 + 0x14);\n  if (0 < loop_counter_1) {\n    ptr_var_5 = ptr_var_1 + loop_counter_1;\n    ptr_var_2 = ptr_var_1;\n    do {\n      ptr_var_3 = ptr_var_2 + 1;\n      *ptr_var_2 = 0;\n      ptr_var_1 = ptr_var_5;\n      ptr_var_2 = ptr_var_3;\n    } while (ptr_var_3 != ptr_var_5);\n  }\n  temp_var_3 = data_array[4];\n  ptr_var_2 = data_array + 5;\n  data_length = data_length & 0x1f;\n  if (data_length == 0) {\n    ptr_var_1 = ptr_var_1 + -1;\n    ptr_var_5 = ptr_var_2;\n    do {\n      ptr_var_3 = ptr_var_5 + 1;\n      ptr_var_1 = ptr_var_1 + 1;\n      *ptr_var_1 = *ptr_var_5;\n      ptr_var_5 = ptr_var_3;\n    } while (ptr_var_3 < ptr_var_2 + temp_var_3);\n  }\n  else {\n    bit_shift_val = 0;\n    ptr_var_5 = ptr_var_2;\n    do {\n      ptr_var_3 = ptr_var_1;\n      *ptr_var_3 = *ptr_var_5 << data_length | bit_shift_val;\n      ptr_var_4 = ptr_var_5 + 1;\n      bit_shift_val = *ptr_var_5 >> (0x20 - data_length & 0xff);\n      ptr_var_1 = ptr_var_3 + 1;\n      ptr_var_5 = ptr_var_4;\n    } while (ptr_var_4 < ptr_var_2 + temp_var_3);\n    ptr_var_3[1] = bit_shift_val;\n    if (bit_shift_val != 0) {\n      loop_counter_2 = loop_counter_1 + temp_var_5 + 2;\n    }\n  }\n  temp_var_5 = *(int *)(input_variable + 0x4c);\n  temp_var_3 = data_array[1];\n  temp_var_4 = *(undefined4 *)(temp_var_5 + temp_var_3 * 4);\n  *(int *)(temp_var_2 + 0x10) = loop_counter_2 + -1;\n  *data_array = temp_var_4;\n  *(undefined4 **)(temp_var_5 + temp_var_3 * 4) = data_array;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "reorganize_binary_data_08009444",
                "param_1": "input_variable",
                "param_2": "data_array",
                "param_3": "data_length",
                "iVar1": "temp_var_1",
                "iVar2": "temp_var_2",
                "iVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "iVar5": "temp_var_5",
                "iVar6": "temp_var_6",
                "puVar7": "ptr_var_1",
                "puVar8": "ptr_var_2",
                "puVar9": "ptr_var_3",
                "puVar10": "ptr_var_4",
                "puVar11": "ptr_var_5",
                "iVar12": "loop_counter_1",
                "iVar13": "loop_counter_2",
                "uVar14": "bit_shift_val"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_buffers_080094f8",
            "code": "\nint compare_buffers_080094f8(int buffer1,int buffer2)\n\n{\n  int difference;\n  uint *ptr_buffer2;\n  int length_diff;\n  uint *ptr_buffer1;\n  \n  length_diff = *(int *)(buffer2 + 0x10);\n  difference = *(int *)(buffer1 + 0x10) - length_diff;\n  if (difference == 0) {\n    ptr_buffer2 = (uint *)(buffer2 + 0x14 + length_diff * 4);\n    ptr_buffer1 = (uint *)(buffer1 + 0x14) + length_diff;\n    do {\n      ptr_buffer1 = ptr_buffer1 + -1;\n      ptr_buffer2 = ptr_buffer2 + -1;\n      if (*ptr_buffer1 != *ptr_buffer2) {\n        if (*ptr_buffer2 <= *ptr_buffer1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(buffer1 + 0x14) < ptr_buffer1);\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_buffers_080094f8",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "iVar1": "difference",
                "puVar2": "ptr_buffer2",
                "iVar3": "length_diff",
                "puVar4": "ptr_buffer1"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "find_mismatch_08009530",
            "code": "\nvoid findMismatch_08009530(undefined4 input_param,uint *array1,uint *array2,undefined4 another_param)\n\n{\n  int result;\n  uint *array1_index;\n  uint temp1;\n  uint temp2;\n  undefined4 isMatch;\n  uint *temp_ptr;\n  uint *array1_ptr;\n  uint *array2_ptr;\n  uint *temp_ptr2;\n  uint *array2_index;\n  int accumulator;\n  uint *temp_ptr3;\n  uint length1;\n  uint *temp_ptr4;\n  \n  array1_index = (uint *)array2[4];\n  array2_index = array1 + 5;\n  temp_ptr3 = array2 + 5;\n  array1_ptr = array2_index;\n  array2_ptr = array1;\n  if ((uint *)array1[4] == array1_index) {\n    temp_ptr = array2_index + (int)array1_index;\n    array1_index = temp_ptr3 + (int)array1_index;\n    while( true ) {\n      temp_ptr = temp_ptr + -1;\n      array1_index = array1_index + -1;\n      if (*temp_ptr != *array1_index) break;\n      if (temp_ptr <= array2_index) {\n        accumulator = FUN_080090c0(input_param,0,temp_ptr,array1_index,another_param);\n        *(undefined4 *)(accumulator + 0x10) = 1;\n        *(undefined4 *)(accumulator + 0x14) = 0;\n        return;\n      }\n    }\n    isMatch = 0;\n    if (*array1_index <= *temp_ptr) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)array1_index) {\n    isMatch = 0;\n    temp_ptr = array2;\n    goto LAB_08009578;\n  }\n  isMatch = 1;\n  temp_ptr = array2_index;\n  array1_index = array1;\n  array1_ptr = temp_ptr3;\n  array2_ptr = array2;\n  array2 = array1;\n  temp_ptr3 = array2_index;\nLAB_08009578:\n  result = FUN_080090c0(input_param,array2_ptr[1],temp_ptr,array1_index,another_param);\n  accumulator = 0;\n  length1 = array2_ptr[4];\n  temp1 = array2[4];\n  *(undefined4 *)(result + 0xc) = isMatch;\n  array2_index = array1_ptr + length1;\n  array1_index = (uint *)(result + 0x14);\n  array2_ptr = temp_ptr3;\n  do {\n    temp_ptr4 = array1_ptr + 1;\n    temp_ptr2 = array2_ptr + 1;\n    temp2 = ((*array1_ptr & 0xffff) + accumulator) - (*array2_ptr & 0xffff);\n    accumulator = ((*array1_ptr >> 0x10) - (*array2_ptr >> 0x10)) + ((int)temp2 >> 0x10);\n    temp2 = temp2 & 0xffff | accumulator * 0x10000;\n    temp_ptr = array1_index + 1;\n    *array1_index = temp2;\n    accumulator = accumulator >> 0x10;\n    array1_index = temp_ptr;\n    array1_ptr = temp_ptr4;\n    array2_ptr = temp_ptr2;\n  } while (temp_ptr2 < temp_ptr3 + temp1);\n  array1_index = temp_ptr4;\n  array1_ptr = temp_ptr;\n  if (temp_ptr4 < array2_index) {\n    do {\n      array2_ptr = array1_index + 1;\n      temp1 = (*array1_index & 0xffff) + accumulator;\n      accumulator = ((int)temp1 >> 0x10) + (*array1_index >> 0x10);\n      temp2 = temp1 & 0xffff | accumulator * 0x10000;\n      *array1_ptr = temp2;\n      accumulator = accumulator >> 0x10;\n      array1_index = array2_ptr;\n      array1_ptr = array1_ptr + 1;\n    } while (array2_ptr < array2_index);\n    temp_ptr = (uint *)((int)temp_ptr + ((int)array2_index + ~(uint)temp_ptr4 & 0xfffffffc) + 4);\n  }\n  temp_ptr = temp_ptr + -1;\n  while (temp2 == 0) {\n    temp_ptr = temp_ptr + -1;\n    length1 = length1 - 1;\n    temp2 = *temp_ptr;\n  }\n  *(uint *)(result + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "find_mismatch_08009530",
                "param_1": "input_param",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "another_param",
                "iVar1": "result",
                "puVar2": "array1_index",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "isMatch",
                "puVar6": "temp_ptr",
                "puVar7": "array1_ptr",
                "puVar9": "array2_ptr",
                "puVar10": "temp_ptr2",
                "puVar11": "array2_index",
                "iVar12": "accumulator",
                "puVar13": "temp_ptr3",
                "uVar14": "length1",
                "puVar8": "temp_ptr4"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_and_transform_data_08009630",
            "code": "\nint decode_and_transform_data_08009630(undefined4 input1,undefined4 input2,uint value1,uint value2,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint shifted_value;\n  int temp1;\n  int temp2;\n  uint shifted_local;\n  uint shift_amount;\n  undefined8 calculated_value;\n  uint local_value1;\n  uint local_value2;\n  \n  result = FUN_080090c0(input1,1);\n  shift_amount = (value2 << 1) >> 0x15;\n  local_value2 = value2 & 0xfffff;\n  if (shift_amount != 0) {\n    local_value2 = local_value2 | 0x100000;\n  }\n  if (value1 == 0) {\n    temp1 = FUN_080091e4(&local_value2);\n    temp2 = 1;\n    shifted_value = temp1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = local_value2;\n  }\n  else {\n    local_value1 = value1;\n    shifted_value = FUN_080091e4(&local_value1);\n    if (shifted_value == 0) {\n      *(uint *)(result + 0x14) = local_value1;\n    }\n    else {\n      shifted_local = local_value2 << (0x20 - shifted_value & 0xff);\n      local_value2 = local_value2 >> (shifted_value & 0xff);\n      *(uint *)(result + 0x14) = shifted_local | local_value1;\n    }\n    if (local_value2 == 0) {\n      temp2 = 1;\n    }\n    else {\n      temp2 = 2;\n    }\n    *(uint *)(result + 0x18) = local_value2;\n    *(int *)(result + 0x10) = temp2;\n  }\n  if (shift_amount == 0) {\n    *output1 = shifted_value - 0x432;\n    calculated_value = FUN_080091a4(*(undefined4 *)(result + temp2 * 4 + 0x10));\n    *output2 = (int)((ulonglong)calculated_value >> 0x20) * 0x20 - (int)calculated_value;\n    return result;\n  }\n  *output1 = (shift_amount - 0x433) + shifted_value;\n  *output2 = 0x35 - shifted_value;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_and_transform_data_08009630",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result",
                "uVar2": "shifted_value",
                "iVar3": "temp1",
                "iVar4": "temp2",
                "uVar5": "shifted_local",
                "uVar6": "shift_amount",
                "uVar7": "calculated_value",
                "local_20": "local_value1",
                "local_1c": "local_value2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "convert_float_to_int_080096e0",
            "code": "\nundefined8 convertFloatToInt_080096e0(uint inputFloat,uint inputBitPattern,int *outputInteger,undefined4 param_4)\n\n{\n  int tempVar1;\n  uint uVar2;\n  undefined8 combinedValues;\n  \n  combinedValues = CONCAT44(inputBitPattern,inputFloat);\n  tempVar1 = 0;\n  uVar2 = inputBitPattern & 0x7fffffff;\n  *outputInteger = 0;\n  if ((uVar2 < 0x7ff00000) && ((uVar2 | inputFloat) != 0)) {\n    if (uVar2 < 0x100000) {\n      combinedValues = FUN_080004c8(inputFloat,inputBitPattern,0,0x43500000,param_4);\n      tempVar1 = -0x36;\n      uVar2 = (uint)((ulonglong)combinedValues >> 0x20) & 0x7fffffff;\n    }\n    inputFloat = (uint)combinedValues;\n    inputBitPattern = (uint)((ulonglong)combinedValues >> 0x20) & 0x800fffff | 0x3fe00000;\n    *outputInteger = ((int)uVar2 >> 0x14) + -0x3fe + tempVar1;\n  }\n  return CONCAT44(inputBitPattern,inputFloat);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "convert_float_to_int_080096e0",
                "param_1": "inputFloat",
                "param_2": "inputBitPattern",
                "param_3": "outputInteger",
                "iVar1": "tempVar1",
                "uVar3": "combinedValues"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "check_and_assign_08009744",
            "code": "\nvoid checkAndAssign_08009744(int *resultPtr,undefined4 data)\n\n{\n  int status;\n  \n  DAT_20000c10 = 0;\n  status = FUN_08005728(data);\n  if ((status == -1) && (DAT_20000c10 != 0)) {\n    *resultPtr = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "check_and_assign_08009744",
                "param_1": "resultPtr",
                "param_2": "data",
                "iVar1": "status"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "reverse_copy_string_08009768",
            "code": "\nvoid reverseCopyString_08009768(uint *destination,uint *source,uint length)\n\n{\n  char currentChar;\n  uint *currentSrc;\n  uint *currentDest;\n  uint currentData;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (currentDest = destination, currentSrc = source, 3 < length)) {\n    do {\n      source = currentSrc + 1;\n      currentData = *currentSrc;\n      destination = currentDest;\n      if ((currentData + 0xfefefeff & ~currentData & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      destination = currentDest + 1;\n      *currentDest = currentData;\n      currentDest = destination;\n      currentSrc = source;\n    } while (3 < length);\n  }\n  currentSrc = source;\n  if (length != 0) {\nLAB_0800979c:\n    currentChar = *(char *)currentSrc;\n    *(char *)destination = currentChar;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (currentChar == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      currentSrc = (uint *)((int)currentSrc + 1);\n      currentChar = *(char *)currentSrc;\n      *(char *)destination = currentChar;\n    }\n    if (length != 0) {\n      currentSrc = destination;\n      do {\n        currentDest = (uint *)((int)currentSrc + 1);\n        *(char *)currentSrc = '\\0';\n        currentSrc = currentDest;\n      } while (currentDest != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "reverse_copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "puVar2": "currentSrc",
                "puVar3": "currentDest",
                "uVar4": "currentData"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 process_data_080097cc(undefined4 *output,int *input1,int *input2)\n\n{\n  int temp1;\n  uint temp2;\n  int temp3;\n  int temp4;\n  uint temp5;\n  uint temp6;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  undefined4 temp7;\n  \n  if (input2[2] != 0) {\n    temp1 = *input1;\n    temp5 = input1[2];\n    ptr2 = (undefined4 *)*input2;\n    do {\n      do {\n        ptr1 = ptr2 + 2;\n        temp7 = *ptr2;\n        temp6 = ptr2[1];\n        ptr2 = ptr1;\n      } while (temp6 == 0);\n      temp2 = temp6;\n      if ((temp5 <= temp6) && (temp2 = temp5, (*(ushort *)(input1 + 3) & 0x480) != 0)) {\n        temp4 = temp1 - input1[4];\n        temp5 = (input1[5] * 3) / 2;\n        temp2 = temp6 + 1 + temp4;\n        if (temp5 < temp2) {\n          temp5 = temp2;\n        }\n        if ((int)((uint)*(ushort *)(input1 + 3) << 0x15) < 0) {\n          temp3 = FUN_08008af8(output,temp5);\n          if (temp3 == 0) {\nLAB_08009896:\n            *output = 0xc;\n            *(ushort *)(input1 + 3) = *(ushort *)(input1 + 3) | 0x40;\n            input2[1] = 0;\n            input2[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(temp3,input1[4],temp4);\n          *(ushort *)(input1 + 3) = *(ushort *)(input1 + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          temp3 = FUN_08009adc(output);\n          if (temp3 == 0) {\n            FUN_080088ec(output,input1[4]);\n            goto LAB_08009896;\n          }\n        }\n        temp1 = temp3 + temp4;\n        input1[5] = temp5;\n        input1[4] = temp3;\n        *input1 = temp1;\n        input1[2] = temp5 - temp4;\n        temp2 = temp6;\n      }\n      FUN_08009a18(temp1,temp7,temp2);\n      temp4 = input2[2];\n      temp5 = input1[2] - temp2;\n      temp1 = *input1 + temp2;\n      input1[2] = temp5;\n      *input1 = temp1;\n      input2[2] = temp4 - temp6;\n    } while (temp4 - temp6 != 0);\n  }\n  input2[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "uVar9": "temp7"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int type,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value2;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + count * 4 + 0x108) = value3;\n      if (type == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = count + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataPtr + (count + 2) * 4) = value1;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "type",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 dataPointer,int rowCount,int columnCount)\n\n{\n  undefined4 *allocatedMemory;\n  uint allocatedSize;\n  undefined4 *initializedMemory;\n  \n  allocatedMemory = (undefined4 *)FUN_08008af8(dataPointer,columnCount * rowCount);\n  if (allocatedMemory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  allocatedSize = (allocatedMemory[-1] & 0xfffffffc) - 4;\n  if (allocatedSize < 0x25) {\n    initializedMemory = allocatedMemory;\n    if (0x13 < allocatedSize) {\n      *allocatedMemory = 0;\n      allocatedMemory[1] = 0;\n      if (0x1b < allocatedSize) {\n        allocatedMemory[2] = 0;\n        allocatedMemory[3] = 0;\n        if (allocatedSize == 0x24) {\n          allocatedMemory[4] = 0;\n          allocatedMemory[5] = 0;\n          initializedMemory = allocatedMemory + 6;\n        }\n        else {\n          initializedMemory = allocatedMemory + 4;\n        }\n        *initializedMemory = 0;\n        initializedMemory[1] = 0;\n        initializedMemory[2] = 0;\n        return allocatedMemory;\n      }\n      initializedMemory = allocatedMemory + 2;\n    }\n    *initializedMemory = 0;\n    initializedMemory[1] = 0;\n    initializedMemory[2] = 0;\n    return allocatedMemory;\n  }\n  FUN_08005d68(allocatedMemory,0);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "dataPointer",
                "param_2": "rowCount",
                "param_3": "columnCount",
                "puVar1": "allocatedMemory",
                "uVar2": "allocatedSize",
                "puVar3": "initializedMemory"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copy_memory_08009a18(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int index;\n  undefined *dest_byte;\n  undefined4 *src_byte;\n  uint remaining_size;\n  uint remaining_size;\n  \n  if ((src < dest) && (src_ptr = (undefined4 *)((int)src + size), dest < src_ptr)) {\n    dest_byte = (undefined *)((int)dest + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte = dest_byte + -1;\n        *dest_byte = *(undefined *)src_ptr;\n      } while (src != src_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)dest | (uint)src) & 3) != 0) goto LAB_08009abc;\n      src_ptr = src + 4;\n      dest_ptr = dest + 4;\n      do {\n        src_byte = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte != (undefined4 *)((int)src + (size - 0x10 & 0xfffffff0) + 0x20));\n      index = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      src = src + index * 4;\n      dest = dest + index * 4;\n      if (3 < remaining_size) {\n        src_ptr = dest + -1;\n        remaining_size = remaining_size;\n        dest_ptr = src;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        index = (remaining_size - 4 & 0xfffffffc) + 4;\n        dest = (undefined4 *)((int)dest + index);\n        src = (undefined4 *)((int)src + index);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\nLAB_08009abc:\n      dest_byte = (undefined *)((int)dest + -1);\n      src_ptr = src;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte = dest_byte + 1;\n        *dest_byte = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)src));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "index",
                "puVar4": "dest_byte",
                "puVar5": "src_byte",
                "uVar6": "remaining_size",
                "uVar7": "remaining_size"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_block_08009adc",
            "code": "\nint * allocate_memory_block_08009adc(undefined4 *ptr_to_param_1,int *ptr_to_param_2,uint size_of_block)\n\n{\n  int *new_ptr;\n  int temp_var;\n  int *return_ptr;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  int *temp_ptr;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  \n  if (ptr_to_param_2 == (int *)0x0) {\n    return_ptr = (int *)FUN_08008af8(ptr_to_param_1,size_of_block);\n    return return_ptr;\n  }\n  FUN_080090a8();\n  temp_var_4 = ptr_to_param_2[-1];\n  temp_var_6 = temp_var_4 & 0xfffffffc;\n  return_ptr = ptr_to_param_2 + -2;\n  if (size_of_block + 0xb < 0x17) {\n    temp_var_5 = 0x10;\n  }\n  else {\n    temp_var_5 = size_of_block + 0xb & 0xfffffff8;\n    if ((int)temp_var_5 < 0) goto LAB_08009b8e;\n  }\n  if (temp_var_5 < size_of_block) {\nLAB_08009b8e:\n    *ptr_to_param_1 = 0xc;\n    return (int *)0x0;\n  }\n  temp_var_8 = (int)return_ptr + temp_var_6;\n  temp_var_7 = temp_var_6;\n  if ((int)temp_var_6 < (int)temp_var_5) {\n    if (DAT_20000454 == temp_var_8) {\n      temp_var_8 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + temp_var_6;\n      if ((int)(temp_var_5 + 0x10) <= temp_var_8) {\n        DAT_20000454 = (int)return_ptr + temp_var_5;\n        *(uint *)(DAT_20000454 + 4) = temp_var_8 - temp_var_5 | 1;\n        ptr_to_param_2[-1] = temp_var_5 | ptr_to_param_2[-1] & 1U;\n        FUN_080090b4(ptr_to_param_1);\n        return ptr_to_param_2;\n      }\n      if (-1 < (int)(temp_var_4 << 0x1f)) {\n        new_ptr = (int *)((int)return_ptr - ptr_to_param_2[-2]);\n        temp_var_4 = new_ptr[1] & 0xfffffffc;\n        if ((int)(temp_var_5 + 0x10) <= (int)(temp_var_8 + temp_var_4)) {\n          temp_var_3 = new_ptr[3];\n          return_ptr = new_ptr + 2;\n          temp_var = *return_ptr;\n          temp_var_6 = temp_var_6 - 4;\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          if (temp_var_6 < 0x25) {\n            temp_var = *ptr_to_param_2;\n            temp_ptr = return_ptr;\n            if (0x13 < temp_var_6) {\n              new_ptr[2] = temp_var;\n              new_ptr[3] = ptr_to_param_2[1];\n              temp_var = ptr_to_param_2[2];\n              if (temp_var_6 < 0x1c) {\n                ptr_to_param_2 = ptr_to_param_2 + 2;\n                temp_ptr = new_ptr + 4;\n              }\n              else {\n                new_ptr[4] = temp_var;\n                new_ptr[5] = ptr_to_param_2[3];\n                temp_var = ptr_to_param_2[4];\n                if (temp_var_6 == 0x24) {\n                  new_ptr[6] = temp_var;\n                  new_ptr[7] = ptr_to_param_2[5];\n                  temp_var = ptr_to_param_2[6];\n                  ptr_to_param_2 = ptr_to_param_2 + 6;\n                  temp_ptr = new_ptr + 8;\n                }\n                else {\n                  ptr_to_param_2 = ptr_to_param_2 + 4;\n                  temp_ptr = new_ptr + 6;\n                }\n              }\n            }\n            *temp_ptr = temp_var;\n            temp_ptr[1] = ptr_to_param_2[1];\n            temp_ptr[2] = ptr_to_param_2[2];\n          }\n          else {\n            FUN_08009a18(return_ptr,ptr_to_param_2);\n          }\n          DAT_20000454 = (int)new_ptr + temp_var_5;\n          *(uint *)(DAT_20000454 + 4) = (temp_var_8 + temp_var_4) - temp_var_5 | 1;\n          new_ptr[1] = temp_var_5 | new_ptr[1] & 1U;\n          FUN_080090b4(ptr_to_param_1);\n          return return_ptr;\n        }\nLAB_08009bb0:\n        temp_var_7 = temp_var_6 + temp_var_4;\n        if ((int)temp_var_5 <= (int)temp_var_7) {\n          temp_var_3 = new_ptr[3];\n          temp_ptr = new_ptr + 2;\n          temp_var = *temp_ptr;\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_8 = (int)new_ptr + temp_var_7;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          return_ptr = new_ptr;\n          if (temp_var_6 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(temp_ptr,ptr_to_param_2);\n          ptr_to_param_2 = temp_ptr;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var_8 + 4) & 0xfffffffe) + temp_var_8 + 4) << 0x1f) {\n        temp_var_2 = *(uint *)(temp_var_8 + 4) & 0xfffffffc;\n        temp_var_7 = temp_var_6 + temp_var_2;\n        if ((int)temp_var_7 < (int)temp_var_5) {\n          if ((int)(temp_var_4 << 0x1f) < 0) goto LAB_08009b36;\n          new_ptr = (int *)((int)return_ptr - ptr_to_param_2[-2]);\n          temp_var_4 = new_ptr[1] & 0xfffffffc;\n          temp_var_7 = temp_var_2 + temp_var_4 + temp_var_6;\n          if ((int)temp_var_7 < (int)temp_var_5) goto LAB_08009bb0;\n          temp_var = *(int *)(temp_var_8 + 8);\n          temp_var_8 = *(int *)(temp_var_8 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var_8;\n          *(int *)(temp_var_8 + 8) = temp_var;\n          temp_ptr = new_ptr + 2;\n          temp_var = *temp_ptr;\n          temp_var_3 = new_ptr[3];\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_8 = (int)new_ptr + temp_var_7;\n          *(int *)(temp_var_3 + 8) = temp_var;\n          return_ptr = new_ptr;\n          if (0x24 < temp_var_6 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          temp_var_6 = temp_var_6 - 4;\n          temp_var = *ptr_to_param_2;\n          new_ptr = temp_ptr;\n          if (0x13 < temp_var_6) {\n            return_ptr[2] = temp_var;\n            return_ptr[3] = ptr_to_param_2[1];\n            temp_var = ptr_to_param_2[2];\n            if (temp_var_6 < 0x1c) {\n              ptr_to_param_2 = ptr_to_param_2 + 2;\n              new_ptr = return_ptr + 4;\n            }\n            else {\n              return_ptr[4] = temp_var;\n              return_ptr[5] = ptr_to_param_2[3];\n              temp_var = ptr_to_param_2[4];\n              if (temp_var_6 == 0x24) {\n                return_ptr[6] = temp_var;\n                return_ptr[7] = ptr_to_param_2[5];\n                temp_var = ptr_to_param_2[6];\n                ptr_to_param_2 = ptr_to_param_2 + 6;\n                new_ptr = return_ptr + 8;\n              }\n              else {\n                ptr_to_param_2 = ptr_to_param_2 + 4;\n                new_ptr = return_ptr + 6;\n              }\n            }\n          }\n          *new_ptr = temp_var;\n          new_ptr[1] = ptr_to_param_2[1];\n          new_ptr[2] = ptr_to_param_2[2];\n          ptr_to_param_2 = temp_ptr;\n        }\n        else {\n          temp_var = *(int *)(temp_var_8 + 8);\n          temp_var_3 = *(int *)(temp_var_8 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var_3;\n          temp_var_8 = (int)return_ptr + temp_var_7;\n          *(int *)(temp_var_3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var_4 << 0x1f)) {\n        new_ptr = (int *)((int)return_ptr - ptr_to_param_2[-2]);\n        temp_var_4 = new_ptr[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_ptr = (int *)FUN_08008af8(ptr_to_param_1,size_of_block);\n    if (new_ptr != (int *)0x0) {\n      if ((int *)((ptr_to_param_2[-1] & 0xfffffffeU) + (int)return_ptr) == new_ptr + -2) {\n        temp_var_7 = temp_var_6 + (new_ptr[-1] & 0xfffffffcU);\n        temp_var_8 = (int)return_ptr + temp_var_7;\n        goto LAB_08009c00;\n      }\n      temp_var_6 = temp_var_6 - 4;\n      if (temp_var_6 < 0x25) {\n        temp_var_8 = *ptr_to_param_2;\n        return_ptr = ptr_to_param_2;\n        temp_ptr = new_ptr;\n        if (0x13 < temp_var_6) {\n          *new_ptr = temp_var_8;\n          new_ptr[1] = ptr_to_param_2[1];\n          if (temp_var_6 < 0x1c) {\n            temp_var_8 = ptr_to_param_2[2];\n            return_ptr = ptr_to_param_2 + 2;\n            temp_ptr = new_ptr + 2;\n          }\n          else {\n            new_ptr[2] = ptr_to_param_2[2];\n            new_ptr[3] = ptr_to_param_2[3];\n            if (temp_var_6 == 0x24) {\n              new_ptr[4] = ptr_to_param_2[4];\n              new_ptr[5] = ptr_to_param_2[5];\n              temp_var_8 = ptr_to_param_2[6];\n              return_ptr = ptr_to_param_2 + 6;\n              temp_ptr = new_ptr + 6;\n            }\n            else {\n              temp_var_8 = ptr_to_param_2[4];\n              return_ptr = ptr_to_param_2 + 4;\n              temp_ptr = new_ptr + 4;\n            }\n          }\n        }\n        *temp_ptr = temp_var_8;\n        temp_ptr[1] = return_ptr[1];\n        temp_ptr[2] = return_ptr[2];\n      }\n      else {\n        FUN_08009a18(new_ptr,ptr_to_param_2);\n      }\n      FUN_080088ec(ptr_to_param_1,ptr_to_param_2);\n    }\n    FUN_080090b4(ptr_to_param_1);\n    ptr_to_param_2 = new_ptr;\n  }\n  else {\nLAB_08009c00:\n    if (temp_var_7 - temp_var_5 < 0x10) {\n      return_ptr[1] = return_ptr[1] & 1U | temp_var_7;\n      *(uint *)(temp_var_8 + 4) = *(uint *)(temp_var_8 + 4) | 1;\n    }\n    else {\n      return_ptr[1] = return_ptr[1] & 1U | temp_var_5;\n      *(uint *)((int)return_ptr + temp_var_5 + 4) = temp_var_7 - temp_var_5 | 1;\n      *(uint *)(temp_var_8 + 4) = *(uint *)(temp_var_8 + 4) | 1;\n      FUN_080088ec(ptr_to_param_1,(int)return_ptr + temp_var_5 + 8);\n    }\n    FUN_080090b4(ptr_to_param_1);\n  }\n  return ptr_to_param_2;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_block_08009adc",
                "param_1": "ptr_to_param_1",
                "param_2": "ptr_to_param_2",
                "param_3": "size_of_block",
                "piVar1": "new_ptr",
                "iVar2": "temp_var",
                "piVar3": "return_ptr",
                "uVar4": "temp_var_2",
                "iVar5": "temp_var_3",
                "uVar6": "temp_var_4",
                "piVar7": "temp_ptr",
                "uVar8": "temp_var_5",
                "uVar9": "temp_var_6",
                "uVar10": "temp_var_7",
                "iVar11": "temp_var_8"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 152448,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}