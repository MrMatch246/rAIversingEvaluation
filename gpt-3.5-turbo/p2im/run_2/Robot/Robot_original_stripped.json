{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_sysclock_frequency_08003440",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pllmul_factor_table",
                "pllmul": "pllmul_index",
                "tmpreg": "tmpreg",
                "sysclockfreq": "sysclock_freq",
                "pllclk": "pllclk",
                "uVar1": "uVar1"
            },
            "code": "uint32_t calculate_sysclock_frequency_08003440(void)\n{\n  uint32_t sysclock_freq;\n  uint32_t pllclk;\n  uint32_t tmpreg;\n  uint32_t prediv_factor_table[2];\n  uint32_t pllmul_factor_table[16];\n  uint32_t pllmul_index;\n  uint32_t uVar1;\n  \n  pllmul_factor_table[0] = *(uint32_t *)PTR__etext_080034f0;\n  pllmul_factor_table[1] = *(uint32_t *)(PTR__etext_080034f0 + 4);\n  pllmul_factor_table[2] = *(uint32_t *)(PTR__etext_080034f0 + 8);\n  pllmul_factor_table[3] = *(uint32_t *)(PTR__etext_080034f0 + 0xc);\n  prediv_factor_table = *(uint8_t (*) [2])PTR_DAT_080034f4;\n  uVar1 = *(uint *)(DAT_080034f8 + 4);\n  if ((uVar1 & 0xc) == 4) {\n    sysclock_freq = DAT_080034fc;\n  }\n  else if ((uVar1 & 0xc) == 8) {\n    pllmul_index = uVar1 >> 0x12 & 0xf;\n    if ((uVar1 & 0x10000) == 0) {\n      pllclk = DAT_08003500 * pllmul_factor_table[pllmul_index];\n    }\n    else {\n      pllclk = (DAT_080034fc * pllmul_factor_table[pllmul_index]) /\n               prediv_factor_table[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n    }\n    sysclock_freq = pllclk;\n  }\n  else {\n    sysclock_freq = DAT_080034fc;\n  }\n  return sysclock_freq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_sysclock_frequency_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004f2c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_current_tick_08004f2c"
        },
        "FUN_080056bc": {
            "renaming": {
                "FUN_080056bc": "do_nothing_080056bc"
            },
            "code": "\nvoid do_nothing_080056bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056bc"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "set_uart_config_080046ec",
                "*huart": "*uart_handle",
                "uVar1": "mantissa",
                "uVar2": "fraction",
                "uVar3": "over8",
                "uVar4": "apb_freq",
                "uVar5": "apb_freq",
                "uVar6": "apb_freq",
                "uVar7": "apb_freq",
                "uVar8": "apb_freq",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "uVar12": "baud_rate",
                "tmpreg": "tmp_reg",
                "DAT_08004914": "USART1",
                "DAT_08004918": "OVER8"
            },
            "code": "void set_uart_config_080046ec(UART_HandleTypeDef *uart_handle)\n{\n    uint32_t apb_freq, baud_rate, tmpreg;\n    uint16_t cr2_mask = 0xffffcfff, cr1_mask = 0xffffe9f3, cr3_mask = 0xfffffcff;\n    uint16_t cr1_val, cr2_val, cr3_val;\n\n    cr2_val = uart_handle->Instance->CR2 & cr2_mask | uart_handle->Init.StopBits;\n    cr1_val = uart_handle->Instance->CR1 & cr1_mask | uart_handle->Init.Mode | uart_handle->Init.WordLength | uart_handle->Init.Parity;\n    cr3_val = uart_handle->Instance->CR3 & cr3_mask | uart_handle->Init.HwFlowCtl;\n\n    uart_handle->Instance->CR2 = cr2_val;\n    uart_handle->Instance->CR1 = cr1_val;\n    uart_handle->Instance->CR3 = cr3_val;\n\n    apb_freq = (uart_handle->Instance == DAT_08004914) ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();\n    baud_rate = uart_handle->Init.BaudRate;\n\n    tmpreg = (uint32_t)(((apb_freq * 2) + (baud_rate / 2)) / baud_rate);\n    uart_handle->Instance->BRR = tmpreg;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "HVar1": "status",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config",
                "PTR_htim2_08005590": "htim2",
                "_Error_Handler": "_Error_Handler",
                "PTR_s____src_main_c_08005594": "__FILE__",
                "TIM_ClockConfigTypeDef": "TIM_ClockConfigTypeDef",
                "TIM_MasterConfigTypeDef": "TIM_MasterConfigTypeDef",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_Base_Init": "HAL_TIM_Base_Init",
                "HAL_TIM_ConfigClockSource": "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_MasterConfigSynchronization": "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "0x40000000": "TIM2",
                "36000": "36000",
                "0": "TIM_COUNTERMODE_UP",
                "0x14": "20",
                "0x10": "TIM_CLOCKDIVISION_DIV1",
                "0x18": "TIM_AUTORELOAD_PRELOAD_DISABLE",
                "0x1000": "TIM_CLOCKSOURCE_INTERNAL",
                "0x20": "TIM_TRGO_UPDATE",
                "TIM_MASTERSLAVEMODE_DISABLE": "TIM_MASTERSLAVEMODE_DISABLE"
            },
            "code": "void initialize_timer_08005500(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n  \n  PTR_htim2_08005590.Instance = TIM2;\n  PTR_htim2_08005590.Init.Prescaler = 36000;\n  PTR_htim2_08005590.Init.CounterMode = TIM_COUNTERMODE_UP;\n  PTR_htim2_08005590.Init.Period = 20;\n  PTR_htim2_08005590.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  PTR_htim2_08005590.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;\n  status = HAL_TIM_Base_Init(&PTR_htim2_08005590);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(&PTR_htim2_08005590, &clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_UPDATE;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(&PTR_htim2_08005590, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n}\n",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_timer_08005500"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "delay_08003568",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles"
            },
            "code": "void delay_08003568(uint32_t milliseconds)\n{\n  uint32_t delay_08003568_cycles = milliseconds * ((uint64_t)SYS_CLOCK_FREQ * (uint64_t)*SYS_CLOCK_FREQ_PTR >> 41);\n  while(delay_08003568_cycles--);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_08003568"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_I2C_status_08002c2e",
                "*hi2c": "*i2c_handle",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_I2C_status_08002c2e(I2C_HandleTypeDef *i2c_handle, uint32_t timeout, uint32_t start_tick)\n{\n    HAL_StatusTypeDef status;\n    uint32_t current_tick;\n    while( true ) {\n        if ((i2c_handle->Instance->SR1 & 4) == 4) {\n          return HAL_OK;\n        }\n        status = I2C_IsAcknowledgeFailed(i2c_handle);\n        if (status != HAL_OK) break;\n        if ((timeout != 0xffffffff) && ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n          i2c_handle->ErrorCode = i2c_handle->ErrorCode | 0x20;\n          i2c_handle->PreviousState = 0;\n          i2c_handle->State = HAL_I2C_STATE_READY;\n          i2c_handle->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "check_I2C_status_08002c2e"
        },
        "FUN_080008ec": {
            "renaming": {
                "FUN_080008ec": "check_values_080008ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "xorResult",
                "bVar2": "isZero",
                "bVar3": "isLess"
            },
            "code": "uint check_values_080008ec(uint value1, uint value2, uint value3, uint value4)\n{\n  uint result;\n  bool isZero;\n  bool isMatch;\n  bool isLess;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) && ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) || (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  isMatch = !isZero && value2 == value4 && value1 == value3;\n  if (!isMatch) {\n    uint xorResult = value2 ^ value4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = value2 == value4;\n    }\n    isLess = -1 < (int)xorResult && value4 <= value2;\n    if (isZero) {\n      isLess = value3 <= value1;\n    }\n    result = (int)value4 >> 0x1f;\n    if (!isLess) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ec",
            "calling": [],
            "imported": false,
            "current_name": "check_values_080008ec"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "compare_double_08000978",
                "param_1": "first_num",
                "param_2": "second_num",
                "param_3": "unused_parameter_1",
                "param_4": "unused_parameter_2"
            },
            "code": "void compare_double_08000978(float first_num, float second_num)\n{\n    __aeabi_cdcmpeq(first_num, second_num);\n    return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_08000978"
        },
        "FUN_0800101c": {
            "renaming": {
                "FUN_0800101c": "is_greater_than_zero_0800101c",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_greater_than_zero_0800101c(void)\n{\n  bool is_CY_zero = __aeabi_cfrcmple();\n  bool is_ZR_zero = (bool)in_ZR;\n  return !is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800101c",
            "calling": [],
            "imported": false,
            "current_name": "is_greater_than_zero_0800101c"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "wait_forever_080056d4"
            },
            "code": "void wait_forever_080056d4(void)\n{\n    while (true)\n    {\n        // Loop infinitely\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056d4"
        },
        "FUN_080078b4": {
            "renaming": {
                "FUN_080078b4": "register_exit_proc_080078b4",
                "__func": "func_ptr",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_proc_080078b4(__func *func_ptr)\n{\n  int exit_proc_id;\n  exit_proc_id = __register_exitproc(0, func_ptr, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078b4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_080078b4"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "handle_timer_period_elapsed_080017b4",
                "TIM_HandleTypeDef": "timer_handle",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void handle_timer_period_elapsed_080017b4(TIM_HandleTypeDef *timer_handle)\n{\n  HAL_TIM_PeriodElapsedCallback(timer_handle);\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_timer_period_elapsed_080017b4"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "isEndOfString_08001030",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_08001030(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "isEndOfString_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "divide_numbers_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void divide_numbers_080011ec(int dividend, int divisor, int quotient, int remainder)\n{\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend,divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "divide_numbers_080011ec"
        },
        "FUN_080056ce": {
            "renaming": {
                "FUN_080056ce": "infiniteLoop_080056ce"
            },
            "code": "void infiniteLoop_080056ce(void)\n{\n  while(true)\n  {\n    //Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ce",
            "calling": [],
            "imported": false,
            "current_name": "infiniteLoop_080056ce"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "str": "data_buffer",
                "len": "buffer_length",
                "PTR_huart1_08004f5c": "&huart1"
            },
            "code": "void transmit_uart_data_08004f3c(char *data_buffer, uint32_t buffer_length)\n{\n  HAL_UART_Transmit(PTR_huart1_08004f5c, (uint8_t *)data_buffer, (uint16_t)buffer_length, 0x32);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004f3c"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "compare_uintegers_080008fc",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "param_3": "third_integer",
                "param_4": "fourth_integer",
                "uVar1": "difference_between_second_and_fourth_integers",
                "bVar2": "is_zero",
                "bVar3": "is_second_integer_greater_than_fourth_integer"
            },
            "code": "uint compare_uintegers_080008fc(uint first_integer, uint second_integer, uint third_integer, uint fourth_integer)\n{\n  uint result;\n  bool is_first_integer_zero = (first_integer | second_integer << 1) == 0;\n  bool is_third_integer_zero = (third_integer | fourth_integer << 1) == 0;\n  bool are_second_and_fourth_integers_equal = second_integer == fourth_integer;\n  bool are_first_and_third_integers_equal = first_integer == third_integer;\n  bool is_second_integer_different_from_fourth_integer = second_integer ^ fourth_integer;\n  bool is_second_integer_greater_than_fourth_integer = -1 < (int)is_second_integer_different_from_fourth_integer && fourth_integer <= second_integer;\n  if (((int)(second_integer << 1) >> 0x15 == -1 || (int)(fourth_integer << 1) >> 0x15 == -1) && ((((int)(second_integer << 1) >> 0x15 == -1 && ((first_integer | second_integer << 0xc) != 0)) || (((int)(fourth_integer << 1) >> 0x15 == -1 && ((third_integer | fourth_integer << 0xc) != 0)))))) {\n    return 1;\n  }\n  if (!is_first_integer_zero && !is_third_integer_zero && !are_second_and_fourth_integers_equal && !are_first_and_third_integers_equal) {\n    if (is_second_integer_different_from_fourth_integer) {\n      if (is_second_integer_greater_than_fourth_integer) {\n        result = ~0 + 1;\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 1;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "compare_uintegers_080008fc"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_NVIC_priority_group_08001714",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_NVIC_priority_group_08001714(uint32_t priority_group)\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_NVIC_priority_group_08001714"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "convert_double_to_float_08000988",
                "param_1": "input_float"
            },
            "code": "undefined4 convert_double_to_float_08000988(undefined4 input_float)\n{\n  __nedf2();\n  return input_float;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "convert_double_to_float_08000988"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "dividend_ptr",
                "iVar3": "remainder",
                "iVar4": "dividend_index",
                "iVar5": "divisor_index",
                "uVar6": "temp_quotient",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend",
                "puVar9": "last_divisor_ptr",
                "puVar11": "current_divisor_ptr",
                "puVar12": "next_divisor_ptr"
            },
            "code": "uint calculate_quotient_080078c0(int dividend[], int divisor[], int dividend_length, int divisor_length) {\n  uint quotient = 0;\n  int dividend_index, divisor_index;\n  int remainder = 0;\n  int temp_dividend, temp_quotient, temp_remainder;\n  int *dividend_ptr = dividend + dividend_length - 1;\n  int *divisor_ptr = divisor + divisor_length - 1;\n  if (*divisor_ptr == 0) {\n    return 0;\n  }\n  if (dividend_length < divisor_length) {\n    return 0;\n  }\n  if (dividend_length == divisor_length) {\n    if (*dividend_ptr < *divisor_ptr) {\n      return 0;\n    }\n  }\n  while (dividend_ptr >= dividend + divisor_length - 1) {\n    temp_dividend = remainder * 0x10000 + *dividend_ptr;\n    temp_quotient = temp_dividend / (*divisor_ptr + 1);\n    temp_remainder = temp_dividend - temp_quotient * (*divisor_ptr + 1);\n    if (temp_quotient > 0) {\n      quotient = quotient * 0x10000 + temp_quotient;\n      remainder = temp_remainder;\n    }\n    dividend_ptr--;\n  }\n  dividend_index = dividend_length - divisor_length - 1;\n  divisor_index = divisor_length - 1;\n  while (dividend_index >= 0) {\n    temp_dividend = remainder * 0x10000 + dividend[dividend_index];\n    temp_quotient = temp_dividend / (*divisor_ptr);\n    temp_remainder = temp_dividend - temp_quotient * (*divisor_ptr);\n    quotient = quotient * 0x10000 + temp_quotient;\n    remainder = temp_remainder;\n    dividend_index--;\n  }\n  return quotient;\n}",
            "called": [
                "__mcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_quotient_080078c0"
        },
        "FUN_080056e0": {
            "renaming": {
                "FUN_080056e0": "do_nothing_080056e0"
            },
            "code": "\nvoid do_nothing_080056e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056e0"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,uint param_6,\n              int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    _Bfree(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = __aeabi_dcmpeq(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = __d2b(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30);\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = __floatunsidf(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = __subdf3(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = __aeabi_i2d(iVar13);\n  uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = __aeabi_d2iz();\n  iVar10 = __aeabi_dcmplt((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = __aeabi_i2d(local_74);\n    iVar10 = __aeabi_dcmpeq((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = __aeabi_dcmpgt(*(undefined4 *)(PTR___mprec_tens_08007c04 + local_74 * 8),\n                              *(undefined4 *)((int)(PTR___mprec_tens_08007c04 + local_74 * 8) + 4),\n                              param_3,local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)_Balloc(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)_Balloc(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = __muldf3(param_3,local_7c,\n                          *(undefined4 *)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8),\n                          *(undefined4 *)\n                           ((int)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR___mprec_bigtens_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]);\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR___mprec_tens_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = __divdf3(param_3,local_7c,*(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x20),\n                          *(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = __muldf3((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = __divdf3(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = __aeabi_dcmplt(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0))\n    {\n      if (local_68 == 0) {\n        uVar21 = __aeabi_i2d(iVar9);\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = __muldf3(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = __aeabi_i2d(iVar9 + 1);\n        uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                          (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = __aeabi_i2d(iVar9);\n    uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = __aeabi_d2iz(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -4);\n      uVar21 = __aeabi_i2d();\n      uVar21 = __subdf3(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = __muldf3(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = __aeabi_d2iz();\n            uVar23 = __aeabi_i2d();\n            uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                              (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = __aeabi_dadd((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = __subdf3(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = __aeabi_dcmpgt((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = __divdf3(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = __subdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = __aeabi_d2iz();\n              uVar23 = __aeabi_i2d();\n              uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8)\n              ;\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = __subdf3(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = __aeabi_dcmpgt((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR___mprec_tens_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        __divdf3(param_3,uVar4,uVar8,uVar11);\n        bVar2 = __aeabi_d2iz();\n        uVar21 = __aeabi_i2d();\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = __subdf3(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            __divdf3((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = __aeabi_d2iz();\n            uVar22 = __aeabi_i2d();\n            uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = __subdf3((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = __aeabi_dcmpgt((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = __aeabi_dcmpeq((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 ||\n            ((bVar2 & 1) == 0)))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = __muldf3(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = __aeabi_dcmpge((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = __i2b(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = __pow5mult(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = __pow5mult(param_1,uVar12,iVar9);\n          uVar8 = __multiply(param_1,uVar12,uVar3);\n          _Bfree(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = __pow5mult(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = __i2b(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = __pow5mult(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = __hi0bits(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = __lshift(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = __lshift(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = __mcmp(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = __multadd(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = __multadd(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = __multadd(param_1,uVar5,5);\n        iVar9 = __mcmp(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = quorem(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = __lshift(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = _Balloc(param_1,*(undefined4 *)(local_80 + 4));\n        memcpy((void *)(iVar9 + 0xc),(void *)(local_80 + 0xc),(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = __lshift(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = quorem(uVar3,uVar5);\n      iVar13 = __mcmp(uVar3,local_80);\n      iVar10 = __mdiff(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = __mcmp(uVar3);\n        _Bfree(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = __lshift(param_1,uVar3,1);\n          iVar13 = __mcmp(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = __multadd(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = __lshift(param_1,uVar3,1);\n    iVar9 = __mcmp(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      _Bfree(param_1);\n    }\n  }\n  _Bfree(param_1,uVar12);\nLAB_08008294:\n  _Bfree(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__floatunsidf",
                "_Bfree",
                "__lshift",
                "__pow5mult",
                "__multadd",
                "__aeabi_dcmplt",
                "__divdf3",
                "__i2b",
                "__multiply",
                "__aeabi_i2d",
                "__mcmp",
                "_Balloc",
                "__subdf3",
                "__d2b",
                "__mdiff",
                "__hi0bits",
                "memcpy",
                "__aeabi_d2iz",
                "quorem",
                "__aeabi_dcmpge",
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "configureGPIO_080017c4",
                "GPIOx": "GPIO",
                "GPIO_Init": "config",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "pin_mask",
                "uVar4": "pin_value",
                "uVar5": "mode",
                "pGVar6": "GPIO_reg",
                "iVar7": "port_index",
                "tmpreg": "tmp_reg",
                "configregister": "config_reg",
                "registeroffset": "reg_offset",
                "temp": "temp",
                "iocurrent": "io_current",
                "ioposition": "io_position",
                "config": "config_value",
                "position": "position"
            },
            "code": "void configureGPIO_080017c4(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *config) {\n    uint32_t pin_mask;\n    uint32_t config_value;\n    uint32_t position = 0;\n    while (position <= 15) {\n        pin_mask = 1 << position;\n        if (config->Pin & pin_mask) {\n            switch (config->Mode) {\n                case GPIO_MODE_OUTPUT_PP:\n                case GPIO_MODE_OUTPUT_OD:\n                    config_value = config->Speed;\n                    break;\n                case GPIO_MODE_INPUT:\n                case GPIO_MODE_IT_RISING:\n                case GPIO_MODE_IT_FALLING:\n                case GPIO_MODE_IT_RISING_FALLING:\n                    if (config->Pull == GPIO_NOPULL) {\n                        config_value = 0x04;\n                    } else if (config->Pull == GPIO_PULLUP) {\n                        config_value = 0x08;\n                        GPIO->BSRR = pin_mask;\n                    } else {\n                        config_value = 0x08;\n                        GPIO->BRR = pin_mask;\n                    }\n                    break;\n                case GPIO_MODE_ANALOG:\n                    config_value = 0x00;\n                    break;\n                default:\n                    config_value = 0x00;\n                    break;\n            }\n            if (position < 8) {\n                GPIO->CRL = (GPIO->CRL & ~(0xf << (position * 4))) | (config_value << (position * 4));\n            } else {\n                GPIO->CRH = (GPIO->CRH & ~(0xf << ((position - 8) * 4))) | (config_value << ((position - 8) * 4));\n            }\n        }\n        position++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "HAL_TIM_MspPostInit",
                "MX_GPIO_Init"
            ],
            "imported": false,
            "current_name": "configureGPIO_080017c4"
        },
        "FUN_080056da": {
            "renaming": {
                "FUN_080056da": "wait_forever_080056da"
            },
            "code": "void wait_forever_080056da(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056da",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056da"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t calculate_shifted_value_08001044(uint32_t input_value)\n{\n  uint32_t shifted_value = input_value << 1;\n  \n  if (((input_value & 0x80000000) != 0) || (shifted_value < 0x7f000000)) {\n    return 0;\n  }\n  \n  uint32_t shift_amount = 0x9e - ((shifted_value) >> 0x18);\n  \n  if (shift_amount > 0) {\n    uint32_t shifted_result = (shifted_value << 8) | 0x80000000;\n    return shifted_result >> (shift_amount & 0xff);\n  }\n  \n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  \n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "convert_bits_to_integers_08009444",
                "param_1": "num_bits",
                "param_2": "bit_array",
                "param_3": "array_length",
                "iVar1": "word_index",
                "iVar2": "bit_index",
                "iVar3": "num_words_needed",
                "uVar4": "old_value",
                "iVar5": "word_index",
                "iVar6": "word_index_increment",
                "puVar7": "integer_ptr",
                "puVar8": "bit_ptr",
                "puVar9": "integer_ptr",
                "puVar10": "bit_ptr",
                "puVar11": "bit_ptr",
                "puVar12": "integer_ptr",
                "iVar13": "num_words_needed",
                "iVar14": "num_words_needed",
                "uVar15": "carry",
                "_Balloc": "_allocate_memory"
            },
            "code": "void convert_bits_to_integers_08009444(int num_bits, uint32_t *bit_array, uint32_t array_length)\n{\n  int num_words_needed;\n  int word_index;\n  int bit_index;\n  uint32_t *integer_array;\n  uint32_t *bit_ptr;\n  uint32_t *integer_ptr;\n  uint32_t carry;\n  \n  num_words_needed = (int)array_length >> 5;\n  num_words_needed += bit_array[4];\n  num_words_needed++;\n  \n  word_index = bit_array[1];\n  bit_index = bit_array[2];\n  \n  if ((int)bit_array[2] < num_words_needed) {\n    do {\n      word_index++;\n      bit_index *= 2;\n    } while (num_words_needed != bit_index && num_words_needed + (-2 * bit_index) < 0 == SBORROW4(num_words_needed,bit_index));\n  }\n  \n  integer_array = _Balloc(num_bits, word_index);\n  integer_ptr = integer_array + 4;\n  \n  if (0 < num_words_needed) {\n    bit_ptr = integer_array + 4 + num_words_needed;\n    integer_ptr = integer_array + 4;\n    do {\n      *integer_ptr = 0;\n      integer_ptr++;\n    } while (integer_ptr != bit_ptr);\n  }\n  \n  num_words_needed = bit_array[4];\n  bit_ptr = bit_array + 5;\n  array_length = array_length & 0x1f;\n  \n  if (array_length == 0) {\n    integer_ptr--;\n    bit_ptr = bit_array + 5;\n    do {\n      integer_ptr++;\n      *integer_ptr = *bit_ptr;\n      bit_ptr++;\n    } while (bit_ptr < bit_array + num_words_needed);\n  }\n  else {\n    carry = 0;\n    bit_ptr = bit_array + 5;\n    do {\n      *integer_ptr = *bit_ptr << array_length | carry;\n      carry = *bit_ptr >> (0x20 - array_length & 0xff);\n      bit_ptr++;\n      integer_ptr++;\n    } while (bit_ptr < bit_array + num_words_needed);\n    integer_ptr[1] = carry;\n    if (carry != 0) {\n      num_words_needed = num_words_needed + bit_array[4] + 2;\n    }\n  }\n  \n  word_index = *(int *)(num_bits + 0x4c);\n  bit_index = bit_array[1];\n  uint32_t old_value = *(uint32_t *)(word_index + bit_index * 4);\n  *(int *)(integer_array + 0x10) = num_words_needed - 1;\n  *bit_array = old_value;\n  *(uint32_t **)(word_index + bit_index * 4) = bit_array;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "convert_bits_to_integers_08009444"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "transmitData_08004436",
                "*huart": "*uart",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "HVar3": "status",
                "iVar4": "elapsed_time",
                "local_58": "data_16",
                "tmp": "tmp",
                "tickstart": "tickstart"
            },
            "code": "HAL_StatusTypeDef transmitData_08004436(UART_HandleTypeDef *uart, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  uint32_t elapsed_time;\n  HAL_StatusTypeDef status;\n  ushort *data_16 = (ushort *)data;\n  uint16_t *tmp;\n\n  if (uart->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n\n  if ((data == NULL) || (size == 0)) {\n    return HAL_ERROR;\n  }\n\n  if (uart->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n\n  uart->Lock = HAL_LOCKED;\n  uart->ErrorCode = 0;\n  uart->gState = HAL_UART_STATE_BUSY_TX;\n\n  start_time = HAL_GetTick();\n  uart->TxXferSize = size;\n  uart->TxXferCount = size;\n\n  while (uart->TxXferCount != 0) {\n    uart->TxXferCount--;\n\n    if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n      do {\n        if ((uart->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n          break;\n        }\n\n        current_time = HAL_GetTick();\n        elapsed_time = current_time - start_time;\n      } while ((timeout != HAL_MAX_DELAY) && (elapsed_time <= timeout));\n\n      if ((timeout != HAL_MAX_DELAY) && (elapsed_time > timeout)) {\n        uart->Instance->CR1 &= ~USART_CR1_UE;\n        uart->Instance->CR3 &= ~USART_CR3_DMAR;\n        uart->gState = HAL_UART_STATE_READY;\n        uart->RxState = HAL_UART_STATE_READY;\n        uart->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n\n      uart->Instance->DR = *data_16 & 0x1FF;\n\n      if ((uart->Init).Parity == UART_PARITY_NONE) {\n        data_16++;\n      }\n      else {\n        data_16 = (ushort *)((int)data_16 + 1);\n      }\n    }\n    else {\n      do {\n        if ((uart->Instance->SR & UART_FLAG_TXE) == UART_FLAG_TXE) {\n          break;\n        }\n\n        current_time = HAL_GetTick();\n        elapsed_time = current_time - start_time;\n      } while ((timeout != HAL_MAX_DELAY) && (elapsed_time <= timeout));\n\n      if ((timeout != HAL_MAX_DELAY) && (elapsed_time > timeout)) {\n        uart->Instance->CR1 &= ~USART_CR1_UE;\n        uart->Instance->CR3 &= ~USART_CR3_DMAR;\n        uart->gState = HAL_UART_STATE_READY;\n        uart->RxState = HAL_UART_STATE_READY;\n        uart->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n\n      uart->Instance->DR = (uint)*(byte *)data_16;\n      data_16 = (ushort *)((int)data_16 + 1);\n    }\n  }\n\n  do {\n    if ((uart->Instance->SR & UART_FLAG_TC) == UART_FLAG_TC) {\n      uart->gState = HAL_UART_STATE_READY;\n      uart->Lock = HAL_UNLOCKED;\n      status = HAL_OK;\n    }\n    else {\n      current_time = HAL_GetTick();\n      elapsed_time = current_time - start_time;\n    }\n  } while ((timeout != HAL_MAX_DELAY) && (elapsed_time <= timeout));\n\n  if ((timeout != HAL_MAX_DELAY) && (elapsed_time > timeout)) {\n    uart->Instance->CR1 &= ~USART_CR1_UE;\n    uart->Instance->CR3 &= ~USART_CR3_DMAR;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    uart->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n  }\n\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "uart_print"
            ],
            "imported": false,
            "current_name": "transmitData_08004436"
        },
        "FUN_08009e50": {
            "renaming": {
                "FUN_08009e50": "write_byte_to_memory_08009e50",
                "param_1": "memory",
                "param_2": "byte",
                "param_3": "size",
                "*param_2": "*byte",
                "undefined": "uint8_t",
                "uint": "uint32_t",
                "char": "uint8_t",
                "*param_1": "*memory"
            },
            "code": "undefined* write_byte_to_memory_08009e50(uint8_t* memory, uint8_t byte, uint32_t size) {\n  if (memory != NULL) {\n    if (size < 256) {\n      *memory = byte;\n      memory = memory + 1;\n    }\n    else {\n      memory = NULL;\n    }\n  }\n  return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e50",
            "calling": [],
            "imported": false,
            "current_name": "write_byte_to_memory_08009e50"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "read_i2c_mem_08004ee8",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data_buffer",
                "len": "data_length"
            },
            "code": "void read_i2c_mem_08004ee8(I2C_HandleTypeDef *hi2c, uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length) {\n  HAL_I2C_Mem_Read(hi2c, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004f24);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "read_i2c_mem_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "array2_ptr",
                "iVar3": "array2_offset",
                "puVar4": "array1_ptr"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int length)\n{\n  int difference;\n  for(int i = 0; i < length; i++)\n  {\n    difference = array1[i] - array2[i];\n    if(difference != 0)\n    {\n      if(array2[i] > array1[i])\n      {\n        return -1;\n      }\n      else\n      {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "compare_double_08000998",
                "in_ZR": "input_char"
            },
            "code": "bool compare_double_08000998(void)\n{\n  char input_char;\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "compare_double_08000998"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "compareFloats_08000fc8",
                "param_1": "float1",
                "param_2": "float2"
            },
            "code": "void compareFloats_08000fc8(float float1, float float2)\n{\n    __aeabi_cfcmpeq(float2, float1);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compareFloats_08000fc8"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_timer_output_compare_08003908",
                "htim": "timer_handle",
                "sConfig": "output_config",
                "Channel": "channel",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_08003908(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *output_config, uint32_t channel) {\n  HAL_StatusTypeDef status;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n        case 0:\n            TIM_OC1_SetConfig(timer_handle->Instance, output_config);\n            timer_handle->Instance->CCMR1 |= 0x8;\n            timer_handle->Instance->CCMR1 &= 0xfffffffb;\n            timer_handle->Instance->CCMR1 = output_config->OCFastMode | timer_handle->Instance->CCMR1;\n            break;\n        case 4:\n            TIM_OC2_SetConfig(timer_handle->Instance, output_config);\n            timer_handle->Instance->CCMR1 |= 0x800;\n            timer_handle->Instance->CCMR1 &= 0xfffffbff;\n            timer_handle->Instance->CCMR1 = (output_config->OCFastMode << 8) | timer_handle->Instance->CCMR1;\n            break;\n        case 8:\n            TIM_OC3_SetConfig(timer_handle->Instance, output_config);\n            timer_handle->Instance->CCMR2 |= 0x8;\n            timer_handle->Instance->CCMR2 &= 0xfffffffb;\n            timer_handle->Instance->CCMR2 = output_config->OCFastMode | timer_handle->Instance->CCMR2;\n            break;\n        case 0xc:\n            TIM_OC4_SetConfig(timer_handle->Instance, output_config);\n            timer_handle->Instance->CCMR2 |= 0x800;\n            timer_handle->Instance->CCMR2 &= 0xfffffbff;\n            timer_handle->Instance->CCMR2 = (output_config->OCFastMode << 8) | timer_handle->Instance->CCMR2;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC1_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_buffer_08004f60",
                "PTR_strbuf_08004f74": "string_buffer"
            },
            "code": "void clear_buffer_08004f60(void)\n{\n  memset(PTR_strbuf_08004f74,0,buffer_size);\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "clear_buffer_08004f60"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "do_nothing_080056f8"
            },
            "code": "\nvoid do_nothing_080056f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056f8"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint32_t input1, int input2, uint32_t input3, int input4) {\n\tbool is_input2_valid = (((input2 << 1) >> 0x15) != -1) || ((input1 | (input2 << 0xc)) == 0);\n\tbool is_input4_valid = (((input4 << 1) >> 0x15) != -1) || ((input3 | (input4 << 0xc)) == 0);\n\tif (is_input2_valid && is_input4_valid) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_080056ec": {
            "renaming": {
                "FUN_080056ec": "do_nothing_080056ec"
            },
            "code": "\nvoid do_nothing_080056ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ec",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056ec"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "checkFlag_08002ad8",
                "hi2c": "handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "tickDifference",
                "cVar2": "flagStatus",
                "uVar3": "flagMasked",
                "bVar4": "flagSet"
            },
            "code": "HAL_StatusTypeDef checkFlag_08002ad8(I2C_HandleTypeDef *handle, uint32_t flag, uint32_t timeout, uint32_t tickstart)\n{\n    uint32_t flagMasked;\n    bool flagSet;\n\n    do {\n        if ((flag >> 16 & 0xff) == 1) {\n            flagMasked = flag & ~handle->Instance->SR1 & 0xffff;\n            flagSet = flagMasked != 0;\n            if (flagSet) {\n                flagMasked = 1;\n            }\n        }\n        else {\n            flagMasked = flag & ~handle->Instance->SR2 & 0xffff;\n            flagSet = flagMasked != 0;\n            if (flagSet) {\n                flagMasked = 1;\n            }\n        }\n\n        if (!flagSet) {\n            return HAL_OK;\n        }\n\n        if ((handle->Instance->SR1 & 0x400) == 0x400) {\n            handle->Instance->CR1 |= 0x200;\n            handle->Instance->SR1 = 0xfffffbff;\n            handle->ErrorCode = 4;\n            handle->PreviousState = 0;\n            handle->State = HAL_I2C_STATE_READY;\n            handle->Lock = HAL_UNLOCKED;\n            return HAL_ERROR;\n        }\n    } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - tickstart <= timeout))));\n\n    handle->PreviousState = 0;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "checkFlag_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "compare_and_concatenate_08000fd0",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "float32_t compare_and_concatenate_08000fd0(float32_t value1, float32_t value2) {\n    __cmpsf2();\n    return CONCAT44(value2, value1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "configure_timer_08003d60",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "output_mode",
                "uVar2": "output_polarity",
                "tmpccmrx": "ccmr1",
                "tmpcr2": "cr2",
                "tmpccer": "ccer"
            },
            "code": "void configure_timer_08003d60(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n    uint32_t ccmr1 = timer->CCMR1;\n    uint32_t cr2 = timer->CR2;\n    uint32_t ccer = timer->CCER & 0xfffffffe;\n    \n    uint8_t output_mode = output_config->OCMode;\n    uint32_t output_polarity = output_config->OCPolarity | (timer->CCER & 0xfffffffd);\n    \n    if (timer == PTR_08003e34)\n    {\n        output_polarity = (output_config->OCNPolarity | (output_polarity & 0xfffffff7)) & 0xfffffffb;\n        cr2 = output_config->OCNIdleState | output_config->OCIdleState | (cr2 & 0xfffffcff);\n    }\n    \n    timer->CR2 = cr2;\n    timer->CCMR1 = output_mode | (ccmr1 & 0xffffff8c);\n    timer->CCR1 = output_config->Pulse;\n    timer->CCER = output_polarity;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "get_context_pointer_08009e68",
                "ctx": "context_pointer"
            },
            "code": "int get_context_pointer_08009e68(EVP_PKEY_CTX *context_pointer) { return (int)context_pointer; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux",
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "get_context_pointer_08009e68"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_irq_priority_08001618",
                "IRQn": "irq",
                "priority": "priority",
                "WWDG_IRQn": "WWDG_IRQn",
                "DAT_08001664": "irq_priority_base",
                "DAT_08001668": "irq_priority_offset"
            },
            "code": "void set_irq_priority_08001618(IRQn_Type irq, uint32_t priority) {\n  if (irq < WWDG_IRQn) {\n    *(char *)(((byte)irq & 0xf) + DAT_08001664 + 0x14) = (char)((priority & 0xff) << 4);\n  }\n  else {\n    *(char *)(irq + DAT_08001668 + 0x300) = (char)((priority & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "set_irq_priority_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "number",
                "iVar1": "leading_zeros"
            },
            "code": "int count_leading_zeros_080091a4(uint32_t number) {\n  int leading_zeros = 0;\n  if ((number & 0xffff0000) == 0) {\n    number <<= 16;\n    leading_zeros = 16;\n  }\n  if ((number & 0xff000000) == 0) {\n    number <<= 8;\n    leading_zeros += 8;\n  }\n  if ((number & 0xf0000000) == 0) {\n    number <<= 4;\n    leading_zeros += 4;\n  }\n  if ((number & 0xc0000000) == 0) {\n    number <<= 2;\n    leading_zeros += 2;\n  }\n  if ((int32_t)number >= 0) {\n    if ((int32_t)(number << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 32;\n  }\n  return leading_zeros;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "calculatePIDOutput_08004f78",
                "*htim": "*timerHandle",
                "len": "len",
                "uVar1": "unusedVar1",
                "iVar2": "unusedVar2",
                "uVar3": "unusedVar3",
                "uVar4": "unusedVar4",
                "uVar5": "unusedVar5",
                "pid_pwm": "unusedVar6",
                "out_pwm": "outPwm",
                "mpu6050_update": "mpu6050_update",
                "mpu6050_calc_pitch": "mpu6050_calc_pitch",
                "flush_strbuf": "flush_strbuf",
                "PTR_mpu6050_080051e0": "&mpu6050",
                "PTR_pitch_080051e4": "&pitch",
                "PTR_strbuf_080051ec": "strbuf",
                "PTR_s_Pitch___f_080051e8": "\"Pitch: %d\\r\\n\"",
                "strlen": "strlen",
                "uart_print": "uart_print",
                "PTR_setpoint_080051f0": "setpointPtr",
                "PTR_error_080051f4": "&error",
                "PTR_Kp_080051f8": "Kp",
                "PTR_Ki_08005200": "Ki",
                "PTR_I_08005204": "&I",
                "PTR_maxPwm_08005208": "maxPwmPtr",
                "PTR_minPwm_0800520c": "minPwmPtr",
                "PTR_Kd_08005210": "Kd",
                "PTR_lastError_08005214": "&lastError",
                "__aeabi_f2d": "floatToDouble",
                "sprintf": "sprintf",
                "__aeabi_fsub": "floatSubtract",
                "__aeabi_fmul": "floatMultiply",
                "__addsf3": "floatAdd",
                "__floatsisf": "intToFloat",
                "__floatunsisf": "unsignedIntToFloat",
                "__aeabi_fcmplt": "floatLessThan",
                "__aeabi_fcmpgt": "floatGreaterThan",
                "__fixunssfsi": "floatToUnsignedInt",
                "HAL_GPIO_WritePin": "HAL_GPIO_WritePin"
            },
            "code": "void calculatePIDOutput_08004f78(TIM_HandleTypeDef *timerHandle)\n{\n  float pitch, setpoint, error, P, I, D, maxPwm, minPwm, lastError, pidOutput;\n  uint8_t outPwm;\n\n  mpu6050_update(PTR_mpu6050_080051e0);\n  mpu6050_calc_pitch(PTR_mpu6050_080051e0, PTR_pitch_080051e4);\n  flush_PTR_strbuf_080051ec();\n  sprintf(PTR_strbuf_080051ec, PTR_s_Pitch___f_080051e8, (int)pitch);\n  uint16_t len = strlen(PTR_strbuf_080051ec);\n  uart_print(PTR_strbuf_080051ec, len);\n  setpoint = *PTR_setpoint_080051f0;\n  error = setpoint - pitch;\n  P = PTR_Kp_080051f8 * error;\n  I = PTR_Ki_08005200 * error + I;\n  if (I > *PTR_maxPwm_08005208) {\n    I = *PTR_maxPwm_08005208;\n  }\n  else if (I < *PTR_minPwm_0800520c) {\n    I = *PTR_minPwm_0800520c;\n  }\n  D = PTR_Kd_08005210 * (error - lastError);\n  pidOutput = P + I + D;\n  if (pidOutput > *PTR_maxPwm_08005208) {\n    outPwm = *PTR_maxPwm_08005208;\n  }\n  else if (pidOutput < *PTR_minPwm_0800520c) {\n    outPwm = *PTR_minPwm_0800520c;\n  }\n  else {\n    outPwm = (uint8_t)pidOutput;\n  }\n  lastError = error;\n  HAL_GPIO_WritePin(LED_PORT, LED_PIN_1, error > 0);\n  HAL_GPIO_WritePin(LED_PORT, LED_PIN_2, error <= 0);\n  HAL_GPIO_WritePin(LED_PORT, LED_PIN_3, error > 0);\n  HAL_GPIO_WritePin(LED_PORT, LED_PIN_4, error <= 0);\n  *(uint *)(timerHandle->Instance + 0x34) = (uint)outPwm;\n  *(uint *)(timerHandle->Instance + 0x40) = (uint)outPwm;\n}",
            "called": [
                "sprintf",
                "__aeabi_fcmplt",
                "uart_print",
                "strlen",
                "HAL_GPIO_WritePin",
                "mpu6050_update",
                "__fixunssfsi",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__aeabi_fmul",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "flush_strbuf",
                "mpu6050_calc_pitch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "HAL_TIM_IRQHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "calculatePIDOutput_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_uwTick_value_080015a0",
                "PTR_uwTick_080015b0": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_080015a0(void)\n{\n  uint32_t* PTR_uwTick_080015b0 = (uint32_t*) PTR_uwTick_080015b0;\n  return *PTR_uwTick_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "HAL_I2C_Mem_Read",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "_get_ms_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08002d98(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  HAL_StatusTypeDef HVar3;\n  bool bVar4;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus pwrclkchanged;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08003000 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003004 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[9] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        uVar2 = HAL_GetTick();\n        if (100 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState == 0) {\nLAB_0800324a:\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003254[1] = RCC_OscInitStruct->HSEPredivValue | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] =\n             (RCC_OscInitStruct->PLL).PLLMUL | (RCC_OscInitStruct->PLL).PLLSource |\n             DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (2 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "setIRQPriority_0800172a",
                "IRQn": "IRQn",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGroup",
                "prioritygroup": "priorityGroup",
                "priorityEncoded": "priorityEncoded",
                "NVIC_GetPriorityGrouping": "NVIC_GetPriorityGrouping",
                "NVIC_EncodePriority": "NVIC_EncodePriority",
                "NVIC_SetPriority": "NVIC_SetPriority"
            },
            "code": "void setIRQPriority_0800172a(IRQn_Type IRQn, uint32_t preemptPriority, uint32_t subPriority)\n{\n  uint32_t priorityGroup;\n  uint32_t priorityEncoded;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  priorityEncoded = NVIC_EncodePriority(priorityGroup, preemptPriority, subPriority);\n  NVIC_SetPriority(IRQn, priorityEncoded);\n  return;\n}",
            "called": [
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority",
                "NVIC_EncodePriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "setIRQPriority_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "is_not_carry_or_zero_080009d4",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "code": "bool is_not_carry_or_zero_080009d4(void)\n{\n    bool is_carry = __aeabi_cdrcmple();\n    return !is_carry || !is_zero;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "is_not_carry_or_zero_080009d4"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "allocation_ptr",
                "PTR_errno_08009764": "errno_ptr"
            },
            "code": "void allocate_memory_08009744(int *error_code, int size){\n  undefined *error_ptr;\n  caddr_t allocation_ptr;\n  error_ptr = PTR_errno_08009764;\n  *(undefined4 *)PTR_errno_08009764 = 0;\n  allocation_ptr = _sbrk(size);\n  if ((allocation_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_timer_status_08003640",
                "htim": "timer",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef check_timer_status_08003640(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "check_timer_status_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_block_08009980",
                "param_1": "block_size",
                "param_2": "element_size",
                "param_3": "num_elements",
                "__s": "block_pointer",
                "__n": "total_size",
                "puVar1": "header_pointer"
            },
            "code": "// Allocate memory block of size param_3 * param_2 bytes\n// and return pointer to it\n\nundefined4 *allocate_memory_block_08009980(int block_size, int element_size, int num_elements){\n  undefined4 *block_pointer;\n  size_t total_size = num_elements * element_size;\n  block_pointer = (undefined4 *)_malloc_r(block_size, total_size);\n  if (block_pointer == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  size_t header_size = (block_pointer[-1] & 0xfffffffc) - 4;\n  if (header_size < 0x25) {\n    if (header_size > 0x13) {\n      block_pointer[0] = 0;\n      block_pointer[1] = 0;\n      if (header_size > 0x1b) {\n        block_pointer[2] = 0;\n        block_pointer[3] = 0;\n        if (header_size == 0x24) {\n          block_pointer[4] = 0;\n          block_pointer[5] = 0;\n          block_pointer += 6;\n        }\n        else {\n          block_pointer += 4;\n        }\n        block_pointer[0] = 0;\n        block_pointer[1] = 0;\n        block_pointer[2] = 0;\n        return block_pointer;\n      }\n      block_pointer += 2;\n    }\n    block_pointer[0] = 0;\n    block_pointer[1] = 0;\n    block_pointer[2] = 0;\n    return block_pointer;\n  }\n  memset(block_pointer, 0, header_size);\n  return block_pointer;\n}",
            "called": [
                "_malloc_r",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "_Balloc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  int **ppiVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  int *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int *local_144;\n  uint local_140;\n  int *local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  int *local_12c;\n  int *local_128;\n  undefined *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar3 = (int **)_localeconv_r();\n  __s = *ppiVar3;\n  piVar4 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar5 = _malloc_r(param_1,0x40);\n    *param_2 = iVar5;\n    param_2[4] = iVar5;\n    if (iVar5 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar3 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar3;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar3 = param_3;\n        *(int **)((int)ppiVar3 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar3 = (int **)((int)ppiVar3 + 8);\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800604a;\n          ppiVar3 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = piVar27;\n    local_168 = piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int *)0x1;\n      param_3 = (int *)&local_8c;\n      local_144 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar5 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar5 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar5 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar5 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar5 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724);\n      if ((iVar5 == 0) &&\n         (iVar5 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724),\n         iVar5 == 0)) {\n        iVar5 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        param_3 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar5 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        local_158 = (int *)0x3;\n        local_13c = (int *)0x0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_144 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      local_148 = (int *)__unorddf2(local_128,local_12c,local_128,local_12c);\n      if (local_148 != (int *)0x0) {\n        param_3 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar18 = local_12c;\n      piVar24 = piVar27;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar24;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          piVar18 = local_12c + -0x20000000;\n          piVar24 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = (int *)PTR_s_0123456789abcdef_08007888;\n          local_138 = param_3;\n          piVar27 = piVar24;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 == 0) {\n            local_158 = (int *)PTR_s_0123456789ABCDEF_0800739c;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = (int *)PTR_s_0123456789ABCDEF_08007894;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar24 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar24 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        local_144 = local_148;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar24;\n      local_150 = piVar24;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        piVar27 = (int *)((int)param_3 + (int)piVar24);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0), iVar5 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar27 = (int *)((int)piVar27 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\nLAB_08007760:\n        piVar27 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar24 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar27 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0);\n      local_138 = piVar27;\n      if (iVar5 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar27; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_144 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar18 = *local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(int)*(short *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar18 = (int *)(int)*(char *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar18 = (int *)(uint)*(byte *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar18 = (int *)(uint)*(ushort *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar18 = *local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar18 = *ppiVar16;\n        piVar24 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar5 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      local_144 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (local_144 == (int *)0x0) {\n        piVar18 = local_144;\n        param_3 = (int *)PTR_s__null__08007084;\n        local_148 = local_144;\n        local_13c = local_144;\n        local_134 = local_144;\n        local_130 = local_144;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int *)0x6;\n          local_168 = local_158;\n        }\n        goto LAB_08006538;\n      }\n      param_3 = local_144;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int *)strlen((char *)local_144);\n      }\n      else {\n        local_148 = (int *)memchr(local_144,0,(size_t)piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar18 = (int *)(uint)local_f5;\n          local_144 = local_148;\n          local_13c = local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int *)((int)local_148 - (int)local_144);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar18 = (int *)(uint)local_f5;\n      local_144 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(uint)*(ushort *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar18 = (int *)(uint)*(byte *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar18 = (int *)(uint)*(byte *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar18 = (int *)(uint)*(ushort *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar24 < 0) {\n        bVar30 = piVar18 != (int *)0x0;\n        piVar18 = (int *)-(int)piVar18;\n        piVar24 = (int *)(-(int)piVar24 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar5 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar18 | (uint)piVar24) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar24 != (int *)0x0 || (int *)0x9 < piVar18) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar18 = *local_154;\n      uVar26 = uVar26 | 2;\n      piVar24 = (int *)0x0;\n      iVar5 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      iVar5 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar18 | (uint)piVar24) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar5 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar5 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar24 == (int *)0x0 && piVar18 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar24,piVar18);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar5 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar5,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar5 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          local_138 = (int *)(uint)local_108[1];\n          if (local_138 != (int *)0x0) {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar5,10,0);\n      } while (lVar31 != 0);\n      local_158 = (int *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar5;\n      if (((uint)piVar18 | (uint)piVar24) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar5 == 0) {\n            local_158 = (int *)(uVar26 & 1);\n            if (local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar5 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar18 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (int *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar5 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar5 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar18 >> 4 | (int)piVar24 << 0x1c);\n            piVar24 = (int *)((uint)piVar24 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(undefined *)param_3 = local_11c[(uint)piVar18 & 0xf];\n            piVar18 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar24) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar18 >> 3 | (int)piVar24 << 0x1d);\n            piVar24 = (int *)((uint)piVar24 >> 3);\n            iVar5 = ((uint)piVar18 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar5;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar18 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar24) != 0);\n          if (((local_140 & 1) != 0) && (iVar5 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar18 = (int *)(uint)local_f5;\n    local_144 = piVar27;\n    local_168 = local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar27;\n    piVar19 = local_138;\n    piVar27 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_080073a0);\n    iVar5 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(byte *)piVar19 = *(byte *)((int)local_158 + iVar5);\n    if (piVar27 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,DAT_080073a4);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,DAT_080073a4), iVar6 == 0 || (-1 < iVar5 << 0x1f)))) {\n    if (-1 < (int)piVar27) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar27 = local_138;\n      do {\n        local_138 = (int *)((int)piVar27 + 1);\n        *(byte *)piVar27 = 0x30;\n        piVar27 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar11 = *(byte *)piVar19;\n    piVar27 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar27 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar27 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar27 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar24)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (int *)((int)local_138 + (int)piVar4);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (int *)((int)local_f0[0] + (int)piVar4);\n        }\n        else {\n          local_158 = local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar18 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0[0]) >> 0x23);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar18 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar18;\n      } while ((int *)0x9 < piVar18);\n      uVar22 = (uint)(piVar18 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (int *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (int *)((int)local_158 + (int)piVar4);\n    }\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)piVar4 + 1) + (int)piVar24);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n    }\n    else {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)local_f0[0] + (int)piVar4) + (int)piVar24);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int *)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int *)((int)local_104 * (int)((int)local_130 + (int)local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar18 = (int *)(uint)local_f5;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    local_144 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f5;\n    ppiVar3[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f4;\n    ppiVar3[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_08006a54;\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)puVar2;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_0800643c;\n  local_144 = (int *)((int)local_144 - (int)local_158);\n  if (0 < (int)local_144) {\n    piVar27 = (int *)PTR_zeroes_7316_08007088;\n    if (0x10 < (int)local_144) {\n      do {\n        while( true ) {\n          piVar27 = local_144;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          local_144 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        local_144 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      local_144 = piVar27 + -4;\n      piVar27 = (int *)puVar2;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_144;\n    *ppiVar3 = piVar27;\n    ppiVar3[1] = local_144;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar3 = param_3;\n    ppiVar3[1] = local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (int *)(local_d0 + 1);\n    iVar5 = local_d4 + 1;\n    ppiVar16 = ppiVar3 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      if (iVar5 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar3 = ppiVar3 + 4;\n      }\n      else {\n        local_d4 = iVar5;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n        ppiVar3 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      local_d4 = iVar5;\n      if (7 < iVar5) {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)((int)local_158 + (int)piVar4);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar4;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (int *)local_d0;\n      iVar5 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      puVar2 = PTR_zeroes_7316_08006d94;\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (int *)((int)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar5 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar3 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (int *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar3 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar3 = ppiVar13;\n        if (0 < (int)piVar27) {\n          piVar18 = (int *)PTR_zeroes_7316_0800788c;\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)((int)local_158 + 0x10);\n              *ppiVar20 = (int *)puVar2;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (int *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n            piVar18 = (int *)puVar2;\n          }\n          *ppiVar20 = piVar18;\n          ppiVar20[1] = piVar27;\n          local_158 = (int *)((int)local_158 + (int)piVar27);\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar3 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)((int)local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar5 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar5 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar3 = (int *)PTR_DAT_08006d98;\n        ppiVar3[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n          }\n          puVar2 = PTR_zeroes_7316_0800788c;\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar3 = (int *)puVar2;\n                ppiVar3[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar3 = ppiVar3 + 2;\n                }\n                else {\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  ppiVar3 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08006d94;\n        piVar18 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar18 = (int *)((int)local_134 - (int)piVar27);\n        }\n        piVar27 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar18) {\n          for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar27 = (int *)puVar2;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar18;\n          *ppiVar3 = piVar27;\n          ppiVar3[1] = piVar18;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007398;\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int *)0x0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar3 = local_110;\n            ppiVar3[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar18 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar18;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar3 = local_134;\n              ppiVar3[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar3 = local_cc;\n                piVar18 = (int *)(uint)*local_108;\n              }\n            }\n            piVar24 = piVar18;\n            if (-1 < (int)piVar27) {\n              piVar24 = (int *)((int)piVar18 - (int)piVar27);\n            }\n            if (0 < (int)piVar24) {\n              for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar3 = (int *)puVar2;\n                  ppiVar3[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  piVar24 = piVar24 + -4;\n                  ppiVar3 = local_cc;\n                  if ((int)piVar24 < 0x11) goto LAB_08007156;\n                }\n                ppiVar3 = ppiVar3 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar24;\n              *ppiVar3 = (int *)puVar2;\n              ppiVar3[1] = piVar24;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar18);\n            pbVar23 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int *)0x0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int *)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar18 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar18 = piVar27;\n        }\n        if (0 < (int)piVar18) {\n          local_d0 = pbVar23 + (int)piVar18;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = local_134;\n          ppiVar3[1] = piVar18;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007088;\n        if (-1 < (int)piVar18) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar18);\n        }\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar18 = (int *)puVar2;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar3 = (int *)PTR_DAT_08006a50;\n      ppiVar3[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar3 = ppiVar3 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar3 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar4;\n        *ppiVar3 = __s;\n        ppiVar3[1] = piVar4;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        puVar2 = PTR_zeroes_7316_08006a54;\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)puVar2;\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar3 = piVar18;\n          ppiVar3[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar3 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n    ppiVar3[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar5 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar5 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar5 = __ssprint_r(param_1,param_2,&local_d8), iVar5 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar3 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar18 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar18 + 1);\n    uVar25 = (uint)*(byte *)piVar18;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar18 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "_dtoa_r",
                "_malloc_r",
                "__muldf3",
                "strncpy",
                "__aeabi_dcmple",
                "strlen",
                "__aeabi_dcmplt",
                "__aeabi_uldivmod",
                "__ssprint_r",
                "__unorddf2",
                "__aeabi_i2d",
                "__subdf3",
                "_localeconv_r",
                "_free_r",
                "frexp",
                "memchr",
                "__aeabi_d2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concat_params_08000134",
                "*param_1": "*init_ptr",
                "*param_2": "*obj_ptr",
                "DAT_08000144": "*obj_ptr",
                "PTR__init_0800014c": "init_ptr",
                "PTR_object_8660_08000148": "obj_ptr"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concat_params_08000134(uint64_t *PTR__init_0800014c, uint64_t DAT_08000144) {\n  if (DAT_08000144 != 0) {\n    PTR__init_0800014c = PTR__init_0800014c;\n    PTR_object_8660_08000148 = PTR_object_8660_08000148;\n  }\n  return ((uint64_t)(DAT_08000144) << 32) | *PTR__init_0800014c;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "concat_params_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "increment_tick_and_handle_systick_interrupt_08005704"
            },
            "code": "void increment_tick_and_handle_systick_interrupt_08005704(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "increment_tick_and_handle_systick_interrupt_08005704"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_i2c_status_08002ca8",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "uVar1": "current_tick",
                "SR1": "I2C_SR1",
                "HAL_OK": "HAL_OK",
                "ErrorCode": "I2C_ERROR_TIMEOUT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002ca8(I2C_HandleTypeDef *i2c_handler, uint32_t timeout, uint32_t start_tick)\n{\n  uint32_t current_tick;\n  while (true) {\n    if ((i2c_handler->Instance->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {\n      return HAL_OK;\n    }\n    if ((i2c_handler->Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF) break;\n    if ((timeout == 0) || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)) {\n      i2c_handler->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handler->Instance->SR1 = 0xffffffef;\n  i2c_handler->ErrorCode = 0;\n  i2c_handler->PreviousState = 0;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "configureTimer_08003a94",
                "htim": "timerHandle",
                "sClockSourceConfig": "clockConfig",
                "HVar1": "status",
                "uVar2": "clockSource",
                "tmpsmcr": "tmpsmcr"
            },
            "code": "HAL_StatusTypeDef configureTimer_08003a94(TIM_HandleTypeDef *timerHandle, TIM_ClockConfigTypeDef *clockConfig)\n{\n    HAL_StatusTypeDef status;\n    uint clockSource = clockConfig->ClockSource;\n    uint32_t tmpsmcr;\n\n    if (timerHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        timerHandle->Lock = HAL_LOCKED;\n        timerHandle->State = HAL_TIM_STATE_BUSY;\n        timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffff0088;\n\n        switch (clockSource) {\n            case 0x40:\n                TIM_TI1_ConfigInputStage(timerHandle->Instance, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x40);\n                break;\n            case 0x10:\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x10);\n                break;\n            case 0:\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0);\n                break;\n            case 0x20:\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x20);\n                break;\n            case 0x30:\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x30);\n                break;\n            case 0x70:\n                TIM_ETR_SetConfig(timerHandle->Instance, clockConfig->ClockPrescaler, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffffff88 | 0x77;\n                break;\n            case 0x50:\n                TIM_TI1_ConfigInputStage(timerHandle->Instance, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x50);\n                break;\n            case 0x60:\n                TIM_TI2_ConfigInputStage(timerHandle->Instance, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n                TIM_ITRx_SetConfig(timerHandle->Instance, 0x60);\n                break;\n            case 0x1000:\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xfffffff8;\n                break;\n            case 0x2000:\n                TIM_ETR_SetConfig(timerHandle->Instance, clockConfig->ClockPrescaler, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n                timerHandle->Instance->SMCR = timerHandle->Instance->SMCR | 0x4000;\n                break;\n            default:\n                break;\n        }\n\n        timerHandle->State = HAL_TIM_STATE_READY;\n        timerHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n\n    return status;\n}",
            "called": [
                "TIM_ETR_SetConfig",
                "TIM_ITRx_SetConfig",
                "TIM_TI1_ConfigInputStage",
                "TIM_TI2_ConfigInputStage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "configure_input_trigger_0800416a",
                "TIMx": "timer",
                "InputTriggerSource": "trigger_source",
                "tmpsmcr": "smcr_value"
            },
            "code": "void configure_input_trigger_0800416a(TIM_TypeDef *timer, uint16_t trigger_source)\n{\n  uint32_t smcr_value;\n  smcr_value = timer->SMCR & 0xffffff8f;\n  smcr_value |= (uint32_t)(trigger_source | 7);\n  timer->SMCR = smcr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "configure_input_trigger_0800416a"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\ndouble FUNC_080059f0(double __x)\n\n{\n  int in_r0;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  uint in_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  double in_d0;\n  double dVar9;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar10 = CONCAT44(in_r1,in_r0);\n  uVar7 = in_r1 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (in_r0 == 0)))) {\n      return in_d0;\n    }\n    dVar9 = (double)__aeabi_dadd();\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar10 = __divdf3(0,DAT_08005d08,in_r0,extraout_r1);\n          iVar8 = 3;\n        }\n        else {\n          uVar10 = __subdf3();\n          uVar11 = __muldf3(in_r0,extraout_r1,0,DAT_08005d04);\n          uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n          uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar10 = __subdf3();\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_08005cf8);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar10 = __aeabi_dadd();\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar11 = __aeabi_dadd(in_r0,in_r1,DAT_08005cd0,DAT_08005cd4);\n        iVar8 = __aeabi_dcmpgt((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar5 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar5,uVar6,uVar5,uVar6);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar1,uVar3,uVar1,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar4,DAT_08005c78,DAT_08005c7c);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar1,uVar3);\n    uVar11 = __muldf3(uVar2,uVar4,DAT_08005ca8,DAT_08005cac);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar8 == -1) {\n      dVar9 = (double)__subdf3(uVar5,uVar6,(int)uVar10,uVar1);\n      return dVar9;\n    }\n    uVar10 = __subdf3((int)uVar10,uVar1,*(undefined4 *)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8),\n                      *(undefined4 *)((int)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8) + 4));\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    dVar9 = (double)__subdf3(*(undefined4 *)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8),\n                             *(undefined4 *)((int)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8) + 4),(int)uVar10\n                             ,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return dVar9;\n    }\n  }\n  return dVar9;\n}\n\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__divdf3",
                "__aeabi_dadd",
                "fabs"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "writeMemory_08001ccc",
                "hi2c": "i2c_handler",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "uVar1": "status_reg",
                "HVar2": "status_type",
                "uVar3": "timeout_tick",
                "cVar4": "is_busy",
                "uVar5": "status",
                "iVar6": "status",
                "pbVar7": "buffer_pointer",
                "bVar8": "is_busy",
                "tickstart": "start_tick"
            },
            "code": "HAL_StatusTypeDef writeMemory_08001ccc(I2C_HandleTypeDef *i2c_handler, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    uint32_t start_tick = HAL_GetTick();\n    uint32_t timeout_tick;\n    uint32_t status_reg;\n    int status = 0;\n    bool is_busy;\n    uint8_t *buffer_pointer;\n    HAL_StatusTypeDef status_type;\n    if (i2c_handler->State == HAL_I2C_STATE_READY) {\n        do {\n            status_reg = DAT_08001f64;\n            if ((status_reg >> 0x10 & 0xff) == 1) {\n                status_reg = status_reg & ~i2c_handler->Instance->SR1 & 0xffff;\n                is_busy = status_reg == 0;\n                if (is_busy) {\n                    status_reg = 1;\n                }\n            }\n            else {\n                status_reg = status_reg & ~i2c_handler->Instance->SR2 & 0xffff;\n                is_busy = status_reg == 0;\n                if (is_busy) {\n                    status_reg = 1;\n                }\n            }\n            status = (int)status_reg;\n            if (status != 1) {\n                break;\n            }\n            timeout_tick = HAL_GetTick();\n        } while (timeout_tick - start_tick < 0x1a);\n        i2c_handler->PreviousState = 0;\n        i2c_handler->State = HAL_I2C_STATE_READY;\n        i2c_handler->Mode = HAL_I2C_MODE_NONE;\n        i2c_handler->Lock = HAL_UNLOCKED;\n        status_type = HAL_BUSY;\n    }\n    else {\n        status_type = HAL_BUSY;\n    }\n    if (status == 0) {\n        if (i2c_handler->Lock == HAL_LOCKED) {\n            status_type = HAL_BUSY;\n        }\n        else {\n            i2c_handler->Lock = HAL_LOCKED;\n            if ((i2c_handler->Instance->CR1 & 1) != 1) {\n                i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 1;\n            }\n            i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffff7ff;\n            i2c_handler->State = HAL_I2C_STATE_BUSY_TX;\n            i2c_handler->Mode = HAL_I2C_MODE_MEM;\n            i2c_handler->ErrorCode = 0;\n            buffer_pointer = data;\n            i2c_handler->pBuffPtr = buffer_pointer;\n            i2c_handler->XferCount = size;\n            i2c_handler->XferOptions = DAT_08001f68;\n            i2c_handler->XferSize = i2c_handler->XferCount;\n            status_type = I2C_RequestMemoryWrite(i2c_handler, device_address, memory_address, memory_address_size, timeout, start_tick);\n            if (status_type == HAL_OK) {\n                while (i2c_handler->XferSize != 0) {\n                    status_type = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, start_tick);\n                    if (status_type != HAL_OK) {\n                        if (i2c_handler->ErrorCode == 4) {\n                            i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n                            return HAL_ERROR;\n                        }\n                        return HAL_TIMEOUT;\n                    }\n                    buffer_pointer = i2c_handler->pBuffPtr;\n                    i2c_handler->pBuffPtr = buffer_pointer + 1;\n                    i2c_handler->Instance->DR = (uint)*buffer_pointer;\n                    i2c_handler->XferSize = i2c_handler->XferSize - 1;\n                    i2c_handler->XferCount = i2c_handler->XferCount - 1;\n                    if (((i2c_handler->Instance->SR1 & 4) == 4) && (i2c_handler->XferSize != 0)) {\n                        buffer_pointer = i2c_handler->pBuffPtr;\n                        i2c_handler->pBuffPtr = buffer_pointer + 1;\n                        i2c_handler->Instance->DR = (uint)*buffer_pointer;\n                        i2c_handler->XferSize = i2c_handler->XferSize - 1;\n                        i2c_handler->XferCount = i2c_handler->XferCount - 1;\n                    }\n                }\n                status_type = I2C_WaitOnBTFFlagUntilTimeout(i2c_handler, timeout, start_tick);\n                if (status_type == HAL_OK) {\n                    i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n                    i2c_handler->State = HAL_I2C_STATE_READY;\n                    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n                    i2c_handler->Lock = HAL_UNLOCKED;\n                    status_type = HAL_OK;\n                }\n                else if (i2c_handler->ErrorCode == 4) {\n                    i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n                    status_type = HAL_ERROR;\n                }\n                else {\n                    status_type = HAL_TIMEOUT;\n                }\n            }\n            else if (i2c_handler->ErrorCode == 4) {\n                i2c_handler->Lock = HAL_UNLOCKED;\n                status_type = HAL_ERROR;\n            }\n            else {\n                i2c_handler->Lock = HAL_UNLOCKED;\n                status_type = HAL_TIMEOUT;\n            }\n        }\n    }\n    return status_type;\n}",
            "called": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "_i2c_write_reg"
            ],
            "imported": false,
            "current_name": "writeMemory_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_uwTick_0800157c",
                "PTR_uwTick_0800159c": "uwTick",
                "PTR_uwTickFreq_08001598": "uwTickFreq"
            },
            "code": "void update_uwTick_0800157c(void)\n{\n  uint32_t* PTR_uwTick_0800159c = (uint32_t*) PTR_PTR_uwTick_0800159c_0800159c;\n  uint32_t* PTR_PTR_uwTick_0800159cFreq_08001598 = (uint32_t*) PTR_PTR_PTR_uwTick_0800159cFreq_08001598_08001598;\n  *PTR_uwTick_0800159c += (*PTR_PTR_uwTick_0800159cFreq_08001598) & 0xFF;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_0800157c"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "processTimerInterrupt_080036f8",
                "htim": "timerHandle",
                "Instance": "instance",
                "SR": "interruptFlag",
                "DIER": "interruptMask",
                "Channel": "activeChannel",
                "CCMR1": "channelMode",
                "CCMR2": "channelMode"
            },
            "code": "void processTimerInterrupt_080036f8(TIM_HandleTypeDef *timerHandle)\n{\n    uint32_t interruptFlag;\n    uint32_t interruptMask;\n    int activeChannel;\n    uint32_t channelMode;\n\n    interruptFlag = timerHandle->Instance->SR;\n    interruptMask = timerHandle->Instance->DIER;\n\n    if ((interruptFlag & TIM_FLAG_UPDATE) && (interruptMask & TIM_IT_UPDATE)) {\n        timerHandle->Instance->SR = ~TIM_FLAG_UPDATE;\n        HAL_TIM_PeriodElapsedCallback(timerHandle);\n    }\n\n    for (activeChannel = 1; activeChannel <= 4; activeChannel++) {\n        switch (activeChannel) {\n            case 1:\n                channelMode = timerHandle->Instance->CCMR1 & 0x03;\n                break;\n            case 2:\n                channelMode = (timerHandle->Instance->CCMR1 & 0x300) >> 8;\n                break;\n            case 3:\n                channelMode = timerHandle->Instance->CCMR2 & 0x03;\n                break;\n            case 4:\n                channelMode = (timerHandle->Instance->CCMR2 & 0x300) >> 8;\n                break;\n            default:\n                channelMode = 0;\n                break;\n        }\n\n        if ((interruptFlag & (TIM_FLAG_CC1 << (activeChannel - 1))) && (interruptMask & (TIM_IT_CC1 << (activeChannel - 1)))) {\n            timerHandle->Instance->SR = ~(TIM_FLAG_CC1 << (activeChannel - 1));\n            timerHandle->Channel = activeChannel;\n            if (channelMode == 0) {\n                HAL_TIM_OC_DelayElapsedCallback(timerHandle);\n                HAL_TIM_PWM_PulseFinishedCallback(timerHandle);\n            }\n            else {\n                HAL_TIM_IC_CaptureCallback(timerHandle);\n            }\n            timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n        }\n    }\n\n    if ((interruptFlag & TIM_FLAG_Break) && (interruptMask & TIM_IT_BREAK)) {\n        timerHandle->Instance->SR = ~TIM_FLAG_Break;\n        HAL_TIMEx_BreakCallback(timerHandle);\n    }\n\n    if ((interruptFlag & TIM_FLAG_Trigger) && (interruptMask & TIM_IT_TRIGGER)) {\n        timerHandle->Instance->SR = ~TIM_FLAG_Trigger;\n        HAL_TIM_TriggerCallback(timerHandle);\n    }\n\n    if ((interruptFlag & TIM_FLAG_COM) && (interruptMask & TIM_IT_COM)) {\n        timerHandle->Instance->SR = ~TIM_FLAG_COM;\n        HAL_TIMEx_CommutationCallback(timerHandle);\n    }\n}\n",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "processTimerInterrupt_080036f8"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "isEndOfString_080009e8",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009e8(void)\n{\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009e8"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "allocate_block_and_set_values_08009630",
                "param_1": "mem_size",
                "param_2": "param_2",
                "param_3": "num_bits",
                "param_4": "bit_offset",
                "param_5": "out_bit_offset",
                "param_6": "out_num_bits_set",
                "iVar1": "mem_block_ptr",
                "uVar2": "num_bits_to_shift",
                "iVar3": "num_words_in_block",
                "iVar4": "block_size_in_words",
                "uVar5": "remaining_bits",
                "uVar6": "is_bit_offset_nonzero",
                "uVar7": "hi_bit_index",
                "local_20": "num_words_in_block",
                "local_1c": "remaining_bits"
            },
            "code": "int allocate_block_and_set_values_08009630(undefined4 mem_size, undefined4 param_2, uint num_bits, uint bit_offset, int *out_bit_offset, int *out_num_bits_set)\n{\n  int mem_block_ptr;\n  uint num_bits_to_shift;\n  int num_words_in_block;\n  int block_size_in_words;\n  uint remaining_bits;\n  uint is_bit_offset_nonzero;\n  undefined8 hi_bit_index;\n  \n  mem_block_ptr = _Balloc(mem_size,1);\n  is_bit_offset_nonzero = (bit_offset << 1) >> 0x15;\n  remaining_bits = bit_offset & 0xfffff;\n  if (is_bit_offset_nonzero != 0) {\n    remaining_bits |= 0x100000;\n  }\n  if (num_bits == 0) {\n    num_bits_to_shift = __lo0bits(&remaining_bits);\n    num_words_in_block = 1;\n    block_size_in_words = num_bits_to_shift + 0x20;\n    *(undefined4 *)(mem_block_ptr + 0x10) = 1;\n    *(uint *)(mem_block_ptr + 0x14) = remaining_bits;\n  }\n  else {\n    num_words_in_block = num_bits;\n    num_bits_to_shift = __lo0bits(&num_words_in_block);\n    if (num_bits_to_shift == 0) {\n      *(uint *)(mem_block_ptr + 0x14) = num_words_in_block;\n    }\n    else {\n      uint bits_to_shift = remaining_bits << (0x20 - num_bits_to_shift & 0xff);\n      remaining_bits = remaining_bits >> (num_bits_to_shift & 0xff);\n      *(uint *)(mem_block_ptr + 0x14) = bits_to_shift | num_words_in_block;\n    }\n    if (remaining_bits == 0) {\n      block_size_in_words = 1;\n    }\n    else {\n      block_size_in_words = 2;\n    }\n    *(uint *)(mem_block_ptr + 0x18) = remaining_bits;\n    *(int *)(mem_block_ptr + 0x10) = block_size_in_words;\n  }\n  if (is_bit_offset_nonzero == 0) {\n    *out_bit_offset = num_bits_to_shift - 0x432;\n    hi_bit_index = __hi0bits(*(undefined4 *)(mem_block_ptr + block_size_in_words * 4 + 0x10));\n    *out_num_bits_set = (int)((ulonglong)hi_bit_index >> 0x20) * 0x20 - (int)hi_bit_index;\n    return mem_block_ptr;\n  }\n  *out_bit_offset = (is_bit_offset_nonzero - 0x433) + num_bits_to_shift;\n  *out_num_bits_set = 0x35 - num_bits_to_shift;\n  return mem_block_ptr;\n}",
            "called": [
                "_Balloc",
                "__hi0bits",
                "__lo0bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_block_and_set_values_08009630"
        },
        "FUN_08005830": {
            "renaming": {
                "FUN_08005830": "wait_forever_08005830"
            },
            "code": "void wait_forever_08005830(void)\n{\n  while(true)\n  {\n    // Do nothing, just wait forever\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005830",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08005830"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "handle_timer_interrupt_08005714",
                "PTR_htim2_08005724": "timer2_handle"
            },
            "code": "void handle_timer_interrupt_08005714(void)\n{\n  HAL_TIM_IRQHandler(&PTR_htim2_08005724);\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08005714"
        },
        "FUN_08005834": {
            "renaming": {
                "FUN_08005834": "calculate_and_print_arctan_08005834",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "param_5": "x",
                "iVar1": "diff",
                "unaff_r4": "unused",
                "uVar2": "u_var_2",
                "uVar3": "abs_c",
                "uVar4": "abs_d",
                "uVar5": "res",
                "DAT_080059e8": "max_uint32_t",
                "DAT_080059b0": "unused",
                "DAT_080059b4": "unused"
            },
            "code": "void calculate_and_print_arctan_08005834(double x, uint32_t a, uint32_t b, uint32_t c, uint32_t d)\n{\n    uint32_t abs_c = c & 0x7fffffff;\n    uint32_t abs_d = d & 0x7fffffff;\n    if ((DAT_080059e8 < (abs_c | (-b | b) >> 0x1f)) || (DAT_080059e8 < (abs_d | (-a | a) >> 0x1f))) {\n        __aeabi_dadd(b, c, a, d);\n    }\n    else {\n        if ((c + 0xc0100000 | d) == 0) {\n            atan(x);\n            return;\n        }\n        uint32_t uVar2 = (int32_t)c >> 0x1e & 2U | b >> 0x1f;\n        if (((((abs_d | a) != 0) && ((abs_c | c) != 0)) && (abs_c != DAT_080059e8)) && (abs_d != DAT_080059e8)) {\n            int32_t diff = (int32_t)(abs_d - abs_c) >> 0x14;\n            if ((diff < 0x3d) && ((-1 < (int32_t)c || (diff + 0x3c < 0 == SCARRY4(diff, 0x3c))))) {\n                __divdf3(a, b);\n                double abs_c_d = fabs((double)CONCAT44(unaff_r4, c));\n                atan(abs_c_d);\n            }\n            if (uVar2 != 1) {\n                if (uVar2 == 2) {\n                    double res = __subdf3();\n                    __subdf3(DAT_080059e8, DAT_080059e8, (int32_t)res, (int32_t)((uint64_t)res >> 0x20));\n                }\n                else if (uVar2 != 0) {\n                    double res = __subdf3();\n                    __subdf3((int32_t)res, (int32_t)((uint64_t)res >> 0x20), DAT_080059e8, DAT_080059e8);\n                }\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_and_print_arctan_08005834"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_trigonometric_function_08005838",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "param_5": "angle",
                "iVar1": "difference",
                "unaff_r4": "sign_x2",
                "uVar2": "sign_x2",
                "uVar3": "abs_y1",
                "uVar4": "abs_y2",
                "uVar5": "result"
            },
            "code": "void calculate_trigonometric_function_08005838(uint32_t x1, uint32_t x2, uint32_t y1, uint32_t y2, double angle) {\\n\\\n  int difference;\\n\\\n  uint32_t abs_y1 = y1 & 0x7fffffff;\\n\\\n  uint32_t abs_y2 = y2 & 0x7fffffff;\\n\\\n  if ((0x7fffffff < (abs_y1 | (-y1 | y1) >> 0x1f)) || (0x7fffffff < (abs_y2 | (-x1 | x1) >> 0x1f))) {\\n\\\n    __aeabi_dadd(y1, y2, x1, x2);\\n\\\n  }\\n\\\n  else {\\n\\\n    if ((y2 + 0xc0100000 | y1) == 0) {\\n\\\n      atan(angle);\\n\\\n      return;\\n\\\n    }\\n\\\n    uint32_t sign_x2 = (int)x2 >> 0x1e & 2U | x1 >> 0x1f;\\n\\\n    if (((((x2 | x1) != 0) && ((abs_y2 | y1) != 0)) && (abs_y1 != 0x7fffffff)) && (abs_y2 != 0x7fffffff)) {\\n\\\n      difference = (int)(abs_y2 - abs_y1) >> 0x14;\\n\\\n      if ((difference < 0x3d) && ((-1 < (int)y2 || (difference + 0x3c < 0 == SCARRY4(difference,0x3c))))) {\\n\\\n        __divdf3(x1, x2);\\n\\\n        fabs((double)(int64_t)(y2 | (uint64_t) y1 << 32));\\n\\\n        atan((double)(int64_t)(y2 | (uint64_t) y1 << 32));\\n\\\n      }\\n\\\n      if (sign_x2 != 1) {\\n\\\n        if (sign_x2 == 2) {\\n\\\n          double result = __subdf3();\\n\\\n          __subdf3(3.141592653589793, 1.2246467991473532e-16, (int)result, (int)((uint64_t)result >> 0x20));\\n\\\n        }\\n\\\n        else if (sign_x2 != 0) {\\n\\\n          double result = __subdf3();\\n\\\n          __subdf3((int)result, (int)((uint64_t)result >> 0x20), 3.141592653589793, 1.2246467991473532e-16);\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_trigonometric_function_08005838"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_exponential_080096e0",
                "__x": "x",
                "__exponent": "exponent",
                "in_r1": "absolute_x",
                "extraout_r1": "absolute_x",
                "in_r2": "exponent_ptr",
                "iVar1": "DAT_08009740",
                "iVar2": "exponent_value",
                "uVar3": "max_exponent",
                "in_d0": "result"
            },
            "code": "double calculate_exponential_080096e0(double x, int* exponent)\n{\n  int max_exponent = 0x7fffffff;\n  int* exponent_ptr = exponent;\n  int exponent_value = 0;\n  uint absolute_x = (uint)x & max_exponent;\n  double result = 0;\n  if ((absolute_x <= DAT_08009740) && ((absolute_x | (uint)exponent_ptr) != 0)) {\n    if (absolute_x < 0x100000) {\n      result = (double)__muldf3(exponent_ptr, absolute_x, 0, DAT_0800973c);\n      exponent_value = -0x36;\n      absolute_x &= max_exponent;\n    }\n    *exponent_ptr = ((int)absolute_x >> 0x14) + -0x3fe + exponent_value;\n  }\n  return result;\n}",
            "called": [
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_exponential_080096e0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "calculate_HCLK_frequency_divided_by_APB_prescaler_08003540",
                "uVar1": "HCLK_frequency",
                "DAT_08003560": "data_address",
                "PTR_APBPrescTable_08003564": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler": "APB_prescaler",
                "HCLK_frequency_divided_by_APB_prescaler": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t calculate_HCLK_frequency_divided_by_APB_prescaler_08003540(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(uint *)(DAT_08003560 + 4) >> 0xb) & 7;\n  uint32_t APB_prescaler = PTR_APBPrescTable_08003564[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "calculate_HCLK_frequency_divided_by_APB_prescaler_08003540"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "initialize_I2C_08001ab0",
                "*hi2c": "*i2c_handle",
                "HAL_StatusTypeDef HVar3": "HAL_StatusTypeDef status",
                "uint32_t uVar1": "uint32_t pclk1_freq",
                "char cVar2": "char is_freq_valid",
                "uint32_t uVar4": "uint32_t freq_range",
                "uint uVar5": "uint32_t ccr_val",
                "bool bVar6": "not used",
                "uint32_t pclk1": "not used",
                "uint32_t freqrange": "not used",
                "DAT_08001ca4": "400000",
                "DAT_08001ca8": "1000000",
                "DAT_08001cac": "not used",
                "DAT_08001cb0": "2",
                "DAT_08001cb4": "25"
            },
            "code": "HAL_StatusTypeDef initialize_I2C_08001ab0(IDAT_08001cb0C_HandleTypeDef *iDAT_08001cb0c_handle)\n{\n    uint3DAT_08001cb0_t pclk1_freq;\n    uint3DAT_08001cb0_t freq_range;\n    uint3DAT_08001cb0_t ccr_val;\n    uint3DAT_08001cb0_t rise_time_val;\n    uint3DAT_08001cb0_t filter_val;\n    char is_freq_valid = 1;\n    HAL_StatusTypeDef status = HAL_OK;\n\n    if (iDAT_08001cb0c_handle == NULL) {\n        status = HAL_ERROR;\n    }\n    else {\n        if (iDAT_08001cb0c_handle->State == HAL_IDAT_08001cb0C_STATE_RESET) {\n            iDAT_08001cb0c_handle->Lock = HAL_UNLOCKED;\n            HAL_IDAT_08001cb0C_MspInit(iDAT_08001cb0c_handle);\n        }\n        iDAT_08001cb0c_handle->State = HAL_IDAT_08001cb0C_STATE_BUSY;\n        iDAT_08001cb0c_handle->Instance->CR1 &= ~(1);\n        pclk1_freq = HAL_RCC_GetPCLK1Freq();\n        if (iDAT_08001cb0c_handle->Init.ClockSpeed > DAT_08001ca4) {\n            freq_range = DAT_08001ca8;\n        }\n        else {\n            freq_range = DAT_08001ca4;\n        }\n        if (pclk1_freq < freq_range) {\n            is_freq_valid = 0;\n        }\n        if (is_freq_valid) {\n            ccr_val = (pclk1_freq / (iDAT_08001cb0c_handle->Init.ClockSpeed << 1));\n            if (ccr_val < 4) {\n                ccr_val = 4;\n            }\n            rise_time_val = (pclk1_freq / DAT_08001ca8) + 1;\n            filter_val = ccr_val / DAT_08001cb0;\n            iDAT_08001cb0c_handle->Instance->CRDAT_08001cb0 = (iDAT_08001cb0c_handle->Init.AddressingMode | (iDAT_08001cb0c_handle->Init.DualAddressMode << 1) | (iDAT_08001cb0c_handle->Init.OwnAddressDAT_08001cb0 << 8));\n            iDAT_08001cb0c_handle->Instance->CCR = ccr_val;\n            iDAT_08001cb0c_handle->Instance->TRISE = rise_time_val;\n            iDAT_08001cb0c_handle->Instance->CR1 = (iDAT_08001cb0c_handle->Init.NoStretchMode | (iDAT_08001cb0c_handle->Init.GeneralCallMode << 4) | (iDAT_08001cb0c_handle->Init.OwnAddress1 << 1));\n            iDAT_08001cb0c_handle->Instance->CR1 |= 1;\n            iDAT_08001cb0c_handle->ErrorCode = 0;\n            iDAT_08001cb0c_handle->State = HAL_IDAT_08001cb0C_STATE_READY;\n            iDAT_08001cb0c_handle->PreviousState = 0;\n            iDAT_08001cb0c_handle->Mode = HAL_IDAT_08001cb0C_MODE_NONE;\n        }\n        else {\n            status = HAL_ERROR;\n        }\n    }\n    return status;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "MX_I2C1_Init"
            ],
            "imported": false,
            "current_name": "initialize_I2C_08001ab0"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "FUNC_08000150"
            },
            "code": "\nulonglong FUNC_08000150(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000150",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000150"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_characters",
                "cVar1": "current_char",
                "puVar2": "source_32",
                "puVar3": "destination_32",
                "puVar4": "temp_pointer",
                "uVar5": "temp_value"
            },
            "code": "char * copy_string_08009768(char *destination, const char *source, size_t num_characters) {\n  char current_char;\n  uint32_t *source_32 = (uint32_t *)source;\n  uint32_t *destination_32 = (uint32_t *)destination;\n  size_t remaining_characters = num_characters;\n  \n  // Check if source and destination addresses are 4-byte aligned\n  if ((((uint32_t)destination | (uint32_t)source) & 3) == 0) {\n    while (remaining_characters >= 4) {\n      *destination_32 = *source_32;\n      if ((*source_32 + 0xfefefeff & ~(*source_32) & 0x80808080) != 0) {\n        break;\n      }\n      remaining_characters -= 4;\n      destination_32++;\n      source_32++;\n    }\n  }\n  \n  // Copy remaining characters one-by-one if the number is not divisible by 4\n  if (remaining_characters > 0) {\n    current_char = *(char *)source_32;\n    *destination_32 = *source_32;\n    while (current_char != '\\0') {\n      remaining_characters--;\n      if (remaining_characters == 0) {\n        break;\n      }\n      source_32++;\n      destination_32++;\n      current_char = *(char *)source_32;\n      *destination_32 = *source_32;\n    }\n    \n    // Pad the remaining space with null characters\n    if (remaining_characters > 0) {\n      destination_32 = (uint32_t *)(((char *)destination_32) + 1);\n      while (remaining_characters > 0) {\n        remaining_characters--;\n        *(char *)destination_32 = '\\0';\n        destination_32 = (uint32_t *)(((char *)destination_32) + 1);\n      }\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08001008": {
            "renaming": {
                "FUN_08001008": "check_for_zero_08001008",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_for_zero_08001008(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  \n  is_CY_zero = __aeabi_cfcmpeq();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001008",
            "calling": [],
            "imported": false,
            "current_name": "check_for_zero_08001008"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "configure_timer_08003ff8",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccer": "tmp_ccer",
                "tmpccmrx": "tmp_ccmrx",
                "tmpcr2": "tmp_cr2"
            },
            "code": "void configure_timer_08003ff8(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config) {\n  uint32_t oc_mode = output_channel_config->OCMode;\n  uint32_t oc_polarity = output_channel_config->OCPolarity;\n  uint32_t tmp_ccer = timer->CCER & 0xffffefff;\n  uint32_t tmp_ccmrx = timer->CCMR2 & 0xffff8cff;\n  uint32_t tmp_cr2 = timer->CR2;\n  timer->CCR4 = output_channel_config->Pulse;\n  tmp_cr2 = (timer == DAT_0800409c) ? (output_channel_config->OCIdleState << 6) | (tmp_cr2 & 0xffffbfff) : tmp_cr2;\n  timer->CR2 = tmp_cr2;\n  timer->CCMR2 = (oc_mode << 8) | tmp_ccmrx;\n  timer->CCER = (oc_polarity << 0xc) | tmp_ccer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "writeDataToI2CDevice_08004ea4",
                "addr": "deviceAddress",
                "reg": "registerAddress",
                "*data": "data",
                "len": "dataLength",
                "PTR_hi2c1_08004ee4": "i2cHandle_08004ee4",
                "PTR_I2C_TIMEOUT_08004ee0": "i2cTimeout_08004ee0"
            },
            "code": "void writeDataToI2CDevice_08004ea4(uint8_t deviceAddress, uint8_t registerAddress, uint8_t *data, uint16_t dataLength) {\n  HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004ee4, (uint16_t)deviceAddress, (uint16_t)registerAddress, 1, data, dataLength, *(uint32_t *)PTR_I2C_TIMEOUT_08004ee0);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "writeDataToI2CDevice_08004ea4"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "incr": "size",
                "puVar1": "errno_ptr",
                "auStack_18": "stack_variable",
                "local_14": "local_variable",
                "prev_heap_end": "previous_heap_end"
            },
            "code": "caddr_t allocate_memory_08005728(int size)\n{\n  undefined4 *errno_ptr;\n  undefined stack_variable [4];\n  int local_variable;\n  char *previous_heap_end;\n  \n  if (*(int *)PTR_heap_end_08005778 == 0) {\n    *(undefined **)PTR_heap_end_08005778 = PTR_end_0800577c;\n  }\n  previous_heap_end = *(char **)PTR_heap_end_08005778;\n  if (stack_variable < (undefined *)(size + *(int *)PTR_heap_end_08005778)) {\n    local_variable = size;\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0xc;\n    previous_heap_end = (caddr_t)0xffffffff;\n  }\n  else {\n    *(int *)PTR_heap_end_08005778 = size + *(int *)PTR_heap_end_08005778;\n  }\n  return previous_heap_end;\n}",
            "called": [
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "configure_timer_08003e38",
                "TIMx": "timer",
                "OC_Config": "oc_config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccmrx": "unused",
                "tmpcr2": "cr2",
                "tmpccer": "unused",
                "DAT_08003f14": "special_timer",
                "cc_er": "cc_er",
                "OCNPolarity": "oc_n_polarity",
                "OCPolarity": "oc_polarity",
                "OCIdleState": "oc_idle_state",
                "OCNIdleState": "oc_n_idle_state",
                "Pulse": "oc_pulse"
            },
            "code": "void configure_timer_08003e38(TIM_TypeDef *timer, TIM_OC_InitTypeDef *oc_config) {\n    uint32_t oc_mode = oc_config->OCMode;\n    uint32_t oc_polarity = oc_config->OCPolarity;\n    uint32_t oc_n_polarity = oc_config->OCNPolarity;\n    uint32_t oc_pulse = oc_config->Pulse;\n    uint32_t oc_idle_state = oc_config->OCIdleState;\n    uint32_t oc_n_idle_state = oc_config->OCNIdleState;\n\n    // Disable output\n    timer->CCER &= 0xffffffef;\n\n    // Configure CR2 register\n    uint32_t cr2 = timer->CR2;\n    if (timer == DAT_08003f14) {\n        uint32_t cc_er = timer->CCER;\n        cc_er &= 0xffffffdf;\n        cc_er |= (oc_n_polarity << 4);\n        cc_er &= 0xffffffbf;\n        oc_idle_state <<= 2;\n        oc_n_idle_state <<= 2;\n        cr2 &= 0xfffff3ff;\n        cr2 |= (oc_idle_state | oc_n_idle_state);\n        timer->CCER = cc_er;\n    }\n\n    // Configure CCMR1 register\n    timer->CCMR1 &= 0xffff8cff;\n    timer->CCMR1 |= (oc_mode << 8);\n\n    // Configure CCR2 register\n    timer->CCR2 = oc_pulse;\n\n    // Enable output\n    uint32_t cc_er = timer->CCER;\n    cc_er &= 0xffffffdf;\n    cc_er |= (oc_polarity << 4);\n    timer->CCER = cc_er;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003e38"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_mask",
                "unaff_r4": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "in_r12": "temp_var_4",
                "bVar4": "is_zero",
                "return_value": "default_return_value",
                "mask": "bit_mask",
                "shift_amount": "bit_shift",
                "bit_check": "bit_mask"
            },
            "code": "ulonglong calculate_result_080006a4(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp1, temp2, temp3;\n  bool is_zero;\n  uint mask = 0x80000000;\n  uint shift_amount = 0x14;\n  uint bit_check = 0x100000;\n  uint return_value = 0x7ff8000000000000;\n  \n  temp1 = input_1;\n  temp2 = input_2;\n  temp3 = input_3;\n  \n  uint in_r12 = input_4;\n  uint unaff_r4 = input_3;\n  \n  uint uVar1 = in_r12 & (input_4 >> shift_amount);\n  \n  if (unaff_r4 != in_r12 && uVar1 != in_r12) {\n    is_zero = (input_1 | (input_2 << 1)) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | (input_4 << 1)) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n    }\n    if (unaff_r4 == 0) {\n      uint uVar2 = input_2 & mask;\n      do {\n        uint uVar3 = input_1 & mask;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(uVar3 != 0);\n      } while ((input_2 & bit_check) == 0);\n      input_2 = input_2 | uVar2;\n      if (uVar1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      uVar1 = input_3 & mask;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(uVar1 != 0);\n    } while ((input_4 & bit_check) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | (input_2 << 1)) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | (input_4 << 1)) == 0;\n  }\n  temp3 = input_2;\n  if (((!is_zero) && ((unaff_r4 != in_r12 || ((input_1 | (input_2 << 0xc)) == 0)))) && ((uVar1 != in_r12 || (input_1 = input_3, temp3 = input_4, (input_3 | (input_4 << 0xc)) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & mask | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input_1) | return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_memory_08009530",
                "param_1": "allocator",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "param_4",
                "iVar1": "allocator_result",
                "iVar5": "length_diff",
                "iVar12": "carry",
                "puVar2": "ptr1",
                "uVar3": "string1_length",
                "uVar4": "comparison_result",
                "puVar6": "result_ptr",
                "puVar7": "ptr2",
                "puVar8": "result_ptr_end",
                "puVar9": "string2",
                "puVar10": "ptr1_end",
                "puVar11": "string1_end",
                "puVar13": "allocator_result",
                "uVar14": "string1_length",
                "comparison_result": "comparison_result",
                "carry": "carry"
            },
            "code": "void compare_and_allocate_memory_08009530(undefined4 allocator, uint *string1, uint *string2, undefined4 param_4)\n{\n  int length_diff;\n  uint *ptr1;\n  uint *ptr2;\n  uint carry = 0;\n  uint *string1_end;\n  uint *string2_end;\n  uint *result_ptr;\n  uint *result_ptr_end;\n  uint *allocator_result;\n  int comparison_result;\n  uint string1_length = string1[4];\n  uint string2_length = string2[4];\n  if (string1_length - string2_length == 0) {\n    ptr1 = string1 + 5 + string1_length;\n    ptr2 = string2 + 5 + string2_length;\n    while (ptr1 != string1 + 5 && *--ptr1 == *--ptr2);\n    if (ptr1 == string1 + 4) {\n      length_diff = _Balloc(allocator, 0, ptr1, ptr2, param_4);\n      *(undefined4 *)(length_diff + 0x10) = 1;\n      *(undefined4 *)(length_diff + 0x14) = 0;\n      return;\n    }\n    if (*ptr2 <= *ptr1)\n      goto LAB_08009578;\n  }\n  else if (string1_length - string2_length < 0) {\n    length_diff = 1;\n    ptr1 = string1 + 5;\n    ptr2 = string2 + 5 - string1_length + string2_length;\n    string1_length = string2_length;\n    string2_length = string1[4];\n    string1 = string2;\n    string2 = ptr1;\n  }\n  else {\n    length_diff = 0;\n    ptr1 = string1 + 5 - string2_length + string1_length;\n    ptr2 = string2 + 5;\n  }\n  allocator_result = (uint *)_Balloc(allocator, string1[1], ptr1, ptr2, param_4);\n  comparison_result = 0;\n  string1_end = string1 + 5 + string1_length;\n  string2_end = string2 + 5 + string2_length;\n  result_ptr = allocator_result + 5;\n  result_ptr_end = result_ptr + string1_length;\n  while (ptr1 != string1_end && ptr2 != string2_end) {\n    carry += (*ptr1 & 0xffff) - (*ptr2 & 0xffff);\n    comparison_result = (int)(carry >> 0x10) + (*ptr1 >> 0x10) - (*ptr2 >> 0x10);\n    carry = (carry & 0xffff) | (comparison_result & 0xffff) << 0x10;\n    *result_ptr = carry;\n    carry >>= 0x10;\n    ++result_ptr;\n    ++ptr1;\n    ++ptr2;\n  }\n  while (ptr1 != string1_end) {\n    carry += *ptr1 & 0xffff;\n    comparison_result = (int)(carry >> 0x10) + (*ptr1 >> 0x10);\n    carry = (carry & 0xffff) | (comparison_result & 0xffff) << 0x10;\n    *result_ptr = carry;\n    carry >>= 0x10;\n    ++result_ptr;\n    ++ptr1;\n  }\n  while (ptr2 != string2_end) {\n    carry -= *ptr2 & 0xffff;\n    comparison_result = (int)(carry >> 0x10) - (*ptr2 >> 0x10);\n    carry = (carry & 0xffff) | (comparison_result & 0xffff) << 0x10;\n    *result_ptr = carry;\n    carry >>= 0x10;\n    ++result_ptr;\n    ++ptr2;\n  }\n  result_ptr_end -= 1;\n  while (*result_ptr_end == 0 && result_ptr_end != allocator_result + 4 + string1_length)\n    --result_ptr_end;\n  *(uint *)(allocator_result + 0x10) = string1_length;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_memory_08009530"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_i2c_status_08002bb4",
                "*hi2c": "*i2c_handler",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "hi2c->Instance->SR1": "i2c_handler->Instance->SR1",
                "hi2c->ErrorCode": "i2c_handler->ErrorCode",
                "hi2c->PreviousState": "i2c_handler->PreviousState",
                "hi2c->State": "i2c_handler->State",
                "hi2c->Lock": "i2c_handler->Lock",
                "HAL_OK": "HAL_OK",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "HAL_ERROR": "HAL_ERROR",
                "I2C_IsAcknowledgeFailed": "I2C_IsAcknowledgeFailed",
                "uint32_t": "uint32_t"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002bb4(I2C_HandleTypeDef *i2c_handler, uint32_t timeout, uint32_t start_tick)\n{\n    HAL_StatusTypeDef status;\n    uint32_t current_tick;\n    while(true) {\n        if((i2c_handler->Instance->SR1 & 0x80) == 0x80) {\n            return HAL_OK;\n        }\n        status = I2C_IsAcknowledgeFailed(i2c_handler);\n        if(status != HAL_OK) {\n            break;\n        }\n        if((timeout != 0xffffffff) && ((timeout == 0) || ((current_tick = HAL_GetTick()) > timeout + start_tick))) {\n            i2c_handler->ErrorCode |= 0x20;\n            i2c_handler->PreviousState = 0;\n            i2c_handler->State = HAL_I2C_STATE_READY;\n            i2c_handler->Lock = HAL_UNLOCKED;\n            return HAL_TIMEOUT;\n        }\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_I2C_SR1_08002d3c",
                "hi2c": "i2c_handle",
                "bVar1": "SR1_bit_10_set",
                "ErrorCode": "HAL_ERROR",
                "PreviousState": "HAL_I2C_STATE_RESET",
                "State": "HAL_I2C_STATE_READY"
            },
            "code": "HAL_StatusTypeDef check_I2C_SR1_08002d3c(I2C_HandleTypeDef *i2c_handle){\n  bool SR1_bit_10_set = (i2c_handle->Instance->SR1 & 0x400) == 0x400;\n  if (SR1_bit_10_set) {\n    i2c_handle->Instance->SR1 = 0xfffffbff;\n    i2c_handle->ErrorCode = HAL_ERROR;\n    i2c_handle->PreviousState = HAL_I2C_STATE_RESET;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n  }\n  return SR1_bit_10_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_I2C_SR1_08002d3c"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "shift_amount",
                "uVar1": "float_bits_result",
                "uVar2": "shifted_bits",
                "uVar3": "exponent",
                "in_r12": "temp_exponent",
                "bVar4": "is_negative",
                "bVar5": "is_denormal"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits, uint shift_amount)\n{\n  uint shifted_bits;\n  uint exponent;\n  bool is_negative;\n  bool is_denormal;\n  \n  shifted_bits = shift_amount * 2;\n  is_denormal = shifted_bits < 0x70000000;\n  exponent = shifted_bits + 0x90000000;\n  float_bits = exponent;\n  if (!is_denormal) {\n    exponent = shifted_bits + 0x8fe00000;\n    float_bits = exponent;\n  }\n  is_negative = float_bits == 0;\n  if (!is_denormal && exponent >= 0x200000) {\n    is_negative = exponent == 0x1fc00000;\n  }\n  if (((is_denormal || exponent < 0x200000) || 0x1fc00000 < exponent) || is_negative) {\n    if ((shift_amount & 0x40000000) != 0) {\n      if (((int)shifted_bits >> 0x15 == -1) && ((float_bits | shift_amount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shift_amount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_bits + 0x92e00000) < 0 != SCARRY4(exponent,0x2e00000)) {\n      return shift_amount & 0x80000000;\n    }\n    shifted_bits = 0x18 - (shifted_bits + 0x92e00000 >> 0x15);\n    float_bits = float_bits >> (shifted_bits & 0xff);\n    if (float_bits << (0x20 - shifted_bits & 0xff) != 0) {\n      float_bits = float_bits | 1;\n    }\n    exponent = shift_amount & 0x1fffff | 0x100000;\n    float_bits = float_bits | exponent << (0x20 - shifted_bits & 0xff);\n    exponent = (exponent >> (shifted_bits & 0xff)) << 1;\n  }\n  float_bits = (shift_amount & 0x80000000 | float_bits >> 0x1d) + exponent * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    float_bits = float_bits & 0xfffffffe;\n  }\n  return float_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "multiply_and_allocate_080093a4",
                "param_1": "allocation_size",
                "param_2": "array",
                "param_3": "array_size",
                "puVar3": "current_array",
                "puVar4": "allocated_array",
                "iVar1": "index",
                "iVar2": "quotient"
            },
            "code": "undefined4* multiply_and_allocate_080093a4(int allocation_size, undefined4* array, uint array_size) {\n    int quotient = array_size >> 2;\n    if ((array_size & 3) != 0) {\n        array = (undefined4*)__multadd(allocation_size, array, *(undefined4*)(PTR_p05_6092_08009440 + ((array_size & 3) - 1) * 4), 0);\n    }\n    if (quotient != 0) {\n        undefined4* allocated_array = *(undefined4**)(allocation_size + 0x48);\n        if (allocated_array == (undefined4*)0x0) {\n            allocated_array = (undefined4*)_Balloc(allocation_size, 1);\n            allocated_array[4] = 1;\n            allocated_array[5] = 0x271;\n            *(undefined4**)(allocation_size + 0x48) = allocated_array;\n            *allocated_array = 0;\n        }\n        undefined4* current_array = array;\n        if (quotient << 0x1f >= 0) {\n            goto LAB_080093c4;\n        }\nLAB_080093d2:\n        array = (undefined4*)__multiply(allocation_size, current_array, allocated_array);\n        if (current_array == (undefined4*)0x0) {\n            break;\n        }\n        int index = *(int*)(allocation_size + 0x4c);\n        quotient >>= 1;\n        *current_array = *(undefined4*)(index + current_array[1] * 4);\n        *(undefined4**)(index + current_array[1] * 4) = current_array;\n        current_array = allocated_array;\n        if (quotient != 0) {\n            while (true) {\n                allocated_array = (undefined4*)*current_array;\n                if (allocated_array == (undefined4*)0x0) {\n                    allocated_array = (undefined4*)__multiply(allocation_size, current_array, current_array);\n                    *current_array = allocated_array;\n                    *allocated_array = 0;\n                }\n                current_array = array;\n                if (quotient << 0x1f < 0) {\n                    goto LAB_080093d2;\n                }\n                LAB_080093c4:\n                quotient >>= 1;\n                current_array = allocated_array;\n                if (quotient == 0) {\n                    return array;\n                }\n            }\n        }\n    }\n    return array;\n}",
            "called": [
                "_Balloc",
                "__multadd",
                "__multiply"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "multiply_and_allocate_080093a4"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "__aeabi_drsub",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "check_and_register_exit_handler_080078a0",
                "DAT_080078ac": "global_flag",
                "DAT_080078b0": "exit_handler"
            },
            "code": "void check_and_register_exit_handler_080078a0(void)\n{\n  if (DAT_080078ac != 0) {\n    atexit(DAT_080078b0);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_and_register_exit_handler_080078a0"
        },
        "FUN_080056c8": {
            "renaming": {
                "FUN_080056c8": "wait_forever_080056c8"
            },
            "code": "void wait_forever_080056c8(void)\n{\n    while(true)\n    {\n        // do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c8",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056c8"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE"
            },
            "code": "void initialize_system_080057e8(void)\n{\n  int index;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8655_08005828;\n  code *UNRECOVERED_JUMPTABLE;\n  for (index = 0; PTR_uwTickPrio_08005820 + index < PTR_completed_8655_08005824; index += 4) {\n    *(undefined4 *)(PTR_uwTickPrio_08005820 + index) =\n         *(undefined4 *)(PTR___fini_array_end_0800581c + index);\n  }\n  for (; completed_ptr < PTR__ebss_0800582c; completed_ptr++) {\n    *completed_ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  main();\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n",
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_080057e8"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "compare_values_080008f4",
                "param_1": "first_value",
                "param_2": "first_value_shifted",
                "param_3": "second_value",
                "param_4": "second_value_shifted",
                "uVar1": "xor_result",
                "bVar2": "xor_result_is_negative",
                "bVar3": "second_value_is_less_than_or_equal_to_first_value",
                "-1": "negative",
                "values_are_different": "values_are_different",
                "values_are_not_different": "values_are_not_different",
                "second_value_is_not_less_than_or_equal_to_first_value": "second_value_is_not_less_than_or_equal_to_first_value",
                "first_value_is_not_less_than_or_equal_to_second_value": "first_value_is_not_less_than_or_equal_to_second_value",
                "values_are_not_different_and_second_value_is_not_less_than_or_equal_to_first_value": "values_are_not_different_and_second_value_is_not_less_than_or_equal_to_first_value",
                "values_are_not_different_and_second_value_is_less_than_or_equal_to_first_value": "values_are_not_different_and_second_value_is_less_than_or_equal_to_first_value",
                "values_are_not_different_and_first_value_is_not_less_than_or_equal_to_second_value": "values_are_not_different_and_first_value_is_not_less_than_or_equal_to_second_value",
                "values_are_not_different_and_first_value_is_less_than_or_equal_to_second_value": "values_are_not_different_and_first_value_is_less_than_or_equal_to_second_value",
                "result": "result"
            },
            "code": "uint compare_values_080008f4(uint first_value, uint first_value_shifted, uint second_value, uint second_value_shifted)\n{\n  uint result;\n  bool first_values_are_zero = (first_value | first_value_shifted << 1) == 0;\n  bool second_values_are_zero = (second_value | second_value_shifted << 1) == 0;\n  bool first_and_second_values_are_equal = first_value == second_value && first_value_shifted == second_value_shifted;\n  bool first_and_second_values_are_different = !first_and_second_values_are_equal;\n  if (first_values_are_zero && second_values_are_zero) {\n    result = 1;\n  }\n  else if (first_and_second_values_are_equal) {\n    result = 0;\n  }\n  else {\n    uint xor_result = first_value_shifted ^ second_value_shifted;\n    bool xor_result_is_negative = -1 < (int)xor_result;\n    bool second_value_is_less_than_or_equal_to_first_value = second_value <= first_value;\n    bool first_value_is_less_than_or_equal_to_second_value = first_value <= second_value;\n    bool values_are_different = first_and_second_values_are_different;\n    bool values_are_not_different = !values_are_different;\n    bool second_value_is_not_less_than_or_equal_to_first_value = !second_value_is_less_than_or_equal_to_first_value;\n    bool first_value_is_not_less_than_or_equal_to_second_value = !first_value_is_less_than_or_equal_to_second_value;\n    bool values_are_not_different_and_second_value_is_not_less_than_or_equal_to_first_value = values_are_not_different && second_value_is_not_less_than_or_equal_to_first_value;\n    bool values_are_not_different_and_second_value_is_less_than_or_equal_to_first_value = values_are_not_different && second_value_is_less_than_or_equal_to_first_value;\n    bool values_are_not_different_and_first_value_is_not_less_than_or_equal_to_second_value = values_are_not_different && first_value_is_not_less_than_or_equal_to_second_value;\n    bool values_are_not_different_and_first_value_is_less_than_or_equal_to_second_value = values_are_not_different && first_value_is_less_than_or_equal_to_second_value;\n    result = xor_result_is_negative && values_are_not_different_and_second_value_is_not_less_than_or_equal_to_first_value || values_are_not_different_and_second_value_is_less_than_or_equal_to_first_value && first_value_is_less_than_or_equal_to_second_value || values_are_not_different_and_first_value_is_not_less_than_or_equal_to_second_value && second_value_is_less_than_or_equal_to_first_value || values_are_not_different_and_first_value_is_less_than_or_equal_to_second_value && second_value_is_less_than_or_equal_to_first_value;\n    result = result | 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "compare_values_080008f4"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_tim_channel_080036a8",
                "*htim": "timer_handle",
                "Channel": "channel",
                "DAT_080036f4": "TIM2",
                "htim->Instance": "timer_handle->Instance",
                "htim->Instance->BDTR": "timer_handle->Instance->BDTR",
                "htim->Instance->CR1": "timer_handle->Instance->CR1",
                "| 0x8000": "| TIM_BDTR_MOE",
                "| 1": "| TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef set_tim_channel_080036a8(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  TIM_CCxChannelCmd(timer_handle->Instance, channel, ENABLE);\n  if (timer_handle->Instance == DAT_080036f4) {\n    timer_handle->Instance->BDTR |= TIM_BDTR_MOE;\n  }\n  timer_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "set_tim_channel_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR___malloc_av__08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR___malloc_trim_threshold_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_08008ad0);\n    }\nLAB_080089f0:\n    __malloc_unlock(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR___malloc_av__08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    __malloc_unlock(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  __malloc_unlock(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_and_start_08005224",
                "PTR_I2C_Write_Reg_0800527c": "i2c_write_reg",
                "PTR_I2C_Read_Reg_08005284": "i2c_read_reg",
                "PTR_Get_ms_tick_0800528c": "ms_tick_reg",
                "DAT_08005280": "i2c_write_val",
                "DAT_08005288": "i2c_read_val",
                "DAT_08005290": "ms_tick_val",
                "PTR_htim1_08005294": "htim1",
                "PTR_mpu6050_08005298": "mpu6050",
                "PTR_htim2_0800529c": "htim2"
            },
            "code": "int initialize_and_start_08005224(void)\n{\n  //Initialize hardware\n  HAL_Init();\n  SystemClock_Config();\n  MX_GPIO_Init();\n  MX_I2C1_Init();\n  MX_USART1_UART_Init();\n  MX_TIM2_Init();\n  MX_TIM1_Init();\n  //Set I2C and timer registers\n  *(uint32_t *)PTR_I2C_Write_Reg_0800527c = DAT_08005280;\n  *(uint32_t *)PTR_I2C_Read_Reg_08005284 = DAT_08005288;\n  *(uint32_t *)PTR_Get_ms_tick_0800528c = DAT_08005290;\n  //Start PWM\n  HAL_TIM_PWM_Start(&PTR_htim1_08005294, TIM_CHANNEL_1);\n  HAL_TIM_PWM_Start(&PTR_htim1_08005294, TIM_CHANNEL_2);\n  //Initialize MPU6050\n  PTR_mpu6050_08005298_init(&PTR_mpu6050_08005298);\n  //Start timer interrupt\n  HAL_TIM_Base_Start_IT(&PTR_htim2_0800529c);\n  //Start fork server\n  startForkserver(0);\n  //Infinite loop\n  while(true);\n}",
            "called": [
                "HAL_TIM_PWM_Start",
                "HAL_TIM_Base_Start_IT",
                "MX_I2C1_Init",
                "startForkserver",
                "MX_TIM1_Init",
                "MX_GPIO_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config",
                "HAL_Init",
                "mpu6050_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_and_start_08005224"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "init_i2c_08005348",
                "HVar1": "init_status",
                "hi2c1_ptr": "i2c_handle",
                "PTR_hi2c1_080053a0": "i2c1_ptr",
                "DAT_080053a4": "i2c_instance",
                "DAT_080053a8": "i2c_clock_speed"
            },
            "code": "void init_i2c_08005348(void)\n{\n\tI2C_HandleTypeDef *hPTR_hi2c1_080053a0 = (I2C_HandleTypeDef *)PTR_hi2c1_080053a0;\n\thPTR_hi2c1_080053a0->Instance = DAT_080053a4;\n\thPTR_hi2c1_080053a0->Init.ClockSpeed = DAT_080053a8;\n\thPTR_hi2c1_080053a0->Init.DutyCycle = I2C_DUTYCYCLE_2;\n\thPTR_hi2c1_080053a0->Init.OwnAddress1 = 0;\n\thPTR_hi2c1_080053a0->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;\n\thPTR_hi2c1_080053a0->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;\n\thPTR_hi2c1_080053a0->Init.OwnAddress2 = 0;\n\thPTR_hi2c1_080053a0->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;\n\thPTR_hi2c1_080053a0->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;\n\tif (HAL_I2C_Init(hPTR_hi2c1_080053a0) != HAL_OK)\n\t{\n\t\t_Error_Handler(PTR_s____src_main_c_080053ac,0x17a);\n\t}\n}",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "init_i2c_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculateOffsets_080049cc",
                "mpu6050": "mpu",
                "uVar1": "sample_float",
                "fVar2": "offset_float",
                "acc_roll": "acceleration_roll",
                "acc_pitch": "acceleration_pitch",
                "now": "current_time",
                "num_samples": "num_samples",
                "i": "sample_index",
                "offset_accRoll": "offset_acceleration_roll",
                "offset_accPitch": "offset_acceleration_pitch",
                "offset_gyroY": "offset_gyroscope_Y",
                "offset_gyroX": "offset_gyroscope_X",
                "PTR_Get_ms_tick_08004adc": "mpu6050->ms_tick_ptr"
            },
            "code": "void calculateOffsets_080049cc(Mpu6050 *mpu6050)\n{\n  uint32_t now;\n  int num_samples = 1;\n  float offset_accRoll = 0.0;\n  float offset_accPitch = 0.0;\n  float offset_gyroX = 0.0;\n  float offset_gyroY = 0.0;\n  now = (**(code **)PTR_Get_ms_tick_08004adc)();\n  for (int i = 0; i < num_samples; i++) {\n    float acc_pitch = 0.0;\n    float acc_roll = 0.0;\n    mpu6050_update(mpu6050);\n    mpu6050_calc_acc_pitch_roll(mpu6050, &acc_pitch, &acc_roll);\n    offset_accPitch += acc_pitch;\n    offset_accRoll += acc_roll;\n    offset_gyroX += mpu6050->gyroX;\n    offset_gyroY += mpu6050->gyroY;\n    now = (**(code **)PTR_Get_ms_tick_08004adc)();\n  }\n  mpu6050->offset_gyroX = offset_gyroX / num_samples;\n  mpu6050->offset_gyroY = offset_gyroY / num_samples;\n  mpu6050->offset_acc_pitch = offset_accPitch / num_samples;\n  mpu6050->offset_acc_roll = offset_accRoll / num_samples;\n}\n",
            "called": [
                "mpu6050_calc_acc_pitch_roll",
                "__addsf3",
                "__aeabi_fdiv",
                "mpu6050_update",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "mpu6050_init"
            ],
            "imported": false,
            "current_name": "calculateOffsets_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "configure_timer_08003c94",
                "TIMx": "timer",
                "Structure": "config",
                "tmpcr1": "cr1",
                "DAT_08003d54": "PTR_DAT_08003d54",
                "DAT_08003d58": "PTR_DAT_08003d58",
                "DAT_08003d5c": "PTR_DAT_08003d5c"
            },
            "code": "void configure_timer_08003c94(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\n  uint32_t cr1 = timer->CR1;\n  bool is_timer_valid = (timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000) || (timer == DAT_08003d58) || (timer == DAT_08003d5c);\n  if (is_timer_valid) {\n    cr1 = config->CounterMode | (cr1 & 0xffffff8f);\n  }\n  bool is_clock_valid = (timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000) || (timer == DAT_08003d58) || (timer == DAT_08003d5c);\n  if (is_clock_valid) {\n    cr1 = config->ClockDivision | (cr1 & 0xfffffcff);\n  }\n  timer->CR1 = config->AutoReloadPreload | (cr1 & 0xffffff7f);\n  timer->ARR = config->Period;\n  timer->PSC = config->Prescaler;\n  if (timer == DAT_08003d54) {\n    timer->RCR = config->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08003c94"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "size",
                "param_2": "align",
                "puVar1": "malloc_av",
                "puVar2": "mallinfo",
                "iVar3": "current_brk",
                "iVar4": "page_size",
                "uVar5": "flags"
            },
            "code": "int allocate_memory_0800884c(int size, int align) {\n  void *malloc_av = PTR___malloc_av__080088e0;\n  __malloc_lock();\n  uint32_t flags = *(uint32_t *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n  int page_size = ((0xfef - align) + flags & 0xfffff000) - 0x1000;\n  if (0xfff < page_size) {\n    int current_brk = _sbrk_r(size, 0);\n    if (current_brk == *(int *)(malloc_av + 8) + flags) {\n      current_brk = _sbrk_r(size, -page_size);\n      void *mallinfo = PTR___malloc_current_mallinfo_080088e4;\n      if (current_brk != -1) {\n        int sbrk_base = *(int *)PTR___malloc_sbrk_base_080088e8;\n        *(uint32_t *)(*(int *)(malloc_av + 8) + 4) = flags - page_size | 1;\n        *(int *)mallinfo = sbrk_base - page_size;\n        __malloc_unlock(size);\n        return 1;\n      }\n      current_brk = _sbrk_r(size, 0);\n      void *mallinfo = PTR___malloc_current_mallinfo_080088e4;\n      uint32_t new_flags = current_brk - *(int *)(malloc_av + 8);\n      if (0xf < (int)new_flags) {\n        int sbrk_base = *(int *)PTR___malloc_sbrk_base_080088e8;\n        *(uint32_t *)(*(int *)(malloc_av + 8) + 4) = new_flags | 1;\n        *(int *)mallinfo = current_brk - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(size);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_first_occurrence_of_byte_0800901c",
                "__s": "buffer",
                "__c": "byte",
                "__n": "size",
                "uVar1": "byte_as_uint_shifted_8",
                "uVar2": "value",
                "puVar3": "buffer_as_uint_current",
                "puVar4": "buffer_as_uint_next",
                "uVar5": "byte_as_uint",
                "bVar6": "end_of_buffer_reached"
            },
            "code": "void * find_first_occurrence_of_byte_0800901c(void *buffer, int byte, size_t size) {\n  uint byte_as_uint = byte & 0xff;\n  uint *buffer_as_uint = (uint *)buffer;\n  if (((uint)buffer & 3) == 0) {\n    while (size > 3) {\n      uint value = *buffer_as_uint ^ ((byte_as_uint << 8) | byte_as_uint);\n      if ((value + 0xfefefeff & ~value & 0x80808080) != 0) {\n        break;\n      }\n      size -= 4;\n      buffer_as_uint++;\n    }\n  }\n  while (size > 0 && *buffer_as_uint != byte_as_uint) {\n    size--;\n    buffer_as_uint = (uint *)((int)buffer_as_uint + 1);\n  }\n  return size == 0 ? NULL : buffer_as_uint;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_byte_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_clock_source_0800177c",
                "CLKSource": "clock_source",
                "*DAT_080017b0": "*clock_source_register"
            },
            "code": "void set_clock_source_0800177c(uint32_t CLKSource) {\n  if (CLKSource == 4) {\n    *DAT_080017b0 |= 0x04;\n  }\n  else {\n    *DAT_080017b0 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_0800177c"
        },
        "FUN_080099ec": {
            "renaming": {
                "FUN_080099ec": "read_first_byte_080099ec",
                "param_1": "defaultValue",
                "param_2": "outValue",
                "param_3": "inputBuffer",
                "param_4": "bufferSize",
                "uVar1": "result",
                "uStack_4": "tempValue"
            },
            "code": "uint read_first_byte_080099ec(uint defaultValue, uint *outValue, byte *inputBuffer, int bufferSize) {\n  uint result = defaultValue;\n  uint tempValue;\n  if (outValue == (uint *)0x0) {\n    outValue = &tempValue;\n  }\n  if (inputBuffer == (byte *)0x0 || bufferSize == 0) {\n    return 0;\n  }\n  *outValue = (uint)*inputBuffer;\n  if (*outValue != 0) {\n    result = 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099ec",
            "calling": [],
            "imported": false,
            "current_name": "read_first_byte_080099ec"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_uart_08005598",
                "PTR_huart1_080055e8": "huart1_ptr",
                "DAT_080055ec": "baud_rate",
                "PTR_s____src_main_c_080055f0": "__FILE__",
                "HVar1": "status"
            },
            "code": "void initialize_uart_08005598(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t DAT_080055ec = 115200;\n  uint32_t word_length = UART_WORDLENGTH_8B;\n  uint32_t stop_bits = UART_STOPBITS_1;\n  uint32_t parity = UART_PARITY_NONE;\n  uint32_t mode = UART_MODE_TX_RX;\n  uint32_t hw_flow_ctrl = UART_HWCONTROL_NONE;\n  \n  *(uint32_t *)huart1_DAT_080055ec_ptr = DAT_080055ec;\n  *(uint32_t *)(huart1_word_length_ptr) = word_length;\n  *(uint32_t *)(huart1_stop_bits_ptr) = stop_bits;\n  *(uint32_t *)(huart1_parity_ptr) = parity;\n  *(uint32_t *)(huart1_mode_ptr) = mode;\n  *(uint32_t *)(huart1_flow_ctrl_ptr) = hw_flow_ctrl;\n  \n  status = HAL_UART_Init((UART_HandleTypeDef *)PTR_huart1_080055e8);\n  if (status != HAL_OK) {\n    error_handler(PTR_s____src_main_c_080055f0, __LINE__);\n  }\n  return;\n}",
            "called": [
                "_Error_Handler",
                "HAL_UART_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_uart_08005598"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  size_t sVar8;\n  int *piVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  int iVar13;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)_malloc_r(param_1,param_3);\n    return piVar4;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__08009e38;\n  uVar7 = param_2[-1];\n  uVar11 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar10 = 0x10;\n  }\n  else {\n    uVar10 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar10 < 0) goto LAB_08009b8e;\n  }\n  if (uVar10 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar13 = (int)piVar4 + uVar11;\n  uVar12 = uVar11;\n  if ((int)uVar11 < (int)uVar10) {\n    if (*(int *)(PTR___malloc_av__08009e38 + 8) == iVar13) {\n      iVar13 = (*(uint *)(*(int *)(PTR___malloc_av__08009e38 + 8) + 4) & 0xfffffffc) + uVar11;\n      if ((int)(uVar10 + 0x10) <= iVar13) {\n        *(uint *)(PTR___malloc_av__08009e38 + 8) = (int)piVar4 + uVar10;\n        *(uint *)((int)piVar4 + uVar10 + 4) = iVar13 - uVar10 | 1;\n        param_2[-1] = uVar10 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar10 + 0x10) <= (int)(iVar13 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          sVar8 = uVar11 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (sVar8 < 0x25) {\n            iVar3 = *param_2;\n            piVar9 = piVar4;\n            if (0x13 < sVar8) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (sVar8 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar9 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (sVar8 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar9 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar9 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar9 = iVar3;\n            piVar9[1] = param_2[1];\n            piVar9[2] = param_2[2];\n          }\n          else {\n            memmove(piVar4,param_2,sVar8);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar10;\n          *(uint *)((int)piVar2 + uVar10 + 4) = (iVar13 + uVar7) - uVar10 | 1;\n          piVar2[1] = uVar10 | piVar2[1] & 1U;\n          __malloc_unlock(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar12 = uVar11 + uVar7;\n        if ((int)uVar10 <= (int)uVar12) {\n          iVar6 = piVar2[3];\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar11 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(piVar9,param_2,uVar11 - 4);\n          param_2 = piVar9;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar13 + 4) & 0xfffffffe) + iVar13 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar13 + 4) & 0xfffffffc;\n        uVar12 = uVar11 + uVar5;\n        if ((int)uVar12 < (int)uVar10) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar12 = uVar5 + uVar7 + uVar11;\n          if ((int)uVar12 < (int)uVar10) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar13 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar13;\n          *(int *)(iVar13 + 8) = iVar3;\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar11 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar11 = uVar11 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar9;\n          if (0x13 < uVar11) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar11 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar11 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar9;\n        }\n        else {\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar6 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar4 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)_malloc_r(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar12 = uVar11 + (piVar2[-1] & 0xfffffffcU);\n        iVar13 = (int)piVar4 + uVar12;\n        goto LAB_08009c00;\n      }\n      sVar8 = uVar11 - 4;\n      if (sVar8 < 0x25) {\n        iVar13 = *param_2;\n        piVar4 = param_2;\n        piVar9 = piVar2;\n        if (0x13 < sVar8) {\n          *piVar2 = iVar13;\n          piVar2[1] = param_2[1];\n          if (sVar8 < 0x1c) {\n            iVar13 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar9 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (sVar8 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar13 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar9 = piVar2 + 6;\n            }\n            else {\n              iVar13 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar9 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar9 = iVar13;\n        piVar9[1] = piVar4[1];\n        piVar9[2] = piVar4[2];\n      }\n      else {\n        memmove(piVar2,param_2,sVar8);\n      }\n      _free_r(param_1,param_2);\n    }\n    __malloc_unlock(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar12 - uVar10 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar12;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar10;\n      *(uint *)((int)piVar4 + uVar10 + 4) = uVar12 - uVar10 | 1;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n      _free_r(param_1,(int)piVar4 + uVar10 + 8);\n    }\n    __malloc_unlock(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "memmove",
                "_malloc_r",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "read_i2c_data_08002640",
                "hi2c": "i2c_handler",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "tmpreg": "temp_register"
            },
            "code": "HAL_StatusTypeDef read_i2c_data_08002640(I2C_HandleTypeDef *i2c_handler, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t start_tick)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  i2c_handler->Instance->CR1 |= 0x100;\n  do {\n    if ((~i2c_handler->Instance->SR1 & 1) == 0) {\n      return HAL_ERROR;\n    }\n    current_tick = HAL_GetTick();\n  } while ((timeout == 0xffffffff) || ((timeout != 0) && (current_tick - start_tick <= timeout)));\n  i2c_handler->PreviousState = 0;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Mode = HAL_I2C_MODE_NONE;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  if ((uint8_t)device_address & 0x01) {\n    return HAL_ERROR;\n  }\n  i2c_handler->Instance->DR = (uint8_t)device_address;\n  status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_handler, DAT_080027f0, timeout, start_tick);\n  if (status != HAL_OK) {\n    return status;\n  }\n  status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, start_tick);\n  if (status != HAL_OK) {\n    return status;\n  }\n  if (memory_address_size == 1) {\n    i2c_handler->Instance->DR = (uint8_t)memory_address;\n  }\n  else {\n    i2c_handler->Instance->DR = (uint8_t)(memory_address >> 8);\n    status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, start_tick);\n    if (status != HAL_OK) {\n      if (i2c_handler->ErrorCode == 4) {\n        i2c_handler->Instance->CR1 |= 0x200;\n        return HAL_ERROR;\n      }\n      return HAL_TIMEOUT;\n    }\n    i2c_handler->Instance->DR = (uint8_t)memory_address;\n  }\n  return HAL_OK;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "read_i2c_data_08002640"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "__s": "output_buffer",
                "__format": "format_string",
                "local_80": "output_buffer_ptr",
                "local_78": "max_output_length",
                "uStack_74": "max_field_width",
                "local_70": "output_buffer_current_ptr",
                "local_6c": "max_output_length",
                "uStack_8": "args_list",
                "uStack_4": "unused_argument"
            },
            "code": "int print_formatted_string_08005dfc(char *output_buffer, char *format_string, ...) {\n  int print_result;\n  va_list args_list;\n  int max_output_length = 0x7fffffff;\n  int max_field_width = 0x7fffffff;\n  char *output_buffer_ptr[2];\n  output_buffer_ptr[0] = output_buffer;\n  char *output_buffer_current_ptr = output_buffer;\n  va_start(args_list, format_string);\n  print_result = vsnprintf(output_buffer_current_ptr, max_output_length, format_string, args_list);\n  va_end(args_list);\n  *output_buffer_current_ptr = '\\0';\n  return print_result;\n}",
            "called": [
                "_svfprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08005dfc"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "number",
                "uVar1": "upper_bits",
                "uVar2": "number",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount",
                "uVar6": "upper_bits",
                "in_r12": "in_r12",
                "bVar7": "is_negative_shift",
                "bVar8": "is_zero_shift",
                "bVar9": "is_overflow_shift"
            },
            "code": "ulonglong reverse_bits_080003f4(uint number)\n{\n  if (number == 0) {\n    return 0;\n  }\n  uint leading_zeroes = count_leading_zeroes(number);\n  uint shift_amount = leading_zeroes + 21;\n  if (shift_amount < 32) {\n    shift_amount = 12 - leading_zeroes;\n    uint upper_bits = number << (shift_amount & 0xff);\n    uint lower_bits = number >> (shift_amount & 0xff);\n    return ((ulonglong)lower_bits << 32) | upper_bits;\n  }\n  else if (shift_amount < 1075) {\n    uint in_r12 = 32 - (shift_amount & 0xff);\n    uint upper_bits = number << (shift_amount & 0xff);\n    upper_bits |= 0U >> (in_r12 & 0xff);\n    uint lower_bits = 0 << (shift_amount & 0xff);\n    return ((ulonglong)lower_bits << 32) | upper_bits;\n  }\n  else {\n    uint shift_amount = ~(shift_amount - 1074);\n    if (shift_amount > 30) {\n      return ((ulonglong)number) & 0x80000000ffffffff;\n    }\n    else {\n      uint upper_bits = number >> (shift_amount & 0xff);\n      uint lower_bits = number << (32 - (12 - shift_amount) & 0xff);\n      return ((ulonglong)lower_bits << 32) | upper_bits;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_bits_080003f4"
        },
        "FUN_0800045c": {
            "renaming": {
                "FUN_0800045c": "divide_0800045c",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "carry",
                "uVar2": "quotient_temp_1",
                "uVar3": "shift_amount_2",
                "uVar4": "quotient_temp_2",
                "iVar5": "leading_zero_count",
                "uVar6": "shift_amount",
                "iVar7": "shift_count",
                "uVar8": "quotient_high",
                "bVar9": "high_bit",
                "bVar10": "shift_amount_2_zero",
                "bVar11": "shift_amount_negative",
                "carry_check": "carry_check",
                "remainder": "remainder"
            },
            "code": "ulonglong divide_0800045c(uint divide_0800045cnd, uint divisor)\n{\n  byte carry;\n  uint quotient_high, quotient_low, remainder;\n  int shift_count;\n  bool carry_check;\n  \n  if ((divide_0800045cnd | divisor) == 0) {\n    return CONCAT44(divisor, divide_0800045cnd);\n  }\n  \n  shift_count = 0x432;\n  quotient_high = divisor >> 0x16;\n  if (quotient_high != 0) {\n    shift_count = 3;\n    if (divisor >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (divisor >> 0x1c != 0) {\n      shift_count += 3;\n    }\n    remainder = shift_count - ((int)divisor >> 0x1f);\n    quotient_high = divide_0800045cnd << (0x20 - remainder & 0xff);\n    divide_0800045cnd = divide_0800045cnd >> (remainder & 0xff) | divisor << (0x20 - remainder & 0xff);\n    divisor = divisor >> (remainder & 0xff);\n    shift_count = remainder + 0x432;\n  }\n  if (0xfffff < divisor) {\n    if (0x1fffff < divisor) {\n      remainder = divisor & 1;\n      divisor = divisor >> 1;\n      carry = (byte)divide_0800045cnd;\n      divide_0800045cnd = (uint)(remainder != 0) << 0x1f | divide_0800045cnd >> 1;\n      quotient_high = (uint)(carry & 1) << 0x1f | quotient_high >> 1;\n      shift_count++;\n      if (0xffbfffff < (uint)(shift_count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000268:\n    carry_check = 0x7fffffff < quotient_high;\n    if (quotient_high == 0x80000000) {\n      carry_check = (divide_0800045cnd & 1) != 0;\n    }\n    return CONCAT44(divisor + shift_count * 0x100000 + (uint)CARRY4(divide_0800045cnd,(uint)carry_check),divide_0800045cnd + carry_check);\n  }\n  bool high_bit = (quotient_high & 0x80000000) != 0;\n  quotient_high = quotient_high << 1;\n  remainder = divide_0800045cnd * 2;\n  carry_check = CARRY4(divide_0800045cnd,divide_0800045cnd);\n  divide_0800045cnd = divide_0800045cnd * 2 + (uint)high_bit;\n  divisor = divisor * 2 + (uint)(carry_check || CARRY4(remainder,(uint)high_bit));\n  shift_count--;\n  if ((divisor & 0x100000) != 0) goto LAB_08000268;\n  uint quotient_temp_1 = divide_0800045cnd;\n  uint quotient_temp_2 = divisor;\n  if (divisor == 0) {\n    quotient_temp_1 = 0;\n    quotient_temp_2 = divide_0800045cnd;\n  }\n  int leading_zero_count = count_leading_zeroes(quotient_temp_2);\n  if (divisor == 0) {\n    leading_zero_count += 0x20;\n  }\n  uint shift_amount = leading_zero_count - 0xb;\n  bool shift_amount_negative = SBORROW4(shift_amount,0x20);\n  uint shift_amount_2 = leading_zero_count - 0x2b;\n  bool shift_amount_2_negative = (int)shift_amount_2 < 0;\n  bool shift_amount_2_zero = shift_amount_2 == 0;\n  if ((int)shift_amount < 0x20) {\n    shift_amount_negative = SCARRY4(shift_amount,0xc);\n    leading_zero_count -= 0x1f;\n    shift_amount_2_negative = leading_zero_count < 0;\n    shift_amount_2_zero = leading_zero_count == 0;\n    shift_amount = shift_amount;\n    if (!shift_amount_2_zero && shift_amount_2_negative == shift_amount_negative) {\n      quotient_temp_1 = quotient_temp_2 << (shift_amount & 0xff);\n      quotient_temp_2 = quotient_temp_2 >> (0xcU - leading_zero_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (shift_amount_2_zero || shift_amount_2_negative != shift_amount_negative) {\n    uint shift_amount_3 = 0x20 - shift_amount;\n    quotient_temp_2 = quotient_temp_2 << (shift_amount & 0xff);\n    if (shift_amount_2_zero || shift_amount_2_negative != shift_amount_negative) {\n      quotient_temp_2 = quotient_temp_2 | quotient_temp_1 >> (shift_amount_3 & 0xff);\n    }\n    if (shift_amount_2_zero || shift_amount_2_negative != shift_amount_negative) {\n      quotient_temp_1 = quotient_temp_1 << (shift_amount & 0xff);\n    }\n  }\nLAB_080002e0:\n  if ((int)shift_amount <= shift_count) {\n    return CONCAT44(quotient_temp_2 + (shift_count - shift_amount) * 0x100000,quotient_temp_1);\n  }\n  uint shift_amount_4 = ~(shift_count - shift_amount);\n  if (0x1e < (int)shift_amount_4) {\n    return (ulonglong)(quotient_temp_2 >> (shift_amount_4 - 0x1f & 0xff));\n  }\n  int shift_amount_5 = shift_amount_4 - 0x13;\n  if (shift_amount_5 == 0 || shift_amount_5 < 0 != SCARRY4(shift_amount_4 - 0x1f,0xc)) {\n    shift_amount_4++;\n    return CONCAT44(quotient_temp_2 >> (shift_amount_4 & 0xff),quotient_temp_1 >> (shift_amount_4 & 0xff) | quotient_temp_2 << (0x20 - shift_amount_4 & 0xff));\n  }\n  return (ulonglong)(quotient_temp_1 >> (0x20 - (0xcU - shift_amount_5) & 0xff) | quotient_temp_2 << (0xcU - shift_amount_5 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800045c",
            "calling": [],
            "imported": false,
            "current_name": "divide_0800045c"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "calculate_priority_0800166c",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_bits",
                "uVar2": "priority_group_shifted"
            },
            "code": "uint32_t calculate_priority_0800166c(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  uint32_t priority_group_bits = priority_group & 7;\n  uint32_t priority_group_shifted = 7 - priority_group_bits;\n  if (priority_group_shifted > 3) {\n    priority_group_shifted = 4;\n  }\n  if (priority_group_bits + 4 < 7) {\n    priority_group_bits = 0;\n  }\n  else {\n    priority_group_bits = priority_group_bits - 3;\n  }\n  return sub_priority & ~(-1 << (priority_group_bits & 0xff)) |\n         (~(-1 << (priority_group_shifted & 0xff)) & preempt_priority) << (priority_group_bits & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "enable_timer_interrupts_0800360c",
                "*htim": "*timer",
                "->DIER": "->TIM_IT_UPDATE",
                "->CR1": "->TIM_CR1_CEN",
                "| 1": "",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef enable_timer_interrupts_0800360c(TIM_HandleTypeDef *timer)\n{\n  timer->Instance->DIER |= TIM_IT_UPDATE;\n  timer->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_interrupts_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "fill_buffer_with_char_08005d68",
                "__s": "buffer",
                "__c": "character",
                "__n": "buffer_size",
                "puVar1": "buffer_uint_temp",
                "puVar2": "buffer_uint",
                "puVar3": "buffer_uint_temp2",
                "uVar4": "remaining_bytes",
                "uVar5": "character_uint",
                "bVar6": "is_remaining_bytes_zero"
            },
            "code": "void * fill_buffer_with_char_08005d68(void *buffer, int character, size_t buffer_size)\n{\n  uint *buffer_uint = (uint *)buffer;\n  if (((uint)buffer & 3) != 0) {\n    uint remaining_bytes = buffer_size - 1;\n    uint *buffer_uint_temp = (uint *)buffer;\n    if (buffer_size == 0) {\n      return buffer;\n    }\n    while( true ) {\n      buffer_uint = (uint *)((int)buffer_uint_temp + 1);\n      *(char *)buffer_uint_temp = (char)character;\n      buffer_size = remaining_bytes;\n      if (((uint)buffer_uint & 3) == 0) break;\n      bool is_remaining_bytes_zero = remaining_bytes == 0;\n      remaining_bytes = remaining_bytes - 1;\n      buffer_uint_temp = buffer_uint;\n      if (is_remaining_bytes_zero) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < buffer_size) {\n    uint character_uint = character & 0xffU | (character & 0xffU) << 8;\n    character_uint = character_uint | character_uint << 0x10;\n    uint remaining_bytes = buffer_size;\n    uint *buffer_uint_temp = buffer_uint;\n    if (0xf < buffer_size) {\n      remaining_bytes = buffer_size - 0x10;\n      buffer_uint_temp = buffer_uint + 4;\n      do {\n        buffer_uint_temp[-4] = character_uint;\n        buffer_uint_temp[-3] = character_uint;\n        buffer_uint_temp[-2] = character_uint;\n        buffer_uint_temp[-1] = character_uint;\n        buffer_uint_temp = buffer_uint_temp + 4;\n      } while (buffer_uint_temp != (uint *)((int)buffer_uint + (remaining_bytes & 0xfffffff0) + 0x20));\n      buffer_size = buffer_size & 0xf;\n      buffer_uint = buffer_uint + ((remaining_bytes >> 4) + 1) * 4;\n      remaining_bytes = buffer_size;\n      buffer_uint_temp = buffer_uint;\n      if (buffer_size < 4) goto LAB_08005de4;\n    }\n    do {\n      buffer_size = buffer_size - 4;\n      *buffer_uint = character_uint;\n      buffer_uint = buffer_uint + 1;\n    } while (3 < buffer_size);\n    buffer_uint = (uint *)((int)buffer_uint_temp + (remaining_bytes - 4 & 0xfffffffc) + 4);\n    buffer_size = remaining_bytes & 3;\n  }\nLAB_08005de4:\n  if (buffer_size != 0) {\n    uint *buffer_uint_temp = buffer_uint;\n    do {\n      uint *buffer_uint_temp2 = (uint *)((int)buffer_uint_temp + 1);\n      *(char *)buffer_uint_temp = (char)character;\n      buffer_uint_temp = buffer_uint_temp2;\n    } while ((uint *)(buffer_size + (int)buffer_uint) != buffer_uint_temp);\n  }\n  return buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "_calloc_r",
                "flush_strbuf"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_char_08005d68"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "InitializeTimer_080035a4",
                "*htim": "*timer",
                "HVar1": "status",
                "htim": "timer",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_Base_MspInit": "HAL_TIM_Base_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef InitializeTimer_080035a4(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance, &timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "InitializeTimer_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "setChannelState_080041ea",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "tmp": "bitMask"
            },
            "code": "void setChannelState_080041ea(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n  uint32_t bitMask = ~(1 << (channel & 0xff));\n  timer->CCER &= bitMask;\n  timer->CCER |= state << (channel & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "setChannelState_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "read_mpu_data_08004ae0",
                "mpu6050": "mpu",
                "raw": "raw_data",
                "fVar1": "acc_temp_gyro",
                "gz": "gyro_z",
                "gy": "gyro_y",
                "gx": "gyro_x",
                "t": "temperature",
                "az": "acc_z",
                "ay": "acc_y",
                "ax": "acc_x"
            },
            "code": "void read_mpu_data_08004ae0(Mpu6050 *mpu6050)\n{\n  float acc_x, acc_y, acc_z, temp, gyro_x, gyro_y, gyro_z;\n  uint8_t raw_data[14];\n  int16_t gz, gy, gx, t, az, ay, ax;\n  (**(code **)PTR_I2C_Read_Reg_08004bd4)(0xd0,0x3b,raw_data,0xe);\n  acc_x = (float)__floatsisf((int)CONCAT11(raw_data[0],raw_data[1]));\n  mpu6050->accX = acc_x;\n  acc_y = (float)__floatsisf((int)CONCAT11(raw_data[2],raw_data[3]));\n  mpu6050->accY = acc_y;\n  acc_z = (float)__floatsisf((int)CONCAT11(raw_data[4],raw_data[5]));\n  mpu6050->accZ = acc_z;\n  temp = (float)__floatsisf((int)CONCAT11(raw_data[6],raw_data[7]));\n  mpu6050->temp = temp;\n  gyro_x = (float)__floatsisf((int)CONCAT11(raw_data[8],raw_data[9]));\n  mpu6050->gyroX = gyro_x;\n  gyro_y = (float)__floatsisf((int)CONCAT11(raw_data[10],raw_data[11]));\n  mpu6050->gyroY = gyro_y;\n  gyro_z = (float)__floatsisf((int)CONCAT11(raw_data[12],raw_data[13]));\n  mpu6050->gyroZ = gyro_z;\n  return;\n}\n",
            "called": [
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "read_mpu_data_08004ae0"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_data_value_080015fc",
                "DAT_08001614": "data_ptr"
            },
            "code": "uint32_t get_data_value_080015fc(void)\n{\n    uint32_t data_value = *(uint32_t *)(DAT_08001614 + 0xC) >> 8 & 7;\n    return data_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "get_data_value_080015fc"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "isInitializationCompleted_08000110",
                "param_1": "initializationPointer",
                "PTR_completed_8655_08000128": "completionFlag",
                "DAT_0800012c": "initializationValue",
                "PTR__init_08000130": "initializationPointer"
            },
            "code": "bool isInitializationCompleted_08000110(bool* PTR_completed_8655_08000128, int* DAT_0800012c, void* PTR__init_08000130) {\n  if (*PTR_completed_8655_08000128 == false) {\n    if (*DAT_0800012c != 0) {\n      PTR__init_08000130 = PTR__init_08000130;\n    }\n    *PTR_completed_8655_08000128 = true;\n  }\n  return PTR__init_08000130;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "isInitializationCompleted_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_SystemCoreClock_value_08003504",
                "PTR_SystemCoreClock_08003514": "system_core_clock_ptr"
            },
            "code": "uint32_t get_SystemCoreClock_value_08003504(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_SystemCoreClock_value_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08000c2c": {
            "renaming": {
                "FUN_08000c2c": "calculate_hash_08000c2c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "constant",
                "uVar6": "shifted_value1"
            },
            "code": "uint calculate_hash_08000c2c(uint input1, uint input2)\n{\n    uint hash = 0;\n    if ((input1 | input2) == 0) {\n        return input1;\n    }\n    uint value1 = input1;\n    uint value2 = input2;\n    if (input2 == 0) {\n        value1 = 0;\n        value2 = input1;\n    }\n    int constant = 0x5b000000;\n    if (input2 == 0) {\n        constant = 0x4b000000;\n    }\n    int leading_zeroes = count_leading_zeroes(value2);\n    int shift_amount = leading_zeroes - 8;\n    constant = constant + (-0x800000 + shift_amount * -0x800000);\n    if (leading_zeroes < 8) {\n        uint shifted_value2 = value2 << (leading_zeroes + 0x18U & 0xff);\n        value2 = constant + ((value2 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_value2 >> 0x1f));\n        if ((value1 | shifted_value2 << 1) == 0) {\n            value2 = value2 & ~(shifted_value2 >> 0x1f);\n        }\n        hash = value2;\n    }\n    else {\n        uint shifted_value1 = value1 << (shift_amount & 0xff);\n        uint shifted_value2 = value2 << (shift_amount & 0xff);\n        hash = constant + (shifted_value2 + (value1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_value1));\n        if (shifted_value1 == 0x80000000) {\n            hash = hash & 0xfffffffe;\n        }\n    }\n    return hash;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c2c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c2c"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback",
                "__aeabi_frsub"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "isNullTerminatedString_080009ac",
                "in_CY": "str"
            },
            "code": "bool isNullTerminatedString_080009ac(char* str) { return *str == '\\0'; }",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "isNullTerminatedString_080009ac"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "huart": "uart_handle",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_UART_STATE_RESET": "HAL_UART_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "HAL_UART_STATE_BUSY": "HAL_UART_STATE_BUSY",
                "UART_SetConfig": "UART_SetConfig",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_OK": "HAL_OK",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "ErrorCode": "error_code",
                "gState": "global_state",
                "RxState": "receive_state"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800438a(UART_HandleTypeDef *huart)\n{\n  HAL_StatusTypeDef status;\n  if (huart == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (huart->gState == HAL_UART_STATE_RESET) {\n      huart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(huart);\n    }\n    huart->gState = HAL_UART_STATE_BUSY;\n    huart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(huart);\n    huart->Instance->CR2 &= ~(1 << 11);\n    huart->Instance->CR3 &= ~(1 << 2);\n    huart->Instance->CR1 |= (1 << 13);\n    huart->ErrorCode = 0;\n    huart->gState = HAL_UART_STATE_READY;\n    huart->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_tick_080014f0",
                "DAT_08001518": "flag_ptr",
                "FUN_080014f0Tick": "call_tick_function"
            },
            "code": "HAL_StatusTypeDef set_flag_and_call_tick_080014f0(void)\n{\n  *DAT_08001518 = *DAT_08001518 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  call_tick_function(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_tick_080014f0"
        },
        "FUN_0800046c": {
            "renaming": {
                "FUN_0800046c": "multiply_unsigned_numbers_0800046c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "bVar1": "carry",
                "uVar2": "multiplicand_double",
                "uVar3": "multiplier_shifted",
                "uVar4": "multiplier_abs",
                "iVar5": "leading_zeroes",
                "uVar6": "shift_count",
                "iVar7": "shift_amount",
                "uVar8": "multiplicand_sign_bit",
                "uVar9": "multiplicand_abs",
                "bVar10": "high_bit_set",
                "bVar11": "low_bit_set",
                "bVar12": "high_shift_carry",
                "add_one": "add_one"
            },
            "code": "ulonglong multiply_unsigned_numbers_0800046c(uint multiplicand,uint multiplier)\n{\n  byte carry;\n  uint multiplicand_shifted;\n  uint multiplier_shifted;\n  int shift_count;\n  uint result_high = 0;\n  uint result_low = 0;\n  bool high_bit_set;\n  bool low_bit_set;\n  \n  if ((multiplicand | multiplier) == 0) {\n    return CONCAT44(multiplier,multiplicand);\n  }\n  \n  uint multiplicand_sign_bit = multiplicand & 0x80000000;\n  uint multiplicand_abs = multiplicand;\n  if ((int)multiplicand_sign_bit < 0) {\n    bool add_one = (multiplier != 0);\n    multiplicand_abs = -multiplicand;\n    multiplier_shifted = -multiplier - (uint)add_one;\n  }\n  \n  int shift_amount = 0x432;\n  uint multiplier_abs = multiplier_shifted >> 0x16;\n  if (multiplier_abs != 0) {\n    shift_amount = 3;\n    if (multiplier_shifted >> 0x19 != 0) {\n      shift_amount = 6;\n    }\n    if (multiplier_shifted >> 0x1c != 0) {\n      shift_amount += 3;\n    }\n    shift_count = shift_amount - ((int)multiplier_shifted >> 0x1f);\n    multiplicand_shifted = multiplicand_abs << (0x20 - shift_count & 0xff);\n    multiplicand_abs = multiplicand_abs >> (shift_count & 0xff) | multiplier_shifted << (0x20 - shift_count & 0xff);\n    multiplier_shifted = multiplier_shifted >> (shift_count & 0xff);\n    shift_amount += 0x432;\n  }\n  \n  if (0xfffff < multiplier_shifted) {\n    if (0x1fffff < multiplier_shifted) {\n      uint carry_bit = multiplier_shifted & 1;\n      multiplier_shifted = multiplier_shifted >> 1;\n      byte low_byte = (byte)multiplicand_abs;\n      multiplicand_abs = (uint)(carry_bit != 0) << 0x1f | multiplicand_abs >> 1;\n      result_high = (uint)(low_byte & 1) << 0x1f | result_high >> 1;\n      shift_amount++;\n      if (0xffbfffff < (uint)(shift_amount * 0x200000)) {\n        return (ulonglong)(multiplicand_sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\n    \n    low_bit_set = 0x7fffffff < result_high;\n    if (result_high == 0x80000000) {\n      low_bit_set = (multiplicand_abs & 1) != 0;\n    }\n    return CONCAT44(multiplier_shifted + shift_amount * 0x100000 + (uint)CARRY4(multiplicand_abs,(uint)low_bit_set) | multiplicand_sign_bit,\n                    multiplicand_abs + low_bit_set);\n  }\n  \n  high_bit_set = (multiplier_abs & 0x80000000) != 0;\n  multiplier_abs = multiplier_abs << 1;\n  uint multiplicand_double = multiplicand_abs * 2;\n  carry = CARRY4(multiplicand_abs,multiplicand_abs);\n  multiplicand_abs = multiplicand_double + (uint)high_bit_set;\n  multiplier_shifted = multiplier_shifted * 2 + (uint)(carry || CARRY4(multiplicand_double,(uint)high_bit_set));\n  shift_amount--;\n  if ((multiplier_shifted & 0x100000) != 0) {\n    goto LAB_08000268;\n  }\n  \n  uint result_low_temp = multiplicand_abs;\n  uint result_high_temp = multiplier_shifted;\n  if (multiplier_shifted == 0) {\n    result_low_temp = 0;\n    result_high_temp = multiplicand_abs;\n  }\n  \n  int leading_zeroes = count_leading_zeroes(result_high_temp);\n  if (multiplier_shifted == 0) {\n    leading_zeroes += 0x20;\n  }\n  \n  int high_shift_amount = leading_zeroes - 0xb;\n  bool high_shift_carry = SBORROW4(high_shift_amount,0x20);\n  int low_shift_amount = leading_zeroes - 0x2b;\n  bool low_shift_carry = (int)low_shift_amount < 0;\n  bool low_shift_zero = low_shift_amount == 0;\n  if ((int)high_shift_amount < 0x20) {\n    high_shift_carry = SCARRY4(low_shift_amount,0xc);\n    leading_zeroes--; // decrement leading_zeroes since we didn't shift by 1 bit\n    low_shift_carry = leading_zeroes < 0;\n    low_shift_zero = leading_zeroes == 0;\n    shift_count = high_shift_amount;\n    if (!low_shift_zero && low_shift_carry == high_shift_carry) {\n      result_low_temp = result_high_temp << (high_shift_amount & 0xff);\n      result_high_temp = result_high_temp >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  \n  if (low_shift_zero || low_shift_carry != high_shift_carry) {\n    shift_count = 0x20 - high_shift_amount;\n  }\n  result_high_temp = result_high_temp << (high_shift_amount & 0xff);\n  if (low_shift_zero || low_shift_carry != high_shift_carry) {\n    result_high_temp |= result_low_temp >> (shift_count & 0xff);\n  }\n  if (low_shift_zero || low_shift_carry != high_shift_carry) {\n    result_low_temp = result_low_temp << (high_shift_amount & 0xff);\n  }\n  \n  if ((int)high_shift_amount <= shift_amount) {\n    return CONCAT44(result_high_temp + (shift_amount - high_shift_amount) * 0x100000 | multiplicand_sign_bit,result_low_temp);\n  }\n  \n  uint shift_difference = ~(shift_amount - high_shift_amount);\n  if (0x1e < (int)shift_difference) {\n    return CONCAT44(multiplier,multiplicand_shifted >> (shift_difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  \n  int low_shift_amount_temp = shift_difference - 0x13;\n  if (low_shift_amount_temp == 0 || low_shift_amount_temp < 0 != SCARRY4(shift_difference - 0x1f,0xc)) {\n    shift_difference++;\n    return CONCAT44(multiplicand_sign_bit | multiplicand_shifted >> (shift_difference & 0xff),\n                    result_low_temp >> (shift_difference & 0xff) | result_high_temp << (0x20 - shift_difference & 0xff));\n  }\n  \n  return CONCAT44(multiplier,result_high_temp >> (0x20 - (0xcU - low_shift_amount_temp) & 0xff) | result_low_temp << (0xcU - low_shift_amount_temp & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800046c",
            "calling": [],
            "imported": false,
            "current_name": "multiply_unsigned_numbers_0800046c"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "is_not_equal_to_zero_080009c0",
                "in_ZR": "is_zero",
                "in_CY": "is_not_equal"
            },
            "code": "bool is_not_equal_to_zero_080009c0(void)\n{\n  undefined is_zero;\n  undefined is_not_equal;\n  __aeabi_cdcmpeq();\n  return (bool)is_not_equal || !(bool)is_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_zero_080009c0"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "configure_timer_08003f18",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "output_compare_mode",
                "uVar2": "ccer_value",
                "tmpccmrx": "ccmr_value",
                "tmpcr2": "cr2_value",
                "tmpccer": "ccer_mask",
                "DAT_08003ff4": "PTR_08003ff4",
                "OCNPolarity": "output_compare_n_polarity",
                "OCPolarity": "output_compare_polarity",
                "OCNIdleState": "output_compare_n_idle_state",
                "OCIdleState": "output_compare_idle_state",
                "Pulse": "output_compare_pulse"
            },
            "code": "void configure_timer_08003f18(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_channel_config) {\n    uint32_t ccmr_mask = 0xffffff8c;\n    uint32_t ccer_mask = 0xfffffdff;\n    uint32_t cr2_mask = 0xffffcfff;\n    uint32_t ccer_value = timer->CCER & ccer_mask;\n    uint32_t cr2_value = timer->CR2;\n    uint32_t ccmr_value = timer->CCMR2 & ccmr_mask;\n    uint8_t polarity_shift = 8;\n    ccer_value &= 0xfffffeff;\n    ccer_value |= output_channel_config->OCPolarity << polarity_shift;\n    if (timer == DAT_08003ff4) {\n        uint8_t n_polarity_shift = 10;\n        uint32_t n_polarity_mask = 0xfffffbff;\n        uint32_t idle_state_mask = 0xffffcfff;\n        ccer_value &= 0xfffff7ff;\n        ccer_value |= output_channel_config->OCNPolarity << n_polarity_shift;\n        cr2_value &= idle_state_mask;\n        cr2_value |= output_channel_config->OCNIdleState << 4;\n        cr2_value |= output_channel_config->OCIdleState << 4;\n        cr2_value &= cr2_mask;\n    }\n    ccmr_value |= output_channel_config->OCMode;\n    timer->CCMR2 = ccmr_value;\n    timer->CCR3 = output_channel_config->Pulse;\n    timer->CCER = ccer_value;\n    timer->CR2 = cr2_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "error_code",
                "param_2": "data",
                "param_3": "length",
                "pvVar1": "data_start_ptr",
                "pvVar2": "bytes_to_copy",
                "iVar3": "remaining_length",
                "pvVar4": "realloc_ptr",
                "pvVar5": "dest_ptr",
                "ppvVar6": "data_ptr_ptr",
                "ppvVar7": "data_limit_ptr_ptr",
                "__src": "src_ptr",
                "__n": "bytes_copied",
                "*(ushort *)(param_2 + 3)": "flags",
                "_malloc_r": "malloc",
                "_realloc_r": "realloc",
                "_free_r": "free"
            },
            "code": "uint32_t process_data_080097cc(uint32_t *error_code, void **data, int *length)\n{\n  void *src_ptr;\n  void *dest_ptr;\n  int remaining_length;\n  void *realloc_ptr;\n  void *data_start_ptr;\n  void *data_end_ptr;\n  void **data_ptr_ptr;\n  void **data_limit_ptr_ptr;\n  size_t bytes_to_copy;\n  \n  if (length[2] != 0) {\n    data_start_ptr = *data;\n    data_end_ptr = data[2];\n    data_limit_ptr_ptr = (void **)*length;\n    do {\n      do {\n        data_ptr_ptr = data_limit_ptr_ptr + 2;\n        src_ptr = *data_limit_ptr_ptr;\n        dest_ptr = data_limit_ptr_ptr[1];\n        data_limit_ptr_ptr = data_ptr_ptr;\n      } while (dest_ptr == NULL);\n      bytes_to_copy = (size_t)dest_ptr;\n      if ((data_end_ptr <= dest_ptr) && (bytes_to_copy = data_end_ptr, (*(ushort *)(data + 3) & 0x480) != 0)) {\n        remaining_length = (int)data[1] - (int)data[4];\n        realloc_ptr = (void *)((int)data[5] * 3 / 2);\n        data_start_ptr = (void *)((int)dest_ptr + remaining_length + 1);\n        if (realloc_ptr < data_start_ptr) {\n          realloc_ptr = data_start_ptr;\n        }\n        if ((int)((uint)*(ushort *)(data + 3) << 0x15) < 0) {\n          dest_ptr = (void *)malloc(realloc_ptr);\n          if (dest_ptr == NULL) {\n            *error_code = 0xc;\n            *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n            length[1] = 0;\n            length[2] = 0;\n            return 0xffffffff;\n          }\n          memcpy(dest_ptr,data[4],remaining_length);\n          *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          dest_ptr = (void *)realloc(data[4], realloc_ptr);\n          if (dest_ptr == NULL) {\n            free(data[4]);\n            *error_code = 0xc;\n            *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n            length[1] = 0;\n            length[2] = 0;\n            return 0xffffffff;\n          }\n        }\n        data_start_ptr = (void *)((int)dest_ptr + remaining_length);\n        data[5] = realloc_ptr;\n        data[4] = dest_ptr;\n        *data = data_start_ptr;\n        data[2] = (void *)((int)realloc_ptr - remaining_length);\n        dest_ptr = (void *)bytes_to_copy;\n      }\n      memmove(data_start_ptr, src_ptr, bytes_to_copy);\n      remaining_length = length[2];\n      data_end_ptr = (void *)((int)data[2] - (int)bytes_to_copy);\n      data_start_ptr = (void *)((int)*data + (int)bytes_to_copy);\n      data[2] = data_end_ptr;\n      *data = data_start_ptr;\n      length[2] = remaining_length - (int)dest_ptr;\n    } while (remaining_length - (int)dest_ptr != 0);\n  }\n  length[1] = 0;\n  return 0;\n}",
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001f6c(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t Tickstart;\n  uint32_t uVar3;\n  char cVar4;\n  uint uVar5;\n  int iVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  \n  Tickstart = HAL_GetTick();\n  uVar1 = DAT_080021e0;\n  if (hi2c->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      else {\n        uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      if (cVar4 != '\\x01') {\n        iVar6 = 0;\n        goto LAB_08002040;\n      }\n      uVar3 = HAL_GetTick();\n    } while (uVar3 - Tickstart < 0x1a);\n    hi2c->PreviousState = 0;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->Mode = HAL_I2C_MODE_NONE;\n    hi2c->Lock = HAL_UNLOCKED;\n    iVar6 = 3;\nLAB_08002040:\n    if (iVar6 == 0) {\n      if (hi2c->Lock == HAL_LOCKED) {\n        HVar2 = HAL_BUSY;\n      }\n      else {\n        hi2c->Lock = HAL_LOCKED;\n        if ((hi2c->Instance->CR1 & 1) != 1) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 1;\n        }\n        hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffff7ff;\n        hi2c->State = HAL_I2C_STATE_BUSY_RX;\n        hi2c->Mode = HAL_I2C_MODE_MEM;\n        hi2c->ErrorCode = 0;\n        hi2c->pBuffPtr = pData;\n        hi2c->XferCount = Size;\n        hi2c->XferOptions = DAT_080021e4;\n        hi2c->XferSize = hi2c->XferCount;\n        HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout,Tickstart);\n        if (HVar2 == HAL_OK) {\n          if (hi2c->XferSize == 0) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n          }\n          else if (hi2c->XferSize == 1) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (hi2c->XferSize == 2) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x400;\n          }\n          while (uVar1 = DAT_080024bc, hi2c->XferSize != 0) {\n            if (hi2c->XferSize < 4) {\n              if (hi2c->XferSize == 1) {\n                HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n                if (HVar2 != HAL_OK) {\n                  if (hi2c->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else if (hi2c->XferSize == 2) {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_080022fa:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_08002418:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                uVar1 = DAT_080024bc;\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_0800250a:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n            else {\n              HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n              if (HVar2 != HAL_OK) {\n                if (hi2c->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              uVar3 = hi2c->Instance->DR;\n              puVar7 = hi2c->pBuffPtr;\n              hi2c->pBuffPtr = puVar7 + 1;\n              *puVar7 = (uint8_t)uVar3;\n              hi2c->XferSize = hi2c->XferSize - 1;\n              hi2c->XferCount = hi2c->XferCount - 1;\n              if ((hi2c->Instance->SR1 & 4) == 4) {\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n          }\n          hi2c->State = HAL_I2C_STATE_READY;\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_OK;\n        }\n        else if (hi2c->ErrorCode == 4) {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_ERROR;\n        }\n        else {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      HVar2 = HAL_BUSY;\n    }\n  }\n  else {\n    HVar2 = HAL_BUSY;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "_i2c_read_reg"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "do_nothing_080014ec"
            },
            "code": "\nvoid do_nothing_080014ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080014ec"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_twos_complement_08000c3c",
                "param_1": "a",
                "param_2": "b",
                "uVar1": "result",
                "uVar2": "a_shifted",
                "iVar3": "leading_zeroes_b",
                "uVar4": "shift",
                "iVar6": "offset",
                "uVar5": "mask",
                "bVar8": "is_negative_b"
            },
            "code": "uint calculate_twos_complement_08000c3c(uint a, uint b)\n{\n    uint result = 0;\n    if ((a | b) == 0) {\n        return a;\n    }\n    bool is_negative_b = false;\n    if ((int)(b & 0x80000000) < 0) {\n        is_negative_b = a != 0;\n        a = -a;\n        b = -b - (uint)is_negative_b;\n    }\n    uint a_shifted = a;\n    uint b_shifted = b;\n    if (b == 0) {\n        a_shifted = 0;\n        b_shifted = a;\n    }\n    uint mask = is_negative_b ? 0x5b000000 + (b == 0 ? 0xf0000000 : 0) : 0;\n    int leading_zeroes_b = count_leading_zeroes(b_shifted);\n    uint shift = leading_zeroes_b - 8;\n    int offset = (mask - 0x800000) + shift * -0x800000;\n    if (leading_zeroes_b < 8) {\n        uint a_shifted_masked = b_shifted << (leading_zeroes_b + 0x18U & 0xff);\n        uint a_shifted_masked_shifted = a_shifted >> (0x20 - (leading_zeroes_b + 0x18U) & 0xff);\n        uint shifted_result = a_shifted_masked_shifted - ((int)a_shifted_masked >> 0x1f);\n        if ((a_shifted | a_shifted_masked << 1) == 0) {\n            shifted_result &= ~(a_shifted_masked >> 0x1f);\n        }\n        result = shifted_result + offset;\n    }\n    else {\n        uint a_shifted_masked = a_shifted << (shift & 0xff);\n        uint b_shifted_masked = b_shifted << (shift & 0xff);\n        uint a_shifted_shifted = a_shifted >> (0x20 - shift & 0xff);\n        uint carry = (0x7fffffff < a_shifted_masked);\n        uint shifted_result = b_shifted_masked + a_shifted_masked + a_shifted_shifted + carry;\n        if (a_shifted_masked == 0x80000000) {\n            shifted_result &= 0xfffffffe;\n        }\n        result = shifted_result + offset;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_twos_complement_08000c3c"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_HCLK_frequency_divided_by_APB_prescaler_08003518",
                "uVar1": "HCLK_frequency",
                "APB_prescaler_index": "APB_prescaler_index",
                "DAT_08003538": "DAT_08003538",
                "PTR_APBPrescTable_0800353c": "PTR_APBPrescTable_0800353c",
                "APB_prescaler_value": "APB_prescaler_value",
                "uVar2": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003518(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_0800353c[APB_prescaler_index];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_value;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}\n",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003518"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_other_bits_08005780",
                "DAT_080057dc": "data_ptr",
                "DAT_080057e0": "mask",
                "DAT_080057e4": "mask5_ptr"
            },
            "code": "void set_bit_and_clear_other_bits_08005780(void)\n{\n  unsigned int* DAT_080057dc = DAT_080057dc;\n  unsigned int DAT_080057e01 = 0x00010000;\n  unsigned int DAT_080057e02 = 0x00040000;\n  unsigned int DAT_080057e03 = 0xFF80FFFF;\n  unsigned int DAT_080057e04 = 0x9F0000;\n  unsigned int DAT_080057e05 = 0x00800000;\n  *DAT_080057dc = *DAT_080057dc | DAT_080057e01;\n  DAT_080057dc[1] = DAT_080057e0 & DAT_080057dc[1];\n  *DAT_080057dc = *DAT_080057dc & ~DAT_080057e02;\n  *DAT_080057dc = *DAT_080057dc & ~DAT_080057e01;\n  DAT_080057dc[1] = DAT_080057dc[1] & DAT_080057e03;\n  DAT_080057dc[2] = DAT_080057e04;\n  *(unsigned int*)(DAT_080057e4 + 8) = DAT_080057e05;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_08005780"
        },
        "FUN_08000fe0": {
            "renaming": {
                "FUN_08000fe0": "is_not_null_08000fe0",
                "in_ZR": "character"
            },
            "code": "bool is_not_null_08000fe0(char character){\n  __aeabi_cfcmpeq();\n  return character != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fe0",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_08000fe0"
        },
        "FUN_08008818": {
            "renaming": {
                "FUN_08008818": "execute_global_destructors_08008818",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void execute_global_destructors_08008818(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_08008844 -\n          (int)PTR___do_global_dtors_aux_fini_array_entry_08008848 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_08008848 +\n                       (num_destructors + 0x3fffffff) * 4);\n    do {\n      num_destructors = num_destructors + -1;\n      (**destructor)();\n      destructor = destructor + -1;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "__do_global_dtors_aux",
                "_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008818",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_08008818"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "convert_uint_to_hex_08000418",
                "param_1": "input",
                "param_2": "padding",
                "param_3": "mask",
                "param_4": "flag",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input_copy",
                "uVar3": "hex_value",
                "uVar4": "padding_bits",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount",
                "iVar6": "leading_zeroes",
                "bVar8": "is_shift_amount_copy_diff_zero",
                "bVar9": "is_shift_amount_copy_diff_negative",
                "bVar10": "is_shift_amount_negative",
                "in_r12": "shift_amount_copy",
                "is_shifted_input_zero": "is_shifted_input_zero",
                "is_padding_zero": "is_padding_zero",
                "padding_bits_copy": "padding_bits_copy",
                "shift_amount_copy_diff": "shift_amount_copy_diff",
                "shifted_input_copy": "shifted_input_copy"
            },
            "code": "uint64_t convert_uint_to_hex_08000418(uint32_t input, uint32_t padding, uint32_t mask, uint32_t flag)\n{\n    uint32_t shifted_input = input << 1;\n    bool is_shifted_input_zero = shifted_input == 0;\n    uint32_t sign_bit = ((input & 0x80000000) != 0) << 31;\n    uint32_t padding_bits = ((int)shifted_input >> 3) >> 1;\n    uint32_t hex_value = sign_bit | padding_bits;\n    input = input << 29;\n    if (!is_shifted_input_zero)\n    {\n        bool is_padding_zero = (shifted_input & 0xff000000) == 0;\n        if (!is_padding_zero)\n        {\n            if ((shifted_input & 0xff000000) != 0xff000000)\n            {\n                return ((uint64_t)hex_value << 32) | input ^ 0x3800000000000000;\n            }\n            else\n            {\n                return ((uint64_t)hex_value << 32) | input | 0x8000000000000;\n            }\n        }\n    }\n    if ((shifted_input & 0xffffff) == 0)\n    {\n        return ((uint64_t)hex_value << 32) | input;\n    }\n    if ((shifted_input & 0xff000000) == 0xff000000)\n    {\n        return ((uint64_t)hex_value << 32) | input | 0x8000000000000;\n    }\n    uint32_t padding_bits_copy = padding_bits;\n    uint32_t shifted_input_copy = input;\n    if (padding_bits_copy == 0)\n    {\n        padding_bits_copy = 0;\n        shifted_input_copy = input;\n    }\n    int leading_zeroes = count_leading_zeroes(padding_bits_copy);\n    if (padding_bits_copy == 0)\n    {\n        leading_zeroes += 32;\n    }\n    uint32_t shift_amount = leading_zeroes - 11;\n    bool is_shift_amount_negative = shift_amount < 0;\n    if (leading_zeroes < 32)\n    {\n        if (is_shift_amount_negative)\n        {\n            shift_amount = leading_zeroes + 0x20 - 0xb;\n        }\n        padding_bits_copy = padding_bits_copy << (shift_amount & 0xff);\n        shifted_input_copy = padding_bits_copy >> (0xcU - leading_zeroes & 0xff) | shifted_input_copy << (leading_zeroes & 0xff);\n    }\n    else\n    {\n        uint32_t shift_amount_copy = ~(0x20 - leading_zeroes);\n        if (0x1e < shift_amount_copy)\n        {\n            return ((uint64_t)hex_value << 32) | (padding_bits_copy >> (shift_amount_copy - 0x1f & 0xff)) & 0x80000000ffffffff;\n        }\n        int shift_amount_copy_diff = shift_amount_copy - 0x13;\n        bool is_shift_amount_copy_diff_zero = shift_amount_copy_diff == 0;\n        bool is_shift_amount_copy_diff_negative = shift_amount_copy_diff < 0;\n        if (is_shift_amount_copy_diff_zero || (is_shift_amount_copy_diff_negative != ((shift_amount_copy - 0x1f) < 0xc)))\n        {\n            shift_amount_copy = shift_amount_copy + 1;\n            return ((uint64_t)sign_bit | padding_bits_copy >> (shift_amount_copy & 0xff) | shifted_input_copy << (0x20 - shift_amount_copy & 0xff));\n        }\n        else\n        {\n            return ((uint64_t)hex_value << 32) | shifted_input_copy >> (0x20 - (0xcU - shift_amount_copy_diff) & 0xff) | padding_bits_copy << (0xcU - shift_amount_copy_diff & 0xff)) & 0x80000000ffffffff;\n        }\n    }\n    return ((uint64_t)hex_value << 32) | shifted_input_copy;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "convert_uint_to_hex_08000418"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "initialize_gpio_pins_080055f4",
                "GPIO_InitStruct": "gpio_init_struct",
                "tmpreg_1": "pin_mask_1",
                "tmpreg_2": "pin_mask_2",
                "tmpreg": "pin_mask_3",
                "DAT_0800566c": "ptr_gpio_register",
                "DAT_08005670": "ptr_gpio_port"
            },
            "code": "void initialize_gpio_pins_080055f4(void)\n{\n  uint32_t pin_mask_1;\n  uint32_t pin_mask_2;\n  uint32_t pin_mask_3;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  pin_mask_1 = *(uint *)(DAT_0800566c + 0x18) | 0x20;\n  pin_mask_2 = pin_mask_1 | 4;\n  pin_mask_3 = pin_mask_2 | 8;\n  *(uint *)(DAT_0800566c + 0x18) = pin_mask_3;\n  \n  HAL_GPIO_WritePin(DAT_08005670,0x1e,GPIO_PIN_RESET);\n  \n  gpio_init_struct.Pin = 0x1e;\n  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;\n  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  HAL_GPIO_Init(DAT_08005670, &gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pins_080055f4"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_PWM_timer_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "sConfigOC": "output_compare_config",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config"
            },
            "code": "void initialize_PWM_timer_080053b0(TIM_HandleTypeDef *timer_handle)\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef break_dead_time_config;\n  TIM_OC_InitTypeDef output_compare_config;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n  timer_handle->Instance->ARR = 100;\n  timer_handle->Instance->PSC = 0x708;\n  timer_handle->Instance->CR1 = 0;\n  timer_handle->Instance->CR2 = 0;\n  timer_handle->Instance->SMCR = 0;\n  timer_handle->Instance->DIER = 0;\n  timer_handle->Instance->CCER = 0;\n  status = HAL_TIM_Base_Init(timer_handle);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(timer_handle, &clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_Init(timer_handle);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(timer_handle, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  output_compare_config.OCMode = TIM_OCMODE_PWM1;\n  output_compare_config.Pulse = 0;\n  output_compare_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  output_compare_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n  output_compare_config.OCFastMode = TIM_OCFAST_DISABLE;\n  output_compare_config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  output_compare_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  status = HAL_TIM_PWM_ConfigChannel(timer_handle, &output_compare_config, TIM_CHANNEL_1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_ConfigChannel(timer_handle, &output_compare_config, TIM_CHANNEL_2);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  break_dead_time_config.OffStateRunMode = TIM_OSSR_DISABLE;\n  break_dead_time_config.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  break_dead_time_config.LockLevel = TIM_LOCKLEVEL_OFF;\n  break_dead_time_config.DeadTime = 0;\n  break_dead_time_config.BreakState = TIM_BREAK_DISABLE;\n  break_dead_time_config.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  break_dead_time_config.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  status = HAL_TIMEx_ConfigBreakDeadTime(timer_handle, &break_dead_time_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  HAL_TIM_MspPostInit(timer_handle);\n}",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_MspPostInit",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_PWM_timer_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "calculate_priority_080016d0",
                "ticks": "ticks",
                "bVar1": "is_valid_tick",
                "DAT_08001710": "PTR_DAT_08001710"
            },
            "code": "uint32_t calculate_priority_080016d0(uint32_t ticks)\n{\n  bool is_valid_tick = ticks - 1 < 0x1000000;\n  if (is_valid_tick) {\n    DAT_08001710[1] = ticks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return (uint)!is_valid_tick;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "calculate_priority_080016d0"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "is_input3_mismatched"
            },
            "code": "ulonglong calculate_result_0800088a(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool is_input4_mismatched = input4 >> 0x14 != input1 & input4 >> 0x14;\n  bool is_input2_mismatched = input2 != input1 & input4 >> 0x14;\n  bool is_input3_mismatched = input3 != input1 & input2 << 1;\n  \n  if (is_input4_mismatched || is_input2_mismatched)\n  {\n    if (is_input4_mismatched)\n    {\n      if ((input1 | input2 << 0xc) == 0)\n      {\n        return (ulonglong)((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n      }\n      temp1 = input3;\n      temp2 = input4;\n    }\n    else if (is_input2_mismatched)\n    {\n      if ((input3 | input4 << 0xc) == 0)\n      {\n        return (ulonglong)((input2 ^ input4) & mask) << 0x20;\n      }\n      temp1 = input3;\n      temp2 = input4;\n    }\n    else\n    {\n      if ((input1 | input2 << 1) != 0 && (input3 | input4 << 1) != 0)\n      {\n        temp1 = input1;\n        temp2 = input2;\n        temp3 = input3;\n        temp4 = input4;\n        if (input1 == 0)\n        {\n          temp2 &= mask;\n          do\n          {\n            temp1 <<= 1;\n            temp2 = temp2 * 2 + (uint)(temp1 & mask);\n          } while ((temp2 & 0x100000) == 0);\n          temp2 |= mask & input4 >> 0x14;\n          if (input4 >> 0x14 != 0)\n          {\n            return CONCAT44(temp2, temp1);\n          }\n        }\n        do\n        {\n          temp3 <<= 1;\n          temp4 = temp4 * 2 + (uint)(temp3 & mask);\n        } while ((temp4 & 0x100000) == 0);\n        return CONCAT44(temp2, temp1);\n      }\n      if ((input1 | input2 << 1) != 0)\n      {\n        return (ulonglong)((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n      }\n      if ((input3 | input4 << 1) != 0)\n      {\n        return (ulonglong)((input2 ^ input4) & mask) << 0x20;\n      }\n      temp1 = input3;\n      temp2 = input4;\n    }\n  }\n  else\n  {\n    temp1 = input1;\n    temp2 = input2;\n  }\n  return CONCAT44(temp2, temp1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_0800088a"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "getImpurePtrValue_08005d14",
                "PTR__impure_ptr_08005d1c": "impurePtr"
            },
            "code": "int getImpurePtrValue_08005d14(void)\n{\n    int* PTR__impure_ptr_08005d1c = (int*) PTR__impure_ptr_08005d1c;\n    return *PTR__impure_ptr_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "_sbrk"
            ],
            "imported": false,
            "current_name": "getImpurePtrValue_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priority_group",
                "reg_value": "register_value",
                "PriorityGroupTmp": "priority_group_tmp",
                "DAT_080015f8": "register_address",
                "mask": "priority_mask",
                "priority_bits": "priority_bits",
                "priority_group_constant": "priority_group_constant",
                "*register_ptr": "register_value"
            },
            "code": "void set_priority_group_080015b4(uint32_t priority_group) {\n\tuint32_t reg_value;\n\tuint32_t priority_group_tmp;\n\tuint32_t *register_ptr = (uint32_t *)(DAT_080015f8 + 0xc);\n\tuint32_t mask = 0xf8ff;\n\tuint32_t priority_bits = (priority_group & 7) << 8;\n\tuint32_t priority_group_constant = 0x5fa0000;\n\t*register_ptr = (*register_ptr & mask) | priority_bits | priority_group_constant;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_080015b4"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_external_trigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "prescaler",
                "TIM_ExtTRGPolarity": "polarity",
                "ExtTRGFilter": "filter",
                "tmpsmcr": "smcr_register_value"
            },
            "code": "void set_external_trigger_080041a8(TIM_TypeDef *timer, uint32_t prescaler, uint32_t polarity, uint32_t filter) {\n  uint32_t smcr_register_value = timer->SMCR;\n  uint32_t ext_trigger_bits = (prescaler | (filter << 8) | polarity);\n  smcr_register_value &= 0xffff00ff;\n  smcr_register_value |= ext_trigger_bits;\n  timer->SMCR = smcr_register_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_external_trigger_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "frexp",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08000a9c": {
            "renaming": {
                "FUN_08000a9c": "FUNC_08000a9c"
            },
            "code": "\nuint FUNC_08000a9c(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000bde:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000a9c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000a9c"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_default_locale_08008ad4",
                "puVar1": "locale_ptr",
                "PTR__impure_ptr_08008ae8": "impure_ptr",
                "PTR___global_locale_08008aec": "global_locale"
            },
            "code": "undefined* get_default_locale_08008ad4()\n{\n    undefined* locale_ptr = *(undefined**)(*(int*)PTR__PTR__impure_ptr_08008ae8_08008ae8 + 0x34);\n    if(locale_ptr == (undefined*)0x0)\n    {\n        locale_ptr = PTR___PTR___global_locale_08008aec_08008aec;\n    }\n    return locale_ptr + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "get_default_locale_08008ad4"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "wait_forever_08005674",
                "file": "filename",
                "line": "line_number"
            },
            "code": "void wait_forever_08005674(char *filename, int line_number)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "MX_I2C1_Init",
                "MX_TIM1_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "wait_forever_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_input_capture_polarity_and_filter_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "polarity",
                "TIM_ICFilter": "filter",
                "tmpccer": "cc_enable_reg",
                "tmpccmr1": "ccmr1_reg"
            },
            "code": "void set_input_capture_polarity_and_filter_08004104(TIM_TypeDef *timer, uint32_t polarity, uint32_t filter)\n{\n  uint32_t cc_enable_reg;\n  uint32_t ccmr1_reg;\n  cc_enable_reg = timer->CCER & 0xffffffef;\n  ccmr1_reg = (filter << 0xc) | (timer->CCMR1 & 0xffff0fff);\n  timer->CCER = (polarity << 4) | (cc_enable_reg & 0xffffff5f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_capture_polarity_and_filter_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "is_end_of_string_08000ff4",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_08000ff4(void)\n{\n  char input_char;\n  __aeabi_cfcmpeq();\n  return input_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000ff4"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "calculate_08005d0c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_08005d0c(double input) {\n  double result;\n  // perform calculations here\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "__ieee754_atan2",
                "atan"
            ],
            "imported": false,
            "current_name": "calculate_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "count_leading_zeroes_in_string_08005e40",
                "__s": "string",
                "iVar1": "bits_to_shift",
                "puVar2": "word_pointer",
                "uVar4": "current_word",
                "count_leading_zeroes": "count_leading_zeroes",
                "leading_zero_bits": "leading_zero_bits"
            },
            "code": "size_t count_leading_zeroes_in_string_08005e40(uint value);\n\nsize_t count_leading_zeroes_in_string_08005e40(uint value) {\n  size_t count = 0;\n  while ((value & 0x80000000) == 0) {\n    count += 1;\n    value <<= 1;\n  }\n  return count;\n}\n\nsize_t count_leading_zeroes_in_string_08005e40_in_string(char *string);\n\nsize_t count_leading_zeroes_in_string_08005e40_in_string(char *string) {\n  uint *word_pointer = (uint *)((uint)string & 0xfffffffc);\n  int bits_to_shift = -((uint)string & 3);\n  uint current_word = *word_pointer;\n  if (((uint)string & 3) != 0) {\n    current_word |= 0xffffffffU >> ((bits_to_shift + 4U & 0x1f) << 3);\n  }\n  while (true) {\n    word_pointer++;\n    current_word = current_word + 0xfefefeff & ~current_word & 0x80808080;\n    if (current_word != 0) {\n      break;\n    }\n    current_word = *word_pointer;\n    bits_to_shift += 4;\n  }\n  size_t leading_zero_bits = count_leading_zeroes_in_string_08005e40(current_word & -current_word);\n  return bits_to_shift + (0x1fU - leading_zero_bits >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_in_string_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_preinit_and_dtors_08005d20",
                "param_1": "context",
                "puVar1": "dtor_array_end",
                "iVar2": "i",
                "ppcVar3": "preinit_func_ptr",
                "iVar4": "preinit_array_size",
                "PTR___preinit_array_end_08005d58": "preinit_array_end",
                "PTR___preinit_array_end_08005d5c": "preinit_array_start",
                "PTR___preinit_array_end_08005d64": "dtors_array_start",
                "PTR___do_global_dtors_aux_fini_array_entry_08005d60": "dtors_array_end"
            },
            "code": "void execute_preinit_and_dtors_08005d20(EVP_PKEY_CTX *context) {\n  int preinit_array_size = (int)PTR___preinit_array_end_08005d58 - (int)PTR___PTR___preinit_array_end_08005d58_08005d5c >> 2;\n  if (preinit_array_size != 0) {\n    int i = 0;\n    code **preinit_func_ptr = (code **)PTR___PTR___preinit_array_end_08005d58_08005d5c;\n    do {\n      context = (EVP_PKEY_CTX *)(*preinit_func_ptr)();\n      preinit_func_ptr++;\n      i++;\n    } while (i != preinit_array_size);\n  }\n  code **dtor_func_ptr = (code **)PTR___PTR___preinit_array_end_08005d58_08005d64;\n  undefined *dtor_array_end = PTR___do_global_dtors_aux_fini_array_entry_08005d60;\n  _init(context);\n  int dtor_array_size = (int)dtor_array_end - (int)dtor_func_ptr >> 2;\n  if (dtor_array_size != 0) {\n    int i = 0;\n    do {\n      (*dtor_func_ptr)();\n      dtor_func_ptr++;\n      i++;\n    } while (i != dtor_array_size);\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_preinit_and_dtors_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_GPIO_Pin_State_08001a80",
                "GPIOx": "GPIO_Port",
                "GPIO_Pin": "Pin_Number",
                "PinState": "Pin_State",
                "BSRR": "Bit_Set_Reset_Register",
                "GPIO_PIN_RESET": "GPIO_Pin_Reset",
                "uint": "uint32_t"
            },
            "code": "void set_GPIO_Pin_State_08001a80(GPIO_TypeDef* GPIO_Port, uint16_t Pin_Number, GPIO_PinState Pin_State)\n{\n    if (Pin_State == GPIO_PIN_RESET) {\n        GPIO_Port->BSRR = (uint32_t)Pin_Number << 16;\n    }\n    else {\n        GPIO_Port->BSRR = (uint32_t)Pin_Number;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_State_08001a80"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "acquire_recursive_lock_for_malloc_080090a8",
                "PTR___lock___malloc_recursive_mutex_080090b0": "PTR_recursive_lock_malloc"
            },
            "code": "void acquire_recursive_lock_for_malloc_080090a8(void)\n{\n  __retarget_lock_acquire_recursive(PTR___lock___malloc_recursive_mutex_080090b0);\n  return;\n}",
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "acquire_recursive_lock_for_malloc_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "execute_afl_call_08004e74",
                "ticks": "num_ticks",
                "uVar1": "result"
            },
            "code": "uint32_t execute_afl_call_08004e74(int ticks) {\n    uint32_t result;\n    if (*(int *)PTR_noHyperCall_08004ea0 == 0) {\n        result = aflCall(1, ticks, 0);\n    }\n    else {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08004e74"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "read_and_update_0800910c",
                "param_1": "offset",
                "param_2": "data",
                "iVar1": "data_offset"
            },
            "code": "void read_and_update_0800910c(int offset, undefined4 *data)\n{\n  int data_offset;\n  if (data != NULL) {\n    data_offset = *(int *)(offset + 0x4c);\n    *data = *(undefined4 *)(data_offset + data[1] * 4);\n    *(undefined4 **)(data_offset + data[1] * 4) = data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "read_and_update_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "configureClocks_080052a0",
                "HVar1": "status",
                "uVar2": "hclkFreq",
                "RCC_ClkInitStruct": "clkInit",
                "RCC_OscInitTypeDef": "oscInit",
                "OscillatorType": "OscillatorType",
                "HSEState": "HSEState",
                "HSEPredivValue": "HSEPredivValue",
                "HSIState": "HSIState",
                "PLLState": "PLLState",
                "PLLSource": "PLLSource",
                "PLLMUL": "PLLMUL",
                "ClockType": "ClockType",
                "SYSCLKSource": "SYSCLKSource",
                "AHBCLKDivider": "AHBCLKDivider",
                "APB1CLKDivider": "APB1CLKDivider",
                "APB2CLKDivider": "APB2CLKDivider",
                "HAL_RCC_OscConfig": "HAL_RCC_OscConfig",
                "_Error_Handler": "_Error_Handler",
                "HAL_RCC_ClockConfig": "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "DAT_08005344": "SYSTICK_FREQUENCY",
                "HAL_SYSTICK_CLKSourceConfig": "HAL_SYSTICK_CLKSourceConfig",
                "SysTick_IRQn": "SysTick_IRQn"
            },
            "code": "void configureClocks_080052a0(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclkFreq;\n  RCC_OscInitTypeDef oscInit;\n  RCC_ClkInitTypeDef clkInit;\n  oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  oscInit.HSEState = RCC_HSE_ON;\n  oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  oscInit.HSIState = RCC_HSI_ON;\n  oscInit.PLL.PLLState = RCC_PLL_ON;\n  oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  oscInit.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&oscInit);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x151);\n  }\n  clkInit.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clkInit.APB1CLKDivider = RCC_HCLK_DIV2;\n  clkInit.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clkInit, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x15e);\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(DAT_08005344 * (uint64_t)hclkFreq / UINT32_MAX));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "configureClocks_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "hash_size",
                "param_2": "hash",
                "param_3": "num_values",
                "param_4": "multiplier",
                "puVar1": "new_hash",
                "uVar2": "high_bits",
                "iVar3": "num_hash_values",
                "puVar4": "values",
                "iVar5": "hash_list_ptr"
            },
            "code": "undefined4 * calculate_hash_08009120(int hash_size, undefined4 *hash, int num_values, uint multiplier)\n{\n  undefined4 *new_hash;\n  uint carryover = 0;\n  int num_hash_values = hash[4];\n  uint *values = hash + 5;\n  for (int i = 0; i < num_hash_values; i++) {\n    carryover = multiplier * (*values & 0xffff) + carryover;\n    uint high_bits = multiplier * (*values >> 0x10) + (carryover >> 0x10);\n    *values = (carryover & 0xffff) + high_bits * 0x10000;\n    carryover = high_bits >> 0x10;\n    values++;\n  }\n  new_hash = hash;\n  if (carryover != 0) {\n    if (hash[2] <= num_hash_values) {\n      new_hash = (undefined4 *)_Balloc(hash_size, hash[1] + 1);\n      memcpy(new_hash + 3, hash + 3, (hash[4] + 2) * 4);\n      int hash_list_ptr = *(int *)(hash_size + 0x4c);\n      *hash = *(undefined4 *)(hash_list_ptr + hash[1] * 4);\n      *(undefined4 **)(hash_list_ptr + hash[1] * 4) = hash;\n    }\n    new_hash[num_hash_values + 5] = carryover;\n    new_hash[4] = num_hash_values + 1;\n  }\n  return new_hash;\n}",
            "called": [
                "_Balloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08000f58": {
            "renaming": {
                "FUN_08000f58": "calculate_result_08000f58",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "abs_input_1",
                "uVar3": "abs_input_2",
                "uVar4": "result",
                "bVar1": "is_negative_diff",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f58(uint input_1, uint input_2)\n{\n  bool is_negative_1 = false;\n  bool is_negative_2 = false;\n  uint abs_input_1 = 0;\n  uint abs_input_2 = 0;\n  uint result = 0;\n  \n  if ((input_1 & 0x80000000) || (input_2 & 0x80000000)) {\n    if ((input_1 & 0x80000000) && ((input_1 & 0x7fffffff) != 0)) {\n      is_negative_1 = true;\n    }\n    if ((input_2 & 0x80000000) && ((input_2 & 0x7fffffff) != 0)) {\n      is_negative_2 = true;\n    }\n    result = 0xffffffff;\n  }\n  else {\n    abs_input_1 = input_1 & 0x7fffffff;\n    abs_input_2 = input_2 & 0x7fffffff;\n    if ((abs_input_1 ^ abs_input_2) == 0) {\n      result = abs_input_1 | 1;\n    }\n    else {\n      if (abs_input_1 > abs_input_2) {\n        result = abs_input_1 - abs_input_2;\n        if (is_negative_1) {\n          result = ~(result - 1);\n        }\n      }\n      else {\n        result = abs_input_2 - abs_input_1;\n        if (is_negative_2) {\n          result = ~(result - 1);\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f58",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f58"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dest_byte",
                "puVar2": "dest_word",
                "puVar3": "dest_dword",
                "puVar4": "src_byte",
                "puVar5": "src_word",
                "puVar6": "src_dword",
                "uVar7": "remaining_bytes",
                "uVar8": "bytes_to_align",
                "bVar9": "loop_condition"
            },
            "code": "void* copy_memory_08001084(void* destination, const void* source, size_t num_bytes) {\n  unsigned char* dest = (unsigned char*)destination;\n  const unsigned char* src = (const unsigned char*)source;\n\n  if ((((unsigned int)src | (unsigned int)dest) & 3) != 0) {\n    if (num_bytes < 8) {\n      unsigned int remaining_bytes = num_bytes - 4;\n      if (remaining_bytes > 0) {\n        do {\n          *dest++ = *src++;\n        } while (--remaining_bytes > 0);\n      }\n      if (remaining_bytes == 0) {\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n      }\n      return destination;\n    }\n    if ((((unsigned int)src & 3) != 0) && (((unsigned int)dest & 3) != 0)) {\n      unsigned int bytes_to_align = 4 - ((unsigned int)dest & 3);\n      num_bytes -= bytes_to_align;\n      if (bytes_to_align > 1) {\n        *dest++ = *src++;\n        bytes_to_align--;\n      }\n      if (bytes_to_align > 1) {\n        *dest++ = *src++;\n      }\n    }\n  }\n\n  unsigned int num_words = num_bytes >> 4;\n  while (num_words > 0) {\n    *(unsigned int*)dest = *(unsigned int*)src;\n    *(unsigned int*)(dest+4) = *(unsigned int*)(src+4);\n    *(unsigned int*)(dest+8) = *(unsigned int*)(src+8);\n    *(unsigned int*)(dest+12) = *(unsigned int*)(src+12);\n    dest += 16;\n    src += 16;\n    num_words--;\n  }\n\n  num_bytes &= 0xF;\n  if (num_bytes > 0) {\n    unsigned int remaining_bytes = num_bytes - 4;\n    if (remaining_bytes > 0) {\n      do {\n        *dest++ = *src++;\n      } while (--remaining_bytes > 0);\n    }\n    if (remaining_bytes == 0) {\n      *dest++ = *src++;\n      *dest++ = *src++;\n      *dest++ = *src++;\n    }\n  }\n\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "_dtoa_r",
                "__multadd",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "initialize_gpio_pin_08005680",
                "htim": "timer_handle",
                "Instance": "timer_instance_ptr",
                "GPIO_InitStruct": "gpio_init_struct",
                "Pin": "gpio_pin",
                "Mode": "gpio_mode",
                "Speed": "gpio_speed",
                "HAL_GPIO_Init": "GPIO_Init",
                "DAT_080056b4": "timer_instance_ptr",
                "DAT_080056b8": "gpio_port_ptr"
            },
            "code": "void initialize_gpio_pin_08005680(TIM_HandleTypeDef *timer_handle)\n{\n  GPIO_InitTypeDef gpio_init_struct;\n  if (timer_handle->Instance == DAT_080056b4) {\n    gpio_init_struct.Pin = 0x900;\n    gpio_init_struct.Mode = GPIO_MODE_AF_PP;\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_080056b8,&gpio_init_struct);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pin_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "configureRCCClocks_08003260",
                "RCC_ClkInitStruct": "clkInitStruct",
                "FLatency": "flashLatency",
                "HVar3": "status",
                "tickstart": "tickstart",
                "DAT_08003430": "FLASH_ACR",
                "DAT_08003434": "RCC_CFGR",
                "PTR_SystemCoreClock_0800343c": "SystemCoreClock",
                "PTR_AHBPrescTable_08003438": "AHBPrescTable"
            },
            "code": "HAL_StatusTypeDef configureRCCClocks_08003260(RCC_ClkInitTypeDef *clkInitStruct, uint32_t flashLatency)\n{\n  uint32_t latencyCheck;\n  uint32_t tickstart;\n  HAL_StatusTypeDef status;\n  \n  latencyCheck = *DAT_08003430 & 7;\n  if (latencyCheck < flashLatency) {\n    *DAT_08003430 = flashLatency | (*DAT_08003430 & 0xfffffff8);\n    latencyCheck = *DAT_08003430 & 7;\n    if (latencyCheck != flashLatency) {\n      status = HAL_ERROR;\n      return status;\n    }\n  }\n  \n  if ((clkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n    *DAT_08003434 &= 0xfffffff0;\n    *DAT_08003434 |= (uint32_t)clkInitStruct->AHBCLKDivider;\n  }\n  \n  if ((clkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n    *DAT_08003434 &= 0xffff8fff;\n    *DAT_08003434 |= (uint32_t)clkInitStruct->APB1CLKDivider << 10;\n  }\n  \n  if ((clkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n    *DAT_08003434 &= 0xffc7ffff;\n    *DAT_08003434 |= (uint32_t)clkInitStruct->APB2CLKDivider << 13;\n  }\n  \n  uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();\n  uint32_t ahbPrescIndex = (*DAT_08003434 & DAT_08003434_HPRE) >> 4;\n  uint32_t ahbPrescaler = PTR_AHBPrescTable_08003438[ahbPrescIndex];\n  *(uint32_t *)PTR_SystemCoreClock_0800343c = sysClockFreq / ahbPrescaler;\n  \n  HAL_InitTick(0xff);\n  status = HAL_OK;\n  return status;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureRCCClocks_08003260"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_and_initialize_buffer_08009244",
                "param_1": "size",
                "param_2": "value",
                "iVar1": "buffer_address",
                "_Balloc": "allocate_buffer"
            },
            "code": "void allocate_and_initialize_buffer_08009244(int size, int value)\n{\n  int buffer_address;\n  buffer_address = allocate_buffer(size, 1);\n  *(int *)(buffer_address + 0x10) = 1;\n  *(int *)(buffer_address + 0x14) = value;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_buffer_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "interrupt_handler_08004e6c",
                "a0": "arg1",
                "a1": "arg2",
                "a2": "arg3"
            },
            "code": "uint32_t interrupt_handler_08004e6c(uint32_t arg1, uint32_t arg2, int32_t arg3) { \n  software_interrupt(0x3f);\n  return arg1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_handler_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "initialize_systick_08001762",
                "TicksNumb": "ticks_number",
                "uVar1": "systick_config_result"
            },
            "code": "uint32_t initialize_systick_08001762(uint32_t ticks_number)\n{\n  uint32_t systick_config_result;\n  systick_config_result = SysTick_Config(ticks_number);\n  return systick_config_result;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "initialize_systick_08001762"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_input_capture_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "ic_polarity",
                "TIM_ICFilter": "ic_filter",
                "uVar1": "tmp_ccer",
                "tmpccer": "tmp_ccer",
                "tmpccmr1": "tmp_ccmr1"
            },
            "code": "void set_input_capture_080040a0(TIM_TypeDef *timer, uint32_t ic_polarity, uint32_t ic_filter)\n{\n  uint32_t tmp_ccer = timer->CCER;\n  timer->CCER = tmp_ccer & 0xfffffffe;\n  timer->CCMR1 = (ic_filter << 4) | (timer->CCMR1 & 0xffffff0f);\n  timer->CCER = ic_polarity | (tmp_ccer & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_capture_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "var3",
                "pvVar4": "var4",
                "puVar5": "ptr5",
                "iVar6": "var6",
                "uVar7": "var7",
                "iVar8": "var8",
                "uVar9": "var9",
                "puVar10": "ptr10"
            },
            "code": "void* reverse_copy_08009a18(void* dest, void* src, size_t n) {\n    uint count = n;\n    if (src < dest && src + n > dest) {\n        while (count--) {\n            *(char*)(dest + count) = *(char*)(src + count);\n        }\n    }\n    else {\n        if (n > 15) {\n            if (((uint)dest | (uint)src) & 3) {\n                goto byte_copy;\n            }\n            uint blocks = n >> 4;\n            while (blocks--) {\n                *(int*)(dest) = *(int*)(src);\n                *(int*)(dest + 4) = *(int*)(src + 4);\n                *(int*)(dest + 8) = *(int*)(src + 8);\n                *(int*)(dest + 12) = *(int*)(src + 12);\n                src += 16;\n                dest += 16;\n            }\n            n &= 0xF;\n        }\nbyte_copy:\n        while (count--) {\n            *(char*)(dest + count) = *(char*)(src + count);\n        }\n    }\n    return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "_realloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_to_integer_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "output",
                "iVar2": "tempVar",
                "uVar3": "tempVar2"
            },
            "code": "uint convert_to_integer_0800119c(uint input1, uint input2)\n{\n  uint output;\n  int tempVar;\n  uint tempVar2;\n\n  tempVar = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < tempVar) {\n      return 0;\n    }\n    tempVar2 = -tempVar >> 0x15;\n    tempVar2 = tempVar2 - 0x3e1;\n    if (tempVar2 != 0 && tempVar2 < 0xfffffc20) {\n      tempVar2 = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (tempVar2 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        tempVar2 = -tempVar2;\n      }\n      return tempVar2;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "convert_to_integer_0800119c"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "release_recursive_mutex_for_malloc_080090b4",
                "PTR___lock___malloc_recursive_mutex_080090bc": "malloc_recursive_mutex"
            },
            "code": "void release_recursive_mutex_for_malloc_080090b4(void)\n{\n  __retarget_lock_release_recursive(PTR___lock___malloc_recursive_mutex_080090bc);\n  return;\n}",
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "release_recursive_mutex_for_malloc_080090b4"
        },
        "FUN_08000f60": {
            "renaming": {
                "FUN_08000f60": "calculate_result_08000f60",
                "param_1": "x",
                "param_2": "y",
                "uVar2": "x_times_2",
                "uVar3": "y_times_2",
                "uVar4": "x_or_y",
                "bVar1": "is_negative",
                "bVar5": "x_or_y_is_zero"
            },
            "code": "uint calculate_result_08000f60(uint x, uint y)\n{\n    uint x_times_2 = x * 2;\n    uint y_times_2 = y * 2;\n    if (((int)x_times_2 >> 0x18 == -1 || (int)y_times_2 >> 0x18 == -1) && ((((int)x_times_2 >> 0x18 == -1 && ((x & 0x7fffff) != 0)) || (((int)y_times_2 >> 0x18 == -1 && ((y & 0x7fffff) != 0)))))\n    {\n        return 1;\n    }\n    uint x_or_y = x_times_2 | y & 0x7fffffff;\n    bool x_or_y_is_zero = x_or_y == 0;\n    if (!x_or_y_is_zero)\n    {\n        x_or_y = x ^ y;\n        x_or_y_is_zero = x_or_y == 0;\n    }\n    bool is_negative = -1 < (int)x_or_y;\n    if (is_negative)\n    {\n        x = x_times_2 + y * -2;\n        x_or_y_is_zero = x == 0;\n    }\n    if (is_negative && y_times_2 <= x_times_2 && !x_or_y_is_zero)\n    {\n        x = (int)y >> 0x1f;\n    }\n    if (!is_negative || y_times_2 > x_times_2)\n    {\n        x = ~((int)y >> 0x1f);\n    }\n    if (!x_or_y_is_zero)\n    {\n        x = x | 1;\n    }\n    return x;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f60"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "setTIMBreakDeadTimeConfig_0800422e",
                "htim": "timerHandle",
                "sBreakDeadTimeConfig": "breakDeadTimeConfig",
                "HVar1": "status",
                "tmpbdtr": "bdtr"
            },
            "code": "HAL_StatusTypeDef setTIMBreakDeadTimeConfig_0800422e(TIM_HandleTypeDef *timerHandle, TIM_BreakDeadTimeConfigTypeDef *breakDeadTimeConfig) {\n    HAL_StatusTypeDef status;\n    uint32_t bdtr;\n    if (timerHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        timerHandle->Lock = HAL_LOCKED;\n        bdtr = timerHandle->Instance->BDTR;\n        bdtr &= 0xFFFFFCFF;\n        bdtr &= 0xFFFFFBFF;\n        bdtr &= 0xFFFFF7FF;\n        bdtr &= 0xFFFFEFFF;\n        bdtr &= 0xFFFFDFFF;\n        bdtr &= 0xFFFFBFFF;\n        bdtr &= 0xFFFF7FFF;\n        bdtr |= breakDeadTimeConfig->AutomaticOutput;\n        bdtr |= breakDeadTimeConfig->BreakPolarity;\n        bdtr |= breakDeadTimeConfig->BreakState;\n        bdtr |= breakDeadTimeConfig->OffStateRunMode;\n        bdtr |= breakDeadTimeConfig->OffStateIDLEMode;\n        bdtr |= breakDeadTimeConfig->LockLevel;\n        bdtr |= breakDeadTimeConfig->DeadTime;\n        timerHandle->Instance->BDTR = bdtr;\n        timerHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "setTIMBreakDeadTimeConfig_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "__malloc_unlock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__malloc_lock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "configureSysTick_0800151c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "HVar2": "status",
                "PTR_SystemCoreClock_08001570": "clockSpeed",
                "PTR_uwTickFreq_08001574": "tickFrequency",
                "SysTick_IRQn": "SysTick Interrupt",
                "PTR_uwTickPrio_08001578": "tickPriorityPointer"
            },
            "code": "HAL_StatusTypeDef configureSysTick_0800151c(uint32_t tickPriority)\n{\n  uint32_t PTR_SystemCoreClock_08001570 = *(uint *)PTR_SystemCoreClock_08001570;\n  uint32_t PTR_uwTickFreq_08001574 = (1000 / (byte)*PTR_uwTickFreq_08001574);\n  uint32_t systickConfig = HAL_SYSTICK_Config(PTR_SystemCoreClock_08001570 / PTR_uwTickFreq_08001574);\n  HAL_StatusTypeDef status;\n  if (systickConfig == 0) {\n    if (tickPriority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n      *(uint32_t *)PTR_uwTickPrio_08001578 = tickPriority;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  else {\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_0800151c"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "determine_result_08000f68",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "temp_result",
                "bVar1": "is_negative1",
                "bVar5": "is_zero"
            },
            "code": "uint determine_result_08000f68(uint input1, uint input2)\n{\n  bool is_negative1;\n  uint double_input1 = input1 * 2;\n  uint double_input2 = input2 * 2;\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) && ((((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint temp_result = double_input1 | input2 & 0x7fffffff;\n  bool is_zero = temp_result == 0;\n  if (!is_zero) {\n    temp_result = input1 ^ input2;\n    is_zero = temp_result == 0;\n  }\n  is_negative1 = -1 < (int)temp_result;\n  if (is_negative1) {\n    input1 = double_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_negative1 && double_input2 <= double_input1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative1 || double_input2 > double_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "determine_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "hash_table",
                "param_2": "table_size",
                "param_3": "data",
                "puVar1": "ptr_1",
                "puVar2": "ptr_2",
                "iVar3": "var_3",
                "uVar4": "var_4",
                "puVar5": "ptr_5",
                "uVar6": "var_6",
                "puVar7": "ptr_7",
                "uVar8": "var_8",
                "iVar9": "var_9",
                "iVar10": "var_10",
                "uVar11": "var_11",
                "iVar12": "var_12",
                "iVar13": "var_13",
                "puVar14": "ptr_14",
                "puVar15": "ptr_15",
                "puVar16": "ptr_16",
                "puVar17": "ptr_17",
                "puVar18": "ptr_18"
            },
            "code": "void calculate_hash_08009258(uint32_t* hash_table, int table_size, int* data, int data_size)\n{\n    int smaller_size = *(int*)(data + 0x10);\n    int larger_size = *(int*)(table_size + 0x10);\n    int smaller_data = data;\n    int larger_data = table_size;\n    if (smaller_size > larger_size) {\n        int temp = smaller_size;\n        smaller_size = larger_size;\n        larger_size = temp;\n        smaller_data = table_size;\n        larger_data = data;\n    }\n    int total_size = larger_size + smaller_size;\n    int num_blocks = *(int*)(smaller_data + 4);\n    if (*(int*)(smaller_data + 8) < total_size) {\n        num_blocks = num_blocks + 1;\n    }\n    int hash_table_alloc = _Balloc(hash_table, num_blocks);\n    uint32_t* current_block = (uint32_t*)(hash_table_alloc + 0x14);\n    uint32_t* end_block = current_block + total_size;\n    for (uint32_t* block = current_block; block < end_block; block++) {\n        *block = 0;\n    }\n    uint32_t* data_start = larger_data + 0x14;\n    uint32_t* data_end = data_start + smaller_size * 4;\n    if (data_start < data_end) {\n        uint32_t* block_end = (uint32_t*)(data_start + ((data_end - larger_data) - 0x15 & 0xfffffffc));\n        uint32_t* hash_table_current = (uint32_t*)(smaller_data + 0x10);\n        do {\n            while (true) {\n                hash_table_current = hash_table_current + 1;\n                uint32_t block_value = *hash_table_current & 0xffff;\n                if (block_value != 0) {\n                    break;\n                }\n                block_value = *hash_table_current >> 0x10;\n                if (block_value == 0) {\n                    goto LAB_080092d2;\n                }\n                uint32_t carry = 0;\n                uint32_t* data_current = data_start;\n                uint32_t* hash_table_start = current_block;\n                uint32_t hash_table_value = *hash_table_start;\n                do {\n                    uint32_t* hash_table_current_2 = hash_table_start;\n                    uint32_t* data_next = data_current + 1;\n                    uint32_t data_value = *data_current & 0xffff;\n                    uint32_t product = block_value * data_value + (*hash_table_current_2 & 0xffff) + carry;\n                    *hash_table_current_2 = hash_table_value & 0xffff | product * 0x10000;\n                    uint32_t* hash_table_next = hash_table_current_2 + 1;\n                    uint32_t hash_table_next_value = hash_table_next[0];\n                    uint32_t product2 = block_value * (*data_current >> 0x10) + (hash_table_next_value & 0xffff) + (product >> 0x10);\n                    carry = product2 >> 0x10;\n                    hash_table_value = block_value * (*hash_table_current_2 >> 0x10) + (hash_table_next_value >> 0x10) + carry;\n                    carry = hash_table_value >> 0x10;\n                    data_current = data_next;\n                    hash_table_start = hash_table_next;\n                } while (data_current < data_start + larger_size);\n                hash_table_start[1] = hash_table_value;\n                current_block = current_block + 1;\n                if (block_end == hash_table_current) {\n                    goto LAB_0800937a;\n                }\n            }\n            uint32_t carry = 0;\n            uint32_t* hash_table_current = current_block;\n            uint32_t* data_current = data_start;\n            do {\n                uint32_t* hash_table_next = hash_table_current + 1;\n                uint32_t* data_next = data_current + 1;\n                uint32_t hash_table_current_value = *hash_table_current & 0xffff;\n                uint32_t data_current_value = *data_current & 0xffff;\n                uint32_t product = block_value * data_current_value + (*hash_table_current & 0xffff) + carry;\n                uint32_t product2 = block_value * (*data_current >> 0x10) + (*hash_table_current >> 0x10) + (product >> 0x10);\n                carry = product2 >> 0x10;\n                *hash_table_current = product & 0xffff | product2 * 0x10000;\n                hash_table_current = hash_table_next;\n                data_current = data_next;\n            } while (data_current < data_start + larger_size);\n            hash_table_current[1] = carry;\n            block_value = *hash_table_current & 0xffff;\n            if (block_value != 0) {\n                continue;\n            }\n        } while (block_end != hash_table_current);\n    }\nLAB_0800937a:\n    if (total_size > 0) {\n        uint32_t* end_block_current = end_block - 1;\n        uint32_t end_block_value = *end_block_current;\n        while ((end_block_value == 0 && total_size > 0)) {\n            end_block_current = end_block_current - 1;\n            end_block_value = *end_block_current;\n            total_size = total_size - 1;\n        }\n    }\n    *(int*)(hash_table_alloc + 0x10) = total_size;\n    return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zeroes": "shifted_zeroes",
                "result": "result"
            },
            "code": "uint calculate_hash_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  uint result;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zeroes = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zeroes);\n    result = multiplier + shifted_input + shifted_zeroes + carry;\n    if (shifted_zeroes == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n  }\n  else {\n    uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    uint shifted_zeroes = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n    if ((shifted_input & 0x7fffffff) == 0) {\n      shifted_zeroes = shifted_zeroes & ~(shifted_input >> 0x1f);\n    }\n    result = multiplier + shifted_zeroes;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c08"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "configureMasterTimer_080042de",
                "*htim": "timerHandle",
                "*sMasterConfig": "masterConfig",
                "HVar1": "status",
                "Lock": "lock",
                "Instance": "instance",
                "CR2": "cr2",
                "SMCR": "smcr",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "&": "&"
            },
            "code": "HAL_StatusTypeDef configureMasterTimer_080042de(TIM_HandleTypeDef *timerHandle, TIM_MasterConfigTypeDef *masterConfig) {\n  HAL_StatusTypeDef status;\n  \n  if (timerHandle->lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->lock = HAL_LOCKED;\n    timerHandle->state = HAL_TIM_STATE_BUSY;\n    timerHandle->instance->CR2 &= 0xffffff8f;\n    timerHandle->instance->CR2 |= masterConfig->MasterOutputTrigger;\n    timerHandle->instance->SMCR &= 0xffffff7f;\n    timerHandle->instance->SMCR |= masterConfig->MasterSlaveMode;\n    timerHandle->state = HAL_TIM_STATE_READY;\n    timerHandle->lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureMasterTimer_080042de"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    __malloc_lock();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR___malloc_av__08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR___malloc_av__08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR___malloc_av__08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc))\n    {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR___malloc_av__08008e60;\n  puVar12 = PTR___malloc_av__08008e4c;\n  puVar13 = *(undefined **)(PTR___malloc_av__08008e4c + 0x10);\n  if (puVar13 == PTR_PTR___malloc_av__08008e60) {\n    uVar4 = *(uint *)(PTR___malloc_av__08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__08008e4c + 0x10) = PTR_PTR___malloc_av__08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR___malloc_sbrk_base_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR___malloc_sbrk_base_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)_sbrk_r(param_1,uVar4);\n  puVar6 = (uint *)PTR___malloc_current_mallinfo_08009018;\n  puVar3 = PTR___malloc_current_mallinfo_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08008e54 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08009018 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = _sbrk_r(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          _free_r(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR___malloc_max_total_mem_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR___malloc_max_total_mem_08008e5c;\n    if (*(uint *)PTR___malloc_max_sbrked_mem_08008e58 < uVar9) {\n      *(uint *)PTR___malloc_max_sbrked_mem_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    __malloc_unlock(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  __malloc_unlock(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "_realloc_r",
                "_calloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "sensor_data",
                "pitch": "output_pitch",
                "uVar1": "gyro_x_diff",
                "uVar2": "temp_double_1",
                "uVar3": "temp_double_2",
                "acc_pitch": "acc_pitch_degrees",
                "gyro_x": "gyro_x_degrees",
                "PTR_total_pitch_08004d60": "total_pitch_ptr",
                "PTR_first_run_08004d70": "first_run_ptr",
                "offset_gyroX": "gyro_x_offset",
                "offset_acc_pitch": "acc_pitch_offset",
                "accY": "acc_y",
                "accZ": "acc_z",
                "RAD_TO_DEG": "57.2958",
                "GYRO_SCALE_FACTOR": "131.0",
                "DELTA_TIME": "0.01",
                "GYRO_WEIGHT": "0.98",
                "ACC_WEIGHT": "0.02"
            },
            "code": "void calculate_pitch_08004bd8(Mpu6050 *mpu6050, float *pitch) {\n    float gyro_x_offset = mpu6050->offset_gyroX;\n    float acc_pitch_offset = mpu6050->offset_acc_pitch;\n    float gyro_x = mpu6050->gyroX - gyro_x_offset;\n    float acc_y = mpu6050->accY;\n    float acc_z = mpu6050->accZ;\n    float total_pitch = *(float *)PTR_total_pitch_08004d60;\n    bool first_run = *PTR_first_run_08004d70;\n    float acc_pitch = atan2(acc_y, acc_z) * RAD_TO_DEG;\n    float gyro_pitch = (gyro_x / GYRO_SCALE_FACTOR) * DELTA_TIME;\n    total_pitch += gyro_pitch;\n    if (first_run == false) {\n        total_pitch = (total_pitch * GYRO_WEIGHT) + (acc_pitch * ACC_WEIGHT);\n    }\n    else {\n        total_pitch = acc_pitch;\n        *PTR_first_run_08004d70 = false;\n    }\n    total_pitch -= acc_pitch_offset;\n    *(float *)PTR_total_pitch_08004d60 = total_pitch;\n    *pitch = total_pitch;\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__divdf3",
                "atan2",
                "__aeabi_dadd",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_pitch_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_or_retrieve_080090c0",
                "param_1": "memory_ptr",
                "param_2": "index",
                "puVar1": "entry",
                "iVar2": "table_entry",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "undefined4 * allocate_or_retrieve_080090c0(uint32_t memory_ptr, uint32_t index)\n{\n  undefined4 *entry;\n  uint32_t *table_ptr;\n  uint32_t table_entry;\n\n  table_ptr = (uint32_t *)(memory_ptr + 0x4c);\n  table_entry = table_ptr[index];\n  if (table_entry == 0) {\n    entry = (undefined4 *)_calloc_r(memory_ptr, 4, 0x21);\n    table_ptr[index] = (uint32_t)entry;\n    if (entry == NULL) {\n      return (undefined4 *)0;\n    }\n  } else {\n    entry = (undefined4 *)table_entry;\n  }\n\n  if (entry[index] == (undefined4 *)0) {\n    uint32_t size = 1 << (index & 0xff);\n    entry = (undefined4 *)_calloc_r(memory_ptr, 1, (size + 5) * 4);\n    if (entry == NULL) {\n      return (undefined4 *)0;\n    }\n    entry[1] = index;\n    entry[2] = size;\n  } else {\n    entry[index] = entry[index];\n  }\n\n  entry[3] = 0;\n  entry[4] = 0;\n  return entry;\n}",
            "called": [
                "_calloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "_dtoa_r",
                "__d2b",
                "__lshift",
                "__mdiff",
                "__multadd",
                "__pow5mult",
                "__i2b",
                "__multiply"
            ],
            "imported": false,
            "current_name": "allocate_or_retrieve_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "value",
                "uVar1": "leading_zeros",
                "uVar2": "val"
            },
            "code": "uint count_leading_zeros_080091e4(uint *value)\n{\n    uint val = *value;\n    uint leading_zeros = val & 7;\n\n    if (leading_zeros == 0) {\n        if ((val & 0xffff) == 0) {\n            val >>= 0x10;\n            leading_zeros = 0x10;\n        }\n        if ((val & 0xff) == 0) {\n            val >>= 8;\n            leading_zeros += 8;\n        }\n        if ((val & 0xf) == 0) {\n            val >>= 4;\n            leading_zeros += 4;\n        }\n        if ((val & 3) == 0) {\n            val >>= 2;\n            leading_zeros += 2;\n        }\n        if (-1 < (int)(val << 0x1f)) {\n            val >>= 1;\n            if (val == 0) {\n                return 0x20;\n            }\n            leading_zeros += 1;\n        }\n        *value = val;\n        return leading_zeros;\n    }\n    if (-1 < (int)(val << 0x1f)) {\n        if ((int)(val << 0x1e) < 0) {\n            *value = val >> 1;\n            return 1;\n        }\n        *value = val >> 2;\n        return 2;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091e4"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "addDataToBuffer_080098c0",
                "param_1": "type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "bufferPtr",
                "puVar1": "mutexPtr",
                "uVar2": "result",
                "uVar3": "index",
                "uVar4": "bufferSize",
                "iVar5": "bufferPtr2",
                "iVar6": "globalImpurePtr",
                "iVar7": "bufferIndex"
            },
            "code": "undefined4 addDataToBuffer_080098c0(int type, undefined4 data1, undefined4 data2, undefined4 bufferPtr)\n{\n    undefined *mutexPtr;\n    undefined4 result;\n    uint index;\n    uint bufferSize;\n    int globalImpurePtr;\n    int bufferPtr2;\n    int bufferIndex;\n\n    mutexPtr = PTR___atexit_recursive_mutex_08009974;\n    __retarget_lock_acquire_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_08009974);\n    globalImpurePtr = *(int *)PTR__global_impure_ptr_08009978;\n    bufferPtr2 = *(int *)(globalImpurePtr + 0x148);\n    if (bufferPtr2 == 0) {\n        bufferPtr2 = globalImpurePtr + 0x14c;\n        *(int *)(globalImpurePtr + 0x148) = bufferPtr2;\n    }\n    bufferSize = *(uint *)(bufferPtr2 + 4);\n    if ((int)bufferSize < 0x20) {\n        bufferIndex = bufferSize + 1;\n    }\n    else {\n        if (DAT_0800997c == 0) {\n            __retarget_lock_release_recursive(*(undefined4 *)mutexPtr);\n            return 0xffffffff;\n        }\n        bufferSize = 400;\n        bufferIndex = 1;\n        _DAT_00000190 = *(undefined4 *)(globalImpurePtr + 0x148);\n        _DAT_00000194 = 0;\n        *(undefined4 *)(globalImpurePtr + 0x148) = 400;\n        _DAT_00000318 = 0;\n        _DAT_0000031c = 0;\n    }\n    if (type != 0) {\n        bufferIndex = bufferPtr2 + bufferSize * 4;\n        *(undefined4 *)(bufferIndex + 0x88) = data2;\n        index = 1 << (bufferSize & 0xff);\n        *(uint *)(bufferPtr2 + 0x188) = *(uint *)(bufferPtr2 + 0x188) | index;\n        *(undefined4 *)(bufferIndex + 0x108) = bufferPtr;\n        if (type == 2) {\n            *(uint *)(bufferPtr2 + 0x18c) = index | *(uint *)(bufferPtr2 + 0x18c);\n        }\n    }\n    *(int *)(bufferPtr2 + 4) = bufferIndex;\n    result = *(undefined4 *)mutexPtr;\n    *(undefined4 *)(bufferPtr2 + (bufferSize + 2) * 4) = data1;\n    __retarget_lock_release_recursive(result);\n    return 0;\n}\n",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "addDataToBuffer_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "I2C_wait_for_address_and_transmit_data_080027f4",
                "*hi2c": "*i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout_ms",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "tmpreg": "temporary_register"
            },
            "code": "HAL_StatusTypeDef I2C_wait_for_address_and_transmit_data_080027f4(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout_ms, uint32_t start_tick)\n{\n  HAL_StatusTypeDef status = HAL_OK;\n  uint32_t current_tick;\n\n  i2c_handle->Instance->CR1 |= I2C_CR1_ACK;\n  i2c_handle->Instance->CR1 |= I2C_CR1_START;\n  do {\n    if ((i2c_handle->Instance->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {\n      i2c_handle->Instance->SR1;\n      i2c_handle->Instance->SR2;\n      if (memory_address_size == 1) {\n        i2c_handle->Instance->DR = (uint8_t)(device_address << 1);\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout_ms, start_tick);\n        if (status == HAL_OK) {\n          i2c_handle->Instance->DR = (uint8_t)memory_address;\n        }\n      }\n      else {\n        i2c_handle->Instance->DR = (uint8_t)(device_address << 1);\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout_ms, start_tick);\n        if (status == HAL_OK) {\n          i2c_handle->Instance->DR = (uint8_t)(memory_address >> 8);\n          status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout_ms, start_tick);\n          if (status == HAL_OK) {\n            i2c_handle->Instance->DR = (uint8_t)memory_address;\n          }\n        }\n      }\n    }\n    current_tick = HAL_GetTick();\n  } while ((status == HAL_OK) && (timeout_ms == 0xFFFFFFFF || (current_tick - start_tick) < timeout_ms));\n  if (status == HAL_OK) {\n    i2c_handle->Instance->CR1 |= I2C_CR1_STOP;\n  }\n  else {\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "I2C_wait_for_address_and_transmit_data_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "input_value",
                "uVar1": "shifted_value_high_bits",
                "uVar2": "shifted_bits_count",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shifted_bits_count_temp",
                "in_r12": "remaining_bits_count",
                "bVar5": "is_remaining_bits_negative",
                "bVar6": "is_remaining_bits_zero",
                "bVar7": "is_shift_negative"
            },
            "code": "ulonglong calculate_shifted_value_080003d4(uint input_value)\n{\n  uint leading_zeroes_count = count_leading_zeroes(input_value);\n  uint shifted_bits_count = leading_zeroes_count + 21;\n  bool is_shift_negative = (shifted_bits_count < 32);\n  uint shifted_value = 0;\n  uint remaining_bits_count = leading_zeroes_count - 11;\n  bool is_remaining_bits_negative = (int)remaining_bits_count < 0;\n  bool is_remaining_bits_zero = (remaining_bits_count == 0);\n  if (input_value != 0)\n  {\n    if (shifted_bits_count < 32)\n    {\n      is_shift_negative = shifted_bits_count + 12 < 0;\n      leading_zeroes_count++;\n      is_remaining_bits_negative = leading_zeroes_count < 0;\n      is_remaining_bits_zero = leading_zeroes_count == 0;\n      shifted_bits_count = shifted_bits_count & 0xff;\n      if (!is_remaining_bits_zero && is_remaining_bits_negative == is_shift_negative)\n      {\n        shifted_value = input_value << shifted_bits_count;\n        input_value = input_value >> ((12 - leading_zeroes_count) & 0xff);\n        goto LAB_080002e0;\n      }\n    }\n    if (is_remaining_bits_zero || is_remaining_bits_negative != is_shift_negative)\n    {\n      remaining_bits_count = 32 - shifted_bits_count;\n    }\n    shifted_value = input_value << (shifted_bits_count & 0xff);\n    if (is_remaining_bits_zero || is_remaining_bits_negative != is_shift_negative)\n    {\n      shifted_value = shifted_value | 0U >> (remaining_bits_count & 0xff);\n    }\n    if (is_remaining_bits_zero || is_remaining_bits_negative != is_shift_negative)\n    {\n      shifted_value = 0 << (shifted_bits_count & 0xff);\n    }\n  }\nLAB_080002e0:\n  if (shifted_bits_count < 1075)\n  {\n    return CONCAT44(shifted_value + (1074 - shifted_bits_count) * 0x100000, 0);\n  }\n  uint inverted_shifted_bits_count = ~(1074 - shifted_bits_count);\n  if (30 < (int)inverted_shifted_bits_count)\n  {\n    return (ulonglong)(shifted_value >> (inverted_shifted_bits_count - 31 & 0xff));\n  }\n  int remaining_bits_count_2 = inverted_shifted_bits_count - 19;\n  if (remaining_bits_count_2 == 0 || remaining_bits_count_2 < 0 != SCARRY4(inverted_shifted_bits_count - 31, 12))\n  {\n    inverted_shifted_bits_count++;\n    return CONCAT44(shifted_value >> (inverted_shifted_bits_count & 0xff), shifted_value << (32 - inverted_shifted_bits_count & 0xff));\n  }\n  return (ulonglong)(shifted_value >> (32 - (12 - remaining_bits_count_2) & 0xff) | shifted_value << (remaining_bits_count_2 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_angles_08004d78",
                "mpu6050": "accelerometer",
                "pitch": "pitch_angle",
                "roll": "roll_angle",
                "acc_roll": "roll_acceleration",
                "acc_pitch": "pitch_acceleration",
                "acc_z": "z_acceleration",
                "acc_y": "y_acceleration",
                "acc_x": "x_acceleration"
            },
            "code": "void calculate_pitch_and_roll_angles_08004d78(Mpu6050 *mpu6050, float *pitch, float *roll)\n{\n    float acc_x = mpu6050->accX / 0x45800000;\n    float acc_y = mpu6050->accY / 0x45800000;\n    float acc_z = mpu6050->accZ / 0x45800000;\n    float pitch_rad = atan2(acc_x, sqrt(acc_y * acc_y + acc_z * acc_z));\n    float roll_rad = atan2(acc_y, sqrt(acc_x * acc_x + acc_z * acc_z));\n    *pitch = pitch_rad * 57.2958;\n    *roll = roll_rad * 57.2958;\n}",
            "called": [
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__divdf3",
                "atan2",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "calculate_pitch_and_roll_angles_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_08000c10",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "output_base",
                "uVar3": "sign_bit",
                "uVar5": "shifted_zero",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_08000c10(uint input)\n{\n    int leading_zeroes;\n    uint sign_bit;\n    uint shifted_input;\n    uint output;\n    \n    sign_bit = input & 0x80000000;\n    if ((int)sign_bit < 0) {\n        input = -input;\n    }\n    if (input == 0) {\n        return 0;\n    }\n    leading_zeroes = count_leading_zeroes(input);\n    shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    \n    if (leading_zeroes > 7) {\n        uint shifted_zero = 0 << (leading_zeroes - 8 & 0xff);\n        uint carry_bit = (uint)(0x7fffffff < shifted_zero);\n        output = ((sign_bit | 0x4b000000) - 0x800000) + (leading_zeroes - 8) * -0x800000;\n        output += (input << (leading_zeroes - 8 & 0xff)) + (0U >> (0x20 - (leading_zeroes - 8) & 0xff)) + carry_bit;\n        if (shifted_zero == 0x80000000) {\n            output = output & 0xfffffffe;\n        }\n    } else {\n        output = ((sign_bit | 0x4b000000) - 0x800000) + (leading_zeroes - 8) * -0x800000;\n        output += ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n        if ((shifted_input & 0x7fffffff) == 0) {\n            output = output & ~(shifted_input >> 0x1f);\n        }\n    }\n    return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_update",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "mpu",
                "local_13": "zero",
                "local_12": "clock_source",
                "local_11": "sample_rate_divider"
            },
            "code": "void initialize_mpu6050_0800491c(Mpu6050 *mpu6050)\n{\n    uint8_t zero = 0;\n    uint8_t clock_source = 0x10;\n    uint8_t sample_rate_divider = 8;\n\n    i2c_write_register(0xd0, 0x6b, &zero, 1);\n    i2c_write_register(0xd0, 0x1c, &clock_source, 1);\n    i2c_write_register(0xd0, 0x1b, &sample_rate_divider, 1);\n\n    mpu6050->accX = 0.0;\n    mpu6050->accY = 0.0;\n    mpu6050->accZ = 0.0;\n    mpu6050->temp = 0.0;\n    mpu6050->gyroX = 0.0;\n    mpu6050->gyroY = 0.0;\n    mpu6050->gyroZ = 0.0;\n    mpu6050->offset_gyroX = 0.0;\n    mpu6050->offset_gyroY = 0.0;\n    mpu6050->offset_acc_pitch = 0.0;\n    mpu6050->offset_acc_roll = 0.0;\n\n    mpu6050_calibrate(mpu6050);\n    return;\n}",
            "called": [
                "mpu6050_calibrate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_mpu6050_0800491c"
        }
    },
    "used_tokens": 163506,
    "layers": [
        [
            "FUN_0800045c",
            "FUN_08005d68",
            "FUN_08000c2c",
            "FUN_0800438a",
            "FUN_0800046c",
            "FUN_080009c0",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08000c3c",
            "FUN_08003518",
            "FUN_08005780",
            "FUN_08000fe0",
            "FUN_08008818",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_080016d0",
            "FUN_0800088a",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005d0c",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08000f58",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_08000f60",
            "FUN_0800422e",
            "FUN_0800151c",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c"
        ],
        [
            "FUN_080014f0"
        ]
    ],
    "locked_functions": []
}