{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_status_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeStatus_000800f4(undefined4 status)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_status_000800f4",
                "param_1": "status"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "calculate_averages_00080164",
            "code": "\nvoid calculate_averages_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  calculate_weighted_average_000806f8(&DAT_200708e8,0x5a);\n  calculate_weighted_average_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "calculate_averages_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_calculate_averages_000801e0",
            "code": "\nundefined8 initialize_and_calculate_averages_000801e0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_memory_000813dc(&DAT_20070be8,0xe100,param_3,param_4,param_4);\n  perform_operation_00080f0c(0xd,1);\n  perform_operation_00080f0c(6,1);\n  perform_operation_00080f0c(0x39,0);\n  perform_operation_00080f0c(4,0);\n  perform_operation_00080f0c(3,0);\n  perform_operation_00080f0c(2,0);\n  perform_operation_000806a0(&DAT_200708d4,5);\n  perform_operation_000806a0(&DAT_200708e8,6);\n  calculate_averages_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_calculate_averages_000801e0"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 result;\n  int difference;\n  undefined *pointer;\n  undefined stackArray [12];\n  \n  DAT_200708c0 = calculate_result_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  update_parameters_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculate_averages_00080164();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = calculate_result_00081624(3,1,20000);\n      DAT_200708d8 = calculate_weighted_average_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculate_weighted_average_0008145c(result,1000,2000,0x28,0x96);\n      while (difference = calculate_difference_00081248(&DAT_20070be8), 0 < difference) {\n        retrieve_next_byte_00081276(&DAT_20070be8);\n        thunk_convert_base_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        process_data_000810c4(&DAT_20070be8,&DAT_00084b13);\n        calculate_sum_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      calculate_weighted_average_000806f8(&DAT_200708e8,DAT_200708ec);\n      calculate_weighted_average_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculate_averages_00080164();\n        calculate_sum_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      difference = calculate_difference_00081248(&DAT_20070be8);\n      if (0 < difference) {\n        process_and_update_strings_00081214(stackArray,&DAT_20070be8,0x2c);\n        check_and_update_params_00081560(&DAT_200708dc,stackArray);\n        update_relocation_offset_00081472(stackArray);\n        process_and_update_strings_00081214(stackArray,&DAT_20070be8,10);\n        check_and_update_params_00081560(&DAT_200708c8,stackArray);\n        update_relocation_offset_00081472(stackArray);\n        retrieve_next_byte_00081276(&DAT_20070be8);\n        difference = is_valid_string_000815b8(&DAT_200708dc,\"steer\");\n        if (difference == 0) goto LAB_0008039c;\n        result = parse_integer_000815de(&DAT_200708c8);\n        pointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculate_averages_00080164();\n    calculate_sum_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  difference = is_valid_string_000815b8(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    result = parse_integer_000815de(&DAT_200708c8);\n    pointer = &DAT_200708e8;\nLAB_000803b2:\n    calculate_weighted_average_000806f8(pointer,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "uVar1": "result",
                "iVar2": "difference",
                "puVar3": "pointer",
                "auStack_1c": "stackArray"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "start_tc_000803fc",
            "code": "\nvoid startTC_000803fc(int channelIndex,uint paramIndex,undefined4 bitMask,uint bitPosition)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(paramIndex,channelIndex);\n  checkAndSetBit(bitMask);\n  configureTCChannel(channelIndex,paramIndex,0xc002);\n  setParamValue(channelIndex,paramIndex,0xa41);\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  *(undefined4 *)(channelIndex + paramIndex * 0x40 + 0x24) = 4;\n  if (2 < paramIndex) {\n    combinedParams = handleAssertionFailure(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         tempVar1,tempVar2);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "start_tc_000803fc",
                "param_1": "channelIndex",
                "param_2": "paramIndex",
                "param_3": "bitMask",
                "param_4": "bitPosition",
                "unaff_r4": "tempVar1",
                "in_lr": "tempVar2",
                "uVar1": "combinedParams",
                "check_and_set_bit_00080aa8": "checkAndSetBit",
                "configure_tc_channel_00080b2c": "configureTCChannel",
                "set_param_value_00080b90": "setParamValue",
                "assertion_failure_000816f8": "handleAssertionFailure"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint upperBound;\n  int tempVar;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempVar = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempVar < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19) < 0\n       )) {\n      updateParameters((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  upperBound = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempVar = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempVar < (int)upperBound) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempVar) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar) * 8] << 0x19\n                  )) {\n      return;\n    }\n    updateParameters((&DAT_200708f8)[(tempVar + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  upperBound = (elfArray[6].r_offset / 1000000) * 20000 >> 5;\n  if (upperBound <= *(int *)(data + 0x10) + 4U) {\n    upperBound = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = upperBound;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "upperBound",
                "iVar2": "tempVar",
                "update_parameters_00081014": "updateParameters",
                "Elf32_Rel_ARRAY_20070000": "elfArray"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_1_000805a8",
            "code": "\nvoid update_param_1_000805a8(byte *output_byte)\n\n{\n  char updated_byte;\n  uint temp_value;\n  \n  temp_value = (uint)DAT_200708f0;\n  if (temp_value < 0x3c) {\n    updated_byte = DAT_200708f0 + 1;\n    *output_byte = DAT_200708f0;\n    DAT_200708f0 = updated_byte;\n    *(uint *)(&DAT_200708fc + temp_value * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output_byte = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_1_000805a8",
                "param_1": "output_byte",
                "cVar1": "updated_byte",
                "uVar2": "temp_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "perform_operation_000806a0",
            "code": "\nbyte performOperation_000806a0(byte *inputData,undefined4 paramValue)\n\n{\n  byte tempByte;\n  undefined4 startAddress;\n  uint rowIndex;\n  undefined4 rangeValue;\n  int iterIndex;\n  uint param1Value;\n  \n  if (0x3b < *inputData) goto LAB_00080660;\n  perform_operation_00080f0c(paramValue,1,0x220,*inputData,0x960);\n  param1Value = (uint)*inputData;\n  tempByte = (&DAT_200708f8)[param1Value * 8];\n  inputData[2] = 0;\n  rowIndex = param1Value / 0xc;\n  (&DAT_200708f8)[param1Value * 8] = tempByte & 0xc0 | (byte)paramValue & 0x3f;\n  inputData[1] = 0;\n  iterIndex = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(iterIndex + rowIndex * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    iterIndex = iterIndex + 1;\n  } while (iterIndex != 0xc);\n  if (rowIndex == 0) {\n    startAddress = 0x40084000;\n    rangeValue = 0x1e;\nLAB_0008064c:\n    start_tc_000803fc(startAddress,rowIndex,rangeValue,rangeValue);\n  }\n  else {\n    if (rowIndex == 1) {\n      startAddress = 0x40084000;\n      rangeValue = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (rowIndex == 2) {\n      startAddress = 0x40084000;\n      rangeValue = 0x20;\n      goto LAB_0008064c;\n    }\n    if (rowIndex == 3) {\n      startAddress = 0x40080000;\n      rowIndex = 2;\n      rangeValue = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (rowIndex == 4) {\n      startAddress = 0x40080000;\n      rowIndex = 0;\n      rangeValue = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputData * 8] = (&DAT_200708f8)[(uint)*inputData * 8] | 0x40;\nLAB_00080660:\n  return *inputData;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "perform_operation_000806a0",
                "param_1": "inputData",
                "param_2": "paramValue",
                "bVar1": "tempByte",
                "uVar2": "startAddress",
                "uVar3": "rowIndex",
                "uVar4": "rangeValue",
                "iVar5": "iterIndex",
                "uVar6": "param1Value"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_weighted_average_000806f8",
            "code": "\nvoid calculate_weighted_average_000806f8(byte *byte_array,uint size)\n\n{\n  uint clamped_size;\n  \n  if ((int)size < 0x220) {\n    clamped_size = size;\n    if (0xb3 < (int)size) {\n      clamped_size = 0xb4;\n    }\n    size = weighted_average(clamped_size & ~((int)clamped_size >> 0x1f),0,0xb4,(0x88 - (char)byte_array[1]) * 4,\n                           (600 - (char)byte_array[2]) * 4,size);\n  }\n  if (*byte_array < 0x3c) {\n    clamped_size = (0x88 - (char)byte_array[1]) * 4;\n    if (((int)(size + (0x88 - (char)byte_array[1]) * -4) < 0 == SBORROW4(size,clamped_size)) &&\n       (clamped_size = (600 - (char)byte_array[2]) * 4, (int)size <= (int)clamped_size)) {\n      clamped_size = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*byte_array * 8) =\n         (relocation_array[6].r_offset / 1000000) * (clamped_size - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_weighted_average_000806f8",
                "param_1": "byte_array",
                "param_2": "size",
                "uVar1": "clamped_size",
                "calculate_weighted_average_0008145c": "weighted_average",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_and_execute_00080774",
            "code": "\n\n\nvoid initialize_and_execute_00080774(void)\n\n{\n  int counter;\n  int next_counter;\n  \n  initialize_memory();\n  _DAT_e000e014 = elf_relocation_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions();\n  counter = 0;\n  do {\n    next_counter = counter + 1;\n    update_parameters(counter,0);\n    counter = next_counter;\n  } while (next_counter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameters_2(0x400e0e00,1,0x300,0);\n  update_parameters(0,1);\n  update_parameters_2(0x400e0e00,1,0xc00,0);\n  update_parameters_2(0x400e0e00,1,0x3000,0);\n  update_parameters_2(0x400e1400,2,0x30,0);\n  update_parameters_2(0x400e1000,1,0xc00,0);\n  update_parameters_2(0x400e0e00,1,3,0);\n  update_parameters_2(0x400e1000,1,0xc000,0);\n  check_and_set_bit(0x25);\n  calculate_threshold(0x400c0000,elf_relocation_array[6].r_offset,20000000,0xc);\n  update_flags(0x400c0000,0,0x300000,1);\n  update_register_value(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  initialize_value(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_and_execute_00080774",
                "iVar1": "counter",
                "iVar2": "next_counter",
                "initialize_memory_00080b98": "initialize_memory",
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "execute_functions_00081778": "execute_functions",
                "update_parameters_00081014": "update_parameters",
                "update_parameters_00080a30": "update_parameters_2",
                "check_and_set_bit_00080aa8": "check_and_set_bit",
                "calculate_threshold_00080c98": "calculate_threshold",
                "update_flags_00080d3e": "update_flags",
                "update_register_value_00080d30": "update_register_value",
                "set_param_value_00080d6a": "set_param_value",
                "initialize_value_00080d62": "initialize_value"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_memory_and_params_0008089c",
            "code": "\nvoid initialize_memory_and_params_0008089c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory_000811b0(&DAT_20070c0c);\n  initialize_memory_000811b0(&DAT_20070b60);\n  initialize_params_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param_3);\n  initialize_memory_000811b0(&DAT_20070e6c);\n  initialize_memory_000811b0(&DAT_20070ef4);\n  initialize_memory_000811b0(&DAT_20070f7c);\n  initialize_memory_000811b0(&DAT_20070ad8);\n  initialize_memory_000811b0(&DAT_20070d0c);\n  initialize_memory_000811b0(&DAT_20070d94);\n  initialize_and_update_params_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_update_params_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_update_params_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_memory_and_params_0008089c"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_process_differences_00080970",
            "code": "\nvoid checkAndProcessDifferences_00080970(void)\n\n{\n  int iVar1;\n  \n  iVar1 = calculateDifference(&DAT_20070be8);\n  if (iVar1 != 0) {\n    FUNC_0008073a();\n  }\n  iVar1 = calculateDifference(&DAT_20070c94);\n  if (iVar1 != 0) {\n    FUNC_00080748();\n  }\n  iVar1 = calculateDifference(&DAT_20070cbc);\n  if (iVar1 != 0) {\n    FUNC_0008074a();\n  }\n  iVar1 = calculateDifference(&DAT_20070ce4);\n  if (iVar1 != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_process_differences_00080970",
                "calculate_difference_00081248": "calculateDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_param_and_switch_000809be",
            "code": "\nvoid updateParamAndSwitch_000809be(int data,undefined4 mode,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(data + 0x44) = value;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(data + 0x70) & *(uint *)(data + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(data + 0x70) | value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(data + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(data + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_param_and_switch_000809be",
                "param_1": "data",
                "param_2": "mode",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *outputArray,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[17] = value;\n  if (isNegative) {\n    outputArray[25] = value;\n  }\n  if (!isNegative) {\n    outputArray[24] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = value;\n  }\n  if (!isNegative) {\n    outputArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[32] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative",
                "param_1[0x11]": "outputArray[17]",
                "param_1[0x19]": "outputArray[25]",
                "param_1[0x18]": "outputArray[24]",
                "param_1[8]": "outputArray[8]",
                "param_1[9]": "outputArray[9]",
                "param_1[0x20]": "outputArray[32]",
                "param_1[5]": "outputArray[5]"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *paramsArray,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  paramsArray[0x11] = value;\n  if (condition3 == 0) {\n    paramsArray[0x18] = value;\n  }\n  else {\n    paramsArray[0x19] = value;\n  }\n  if (condition2 == 0) {\n    paramsArray[0x15] = value;\n  }\n  else {\n    paramsArray[0x14] = value;\n  }\n  if (condition1 == 0) {\n    paramsArray[0xd] = value;\n  }\n  else {\n    paramsArray[0xc] = value;\n  }\n  paramsArray[4] = value;\n  *paramsArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "paramsArray",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameters_00080a30",
            "code": "\nundefined4 updateParameters_00080a30(int dataAddress,int paramType,undefined4 newValue,uint bitFlag)\n\n{\n  bool isNegativeFlag;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    update_param_and_switch_000809be(dataAddress,paramType,newValue);\n    isNegativeFlag = (int)(bitFlag << 0x1f) < 0;\n    *(undefined4 *)(dataAddress + 0x44) = newValue;\n    if (isNegativeFlag) {\n      *(undefined4 *)(dataAddress + 100) = newValue;\n    }\n    if (!isNegativeFlag) {\n      *(undefined4 *)(dataAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    set_values_000809e4(dataAddress,newValue,bitFlag,0x809e5,dataAddress);\n    break;\n  case 4:\n  case 5:\n    set_parameters_00080a0a(dataAddress,newValue,paramType == 5,(bitFlag << 0x1d) >> 0x1f,bitFlag & 1,paramType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameters_00080a30",
                "param_1": "dataAddress",
                "param_2": "paramType",
                "param_3": "newValue",
                "param_4": "bitFlag",
                "bVar1": "isNegativeFlag"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_and_00080a94",
            "code": "\nuint checkBitwiseAND_00080a94(int inputParam,uint bitMask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputParam + 8) & bitMask;\n  if (result != 0) {\n    if ((bitMask & *(uint *)(inputParam + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_00080a94",
                "param_1": "inputParam",
                "param_2": "bitMask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_set_bit_00080aa8",
            "code": "\n\n\nundefined4 check_and_set_bit_00080aa8(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTCChannel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int memoryAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = assertion_failure_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  memoryAddress = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(memoryAddress + 0x28) = 0xffffffff;\n  *(char **)(memoryAddress + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "memoryAddress"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid setParamValue_00080b90(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + offset * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "elfRelTable"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_system_control_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *outputArray,uint totalSize,int segmentSize,int timeInterval)\n\n{\n  uint segmentsCount;\n  uint index;\n  uint thresholdArray [16];\n  \n  thresholdArray[0] = 0;\n  thresholdArray[1] = 8;\n  thresholdArray[2] = 0x10;\n  thresholdArray[3] = 0x18;\n  thresholdArray[4] = 0x40;\n  thresholdArray[5] = 0x50;\n  thresholdArray[6] = 0x60;\n  thresholdArray[7] = 0x70;\n  thresholdArray[8] = 0x200;\n  thresholdArray[9] = 0x240;\n  thresholdArray[10] = 0x280;\n  thresholdArray[11] = 0x2c0;\n  thresholdArray[12] = 0x300;\n  thresholdArray[13] = 0x340;\n  thresholdArray[14] = 0x380;\n  thresholdArray[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  segmentsCount = totalSize / (uint)(segmentSize * 2);\n  if (totalSize == segmentSize * 2 * segmentsCount) {\n    segmentsCount = segmentsCount - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(timeInterval * (int)(((ulonglong)totalSize / (ulonglong)((segmentsCount + 1) * 2)) / 1000000)) <=\n        thresholdArray[index]) {\n      outputArray[1] = (index & 0xf) << 0x10 | (segmentsCount & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "outputArray",
                "param_2": "totalSize",
                "param_3": "segmentSize",
                "param_4": "timeInterval",
                "uVar1": "segmentsCount",
                "uVar2": "index",
                "local_58": "thresholdArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_register_value_00080d30",
            "code": "\nvoid updateRegisterValue_00080d30(int registerAddress,uint valueToOr,uint bitToSet)\n\n{\n  *(uint *)(registerAddress + 4) = valueToOr | *(uint *)(registerAddress + 4) | (bitToSet & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_register_value_00080d30",
                "param_1": "registerAddress",
                "param_2": "valueToOr",
                "param_3": "bitToSet"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_flags_00080d3e",
            "code": "\nvoid updateFlags_00080d3e(int dataAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       value2 | *(uint *)(dataAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_flags_00080d3e",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_00080d58",
            "code": "\nvoid setBit_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_value_00080d62",
            "code": "\nvoid initializeValue_00080d62(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_value_00080d62",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "do_nothing_00080e80",
            "code": "\nvoid do_nothing_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "do_nothing_00080e80",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "add_and_update_value_00080e88",
            "code": "\nint addAndUpdateValue_00080e88(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "add_and_update_value_00080e88",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_negative_one_00080eaa",
            "code": "\nint getNegativeOne_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_negative_one_00080eaa",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 memoryAddress,int bufferAddress)\n\n{\n  *(undefined4 *)(bufferAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "memoryAddress",
                "param_2": "bufferAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_flag_00080eba",
            "code": "\nundefined4 initializeFlag_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_flag_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_application_00080ebe",
            "code": "\nundefined4 initialize_application_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_application_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "check_completion_status_00080ec2",
            "code": "\ncompletion_status check_completion_status_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "check_completion_status_00080ec2",
                "undefined4": "completion_status"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param1,int source,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "run_infinite_loop_00080eec",
            "code": "\nvoid runInfiniteLoop_00080eec(undefined4 status,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  printExitStatus(\"Exiting with status %d.\\n\",status,param3,param4,param4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "run_infinite_loop_00080eec",
                "param_1": "status",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_function_000817c8": "printExitStatus"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_default_value_00080efe",
            "code": "\nundefined4 get_default_value_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_default_value_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_data_value_thunk_000816d8",
            "code": "\nundefined4 getGlobalDataValue_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_data_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "perform_operation_00080f0c",
            "code": "\n\n\nint performOperation_00080f0c(int inputParam1,int inputParam2)\n\n{\n  int outputVar;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte tempVar4;\n  byte tempVar5;\n  int tempVar6;\n  int tempVar7;\n  \n  outputVar = inputParam1;\n  if ((&DAT_00084b50)[inputParam1 * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[inputParam1] & 0xf) == 4) {\n      outputVar = set_bit_00080d58(0x400c0000,(&DAT_00084b5d)[inputParam1 * 0x1c]);\n    }\n    tempVar5 = (&DAT_20070e1c)[inputParam1];\n    tempVar4 = tempVar5 & 0xf;\n    if ((tempVar4 < 3) && (tempVar5 != 0)) {\n      if (tempVar4 == 2) {\n        if (inputParam2 == 0) {\n          return outputVar;\n        }\n      }\n      else if (tempVar4 == 1) {\n        if (inputParam2 == 2) {\n          return outputVar;\n        }\n      }\n      else if (tempVar4 == 3) {\n        if (inputParam2 == 1) {\n          return outputVar;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (inputParam2 != 1) {\nLAB_00080f68:\n      if (inputParam2 == 0) {\n        outputVar = inputParam1 * 0x1c;\n        check_and_set_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + outputVar));\n        outputVar = update_parameters_00080a30(*(undefined4 *)(&DAT_00084b44 + outputVar),3,\n                             *(undefined4 *)(&DAT_00084b48 + outputVar),0);\n        tempVar5 = (&DAT_20070e1c)[inputParam1] & 0xf0 | 2;\n      }\n      else {\n        if (inputParam2 != 2) {\n          return outputVar;\n        }\n        outputVar = inputParam1 * 0x1c;\n        check_and_set_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + outputVar));\n        outputVar = update_parameters_00080a30(*(undefined4 *)(&DAT_00084b44 + outputVar),3,\n                             *(undefined4 *)(&DAT_00084b48 + outputVar),1);\n        tempVar5 = (&DAT_20070e1c)[inputParam1] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[inputParam1] = tempVar5;\n      return outputVar;\n    }\n    tempVar6 = inputParam1 * 0x1c;\n    tempVar7 = *(int *)(&DAT_00084b44 + tempVar6);\n    if (tempVar5 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    outputVar = update_parameters_00080a30(tempVar7,tempVar2,*(undefined4 *)(&DAT_00084b48 + tempVar6),\n                         *(undefined4 *)(&DAT_00084b54 + tempVar6));\n    (&DAT_20070e1c)[inputParam1] = (&DAT_20070e1c)[inputParam1] & 0xf0 | 3;\n    if (*(int *)(tempVar7 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084b4c + tempVar6);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return outputVar;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "perform_operation_00080f0c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "outputVar",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "tempVar4",
                "bVar6": "tempVar5",
                "iVar7": "tempVar6",
                "iVar8": "tempVar7"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_parameters_00081014",
            "code": "\nvoid updateParameters_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      perform_operation_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = check_bitwise_and_00080a94(address,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = data;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = data;\n      return;\n    }\n    set_parameters_00080a0a(address,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_parameters_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "address"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_data_000810a6",
            "code": "\nvoid process_data_000810a6(int *data_ptr,int data_size,undefined4 result_ptr,undefined4 additional_param)\n\n{\n  undefined4 nonzero_byte_count;\n  \n  if (data_size != 0) {\n    nonzero_byte_count = count_nonzero_bytes_00082688(data_size);\n    (**(code **)(*data_ptr + 4))(data_ptr,data_size,nonzero_byte_count,*(code **)(*data_ptr + 4),additional_param);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "result_ptr",
                "param_4": "additional_param",
                "uVar1": "nonzero_byte_count"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_data_000810c4",
            "code": "\nvoid process_data_000810c4(void)\n\n{\n  process_specific_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_data_000810c4",
                "process_data_000810a6": "process_specific_data"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_code_000810cc",
            "code": "\nvoid executeCode_000810cc(undefined4 *functionAddress)\n\n{\n  (**(code **)*functionAddress)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_code_000810cc",
                "param_1": "functionAddress"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_data_000810d8",
            "code": "\nvoid processData_000810d8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  process_data_000810a6(input1,&DAT_00085635,input3,input4,input4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_data_000810d8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_data_000810a6();\n  result2 = process_data_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_decimal_to_base_000810fc",
            "code": "\nvoid convertDecimalToBase_000810fc(undefined4 inputBuffer,uint decimalNumber,uint base)\n\n{\n  char *outputBuffer;\n  uint quotient;\n  char *currentDigit;\n  char digit;\n  uint remainder;\n  char buffer [5];\n  \n  buffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  outputBuffer = buffer;\n  do {\n    currentDigit = outputBuffer;\n    quotient = decimalNumber / base;\n    remainder = decimalNumber - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *currentDigit = digit;\n    decimalNumber = quotient;\n    outputBuffer = currentDigit + -1;\n  } while (quotient != 0);\n  process_data_000810a6(inputBuffer,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_000810fc",
                "param_1": "inputBuffer",
                "param_2": "decimalNumber",
                "param_3": "base",
                "pcVar1": "outputBuffer",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "digit",
                "uVar5": "remainder",
                "local_15": "buffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_base_0008113a",
            "code": "\nint convertBase_0008113a(undefined4 *functionPointer,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeResult;\n  \n  if (base == 0) {\n    result = (**(code **)*functionPointer)(functionPointer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_code_000810cc(functionPointer,0x2d);\n      negativeResult = convert_decimal_to_base_000810fc(functionPointer,-number,10);\n      return negativeResult + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_000810fc(functionPointer,number,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_base_0008113a",
                "param_1": "functionPointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeResult"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_base_thunk_0008113a",
            "code": "\nint convert_base_thunk_0008113a(undefined4 *input_data,uint number,uint base,undefined4 extra_param)\n\n{\n  int result;\n  int conversion_result;\n  \n  if (base == 0) {\n    result = (**(code **)*input_data)(input_data,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_code_000810cc(input_data,0x2d);\n      conversion_result = convert_decimal_to_base_000810fc(input_data,-number,10);\n      return conversion_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_decimal_to_base_000810fc(input_data,number,base,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_base_thunk_0008113a",
                "param_1": "input_data",
                "param_2": "number",
                "param_3": "base",
                "param_4": "extra_param",
                "iVar1": "result",
                "iVar2": "conversion_result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 inputValue)\n\n{\n  int convertedValue;\n  int processedData;\n  \n  convertedValue = convert_base_0008113a();\n  processedData = process_data_000810d8(inputValue);\n  return processedData + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "inputValue",
                "iVar1": "convertedValue",
                "iVar2": "processedData"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_rel_info_equals_zero_00081190",
            "code": "\nvoid execute_if_rel_info_equals_zero_00081190(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(function_to_call *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_rel_info_equals_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset",
                "code": "function_to_call"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryBlock)\n\n{\n  fillMemoryWithZeroes(memoryBlock,0,0x80);\n  *(undefined4 *)(memoryBlock + 0x80) = 0;\n  *(undefined4 *)(memoryBlock + 0x84) = 0;\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryBlock",
                "memset_with_value_00081f00": "fillMemoryWithZeroes"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_and_store_value_000811ca",
            "code": "\nvoid updateAndStoreValue_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_and_store_value_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "process_data_000811e8",
            "code": "\nint process_data_000811e8(int *data_array)\n\n{\n  int global_data_value;\n  \n  global_data_value = get_global_data_value();\n  data_array[3] = global_data_value;\n  do {\n    global_data_value = (**(code **)(*data_array + 0xc))(data_array);\n    if (-1 < global_data_value) {\n      return global_data_value;\n    }\n    global_data_value = get_global_data_value();\n  } while ((unsigned_int)(global_data_value - data_array[3]) < (unsigned_int)data_array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "param_1": "data_array",
                "iVar1": "global_data_value",
                "get_global_data_value_thunk_000816d8": "get_global_data_value",
                "param_1[3]": "data_array[3]",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_and_update_strings_00081214",
            "code": "\nvoid process_and_update_strings_00081214(undefined4 data_ptr,undefined4 string_ptr,uint target_value)\n\n{\n  uint result;\n  \n  initialize_data(data_ptr,&DAT_00085637);\n  while ((result = process_data(string_ptr), -1 < (int)result && (result != target_value))) {\n    copy_and_update_string(data_ptr,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_and_update_strings_00081214",
                "param_1": "data_ptr",
                "param_2": "string_ptr",
                "param_3": "target_value",
                "uVar1": "result",
                "initialize_data_000814f6": "initialize_data",
                "process_data_000811e8": "process_data",
                "copy_and_update_string_0008159e": "copy_and_update_string"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculate_difference_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "retrieve_next_byte_00081276",
            "code": "\nuint retrieveNextByte_00081276(int memoryAddress)\n\n{\n  byte nextByte;\n  int memoryBlock;\n  \n  memoryBlock = *(int *)(memoryAddress + 0x10);\n  if (*(int *)(memoryBlock + 0x80) != *(int *)(memoryBlock + 0x84)) {\n    nextByte = *(byte *)(memoryBlock + *(int *)(memoryBlock + 0x84));\n    *(uint *)(memoryBlock + 0x84) = *(int *)(memoryBlock + 0x84) + 1U & 0x7f;\n    return (uint)nextByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "retrieve_next_byte_00081276",
                "param_1": "memoryAddress",
                "bVar1": "nextByte",
                "iVar2": "memoryBlock"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_value_000812b8",
            "code": "\nundefined4 updateValue_000812b8(int dataPointer,undefined4 newValue)\n\n{\n  int ptr;\n  uint nextIndex;\n  \n  ptr = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr + 0x84) == *(int *)(ptr + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    nextIndex = *(int *)(ptr + 0x80) + 1U & 0x8000007f;\n    if ((int)nextIndex < 0) {\n      nextIndex = (nextIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr + 0x84) == nextIndex);\n    *(char *)(ptr + *(int *)(ptr + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = nextIndex;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_value_000812b8",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "ptr",
                "uVar2": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_params_00081348",
            "code": "\nvoid initializeParams_00081348(undefined4 *paramsArray,undefined4 value2,undefined value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  paramsArray[1] = 0;\n  paramsArray[2] = 1000;\n  paramsArray[6] = value2;\n  *paramsArray = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(paramsArray + 7) = value3;\n  paramsArray[4] = value5;\n  paramsArray[8] = value4;\n  paramsArray[5] = value6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "paramsArray",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_memory_000813dc",
            "code": "\nvoid initializeMemory_000813dc(int memoryAddress,uint pageSize)\n\n{\n  int tempVar1;\n  undefined4 *pointerVar;\n  \n  check_and_set_bit_00080aa8(*(undefined4 *)(memoryAddress + 0x20));\n  pointerVar = *(undefined4 **)(memoryAddress + 0x18);\n  pointerVar[0x48] = 0x202;\n  *pointerVar = 0xac;\n  pointerVar[1] = 0x800;\n  pointerVar[8] = relocationArray[6].offset / pageSize >> 4;\n  pointerVar[3] = 0xffffffff;\n  pointerVar[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byteVal *)(memoryAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byteVal *)(memoryAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(memoryAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(memoryAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *pointerVar = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_memory_000813dc",
                "param_1": "memoryAddress",
                "param_2": "pageSize",
                "iVar1": "tempVar1",
                "puVar2": "pointerVar",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset",
                "byte": "byteVal"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_update_params_00081438",
            "code": "\nundefined4 * initializeAndUpdateParams_00081438(undefined4 *params,undefined4 newValue)\n\n{\n  initializeParams();\n  *params = &PTR_update_value_000812b8_1_00085680;\n  params[9] = newValue;\n  return params;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_update_params_00081438",
                "param_1": "params",
                "param_2": "newValue",
                "initialize_params_00081348": "initializeParams"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_weighted_average_0008145c",
            "code": "\nint calculateWeightedAverage_0008145c(int initialValue,int previousValue,int finalValue,int initialWeight,int finalWeight)\n\n{\n  return (uint)((initialValue - previousValue) * (finalWeight - initialWeight)) / (uint)(finalValue - previousValue) + initialWeight;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_weighted_average_0008145c",
                "param_1": "initialValue",
                "param_2": "previousValue",
                "param_3": "finalValue",
                "param_4": "initialWeight",
                "param_5": "finalWeight"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "update_relocation_offset_00081472",
            "code": "\nundefined4 * update_relocation_offset_00081472(undefined4 *pointer)\n\n{\n  update_relocation_offset_00081472_00081800(*pointer);\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_00081472": "update_relocation_offset_00081472",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "clear_memory_00081480",
            "code": "\nvoid clearMemory_00081480(int *memoryPtr)\n\n{\n  if (*memoryPtr != 0) {\n    updateRelocationOffset();\n  }\n  *memoryPtr = 0;\n  memoryPtr[2] = 0;\n  memoryPtr[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "clear_memory_00081480",
                "param_1": "memoryPtr",
                "update_relocation_offset_00081800": "updateRelocationOffset"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "relocate_and_optimize_00081496",
            "code": "\nint relocateAndOptimize_00081496(int *data,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = relocate_and_optimize_00081f9c(*data,size + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *data = result;\n    data[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "relocate_and_optimize_00081496",
                "param_1": "data",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_optimize_000814ae",
            "code": "\nundefined4 checkAndOptimize_000814ae(int *inputArray,uint threshold)\n\n{\n  int relocationResult;\n  \n  if ((*inputArray == 0) || ((uint)inputArray[1] < threshold)) {\n    relocationResult = relocate_and_optimize_00081496(inputArray);\n    if (relocationResult == 0) {\n      return 0;\n    }\n    if (inputArray[2] == 0) {\n      *(undefined *)*inputArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_optimize_000814ae",
                "param_1": "inputArray",
                "param_2": "threshold",
                "iVar1": "relocationResult"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "process_data_000814d0",
            "code": "\nundefined4 * processData_000814d0(undefined4 *data,undefined4 source,undefined4 value)\n\n{\n  int result;\n  \n  result = check_and_optimize_000814ae(data,value);\n  if (result == 0) {\n    clear_memory_00081480(data);\n  }\n  else {\n    data[2] = value;\n    copy_string_000825cc(*data,source);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "process_data_000814d0",
                "param_1": "data",
                "param_2": "source",
                "param_3": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_data_000814f6",
            "code": "\nundefined4 * initializeData_000814f6(undefined4 *outputArray,int inputSize)\n\n{\n  undefined4 nonZeroByteCount;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputSize != 0) {\n    nonZeroByteCount = count_nonzero_bytes_00082688(inputSize);\n    process_data_000814d0(outputArray,inputSize,nonZeroByteCount);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_data_000814f6",
                "param_1": "outputArray",
                "param_2": "inputSize",
                "uVar1": "nonZeroByteCount"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_params_0008151c",
            "code": "\nvoid updateParams_0008151c(int *destParams,int *srcParams)\n\n{\n  if (*destParams != 0) {\n    if ((*srcParams != 0) && ((uint)srcParams[2] <= (uint)destParams[1])) {\n      copyString();\n      destParams[2] = srcParams[2];\n      goto endLabel;\n    }\n    updateRelocationOffset();\n  }\n  *destParams = *srcParams;\n  destParams[1] = srcParams[1];\n  destParams[2] = srcParams[2];\n  *srcParams = 0;\n  srcParams[1] = 0;\nendLabel:\n  srcParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "param_1": "destParams",
                "param_2": "srcParams",
                "copy_string_000825cc": "copyString",
                "update_relocation_offset_00081800": "updateRelocationOffset",
                "LAB_00081558": "endLabel"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_update_params_00081560",
            "code": "\nint checkAndUpdateParams_00081560(int inputParam,int comparisonParam)\n\n{\n  if (inputParam != comparisonParam) {\n    updateParamsIfNeeded();\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_update_params_00081560",
                "param_1": "inputParam",
                "param_2": "comparisonParam",
                "update_params_0008151c": "updateParamsIfNeeded"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "copy_and_update_string_00081570",
            "code": "\nundefined4 copy_and_update_string_00081570(int *ptr_array,int string_length,int update_length)\n\n{\n  int optimization_result;\n  int ptr_array_2;\n  \n  ptr_array_2 = ptr_array[2];\n  if (string_length == 0) {\n    return 0;\n  }\n  if (update_length != 0) {\n    optimization_result = check_and_optimize_000814ae(ptr_array,ptr_array_2 + update_length);\n    if (optimization_result == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*ptr_array + ptr_array[2],string_length);\n    ptr_array[2] = ptr_array_2 + update_length;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "copy_and_update_string_00081570",
                "param_1": "ptr_array",
                "param_2": "string_length",
                "param_3": "update_length",
                "iVar1": "optimization_result",
                "iVar2": "ptr_array_2"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "copy_and_update_string_0008159e",
            "code": "\nvoid copyAndUpdateString_0008159e(undefined4 sourceString,undefined4 destinationString,undefined4 length)\n\n{\n  undefined4 updatedString;\n  undefined4 stackLength;\n  \n  stackLength = length;\n  copy_and_update_string_00081570(sourceString,&updatedString,1,0,sourceString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "copy_and_update_string_0008159e",
                "param_1": "sourceString",
                "param_2": "destinationString",
                "param_3": "length",
                "local_c": "updatedString",
                "uStack_8": "stackLength"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "is_valid_string_000815b8",
            "code": "\nint isValidString_000815b8(byte **stringList,byte *comparisonString)\n\n{\n  uint comparisonResult;\n  int isValid;\n  \n  if (stringList[2] == (byte *)0x0) {\n    if (comparisonString == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (comparisonString != (byte *)0x0) {\n      comparisonResult = compareStrings(*stringList);\n      goto LAB_000815d4;\n    }\n    comparisonString = *stringList;\n  }\n  comparisonResult = (uint)*comparisonString;\nLAB_000815d4:\n  isValid = 1 - comparisonResult;\n  if (1 < comparisonResult) {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "is_valid_string_000815b8",
                "param_1": "stringList",
                "param_2": "comparisonString",
                "uVar1": "comparisonResult",
                "iVar2": "isValid",
                "compare_strings_00082390": "compareStrings"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input)\n\n{\n  byte byte_value;\n  byte is_negative;\n  uint result;\n  byte *input_ptr;\n  uint current_char;\n  byte *current_ptr;\n  int adjusted_value;\n  int is_valid;\n  uint max_divisor;\n  uint max_result;\n  \n  input_ptr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    current_ptr = input_ptr;\n    input_ptr = current_ptr + 1;\n    current_char = (uint)*current_ptr;\n    byte_value = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_char + 1);\n    is_negative = byte_value & 8;\n  } while ((byte_value & 8) != 0);\n  if (current_char == 0x2d) {\n    input_ptr = current_ptr + 2;\n    current_char = (uint)current_ptr[1];\n    is_negative = 1;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)current_ptr[1];\n    input_ptr = current_ptr + 2;\n  }\n  if (is_negative == 0) {\n    max_result = 0x7fffffff;\n  }\n  else {\n    max_result = 0x80000000;\n  }\n  max_divisor = max_result / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    byte_value = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + current_char + 1);\n    if ((byte_value & 4) == 0) {\n      if ((byte_value & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte_value & 3) == 1) {\n        adjusted_value = 0x37;\n      }\n      else {\n        adjusted_value = 0x57;\n      }\n      adjusted_value = current_char - adjusted_value;\n    }\n    else {\n      adjusted_value = current_char - 0x30;\n    }\n    if (9 < adjusted_value) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_divisor <= result && result != max_divisor) || ((result == max_divisor && ((int)(max_result % 10) < adjusted_value))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + adjusted_value;\n        is_valid = 1;\n      }\n    }\n    current_char = (uint)*input_ptr;\n    input_ptr = input_ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_000815de",
                "param_1": "input",
                "bVar1": "byte_value",
                "bVar2": "is_negative",
                "uVar3": "result",
                "pbVar4": "input_ptr",
                "uVar5": "current_char",
                "pbVar6": "current_ptr",
                "iVar7": "adjusted_value",
                "iVar8": "is_valid",
                "uVar9": "max_divisor",
                "uVar10": "max_result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_system_control_000815ec",
            "code": "\nvoid runSystemControl_000815ec(void)\n\n{\n  initializeMemory();\n  initiateExecution();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initializeAndCalculateAverages();\n  do {\n    executeSystemControl();\n    checkAndProcessDifferences();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_system_control_000815ec",
                "initialize_memory_00081618": "initializeMemory",
                "initialize_and_execute_00080774": "initiateExecution",
                "initialize_and_calculate_averages_000801e0": "initializeAndCalculateAverages",
                "control_system_00080250": "executeSystemControl",
                "check_and_process_differences_00080970": "checkAndProcessDifferences"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = check_conditions_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((constantArray[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)constantArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "constantArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_conditions_00081684",
            "code": "\nint check_conditions_00081684(uint *array,uint mask,uint value,int length)\n\n{\n  int count;\n  \n  do {\n    if ((*array & mask) != value) {\n      do {\n        if ((*array & mask) == value) {\n          count = 0;\n          do {\n            if ((*array & mask) != value) {\n              return count;\n            }\n            count = count + 1;\n          } while (length != count);\n          return 0;\n        }\n        length = length + -1;\n      } while (length != 0);\n      return 0;\n    }\n    length = length + -1;\n  } while (length != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_conditions_00081684",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "length",
                "iVar1": "count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_return_value_000816d8",
            "code": "\nundefined4 getReturnValue_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_return_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_params_and_call_function_000816ec",
            "code": "\nvoid updateParamsAndCallFunction_000816ec(dword param1,dword param2,dword param3)\n\n{\n  dword *pointerToRelArray;\n  uint relArrayEntry;\n  uint bitMask;\n  code *recoveredJumpTable;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  relArrayEntry = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  pointerToRelArray = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)relArrayEntry) {\n    pointerToRelArray = (dword *)relocate_and_optimize_000817f0(400);\n    if (pointerToRelArray == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*recoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *pointerToRelArray = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    pointerToRelArray[1] = 0;\n    relArrayEntry = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)pointerToRelArray;\n    pointerToRelArray[0x62] = 0;\n    pointerToRelArray[99] = 0;\n  }\n  bitMask = 1 << (relArrayEntry & 0xff);\n  pointerToRelArray[relArrayEntry + 0x22] = param1;\n  pointerToRelArray[0x62] = pointerToRelArray[0x62] | bitMask;\n  pointerToRelArray[relArrayEntry + 0x42] = param3;\n  pointerToRelArray[99] = bitMask | pointerToRelArray[99];\n  pointerToRelArray[1] = relArrayEntry + 1;\n  pointerToRelArray[relArrayEntry + 2] = param2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*recoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_params_and_call_function_000816ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pdVar1": "pointerToRelArray",
                "uVar2": "relArrayEntry",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "recoveredJumpTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "assertion_failure_000816f8",
            "code": "\nvoid assertionFailure_000816f8(undefined4 msg,undefined4 file,char *line,undefined4 function)\n\n{\n  undefined4 relocation;\n  undefined4 initialProcess;\n  char *additionalInfo;\n  undefined8 processInfo;\n  \n  relocation = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (line == (char *)0x0) goto LAB_0008171c;\n  initialProcess = function;\n  additionalInfo = \", function: \";\n  do {\n    function = msg;\n    process_relocation_00081750(relocation,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",initialProcess,msg,file,\n                 additionalInfo,line);\n    processInfo = initialize_process_000836ec();\n    file = (undefined4)((ulonglong)processInfo >> 0x20);\n    relocation = (undefined4)processInfo;\nLAB_0008171c:\n    line = \"\";\n    initialProcess = function;\n    additionalInfo = line;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "assertion_failure_000816f8",
                "param_1": "msg",
                "param_2": "file",
                "param_3": "line",
                "param_4": "function",
                "uVar1": "relocation",
                "uVar2": "initialProcess",
                "pcVar3": "additionalInfo",
                "uVar4": "processInfo"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_relocation_00081750",
            "code": "\nvoid processRelocation_00081750(undefined4 offset,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 modifiedArg2;\n  undefined4 modifiedArg3;\n  \n  modifiedArg2 = arg2;\n  modifiedArg3 = arg3;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,arg1,&modifiedArg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_relocation_00081750",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "modifiedArg2",
                "uStack_4": "modifiedArg3"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctions_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointers;\n  \n  FUNC_00085844();\n  functionPointers = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_functions_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointers"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "initialize_function_000817c8",
            "code": "\nvoid initializeFunction_000817c8(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stackC;\n  undefined4 stack8;\n  undefined4 stack4;\n  \n  stackC = param2;\n  stack8 = param3;\n  stack4 = param4;\n  process_formatted_string_0008289c(relArray[140].r_offset,\n               *(undefined4 *)(relArray[140].r_offset + 8),param1,&stackC);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "initialize_function_000817c8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "stackC",
                "uStack_8": "stack8",
                "uStack_4": "stack4",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "relocate_and_optimize_000817f0",
            "code": "\nvoid relocateAndOptimize_000817f0(undefined4 input)\n\n{\n  relocate_and_optimize_00081810(relocationOffset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "relocate_and_optimize_000817f0",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "update_relocation_offset_00081800",
            "code": "\nvoid updateRelocationOffset_00081800(undefined4 input)\n\n{\n  optimize_and_update_relocation_00083b10(relocationArray[140].r_offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "update_relocation_offset_00081800",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "relocate_and_optimize_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateAndOptimize_00081810(undefined4 *functionPointer,uint size)\n\n{\n  dword info;\n  int iVar1;\n  uint mask;\n  uint alignment;\n  int iVar2;\n  uint difference;\n  dword offset;\n  uint temp;\n  int tempVar;\n  undefined *pointer;\n  dword currentOffset;\n  dword previousOffset;\n  int index;\n  dword *currentData;\n  uint alignedSize;\n  undefined *relocatedPointer;\n  dword *currentInfo;\n  uint index2;\n  \n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < size)) {\nLAB_00081876:\n      *functionPointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(functionPointer);\n  info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((index != alignedSize + 0x20070464) ||\n       (iVar1 = index + 8, index = *(int *)(index + 0x14), iVar1 != index)) {\n      iVar2 = *(int *)(index + 0xc);\n      tempVar = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      alignedSize = *(uint *)(tempVar + 4);\n      iVar1 = *(int *)(index + 8);\n      *(int *)(iVar1 + 0xc) = iVar2;\n      *(int *)(iVar2 + 8) = iVar1;\n      *(uint *)(tempVar + 4) = alignedSize | 1;\n      FUNC_00081f98(functionPointer);\n      return (int *)(index + 8);\n    }\n    index2 = (alignedSize >> 3) + 2;\n  }\n  else {\n    index2 = alignedSize >> 9;\n    if (index2 == 0) {\n      iVar1 = 0x7e;\n      index = 0x3f;\n    }\n    else if (index2 < 5) {\n      index = (alignedSize >> 6) + 0x38;\n      iVar1 = index * 2;\n    }\n    else if (index2 < 0x15) {\n      index = index2 + 0x5b;\n      iVar1 = index * 2;\n    }\n    else if (index2 < 0x55) {\n      index = (alignedSize >> 0xc) + 0x6e;\n      iVar1 = index * 2;\n    }\n    else if (index2 < 0x155) {\n      index = (alignedSize >> 0xf) + 0x77;\n      iVar1 = index * 2;\n    }\n    else if (index2 < 0x555) {\n      index = (alignedSize >> 0x12) + 0x7c;\n      iVar1 = index * 2;\n    }\n    else {\n      iVar1 = 0xfc;\n      index = 0x7e;\n    }\n    for (offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[iVar1]; iVar1 * 4 + 0x20070464U != offset\n        ; offset = *(dword *)(offset + 0xc)) {\n      index2 = *(uint *)(offset + 4) & 0xfffffffc;\n      iVar2 = index2 - alignedSize;\n      if (0xf < iVar2) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < iVar2) {\n        iVar1 = index2 + offset;\n        alignedSize = *(uint *)(iVar1 + 4);\n        iVar2 = *(int *)(offset + 0xc);\n        index = *(int *)(offset + 8);\n        *(int *)(index + 0xc) = iVar2;\n        *(int *)(iVar2 + 8) = index;\n        *(uint *)(iVar1 + 4) = alignedSize | 1;\n        FUNC_00081f98(functionPointer);\n        return (int *)(offset + 8);\n      }\n    }\n    index2 = index + 1;\n  }\n  offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    alignment = mask & 0xfffffffc;\n    difference = alignment - alignedSize;\n    if (0xf < (int)difference) {\n      offset = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = offset;\n      *(undefined4 *)(offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(offset + 8) = 0x2007046c;\n      *(uint *)(offset + 4) = difference | 1;\n      *(uint *)(offset + difference) = difference;\n      FUNC_00081f98(functionPointer);\n      return (int *)(info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)difference) {\n      *(uint *)(alignment + info + 4) = *(uint *)(alignment + info + 4) | 1;\n      FUNC_00081f98(functionPointer);\n      return (int *)(info + 8);\n    }\n    if (alignment < 0x200) {\n      alignment = mask & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignment);\n      offset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info + 8) = index;\n      *(uint *)(info + 0xc) = alignment + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignment) = info;\n      *(dword *)(index + 0xc) = info;\n    }\n    else {\n      difference = mask >> 9;\n      if (difference < 5) {\n        iVar1 = (mask >> 6) + 0x38;\n        index = iVar1 * 2;\n      }\n      else if (difference < 0x15) {\n        iVar1 = difference + 0x5b;\n        index = iVar1 * 2;\n      }\n      else if (difference < 0x55) {\n        iVar1 = (mask >> 0xc) + 0x6e;\n        index = iVar1 * 2;\n      }\n      else if (difference < 0x155) {\n        iVar1 = (mask >> 0xf) + 0x77;\n        index = iVar1 * 2;\n      }\n      else if (difference < 0x555) {\n        iVar1 = (mask >> 0x12) + 0x7c;\n        index = iVar1 * 2;\n      }\n      else {\n        index = 0xfc;\n        iVar1 = 0x7e;\n      }\n      offset = index * 4 + 0x20070464;\n      currentOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (currentOffset == offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (iVar1 >> 2 & 0xffU);\n        previousOffset = currentOffset;\n      }\n      else {\n        do {\n          previousOffset = currentOffset;\n          if ((*(uint *)(currentOffset + 4) & 0xfffffffc) <= alignment) break;\n          currentOffset = *(dword *)(currentOffset + 8);\n          previousOffset = currentOffset;\n        } while (offset != currentOffset);\n        currentOffset = *(dword *)(previousOffset + 0xc);\n      }\n      offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info + 0xc) = currentOffset;\n      *(dword *)(info + 8) = previousOffset;\n      *(dword *)(currentOffset + 8) = info;\n      *(dword *)(previousOffset + 0xc) = info;\n    }\n  }\n  info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)index2 >> 2 & 0xffU);\n  if (mask <= offset) {\n    if ((offset & mask) == 0) {\n      index2 = index2 & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        index2 = index2 + 4;\n      } while ((offset & mask) == 0);\n    }\n    do {\n      currentInfo = &Elf32_Rel_ARRAY_20070000[index2 + 0x8c].r_info;\n      currentData = currentInfo;\n      alignment = index2;\n      do {\n        for (pointer = (undefined *)currentData[3]; currentData != (dword *)pointer;\n            pointer = *(undefined **)(pointer + 0xc)) {\n          difference = *(uint *)(pointer + 4) & 0xfffffffc;\n          temp = difference - alignedSize;\n          if (0xf < (int)temp) {\n            iVar1 = *(int *)(pointer + 8);\n            index = *(int *)(pointer + 0xc);\n            relocatedPointer = pointer + alignedSize;\n            *(uint *)(pointer + 4) = alignedSize | 1;\n            *(int *)(iVar1 + 0xc) = index;\n            *(int *)(index + 8) = iVar1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)relocatedPointer;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)relocatedPointer;\n            *(undefined4 *)(relocatedPointer + 0xc) = 0x2007046c;\n            *(undefined4 *)(relocatedPointer + 8) = 0x2007046c;\n            *(uint *)(relocatedPointer + 4) = temp | 1;\n            *(uint *)(relocatedPointer + temp) = temp;\n            FUNC_00081f98(functionPointer);\n            return (int *)(pointer + 8);\n          }\n          if (-1 < (int)temp) {\n            index = *(int *)(pointer + 8);\n            iVar1 = *(int *)(pointer + 0xc);\n            *(uint *)(pointer + difference + 4) = *(uint *)(pointer + difference + 4) | 1;\n            *(int *)(index + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = index;\n            FUNC_00081f98(functionPointer);\n            return (int *)(pointer + 8);\n          }\n        }\n        alignment = alignment + 1;\n        currentData = currentData + 2;\n      } while ((alignment & 3) != 0);\n      do {\n        difference = index2 & 3;\n        pointer = (undefined *)(currentInfo + -2);\n        index2 = index2 - 1;\n        if (difference == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        currentInfo = (dword *)*currentInfo;\n      } while (currentInfo == (dword *)pointer);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index2 = alignment, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        index2 = index2 + 4;\n      }\n    } while( true );\n  }\n  index2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= index2) &&\n     (mask = index2 - alignedSize, offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_00081b1a;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + index2;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    alignment = alignedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    alignment = alignedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  offset = update_value_0008236c(functionPointer,alignment);\n  if ((offset == 0xffffffff) || ((offset < mask && (info != 0x20070464)))) {\n    index2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    difference = DAT_2007121c + alignment;\n    DAT_2007121c = difference;\n    if ((mask == offset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignment + index2 | 1;\n    }\n    else {\n      currentOffset = offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        currentOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = difference + (offset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = currentOffset;\n      mask = offset & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        offset = offset + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (alignment + offset & 0xfff);\n      iVar1 = update_value_0008236c(functionPointer,index);\n      if (iVar1 == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (iVar1 - offset) + index | 1;\n      }\n      difference = DAT_2007121c + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = offset;\n      DAT_2007121c = difference;\n      *(uint *)(offset + 4) = mask;\n      if (info != 0x20070464) {\n        if (index2 < 0x10) {\n          *(undefined4 *)(offset + 4) = 1;\n          index2 = 0;\n          goto LAB_00081b04;\n        }\n        index2 = index2 - 0xc & 0xfffffff8;\n        *(uint *)(info + 4) = index2 | *(uint *)(info + 4) & 1;\n        *(undefined4 *)(info + index2 + 4) = 5;\n        *(undefined4 *)(info + index2 + 8) = 5;\n        if (0xf < index2) {\n          optimize_and_update_relocation_00083b10(functionPointer,info + 8);\n          difference = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < difference) {\n      DAT_20071214 = difference;\n    }\n    if (DAT_20071210 < difference) {\n      DAT_20071210 = difference;\n    }\n    index2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  mask = index2 - alignedSize;\n  if ((index2 < alignedSize) || ((int)mask < 0x10)) {\n    FUNC_00081f98(functionPointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + offset;\n  *(uint *)(offset + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_00081f98(functionPointer);\n  return (int *)(offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "relocate_and_optimize_00081810",
                "param_1": "functionPointer",
                "param_2": "size",
                "dVar1": "info",
                "iVar2": "iVar1",
                "uVar3": "mask",
                "uVar4": "alignment",
                "iVar5": "iVar2",
                "uVar6": "difference",
                "dVar7": "offset",
                "uVar8": "temp",
                "iVar9": "tempVar",
                "puVar10": "pointer",
                "dVar11": "currentOffset",
                "dVar12": "previousOffset",
                "iVar13": "index",
                "pdVar14": "currentData",
                "uVar15": "alignedSize",
                "puVar16": "relocatedPointer",
                "pdVar17": "currentInfo",
                "uVar18": "index2"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtr2;\n  undefined4 *srcPtr;\n  uint tempVar1;\n  uint tempVar2;\n  bool flag;\n  \n  destPtr2 = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      tempVar2 = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcPtr = destPtr2;\n          flag = tempVar2 != 0;\n          tempVar2 = tempVar2 - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtr2 = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (flag);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      tempVar2 = 4 - ((uint)dest & 3);\n      size = size - tempVar2;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destPtr2 = destPtr;\n      src = srcPtr;\n      if ((tempVar2 & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        destPtr2 = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtr2 = *src;\n    destPtr2[1] = src[1];\n    destPtr2[2] = src[2];\n    destPtr2[3] = src[3];\n    destPtr2[4] = src[4];\n    destPtr2[5] = src[5];\n    destPtr2[6] = src[6];\n    destPtr2[7] = src[7];\n    destPtr2[8] = src[8];\n    destPtr2[9] = src[9];\n    destPtr2[10] = src[10];\n    destPtr2[0xb] = src[0xb];\n    destPtr2[0xc] = src[0xc];\n    destPtr2[0xd] = src[0xd];\n    destPtr2[0xe] = src[0xe];\n    destPtr2[0xf] = src[0xf];\n    destPtr2 = destPtr2 + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  tempVar1 = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtr2 = *src;\n      destPtr2[1] = src[1];\n      destPtr2[2] = src[2];\n      destPtr2[3] = src[3];\n      destPtr2 = destPtr2 + 4;\n      src = src + 4;\n      flag = 0xf < tempVar1;\n      tempVar1 = tempVar1 - 0x10;\n    } while (flag);\n  }\n  tempVar2 = tempVar1 + 0xc;\n  srcPtr = destPtr2;\n  destPtr = src;\n  if (0xfffffff3 < tempVar1) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      flag = 3 < tempVar2;\n      tempVar2 = tempVar2 - 4;\n      destPtr2 = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (flag);\n  }\nLAB_00081dcc:\n  if (tempVar2 + 4 != 0) {\n    destPtr = destPtr2;\n    srcPtr = src;\n    if ((tempVar2 & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destPtr2 + 1);\n      *(undefined *)destPtr2 = *(undefined *)src;\n    }\n    if ((tempVar2 + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtr2",
                "puVar3": "srcPtr",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *srcEndPtr;\n  uint count;\n  undefined *destEndPtr;\n  uint remainingSize;\n  \n  if ((src < dest) && (srcEndPtr = (undefined4 *)((int)src + size), dest < srcEndPtr)) {\n    destEndPtr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        srcEndPtr = (undefined4 *)((int)srcEndPtr + -1);\n        index = index + -1;\n        destEndPtr = destEndPtr + -1;\n        *destEndPtr = *(undefined *)srcEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    srcEndPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = srcEndPtr + 4;\n      *srcEndPtr = *srcPtr;\n      srcEndPtr[1] = srcPtr[1];\n      srcEndPtr[2] = srcPtr[2];\n      srcEndPtr[3] = srcPtr[3];\n      srcEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainingSize = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    count = remainingSize;\n    srcEndPtr = dest;\n    srcPtr = src;\n    if (3 < remainingSize) {\n      do {\n        count = count - 4;\n        *srcEndPtr = *srcPtr;\n        srcEndPtr = srcEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < count);\n      index = (remainingSize - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainingSize = size & 3;\n    }\n    size = remainingSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  srcEndPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)srcEndPtr + 1);\n    *(undefined *)srcEndPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    srcEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "srcEndPtr",
                "uVar5": "count",
                "puVar6": "destEndPtr",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_with_value_00081f00",
            "code": "\nvoid memset_with_value_00081f00(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 expanded_value;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    expanded_value = expanded_value;\n    remaining_size = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = expanded_value;\n        second_value = expanded_value;\n        third_value = expanded_value;\n        fourth_value = expanded_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = destination;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *destination = expanded_value;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_with_value_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "expanded_value",
                "uVar4": "remaining_size",
                "bVar5": "is_zero",
                "CONCAT22(CONCAT11(param_2,param_2),CONCAT11(param_2,param_2))": "expanded_value",
                "puVar1[1]": "second_value",
                "puVar1[2]": "third_value",
                "puVar1[3]": "fourth_value"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "relocate_and_optimize_00081f9c",
            "code": "\nvoid relocateAndOptimize_00081f9c(undefined4 input1,undefined4 input2)\n\n{\n  relocate_and_optimize_function_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,input1,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "relocate_and_optimize_00081f9c",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "relocate_and_optimize_function_00081fac",
            "code": "\nint * relocate_and_optimize_function_00081fac(undefined4 *param_ptr,int *input_arr,uint arr_length)\n\n{\n  dword temp_var1;\n  int *result_arr;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_arr;\n  uint temp_var6;\n  uint temp_var7;\n  int *temp_arr2;\n  \n  if (input_arr == (int *)0x0) {\n    result_arr = (int *)relocate_and_optimize_helper(param_ptr,arr_length);\n    return result_arr;\n  }\n  FUNC_00081f94();\n  temp_var4 = input_arr[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  result_arr = input_arr + -2;\n  if (arr_length + 0xb < 0x17) {\n    temp_var7 = 0x10;\n  }\n  else {\n    temp_var7 = arr_length + 0xb & 0xfffffff8;\n    if ((int)temp_var7 < 0) goto label1;\n  }\n  if (temp_var7 < arr_length) {\nlabel1:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)temp_var7) {\n    temp_var1 = (int)result_arr + temp_var6;\n    if (relocation_info == temp_var1) {\n      temp_var2 = *(uint *)(relocation_info + 4) & 0xfffffffc;\n      temp_var1 = relocation_info;\n      if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var6)) {\n        relocation_info = (int)result_arr + temp_var7;\n        *(uint *)(relocation_info + 4) = (temp_var2 + temp_var6) - temp_var7 | 1;\n        input_arr[-1] = temp_var7 | input_arr[-1] & 1U;\n        FUNC_00081f98(param_ptr);\n        return input_arr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)temp_var7 <= (int)(temp_var2 + temp_var6)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var2 + temp_var6;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_arr2 = (int *)((int)result_arr - input_var10);\n      temp_var4 = (temp_arr2[1] & 0xfffffffcU) + temp_var6;\n      if (temp_var1 != 0) {\n        if (temp_var1 == relocation_info) {\n          if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            result_arr = temp_arr2 + 2;\n            temp_var3 = *result_arr;\n            temp_var5 = temp_arr2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_arr = result_arr;\n              if (0x13 < temp_var6) {\n                temp_arr2[2] = *input_arr;\n                temp_arr2[3] = input_var9;\n                if (temp_var6 < 0x1c) {\n                  input_arr = input_arr + 2;\n                  temp_arr = temp_arr2 + 4;\n                }\n                else {\n                  temp_arr2[4] = input_var7;\n                  temp_arr2[5] = input_var8;\n                  if (temp_var6 == 0x24) {\n                    temp_arr2[6] = input_var4;\n                    temp_arr = input_arr + 5;\n                    input_arr = input_arr + 6;\n                    temp_arr2[7] = *temp_arr;\n                    temp_arr = temp_arr2 + 8;\n                  }\n                  else {\n                    input_arr = input_arr + 4;\n                    temp_arr = temp_arr2 + 6;\n                  }\n                }\n              }\n              *temp_arr = *input_arr;\n              temp_arr[1] = input_var9;\n              temp_var14 = input_var7;\n            }\n            else {\n              copy_memory_00081e34(result_arr,input_arr);\n            }\n            relocation_info = (int)temp_arr2 + temp_var7;\n            *(uint *)(relocation_info + 4) = (temp_var2 + temp_var4) - temp_var7 | 1;\n            temp_arr2[1] = temp_var7 | temp_arr2[1] & 1U;\n            FUNC_00081f98(param_ptr);\n            return result_arr;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)temp_var7 <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_arr = temp_arr2 + 2;\n            temp_var3 = *temp_arr;\n            temp_var5 = temp_arr2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var2;\n            if (temp_var4 < 0x25) {\n              result_arr = temp_arr;\n              if (0x13 < temp_var4) {\n                temp_arr2[2] = *input_arr;\n                temp_arr2[3] = input_var9;\n                if (temp_var4 < 0x1c) {\n                  input_arr = input_arr + 2;\n                  result_arr = temp_arr2 + 4;\n                }\n                else {\n                  temp_arr2[4] = input_var7;\n                  temp_arr2[5] = input_var8;\n                  if (temp_var4 == 0x24) {\n                    temp_arr2[6] = input_var4;\n                    result_arr = input_arr + 5;\n                    input_arr = input_arr + 6;\n                    temp_arr2[7] = *result_arr;\n                    result_arr = temp_arr2 + 8;\n                  }\n                  else {\n                    input_arr = input_arr + 4;\n                    result_arr = temp_arr2 + 6;\n                  }\n                }\n              }\n              *result_arr = *input_arr;\n              temp_var12 = input_var9;\n              result_arr[2] = input_var7;\n              temp_var4 = temp_arr2[1];\n              result_arr = temp_arr2;\n              input_arr = temp_arr;\n            }\n            else {\n              copy_memory_00081e34(temp_arr,input_arr);\n              temp_var4 = temp_arr2[1];\n              result_arr = temp_arr2;\n              input_arr = temp_arr;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)temp_var7 <= (int)temp_var4) {\n        temp_arr = temp_arr2 + 2;\n        temp_var3 = *temp_arr;\n        temp_var5 = temp_arr2[3];\n        temp_var2 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var2 < 0x25) {\n          result_arr = temp_arr;\n          if (0x13 < temp_var2) {\n            temp_arr2[2] = *input_arr;\n            temp_arr2[3] = input_var9;\n            if (temp_var2 < 0x1c) {\n              input_arr = input_arr + 2;\n              result_arr = temp_arr2 + 4;\n            }\n            else {\n              temp_arr2[4] = input_var7;\n              temp_arr2[5] = input_var8;\n              if (temp_var2 == 0x24) {\n                temp_arr2[6] = input_var4;\n                result_arr = input_arr + 5;\n                input_arr = input_arr + 6;\n                temp_arr2[7] = *result_arr;\n                result_arr = temp_arr2 + 8;\n              }\n              else {\n                input_arr = input_arr + 4;\n                result_arr = temp_arr2 + 6;\n              }\n            }\n          }\n          *result_arr = *input_arr;\n          temp_var12 = input_var9;\n          result_arr[2] = input_var7;\n          temp_var4 = temp_arr2[1];\n          result_arr = temp_arr2;\n          input_arr = temp_arr;\n        }\n        else {\n          copy_memory_00081e34(temp_arr,input_arr);\n          temp_var4 = temp_arr2[1];\n          result_arr = temp_arr2;\n          input_arr = temp_arr;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_arr2 = (int *)relocate_and_optimize_helper(param_ptr,arr_length);\n    if (temp_arr2 == (int *)0x0) goto LAB_000820a0;\n    temp_var4 = input_arr[-1];\n    if (temp_arr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result_arr)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        result_arr = input_arr;\n        temp_arr = temp_arr2;\n        if (0x13 < temp_var6) {\n          *temp_arr2 = *input_arr;\n          temp_arr2[1] = input_var9;\n          if (temp_var6 < 0x1c) {\n            result_arr = input_arr + 2;\n            temp_arr = temp_arr2 + 2;\n          }\n          else {\n            temp_arr2[2] = input_var7;\n            temp_arr2[3] = input_var8;\n            if (temp_var6 == 0x24) {\n              temp_arr2[4] = input_var4;\n              temp_arr2[5] = input_var5;\n              result_arr = input_arr + 6;\n              temp_arr = temp_arr2 + 6;\n            }\n            else {\n              result_arr = input_arr + 4;\n              temp_arr = temp_arr2 + 4;\n            }\n          }\n        }\n        *temp_arr = *result_arr;\n        temp_arr[1] = temp_var12;\n        temp_var14 = result_arr[2];\n      }\n      else {\n        copy_memory_00081e34(temp_arr2,input_arr);\n      }\n      optimize_and_update_relocation_helper(param_ptr,input_arr);\n      goto LAB_000820a0;\n    }\n    temp_var6 = temp_var6 + (temp_var17 & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_var2 = temp_var6 - temp_var7;\n  temp_arr2 = input_arr;\n  if (temp_var2 < 0x10) {\n    temp_var12 = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)result_arr + temp_var6 + 4) = *(uint *)((int)result_arr + temp_var6 + 4) | 1;\n  }\n  else {\n    temp_var12 = temp_var4 & 1 | temp_var7;\n    *(uint *)((int)result_arr + temp_var7 + 4) = temp_var2 | 1;\n    *(uint *)((int)result_arr + temp_var2 + temp_var7 + 4) = *(uint *)((int)result_arr + temp_var2 + temp_var7 + 4) | 1;\n    optimize_and_update_relocation_helper(param_ptr,(int)result_arr + temp_var7 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_ptr);\n  return temp_arr2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "relocate_and_optimize_function_00081fac",
                "param_1": "param_ptr",
                "param_2": "input_arr",
                "param_3": "arr_length",
                "dVar1": "temp_var1",
                "piVar2": "result_arr",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "piVar7": "temp_arr",
                "uVar8": "temp_var6",
                "uVar9": "temp_var7",
                "piVar10": "temp_arr2",
                "relocate_and_optimize_00081810": "relocate_and_optimize_helper",
                "LAB_00082078": "label1",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "relocation_info",
                "piVar2[1]": "temp_var12",
                "param_2[1]": "input_var9",
                "param_2[2]": "input_var7",
                "param_2[3]": "input_var8",
                "param_2[4]": "input_var4",
                "param_2[5]": "input_var5",
                "piVar7[2]": "temp_var14",
                "optimize_and_update_relocation_00083b10": "optimize_and_update_relocation_helper",
                "param_2[-2]": "input_var10",
                "piVar10[-1]": "temp_var17"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "update_value_0008236c",
            "code": "\nvoid updateValue_0008236c(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = add_and_update_value_00080e88(input);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "update_value_0008236c",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_strings_00082390",
            "code": "\nint compareStrings_00082390(uint *str1,uint *str2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint len1;\n  uint ch1;\n  uint ch2;\n  uint temp1;\n  uint temp2;\n  \n  if ((((uint)str1 | (uint)str2) & 7) != 0) {\n    ptr1 = str1;\n    if (((uint)str1 & 3) != 0) {\n      ptr1 = (uint *)((uint)str1 & 0xfffffffc) + 1;\n      len1 = *(uint *)((uint)str1 & 0xfffffffc);\n      ptr2 = str2;\n      if (((uint)str1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        ch1 = len1 >> 0x10 & 0xff;\n        result = ch1 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (ch1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = str2;\n        if (((uint)str1 & 2) == 0) {\n          ptr2 = (uint *)((int)str2 + 1);\n          ch1 = len1 >> 8 & 0xff;\n          result = ch1 - *(byte *)str2;\n          if (result != 0) {\n            return result;\n          }\n          if (ch1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      str2 = (uint *)((int)ptr3 + 1);\n      result = (len1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (len1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    len1 = (uint)str2 & 3;\n    if (len1 != 0) {\n      str2 = (uint *)((uint)str2 & 0xfffffffc);\n      if (len1 == 2) {\n        len1 = *str2;\n        do {\n          str2 = str2 + 1;\n          ch2 = *ptr1;\n          len1 = len1 >> 0x10;\n          temp1 = ch2 + 0xfefefeff & ~ch2;\n          temp2 = temp1 & 0x80808080;\n          ch1 = ch2 & 0xffff;\n          if ((temp1 & 0x8080) != 0 || ch1 != len1) goto LAB_0008258e;\n          len1 = *str2;\n          ch1 = ch1 ^ ch2;\n          ch2 = len1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && ch1 == ch2);\n      }\n      else if (len1 < 2) {\n        len1 = *str2;\n        do {\n          str2 = str2 + 1;\n          ch2 = *ptr1;\n          len1 = len1 >> 8;\n          temp1 = ch2 + 0xfefefeff & ~ch2;\n          temp2 = temp1 & 0x80808080;\n          ch1 = ch2 & 0xffffff;\n          if ((temp1 & 0x808080) != 0 || ch1 != len1) goto LAB_0008258e;\n          len1 = *str2;\n          ch1 = ch1 ^ ch2;\n          ch2 = len1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && ch1 == ch2);\n      }\n      else {\n        len1 = *str2;\n        do {\n          str2 = str2 + 1;\n          ch2 = *ptr1;\n          len1 = len1 >> 0x18;\n          temp1 = ch2 + 0xfefefeff & ~ch2;\n          temp2 = temp1 & 0x80808080;\n          ch1 = ch2 & 0xff;\n          if ((temp1 & 0x80) != 0 || ch1 != len1) goto LAB_0008258e;\n          len1 = *str2;\n          ch1 = ch1 ^ ch2;\n          ch2 = len1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp2 == 0 && ch1 == ch2);\n      }\n      ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 |\n              ch1 >> 0x18;\n      len1 = (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 | ch2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    str1 = ptr1;\n    ptr2 = str2;\n    if (((uint)ptr1 & 4) != 0) {\n      str1 = ptr1 + 1;\n      len1 = *ptr1;\n      ptr2 = str2 + 1;\n      ch2 = *str2;\n      temp2 = len1 + 0xfefefeff & ~len1 & 0x80808080;\n      if (len1 != ch2 || temp2 != 0) {\nLAB_0008259a:\n        ch1 = len1 << 0x18 | (len1 >> 8 & 0xff) << 0x10 | (len1 >> 0x10 & 0xff) << 8 |\n                len1 >> 0x18;\n        len1 = ch2 << 0x18 | (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 |\n                ch2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    str2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      len1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        ch1 = *str1;\n        ch2 = str1[1];\n        temp2 = ch1 + 0xfefefeff & ~ch1 & 0x80808080;\n        if (ch1 != len1 || temp2 != 0) goto LAB_0008258e;\n        temp1 = *ptr1;\n        len1 = ptr1[1];\n        temp2 = ch2 + 0xfefefeff & ~ch2 & 0x80808080;\n        str1 = str1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (ch2 == temp1 && temp2 == 0);\n      ch1 = ch2 << 0x18 | (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 |\n              ch2 >> 0x18;\n      len1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n              temp1 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    len1 = *str1;\n    ch1 = str1[1];\n    ch2 = *str2;\n    temp1 = str2[1];\n    temp2 = len1 + 0xfefefeff & ~len1 & 0x80808080;\n    if (len1 != ch2 || temp2 != 0) goto LAB_0008259a;\n    temp2 = ch1 + 0xfefefeff & ~ch1 & 0x80808080;\n    str1 = str1 + 2;\n    str2 = str2 + 2;\n  } while (ch1 == temp1 && temp2 == 0);\n  ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 | ch1 >> 0x18;\n  len1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\nLAB_0008259e:\n  ch2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  if (ch2 != 0) {\n    ch2 = 0x18 - LZCOUNT(ch2);\n    ch1 = ch1 >> (ch2 & 0xff);\n    len1 = len1 >> (ch2 & 0xff);\n  }\n  result = 1;\n  if (ch1 <= len1) {\n    result = -(uint)(ch1 < len1);\n  }\n  return result;\nLAB_0008258e:\n  ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 | ch1 >> 0x18;\n  len1 = len1 << 0x18 | (len1 >> 8 & 0xff) << 0x10 | (len1 >> 0x10 & 0xff) << 8 | len1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_strings_00082390",
                "param_1": "str1",
                "param_2": "str2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "len1",
                "uVar6": "ch1",
                "uVar7": "ch2",
                "uVar8": "temp1",
                "uVar9": "temp2"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_ptr;\n  uint *next_ptr_temp;\n  uint current_value;\n  uint current_byte;\n  uint *dest_ptr;\n  bool is_null_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_ptr_temp = src;\n    if (((uint)src & 1) != 0) {\n      next_ptr_temp = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_ptr_temp;\n    if (((uint)next_ptr_temp & 2) != 0) {\n      src = (uint *)((int)next_ptr_temp + 2);\n      current_short = *(ushort *)next_ptr_temp;\n      is_null_byte = (current_short & 0xff) == 0;\n      if (is_null_byte) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_null_byte = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_null_byte) {\n        return;\n      }\n    }\n  }\n  current_value = *src;\n  next_ptr_temp = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_00082630;\n    dest_ptr = dest + 1;\n    *dest = current_value;\n    next_ptr_temp = src + 2;\n    current_value = src[1];\n  }\n  while( true ) {\n    next_ptr = next_ptr_temp + 1;\n    current_byte = *next_ptr_temp;\n    dest = dest_ptr;\n    if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_value;\n    current_value = current_byte;\n    if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) break;\n    next_ptr_temp = next_ptr_temp + 2;\n    current_value = *next_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_byte;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_value;\n    current_byte = current_value & 0xff;\n    current_value = current_value >> 8 | current_value << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (current_byte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_ptr",
                "puVar4": "next_ptr_temp",
                "uVar5": "current_value",
                "uVar6": "current_byte",
                "puVar7": "dest_ptr",
                "bVar8": "is_null_byte"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_nonzero_bytes_00082688",
            "code": "\nint countNonzeroBytes_00082688(uint input)\n\n{\n  int byteCount;\n  uint *dataPointer;\n  uint value;\n  bool isZero;\n  \n  dataPointer = (uint *)(input & 0xfffffffc);\n  byteCount = -(input & 3);\n  value = *dataPointer;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((byteCount + 4U & 0x1f) << 3);\n  }\n  while (dataPointer = dataPointer + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    byteCount = byteCount + 4;\n    value = *dataPointer;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    byteCount = byteCount + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    byteCount = byteCount + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    byteCount = byteCount + 1;\n  }\n  return byteCount;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_nonzero_bytes_00082688",
                "param_1": "input",
                "iVar1": "byteCount",
                "puVar2": "dataPointer",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *currentData;\n  int result;\n  int *currentOffset;\n  uint loopCount;\n  undefined4 *currentPointer;\n  uint dataValue;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = relocated_and_optimized_function_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  currentOffset = param3[2];\n  currentData = *param3;\n  while (currentOffset != (int *)0x0) {\n    dataValue = currentData[1];\n    shiftedValue = dataValue >> 2;\n    if (shiftedValue != 0) {\n      currentPointer = (undefined4 *)(*currentData + -4);\n      loopCount = 0;\n      do {\n        currentPointer = currentPointer + 1;\n        result = process_data_000839b4(param1,*currentPointer,param2);\n        loopCount = loopCount + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shiftedValue != loopCount);\n      currentOffset = param3[2];\n    }\n    currentOffset = (int *)((int)currentOffset - (dataValue & 0xfffffffc));\n    param3[2] = currentOffset;\n    currentData = currentData + 2;\n  }\n  result = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "currentData",
                "iVar2": "result",
                "piVar3": "currentOffset",
                "uVar4": "loopCount",
                "puVar5": "currentPointer",
                "uVar6": "dataValue",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_formatted_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processFormattedString_0008289c(int data_struct,int format_string,int *******arguments,int **output_buffer)\n\n{\n  bool is_long;\n  bool is_positive;\n  bool is_unsigned;\n  char sign_char;\n  bool has_padding;\n  int ********param_ptr;\n  int *value_ptr;\n  int result;\n  char format_char;\n  int *******pppppppiVar10;\n  uint digit;\n  int **temp_ptr;\n  uint flags;\n  uint ch;\n  int outer_loop_index;\n  int ********format_ptr;\n  int inner_loop_index;\n  int *******ppppppploop_diff;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint padding_num;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 highpart;\n  int ********ppppppppiVar25;\n  bool is_positive6;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((data_struct != 0) && (*(int *)(data_struct + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  flags = (uint)*(ushort *)(format_string + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format_string + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format_string + 0xc) = (short)flags;\n    *(uint *)(format_string + 100) = *(uint *)(format_string + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format_string + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = process_relocation_0008356c(data_struct,format_string);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format_string + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format_string + 0xe)) {\n    result = process_function_000834f0(data_struct,format_string,arguments,output_buffer);\n    return result;\n  }\nLAB_000828ee:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  param_ptr = (int ********)local_68;\n  local_c8 = output_buffer;\n  local_9c = (int ********)local_68;\nLAB_00082902:\n  pppppppiVar10 = arguments;\n  if ((*(char *)arguments != '\\0') && (*(char *)arguments != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)arguments);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *param_ptr = arguments;\n      param_ptr[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        param_ptr = param_ptr + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          param_ptr = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        result = process_data_00082824(data_struct,format_string,&local_9c);\n        param_ptr = (int ********)local_68;\n        if (result != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    ch = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    flags = 0;\n    has_padding = false;\n    is_positive = false;\n    is_long = false;\n    is_unsigned = false;\n    is_positive6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    arguments = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082976:\n    arguments = (int *******)((int)arguments + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_unsigned = true;\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)arguments;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)arguments;\n      pppppppiVar10 = (int *******)((int)arguments + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)arguments + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        arguments = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        padding_num = 0;\n        do {\n          arguments = (int *******)((int)pppppppiVar10 + 1);\n          ch = (uint)*(byte *)pppppppiVar10;\n          padding_num = digit + padding_num * 10;\n          digit = ch - 0x30;\n          pppppppiVar10 = arguments;\n        } while (digit < 10);\n        local_d4 = (int *******)(padding_num | (int)padding_num >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        arguments = pppppppiVar10;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_positive = true;\n      if (is_long == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_positive = true;\n      if (is_long != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_positive << 4;\n      outer_loop_index = (uint)is_long << 5;\n      if ((is_positive == 0) && (outer_loop_index = (uint)is_positive6 << 6, is_positive6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        result = outer_loop_index;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_positive = true;\n      if (is_long != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_positive) || (is_positive6 == false)) {\n        result = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (is_long == false) goto LAB_00082efa;\nLAB_00082d1a:\n      temp_ptr = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_long != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_positive == false) && (is_positive6 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        is_positive6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)is_positive6);\n        local_a1 = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        flags = flags & 0xffffff7f;\n      }\n      has_padding = false;\n      ch = (uint)piVar19 | (uint)piVar22;\n      result = 1;\n      sign_char = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_positive6 = true;\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)arguments;\n      if (ch == 0x6c) {\n        is_long = true;\n        ch = (uint)*(byte *)((int)arguments + 1);\n        arguments = (int *******)((int)arguments + 1);\n      }\n      else {\n        is_positive = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_long == false) {\n        if (is_positive == false) {\n          if (is_positive6) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_long == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      temp_ptr = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      has_padding = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_long = true;\n      ch = (uint)*(byte *)arguments;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_nonzero_bytes_00082688(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          sign_char = local_a1;\n        }\n        else {\n          result = find_char_in_array_000840f8(ppppppppiVar25,0,local_d4);\n          sign_char = local_a1;\n          if (result == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            ppppppploop_diff = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              ppppppploop_diff = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = ppppppploop_diff;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_long) goto LAB_00082ce0;\nLAB_00082bc6:\n      temp_ptr = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = temp_ptr + 2;\n      piVar19 = *temp_ptr;\n      piVar22 = temp_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (is_long != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_positive == false) && (is_positive6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_unsigned) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        has_padding = true;\n        local_a0 = 0x30;\n        result = 2;\n        local_9f = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_a1 = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((ch == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((result != 0) || (!is_unsigned)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        format_ptr = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = format_ptr;\n          highpart = (undefined4)((ulonglong)lVar27 >> 0x20);\n          format_char = '\\n';\n          check_params_and_calculate_00084530((int)lVar27,highpart,10,0);\n          *(char *)ppppppppiVar25 = format_char + '0';\n          lVar27 = check_params_and_calculate_00084530((int)lVar27,highpart,10,0);\n          format_ptr = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    format_ptr = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = format_ptr;\n      ch = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[ch];\n      format_ptr = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082824(data_struct,format_string,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format_string + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = format_ptr;\n    value_ptr = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    format_ptr = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = value_ptr;\n  } while (((uint)value_ptr | (uint)piVar22) != 0);\n  if (is_unsigned) {\n    if (result == 0x30) {\nLAB_00082afe:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = format_ptr;\n      local_d4 = (int *******)((int)local_68 - (int)format_ptr);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (sign_char != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  if (has_padding) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((flags == 0) &&\n     (ppppppploop_diff = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)ppppppploop_diff)) {\n    if ((int)ppppppploop_diff < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = ppppppploop_diff;\n        result = local_98 + 1;\n        local_94 = local_94 + 4;\n        *param_ptr = (int *******)0x856f0;\n        param_ptr[1] = (int *******)0x10;\n        if (result < 8) {\n          outer_loop_index = local_98 + 2;\n          param_ptr = param_ptr + 2;\n          local_98 = result;\n        }\n        else if (local_94 == (int *******)0x0) {\n          outer_loop_index = 1;\n          param_ptr = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = result;\n          result = process_data_00082824(data_struct,format_string,&local_9c);\n          if (result != 0) goto LAB_00083142;\n          outer_loop_index = local_98 + 1;\n          param_ptr = (int ********)local_68;\n        }\n        ppppppploop_diff = pppppppiVar23 + -4;\n      } while (0x10 < (int)ppppppploop_diff);\n      ppppppploop_diff = pppppppiVar23 + -4;\n      local_98 = outer_loop_index;\n    }\n    local_94 = (int *******)((int)local_94 + (int)ppppppploop_diff);\n    *param_ptr = (int *******)0x856f0;\n    param_ptr[1] = ppppppploop_diff;\n    if (local_98 < 8) {\n      result = local_98 + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      param_ptr = (int ********)local_68;\n    }\n    else {\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      param_ptr = (int ********)local_68;\n    }\n  }\n  else {\n    result = local_98 + 1;\n  }\n  outer_loop_index = result;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    outer_loop_index = 1;\n    *param_ptr = (int *******)&local_a1;\n    param_ptr[1] = (int *******)0x1;\n    local_98 = result;\n    if (result < 8) {\n      outer_loop_index = result + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      param_ptr = (int ********)local_68;\n    }\n    else {\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      outer_loop_index = local_98 + 1;\n      param_ptr = (int ********)local_68;\n    }\n  }\n  result = outer_loop_index;\n  inner_loop_index = local_98;\n  if (has_padding) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *param_ptr = (int *******)&local_a0;\n    param_ptr[1] = (int *******)0x2;\n    if (outer_loop_index < 8) {\n      result = outer_loop_index + 1;\n      inner_loop_index = outer_loop_index;\n      param_ptr = param_ptr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      inner_loop_index = 0;\n      param_ptr = (int ********)local_68;\n    }\n    else {\n      local_98 = outer_loop_index;\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      inner_loop_index = local_98;\n      param_ptr = (int ********)local_68;\n    }\n  }\n  local_98 = inner_loop_index;\n  if ((flags == 0x80) &&\n     (ppppppploop_diff = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)ppppppploop_diff)) {\n    if (0x10 < (int)ppppppploop_diff) {\n      do {\n        while( true ) {\n          pppppppiVar23 = ppppppploop_diff;\n          local_98 = inner_loop_index + 1;\n          local_94 = local_94 + 4;\n          *param_ptr = (int *******)\"0000000000000000\";\n          param_ptr[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = inner_loop_index + 2;\n          param_ptr = param_ptr + 2;\nLAB_000831f2:\n          inner_loop_index = local_98;\n          ppppppploop_diff = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = process_data_00082824(data_struct,format_string,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            param_ptr = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        inner_loop_index = 0;\n        ppppppploop_diff = pppppppiVar23 + -4;\n        param_ptr = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      ppppppploop_diff = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)ppppppploop_diff);\n    *param_ptr = (int *******)\"0000000000000000\";\n    param_ptr[1] = ppppppploop_diff;\n    local_98 = result;\n    if (result < 8) {\n      result = result + 1;\n      param_ptr = param_ptr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      param_ptr = (int ********)local_68;\n    }\n    else {\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      param_ptr = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  format_ptr = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_0008302a:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *param_ptr = (int *******)ppppppppiVar25;\n    param_ptr[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = result;\n    if (result < 8) goto LAB_000831be;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    outer_loop_index = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          ppppppploop_diff = pppppppiVar10;\n          local_98 = outer_loop_index + 1;\n          local_94 = local_94 + 4;\n          *param_ptr = (int *******)\"0000000000000000\";\n          param_ptr[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = outer_loop_index + 2;\n          param_ptr = param_ptr + 2;\nLAB_00082fe6:\n          outer_loop_index = local_98;\n          pppppppiVar10 = ppppppploop_diff + -4;\n          if ((int)(ppppppploop_diff + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = process_data_00082824(data_struct,format_string,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            param_ptr = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        param_ptr = (int ********)local_68;\n        outer_loop_index = 0;\n        pppppppiVar10 = ppppppploop_diff + -4;\n      } while (0x10 < (int)(ppppppploop_diff + -4));\nLAB_0008300e:\n      pppppppiVar10 = ppppppploop_diff + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *param_ptr = (int *******)\"0000000000000000\";\n    param_ptr[1] = pppppppiVar10;\n    if (result < 8) {\n      result = result + 1;\n      param_ptr = param_ptr + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = result;\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      param_ptr = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    param_ptr = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    format_ptr = param_ptr + 2;\n    local_94 = local_d4;\n  }\n  if (((flags & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    result = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      outer_loop_index = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = result + 1;\n          local_94 = local_94 + 4;\n          *format_ptr = (int *******)0x856f0;\n          format_ptr[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          outer_loop_index = result + 2;\n          format_ptr = format_ptr + 2;\nLAB_0008307a:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          result = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = process_data_00082824(data_struct,format_string,&local_9c);\n          if (result == 0) {\n            outer_loop_index = local_98 + 1;\n            format_ptr = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        outer_loop_index = 1;\n        result = 0;\n        format_ptr = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_000830a2:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *format_ptr = (int *******)0x856f0;\n    format_ptr[1] = pppppppiVar10;\n    local_98 = outer_loop_index;\n    if (7 < outer_loop_index) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      result = process_data_00082824(data_struct,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (result = process_data_00082824(data_struct,format_string,&local_9c), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = 0;\n  param_ptr = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = arguments;\n  do {\n    arguments = (int *******)((int)pppppppiVar10 + 1);\n    ch = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = ch - 0x30;\n    pppppppiVar10 = arguments;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)arguments;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_formatted_string_0008289c",
                "param_1": "data_struct",
                "param_2": "format_string",
                "param_3": "arguments",
                "param_4": "output_buffer",
                "bVar1": "is_long",
                "bVar2": "is_positive",
                "bVar3": "is_unsigned",
                "cVar4": "sign_char",
                "bVar5": "has_padding",
                "ppppppppiVar6": "param_ptr",
                "piVar7": "value_ptr",
                "iVar8": "result",
                "cVar9": "format_char",
                "iVar15": "outer_loop_index",
                "uVar11": "digit",
                "ppiVar12": "temp_ptr",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar17": "inner_loop_index",
                "ppppppppiVar16": "format_ptr",
                "iVar18": "loop_diff",
                "uVar21": "padding_num",
                "uVar24": "highpart"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_function_000834f0",
            "code": "\nint processFunction_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int processResult;\n  undefined *localArray [2];\n  undefined4 localSize1;\n  ushort localValue;\n  undefined2 localValue2;\n  undefined *localPointer;\n  undefined4 localSize2;\n  undefined4 localCount;\n  undefined4 localValue3;\n  undefined4 localValue4;\n  undefined4 localValue5;\n  undefined localStack [1024];\n  \n  localValue5 = *(undefined4 *)(param2 + 100);\n  localValue3 = *(undefined4 *)(param2 + 0x1c);\n  localValue2 = *(undefined2 *)(param2 + 0xe);\n  localValue4 = *(undefined4 *)(param2 + 0x24);\n  localArray[0] = localStack;\n  localValue = *(ushort *)(param2 + 0xc) & 0xfffd;\n  localSize1 = 0x400;\n  localSize2 = 0x400;\n  localCount = 0;\n  localPointer = localArray[0];\n  result = process_formatted_string_0008289c(param1,localArray);\n  if ((-1 < result) && (processResult = process_data_00083850(param1,localArray), processResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)localValue << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_function_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "processResult",
                "local_488": "localArray",
                "local_480": "localSize1",
                "local_47c": "localValue",
                "local_47a": "localValue2",
                "local_478": "localPointer",
                "local_474": "localSize2",
                "local_470": "localCount",
                "local_46c": "localValue3",
                "local_464": "localValue4",
                "local_424": "localValue5",
                "auStack_420": "localStack"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_relocation_0008356c",
            "code": "\nundefined4 processRelocation_0008356c(undefined4 *result,int *relocationData)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  tempVar4 = *(ushort *)(relocationData + 3);\n  tempVar3 = (uint)tempVar4;\n  if ((int)(tempVar3 << 0x1c) < 0) {\n    tempVar2 = relocationData[4];\n  }\n  else {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(relocationData + 3) = tempVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((int *)relocationData[0xc] != (int *)0x0) {\n        if ((int *)relocationData[0xc] != relocationData + 0x10) {\n          optimize_and_update_relocation_00083b10(result);\n          tempVar4 = *(ushort *)(relocationData + 3);\n        }\n        relocationData[0xc] = 0;\n      }\n      tempVar2 = relocationData[4];\n      tempVar4 = tempVar4 & 0xffdb;\n      *relocationData = tempVar2;\n      relocationData[1] = 0;\n    }\n    else {\n      tempVar2 = relocationData[4];\n    }\n    *(ushort *)(relocationData + 3) = tempVar4 | 8;\n    tempVar3 = (uint)(tempVar4 | 8);\n  }\n  if ((tempVar2 == 0) && ((tempVar3 & 0x280) != 0x200)) {\n    initialize_and_optimize_00084018(result,relocationData);\n    tempVar3 = (uint)*(ushort *)(relocationData + 3);\n    tempVar2 = relocationData[4];\n  }\n  if ((tempVar3 & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar1 = relocationData[5];\n    }\n    relocationData[2] = tempVar1;\n  }\n  else {\n    relocationData[6] = -relocationData[5];\n    relocationData[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(relocationData + 3) << 0x18) < 0)) {\n    *(ushort *)(relocationData + 3) = *(ushort *)(relocationData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_relocation_0008356c",
                "param_1": "result",
                "param_2": "relocationData",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_process_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeProcess_000836ec(void)\n\n{\n  dword *offsetPointer;\n  dword loopResult;\n  int iterationCount;\n  code *errorHandler;\n  \n  process_parameter_000841e4(6);\n  errorHandler = (code *)0x836fb;\n  loopResult = run_infinite_loop_00080eec(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  iterationCount = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  offsetPointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < iterationCount) {\n    offsetPointer = (dword *)relocate_and_optimize_000817f0(400);\n    if (offsetPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*errorHandler)(0xffffffff);\n      return;\n    }\n    *offsetPointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    offsetPointer[1] = 0;\n    iterationCount = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)offsetPointer;\n    offsetPointer[0x62] = 0;\n    offsetPointer[99] = 0;\n  }\n  offsetPointer[1] = iterationCount + 1;\n  offsetPointer[iterationCount + 2] = loopResult;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*errorHandler)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_process_000836ec",
                "pdVar1": "offsetPointer",
                "dVar2": "loopResult",
                "iVar3": "iterationCount",
                "UNRECOVERED_JUMPTABLE_00": "errorHandler"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 process_data_00083850(int *input_data,int *output_data)\n\n{\n  int *ptr_var1;\n  int index;\n  ushort data_flag;\n  uint temp;\n  int offset;\n  code *function_ptr;\n  undefined4 result;\n  int temp2;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    initialize_data_structures_00083888();\n  }\n  if (*(short *)(output_data + 3) == 0) {\n    return 0;\n  }\n  data_flag = *(ushort *)(output_data + 3);\n  if ((int)((uint)data_flag << 0x1c) < 0) {\n    temp2 = output_data[4];\n    if (temp2 == 0) {\n      return 0;\n    }\n    index = *output_data;\n    if ((data_flag & 3) == 0) {\n      offset = output_data[5];\n    }\n    else {\n      offset = 0;\n    }\n    *output_data = temp2;\n    index = index - temp2;\n    output_data[2] = offset;\n    do {\n      if (index < 1) {\n        return 0;\n      }\n      offset = (*(code *)output_data[9])(input_data,output_data[7],temp2,index,result);\n      index = index - offset;\n      temp2 = temp2 + offset;\n    } while (0 < offset);\nLAB_000837c8:\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = data_flag | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_data[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(data_flag | 0x800);\n  temp2 = *input_data;\n  *input_data = 0;\n  if ((data_flag & 0x1000) == 0) {\n    index = (*function_ptr)(input_data,output_data[7],temp & 0x1000,1);\n    if ((index == -1) && (offset = *input_data, offset != 0)) {\n      if ((offset == 0x1d) || (offset == 0x16)) {\n        *input_data = temp2;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp = (uint)*(ushort *)(output_data + 3);\n    function_ptr = (code *)output_data[10];\n  }\n  else {\n    index = output_data[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (index = index - output_data[1], output_data[0xc] != 0)) {\n    index = index - output_data[0xf];\n  }\n  index = (*function_ptr)(input_data,output_data[7],index,0);\n  if (index == -1) {\n    offset = *input_data;\n    if (offset != 0) {\n      if ((offset != 0x1d) && (offset != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083774;\n    }\n    data_flag = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = data_flag;\n    *output_data = output_data[4];\n  }\n  else {\n    data_flag = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = data_flag;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)data_flag << 0x13) < 0) {\n    output_data[0x14] = index;\n  }\nLAB_00083774:\n  ptr_var1 = (int *)output_data[0xc];\n  *input_data = temp2;\n  if (ptr_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr_var1 != output_data + 0x10) {\n    optimize_and_update_relocation_00083b10(input_data);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input_data",
                "param_2": "output_data",
                "piVar1": "ptr_var1",
                "iVar2": "index",
                "uVar3": "data_flag",
                "uVar4": "temp",
                "iVar5": "offset",
                "pcVar6": "function_ptr",
                "unaff_r4": "result",
                "iVar7": "temp2"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructAddress)\n\n{\n  undefined4 *struct1Address;\n  undefined4 *struct2Address;\n  \n  if (*(int *)(dataStructAddress + 0x38) == 0) {\n    struct1Address = *(undefined4 **)(dataStructAddress + 4);\n    *(undefined **)(dataStructAddress + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructAddress + 0x2e4) = 3;\n    *(int *)(dataStructAddress + 0x2e8) = dataStructAddress + 0x2ec;\n    *(undefined4 *)(dataStructAddress + 0x2e0) = 0;\n    *(undefined2 *)(struct1Address + 3) = 4;\n    *struct1Address = 0;\n    struct1Address[1] = 0;\n    struct1Address[2] = 0;\n    struct1Address[0x19] = 0;\n    *(undefined2 *)((int)struct1Address + 0xe) = 0;\n    struct1Address[4] = 0;\n    struct1Address[5] = 0;\n    struct1Address[6] = 0;\n    memset_with_value_00081f00(struct1Address + 0x17,0,8);\n    struct2Address = *(undefined4 **)(dataStructAddress + 8);\n    struct1Address[7] = struct1Address;\n    struct1Address[8] = 0x84221;\n    struct1Address[9] = 0x84245;\n    struct1Address[10] = 0x8427d;\n    struct1Address[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)struct2Address + 0xe) = 1;\n    *(undefined2 *)(struct2Address + 3) = 9;\n    *struct2Address = 0;\n    struct2Address[1] = 0;\n    struct2Address[2] = 0;\n    struct2Address[0x19] = 0;\n    struct2Address[4] = 0;\n    struct2Address[5] = 0;\n    struct2Address[6] = 0;\n    memset_with_value_00081f00(struct2Address + 0x17,0,8);\n    struct1Address = *(undefined4 **)(dataStructAddress + 0xc);\n    struct2Address[7] = struct2Address;\n    struct2Address[8] = 0x84221;\n    struct2Address[9] = 0x84245;\n    struct2Address[10] = 0x8427d;\n    struct2Address[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(struct1Address + 3) = 0x12;\n    *(undefined2 *)((int)struct1Address + 0xe) = 2;\n    *struct1Address = 0;\n    struct1Address[1] = 0;\n    struct1Address[2] = 0;\n    struct1Address[0x19] = 0;\n    struct1Address[4] = 0;\n    struct1Address[5] = 0;\n    struct1Address[6] = 0;\n    memset_with_value_00081f00(struct1Address + 0x17,0,8);\n    struct1Address[7] = struct1Address;\n    struct1Address[8] = 0x84221;\n    struct1Address[9] = 0x84245;\n    struct1Address[10] = 0x8427d;\n    struct1Address[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructAddress",
                "puVar1": "struct1Address",
                "puVar2": "struct2Address"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int index;\n  uint result;\n  uint byteValue;\n  byte *bytePtr;\n  uint counter;\n  byte byteValue1;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  index = get_offset_from_elf_rel_array_0008400c();\n  if ((index == 1) && (param2 - 1 < 0xff)) {\n    byteValue = param2 & 0xff;\n    byteValue1 = (byte)byteValue;\n    result = 1;\n  }\n  else {\n    result = execute_relocation_function_0008434c(param1,&byteValue1,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    byteValue = (uint)byteValue1;\n  }\n  counter = 0;\n  do {\n    bytePtr = param3[2] + -1;\n    param3[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)param3[6] <= (int)bytePtr) {\n        **param3 = (byte)byteValue;\n        bytePtr = *param3;\n        byteValue = (uint)*bytePtr;\n        if (byteValue != 10) goto LAB_00083a04;\n      }\n      index = process_data_000842a4(param1,byteValue,param3);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)byteValue;\n      bytePtr = *param3;\nLAB_00083a04:\n      *param3 = bytePtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    byteValue = (uint)byteArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index",
                "uVar2": "result",
                "uVar3": "byteValue",
                "pbVar4": "bytePtr",
                "uVar5": "counter",
                "local_1c": "byteValue1",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "optimize_and_update_relocation_00083a74",
            "code": "\nundefined4 optimize_and_update_relocation_00083a74(undefined4 context,int initial_offset)\n\n{\n  int result;\n  uint relocation_info;\n  int new_offset;\n  \n  FUNC_00081f94();\n  relocation_info = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  new_offset = ((relocation_info - initial_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_offset) {\n    result = update_value_0008236c(context,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relocation_info) {\n      result = update_value_0008236c(context,-new_offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - new_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relocation_info - new_offset | 1;\n        FUNC_00081f98(context);\n        return 1;\n      }\n      new_offset = update_value_0008236c(context,0);\n      if (0xf < (int)(new_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = new_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             new_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(context);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "optimize_and_update_relocation_00083a74",
                "param_1": "context",
                "param_2": "initial_offset",
                "iVar1": "result",
                "uVar2": "relocation_info",
                "iVar3": "new_offset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "optimize_and_update_relocation_00083b10",
            "code": "\nvoid optimizeAndUpdateRelocation_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isFlagSet;\n  uint var3;\n  dword var4;\n  int index2;\n  uint var6;\n  dword var7;\n  uint var8;\n  dword var9;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  var3 = *(uint *)(param2 + -4);\n  var7 = param2 - 8;\n  var6 = var3 & 0xfffffffe;\n  var4 = var7 + var6;\n  var8 = *(uint *)(var4 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == var4) {\n    var8 = var8 + var6;\n    if (-1 < (int)(var3 << 0x1f)) {\n      var7 = var7 - *(int *)(param2 + -8);\n      index2 = *(int *)(var7 + 0xc);\n      index1 = *(int *)(var7 + 8);\n      var8 = var8 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    var4 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(var7 + 4) = var8 | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = var7;\n    if (var4 <= var8) {\n      optimize_and_update_relocation_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(var4 + 4) = var8;\n    if ((var3 & 1) == 0) {\n      var7 = var7 - *(int *)(param2 + -8);\n      index1 = *(int *)(var7 + 8);\n      var6 = var6 + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isFlagSet = true;\n      }\n      else {\n        index2 = *(int *)(var7 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isFlagSet = false;\n      }\n    }\n    else {\n      isFlagSet = false;\n    }\n    if (-1 < *(int *)(var4 + var8 + 4) << 0x1f) {\n      var6 = var6 + var8;\n      index1 = *(int *)(var4 + 8);\n      if ((!isFlagSet) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = var7;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = var7;\n        *(undefined4 *)(var7 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var7 + 8) = 0x2007046c;\n        *(uint *)(var7 + 4) = var6 | 1;\n        *(uint *)(var7 + var6) = var6;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(var4 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(var7 + 4) = var6 | 1;\n    *(uint *)(var7 + var6) = var6;\n    if (!isFlagSet) {\n      if (var6 < 0x200) {\n        var3 = var6 & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var3);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(var6 >> 3) >> 2 & 0xffU);\n        *(int *)(var7 + 8) = index1;\n        *(uint *)(var7 + 0xc) = var3 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + var3) = var7;\n        *(dword *)(index1 + 0xc) = var7;\n        FUNC_00081f98(param1);\n        return;\n      }\n      var3 = var6 >> 9;\n      if (var3 < 5) {\n        index1 = (var6 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (var3 < 0x15) {\n        index1 = var3 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (var3 < 0x55) {\n        index1 = (var6 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (var3 < 0x155) {\n        index1 = (var6 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (var3 < 0x555) {\n        index1 = (var6 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      var9 = index2 * 4 + 0x20070464;\n      var4 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (var4 == var9) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        var9 = var4;\n      }\n      else {\n        do {\n          if ((*(uint *)(var4 + 4) & 0xfffffffc) <= var6) break;\n          var4 = *(dword *)(var4 + 8);\n        } while (var9 != var4);\n        var9 = *(dword *)(var4 + 0xc);\n      }\n      *(dword *)(var7 + 0xc) = var9;\n      *(dword *)(var7 + 8) = var4;\n      *(dword *)(var9 + 8) = var7;\n      *(dword *)(var4 + 0xc) = var7;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "optimize_and_update_relocation_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isFlagSet",
                "uVar3": "var3",
                "dVar4": "var4",
                "iVar5": "index2",
                "uVar6": "var6",
                "dVar7": "var7",
                "uVar8": "var8",
                "dVar9": "var9"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "relocated_and_optimized_function_00083ca8",
            "code": "\nundefined4 relocated_and_optimized_function_00083ca8(undefined4 *dst,uint *src,uint **relocation)\n\n{\n  int result;\n  uint index;\n  uint temp;\n  ushort flags;\n  uint value;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint size;\n  uint accum;\n  uint temp2;\n  uint local_count;\n  \n  if (relocation[2] != (uint *)0x0) {\n    flags = *(ushort *)(src + 3);\n    value = (uint)flags;\n    if (((int)(value << 0x1c) < 0) && (src[4] != 0)) {\n      ptr2 = *relocation;\n    }\n    else {\n      result = process_relocation_0008356c(dst,src);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(src + 3);\n      value = (uint)flags;\n      ptr2 = *relocation;\n    }\n    if ((flags & 2) == 0) {\n      index = value & 2;\n      accum = index;\n      count = index;\n      local_count = index;\n      if ((value & 1) == 0) {\n        index = 0;\n        accum = 0;\n        while( true ) {\n          while (index == 0) {\n            accum = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            index = *ptr1;\n          }\n          count = src[2];\n          if ((int)(value << 0x16) < 0) {\n            if (index < count) {\n              value = *src;\n              count = index;\n            }\n            else if ((value & 0x480) == 0) {\n              value = *src;\n            }\n            else {\n              result = *src - src[4];\n              count = result + 1 + index;\n              size = (int)(src[5] * 3) / 2;\n              if (count <= size) {\n                count = size;\n              }\n              if ((int)(value << 0x15) < 0) {\n                size = relocate_and_optimize_00081810(dst,count);\n                if (size == 0) {\n                  *dst = 0xc;\n                  flags = *(ushort *)(src + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_00081d48(size,src[4],result);\n                *(ushort *)(src + 3) = *(ushort *)(src + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = relocate_and_optimize_function_00081fac(dst);\n                if (size == 0) {\n                  optimize_and_update_relocation_00083b10(dst,src[4]);\n                  flags = *(ushort *)(src + 3) & 0xff7f;\n                  *dst = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              value = size + result;\n              src[4] = size;\n              src[5] = count;\n              *src = value;\n              src[2] = count - result;\n              count = index;\n            }\n            copy_memory_00081e34(value,accum,count);\n            src[2] = src[2] - count;\n            *src = *src + count;\n            count = index;\n          }\n          else if ((src[4] < *src) || (value = src[5], index < value)) {\n            if (index < count) {\n              count = index;\n            }\n            copy_memory_00081e34(*src,accum,count);\n            value = src[2];\n            src[2] = value - count;\n            *src = *src + count;\n            if ((value - count == 0) && (result = process_data_00083850(dst,src), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            count = 0x7fffffff;\n            if (index < 0x7fffffff) {\n              count = index;\n            }\n            count = (*(code *)src[9])(dst,src[7],accum,(count / value) * value);\n            if ((int)count < 1) goto LAB_00083da2;\n          }\n          ptr1 = relocation[2];\n          accum = accum + count;\n          index = index - count;\n          relocation[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          value = (uint)*(ushort *)(src + 3);\n        }\n      }\n      else {\n        do {\n          while (index == 0) {\n            count = *ptr2;\n            index = ptr2[1];\n            local_count = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_count == 0) {\n            result = find_char_in_array_000840f8(count,10,index);\n            if (result == 0) {\n              accum = index + 1;\n              local_count = 1;\n            }\n            else {\n              accum = (result + 1) - count;\n              local_count = 1;\n            }\n          }\n          size = *src;\n          value = accum;\n          if (index <= accum) {\n            value = index;\n          }\n          temp = src[5];\n          if ((src[4] < size) && (temp2 = src[2] + temp, (int)temp2 < (int)value)) {\n            copy_memory_00081e34(size,count,temp2);\n            *src = *src + temp2;\n            result = process_data_00083850(dst,src);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)value < (int)temp) {\n            copy_memory_00081e34(size,count,value);\n            src[2] = src[2] - value;\n            *src = value + *src;\n            temp2 = value;\n          }\n          else {\n            temp2 = (*(code *)src[9])(dst,src[7],count,temp);\n            if ((int)temp2 < 1) goto LAB_00083da2;\n          }\n          accum = accum - temp2;\n          if (accum == 0) {\n            result = process_data_00083850(dst,src);\n            if (result != 0) goto LAB_00083da2;\n            local_count = 0;\n          }\n          ptr1 = relocation[2];\n          count = count + temp2;\n          index = index - temp2;\n          relocation[2] = (uint *)((int)ptr1 - temp2);\n        } while ((uint *)((int)ptr1 - temp2) != (uint *)0x0);\n      }\n    }\n    else {\n      index = 0;\n      value = 0;\n      do {\n        while( true ) {\n          accum = value;\n          if (0x7ffffbff < value) {\n            accum = 0x7ffffc00;\n          }\n          if (value != 0) break;\n          index = *ptr2;\n          value = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)src[9])(dst,src[7],index,accum);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(src + 3);\nLAB_00083da4:\n          *(ushort *)(src + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = relocation[2];\n        index = index + result;\n        value = value - result;\n        relocation[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "relocated_and_optimized_function_00083ca8",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "relocation",
                "iVar1": "result",
                "uVar2": "index",
                "uVar3": "temp",
                "uVar4": "flags",
                "uVar5": "value",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count",
                "uVar9": "size",
                "uVar10": "accum",
                "uVar11": "temp2",
                "local_2c": "local_count"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_offset_from_elf_rel_array_0008400c",
            "code": "\ndword getOffsetFromElfRelArray_0008400c(void)\n\n{\n  return relArray[275].offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_offset_from_elf_rel_array_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "initialize_and_optimize_00084018",
            "code": "\nvoid initializeAndOptimize_00084018(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int initializeResult;\n  int relocateResult;\n  uint uintValue;\n  bool flag;\n  undefined stackArray [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uintValue = (uint)ushortValue;\n  if ((int)(uintValue << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    initializeResult = initialize_memory_00084494(param1,(int)*(short *)((int)param2 + 0xe),stackArray);\n    if (-1 < initializeResult) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        initializeResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uintValue = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uintValue & 0x80) == 0) {\n    initializeResult = 0x400;\n  }\n  else {\n    initializeResult = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  relocateResult = relocate_and_optimize_00081810(param1,initializeResult);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (relocateResult == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = relocateResult;\n    param2[4] = relocateResult;\n    param2[5] = initializeResult;\n    if ((flag) && (initializeResult = initialize_flag_000844bc(param1,(int)*(short *)((int)param2 + 0xe)), initializeResult != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "initialize_and_optimize_00084018",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "initializeResult",
                "iVar3": "relocateResult",
                "uVar4": "uintValue",
                "bVar5": "flag",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_char_in_array_000840f8",
            "code": "\nuint * find_char_in_array_000840f8(uint *array,char target,uint size)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool condition;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < size) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        size = size - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        condition = index == size - 1;\n        index = index + 1;\n        if (condition) goto LAB_00084150;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (size == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    size = size - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (size == 0) goto LAB_00084150;\n      ptr = (uint *)((int)array + 1);\n      size = size - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "target",
                "param_3": "size",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "condition"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_parameter_000841e4",
            "code": "\nint processParameter_000841e4(uint parameter)\n\n{\n  dword relOffset;\n  undefined4 defaultValue;\n  int handler;\n  code *codePtr;\n  undefined4 unaffRegister4;\n  undefined4 unaffRegister5;\n  undefined4 lrRegister;\n  undefined4 constant;\n  \n  relOffset = relArray[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < parameter) {\n    *(undefined4 *)relArray[140].r_offset = 0x16;\n    return -1;\n  }\n  handler = *(int *)(relArray[140].r_offset + 0x2dc);\n  if ((handler == 0) || (codePtr = *(code **)(handler + parameter * 4), codePtr == (code *)0x0)) {\n    defaultValue = getDefault(relArray[140].r_offset);\n    DAT_20071244 = 0;\n    handler = FUNC_00080efc(defaultValue,parameter,parameter,0,constant,unaffRegister4,unaffRegister5,lrRegister);\n    if ((handler == -1) && (DAT_20071244 != 0)) {\n      *(int *)relOffset = DAT_20071244;\n      return -1;\n    }\n    return handler;\n  }\n  if (codePtr == (code *)0x1) {\n    return 0;\n  }\n  if (codePtr != (code *)0xffffffff) {\n    *(undefined4 *)(handler + parameter * 4) = 0;\n    (*codePtr)(parameter);\n    return 0;\n  }\n  *(undefined4 *)relArray[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "param_1": "parameter",
                "dVar1": "relOffset",
                "uVar2": "defaultValue",
                "iVar3": "handler",
                "pcVar4": "codePtr",
                "unaff_r4": "unaffRegister4",
                "unaff_r5": "unaffRegister5",
                "in_lr": "lrRegister",
                "uVar5": "constant",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "thunk_get_default_value_00080efe": "getDefault"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_return_value_thunk_00080efe",
            "code": "\nundefined4 getReturnValue_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_return_value_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_status_and_add_value_00084220",
            "code": "\nvoid updateStatusAndAddValue_00084220(undefined4 status,int dataOffset)\n\n{\n  int result;\n  \n  result = checkAndUpdateStatus(status,(int)*(short *)(dataOffset + 0xe));\n  if (-1 < result) {\n    *(int *)(dataOffset + 0x50) = *(int *)(dataOffset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(dataOffset + 0xc) = *(ushort *)(dataOffset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_status_and_add_value_00084220",
                "param_1": "status",
                "param_2": "dataOffset",
                "iVar1": "result",
                "check_and_set_completion_status_00084508": "checkAndUpdateStatus"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *outputBuffer,int inputBuffer,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  ushort value;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 unusedVar4;\n  \n  value = *(ushort *)(inputBuffer + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check_application_000844e0(outputBuffer,(int)*(short *)(inputBuffer + 0xe),0,2);\n    value = *(ushort *)(inputBuffer + 0xc);\n  }\n  *(ushort *)(inputBuffer + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = copy_bytes_00080ec8((int)*(short *)(inputBuffer + 0xe),param3,param4,param4,unusedVar1,unusedVar2,\n                       unusedVar3,unusedVar4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputBuffer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "unaff_r6": "unusedVar3",
                "in_lr": "unusedVar4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "initialize_and_modify_value_0008427c",
            "code": "\nvoid initializeAndModifyValue_0008427c(undefined4 applicationPointer,int dataPointer)\n\n{\n  int applicationValue;\n  ushort modifiedValue;\n  \n  applicationValue = initialize_and_check_application_000844e0(applicationPointer,(int)*(short *)(dataPointer + 0xe));\n  if (applicationValue == -1) {\n    modifiedValue = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  }\n  else {\n    modifiedValue = *(ushort *)(dataPointer + 0xc) | 0x1000;\n  }\n  if (applicationValue != -1) {\n    *(int *)(dataPointer + 0x50) = applicationValue;\n  }\n  *(ushort *)(dataPointer + 0xc) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "initialize_and_modify_value_0008427c",
                "param_1": "applicationPointer",
                "param_2": "dataPointer",
                "iVar1": "applicationValue",
                "uVar2": "modifiedValue"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int data_pointer,uint character,undefined4 *data,undefined4 param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr_value;\n  int index;\n  \n  if ((data_pointer != 0) && (*(int *)(data_pointer + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  ushort_value = *(ushort *)(data + 3);\n  uint_value = (uint)ushort_value;\n  data[2] = data[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data[4], index == 0)) {\n    index = process_relocation_0008356c(data_pointer,data,ushort_value,uint_value,param);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data + 3);\n    index = data[4];\n    uint_value = (uint)ushort_value;\n  }\n  character = character & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr_value = (undefined *)*data;\n    index = (int)ptr_value - index;\n    if (index < (int)data[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    ptr_value = (undefined *)*data;\n    *(ushort *)(data + 3) = ushort_value | 0x2000;\n    index = (int)ptr_value - index;\n    if (index < (int)data[5]) goto LAB_000842d6;\n  }\n  index = process_data_000842a4_00083850(data_pointer,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr_value = (undefined *)*data;\n  index = 1;\nLAB_000842d8:\n  data[2] = data[2] + -1;\n  *data = ptr_value + 1;\n  *ptr_value = (char)character;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = process_data_000842a4_00083850(data_pointer,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data_pointer",
                "param_2": "character",
                "param_3": "data",
                "param_4": "param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr_value",
                "iVar4": "index"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_function_0008434c",
            "code": "\nvoid executeRelocationFunction_0008434c(undefined4 *result,int size,undefined4 value,undefined4 *status)\n\n{\n  dword relocationInfo;\n  undefined4 memoryAddress;\n  int resultStatus;\n  undefined temporaryStorage [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memoryAddress = get_memory_address_00084004();\n    resultStatus = (*(code *)relocationInfo)(result,temporaryStorage,0,memoryAddress,status);\n  }\n  else {\n    memoryAddress = get_memory_address_00084004();\n    resultStatus = (*(code *)relocationInfo)(result,size,value,memoryAddress,status);\n  }\n  if (resultStatus == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_function_0008434c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value",
                "param_4": "status",
                "dVar1": "relocationInfo",
                "uVar2": "memoryAddress",
                "iVar3": "resultStatus",
                "auStack_24": "temporaryStorage"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "set_byte_value_0008439c",
            "code": "\nundefined4 set_byte_value_0008439c(undefined4 *output_ptr,undefined *byte_ptr,uint value)\n\n{\n  if (byte_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *byte_ptr = (char)value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "set_byte_value_0008439c",
                "param_1": "output_ptr",
                "param_2": "byte_ptr",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_data_00084484",
            "code": "\nundefined4 processData_00084484(int inputData)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputData != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083888();\n    }\n    if (*(short *)(inputData + 0xc) != 0) {\n      result = process_data_00083850(offset,inputData);\n      if ((*(code **)(inputData + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(inputData + 0x2c))(offset,*(undefined4 *)(inputData + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x18) < 0) {\n        optimize_and_update_relocation_00083b10(offset,*(undefined4 *)(inputData + 0x10));\n      }\n      if (*(int *)(inputData + 0x30) != 0) {\n        if (*(int *)(inputData + 0x30) != inputData + 0x40) {\n          optimize_and_update_relocation_00083b10(offset);\n        }\n        *(undefined4 *)(inputData + 0x30) = 0;\n      }\n      if (*(int *)(inputData + 0x44) != 0) {\n        optimize_and_update_relocation_00083b10(offset);\n        *(undefined4 *)(inputData + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(inputData + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "inputData",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "initialize_memory_00084494",
            "code": "\nvoid initializeMemory_00084494(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int iVar1;\n  \n  DAT_20071244 = 0;\n  iVar1 = initialize_memory_00080eb0(arg1,arg2,arg2,0,arg3);\n  if ((iVar1 == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "initialize_memory_00084494",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "initialize_flag_000844bc",
            "code": "\nvoid initializeFlag_000844bc(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initializeFlag_000844bcHelper(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *outputValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "initialize_flag_000844bc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "initialize_flag_00080eba": "initializeFlagHelper",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "initialize_and_check_application_000844e0",
            "code": "\nvoid initializeAndCheckApplication_000844e0(int *result,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_application_00080ebe(param2,param3,param4);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "initialize_and_check_application_000844e0",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "check_and_set_completion_status_00084508",
            "code": "\nvoid checkAndSetCompletionStatus_00084508(int *resultPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int completionStatus;\n  \n  DAT_20071244 = 0;\n  completionStatus = check_completion_status_00080ec2(param2,param3,param4);\n  if ((completionStatus == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "check_and_set_completion_status_00084508",
                "param_1": "resultPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "completionStatus"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_params_and_calculate_00084530",
            "code": "\nint checkParamsAndCalculate_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_calculate_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_params_and_calculate_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculateDifference_0008455c(uint inputValue,int valueToSubtract,undefined4 lowerHalf,undefined4 upperHalf,int *resultArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = div_unsigned_000845c0();\n  product = product * CONCAT44(upperHalf,lowerHalf);\n  result = (uint)product;\n  *resultArray = inputValue - result;\n  resultArray[1] = (valueToSubtract - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "inputValue",
                "param_2": "valueToSubtract",
                "param_3": "lowerHalf",
                "param_4": "upperHalf",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_calculate_0008458c",
            "code": "\nvoid subtractAndCalculate_0008458c(uint inputValue,int intValue,undefined4 val1,undefined4 val2,int *outputArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_with_remainder_00084860();\n  product = product * CONCAT44(val2,val1);\n  result = (uint)product;\n  *outputArray = inputValue - result;\n  outputArray[1] = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_calculate_0008458c",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "val1",
                "param_4": "val2",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "div_unsigned_000845c0",
            "code": "\nundefined8 divUnsigned_000845c0(uint dividend,uint remainder,uint divisor,uint quotient)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  int shiftAmount;\n  uint remainder1;\n  uint remainder2;\n  uint isDividendNegative;\n  uint isDivisorNegative;\n  uint quotientTemp1;\n  uint quotientTemp2;\n  bool isCarry;\n  \n  if ((int)remainder < 0) {\n    isCarry = dividend != 0;\n    dividend = -dividend;\n    remainder = -remainder - (uint)isCarry;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)quotient < 0) {\n    isDividendNegative = ~isDividendNegative;\n    isCarry = divisor != 0;\n    divisor = -divisor;\n    quotient = -quotient - (uint)isCarry;\n  }\n  if (quotient == 0) {\n    if (remainder < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotient2 = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        remainder = remainder << shiftAmount | quotient2;\n      }\n      quotient1 = divisor >> 0x10;\n      quotient3 = remainder / quotient1;\n      remainder1 = (divisor & 0xffff) * quotient3;\n      isDivisorNegative = dividend >> 0x10 | (remainder - quotient1 * quotient3) * 0x10000;\n      quotient2 = quotient3;\n      if (isDivisorNegative <= remainder1 && remainder1 - isDivisorNegative != 0) {\n        isCarry = CARRY4(isDivisorNegative,divisor);\n        isDivisorNegative = isDivisorNegative + divisor;\n        quotient2 = quotient3 - 1;\n        if ((isCarry == false) && (isDivisorNegative <= remainder1 && remainder1 - isDivisorNegative != 0)) {\n          quotient2 = quotient3 - 2;\n          isDivisorNegative = isDivisorNegative + divisor;\n        }\n      }\n      remainder2 = (isDivisorNegative - remainder1) / quotient1;\n      quotient3 = (divisor & 0xffff) * remainder2;\n      remainder1 = dividend & 0xffff | ((isDivisorNegative - remainder1) - quotient1 * remainder2) * 0x10000;\n      quotient1 = remainder2;\n      if (remainder1 <= quotient3 && quotient3 - remainder1 != 0) {\n        quotient1 = remainder2 - 1;\n        if ((CARRY4(remainder1,divisor) == false) &&\n           (remainder1 + divisor <= quotient3 && quotient3 - (remainder1 + divisor) != 0)) {\n          quotient1 = remainder2 - 2;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      quotient2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        remainder = remainder - divisor;\n        quotient3 = divisor >> 0x10;\n        quotientTemp2 = divisor & 0xffff;\n        quotient2 = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotient2 = remainder >> (0x20U - shiftAmount & 0xff);\n        quotient3 = divisor >> 0x10;\n        isDivisorNegative = quotient2 / quotient3;\n        quotientTemp2 = divisor & 0xffff;\n        remainder1 = quotientTemp2 * isDivisorNegative;\n        remainder2 = dividend >> (0x20U - shiftAmount & 0xff) | remainder << shiftAmount;\n        quotient2 = remainder2 >> 0x10 | (quotient2 - quotient3 * isDivisorNegative) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient1 = isDivisorNegative;\n        if (quotient2 <= remainder1 && remainder1 - quotient2 != 0) {\n          isCarry = CARRY4(quotient2,divisor);\n          quotient2 = quotient2 + divisor;\n          quotient1 = isDivisorNegative - 1;\n          if ((isCarry == false) && (quotient2 <= remainder1 && remainder1 - quotient2 != 0)) {\n            quotient1 = isDivisorNegative - 2;\n            quotient2 = quotient2 + divisor;\n          }\n        }\n        quotient4 = (quotient2 - remainder1) / quotient3;\n        isDivisorNegative = quotientTemp2 * quotient4;\n        remainder = remainder2 & 0xffff | ((quotient2 - remainder1) - quotient3 * quotient4) * 0x10000;\n        quotient2 = quotient4;\n        if (remainder <= isDivisorNegative && isDivisorNegative - remainder != 0) {\n          isCarry = CARRY4(remainder,divisor);\n          remainder = remainder + divisor;\n          quotient2 = quotient4 - 1;\n          if ((isCarry == false) && (remainder <= isDivisorNegative && isDivisorNegative - remainder != 0)) {\n            quotient2 = quotient4 - 2;\n            remainder = remainder + divisor;\n          }\n        }\n        remainder = remainder - isDivisorNegative;\n        quotient2 = quotient2 | quotient1 << 0x10;\n      }\n      quotient1 = remainder / quotient3;\n      isDivisorNegative = quotientTemp2 * quotient1;\n      remainder2 = dividend >> 0x10 | (remainder - quotient3 * quotient1) * 0x10000;\n      remainder1 = quotient1;\n      if (remainder2 <= isDivisorNegative && isDivisorNegative - remainder2 != 0) {\n        isCarry = CARRY4(remainder2,divisor);\n        remainder2 = remainder2 + divisor;\n        remainder1 = quotient1 - 1;\n        if ((isCarry == false) && (remainder2 <= isDivisorNegative && isDivisorNegative - remainder2 != 0)) {\n          remainder1 = quotient1 - 2;\n          remainder2 = remainder2 + divisor;\n        }\n      }\n      quotient4 = (remainder2 - isDivisorNegative) / quotient3;\n      quotientTemp2 = quotientTemp2 * quotient4;\n      quotient3 = dividend & 0xffff | ((remainder2 - isDivisorNegative) - quotient3 * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (quotient3 <= quotientTemp2 && quotientTemp2 - quotient3 != 0) {\n        quotient1 = quotient4 - 1;\n        if ((CARRY4(quotient3,divisor) == false) &&\n           (quotient3 + divisor <= quotientTemp2 && quotientTemp2 - (quotient3 + divisor) != 0)) {\n          quotient1 = quotient4 - 2;\n        }\n      }\n      quotient1 = quotient1 | remainder1 << 0x10;\n    }\n  }\n  else if (remainder < quotient) {\n    quotient2 = 0;\n    quotient1 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(quotient);\n    if (shiftAmount == 0) {\n      if ((quotient < remainder) || (divisor <= dividend)) {\n        quotient2 = 0;\n        quotient1 = 1;\n      }\n      else {\n        quotient1 = 0;\n        quotient2 = 0;\n      }\n    }\n    else {\n      quotient2 = 0x20 - shiftAmount;\n      quotient3 = remainder >> (quotient2 & 0xff);\n      quotientTemp2 = divisor >> (quotient2 & 0xff) | quotient << shiftAmount;\n      isDivisorNegative = quotientTemp2 >> 0x10;\n      quotient1 = quotient3 / isDivisorNegative;\n      remainder2 = (quotientTemp2 & 0xffff) * quotient1;\n      remainder1 = remainder << shiftAmount | dividend >> (quotient2 & 0xff);\n      quotient3 = remainder1 >> 0x10 | (quotient3 - isDivisorNegative * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (quotient3 <= remainder2 && remainder2 - quotient3 != 0) {\n        isCarry = CARRY4(quotient3,quotientTemp2);\n        quotient3 = quotient3 + quotientTemp2;\n        quotient2 = quotient1 - 1;\n        if ((isCarry == false) && (quotient3 <= remainder2 && remainder2 - quotient3 != 0)) {\n          quotient2 = quotient1 - 2;\n          quotient3 = quotient3 + quotientTemp2;\n        }\n      }\n      quotient4 = (quotient3 - remainder2) / isDivisorNegative;\n      quotientTemp1 = (quotientTemp2 & 0xffff) * quotient4;\n      quotient3 = remainder1 & 0xffff | ((quotient3 - remainder2) - isDivisorNegative * quotient4) * 0x10000;\n      quotient1 = quotient4;\n      if (quotient3 <= quotientTemp1 && quotientTemp1 - quotient3 != 0) {\n        isCarry = CARRY4(quotient3,quotientTemp2);\n        quotient3 = quotient3 + quotientTemp2;\n        quotient1 = quotient4 - 1;\n        if ((isCarry == false) && (quotient3 <= quotientTemp1 && quotientTemp1 - quotient3 != 0)) {\n          quotient1 = quotient4 - 2;\n          quotient3 = quotient3 + quotientTemp2;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(divisor << shiftAmount);\n      remainder1 = (uint)((ulonglong)temp >> 0x20);\n      quotient2 = 0;\n      if ((quotient3 - quotientTemp1 < remainder1) ||\n         ((quotient3 - quotientTemp1 == remainder1 && (dividend << shiftAmount < (uint)temp)))) {\n        quotient1 = quotient1 - 1;\n        quotient2 = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    isCarry = quotient1 != 0;\n    quotient1 = -quotient1;\n    quotient2 = -quotient2 - (uint)isCarry;\n  }\n  return CONCAT44(quotient2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "div_unsigned_000845c0",
                "param_1": "dividend",
                "param_2": "remainder",
                "param_3": "divisor",
                "param_4": "quotient",
                "lVar1": "temp",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "iVar6": "shiftAmount",
                "uVar7": "remainder1",
                "uVar8": "remainder2",
                "uVar9": "isDividendNegative",
                "uVar10": "isDivisorNegative",
                "uVar11": "quotientTemp1",
                "uVar12": "quotientTemp2",
                "bVar13": "isCarry"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "divide_with_remainder_00084860",
            "code": "\nulonglong divide_with_remainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong product;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        quotient4 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shiftAmount;\n        temp3 = divisor >> (0x20U - shiftAmount & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp4 = temp3 / quotient2;\n        quotient4 = quotient & 0xffff;\n        quotient1 = quotient4 * temp4;\n        temp1 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        quotient3 = temp1 >> 0x10 | (temp3 - quotient2 * temp4) * 0x10000;\n        dividend = dividend << shiftAmount;\n        temp3 = temp4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carryFlag = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp3 = temp4 - 1;\n          if ((carryFlag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp3 = temp4 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp2 = (quotient3 - quotient1) / quotient2;\n        temp4 = quotient4 * temp2;\n        divisor = temp1 & 0xffff | ((quotient3 - quotient1) - quotient2 * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((carryFlag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp4;\n        quotient1 = quotient1 | temp3 << 0x10;\n      }\n      temp4 = divisor / quotient2;\n      quotient3 = quotient4 * temp4;\n      temp1 = dividend >> 0x10 | (divisor - quotient2 * temp4) * 0x10000;\n      temp3 = temp4;\n      if (temp1 <= quotient3 && quotient3 - temp1 != 0) {\n        carryFlag = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp3 = temp4 - 1;\n        if ((carryFlag == false) && (temp1 <= quotient3 && quotient3 - temp1 != 0)) {\n          temp3 = temp4 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp4 = (temp1 - quotient3) / quotient2;\n      quotient4 = quotient4 * temp4;\n      temp1 = dividend & 0xffff | ((temp1 - quotient3) - quotient2 * temp4) * 0x10000;\n      quotient2 = temp4;\n      if (temp1 <= quotient4 && quotient4 - temp1 != 0) {\n        quotient2 = temp4 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= quotient4 && quotient4 - (temp1 + quotient) != 0)) {\n          quotient2 = temp4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp3 << 0x10);\n    }\n    shiftAmount = LZCOUNT(quotient);\n    if (shiftAmount != 0) {\n      temp3 = dividend >> (0x20U - shiftAmount & 0xff);\n      quotient = quotient << shiftAmount;\n      dividend = dividend << shiftAmount;\n      divisor = temp3 | divisor << shiftAmount;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    quotient4 = (quotient & 0xffff) * quotient2;\n    temp4 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp3 = quotient2;\n    if (temp4 <= quotient4 && quotient4 - temp4 != 0) {\n      carryFlag = CARRY4(temp4,quotient);\n      temp4 = temp4 + quotient;\n      temp3 = quotient2 - 1;\n      if ((carryFlag == false) && (temp4 <= quotient4 && quotient4 - temp4 != 0)) {\n        temp3 = quotient2 - 2;\n        temp4 = temp4 + quotient;\n      }\n    }\n    temp1 = (temp4 - quotient4) / quotient1;\n    quotient2 = (quotient & 0xffff) * temp1;\n    quotient4 = dividend & 0xffff | ((temp4 - quotient4) - quotient1 * temp1) * 0x10000;\n    quotient1 = temp1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      quotient1 = temp1 - 1;\n      if ((CARRY4(quotient4,quotient) == false) &&\n         (quotient4 + quotient <= quotient2 && quotient2 - (quotient4 + quotient) != 0)) {\n        quotient1 = temp1 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shiftAmount;\n      temp3 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shiftAmount | quotient >> (quotient1 & 0xff);\n      quotient4 = quotient2 >> 0x10;\n      quotient3 = temp3 / quotient4;\n      temp4 = (quotient2 & 0xffff) * quotient3;\n      temp1 = dividend >> (quotient1 & 0xff) | divisor << shiftAmount;\n      quotient1 = temp1 >> 0x10 | (temp3 - quotient4 * quotient3) * 0x10000;\n      temp3 = quotient3;\n      if (quotient1 <= temp4 && temp4 - quotient1 != 0) {\n        carryFlag = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp3 = quotient3 - 1;\n        if ((carryFlag == false) && (quotient1 <= temp4 && temp4 - quotient1 != 0)) {\n          temp3 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp4) / quotient4;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      quotient4 = temp1 & 0xffff | ((quotient1 - temp4) - quotient4 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (quotient4 <= temp2 && temp2 - quotient4 != 0) {\n        carryFlag = CARRY4(quotient4,quotient2);\n        quotient4 = quotient4 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carryFlag == false) && (quotient4 <= temp2 && temp2 - quotient4 != 0)) {\n          quotient1 = quotient3 - 2;\n          quotient4 = quotient4 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp3 << 0x10;\n      product = (ulonglong)quotient1 * (ulonglong)(quotient << shiftAmount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      if ((quotient4 - temp2 < temp3) || ((quotient4 - temp2 == temp3 && (dividend << shiftAmount < (uint)product)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084860": "divide_with_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "product",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "iVar10": "shiftAmount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 102148,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}