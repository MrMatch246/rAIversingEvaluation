{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "uStack_c": "temp1",
                "uStack_8": "temp2",
                "uStack_4": "temp3"
            },
            "code": "void process_data_000817c8(undefined4 data, undefined4* ptr1, undefined4* ptr2, undefined4* ptr3) {\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  temp1 = *ptr1;\n  temp2 = *ptr2;\n  temp3 = *ptr3;\n  perform_operation(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &temp1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_and_copy_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "copyParams_0008151c": "copy_params"
            },
            "code": "int compare_and_copy_00081560(int value1, int value2)\n{\n  if (value1 != value2) {\n    copy_params();\n  }\n  return value1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compare_and_copy_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "check_bits_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "count",
                "iVar1": "index",
                "*param_1": "*data",
                "do": "while"
            },
            "code": "int check_bits_00081684(uint *data, uint mask, uint expected, int count) {\n  int index = 0;\n  while (count > 0) {\n    if ((*data & mask) != expected) {\n      while (count > 0) {\n        if ((*data & mask) == expected) {\n          int i = 0;\n          while (i < index) {\n            if ((*data & mask) != expected) {\n              return i;\n            }\n            i++;\n          }\n          return 0;\n        }\n        count--;\n      }\n      return 0;\n    }\n    count--;\n    index++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "check_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_word_ptr",
                "puVar4": "src_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "dest_ptr",
                "bVar8": "is_null_byte"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src) {\n    char current_char;\n    ushort current_short;\n    uint *src_ptr;\n    uint *dest_ptr;\n    uint current_word;\n    uint next_word;\n    bool is_null_byte;\n\n    if ((((uint)dest ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            src = (uint *)((int)src + 1);\n            dest = (uint *)((int)dest + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)src & 3) != 0) {\n        src_ptr = src;\n        if (((uint)src & 1) != 0) {\n            src_ptr = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            dest = (uint *)((int)dest + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        src = src_ptr;\n        if (((uint)src_ptr & 2) != 0) {\n            src = (uint *)((int)src_ptr + 2);\n            current_short = *(ushort *)src_ptr;\n            is_null_byte = (current_short & 0xff) == 0;\n            if (is_null_byte) {\n                *(char *)dest = (char)current_short;\n            }\n            else {\n                *(ushort *)dest = current_short;\n                is_null_byte = (current_short & 0xff00) == 0;\n                dest = (uint *)((int)dest + 2);\n            }\n            if (is_null_byte) {\n                return;\n            }\n        }\n    }\n\n    current_word = *src;\n    src_ptr = src + 1;\n    dest_ptr = dest;\n\n    if (((uint)src & 4) != 0) {\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto LAB_00082630;\n        }\n        dest_ptr = dest + 1;\n        *dest = current_word;\n        src_ptr = src + 2;\n        current_word = src[1];\n    }\n\n    while (true) {\n        next_word = *src_ptr;\n        dest = dest_ptr;\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            break;\n        }\n        *dest_ptr = current_word;\n        current_word = next_word;\n        if ((next_word + 0xfefefeff & ~next_word & 0x80808080) != 0) {\n            break;\n        }\n        src_ptr = src_ptr + 2;\n        dest_ptr = dest_ptr + 2;\n    }\n\nLAB_00082630:\n    do {\n        *(char *)dest = (char)current_word;\n        next_word = current_word & 0xff;\n        current_word = current_word >> 8 | current_word << 0x18;\n        dest = (uint *)((int)dest + 1);\n    } while (next_word != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_0008151c",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_callback_if_set_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "should_use_default_param",
                "PTR_DAT_0008013c": "default_param",
                "DAT_00080140": "callback_function",
                "DAT_00080144": "callback_function_pointer"
            },
            "code": "void execute_callback_if_set_00080118(int param1, char* param2, int param3, int param4)\n{\n  if (DAT_00080134)\n  {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((DAT_00080140 != NULL) && (DAT_00080144 != NULL))\n  {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_callback_if_set_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "bit_number",
                "uVar1": "bit_mask"
            },
            "code": "int check_bit_and_set_00080aa8(int bit_number){\n    int bit_mask;\n    if (bit_number < 45) {\n        if (bit_number < 32) {\n            bit_mask = 1 << (bit_number & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n                *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n            }\n        }\n        else {\n            bit_mask = 1 << (bit_number - 32 & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n                *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "check_bit_and_set_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_data_00080f0c",
                "param_1": "index",
                "param_2": "type",
                "puVar1": "data_ptr1",
                "puVar2": "data_ptr2",
                "iVar3": "result",
                "uVar4": "bit",
                "uVar5": "bit",
                "uVar6": "bit",
                "bVar7": "byte1",
                "bVar8": "byte2",
                "iVar9": "data_index",
                "iVar10": "data_value"
            },
            "code": "int process_data_00080f0c(int index, int type, int value1, int value2) {\n  int result;\n  uint bit;\n  byte byte1, byte2;\n  undefined *data_ptr1;\n  undefined *data_ptr2;\n  int data_index;\n  int data_value;\n  data_ptr2 = PTR_DAT_0008100c;\n  data_ptr1 = PTR_DAT_00081008;\n  result = index;\n  if (PTR_DAT_00081008[index * 0x1c + 0xc] != 0) {\n    if ((PTR_DAT_0008100c[index] & 0xf) == 4) {\n      result = set_bit_in_integer(DAT_00081010, PTR_DAT_00081008[index * 0x1c + 0x19]);\n    }\n    byte2 = data_ptr2[index];\n    byte1 = byte2 & 0xf;\n    if (byte1 >= 3 || byte2 == 0) {\n      if (type == 1) {\n        data_index = index * 0x1c;\n        data_value = *(int *)(data_ptr1 + data_index);\n        if (byte2 >> 4 == 0) {\n          bit = 4;\n        }\n        else {\n          bit = 5;\n        }\n        result = process_data_00080f0c_00080a30(data_value, bit, *(undefined4 *)(data_ptr1 + data_index + 4), *(undefined4 *)(data_ptr1 + data_index + 0x10));\n        data_ptr2[index] = data_ptr2[index] & 0xf0 | 3;\n        if (*(int *)(data_value + 0x18) == -1) {\n          bit = *(uint *)(data_ptr1 + data_index + 8);\n          if (bit > 0x2c) {\n            return 1;\n          }\n          if (bit < 0x20) {\n            bit = 1 << (bit & 0xff);\n            byte2 = *(byte *)(DAT_00080b28 + 0x18);\n            if ((byte2 & bit) == bit) {\n              *(byte *)(DAT_00080b28 + 0x14) = byte2 & bit;\n            }\n          }\n          else {\n            bit = 1 << (bit - 0x20 & 0xff);\n            byte2 = *(byte *)(DAT_00080b28 + 0x108);\n            if ((byte2 & bit) == bit) {\n              *(byte *)(DAT_00080b28 + 0x104) = byte2 & bit;\n            }\n          }\n          return 0;\n        }\n      }\n    } else {\n      if (byte1 == 2 && type == 0) {\n        return result;\n      }\n      if (byte1 == 1 && type == 2) {\n        return result;\n      }\n      if (byte1 == 3) {\n        if (type == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (type == 0) {\n      data_index = index * 0x1c;\n      check_bit_and_set(*(undefined4 *)(data_ptr1 + data_index + 8));\n      result = process_data_00080f0c_00080a30(*(undefined4 *)(data_ptr1 + data_index), 3, *(undefined4 *)(data_ptr1 + data_index + 4), 0);\n      byte2 = data_ptr2[index] & 0xf0 | 2;\n    }\n    else {\n      if (type == 2) {\n        data_index = index * 0x1c;\n        check_bit_and_set(*(undefined4 *)(data_ptr1 + data_index + 8));\n        result = process_data_00080f0c_00080a30(*(undefined4 *)(data_ptr1 + data_index), 3, *(undefined4 *)(data_ptr1 + data_index + 4), 1);\n        byte2 = data_ptr2[index] & 0xf0 | 1;\n      }\n      else {\n        return result;\n      }\n    }\n    data_ptr2[index] = byte2;\n    return result;\n  }\n  return result;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080d58",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_00081014",
                "FUN_000801e0",
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "process_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "address",
                "param_2": "size",
                "iVar1": "global_var",
                "puVar2": "global_ptr",
                "iVar3": "ret_val",
                "uVar4": "aligned_size",
                "iVar5": "new_address"
            },
            "code": "int allocate_memory_00083a74(uint32_t address, int size)\n{\n  int global_var = DAT_00083b04;\n  do_nothing_00081f94();\n  uint32_t aligned_size = (*(uint *)(*(int *)(global_var + 8) + 4) & 0xfffffffc);\n  int new_address = ((aligned_size - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_address) {\n    int ret_val = add_to_global_0008236c(address, 0);\n    if (ret_val == *(int *)(global_var + 8) + aligned_size) {\n      ret_val = add_to_global_0008236c(address, -new_address);\n      undefined *global_ptr = PTR_DAT_00083b08;\n      if (ret_val != -1) {\n        int global_var_value = *(int *)PTR_DAT_00083b08;\n        *(uint *)(*(int *)(global_var + 8) + 4) = aligned_size - new_address | 1;\n        *(int *)global_ptr = global_var_value - new_address;\n        do_nothing_00081f98(address);\n        return 1;\n      }\n      new_address = add_to_global_0008236c(address, 0);\n      global_ptr = PTR_DAT_00083b08;\n      uint32_t address_difference = new_address - *(int *)(global_var + 8);\n      if (0xf < (int)address_difference) {\n        int global_var_value = *DAT_00083b0c;\n        *(uint *)(*(int *)(global_var + 8) + 4) = address_difference | 1;\n        *(int *)global_ptr = new_address - global_var_value;\n      }\n    }\n  }\n  do_nothing_00081f98(address);\n  return 0;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "processReturnValue_000844e0",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void processReturnValue_000844e0(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *ptr = PTR_DAT_00084504;\n  *(undefined4 *)ptr = 0;\n  int result = returnZero_00080ebe(input1, input2, input3);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "processReturnValue_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_from_heap_00083b10",
                "param_1": "heap_start_address",
                "param_2": "size",
                "iVar1": "prev_block_end_address",
                "iVar3": "index",
                "iVar5": "block_start_address",
                "iVar6": "next_block_start_address",
                "iVar8": "heap_base_address",
                "uVar2": "header_word",
                "uVar4": "block_size",
                "uVar7": "next_block_size",
                "do_nothing_00081f94": "do_nothing",
                "do_nothing_00081f98": "do_nothing_2"
            },
            "code": "void allocate_memory_from_heap_00083b10(void* heap_start_address, int size)\n{\n    if (size == 0) {\n        return;\n    }\n    do_nothing();\n    int heap_base_address = DAT_00083c98;\n    uint header_word = *(uint*)(size - 4);\n    int block_start_address = size - 8;\n    uint block_size = header_word & 0xfffffffe;\n    int block_end_address = block_start_address + block_size;\n    uint next_block_size = *(uint*)(block_end_address + 4) & 0xfffffffc;\n    if (*(int*)(DAT_00083c98 + 8) == block_end_address) {\n        next_block_size += block_size;\n        if (-1 < (int)(header_word << 0x1f)) {\n            block_start_address -= *(int*)(size - 8);\n            int prev_block_start_address = *(int*)(block_start_address + 0xc);\n            int next_block_start_address = *(int*)(block_start_address + 8);\n            next_block_size += *(int*)(size - 8);\n            *(int*)(next_block_start_address + 0xc) = prev_block_start_address;\n            *(int*)(prev_block_start_address + 8) = next_block_start_address;\n        }\n        uint smallest_block_size = *DAT_00083ca0;\n        *(uint*)(block_start_address + 4) = next_block_size | 1;\n        *(int*)(heap_base_address + 8) = block_start_address;\n        if (smallest_block_size <= next_block_size) {\n            allocate_memory_from_heap_00083b10(heap_start_address, *(undefined4*)PTR_DAT_00083ca4);\n        }\n    }\n    else {\n        header_word &= 1;\n        *(uint*)(block_end_address + 4) = next_block_size;\n        if (header_word == 0) {\n            block_start_address -= *(int*)(size - 8);\n            int prev_block_start_address = *(int*)(block_start_address + 8);\n            block_size += *(int*)(size - 8);\n            if (prev_block_start_address == heap_base_address + 8) {\n                header_word = 1;\n            }\n            else {\n                int prev_block_end_address = *(int*)(block_start_address + 0xc);\n                *(int*)(prev_block_start_address + 0xc) = prev_block_end_address;\n                *(int*)(prev_block_end_address + 8) = prev_block_start_address;\n            }\n        }\n        else {\n            header_word = 0;\n        }\n        if (-1 < *(int*)(block_end_address + next_block_size + 4) << 0x1f) {\n            block_size += next_block_size;\n            int next_block_start_address = *(int*)(block_end_address + 8);\n            if ((header_word == 0) && (next_block_start_address == DAT_00083c9c)) {\n                *(int*)(heap_base_address + 0x14) = block_start_address;\n                *(int*)(heap_base_address + 0x10) = block_start_address;\n                *(int*)(block_start_address + 0xc) = next_block_start_address;\n                *(int*)(block_start_address + 8) = next_block_start_address;\n                *(uint*)(block_start_address + 4) = block_size | 1;\n                *(uint*)(block_start_address + block_size) = block_size;\n                goto LAB_00083ba4;\n            }\n            int next_block_end_address = *(int*)(block_end_address + 0xc);\n            *(int*)(next_block_start_address + 0xc) = next_block_end_address;\n            *(int*)(next_block_end_address + 8) = next_block_start_address;\n        }\n        *(uint*)(block_start_address + 4) = block_size | 1;\n        *(uint*)(block_start_address + block_size) = block_size;\n        if (header_word == 0) {\n            if (block_size < 0x200) {\n                uint smallest_block_mask = *(uint*)(heap_base_address + 4);\n                int smallest_block_start_address = heap_base_address + (block_size & 0xfffffff8);\n                int smallest_block_end_address = *(int*)(smallest_block_start_address + 8);\n                *(int*)(block_start_address + 8) = smallest_block_end_address;\n                *(int*)(block_start_address + 0xc) = smallest_block_start_address;\n                *(uint*)(heap_base_address + 4) = smallest_block_mask | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n                *(int*)(smallest_block_start_address + 8) = block_start_address;\n                *(int*)(smallest_block_end_address + 0xc) = block_start_address;\n                do_nothing_2();\n                return;\n            }\n            uint block_size_divided_by_512 = block_size >> 9;\n            if (block_size_divided_by_512 < 5) {\n                int index = (block_size >> 6) + 0x38;\n                int offset = index * 2;\n            }\n            else if (block_size_divided_by_512 < 0x15) {\n                int index = block_size_divided_by_512 + 0x5b;\n                int offset = index * 2;\n            }\n            else if (block_size_divided_by_512 < 0x55) {\n                int index = (block_size >> 0xc) + 0x6e;\n                int offset = index * 2;\n            }\n            else if (block_size_divided_by_512 < 0x155) {\n                int index = (block_size >> 0xf) + 0x77;\n                int offset = index * 2;\n            }\n            else if (block_size_divided_by_512 < 0x555) {\n                int index = (block_size >> 0x12) + 0x7c;\n                int offset = index * 2;\n            }\n            else {\n                int offset = 0xfc;\n                int index = 0x7e;\n            }\n            int free_list_head_address = heap_base_address + index * 4;\n            int free_block_start_address = *(int*)(free_list_head_address + 8);\n            if (free_block_start_address == free_list_head_address) {\n                *(uint*)(DAT_00083c98 + 4) = *(uint*)(DAT_00083c98 + 4) | 1 << (index >> 2 & 0xffU);\n                free_block_start_address = free_list_head_address;\n            }\n            else {\n                do {\n                    if ((*(uint*)(free_block_start_address + 4) & 0xfffffffc) <= block_size) break;\n                    free_block_start_address = *(int*)(free_block_start_address + 8);\n                } while (free_list_head_address != free_block_start_address);\n            }\n            *(int*)(block_start_address + 0xc) = free_block_start_address;\n            *(int*)(block_start_address + 8) = *(int*)(free_block_start_address + 8);\n            *(int*)(free_block_start_address + 8) = block_start_address;\n            *(int*)(*(int*)(block_start_address + 8) + 0xc) = block_start_address;\n        }\n    }\nLAB_00083ba4:\n    do_nothing_2();\n    return;\n}",
            "called": [
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084484",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081800"
            ],
            "imported": false,
            "current_name": "allocate_memory_from_heap_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "calculate_result_00080e80"
            },
            "code": "int calculate_result_00080e80(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "convert_and_process_base_thunk_0008113a",
                "param_1": "ptr_param_array",
                "param_2": "param_value",
                "param_3": "base",
                "param_4": "param_4",
                "iVar1": "result",
                "iVar2": "minus_sign",
                "execute_function_pointer_000810cc": "execute_function_pointer",
                "convert_base_and_process_000810fc": "convert_and_process_base"
            },
            "code": "int convert_and_process_base_thunk_0008113a(uint32_t* ptr_param_array, uint32_t param_value, uint32_t base, uint32_t param_4) {\n    int result = 0;\n    if (base == 0) {\n        result = (**(code **)*ptr_param_array)(ptr_param_array, param_value & 0xff);\n        return result;\n    }\n    if (base == 10) {\n        if ((int)param_value < 0) {\n            int minus_sign = execute_function_pointer(ptr_param_array, 0x2d);\n            int absolute_value = convert_and_process_base_thunk_0008113a(ptr_param_array, -param_value, 10);\n            return absolute_value + minus_sign;\n        }\n    }\n    else {\n        base = base & 0xff;\n    }\n    result = convert_and_process_base_thunk_0008113a(ptr_param_array, param_value, base, param_4);\n    return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "convert_and_process_base_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "add_to_global_0008236c",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "previous_value",
                "iVar2": "previous_global_value"
            },
            "code": "void add_to_global_0008236c(int *result, int value) {\n    int *previous_value = PTR_DAT_0008238c;\n    *previous_value = 0;\n    int previous_global_value = add_to_global_0008236c_and_return_previous_00080e88(value);\n    if (previous_global_value == -1 && *previous_value != 0) {\n        *result = *previous_value;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "add_to_global_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_parameter_to_max_00080d62",
                "param_1": "parameter",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_parameter_to_max_00080d62(int parameter)\n{\n    int max_value = 65535;\n    *(int *)(parameter + 0x14) = max_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_parameter_to_max_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_input_data_000842a4",
                "param_1": "input_param",
                "param_2": "input_value",
                "param_3": "buffer_1",
                "param_4": "buffer_2",
                "uVar1": "buffer_value_1",
                "uVar2": "buffer_value_2",
                "puVar3": "buffer_ptr_1",
                "iVar4": "buffer_ptr_2"
            },
            "code": "uint process_input_data_000842a4(int input_param, uint input_value, undefined4 *buffer_1, undefined4 buffer_2){\n  ushort buffer_value_1;\n  uint buffer_value_2;\n  undefined *buffer_ptr_1;\n  int buffer_ptr_2;\n\n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    initialize_buffers_00083888();\n  }\n  buffer_value_1 = *(ushort *)(buffer_1 + 3);\n  buffer_value_2 = (uint)buffer_value_1;\n  buffer_1[2] = buffer_1[6];\n  if ((-1 < (int)(buffer_value_2 << 0x1c)) || (buffer_ptr_2 = buffer_1[4], buffer_ptr_2 == 0)) {\n    buffer_ptr_2 = process_data_0008356c(input_param, buffer_1, buffer_value_1, buffer_value_2, buffer_2);\n    if (buffer_ptr_2 != 0) {\n      return 0xffffffff;\n    }\n    buffer_value_1 = *(ushort *)(buffer_1 + 3);\n    buffer_ptr_2 = buffer_1[4];\n    buffer_value_2 = (uint)buffer_value_1;\n  }\n  input_value = input_value & 0xff;\n  if ((int)(buffer_value_2 << 0x12) < 0) {\n    buffer_ptr_1 = (undefined *)*buffer_1;\n    buffer_ptr_2 = (int)buffer_ptr_1 - buffer_ptr_2;\n    if (buffer_ptr_2 < (int)buffer_1[5]) {\nLAB_000842d6:\n      buffer_ptr_2 = buffer_ptr_2 + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer_1[0x19] = buffer_1[0x19] & 0xffffdfff;\n    buffer_ptr_1 = (undefined *)*buffer_1;\n    *(ushort *)(buffer_1 + 3) = buffer_value_1 | 0x2000;\n    buffer_ptr_2 = (int)buffer_ptr_1 - buffer_ptr_2;\n    if (buffer_ptr_2 < (int)buffer_1[5]) goto LAB_000842d6;\n  }\n  buffer_ptr_2 = process_data_00083850(input_param, buffer_1);\n  if (buffer_ptr_2 != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr_1 = (undefined *)*buffer_1;\n  buffer_ptr_2 = 1;\nLAB_000842d8:\n  buffer_1[2] = buffer_1[2] + -1;\n  *buffer_1 = buffer_ptr_1 + 1;\n  *buffer_ptr_1 = (char)input_value;\n  if (((buffer_1[5] == buffer_ptr_2) || (((int)((uint)*(ushort *)(buffer_1 + 3) << 0x1f) < 0 && (input_value == 10)))) && (buffer_ptr_2 = process_data_00083850(input_param, buffer_1), buffer_ptr_2 != 0)) {\n    return 0xffffffff;\n  }\n  return input_value;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_data_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_array_with_zeroes_000814f6",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "num_bytes",
                "*param_1": "array[0]",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]",
                "count_bytes_until_null_00082688": "count_bytes_until_null",
                "execute_command_and_handle_errors_if_any_000814d0": "execute_command_and_handle_errors"
            },
            "code": "undefined4* initialize_array_with_zeroes_000814f6(undefined4* array, int size){\n                        array[0] = 0;\n                        array[1] = 0;\n                        array[2] = 0;\n                        if (size != 0) {\n                            int num_bytes = count_bytes_until_null_00082688(size);\n                            execute_command_and_handle_errors(array, size, num_bytes);\n                        }\n                        return array;\n                    }",
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "add_to_global_and_return_previous_00080e88",
                "param_1": "value",
                "puVar1": "global_pointer",
                "iVar2": "previous_value"
            },
            "code": "int add_to_global_and_return_previous_00080e88(int value)\n{\n  undefined *global_pointer;\n  int previous_value;\n  \n  global_pointer = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  previous_value = *(int *)global_pointer;\n  *(int *)global_pointer = value + previous_value;\n  return previous_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "add_to_global_and_return_previous_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "add_data_to_buffer_000836d8",
                "puVar1": "data",
                "puVar2": "buffer_data_ptr",
                "iVar3": "data_index",
                "iVar4": "buffer",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836d0": "buffer_ptr",
                "PTR_DAT_000836e8": "buffer_data",
                "DAT_000836d4": "data_allocation_flag"
            },
            "code": "void add_data_to_buffer_000836d8(void)\n{\n  undefined *data = PTR_DAT_000836e8;\n  if (buffer_size == 0) {\n    return;\n  }\n  int buffer = *(int *)PTR_DAT_000836d0;\n  undefined4 *PTR_DAT_000836e8_ptr = *(undefined4 **)(buffer + 0x148);\n  if (PTR_DAT_000836e8_ptr == (undefined4 *)0x0) {\n    PTR_DAT_000836e8_ptr = (undefined4 *)(buffer + 0x14c);\n    *(undefined4 **)(buffer + 0x148) = PTR_DAT_000836e8_ptr;\n  }\n  int data_index = PTR_DAT_000836e8_ptr[1];\n  if (0x1f < data_index) {\n    if ((DAT_000836d4 == 0) ||\n       (PTR_DAT_000836e8_ptr = (undefined4 *)allocate_memory(400), PTR_DAT_000836e8_ptr == (undefined4 *)0x0)) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    *PTR_DAT_000836e8_ptr = *(undefined4 *)(buffer + 0x148);\n    PTR_DAT_000836e8_ptr[1] = 0;\n    data_index = 0;\n    *(undefined4 **)(buffer + 0x148) = PTR_DAT_000836e8_ptr;\n    PTR_DAT_000836e8_ptr[0x62] = 0;\n    PTR_DAT_000836e8_ptr[99] = 0;\n  }\n  PTR_DAT_000836e8_ptr[1] = data_index + 1;\n  PTR_DAT_000836e8_ptr[data_index + 2] = data;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "add_data_to_buffer_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "write_data_to_buffer_000812b8",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_info",
                "uVar2": "buffer_data_next_address",
                "buffer_info_address": "buffer_info_address",
                "buffer_size": "buffer_size",
                "buffer_data_start_address": "buffer_data_start_address",
                "buffer_data_end_address": "buffer_data_end_address",
                "buffer_data_current_address": "buffer_data_current_address"
            },
            "code": "int write_data_to_buffer_000812b8(int buffer_address, int data) {\n    int buffer_info_address = *(int *)(buffer_address + 0x18);\n    int buffer_info = *(int *)(buffer_info_address + 0x14);\n    int buffer_size = *(int *)(buffer_info_address + 0x14);\n    int buffer_data_start_address = *(int *)(buffer_info + 0x80);\n    int buffer_data_end_address = *(int *)(buffer_info + 0x84);\n    int buffer_data_current_address = buffer_data_start_address + buffer_size;\n    if ((buffer_data_end_address << 0x1e < 0) && (*(int *)(buffer_info + 0x84) == *(int *)(buffer_info + 0x80))) {\n        *(int *)(buffer_info_address + 0x1c) = data;\n    }\n    else {\n        uint buffer_data_next_address = DAT_00081308 & *(int *)(buffer_info + 0x80) + 1U;\n        if ((int)buffer_data_next_address < 0) {\n            buffer_data_next_address = (buffer_data_next_address - 1 | 0xffffff80) + 1;\n        }\n        while (*(uint *)(buffer_info + 0x84) == buffer_data_next_address);\n        *(char *)(buffer_data_current_address + buffer_info) = (char)data;\n        *(int *)(buffer_info + 0x80) = buffer_data_next_address;\n        *(int *)(buffer_info_address + 8) = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_buffer_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "return_error_code_thunk_00080efe"
            },
            "code": "int32_t return_error_code_thunk_00080efe(void)\n{\n    return -1;\n}\n",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "return_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_input_000839b4",
                "param_1": "input_value",
                "param_2": "input_length",
                "param_3": "output_buffer",
                "uVar1": "dat_value",
                "iVar2": "process_input_data_result",
                "uVar3": "masked_input_length",
                "pbVar4": "output_ptr",
                "uVar5": "i",
                "local_1c": "current_byte",
                "abStack_1b": "current_byte_stack",
                "get_dat_value_0008400c": "get_dat_value",
                "process_data_0008434c": "process_data",
                "process_input_data_000842a4": "process_input_data"
            },
            "code": "uint process_input_000839b4(uint input_value, uint input_length, byte **output_buffer) {\n  uint dat_value = get_dat_value_0008400c();\n  byte current_byte;\n  if (dat_value == 1 && input_length - 1 < 0xff) {\n    uint masked_input_length = input_length & 0xff;\n    current_byte = (byte)masked_input_length;\n  } else {\n    uint process_data_0008434c_result = process_data_0008434c(input_value, &current_byte, input_length, output_buffer + 0x17);\n    if (process_data_0008434c_result == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (process_data_0008434c_result == 0) {\n      return input_length;\n    }\n  }\n  uint i = 0;\n  byte *output_ptr;\n  byte current_byte_stack[3];\n  do {\n    output_ptr = *output_buffer + -1;\n    *output_buffer = output_ptr;\n    if ((int)output_ptr < 0) {\n      if ((int)(*output_buffer)[6] <= (int)output_ptr) {\n        **output_buffer = (byte)current_byte;\n        output_ptr = *output_buffer;\n        current_byte = (uint)*output_ptr;\n        if (current_byte != 10) {\n          goto LAB_00083a04;\n        }\n      }\n      int process_input_000839b4_data_result = process_input_000839b4_data(input_value, current_byte, output_buffer);\n      if (process_input_000839b4_data_result == -1) {\n        return 0xffffffff;\n      }\n    } else {\n      **output_buffer = (byte)current_byte;\n      output_ptr = *output_buffer;\nLAB_00083a04:\n      *output_buffer = output_ptr + 1;\n    }\n    if (dat_value <= i + 1) {\n      return input_length;\n    }\n    current_byte = (uint)current_byte_stack[i];\n    i = i + 1;\n  } while(true);\n}",
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_input_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "execute_and_copy_if_needed_00081570",
                "param_1": "ptr_params",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "execute_result",
                "iVar2": "current_offset",
                "execute_command_if_needed_000814ae": "execute_command_if_needed",
                "copy_string_000825cc": "copy_string"
            },
            "code": "int execute_and_copy_if_needed_00081570(int *ptr_params, int size, int offset)\n{\n  int current_offset = ptr_params[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int execute_result = execute_command_if_needed(ptr_params, current_offset + offset);\n    if (execute_result == 0) {\n      return 0;\n    }\n    copy_string(*ptr_params + current_offset, size);\n    ptr_params[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "execute_and_copy_if_needed_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_and_start_timer_channel_000803fc",
                "param_1": "channel_number",
                "param_2": "timer_value",
                "param_3": "bit_mask",
                "param_4": "bit_position",
                "unaff_r4": "timer_value_copy",
                "in_lr": "return_address",
                "uVar1": "timer_channel",
                "check_bit_and_set_00080aa8": "set_bit_in_register",
                "configure_tc_channel_00080b2c": "configure_timer_channel",
                "set_value_at_index_00080b90": "set_value_at_index",
                "DAT_00080448": "BIT_MASK_REGISTER_ADDRESS",
                "PTR_s____source_tc_c_00080b80": "TIMER_SOURCE_FILE",
                "PTR_s_TC_Start_00080b84": "TIMER_START_STRING",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "TIMER_CHANNEL_STRUCT_SIZE",
                "*DAT_00080b8c": "timer_config_function"
            },
            "code": "void configure_and_start_timer_channel_000803fc(int channel_number, uint32_t timer_value, uint32_t bit_mask, uint32_t bit_position)\n{\n  uint64_t timer_channel = ((uint64_t)timer_value << 32) | channel_number;\n  set_bit_in_register(bit_mask);\n  configure_timer_channel(channel_number, timer_value, 0xc002);\n  set_value_at_index(channel_number, timer_value, 0xa41);\n  *(int *)(DAT_00080448 + (bit_position >> 5) * 4) = 1 << (bit_position & 0x1f);\n  *(uint32_t *)(channel_number + timer_value * 0x40 + 0x24) = 4;\n  if (channel_number > 2) {\n    timer_channel = (**DAT_00080b8c)(PTR_s____source_tc_c_00080b80, 0x5c, PTR_s_TC_Start_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88, timer_value, bit_mask);\n  }\n  *(uint32_t *)((int)timer_channel + (int)((uint64_t)timer_channel >> 0x20) * 0x40) = 5;\n  return;\n}",
            "called": [
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_00080b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "configure_and_start_timer_channel_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_flag_00080eb0",
                "param_1": "ptr_value",
                "param_2": "flag",
                "*(undefined4 *)(param_2 + 4)": "*ptr_value",
                "0x2000": "flag"
            },
            "code": "int set_flag_00080eb0(int* ptr_value, int flag)\n{\n    *ptr_value |= flag;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_flag_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "initialize_and_execute_00081214",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "input_length",
                "uVar1": "currentValue",
                "PTR_DAT_00081240": "PTR_DAT_output_array"
            },
            "code": "void initialize_and_execute_00081214(uint8_t* output_array, uint8_t* input_array, uint input_length) {\n  uint currentValue;\n  initialize_array_with_zeroes(output_array, PTR_DAT_00081240);\n  while ((currentValue = get_value_from_pointer(input_array), -1 < (int)currentValue && (currentValue != input_length))) {\n    execute_and_copy(output_array, currentValue & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "mem_address",
                "param_2": "byte",
                "param_3": "byte_value",
                "*param_1": "*mem_address",
                "*param_2": "*byte"
            },
            "code": "int write_byte_to_memory_0008439c(unsigned int *mem_address, unsigned char *byte, unsigned int byte_value) {\n    if (byte == NULL) {\n        return 0;\n    }\n    if (byte_value < 256) {\n        *byte = (unsigned char)byte_value;\n        return 1;\n    }\n    *mem_address = 0x8a;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "process_input_00082824",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "current_element",
                "iVar2": "result",
                "piVar3": "end_data",
                "uVar4": "i",
                "puVar5": "current_element_address",
                "uVar6": "current_element_size",
                "uVar7": "num_elements"
            },
            "code": "int process_input_00082824(int input, int size, int **data) {\n  int *current_data = *data;\n  int *end_data = data[2];\n  while (current_data != NULL) {\n    uint32_t current_size = current_data[1];\n    uint32_t num_elements = current_size >> 2;\n    if (num_elements != 0) {\n      uint32_t i = 0;\n      int *current_element = (int *)(current_data[0] - 4);\n      while (i < num_elements) {\n        current_element++;\n        int result = process_input_00082824_000839b4(input, *current_element, size);\n        i++;\n        if (result == -1) {\n          goto error;\n        }\n      }\n    }\n    current_data = (int *)((int)current_data + (current_size & 0xfffffffc));\n  }\n  data[1] = NULL;\n  data[2] = NULL;\n  return 0;\n\nerror:\n  data[1] = NULL;\n  data[2] = NULL;\n  return -1;\n}",
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_input_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "process_return_value_and_update_status_0008427c",
                "param_1": "input_param",
                "param_2": "status",
                "iVar1": "process_result",
                "uVar2": "status_bits"
            },
            "code": "void process_return_value_and_update_status_0008427c(int input_param, int* status)\n{\n    int process_result = processReturnValue(input_param, *(short *)(status + 0xe));\n    ushort status_bits = *(ushort *)(status + 0xc);\n    if (process_result == -1) {\n        status_bits &= 0xefff;\n    }\n    else {\n        status_bits |= 0x1000;\n    }\n    if (process_result != -1) {\n        *(int *)(status + 0x50) = process_result;\n    }\n    *(ushort *)(status + 0xc) = status_bits;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "process_return_value_and_update_status_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "data_ptr",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "updated_data"
            },
            "code": "void update_data_000809be(int data_ptr, uint32_t update_type, uint32_t update_value)\n{\n  uint32_t updated_data;\n  updated_data = update_value;\n  switch(update_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_data = *(uint32_t *)(data_ptr + 0x70) & *(uint32_t *)(data_ptr + 0x70) & ~update_value;\n    break;\n  case 2:\n    updated_data = *(uint32_t *)(data_ptr + 0x70) | update_value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint32_t *)(data_ptr + 0x70) = updated_data;\nswitchD_000809c4_caseD_6:\n  *(uint32_t *)(data_ptr + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_if_flag_set_00080a94",
                "param_1": "flag_address",
                "param_2": "flag_value",
                "uVar1": "flag_mask"
            },
            "code": "uint check_if_flag_set_00080a94(int flag_address, uint flag_value) {\n    uint flag_mask = *(uint *)(flag_address + 8) & flag_value;\n    if (flag_mask != 0) {\n        if ((flag_value & *(uint *)(flag_address + 0x18)) == 0) {\n            flag_mask = 0;\n        }\n        else {\n            flag_mask = 1;\n        }\n    }\n    return flag_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_if_flag_set_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_data_to_0x8000_00081618",
                "DAT_00081620": "data_pointer"
            },
            "code": "void set_data_to_0x8000_00081618(void)\n{\n    *(undefined4 *)(DAT_00081620 + 4) = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "output",
                "uVar1": "result_1",
                "lVar2": "result_2"
            },
            "code": "void calculate_difference_0008455c(uint input_1, int input_2, undefined4 param_3, undefined4 param_4, int *output)\n{\n    uint result_1;\n    long long result_2;\n    result_2 = multiply_values();\n    result_2 = result_2 * CONCAT44(param_4, param_3);\n    result_1 = (uint)result_2;\n    *output = input_1 - result_1;\n    output[1] = (input_2 - (int)((ulonglong)result_2 >> 0x20)) - (uint)(input_1 < result_1);\n    return;\n}\n",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_character_000840f8",
                "param_1": "input_array",
                "param_2": "target_char",
                "param_3": "array_length",
                "puVar1": "result_ptr",
                "uVar2": "u_xor",
                "pcVar3": "char_ptr1",
                "pcVar4": "char_ptr2",
                "bVar5": "flag1"
            },
            "code": "uint * find_character_000840f8(uint *input_array, char target_char, uint *array_length) {\n  uint *result_ptr;\n  uint u_xor;\n  char *char_ptr1;\n  char *char_ptr2;\n  bool flag1;\n  if (((uint)input_array & 3) == 0) {\n    result_ptr = input_array;\n    if ((uint *)0x3 < array_length) {\n      do {\n        u_xor = *input_array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        result_ptr = input_array;\n        if ((u_xor + 0xfefefeff & ~u_xor & 0x80808080) != 0) break;\n        array_length = array_length + -1;\n        result_ptr = input_array + 1;\n        input_array = input_array + 1;\n      } while ((uint *)0x3 < array_length);\n    }\n    input_array = array_length;\n    char_ptr2 = (char *)((int)input_array + -1);\n    if ((input_array != (uint *)0x0) && (input_array = result_ptr, *(char *)result_ptr != target_char)) {\n      char_ptr1 = (char *)0x0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        flag1 = char_ptr1 == char_ptr2;\n        char_ptr1 = char_ptr1 + 1;\n        if (flag1) goto LAB_00084150;\n      } while (*(char *)input_array != target_char);\n    }\n  }\n  else if (array_length == (uint *)0x0) {\nLAB_00084150:\n    result_ptr = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_char) {\n    result_ptr = (uint *)((int)input_array + 1);\n    array_length = (uint *)((int)array_length + -1);\n    do {\n      input_array = result_ptr;\n      if (((uint)input_array & 3) == 0) goto LAB_00084128;\n      if (array_length == (uint *)0x0) goto LAB_00084150;\n      result_ptr = (uint *)((int)input_array + 1);\n      array_length = (uint *)((int)array_length + -1);\n    } while (*(char *)input_array != target_char);\n  }\n  return result_ptr;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "find_character_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_buffers_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = process_data_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_and_check_error_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_character_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_or_negative_00084530_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_or_negative_00084530_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    process_input_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_input_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = process_input_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_input_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_000817c8",
                "FUN_000834f0",
                "FUN_00081750"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "fill_buffer_with_byte_00081f00",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "last_word",
                "uVar3": "repeated_byte",
                "uVar4": "remaining_bytes",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_buffer_with_byte_00081f00(uint32_t *buffer, uint8_t byte, uint32_t size)\n{\n    uint32_t *current_word;\n    uint32_t *last_word;\n    uint32_t remaining_bytes;\n    uint32_t repeated_byte;\n\n    if (((uint32_t)buffer & 3) != 0)\n    {\n        bool is_size_zero = size == 0;\n        current_word = buffer;\n        size = size - 1;\n        if (is_size_zero) {\n            return;\n        }\n        while(true)\n        {\n            buffer = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = byte;\n            if (((uint32_t)buffer & 3) == 0) {\n                break;\n            }\n            is_size_zero = size == 0;\n            current_word = buffer;\n            size = size - 1;\n            if (is_size_zero) {\n                return;\n            }\n        }\n    }\n\n    if (3 < size)\n    {\n        repeated_byte = ((byte << 24) | (byte << 16) | (byte << 8) | byte);\n        remaining_bytes = size;\n        current_word = buffer;\n        if (0xF < size)\n        {\n            remaining_bytes = size - 0x10;\n            do\n            {\n                *current_word = repeated_byte;\n                current_word[1] = repeated_byte;\n                current_word[2] = repeated_byte;\n                current_word[3] = repeated_byte;\n                current_word = current_word + 4;\n            } while (current_word != (uint32_t *)((int)buffer + (remaining_bytes & 0xFFFFFFF0) + 0x10));\n            size = size & 0xF;\n            buffer = buffer + ((remaining_bytes >> 4) + 1) * 4;\n            remaining_bytes = size;\n            current_word = buffer;\n            if (size < 4) {\n                goto LAB_00081f7c;\n            }\n        }\n        do\n        {\n            remaining_bytes = remaining_bytes - 4;\n            *buffer = repeated_byte;\n            buffer = buffer + 1;\n        } while (3 < remaining_bytes);\n        buffer = (uint32_t *)((int)current_word + (size - 4 & 0xFFFFFFFC) + 4);\n        remaining_bytes = size & 3;\n    }\n\nLAB_00081f7c:\n    if (remaining_bytes != 0)\n    {\n        current_word = buffer;\n        do\n        {\n            last_word = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = byte;\n            current_word = last_word;\n        } while (last_word != (uint32_t *)(remaining_bytes + (int)buffer));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_byte_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_max_uint_00080eaa",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t return_max_uint_00080eaa() {\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_max_uint_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_block_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dst",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "i",
                "uVar5": "remaining_size",
                "bVar6": "is_size_less_than_eight",
                "LAB_00081dcc": "padding"
            },
            "code": "undefined4 *copy_memory_block_00081d48(undefined4 *destination, undefined4 *source, uint size)\n{\n    undefined4 *dst = destination;\n    uint remaining_size;\n    uint i;\n    bool is_size_less_than_eight = size < 8;\n\n    if ((((uint)source | (uint)destination) & 3) != 0) {\n        if (is_size_less_than_eight) {\n            remaining_size = size - 4;\n\n            if (3 < size) {\n                do {\n                    *dst = *source;\n                    dst = (undefined4 *)((int)dst + 1);\n                    source = (undefined4 *)((int)source + 1);\n                    remaining_size = remaining_size - 1;\n                } while (remaining_size != 0);\n\n                *(undefined *)(undefined4 *)((int)dst + 1) = *(undefined *)(undefined4 *)((int)source + 1);\n                *(undefined *)((int)dst + 2) = *(undefined *)((int)source + 2);\n                *(undefined *)((int)dst + 3) = *(undefined *)((int)source + 3);\n\n                return destination;\n            }\n\n            goto LAB_00081dcc;\n        }\n\n        if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n            uint padding_size = 4 - ((uint)destination & 3);\n            remaining_size = size - padding_size;\n            undefined4 *src = source;\n\n            if (((uint)destination & 1) != 0) {\n                src = (undefined4 *)((int)source + 1);\n                dst = (undefined4 *)((int)destination + 1);\n                *(undefined *)destination = *(undefined *)source;\n            }\n\n            if ((padding_size & 2) != 0) {\n                src = (undefined4 *)((int)src + 2);\n                dst = (undefined4 *)((int)dst + 2);\n                *(undefined2 *)dst = *(undefined2 *)src;\n            }\n        }\n    }\n\n    remaining_size = size;\n\n    while (remaining_size >= 0x40) {\n        for (i = 0; i < 0x10; i++) {\n            dst[i] = source[i];\n        }\n\n        dst = dst + 0x10;\n        source = source + 0x10;\n        remaining_size = remaining_size - 0x40;\n    }\n\n    uint remaining_size_minus_sixteen = remaining_size - 0x10;\n\n    if (0xffffffcf < remaining_size_minus_sixteen) {\n        do {\n            for (i = 0; i < 4; i++) {\n                dst[i] = source[i];\n            }\n\n            dst = dst + 4;\n            source = source + 4;\n            remaining_size_minus_sixteen = remaining_size_minus_sixteen - 0x10;\n        } while (remaining_size_minus_sixteen >= 0);\n    }\n\n    remaining_size = remaining_size_minus_sixteen + 0xc;\n    undefined4 *src = source;\n\n    if (0xfffffff3 < remaining_size_minus_sixteen) {\n        do {\n            src = (undefined4 *)((int)src + 1);\n            dst = (undefined4 *)((int)dst + 1);\n            *(undefined *)dst = *(undefined *)src;\n            remaining_size = remaining_size - 4;\n        } while (remaining_size >= 4);\n    }\n\nLAB_00081dcc:\n    if (remaining_size != 0) {\n        if ((remaining_size & 1) != 0) {\n            *(undefined *)dst = *(undefined *)src;\n            src = (undefined4 *)((int)src + 1);\n            dst = (undefined4 *)((int)dst + 1);\n        }\n\n        if ((remaining_size & 2) != 0) {\n            *(undefined2 *)dst = *(undefined2 *)src;\n        }\n    }\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_block_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "set_flag_and_return_if_error_00084494",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param4",
                "puVar1": "flag_ptr",
                "iVar2": "flag_result"
            },
            "code": "void set_flag_and_return_if_error_00084494(int* result, int param1, int param2, int param3, int param4) {\n    undefined *flag_ptr = PTR_DAT_000844b8;\n    *(undefined4*)flag_ptr = 0;\n    int flag_result = set_flag_00080eb0(param1, param2, param3, 0, param4);\n    if (flag_result == -1 && (*(int*)flag_ptr != 0)) {\n        *result = *(int*)flag_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "set_flag_and_return_if_error_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "calculate_difference_or_negative_00084530_00084530",
                "param_1": "first_number",
                "param_2": "second_number",
                "param_3": "third_number",
                "param_4": "fourth_number",
                "iVar1": "result"
            },
            "code": "int calculate_difference_or_negative_00084530_00084530(int first_number,int second_number,int third_number,int fourth_number)\n{\n  int result;\n  if ((fourth_number == 0) && (third_number == 0)) {\n    if (second_number != 0 || first_number != 0) {\n      first_number = -1;\n    }\n    return first_number;\n  }\n  result = calculate_difference_0008458c();\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "calculate_difference_or_negative_00084530_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "verify_checksums_00080970",
                "iVar1": "checksum",
                "calculate_checksum_00081248": "calculate_checksum",
                "PTR_DAT_000809a4": "checksum_1",
                "PTR_DAT_000809a8": "checksum_2",
                "PTR_DAT_000809ac": "checksum_3",
                "PTR_DAT_000809b0": "checksum_4",
                "do_nothing_0008073a": "handle_checksum_failure_1",
                "do_nothing_00080748": "handle_checksum_failure_2",
                "do_nothing_0008074a": "handle_checksum_failure_3",
                "do_nothing_0008074c": "handle_checksum_failure_4"
            },
            "code": "void verify_checksums_00080970(void)\n{\n  int checksum;\n  checksum = calculate_checksum(PTR_DAT_000809a4);\n  if (checksum != 0) {\n    do_nothing_0008073a();\n  }\n  checksum = calculate_checksum(PTR_DAT_000809a8);\n  if (checksum != 0) {\n    do_nothing_00080748();\n  }\n  checksum = calculate_checksum(PTR_DAT_000809ac);\n  if (checksum != 0) {\n    do_nothing_0008074a();\n  }\n  checksum = calculate_checksum(PTR_DAT_000809b0);\n  if (checksum != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008074c",
                "FUN_0008073a",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_00081248"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "verify_checksums_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "checkFlag_00084018",
                "param_1": "flag",
                "param_2": "flagData",
                "uVar1": "flagValue",
                "iVar2": "setFlagResult",
                "iVar3": "funcResult",
                "uVar4": "flagUint",
                "bVar5": "isFlag2000",
                "auStack_54": "NULL",
                "local_50": "flagCheckResult"
            },
            "code": "void checkFlag_00084018(int flag, int *flagData)\n{\n  ushort flagValue = *(ushort *)(flagData + 3);\n  uint flagUint = (uint)flagValue;\n  if ((int)(flagUint << 0x1e) < 0) {\n    *flagData = (int)flagData + 0x43;\n    flagData[4] = (int)flagData + 0x43;\n    flagData[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)flagData + 0xe)) {\n    int setFlagResult = setFlagAndReturnIfError(flag, (int)*(short *)((int)flagData + 0xe), NULL);\n    if (-1 < setFlagResult) {\n      bool isFlag2000 = (flagUint & 0xf000) == 0x2000;\n      if (((flagUint & 0xf000) == 0x8000) && ((undefined *)flagData[10] == DAT_0008427c)) {\n        setFlagResult = 0x400;\n        *(ushort *)(flagData + 3) = *(ushort *)(flagData + 3) | 0x400;\n        flagData[0x13] = 0x400;\n      }\n      else {\n        setFlagResult = 0x400;\n        *(ushort *)(flagData + 3) = *(ushort *)(flagData + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    flagValue = *(ushort *)(flagData + 3);\n    flagUint = (uint)flagValue;\n  }\n  *(ushort *)(flagData + 3) = flagValue | 0x800;\n  int flagCheckResult = 0x400;\n  if ((flagUint & 0x80) == 0) {\n    flagCheckResult = 0x400;\n  }\n  else {\n    flagCheckResult = 0x40;\n  }\n  bool isFlag2000 = false;\nLAB_00084074:\n  int funcResult = checkFunction(flag, flagCheckResult);\n  flagValue = *(ushort *)(flagData + 3);\n  if (funcResult == 0) {\n    if (-1 < (int)((uint)flagValue << 0x16)) {\n      *(ushort *)(flagData + 3) = flagValue | 2;\n      *flagData = (int)flagData + 0x43;\n      flagData[4] = (int)flagData + 0x43;\n      flagData[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(flag + 0x3c) = DAT_0008387c;\n    *(ushort *)(flagData + 3) = flagValue | 0x80;\n    *flagData = funcResult;\n    flagData[4] = funcResult;\n    flagData[5] = flagCheckResult;\n    if ((isFlag2000) && (funcResult = getIntegerValue(flag, (int)*(short *)((int)flagData + 0xe)), funcResult != 0))\n    {\n      *(ushort *)(flagData + 3) = *(ushort *)(flagData + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "checkFlag_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_number_000815de",
                "param_1": "input_string",
                "pbVar4": "current_char",
                "pbVar6": "previous_char",
                "uVar5": "current_byte",
                "bVar1": "current_byte_info",
                "bVar2": "is_negative",
                "uVar10": "max_value",
                "uVar9": "max_div_10",
                "iVar7": "digit_offset",
                "iVar8": "digit_count",
                "uVar3": "result"
            },
            "code": "uint parse_number_000815de(byte **input_string)\n{\n  if (*input_string == NULL) {\n    return 0;\n  }\n  byte *current_char = *input_string;\n  byte current_byte = *current_char;\n  while ((*(byte *)(*DAT_000827f8 + current_byte + 1) & 8) != 0) {\n    current_char++;\n    current_byte = *current_char;\n  }\n  bool is_negative = false;\n  if (current_byte == '-') {\n    current_char++;\n    current_byte = *current_char;\n    is_negative = true;\n  }\n  else if (current_byte == '+') {\n    current_char++;\n    current_byte = *current_char;\n  }\n  uint max_value = is_negative ? 0x80000000 : 0x7fffffff;\n  uint max_div_10 = max_value / 10;\n  int digit_count = 0;\n  uint result = 0;\n  while (true) {\n    byte current_byte_info = *(byte *)(*DAT_000827f8 + current_byte + 1);\n    if ((current_byte_info & 4) == 0) {\n      if ((current_byte_info & 3) == 0) {\n        if (digit_count == 0) {\n          *(undefined4 *)*DAT_00082810 = 0x22;\n          result = is_negative ? 0x80000000 : 0x7fffffff;\n        }\n        else if (is_negative) {\n          result = -result;\n        }\n        return result;\n      }\n      int digit_offset = (current_byte_info & 3) == 1 ? 0x37 : 0x57;\n      int digit_value = current_byte - digit_offset;\n    }\n    else {\n      int digit_value = current_byte - 0x30;\n    }\n    if (digit_value > 9) {\n      if (digit_count == 0) {\n        *(undefined4 *)*DAT_00082810 = 0x22;\n        result = is_negative ? 0x80000000 : 0x7fffffff;\n      }\n      else {\n        result = is_negative ? -result : result;\n      }\n      return result;\n    }\n    if (digit_count != 0) {\n      if ((max_div_10 <= result && result != max_div_10) || ((result == max_div_10 && ((int)(max_value % 10) < digit_value))))\n      {\n        digit_count = -1;\n      }\n      else {\n        result = result * 10 + digit_value;\n        digit_count = 1;\n      }\n    }\n    else {\n      result = digit_value;\n      digit_count = 1;\n    }\n    current_char++;\n    current_byte = *current_char;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_number_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_and_check_error_000834f0",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "iVar1": "result",
                "iVar2": "process_result",
                "local_488": "data_buffer_ptrs",
                "local_480": "constant_0x400",
                "local_47c": "data_flags",
                "local_47a": "data_value",
                "local_478": "stack_buffer",
                "local_474": "constant_0x400",
                "local_470": "constant_0",
                "local_464": "data_value_2",
                "local_46c": "data_value_3",
                "local_424": "data_value_4",
                "auStack_420": "stack_buffer"
            },
            "code": "int process_data_and_check_error_000834f0(undefined4 input_param, int data_ptr)\n{\n    int result = 0;\n    int process_result = 0;\n    undefined *data_buffer_ptrs [2];\n    undefined *stack_buffer = (undefined *) alloca(1024);\n    \n    data_buffer_ptrs[0] = stack_buffer;\n    ushort data_flags = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n    undefined2 data_value = *(undefined2 *)(data_ptr + 0xe);\n    undefined4 data_value_2 = *(undefined4 *)(data_ptr + 0x24);\n    undefined4 data_value_3 = *(undefined4 *)(data_ptr + 0x1c);\n    undefined4 data_value_4 = *(undefined4 *)(data_ptr + 100);\n    \n    int read_result = read_data(input_param, data_buffer_ptrs);\n    if ((read_result >= 0) && ((process_result = process_data(input_param, data_buffer_ptrs)) != 0)) {\n        result = -1;\n    }\n    \n    if ((int)((uint)data_flags << 0x19) < 0) {\n        *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n    }\n    \n    return result;\n}",
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_and_check_error_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_data_000841e4",
                "param_1": "data",
                "piVar3": "data_ptr",
                "iVar4": "data_index",
                "pcVar5": "function_ptr",
                "DAT_000841f0": "data_array_ptr",
                "ppiVar6": "data_array_ptr",
                "uVar2": "error_code",
                "puVar1": "error_ptr",
                "PTR_DAT_00084218": "error_ptr"
            },
            "code": "int process_data_000841e4(uint data){\n    undefined *PTR_DAT_00084218;\n    undefined4 error_code;\n    int *data_ptr;\n    int data_index;\n    code *function_ptr;\n    undefined4 unaff_r4;\n    undefined4 unaff_r5;\n    undefined4 in_lr;\n    int **DAT_000841f0;\n    \n    data_ptr = *DAT_000841f0;\n    if (data > 31){\n        *data_ptr = 22;\n        return -1;\n    }\n    data_index = data_ptr[183];\n    if ((data_index == 0) || (function_ptr = *(code **)(data_index + data * 4), function_ptr == (code *)0x0)) {\n        DAT_000841f0 = DAT_000841f0;\n        error_code = return_error_code_thunk_00080efe(data_ptr);\n        PTR_DAT_00084218 = PTR_DAT_00084218;\n        *(undefined4 *)PTR_DAT_00084218 = 0;\n        data_index = do_nothing_00080efc(error_code,data,data,0,DAT_000841f0,unaff_r4,unaff_r5,in_lr);\n        if ((data_index == -1) && (*(int *)PTR_DAT_00084218 != 0)) {\n            *data_ptr = *(int *)PTR_DAT_00084218;\n            return -1;\n        }\n        return data_index;\n    }\n    if (function_ptr == (code *)0x1) {\n        return 0;\n    }\n    if (function_ptr != (code *)0xffffffff) {\n        *(undefined4 *)(data_index + data * 4) = 0;\n        (*function_ptr)(data);\n        return 0;\n    }\n    *data_ptr = 22;\n    return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_data_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_base_and_process_0008113a",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "parameter",
                "iVar1": "result",
                "iVar2": "negative_flag"
            },
            "code": "int convert_base_and_process_0008113a(undefined4 *function_pointer, uint number, uint base, undefined4 parameter) {\n  int result;\n  int negative_flag;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    if ((int)number < 0) {\n      negative_flag = execute_function_pointer(function_pointer,0x2d);\n      result = convert_base_and_process_0008113a(function_pointer,-number,10) + negative_flag;\n      return result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_base_and_process_0008113a(function_pointer,number,base,parameter);\n  return result;\n}",
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_base_and_process_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_dat_value_0008400c",
                "DAT_00084014": "DAT_value"
            },
            "code": "int get_dat_value_0008400c() {\n    return *DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_dat_value_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "execute_command_and_handle_errors_if_any_000814d0",
                "param_1": "command",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "command_result",
                "clear_memory_if_not_null_00081480": "clear_memory_if_not_null",
                "execute_command_if_needed_000814ae": "execute_command_if_needed",
                "copy_string_000825cc": "copy_string"
            },
            "code": "undefined4* execute_command_and_handle_errors_if_any_000814d0(undefined4* command, undefined4 arg2, undefined4 arg3) {\n  int command_result = execute_command_if_needed_000814ae(command, arg3);\n  if (command_result == 0) {\n    clear_memory_if_not_null(command);\n  }\n  else {\n    command[2] = arg3;\n    copy_string_000825cc(*command, arg2);\n  }\n  return command;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "execute_command_and_handle_errors_if_any_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "initialize_rel_array_00080c20",
                "puVar1": "rel_array_ptr",
                "puVar2": "rel_array_data",
                "iVar3": "rel_array_data_index",
                "puVar4": "rel_array_data_end",
                "DAT_00080c78": "rel_array_data_start",
                "PTR_Elf32_Rel_ARRAY_00080c7c": "rel_array_ptr_start",
                "PTR_DAT_00080c80": "rel_array_data_end",
                "PTR_DAT_00080c84": "rel_array_ptr_end",
                "DAT_00080c88": "rel_array_zero",
                "DAT_00080c90": "rel_array_zero_end",
                "PTR_DAT_00080c8c": "rel_array_base",
                "DAT_00080c94": "function_pointer"
            },
            "code": "void initialize_rel_array_00080c20(void)\n{\n  uint32_t* rel_array_ptr = PTR_Elf32_Rel_ARRAY_00080c7c;\n  uint32_t* rel_array_data = DAT_00080c78;\n  uint32_t* rel_array_end = PTR_DAT_00080c84;\n  uint32_t* PTR_DAT_00080c80 = PTR_DAT_00080c80;\n  uint32_t* DAT_00080c88 = DAT_00080c88;\n  uint32_t* DAT_00080c90 = DAT_00080c90;\n  uint32_t* PTR_DAT_00080c8c = PTR_DAT_00080c8c;\n  uint32_t* PTR_DAT_00080c8c_end = PTR_DAT_00080c8c + 0x20000000;\n  \n  if (rel_array_data != rel_array_ptr) {\n    while (rel_array_data < PTR_DAT_00080c80) {\n      *rel_array_ptr = *rel_array_data;\n      rel_array_ptr++;\n      rel_array_data++;\n    }\n  }\n  while (DAT_00080c88 < DAT_00080c90) {\n    *DAT_00080c88 = 0;\n    DAT_00080c88++;\n  }\n  *DAT_00080c90 = (uint32_t)PTR_DAT_00080c8c & 0x1fffff80;\n  if (PTR_DAT_00080c8c < (uint32_t*)0x100000) {\n    *(DAT_00080c90 + 2) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while (true) {\n    // do nothing loop\n  }\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "initialize_rel_array_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_data_0008044c",
                "param_1": "index",
                "param_2": "data_array",
                "param_3": "multiplier",
                "puVar2": "count_array_ptr",
                "puVar3": "flag_array_ptr",
                "puVar4": "flag_data_array_ptr",
                "uVar5": "time",
                "iVar6": "array_index",
                "bVar1": "flag"
            },
            "code": "void process_data_0008044c(int index, int data_array[], int multiplier) {\n    byte flag = *flag_array;\n    undefined *count_array = count_array_ptr;\n    undefined *flag_array = flag_array_ptr;\n    undefined *data_array = data_array_ptr;\n    int array_index = index * 0xc;\n    int data_index = index * 0x40;\n    if ((flag_array[index] & 0x80) == 0) {\n        if (((char)flag_array[index] + array_index < (int)(uint)(byte)*count_array) && ((int)((uint)(byte)flag_array[((char)flag_array[index] + array_index) * 8] << 0x19) < 0)) {\n            process_flag(flag_array[(array_index + (char)flag_array[index]) * 8] & 0x3f, 0);\n        }\n    }\n    else {\n        data_array[data_index] = data_array[data_index] | 4;\n    }\n    count_array[index] = count_array[index] + '\\x01';\n    if (((char)count_array[index] + array_index < (int)(uint)flag) && ((char)flag_array[index] < '\f')) {\n        *(int *)(data_array + data_index + 0x14) = *(int *)(data_array + data_index + 0x10) + *(int *)(flag_array + ((char)flag_array[index] + array_index) * 8 + 4);\n        if (-1 < (int)((uint)(byte)flag_array[((char)flag_array[index] + array_index) * 8] << 0x19)) {\n            return;\n        }\n        process_flag(flag_array[(array_index + (char)flag_array[index]) * 8] & 0x3f, 1);\n        return;\n    }\n    data_index = data_index + data_array;\n    uint time = (*time_array / time_multiplier) * 20000 >> 5;\n    if (time <= *(int *)(data_index + 0x10) + 4U) {\n        time = *(int *)(data_index + 0x10) + 4;\n    }\n    *(uint *)(data_index + 0x14) = time;\n    count_array[index] = 0xff;\n}\n",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "process_data_wrapper_000810d8",
                "param_1": "data",
                "PTR_DAT_000810e4": "ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "process_data_000810a6": "process_data"
            },
            "code": "void process_data_wrapper_000810d8(undefined4 data, undefined4 PTR_DAT_000810e4, undefined4 param_3, undefined4 param_4) {\n  process_data(data, PTR_DAT_000810e4, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "imported": false,
            "current_name": "process_data_wrapper_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "code": "unsigned int get_error_code_00080efe(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "get_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "iVar1": "remaining_length",
                "puVar2": "destination_end",
                "puVar3": "source_end",
                "puVar4": "destination_end",
                "puVar6": "destination_end",
                "uVar5": "remaining_length",
                "uVar7": "remaining_length"
            },
            "code": "void reverse_copy_00081e34(uint32_t *source, uint32_t *destination, uint32_t length) {\n  if ((destination < source) && ((uint32_t *)((int)destination + length) > source)) {\n    uint8_t *destination_end = (uint8_t *)((int)destination + length);\n    uint32_t remaining_length = length - 1;\n    if (length != 0) {\n      do {\n        destination_end--;\n        remaining_length--;\n        *(destination_end) = *((uint8_t *)((int)source + remaining_length));\n      } while (remaining_length != 0xffffffff);\n    }\n    return;\n  }\n  if (length >= 0x10) {\n    if ((((uint32_t)source | (uint32_t)destination) & 3) == 0) {\n      uint32_t *destination_end = (uint32_t *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10);\n      uint32_t *source_end = source + (length - 0x10 >> 2) + 1;\n      uint32_t remaining_length = length & 3;\n      if (remaining_length >= 4) {\n        do {\n          remaining_length -= 4;\n          *destination_end = *source_end;\n          destination_end++;\n          source_end++;\n        } while (remaining_length >= 4);\n        remaining_length += 4;\n      }\n      while (remaining_length != 0) {\n        remaining_length--;\n        *(uint8_t *)destination_end = *(uint8_t *)source_end;\n        destination_end = (uint32_t *)((uint8_t *)destination_end + 1);\n        source_end = (uint32_t *)((uint8_t *)source_end + 1);\n      }\n      return;\n    }\n  }\n  while (length != 0) {\n    destination++;\n    *(uint8_t *)(destination - 1) = *(uint8_t *)source;\n    source++;\n    length--;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "update_data_000805a8",
                "*param_1": "*data",
                "bVar1": "count",
                "*PTR_DAT_000805d8": "*count_ptr",
                "DAT_000805dc": "data_table_ptr",
                "PTR_DAT_000805e4": "data_table_entry_ptr",
                "DAT_000805e0": "data_divisor"
            },
            "code": "void update_data_000805a8(byte *data)\n{\n    byte count = *PTR_DAT_000805d8;\n    if (count < 0x3c) {\n        *PTR_DAT_000805d8 = count + 1;\n        uint *data_ptr = DAT_000805dc;\n        *data = count;\n        *(uint *)(PTR_DAT_000805e4 + (uint)count * 8 + 4) = (*data_ptr / DAT_000805e0) * 0x5dc >> 5;\n        return;\n    }\n    *data = 0xff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "update_data_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "read_byte_00081276",
                "param_1": "buffer_address",
                "bVar1": "byte_to_read",
                "iVar2": "buffer_pointer",
                "*(int *)(param_1 + 0x10)": "buffer_pointer",
                "*(int *)(iVar2 + 0x80)": "buffer_size",
                "*(int *)(iVar2 + 0x84)": "buffer_index",
                "*(byte *)(iVar2 + *(int *)(iVar2 + 0x84))": "*(byte *)(buffer_pointer + buffer_index)",
                "*(uint *)(iVar2 + 0x84)": "*(int *)(buffer_pointer + 0x84)",
                "(uint)bVar1": "(uint)byte_to_read"
            },
            "code": "uint read_byte_00081276(int buffer_address)\n{\n  int buffer_pointer = *(int *)(buffer_address + 0x10);\n  int buffer_size = *(int *)(buffer_pointer + 0x80);\n  int buffer_index = *(int *)(buffer_pointer + 0x84);\n  if (buffer_size != buffer_index) {\n    byte byte_to_read = *(byte *)(buffer_pointer + buffer_index);\n    *(int *)(buffer_pointer + 0x84) = (buffer_index + 1U) & 0x7f;\n    return (uint)byte_to_read;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "read_byte_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "getIntegerValue_000844bc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "ptrData",
                "iVar2": "isOne"
            },
            "code": "void getIntegerValue_000844bc(int *outputValue, undefined4 inputValue)\n{\n  undefined *ptrData = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  int isOne = is_one_00080eba(inputValue);\n  if ((isOne == -1) && (*(int *)ptrData != 0)) {\n    *outputValue = *(int *)ptrData;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "getIntegerValue_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "buffer_pointer_1",
                "iVar2": "temp_var_1",
                "uVar3": "flags",
                "uVar4": "flags_extended",
                "iVar5": "temp_var_2",
                "pcVar6": "function_pointer",
                "unaff_r4": "result",
                "iVar7": "temp_var_3",
                "buffer_length_1": "temp_var_4",
                "buffer_length_2": "temp_var_5"
            },
            "code": "undefined4 process_data_00083850(int *input_buffer, int *output_buffer)\n{\n  int *buffer_pointer_1;\n  int *buffer_pointer_2;\n  int buffer_length_1;\n  int buffer_length_2;\n  ushort flags;\n  uint flags_extended;\n  code *function_pointer;\n  undefined4 result;\n  int temp_var_1;\n  int temp_var_2;\n  int temp_var_3;\n  int temp_var_4;\n  int temp_var_5;\n  int temp_var_6;\n  \n  if ((input_buffer != (int *)0x0) && (input_buffer[0xe] == 0)) {\n    initialize_buffers();\n  }\n  if (*(short *)(output_buffer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_buffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var_1 = output_buffer[4];\n    if (temp_var_1 == 0) {\n      return 0;\n    }\n    temp_var_2 = *output_buffer;\n    if ((flags & 3) == 0) {\n      buffer_length_2 = output_buffer[5];\n    }\n    else {\n      buffer_length_2 = 0;\n    }\n    *output_buffer = temp_var_1;\n    temp_var_2 = temp_var_2 - temp_var_1;\n    output_buffer[2] = buffer_length_2;\n    do {\n      if (temp_var_2 < 1) {\n        return 0;\n      }\n      temp_var_3 = (*(code *)output_buffer[9])(input_buffer,output_buffer[7],temp_var_1,temp_var_2,result);\n      temp_var_2 = temp_var_2 - temp_var_3;\n      temp_var_1 = temp_var_1 + temp_var_3;\n    } while (0 < temp_var_3);\n    flags = flags | 0x40;\n    return 0xffffffff;\n  }\n  flags = flags | 0x800;\n  if ((output_buffer[1] < 1) && (output_buffer[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer = (code *)output_buffer[10];\n  if (function_pointer == (code *)0x0) {\n    return 0;\n  }\n  flags_extended = (uint)(flags | 0x800);\n  temp_var_4 = *input_buffer;\n  *input_buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var_5 = (*function_pointer)(input_buffer,output_buffer[7],flags_extended & 0x1000,1);\n    if ((temp_var_5 == -1) && (temp_var_6 = *input_buffer, temp_var_6 != 0)) {\n      if ((temp_var_6 == 0x1d) || (temp_var_6 == 0x16)) {\n        *input_buffer = temp_var_4;\n        return 0;\n      }\n      flags = flags | 0x40;\n      goto LAB_000837c8;\n    }\n    flags = *(ushort *)(output_buffer + 3);\n    function_pointer = (code *)output_buffer[10];\n  }\n  else {\n    temp_var_5 = output_buffer[0x14];\n  }\n  if (((int)(flags_extended << 0x1d) < 0) && (temp_var_5 = temp_var_5 - output_buffer[1], output_buffer[0xc] != 0)) {\n    temp_var_5 = temp_var_5 - output_buffer[0xf];\n  }\n  temp_var_5 = (*function_pointer)(input_buffer,output_buffer[7],temp_var_5,0);\n  if (temp_var_5 == -1) {\n    temp_var_6 = *input_buffer;\n    if (temp_var_6 != 0) {\n      if ((temp_var_6 != 0x1d) && (temp_var_6 != 0x16)) {\n        flags = flags | 0x40;\n        return 0xffffffff;\n      }\n      flags = flags & 0xf7ff;\n      *output_buffer = output_buffer[4];\n      output_buffer[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = flags & 0xf7ff;\n    output_buffer[1] = 0;\n    *output_buffer = output_buffer[4];\n  }\n  else {\n    flags = flags & 0xf7ff;\n    *output_buffer = output_buffer[4];\n    output_buffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_buffer[0x14] = temp_var_5;\n  }\nLAB_00083774:\n  buffer_pointer_1 = (int *)output_buffer[0xc];\n  *input_buffer = temp_var_4;\n  if (buffer_pointer_1 == (int *)0x0) {\n    return 0;\n  }\n  if (buffer_pointer_1 != output_buffer + 0x10) {\n    allocate_memory_from_heap(input_buffer);\n  }\n  output_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_000834f0"
            ],
            "imported": false,
            "current_name": "process_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "run_vehicle_control_system_000815ec",
                "set_data_to_0x8000_00081618": "set_initial_data",
                "initialize_and_run_device_00080774": "initialize_and_run_device",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "enable_logging",
                "initialize_device_and_process_data_000801e0": "initialize_device_and_process_data",
                "control_vehicle_00080250": "control_vehicle",
                "DAT_00081614": "vehicle_status",
                "verify_checksums_00080970": "verify_checksums"
            },
            "code": "void run_vehicle_control_system_000815ec(void)\n{\n  set_data_to_0x8000_00081618();\n  initialize_and_run_device_00080774();\n  do_nothing_000815e8();\n  do_nothing_00080f08(1);\n  initialize_device_and_process_data_000801e0();\n  do {\n    do {\n      control_vehicle_00080250();\n    } while (DAT_00081614 == 0);\n    verify_checksums_00080970();\n  } while( true );\n}",
            "called": [
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_000815e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "run_vehicle_control_system_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "set_bits_00080d3e",
                "param_1": "ptr_data",
                "param_2": "mask1",
                "param_3": "mask2",
                "param_4": "bits_to_set",
                "uint": "uint32_t"
            },
            "code": "void set_bits_00080d3e(uint32_t *ptr_data, uint32_t mask1, uint32_t mask2, uint32_t bits_to_set) {\n\t*ptr_data = (*ptr_data & ~mask1) | (mask2 | (bits_to_set & 0xF) << 0x18 | (bits_to_set & 3) << 0x1C);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bits_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "write_data_to_buffer_00081438",
                "param_1": "buffer",
                "param_2": "data",
                "*param_1": "*buffer",
                "PTR_PTR_write_data_to_buffer_000812b8_1_00081458": "write_data_to_buffer_ptr"
            },
            "code": "undefined4* write_data_to_buffer_00081438(undefined4* buffer, undefined4 data)\n{\n    initialize_values();\n    *buffer = PTR_PTR_write_data_to_buffer_00081438_000812b8_1_00081458;\n    buffer[9] = data;\n    return buffer;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value",
                "*DAT_00000014": "offset",
                "PTR_DAT_00000040": "address_to_set"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n    int *DAT_00000014 = index * 0x40 + 0x14;\n    int* PTR_DAT_00000040 = (int*)(base_address + *DAT_00000014);\n    *PTR_DAT_00000040 = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "flag_bit",
                "iVar2": "result",
                "uVar3": "flag_shifted",
                "uVar4": "flag",
                "initialize_buffers_00083888": "initialize_buffers",
                "allocate_memory_from_heap_00083b10": "allocate_memory",
                "checkFlag_00084018": "check_flag"
            },
            "code": "int process_data_0008356c(uint16_t *data, int *params) {\n  uint16_t flag = data[3];\n  uint32_t flag_shifted = (uint32_t)flag << 0x1c;\n  int result = 0;\n  if ((*DAT_0008362c != 0) && (*(int *)(*DAT_0008362c + 0x38) == 0)) {\n    initialize_buffers_00083888();\n  }\n  if ((int)flag_shifted < 0) {\n    result = params[4];\n  }\n  else {\n    if (-1 < (int)(flag << 0x1b)) {\n      *params = 9;\n      data[3] = flag | 0x40;\n      return -1;\n    }\n    if ((int)(flag << 0x1d) < 0) {\n      if ((int *)params[12] != (int *)0x0) {\n        if ((int *)params[12] != params + 0x10) {\n          allocate_memory_from_heap_00083b10(&result);\n          flag = data[3];\n        }\n        params[12] = 0;\n      }\n      result = params[4];\n      flag &= 0xffdb;\n      *params = result;\n      params[1] = 0;\n    }\n    else {\n      result = params[4];\n    }\n    data[3] = flag | 8;\n    flag_shifted = (uint32_t)(flag | 8);\n  }\n  if ((result == 0) && ((flag_shifted & 0x280) != 0x200)) {\n    checkFlag_00084018(&result, params);\n    flag_shifted = (uint32_t)data[3];\n    result = params[4];\n  }\n  uint32_t flag_shifted_anded = flag_shifted & 1;\n  if (flag_shifted_anded == 0) {\n    if (-1 < (int)(flag_shifted << 0x1e)) {\n      flag_shifted_anded = params[5];\n    }\n    params[2] = flag_shifted_anded;\n  }\n  else {\n    params[6] = -params[5];\n    params[2] = 0;\n  }\n  if ((result == 0) && ((int)(flag_shifted << 0x18) < 0)) {\n    data[3] = data[3] | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00084018",
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_device_00080b98",
                "puVar1": "device_config_reg",
                "iVar2": "device_status_reg",
                "DAT_00080c04": "DEVICE_CONFIG_REG",
                "DAT_00080c08": "DEVICE_STATUS_REG",
                "DAT_00080c10": "DEVICE_CONFIG_VALUE_1",
                "DAT_00080c0c": "DEVICE_CONFIG_VALUE_2",
                "DAT_00080c14": "DEVICE_CONFIG_VALUE_3",
                "DAT_00080c18": "DEVICE_DATA_VALUE",
                "DAT_00080c1c": "DEVICE_DATA_REG"
            },
            "code": "void initialize_device_00080b98(void)\n{\n  uint32_t *device_config_reg = DAT_00080c04;\n  *device_config_reg = 0x400;\n  device_config_reg[0x80] = 0x400;\n  uint32_t *device_status_reg = DAT_00080c08;\n  if (-1 < *(int *)(device_status_reg + 0x20) << 7) {\n    *(uint32_t *)(device_status_reg + 0x20) = DAT_00080c10;\n    while (-1 < *(int *)(device_status_reg + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(device_status_reg + 0x20) = DAT_00080c0c;\n  while (-1 < *(int *)(device_status_reg + 0x68) << 0xf);\n  *(uint32_t *)(device_status_reg + 0x30) = *(uint32_t *)(device_status_reg + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(device_status_reg + 0x68) << 0x1c);\n  *(uint32_t *)(device_status_reg + 0x28) = DAT_00080c14;\n  while (-1 < *(int *)(device_status_reg + 0x68) << 0x1e);\n  *(uint32_t *)(device_status_reg + 0x30) = DEVICE_CONFIG_VALUE_4;\n  while (-1 < *(int *)(device_status_reg + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080c1c) = DAT_00080c18;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_device_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "calculate_data_000810e8",
                "param_1": "input_value",
                "iVar1": "processed_data1",
                "iVar2": "processed_data2",
                "process_data_000810a6": "process_data_first",
                "process_data_wrapper_000810d8": "process_data_second"
            },
            "code": "int calculate_data_000810e8(int input_value) {\n    int processed_data1 = process_data_first();\n    int processed_data2 = process_data_second(input_value);\n    return processed_data2 + processed_data1;\n}",
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_data_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_in_integer_00080d58",
                "param_1": "integer_ptr",
                "param_2": "bit_position",
                "(param_1 + 0x14)": "integer_ptr + 0x14",
                "*(int *)(param_1 + 0x14)": "mask",
                "1 << (param_2 & 0xff)": "mask"
            },
            "code": "void set_bit_in_integer_00080d58(int* integer_ptr, uint bit_position) {\n  int mask = 1 << (bit_position & 0xff);\n  *integer_ptr |= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_in_integer_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "clear_memory_if_not_null_00081480",
                "param_1": "memory_ptr",
                "allocate_memory_from_heap_00081800": "allocate_memory_from_heap"
            },
            "code": "void clear_memory_if_not_null_00081480(int *memory_ptr)\n{\n    if (*memory_ptr != 0) {\n        allocate_memory_from_heap();\n    }\n    *memory_ptr = 0;\n    memory_ptr[2] = 0;\n    memory_ptr[1] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "clear_memory_if_not_null_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "execute_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "*DAT_00081fa8": "function_pointer"
            },
            "code": "void execute_function_with_params_00081f9c(int* *DAT_00081fa8, int param_1, int param_2)\n{\n  (**DAT_00081fa8)(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_checksum_00081248",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "result": "result"
            },
            "code": "int calculate_checksum_00081248(int input_param)\n{\n    int* ptr_1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int result = (*ptr_1) - (*ptr_2) & 0x7f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_checksum_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "allocate_memory_from_heap_00081800",
                "param_1": "size",
                "*DAT_0008180c": "heap_ptr"
            },
            "code": "void allocate_memory_from_heap_00081800(void* *DAT_0008180c, size_t size) {\n    allocate_memory_from_heap_00081800_00083b10(**DAT_0008180c, size);\n    return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "allocate_memory_from_heap_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008458c(uint32_t input1, int32_t input2, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *result_array)\n{\n  uint64_t product = FUNC_00084860();\n  product = product * ((uint64_t)multiplier_high << 32 | multiplier_low);\n  uint32_t product_low = (uint32_t)product;\n  result_array[0] = input1 - product_low;\n  result_array[1] = input2 - ((int32_t)(product >> 32)) - (input1 < product_low);\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "out_status",
                "param_2": "data_length",
                "param_3": "data_value",
                "param_4": "out_data",
                "uVar1": "function_result",
                "iVar2": "function_argument_2",
                "pcVar3": "function_pointer",
                "auStack_24": "function_stack"
            },
            "code": "void process_data_0008434c(undefined4 *out_status, int data_length, undefined4 data_value, undefined4 *out_data)\n{\n  undefined4 function_result;\n  int function_argument_2;\n  code *function_pointer;\n  undefined function_stack[12];\n  \n  if (data_length == 0) {\n    function_pointer = *DAT_00084398;\n    function_result = get_dat_variable_value_00084004();\n    function_argument_2 = (*function_pointer)(out_status, function_stack, 0, function_result, out_data);\n  }\n  else {\n    function_pointer = *DAT_00084398;\n    function_result = get_dat_variable_value_00084004();\n    function_argument_2 = (*function_pointer)(out_status, data_length, data_value, function_result, out_data);\n  }\n  if (function_argument_2 == -1) {\n    *out_data = 0;\n    *out_status = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "execute_and_copy_0008159e",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "local_c": "masked_size",
                "uStack_8": "destination_copy"
            },
            "code": "void execute_and_copy_0008159e(uint8_t *destination, uint8_t *source, uint8_t size)\n{\n  uint8_t masked_size = size & 0xffff00ff;\n  uint8_t destination_copy = *destination;\n  execute_and_copy_0008159e_if_needed(destination, &masked_size, 1, 0, destination_copy);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "execute_and_copy_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data",
                "param_2": "param",
                "bVar1": "data_value",
                "puVar2": "timer_data",
                "uVar3": "timer_value",
                "uVar4": "timer_channel",
                "uVar5": "timer_duration",
                "iVar6": "index",
                "uVar7": "data_value_index"
            },
            "code": "byte process_data_000806a0(byte *data, uint32_t param){\n    byte result;\n    uint32_t index, timer_value;\n    uint8_t timer_channel;\n    uint8_t *timer_data = PTR_DAT_00080694;\n    if (data[0] > 59){\n        return data[0];\n    }\n    process_data_000806a0_00080f0c(param,1,0x220,data[0],0x960);\n    uint8_t data_index = data[0] * 8;\n    uint8_t data_value = timer_data[data_index];\n    data[2] = 0;\n    timer_data[data_index] = (data_value & 0xC0) | (param & 0x3F);\n    data[1] = 0;\n    index = 0;\n    while (index != 0xC){\n        if ((int)((uint8_t)timer_data[(index + (data[0] / 0xC) * 0xC) * 8] << 0x19) < 0){\n            timer_data[data_index] |= 0x40;\n            return data[0];\n        }\n        index++;\n    }\n    timer_channel = data[0] / 0xC;\n    if (timer_channel == 0){\n        timer_value = 0x1E;\n    }else if (timer_channel == 1){\n        timer_value = 0x1F;\n    }else if (timer_channel == 2){\n        timer_value = 0x20;\n    }else if (timer_channel == 3){\n        timer_value = 0x1D;\n        timer_channel = 2;\n    }else if (timer_channel == 4){\n        timer_value = 0x1B;\n        timer_channel = 0;\n    }\n    configure_and_start_timer_channel_000803fc(DAT_00080698, timer_channel, timer_value, timer_value);\n    timer_data[data_index] |= 0x40;\n    return data[0];\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyParams_0008151c",
                "param_1": "source",
                "param_2": "destination"
            },
            "code": "void copyParams_0008151c(int *source, int *destination)\n{\n    if (*source != 0) {\n        if ((*destination != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n            if ((uint)destination[2] <= (uint)source[1]) {\n                copy_string_000825cc();\n                source[2] = destination[2];\n                goto LAB_00081558;\n            }\n        }\n        allocate_memory_from_heap_00081800();\n    }\n    *source = *destination;\n    source[1] = destination[1];\n    source[2] = destination[2];\n    *destination = 0;\n    destination[1] = 0;\nLAB_00081558:\n    destination[2] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copyParams_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "process_data_and_call_function_000816f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "param4",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "assertion",
                "uVar4": "processed_data",
                "PTR_s___function__00081728": "function_pointer",
                "PTR_s_assertion___s__failed__file___s__0008172c": "assertion_failed_file",
                "PTR_s__00081730": "data_pointer"
            },
            "code": "void process_data_and_call_function_000816f8(undefined4 param1, undefined4 param2, undefined *data, undefined4 param4) {\n  undefined4 value1 = *(undefined4 *)(*data + 0xc);\n  undefined4 value2 = param4;\n  undefined *assertion = PTR_s_assertion___s__failed__file___s__0008172c;\n  if (data == NULL) goto LAB_0008171c;\n  do {\n    param4 = param1;\n    call_function_with_four_params_and_two_pointers(value1, assertion, value2, param1, param2, PTR_s___function__00081728, data);\n    undefined8 processed_data = process_data();\n    param2 = (undefined4)((ulonglong)processed_data >> 0x20);\n    value1 = (undefined4)processed_data;\n    data = PTR_s__00081730;\n    value2 = param4;\n    assertion = PTR_s_assertion___s__failed__file___s__0008172c;\n  } while (true);\n}",
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "processData_00084484",
                "param_1": "data",
                "iVar3": "bufferAddress",
                "initialize_buffers_00083888": "initializeBuffers",
                "process_data_00083850": "processInput",
                "iVar2": "result",
                "allocate_memory_from_heap_00083b10": "allocateMemoryFromHeap",
                "do_nothing_0008397c": "doNothing1",
                "do_nothing_00083980": "doNothing2"
            },
            "code": "int processData_00084484(int data)\n{\n    int bufferAddress = *bufferPtr;\n    if (data != 0) {\n        if ((bufferAddress != 0) && (*(int *)(bufferAddress + 0x38) == 0)) {\n            initialize_buffers_00083888();\n        }\n        if (*(short *)(data + 0xc) != 0) {\n            int result = processInput(bufferAddress, data);\n            if ((*(code **)(data + 0x2c) != (code *)0x0) && (result < 0)) {\n                return -1;\n            }\n            if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n                allocate_memory_from_heap_00083b10(bufferAddress, *(undefined4 *)(data + 0x10));\n            }\n            if (*(int *)(data + 0x30) != 0) {\n                if (*(int *)(data + 0x30) != data + 0x40) {\n                    allocate_memory_from_heap_00083b10(bufferAddress);\n                }\n                *(undefined4 *)(data + 0x30) = 0;\n            }\n            if (*(int *)(data + 0x44) != 0) {\n                allocate_memory_from_heap_00083b10(bufferAddress);\n                *(undefined4 *)(data + 0x44) = 0;\n            }\n            do_nothing_0008397c();\n            *(undefined2 *)(data + 0xc) = 0;\n            do_nothing_00083980();\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_00083b10",
                "FUN_00083980",
                "FUN_00083850",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "processData_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_data",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000811ca(int buffer_address, char new_data){\n  uint new_index;\n  \n  new_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_data;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "interpolate_values_00080164",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "PTR_DAT_0008017c": "PTR_DATA1",
                "PTR_DAT_00080180": "PTR_DATA2",
                "calculate_interpolation_000806f8": "calculate_interpolation"
            },
            "code": "void interpolate_values_00080164(int32_t input1, int32_t input2, int32_t input3, int32_t input4)\n{\n  calculate_interpolation(PTR_DAT_0008017c, 0x5a);\n  calculate_interpolation(PTR_DAT_00080180, 0x5a, input3, input4);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "interpolate_values_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "processInputAndUpdate_00084244",
                "param_1": "output",
                "param_2": "inputAddress",
                "param_3": "param_3",
                "param_4": "param_4",
                "sVar1": "inputLength",
                "puVar2": "errorPtr",
                "iVar3": "copyResult",
                "uVar4": "inputFlags"
            },
            "code": "void processInputAndUpdate_00084244(int *output, int inputAddress, undefined4 param_3, undefined4 param_4) {\n  short inputLength = *(short *)(inputAddress + 0xe);\n  ushort inputFlags = *(ushort *)(inputAddress + 0xc);\n  if ((int)((uint)inputFlags << 0x17) < 0) {\n    processReturnValue(output, inputLength, 0, 2);\n    inputFlags = *(ushort *)(inputAddress + 0xc);\n  }\n  *(ushort *)(inputAddress + 0xc) = inputFlags & 0xefff;\n  undefined *errorPtr = PTR_DAT_000843dc;\n  *(undefined4 *)PTR_DAT_000843dc = 0;\n  int copyResult = copyBytesToPointer(inputLength, param_3, param_4, param_4, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((copyResult == -1) && (*(int *)errorPtr != 0)) {\n    *output = *(int *)errorPtr;\n    return;\n  }\n  return;\n}\n",
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "processInputAndUpdate_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "execute_and_update_params_00081496",
                "param_1": "data_ptr",
                "param_2": "param_count",
                "iVar1": "result"
            },
            "code": "int execute_and_update_params_00081496(int* data_ptr, int param_count, undefined4 param_3, undefined4 param_4) {\n    int result = execute_function_with_params_00081f9c(*data_ptr, param_count + 1, param_3, param_4, param_4);\n    if (result != 0) {\n        *data_ptr = result;\n        data_ptr[1] = param_count;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "execute_and_update_params_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_variable_value_00084004",
                "DAT_00084008": "dat_variable_value"
            },
            "code": "int get_dat_variable_value_00084004() {\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_dat_variable_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "process_flag_00081014",
                "param_1": "flag_index",
                "param_2": "value",
                "param_3": "data",
                "puVar1": "flag_data",
                "puVar2": "flag_status",
                "iVar3": "flag_set",
                "uVar4": "flag_data_value",
                "iVar5": "flag_data_ptr"
            },
            "code": "void process_flag_00081014(int flag_index, int value, undefined4 data) {\\n  \\n  undefined *flag_data = PTR_FLAG_DATA;\\n  undefined *flag_status = PTR_FLAG_STATUS;\\n  \\n  if (flag_data[flag_index * 0x1c + 0xc] != \"\\0\") {\\n    int flag_value = flag_status[flag_index] & 0xf;\\n    if (flag_value == 5) {\\n      process_data(flag_index, 1, data, 5, flag_index, value, data);\\n    }\\n    flag_status[flag_index] = flag_status[flag_index] & 0xf | (byte)(value << 4);\\n    int flag_data_ptr = *(int *)(flag_data + flag_index * 0x1c);\\n    undefined4 flag_data_value = *(undefined4 *)(flag_data + flag_index * 0x1c + 4);\\n    int flag_set = check_if_flag_set(flag_data_ptr, flag_data_value);\\n    if (flag_set == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(flag_data_ptr + 100) = flag_data_value;\\n        return;\\n      }\\n      *(undefined4 *)(flag_data_ptr + 0x60) = flag_data_value;\\n      return;\\n    }\\n    update_parameters(flag_data_ptr, flag_data_value, value, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080f0c",
                "FUN_00080a0a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_flag_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "insert_data_into_array_000816ec",
                "param_1": "data",
                "param_2": "index",
                "param_3": "bitmask",
                "puVar1": "array_start",
                "uVar2": "array_size",
                "uVar4": "bitmask_shifted",
                "iVar3": "array_data_ptr",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_call",
                "DAT_000836d4": "allocate_memory"
            },
            "code": "void insert_data_into_array_000816ec(int data, int index, int bitmask)\n{\n  int *array_start = *(int **)array_data_ptr;\n  if (array_start == NULL) {\n    array_start = (int *)(*(int *)array_data_ptr + 0x14c);\n    *(int **)array_data_ptr = array_start;\n  }\n  uint array_size = array_start[1];\n  if (array_size > 0x1f) {\n    if ((DAT_000836d4 == 0) ||\n       ((array_start = (int *)DAT_000836d4(400)) == NULL)) {\n                    jumptable_error_handler(0xffffffff);\n      return;\n    }\n    *array_start = *(int *)(*(int *)array_data_ptr + 0x148);\n    array_start[1] = 0;\n    array_size = 0;\n    *(int **)array_data_ptr = array_start;\n    array_start[0x62] = 0;\n    array_start[99] = 0;\n  }\n  uint bitmask_shifted = 1 << (array_size & 0xff);\n  array_start[array_size + 0x22] = data;\n  array_start[0x62] = array_start[0x62] | bitmask_shifted;\n  array_start[array_size + 0x42] = bitmask;\n  array_start[99] = bitmask_shifted | array_start[99];\n  array_start[1] = array_size + 1;\n  array_start[array_size + 2] = index;\n  jumptable_call(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "insert_data_into_array_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = process_data_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory_block_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_from_heap_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = process_data_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_character_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = process_data_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = process_data_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_0008356c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = add_to_global_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = add_to_global_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_from_heap_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_00081fac",
                "FUN_000817f0"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "execute_command_if_needed_000814ae",
                "param_1": "command_params",
                "param_2": "max_param_value",
                "iVar1": "command_result",
                "*param_1": "*command_params",
                "execute_and_update_params_00081496": "execute_and_update_params"
            },
            "code": "int execute_command_if_needed_000814ae(int *command_params, uint32_t max_param_value) {\n  int command_result;\n  if ((command_params[0] == 0) || ((uint32_t)command_params[1] < max_param_value)) {\n    command_result = execute_and_update_params(command_params);\n    if (command_result == 0) {\n      return 0;\n    }\n    if (command_params[2] == 0) {\n      *(char *)*command_params = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "execute_command_if_needed_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "run_all_functions_00081778",
                "puVar1": "start_of_first_array",
                "puVar2": "start_of_second_array",
                "iVar3": "current_function_index",
                "ppcVar4": "current_function_pointer",
                "iVar5": "num_functions_in_first_array"
            },
            "code": "void run_all_functions_00081778(void)\n{\n  undefined *start_of_second_array = PTR_DAT_000817c4;\n  undefined *start_of_first_array = PTR_LAB_000817c0;\n  int num_functions_in_second_array = (int)start_of_first_array - (int)start_of_second_array >> 2;\n  if (num_functions_in_second_array != 0) {\n    code **current_function_pointer = (code **)(start_of_second_array + -4);\n    int current_function_index = 0;\n    do {\n      current_function_index++;\n      current_function_pointer++;\n      (**current_function_pointer)();\n    } while (num_functions_in_second_array != current_function_index);\n  }\n  do_nothing_00085844();\n  int num_functions_in_first_array = (int)start_of_first_array - (int)start_of_second_array >> 2;\n  if (num_functions_in_first_array != 0) {\n    code **current_function_pointer = (code **)(start_of_second_array + -4);\n    int current_function_index = 0;\n    do {\n      current_function_index++;\n      current_function_pointer++;\n      (**current_function_pointer)();\n    } while (num_functions_in_first_array != current_function_index);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_000836d8",
                "FUN_00085844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "run_all_functions_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "input_param",
                "*PTR_DAT_0008010c": "*global_pointer",
                "DAT_00080110": "global_data",
                "DAT_00080114": "global_data_value"
            },
            "code": "int check_if_initialized_000800f4(int input_param) {\n  if (*PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      input_param = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return input_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "process_data_and_return_000810c4",
                "process_data_000810a6": "process_data"
            },
            "code": "void process_data_and_return_000810c4(void)\n{\n  process_data();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_and_return_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_bit_in_memory_00080d30",
                "param_1": "memory_address",
                "param_2": "bit_value",
                "param_3": "bit_position",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_bit_in_memory_00080d30(uint32_t* memory_address, uint32_t bit_value, uint32_t bit_position) {\n    uint32_t current_memory_value = *memory_address;\n    uint32_t updated_memory_value = current_memory_value | bit_value | (bit_position & 1) << 7;\n    *memory_address = updated_memory_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_bit_in_memory_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_value_at_index_00080c98",
                "param_1": "output",
                "param_2": "input_length",
                "param_3": "divisor",
                "param_4": "target_index",
                "local_58": "local_values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_value_at_index_00080c98(uint32_t *output, uint32_t input_length, uint32_t divisor, uint32_t target_index) {\n  uint32_t local_values[16];\n  local_values[0] = *(uint32_t *)PTR_DAT_00080d28;\n  local_values[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n  local_values[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n  local_values[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n  local_values[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n  local_values[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n  local_values[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n  local_values[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n  local_values[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n  local_values[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n  local_values[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n  local_values[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n  local_values[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n  local_values[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n  local_values[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n  local_values[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  uint32_t quotient = input_length / (divisor * 2);\n  if (input_length == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(target_index * (int)(((uint64_t)input_length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_values[index]) {\n      output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_000817c8": "process_data",
                "PTR_s_Exiting_with_status__d__00080ef8": "PTR_s_Exiting_with_status__d__00080ef8"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param2, int param3, int param4)\n{\n  process_data(PTR_s_Exiting_with_status__d__00080ef8, status_code, param3, param4, param4);\n  while(true);\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "getValueFromPointer_000811e8",
                "param_1": "PTR_param_1",
                "iVar1": "value"
            },
            "code": "int getValueFromPointer_000811e8(){\n  int value = thunk_getValueFromPointer_000811e8_000816d8();\n  int *param = PTR_param_1;\n  param[3] = value;\n  do{\n    value = (**(code **)(*param + 0xc))(param);\n    if (value >= 0){\n      return value;\n    }\n    value = thunk_getValueFromPointer_000811e8_000816d8();\n  } while ((uint)(value - param[3]) < (uint)param[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_interpolation_000806f8",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "limited_data_length",
                "calculate_interpolation_point_0008145c": "calculate_interpolation_point",
                "*param_1": "*data",
                "PTR_DAT_000806f4": "PTR_DAT_000806f4",
                "*DAT_000806ec": "*DAT_000806ec",
                "DAT_000806f0": "DAT_000806f0"
            },
            "code": "void calculate_interpolation_000806f8(byte *data, uint data_length) {\n  uint interpolation_point;\n  if ((int)data_length < 0x220) {\n    uint limited_data_length = data_length;\n    if (0xb3 < (int)data_length) {\n      limited_data_length = 0xb4;\n    }\n    interpolation_point = calculate_interpolation_000806f8_point(limited_data_length & ~((int)limited_data_length >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,(600 - (char)data[2]) * 4,data_length);\n  }\n  if (*data < 0x3c) {\n    uint x = (0x88 - (char)data[1]) * 4;\n    if (((int)(data_length + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(data_length,x)) && (x = (600 - (char)data[2]) * 4, (int)data_length <= (int)x)) {\n      x = data_length;\n    }\n    *(uint *)(PTR_DAT_000806f4 + (uint)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (x - 2) >> 5;\n  }\n  return;\n}",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "calculate_interpolation_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_base_and_process_000810fc",
                "param_1": "output_string",
                "param_2": "input_number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "previous_char",
                "uVar2": "quotient",
                "uVar5": "remainder",
                "cVar4": "digit_char",
                "local_15": "digit_buffer"
            },
            "code": "void convert_base_and_process_000810fc(char* output_string, uint input_number, uint base) {\n  char* current_char = output_string;\n  char digit_char;\n  if (base < 2) {\n    base = 10;\n  }\n  do {\n    uint quotient = input_number / base;\n    uint remainder = input_number - base * quotient & 0xff;\n    digit_char = (char)remainder;\n    if (remainder < 10) {\n      digit_char = digit_char + '0';\n    }\n    else {\n      digit_char = digit_char + '7';\n    }\n    *current_char = digit_char;\n    input_number = quotient;\n    current_char--;\n  } while (quotient != 0);\n  process_data(current_char + 1);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_base_and_process_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "control_vehicle_00080250",
                "PTR_DAT_000803bc": "TIME_PTR",
                "PTR_DAT_000803c0": "FLAG_PTR",
                "PTR_DAT_000803c8": "DATA_PTR",
                "PTR_DAT_000803cc": "IS_MANUAL_MODE",
                "PTR_DAT_000803d0": "ENTERED_MANUAL_MODE_MSG",
                "PTR_DAT_000803d4": "MOTOR_DATA_PTR",
                "PTR_DAT_000803d8": "STEER_DATA_PTR",
                "PTR_DAT_000803dc": "PROCESSED_DATA_PTR",
                "PTR_DAT_000803e0": "INTERPOLATED_MOTOR_PTR",
                "PTR_DAT_000803e4": "INTERPOLATED_STEER_PTR",
                "PTR_DAT_000803e8": "ENTERED_AUTONOMOUS_MODE_MSG",
                "PTR_DAT_000803ec": "STEER_MSG_PTR",
                "PTR_DAT_000803f0": "MOTOR_MSG_PTR",
                "PTR_s_Entered_manual_control_mode__000803d0": "ENTERED_MANUAL_MODE_MSG",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "ENTERED_AUTONOMOUS_MODE_MSG",
                "PTR_s_error_000803c4": "ERROR_MSG",
                "PTR_s_steer_000803f4": "STEER_PARAM",
                "PTR_s_motor_000803f8": "MOTOR_PARAM",
                "calculate_time_00081624": "calculate_time",
                "do_nothing_00080f08": "do_nothing",
                "process_flag_00081014": "process_flag",
                "interpolate_values_00080164": "interpolate_values",
                "calculate_data_000810e8": "calculate_data",
                "calculate_interpolation_point_0008145c": "calculate_interpolation_point",
                "calculate_checksum_00081248": "calculate_checksum",
                "read_byte_00081276": "read_byte",
                "thunk_convert_base_and_process_0008113a": "convert_and_process",
                "process_data_and_return_000810c4": "process_data_and_return",
                "sum_of_converted_and_processed_data_0008117a": "sum_of_converted_and_processed_data",
                "calculate_interpolation_000806f8": "calculate_interpolation",
                "initialize_and_execute_00081214": "initialize_and_execute",
                "compare_and_copy_00081560": "compare_and_copy",
                "allocate_memory_00081472": "allocate_memory",
                "check_if_param_is_null_000815b8": "check_if_param_is_null",
                "parse_number_000815de": "parse_number"
            },
            "code": "void control_vehicle_00080250(void)\n{\n  int time = calculate_time_00081624(4, 1, 20000);\n  int* flag = PTR_DAT_000803c0;\n  *flag ^= 1;\n  process_flag_00081014(0xd);\n  int* data_size = DATA_SIZE_PTR;\n  if (*data_size < 0x641) {\n    if (*data_size - 0x385U < 299) {\n      if (*PTR_DAT_000803cc != 0) {\n        interpolate_values_00080164();\n        calculate_data_000810e8(PTR_DAT_000803c8, PTR_DAT_000803d0);\n        *PTR_DAT_000803cc = 0;\n      }\n      do_nothing_00080f08(10);\n      int time = calculate_time_00081624(3, 1, 20000);\n      int interpolation_point = calculate_interpolation_point_0008145c(time, 1000, 2000, 0x28, 0x96);\n      int* motor_data = PTR_DAT_000803d4;\n      *motor_data = interpolation_point;\n      int interpolation_point2 = calculate_interpolation_point_0008145c(time, 1000, 2000, 0x28, 0x96);\n      int* steer_data = PTR_DAT_000803d8;\n      *steer_data = interpolation_point2;\n      while (calculate_checksum_00081248(PTR_DAT_000803c8) > 0) {\n        read_byte_00081276(PTR_DAT_000803c8);\n        convert_and_process(PTR_DAT_000803c8, *motor_data, 10);\n        process_data_and_return_000810c4(PTR_DAT_000803c8, PTR_DAT_000803dc);\n        sum_of_converted_and_processed_data(PTR_DAT_000803c8, *steer_data, 10);\n      }\n      calculate_interpolation_000806f8(PTR_DAT_000803e0, *steer_data);\n      calculate_interpolation_000806f8(PTR_DAT_000803e4, *motor_data);\n    }\n    else {\n      if (*PTR_DAT_000803cc == 0) {\n        interpolate_values_00080164();\n        calculate_data_000810e8(PTR_DAT_000803c8, PTR_DAT_000803e8);\n      }\n      *PTR_DAT_000803cc = 1;\n      while (calculate_checksum_00081248(PTR_DAT_000803c8) > 0) {\n        byte buffer[12];\n        initialize_and_execute(buffer, PTR_DAT_000803c8, 0x2c);\n        compare_and_copy(PTR_DAT_000803ec, buffer);\n        allocate_memory(buffer);\n        initialize_and_execute(buffer, PTR_DAT_000803c8, 10);\n        compare_and_copy(PTR_DAT_000803f0, buffer);\n        allocate_memory(buffer);\n        read_byte_00081276(PTR_DAT_000803c8);\n        if (check_if_param_is_null_000815b8(PTR_DAT_000803ec, PTR_s_steer_000803f4) == 0) {\n          int steer_value = parse_number_000815de(PTR_DAT_000803f0);\n          *PTR_DAT_000803e4 = steer_value;\n        }\n        if (check_if_param_is_null_000815b8(PTR_DAT_000803ec, PTR_s_motor_000803f8) != 0) {\n          int motor_value = parse_number_000815de(PTR_DAT_000803f0);\n          *PTR_DAT_000803e0 = motor_value;\n        }\n      }\n    }\n  }\n  else {\n    interpolate_values_00080164();\n    calculate_data_000810e8(PTR_DAT_000803c8, PTR_s_error_000803c4);\n  }\n}",
            "called": [
                "FUN_0008117a",
                "FUN_00081014",
                "FUN_000815b8",
                "FUN_000810c4",
                "FUN_0008145c",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_00081214",
                "FUN_00081624",
                "FUN_00081248",
                "FUN_00081560",
                "thunk_FUN_0008113a",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_00080f08",
                "FUN_000806f8",
                "FUN_00081472"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "control_vehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_00080d6a(int base_address, int parameter_value)\n{\n    *(int *)(base_address + 0x28) = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_device_state_000813dc",
                "param_1": "device_state",
                "param_2": "divisor",
                "puVar1": "bit_array",
                "iVar2": "device_info_ptr",
                "puVar3": "device_info",
                "DAT_000813d4": "global_array_pointer",
                "DAT_000813d8": "global_data_pointer"
            },
            "code": "void initialize_device_state_000813dc(int device_state, uint32_t divisor) {\n  uint32_t *bit_array;\n  int device_info_ptr;\n  uint32_t *device_info;\n  check_bit_and_set(*(uint32_t *)(device_state + 0x20));\n  device_info = *(uint32_t **)(device_state + 0x18);\n  device_info[0x48] = 0x202;\n  *device_info = 0xac;\n  bit_array = DAT_000813d4;\n  device_info[1] = 0x800;\n  device_info[8] = *bit_array / divisor >> 4;\n  device_info[3] = 0xffffffff;\n  device_info[2] = 0x61;\n  *(int *)(DAT_000813d8 + ((uint32_t)(int32_t)(char)*(uint8_t *)(device_state + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(uint8_t *)(device_state + 0x1c) & 0x1f);\n  device_info_ptr = *(int *)(device_state + 0x10);\n  *(uint32_t *)(device_info_ptr + 0x84) = 0;\n  *(uint32_t *)(device_info_ptr + 0x80) = 0;\n  device_info_ptr = *(int *)(device_state + 0x14);\n  *(uint32_t *)(device_info_ptr + 0x84) = 0;\n  *(uint32_t *)(device_info_ptr + 0x80) = 0;\n  *device_info = 0x50;\n}",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_device_state_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "has_param5",
                "param_4": "has_param4",
                "param_5": "has_param3",
                "param_1[0x11]": "param_array[17]",
                "param_1[0x18]": "param_array[24]",
                "param_1[0x19]": "param_array[25]",
                "param_1[0x15]": "param_array[21]",
                "param_1[0x14]": "param_array[20]",
                "param_1[0xd]": "param_array[13]",
                "param_1[0xc]": "param_array[12]"
            },
            "code": "void update_parameters_00080a0a(int *param_array, int new_param, int has_param5, int has_param4, int has_param3) {\n  param_array[17] = new_param;\n  if (has_param5 == 0) {\n    param_array[24] = new_param;\n  }\n  else {\n    param_array[25] = new_param;\n  }\n  if (has_param4 == 0) {\n    param_array[21] = new_param;\n  }\n  else {\n    param_array[20] = new_param;\n  }\n  if (has_param3 == 0) {\n    param_array[13] = new_param;\n  }\n  else {\n    param_array[12] = new_param;\n  }\n  param_array[4] = new_param;\n  *param_array = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "update_parameters_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "num_channels",
                "param_3": "tc_configure",
                "uVar3": "combined_params",
                "iVar1": "offset",
                "iVar2": "channel_address"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_id, uint32_t num_channels, char* tc_configure) {\n  uint64_t combined_params = ((uint64_t)num_channels << 32) | channel_id;\n  if (num_channels > 2) {\n    tc_configure = DEFAULT_TC_CONFIG;\n    combined_params = (*DAT_00080b60)(DEFAULT_TC_SOURCE, 0x40, DEFAULT_TC_CONFIG, sizeof(TC_CHANNEL));\n  }\n  uint32_t offset = (uint32_t)(combined_params >> 32) * sizeof(TC_CHANNEL);\n  uint32_t channel_address = (uint32_t)combined_params + offset;\n  *(uint32_t*)(channel_address) = 2;\n  *(uint32_t*)(channel_address + 0x28) = 0xffffffff;\n  *(char**)(channel_address + 0x4) = tc_configure;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_and_run_device_00080774",
                "puVar1": "device_data_ptr",
                "puVar2": "device_parameter_ptr",
                "iVar3": "device_data_index",
                "iVar4": "device_parameter_index",
                "iVar5": "PTR_DEVICE_DATA_INDEX",
                "iVar6": "PTR_DEVICE_DATA_INDEX",
                "iVar7": "device_flag_index",
                "iVar8": "i"
            },
            "code": "void initialize_and_run_device_00080774(void)\n{\n  uint *device_data_ptr;\n  undefined4 *device_parameter_ptr;\n  int device_flag_index;\n  int device_data_index;\n  int device_parameter_index;\n  int i;\n  \n  device_data_ptr = PTR_DEVICE_DATA;\n  initialize_device();\n  device_parameter_ptr = PTR_DEVICE_PARAMETERS;\n  device_parameter_ptr[1] = *device_data_ptr / 1000 - 1;\n  *(undefined *)(PTR_DEVICE_FLAGS + 0x23) = 0xf0;\n  device_parameter_ptr[2] = 0;\n  *device_parameter_ptr = 7;\n  run_all_device_functions();\n  \n  device_flag_index = 0;\n  do {\n    device_data_index = PTR_DEVICE_DATA_INDEX;\n    device_parameter_index = PTR_DEVICE_PARAMETERS_INDEX;\n    process_device_flag(device_flag_index,0);\n    device_parameter_index = PTR_DEVICE_PARAMETERS_INDEX;\n    device_data_index = PTR_DEVICE_DATA_INDEX;\n    device_parameter_index = PTR_DEVICE_PARAMETERS_INDEX;\n    device_flag_index++;\n  } while (device_flag_index != 0x4f);\n  \n  *(undefined4 *)(device_data_index + 0xa0) = 0xffffffff;\n  *(undefined4 *)(device_parameter_index + 0xa0) = 0xffffffff;\n  *(undefined4 *)(device_data_index + 0xa0) = 0xffffffff;\n  *(undefined4 *)(device_data_index + 0xa0) = 0xffffffff;\n  \n  process_device_data(device_data_index,1,0x300,0);\n  process_device_flag(0,1);\n  process_device_data(device_data_index,1,0xc00,0);\n  process_device_data(device_data_index,1,0x3000,0);\n  process_device_data(device_data_index,2,0x30,0);\n  process_device_data(device_parameter_index,1,0xc00,0);\n  process_device_data(device_data_index,1,3,0);\n  process_device_data(device_parameter_index,1,0xc000,0);\n  check_bit_and_set(0x25);\n  find_value_at_index(DAT_00080898,*device_data_ptr,DAT_00080894,0xc);\n  set_bits(DAT_00080898,0,0x300000,1);\n  update_bit_in_memory(DAT_00080898,0,0);\n  set_parameter(DAT_00080898,0xffffffff);\n  set_parameter_to_max(DAT_00080898);\n  return;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00081014",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d62",
                "FUN_00080aa8",
                "FUN_00080b98",
                "FUN_00080d6a",
                "FUN_00080d30",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_and_run_device_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_buffers_00083888",
                "param_1": "buffer_address",
                "puVar1": "pointer1",
                "uVar2": "constant1",
                "puVar3": "pointer2",
                "puVar4": "buffer_label2",
                "puVar5": "buffer1",
                "puVar6": "buffer2",
                "fill_buffer_with_byte_00081f00": "fill_buffer_with_byte",
                "PTR_LAB_0008387c_1_00083968": "buffer_label",
                "PTR_FUN_00084220_1_0008396c": "function_pointer1",
                "PTR_FUN_0008427c_1_00083974": "function_pointer2",
                "PTR_LAB_0008429c_1_00083978": "buffer_label2",
                "DAT_00083970": "constant1"
            },
            "code": "void initialize_buffers_00083888(int buffer_address)\n{\n    if (*(int *)(buffer_address + 0x38) == 0) {\n        undefined4 *buffer1 = *(undefined4 **)(buffer_address + 4);\n        undefined4 *buffer2 = *(undefined4 **)(buffer_address + 8);\n        undefined4 *buffer3 = *(undefined4 **)(buffer_address + 0xc);\n        *(undefined **)(buffer_address + 0x3c) = PTR_LAB_0008387c_1_00083968;\n        *(undefined4 *)(buffer_address + 0x2e4) = 3;\n        *(int *)(buffer_address + 0x2e8) = buffer_address + 0x2ec;\n        *(undefined4 *)(buffer_address + 0x2e0) = 0;\n        *(undefined2 *)(buffer1 + 3) = 4;\n        *buffer1 = 0;\n        buffer1[1] = 0;\n        buffer1[2] = 0;\n        buffer1[0x19] = 0;\n        *(undefined2 *)((int)buffer1 + 0xe) = 0;\n        buffer1[4] = 0;\n        buffer1[5] = 0;\n        buffer1[6] = 0;\n        fill_buffer_with_byte(buffer1 + 0x17, 0, 8);\n        buffer2[7] = buffer2;\n        buffer2[8] = PTR_process_input_and_update_count_00084220_1_0008396c;\n        buffer2[9] = DAT_00083970;\n        buffer2[10] = PTR_process_return_value_and_update_status_0008427c_1_00083974;\n        buffer2[0xb] = PTR_LAB_0008429c_1_00083978;\n        *(undefined2 *)((int)buffer2 + 0xe) = 1;\n        *(undefined2 *)(buffer2 + 3) = 9;\n        *buffer2 = 0;\n        buffer2[1] = 0;\n        buffer2[2] = 0;\n        buffer2[0x19] = 0;\n        buffer2[4] = 0;\n        buffer2[5] = 0;\n        buffer2[6] = 0;\n        fill_buffer_with_byte(buffer2 + 0x17, 0, 8);\n        buffer3[7] = buffer3;\n        buffer3[8] = PTR_process_input_and_update_count_00084220_1_0008396c;\n        buffer3[9] = DAT_00083970;\n        buffer3[10] = PTR_process_return_value_and_update_status_0008427c_1_00083974;\n        buffer3[0xb] = PTR_LAB_0008429c_1_00083978;\n        *(undefined2 *)(buffer3 + 3) = 0x12;\n        *(undefined2 *)((int)buffer3 + 0xe) = 2;\n        *buffer3 = 0;\n        buffer3[1] = 0;\n        buffer3[2] = 0;\n        buffer3[0x19] = 0;\n        buffer3[4] = 0;\n        buffer3[5] = 0;\n        buffer3[6] = 0;\n        fill_buffer_with_byte(buffer3 + 0x17, 0, 8);\n        *(undefined4 *)(buffer_address + 0x38) = 1;\n    }\n}\n",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_000842a4",
                "FUN_00084484",
                "FUN_0008289c",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "initialize_buffers_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_values_00081348",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "puVar1": "pointer_to_pointer"
            },
            "code": "void initialize_values_00081348(undefined4 *array, undefined4 value1, undefined value2, undefined4 value3, undefined4 value4, undefined4 value5)\n{\n  undefined *pointer_to_pointer = PTR_PTR_FUN_000812b8_1_00081368;\n  array[0] = pointer_to_pointer;\n  array[1] = 0;\n  array[2] = 1000;\n  *(undefined *)(array + 7) = value2;\n  array[4] = value4;\n  array[5] = value5;\n  array[6] = value1;\n  array[8] = value3;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "imported": false,
            "current_name": "initialize_values_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_time_00081624",
                "param_1": "index",
                "param_2": "is_active",
                "param_3": "progress",
                "param_4": "param_4",
                "puVar1": "frequency",
                "iVar2": "bit_check",
                "uVar3": "time"
            },
            "code": "int calculate_time_00081624(int index, int is_active, int progress, undefined4 param_4)\n{\n  uint *frequency = DAT_0008167c;\n  undefined4 time = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (is_active == 0) {\n    time = 0;\n  }\n  int bit_check = check_bits_00081684(*(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c, *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4), time, ((*frequency / DAT_00081680) * progress) / 0x12, param_4);\n  if (bit_check != 0) {\n    bit_check = (int)((ulonglong)(bit_check * 18000 + 16000) / ((ulonglong)*frequency / 1000));\n  }\n  return bit_check;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_time_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_pointer_00080ec8",
                "param_1": "target_ptr",
                "param_2": "source_ptr",
                "param_3": "num_bytes",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_to_pointer_00080ec8(uint *target_ptr, char *source_ptr, uint num_bytes) {\n  int i;\n  for (i = 0; i < (int)num_bytes; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(source_ptr + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_pointer_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "sum_of_converted_and_processed_data_0008117a",
                "param_1": "input_data",
                "iVar1": "converted_data",
                "iVar2": "processed_data",
                "convert_base_and_process_0008113a": "convert_base_and_process",
                "process_data_wrapper_000810d8": "process_data_wrapper"
            },
            "code": "int sum_of_converted_and_processed_data_0008117a(int input_data)\n{\n  int converted_data = convert_base_and_process_0008113a();\n  int processed_data = process_data_wrapper_000810d8(input_data);\n  return processed_data + converted_data;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "sum_of_converted_and_processed_data_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initialize_device_and_process_data_000801e0",
                "param_1": "device_state",
                "param_2": "device_id",
                "param_3": "param_3",
                "param_4": "param_4",
                "initialize_device_state_000813dc": "initialize_device_state",
                "process_data_00080f0c": "process_data",
                "interpolate_values_00080164": "interpolate_values",
                "do_nothing_00080f08": "do_nothing",
                "PTR_DAT_00080244": "PTR_DAT_00080244",
                "PTR_DAT_00080248": "PTR_DAT_00080248",
                "PTR_DAT_0008024c": "PTR_DAT_0008024c",
                "PTR_DAT_00080160": "PTR_DAT_00080160",
                "software_interrupt": "software_interrupt"
            },
            "code": "int initialize_device_and_process_data_000801e0(int device_state, int device_id, int param_3, int param_4) {\n\tinitialize_device_state(device_state, device_id, param_3, param_4);\n\tprocess_data(0xd, 1);\n\tprocess_data(6, 1);\n\tprocess_data(0x39, 0);\n\tprocess_data(4, 0);\n\tprocess_data(3, 0);\n\tprocess_data(2, 0);\n\tprocess_data(PTR_DAT_00080248, 5);\n\tprocess_data(PTR_DAT_0008024c, 6);\n\tinterpolate_values();\n\tdo_nothing(1000);\n\tif (*(int *)PTR_DAT_00080160 == 0) {\n\t\tsoftware_interrupt(0x3f);\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_device_and_process_data_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "param_1": "buffer_address",
                "fill_buffer_with_byte_00081f00": "fill_buffer_with_byte",
                "0": "FILL_VALUE",
                "0x80": "BUFFER_SIZE",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + BUFFER_SIZE)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + BUFFER_SIZE + sizeof(int))"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    const int BUFFER_SIZE = 128;\n    const int FILL_VALUE = 0;\n    const int END_OF_BUFFER = 0;\n    const int SECOND_LAST_BYTE = 4;\n\n    fill_buffer_with_byte(buffer_address, FILL_VALUE, BUFFER_SIZE);\n    *(int *)(buffer_address + BUFFER_SIZE) = END_OF_BUFFER;\n    *(int *)(buffer_address + BUFFER_SIZE + sizeof(int)) = SECOND_LAST_BYTE;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "execute_function_with_data_pointer_000817f0",
                "param_1": "parameter",
                "FUNC_00081810": "call_function_with_data_pointer",
                "*DAT_000817fc": "data_pointer"
            },
            "code": "void execute_function_with_*execute_function_with_data_pointer_000817f0(int* *execute_function_with_data_pointer_000817f0, int parameter){\n  call_function_with_*execute_function_with_data_pointer_000817f0(**execute_function_with_data_pointer_000817f0, parameter);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_pointer_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_point_0008145c",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "param_5": "x"
            },
            "code": "int calculate_interpolation_point_0008145c(int x1, int x2, int y1, int y2, int x) {\n    int y = ((x - x1) * (y2 - y1)) / (x2 - x1) + y1;\n    return y;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_interpolation_point_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "is_one_00080eba"
            },
            "code": "#include <stdbool.h>\n\nbool is_one_00080eba() {\n  return true;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "is_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00083a74"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00081e34(piVar9,param_2);\n      }\n      allocate_memory_from_heap_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_from_heap_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if (count != -1) {\n    count--;\n    *DAT_000811a8 = count;\n    if (count == 0) {\n      (*DAT_000811ac)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "parameters",
                "param_2": "new_param_value",
                "param_3": "param_flags",
                "bVar1": "is_flagged",
                "bVar2": "is_set",
                "bVar3": "is_flagged2"
            },
            "code": "void update_parameters_000809e4(uint32_t *parameters, uint32_t new_param_value, uint32_t param_flags) {\n    bool is_flagged = (int)(param_flags << 0x1f) < 0;\n    parameters[0x11] = new_param_value;\n    if (is_flagged) {\n        parameters[0x19] = new_param_value;\n    }\n    if (!is_flagged) {\n        parameters[0x18] = new_param_value;\n    }\n    bool is_set = (param_flags & 0xA) != 0;\n    if (is_set) {\n        parameters[8] = new_param_value;\n    }\n    if (!is_set) {\n        parameters[9] = new_param_value;\n    }\n    bool is_flagged2 = ((int)(param_flags << 0x1e) < 0) || ((int)(param_flags << 0x1c) < 0);\n    if (is_flagged2) {\n        parameters[0x20] = new_param_value;\n    }\n    parameters[5] = new_param_value;\n    *parameters = new_param_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_parameters_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "returnZero_00080ebe"
            },
            "code": "int returnZero_00080ebe() {\n\tint result = 0;\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "returnZero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "undefined4": "int",
                "*": "*",
                "PTR_DAT_000816e0": "ptr_to_data",
                "return": "return",
                "value": "value"
            },
            "code": "int get_value_from_pointer_thunk_000816d8() {\n    int* PTR_DAT_000816e0 = PTR_DAT_000816e0;\n    int value = *PTR_DAT_000816e0;\n    return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getValueFromPointer_000816d8",
                "PTR_DAT_000816e0": "ptr"
            },
            "code": "getValueFromPointer_000816d8() {\n    int *PTR_DAT_000816e0 = PTR_DAT_000816e0;\n    return *PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_if_param_is_null_000815b8",
                "param_1": "buffer",
                "param_2": "data",
                "uVar1": "length",
                "iVar2": "result"
            },
            "code": "int check_if_param_is_null_000815b8(byte **buffer, byte *data) {\n  uint length;\n  int result;\n\n  if (buffer[2] == NULL) {\n    if (data == NULL) {\n      return 1;\n    }\n  }\n  else {\n    if (data != NULL) {\n      length = get_buffer_length(*buffer);\n      goto LAB_000815d4;\n    }\n    data = *buffer;\n  }\n  length = (uint)*data;\nLAB_000815d4:\n  result = 1 - length;\n  if (length > 1) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_if_param_is_null_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "process_input_and_update_count_00084220",
                "param_1": "input_buffer",
                "param_2": "buffer_offset",
                "iVar1": "input_processing_result",
                "count_ptr": "count",
                "flag_ptr": "flag"
            },
            "code": "void process_input_and_update_count_00084220(void* input_buffer, int buffer_offset) {\n  int input_length = (int)*(short *)(buffer_offset + 0xe);\n  int input_processing_result = process_input_00084508(input_buffer, input_length);\n  if (input_processing_result >= 0) {\n    int* count_ptr = (int *)(buffer_offset + 0x50);\n    *count_ptr += input_processing_result;\n    return;\n  }\n  ushort* flag_ptr = (ushort *)(buffer_offset + 0xc);\n  *flag_ptr &= 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_count_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "allocate_memory_00081472",
                "param_1": "memory_size",
                "*param_1": "*memory_size",
                "allocate_memory_from_heap_00081800": "allocate_memory_from_heap"
            },
            "code": "void allocate_memory_00081472(int *memory_size){\n    /* Allocate memory from the heap */\n    /* using the provided memory size */\n    malloc(*memory_size);\n}\n\nint *allocate_memory_00081472(int *memory_size){\n    allocate_memory_00081472(memory_size);\n    return memory_size;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "process_data_000836ec",
                "uVar1": "exit_status",
                "puVar2": "data_array",
                "iVar3": "data_array_index",
                "iVar4": "data_ptr",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836d0": "data_pointer",
                "DAT_000836d4": "enable_data_execution",
                "execute_function_with_data_pointer_000817f0": "execute_function_with_data_pointer",
                "code": "function_pointer"
            },
            "code": "// Function to process data\nvoid process_data_000836ec()\n{\n  int exit_status = 1;\n  int *data_ptr = *(int **)PTR_DAT_000836d0;\n  undefined4 *data_array = *(undefined4 **)(data_ptr + 0x148);\n  if (data_array == (undefined4 *)0x0) {\n    data_array = (undefined4 *)(data_ptr + 0x14c);\n    *(undefined4 **)(data_ptr + 0x148) = data_array;\n  }\n  int data_array_index = data_array[1];\n  if (0x1f < data_array_index) {\n    if ((DAT_000836d4 == 0) ||\n       (execute_function_with_PTR_DAT_000836d0(400) == (undefined4 *)0x0)) {\n      exit_with_status(exit_status);\n      return;\n    }\n    *execute_function_with_PTR_DAT_000836d0(400) = *(undefined4 *)(data_ptr + 0x148);\n    execute_function_with_PTR_DAT_000836d0(400)[1] = 0;\n    data_array_index = 0;\n    *(undefined4 **)(data_ptr + 0x148) = execute_function_with_PTR_DAT_000836d0(400);\n    execute_function_with_PTR_DAT_000836d0(400)[0x62] = 0;\n    execute_function_with_PTR_DAT_000836d0(400)[99] = 0;\n  }\n  data_array[1] = data_array_index + 1;\n  data_array[data_array_index + 2] = exit_status;\n  jump_table(0);\n  return;\n}\n",
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "call_function_with_four_params_and_two_pointers_00081750",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "ptr_param3",
                "param_4": "ptr_param4",
                "uStack_8": "local_param3",
                "uStack_4": "local_param4",
                "*DAT_00081774": "function_with_four_params_and_two_pointers"
            },
            "code": "void call_*call_function_with_four_params_and_two_pointers_00081750(int param1, int param2, int* ptr_param3, int* ptr_param4) {\n  int local_param3 = *ptr_param3;\n  int local_param4 = *ptr_param4;\n  *call_function_with_four_params_and_two_pointers_00081750(local_param3, param1, param2, &local_param4);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "call_function_with_four_params_and_two_pointers_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_until_null_00082688",
                "param_1": "address",
                "iVar1": "byteCount",
                "puVar2": "addressPtr",
                "uVar3": "value",
                "bVar4": "isNullByteFound"
            },
            "code": "int count_bytes_until_null_00082688(uint address)\n{\n    int byteCount = 0;\n    uint *addressPtr;\n    uint value;\n    bool isNullByteFound;\n\n    addressPtr = (uint *)(address & 0xfffffffc);\n    byteCount = -(address & 3);\n    value = *addressPtr;\n    if ((address & 3) != 0) {\n        value = value | 0xffffffffU >> ((byteCount + 4U & 0x1f) << 3);\n    }\n    while (addressPtr++, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n        byteCount += 4;\n        value = *addressPtr;\n    }\n    isNullByteFound = (value & 0xff) == 0;\n    if (!isNullByteFound) {\n        byteCount++;\n        isNullByteFound = (value & 0xff00) == 0;\n    }\n    if (!isNullByteFound) {\n        byteCount++;\n        isNullByteFound = (value & 0xff0000) == 0;\n    }\n    if (!isNullByteFound) {\n        byteCount++;\n    }\n    return byteCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "process_input_00084508",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_input_00084508(int *output, undefined4 input_1, undefined4 input_2, undefined4 input_3) {\n  undefined *data_ptr = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  int result = return_zero_00080ec2(input_1, input_2, input_3);\n  if ((result == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "process_input_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flags",
                "bVar1": "is_negative"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, unsigned int flags) {\n    bool is_negative = (int)(flags << 0x1f) < 0;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*data_ptr)(data_type, data_value, data_ptr);\n            *(int *)(data_ptr + 0x44) = data_value;\n            if (is_negative) {\n                *(int *)(data_ptr + 100) = data_value;\n            }\n            else {\n                *(int *)(data_ptr + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*data_ptr)(data_value, flags, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*data_ptr)(data_value, data_type == 5, (flags << 0x1d) >> 0x1f, flags & 1, data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_000809e4",
                "FUN_00080a0a",
                "FUN_000809be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_buffer_and_write_data_0008089c",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "puVar1": "buffer1",
                "puVar2": "buffer2",
                "puVar3": "buffer3",
                "puVar4": "buffer4",
                "puVar5": "buffer5",
                "puVar6": "buffer6",
                "PTR_DAT_00080930": "original_ptr1",
                "PTR_DAT_00080934": "original_ptr2",
                "PTR_DAT_00080940": "buffer4",
                "DAT_00080938": "original_data1",
                "PTR_DAT_00080944": "original_ptr4",
                "PTR_DAT_00080948": "original_ptr7",
                "PTR_DAT_0008094c": "original_ptr8",
                "PTR_DAT_00080954": "original_ptr9",
                "DAT_00080950": "original_data2",
                "PTR_DAT_0008095c": "original_ptr10",
                "DAT_00080958": "original_data3",
                "PTR_DAT_00080964": "original_ptr11",
                "DAT_00080960": "original_data4",
                "PTR_DAT_00080968": "original_ptr5",
                "PTR_DAT_0008096c": "original_ptr6",
                "initialize_buffer_000811b0": "initialize_buffer",
                "initialize_values_00081348": "initialize_values",
                "write_data_to_buffer_00081438": "write_data_to_buffer"
            },
            "code": "void initialize_buffer_and_write_data_0008089c(undefined4 data1, undefined4 data2, undefined4 data3) {\n  undefined *buffer1;\n  undefined *buffer2;\n  undefined *buffer3;\n  undefined *PTR_DAT_00080940;\n  undefined *buffer5;\n  undefined *buffer6;\n  \n  buffer2 = PTR_DAT_00080934;\n  buffer1 = PTR_DAT_00080930;\n  initialize_buffer(buffer1);\n  initialize_buffer(buffer2);\n  buffer5 = PTR_DAT_00080968;\n  buffer3 = original_ptr3;\n  initialize_values(PTR_DAT_00080940, DAT_00080938, 8, 8, buffer1, buffer2, data3);\n  buffer1 = PTR_DAT_00080944;\n  initialize_buffer(buffer5);\n  buffer6 = PTR_DAT_0008096c;\n  initialize_buffer(buffer3);\n  buffer2 = PTR_DAT_00080948;\n  initialize_buffer(buffer1);\n  PTR_DAT_00080940 = PTR_DAT_0008094c;\n  initialize_buffer(buffer6);\n  initialize_buffer(buffer2);\n  initialize_buffer(PTR_DAT_00080940);\n  write_data_to_buffer(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, buffer5, buffer6);\n  write_data_to_buffer(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, buffer3, buffer2);\n  write_data_to_buffer(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, buffer1, PTR_DAT_00080940);\n  return;\n}",
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_buffer_and_write_data_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "uVar1": "bytes_until_null",
                "*param_1": "*data_ptr",
                "*(code **)(*param_1 + 4)": "*(void (**)(int *, int, undefined4, void *, undefined4))(*data_ptr + 4)",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void process_data_000810a6(int *data_ptr, int data_length, undefined4 param_3, undefined4 param_4)\n{\n    undefined4 bytes_until_null = 0;\n    if (data_length != 0) {\n        bytes_until_null = count_bytes_until_null(data_length);\n        void (*function_ptr)(int *, int, undefined4, void *, undefined4) = *(void (**)(int *, int, undefined4, void *, undefined4))(*data_ptr + 4);\n        function_ptr(data_ptr, data_length, bytes_until_null, function_ptr, param_4);\n    }\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810e8",
                "FUN_000810fc"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 111072,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080e80",
            "FUN_00080d62",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_00080eb0",
            "FUN_0008439c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_000815de",
            "FUN_0008400c",
            "FUN_00080c20",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_00080d3e",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080d58",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_0008458c",
            "FUN_000811ca",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080d6a",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080ec2",
            "FUN_00081348",
            "FUN_00080ec8",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00080a30"
        ],
        [
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000803fc",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000841e4",
            "FUN_000844bc",
            "FUN_00081438",
            "FUN_0008434c",
            "FUN_00081496",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000813dc",
            "FUN_00083888",
            "FUN_00081624",
            "FUN_000811b0",
            "FUN_00084508",
            "FUN_000810a6"
        ],
        [
            "FUN_00083a74",
            "FUN_0008427c",
            "FUN_00084018",
            "FUN_000810d8",
            "FUN_000806a0",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081014",
            "FUN_000814ae",
            "FUN_000810c4",
            "FUN_000810fc",
            "FUN_00084220",
            "FUN_000836ec",
            "FUN_0008089c"
        ],
        [
            "FUN_00083b10",
            "thunk_FUN_0008113a",
            "FUN_00081570",
            "FUN_0008113a",
            "FUN_0008044c",
            "FUN_000810e8",
            "FUN_000816f8",
            "FUN_00080774",
            "FUN_000801e0"
        ],
        [
            "FUN_00083850",
            "FUN_0008356c",
            "FUN_00081800",
            "FUN_0008159e",
            "FUN_0008117a"
        ],
        [
            "FUN_000842a4",
            "FUN_000834f0",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_00084484",
            "FUN_00081472"
        ],
        [
            "FUN_00081560",
            "FUN_000839b4",
            "FUN_000814d0"
        ],
        [
            "FUN_000814f6",
            "FUN_00082824"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}